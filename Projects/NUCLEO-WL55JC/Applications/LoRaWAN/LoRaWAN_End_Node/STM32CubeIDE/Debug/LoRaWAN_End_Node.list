
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011090  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  080111c8  080111c8  000211c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f94  08011f94  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  08011f94  08011f94  00021f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f9c  08011f9c  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f9c  08011f9c  00021f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fa0  08011fa0  00021fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08011fa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001990  200000d8  0801207c  000300d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001a68  0801207c  00031a68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00078844  00000000  00000000  00030102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cebf  00000000  00000000  000a8946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00022df0  00000000  00000000  000b5805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a40  00000000  00000000  000d85f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002be8  00000000  00000000  000db038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d1f6  00000000  00000000  000ddc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c5cd  00000000  00000000  0010ae16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b27  00000000  00000000  001573e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0023af0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077a8  00000000  00000000  0023af60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200000d8 	.word	0x200000d8
 8000154:	00000000 	.word	0x00000000
 8000158:	080111b0 	.word	0x080111b0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200000dc 	.word	0x200000dc
 8000174:	080111b0 	.word	0x080111b0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_ADC_Init+0x50>)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_ADC_Init+0x54>)
 8000e56:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e5c:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e62:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e64:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	2204      	movs	r2, #4
 8000e68:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e6a:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e6c:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e6e:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000e70:	2201      	movs	r2, #1
 8000e72:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e74:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e84:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000e86:	2207      	movs	r2, #7
 8000e88:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000e8a:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000e8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e90:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e92:	f001 f9f9 	bl	8002288 <HAL_ADC_Init>
 8000e96:	b900      	cbnz	r0, 8000e9a <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e98:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e9a:	f000 f8fe 	bl	800109a <Error_Handler>
}
 8000e9e:	e7fb      	b.n	8000e98 <MX_ADC_Init+0x48>
 8000ea0:	20001818 	.word	0x20001818
 8000ea4:	40012400 	.word	0x40012400

08000ea8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000ea8:	6802      	ldr	r2, [r0, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_ADC_MspInit+0x28>)
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d000      	beq.n	8000eb2 <HAL_ADC_MspInit+0xa>
 8000eb0:	4770      	bx	lr
{
 8000eb2:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ebe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ec8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000eca:	b002      	add	sp, #8
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40012400 	.word	0x40012400

08000ed4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000ed4:	6802      	ldr	r2, [r0, #0]
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_ADC_MspDeInit+0x18>)
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d000      	beq.n	8000ede <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000edc:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee2:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	e7f7      	b.n	8000edc <HAL_ADC_MspDeInit+0x8>
 8000eec:	40012400 	.word	0x40012400

08000ef0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000ef0:	b530      	push	{r4, r5, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000efe:	f7ff ffa7 	bl	8000e50 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f02:	4816      	ldr	r0, [pc, #88]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f04:	f001 fdf2 	bl	8002aec <HAL_ADCEx_Calibration_Start>
 8000f08:	b9f8      	cbnz	r0, 8000f4a <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f0a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f10:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f12:	a901      	add	r1, sp, #4
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f16:	f001 fb4f 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000f1a:	b9c8      	cbnz	r0, 8000f50 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f1c:	480f      	ldr	r0, [pc, #60]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f1e:	f001 fcf5 	bl	800290c <HAL_ADC_Start>
 8000f22:	b9c0      	cbnz	r0, 8000f56 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f24:	4c0d      	ldr	r4, [pc, #52]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f26:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f001 fae2 	bl	80024f4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000f30:	4620      	mov	r0, r4
 8000f32:	f001 fdbb 	bl	8002aac <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f36:	4620      	mov	r0, r4
 8000f38:	f001 fb3b 	bl	80025b2 <HAL_ADC_GetValue>
 8000f3c:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f001 fd60 	bl	8002a04 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f44:	4628      	mov	r0, r5
 8000f46:	b005      	add	sp, #20
 8000f48:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000f4a:	f000 f8a6 	bl	800109a <Error_Handler>
 8000f4e:	e7dc      	b.n	8000f0a <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000f50:	f000 f8a3 	bl	800109a <Error_Handler>
 8000f54:	e7e2      	b.n	8000f1c <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000f56:	f000 f8a0 	bl	800109a <Error_Handler>
 8000f5a:	e7e3      	b.n	8000f24 <ADC_ReadChannels+0x34>
 8000f5c:	20001818 	.word	0x20001818

08000f60 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <SYS_InitMeasurement+0x8>)
 8000f62:	4a02      	ldr	r2, [pc, #8]	; (8000f6c <SYS_InitMeasurement+0xc>)
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	4770      	bx	lr
 8000f68:	20001818 	.word	0x20001818
 8000f6c:	40012400 	.word	0x40012400

08000f70 <SYS_GetBatteryLevel>:
{
 8000f70:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <SYS_GetBatteryLevel+0x38>)
 8000f74:	f7ff ffbc 	bl	8000ef0 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000f78:	b198      	cbz	r0, 8000fa2 <SYS_GetBatteryLevel+0x32>
 8000f7a:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <SYS_GetBatteryLevel+0x3c>)
 8000f7e:	8812      	ldrh	r2, [r2, #0]
 8000f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f84:	428a      	cmp	r2, r1
 8000f86:	d007      	beq.n	8000f98 <SYS_GetBatteryLevel+0x28>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000f88:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000f8c:	fb00 f002 	mul.w	r0, r0, r2
 8000f90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f94:	b280      	uxth	r0, r0
 8000f96:	e005      	b.n	8000fa4 <SYS_GetBatteryLevel+0x34>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <SYS_GetBatteryLevel+0x40>)
 8000f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f9e:	b280      	uxth	r0, r0
 8000fa0:	e000      	b.n	8000fa4 <SYS_GetBatteryLevel+0x34>
    batteryLevelmV = 0;
 8000fa2:	2000      	movs	r0, #0
}
 8000fa4:	bd08      	pop	{r3, pc}
 8000fa6:	bf00      	nop
 8000fa8:	b4002000 	.word	0xb4002000
 8000fac:	1fff75aa 	.word	0x1fff75aa
 8000fb0:	004c08d8 	.word	0x004c08d8

08000fb4 <SYS_GetTemperatureLevel>:
{
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b083      	sub	sp, #12
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fb8:	f7ff ffda 	bl	8000f70 <SYS_GetBatteryLevel>
 8000fbc:	4605      	mov	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fbe:	481f      	ldr	r0, [pc, #124]	; (800103c <SYS_GetTemperatureLevel+0x88>)
 8000fc0:	f7ff ff96 	bl	8000ef0 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <SYS_GetTemperatureLevel+0x8c>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <SYS_GetTemperatureLevel+0x90>)
 8000fca:	8812      	ldrh	r2, [r2, #0]
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d01a      	beq.n	8001006 <SYS_GetTemperatureLevel+0x52>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fd0:	fb00 f005 	mul.w	r0, r0, r5
 8000fd4:	0880      	lsrs	r0, r0, #2
 8000fd6:	4c1c      	ldr	r4, [pc, #112]	; (8001048 <SYS_GetTemperatureLevel+0x94>)
 8000fd8:	fba4 1400 	umull	r1, r4, r4, r0
 8000fdc:	ebc2 1054 	rsb	r0, r2, r4, lsr #5
 8000fe0:	2464      	movs	r4, #100	; 0x64
 8000fe2:	fb04 f400 	mul.w	r4, r4, r0
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	fb94 f4f3 	sdiv	r4, r4, r3
 8000fec:	341e      	adds	r4, #30
 8000fee:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000ff0:	9400      	str	r4, [sp, #0]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <SYS_GetTemperatureLevel+0x98>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f00f fa8d 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 8000ffe:	0220      	lsls	r0, r4, #8
}
 8001000:	b200      	sxth	r0, r0
 8001002:	b003      	add	sp, #12
 8001004:	bd30      	pop	{r4, r5, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001006:	fb00 f005 	mul.w	r0, r0, r5
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <SYS_GetTemperatureLevel+0x9c>)
 800100c:	fba3 2300 	umull	r2, r3, r3, r0
 8001010:	1ac0      	subs	r0, r0, r3
 8001012:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8001016:	0ac0      	lsrs	r0, r0, #11
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	fb03 f300 	mul.w	r3, r3, r0
 8001020:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001024:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <SYS_GetTemperatureLevel+0xa0>)
 800102a:	fb80 2003 	smull	r2, r0, r0, r3
 800102e:	17dc      	asrs	r4, r3, #31
 8001030:	ebc4 24a0 	rsb	r4, r4, r0, asr #10
 8001034:	341e      	adds	r4, #30
 8001036:	b224      	sxth	r4, r4
 8001038:	e7da      	b.n	8000ff0 <SYS_GetTemperatureLevel+0x3c>
 800103a:	bf00      	nop
 800103c:	b0001000 	.word	0xb0001000
 8001040:	1fff75c8 	.word	0x1fff75c8
 8001044:	1fff75a8 	.word	0x1fff75a8
 8001048:	09ee009f 	.word	0x09ee009f
 800104c:	08011244 	.word	0x08011244
 8001050:	00100101 	.word	0x00100101
 8001054:	68db8bad 	.word	0x68db8bad

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001058:	b500      	push	{lr}
 800105a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001062:	f042 0204 	orr.w	r2, r2, #4
 8001066:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001068:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800106a:	f002 0204 	and.w	r2, r2, #4
 800106e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001070:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001074:	f042 0201 	orr.w	r2, r2, #1
 8001078:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800107a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001082:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2102      	movs	r1, #2
 8001088:	200f      	movs	r0, #15
 800108a:	f001 fd91 	bl	8002bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800108e:	200f      	movs	r0, #15
 8001090:	f001 fdc2 	bl	8002c18 <HAL_NVIC_EnableIRQ>

}
 8001094:	b003      	add	sp, #12
 8001096:	f85d fb04 	ldr.w	pc, [sp], #4

0800109a <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x2>

0800109e <SystemClock_Config>:
{
 800109e:	b510      	push	{r4, lr}
 80010a0:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	2248      	movs	r2, #72	; 0x48
 80010a4:	2100      	movs	r1, #0
 80010a6:	a808      	add	r0, sp, #32
 80010a8:	f00f fffa 	bl	80110a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	2400      	movs	r4, #0
 80010ae:	9401      	str	r4, [sp, #4]
 80010b0:	9402      	str	r4, [sp, #8]
 80010b2:	9403      	str	r4, [sp, #12]
 80010b4:	9404      	str	r4, [sp, #16]
 80010b6:	9405      	str	r4, [sp, #20]
 80010b8:	9406      	str	r4, [sp, #24]
 80010ba:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80010bc:	f002 f99e 	bl	80033fc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80010c8:	f023 0318 	bic.w	r3, r3, #24
 80010cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010ea:	2324      	movs	r3, #36	; 0x24
 80010ec:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010ee:	2381      	movs	r3, #129	; 0x81
 80010f0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010f6:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010f8:	23b0      	movs	r3, #176	; 0xb0
 80010fa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	a808      	add	r0, sp, #32
 8001100:	f002 fb14 	bl	800372c <HAL_RCC_OscConfig>
 8001104:	b970      	cbnz	r0, 8001124 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001106:	234f      	movs	r3, #79	; 0x4f
 8001108:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800110a:	2300      	movs	r3, #0
 800110c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001114:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001116:	2102      	movs	r1, #2
 8001118:	a801      	add	r0, sp, #4
 800111a:	f002 fe43 	bl	8003da4 <HAL_RCC_ClockConfig>
 800111e:	b918      	cbnz	r0, 8001128 <SystemClock_Config+0x8a>
}
 8001120:	b01a      	add	sp, #104	; 0x68
 8001122:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001124:	f7ff ffb9 	bl	800109a <Error_Handler>
    Error_Handler();
 8001128:	f7ff ffb7 	bl	800109a <Error_Handler>

0800112c <main>:
{
 800112c:	b508      	push	{r3, lr}
  HAL_Init();
 800112e:	f001 f843 	bl	80021b8 <HAL_Init>
  SystemClock_Config();
 8001132:	f7ff ffb4 	bl	800109e <SystemClock_Config>
  MX_LoRaWAN_Init();
 8001136:	f000 fc8d 	bl	8001a54 <MX_LoRaWAN_Init>
	  MX_LoRaWAN_Process();
 800113a:	f000 fc91 	bl	8001a60 <MX_LoRaWAN_Process>
  while (1)
 800113e:	e7fc      	b.n	800113a <main+0xe>

08001140 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001140:	b500      	push	{lr}
 8001142:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001144:	222c      	movs	r2, #44	; 0x2c
 8001146:	2100      	movs	r1, #0
 8001148:	a801      	add	r0, sp, #4
 800114a:	f00f ffa9 	bl	80110a0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800114e:	4819      	ldr	r0, [pc, #100]	; (80011b4 <MX_RTC_Init+0x74>)
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_RTC_Init+0x78>)
 8001152:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001154:	231f      	movs	r3, #31
 8001156:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800115c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800115e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001160:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001164:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001166:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800116e:	f003 f975 	bl	800445c <HAL_RTC_Init>
 8001172:	b9a8      	cbnz	r0, 80011a0 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <MX_RTC_Init+0x74>)
 8001176:	f003 faab 	bl	80046d0 <HAL_RTCEx_SetSSRU_IT>
 800117a:	b9a0      	cbnz	r0, 80011a6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800117c:	2200      	movs	r2, #0
 800117e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001180:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001182:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001184:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001188:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800118a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001190:	a901      	add	r1, sp, #4
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <MX_RTC_Init+0x74>)
 8001194:	f003 f9c0 	bl	8004518 <HAL_RTC_SetAlarm_IT>
 8001198:	b940      	cbnz	r0, 80011ac <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119a:	b00d      	add	sp, #52	; 0x34
 800119c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011a0:	f7ff ff7b 	bl	800109a <Error_Handler>
 80011a4:	e7e6      	b.n	8001174 <MX_RTC_Init+0x34>
    Error_Handler();
 80011a6:	f7ff ff78 	bl	800109a <Error_Handler>
 80011aa:	e7e7      	b.n	800117c <MX_RTC_Init+0x3c>
    Error_Handler();
 80011ac:	f7ff ff75 	bl	800109a <Error_Handler>
}
 80011b0:	e7f3      	b.n	800119a <MX_RTC_Init+0x5a>
 80011b2:	bf00      	nop
 80011b4:	2000187c 	.word	0x2000187c
 80011b8:	40002800 	.word	0x40002800

080011bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011bc:	b510      	push	{r4, lr}
 80011be:	b090      	sub	sp, #64	; 0x40
 80011c0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c2:	2238      	movs	r2, #56	; 0x38
 80011c4:	2100      	movs	r1, #0
 80011c6:	a802      	add	r0, sp, #8
 80011c8:	f00f ff6a 	bl	80110a0 <memset>
  if(rtcHandle->Instance==RTC)
 80011cc:	6822      	ldr	r2, [r4, #0]
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_RTC_MspInit+0x7c>)
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011d4:	b010      	add	sp, #64	; 0x40
 80011d6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	a802      	add	r0, sp, #8
 80011e6:	f002 ff31 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	bb08      	cbnz	r0, 8001230 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80011f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001202:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800120c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	4611      	mov	r1, r2
 8001212:	2002      	movs	r0, #2
 8001214:	f001 fccc 	bl	8002bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001218:	2002      	movs	r0, #2
 800121a:	f001 fcfd 	bl	8002c18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	4611      	mov	r1, r2
 8001222:	202a      	movs	r0, #42	; 0x2a
 8001224:	f001 fcc4 	bl	8002bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001228:	202a      	movs	r0, #42	; 0x2a
 800122a:	f001 fcf5 	bl	8002c18 <HAL_NVIC_EnableIRQ>
}
 800122e:	e7d1      	b.n	80011d4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001230:	f7ff ff33 	bl	800109a <Error_Handler>
 8001234:	e7da      	b.n	80011ec <HAL_RTC_MspInit+0x30>
 8001236:	bf00      	nop
 8001238:	40002800 	.word	0x40002800

0800123c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800123c:	4770      	bx	lr

0800123e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800123e:	4770      	bx	lr

08001240 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001242:	f000 ffcf 	bl	80021e4 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001246:	2001      	movs	r0, #1
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <PWR_EnterStopMode+0x14>)
 800124a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800124e:	f002 f939 	bl	80034c4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001252:	bd08      	pop	{r3, pc}
 8001254:	58000400 	.word	0x58000400

08001258 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001258:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800125a:	f000 ffcb 	bl	80021f4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800125e:	bd08      	pop	{r3, pc}

08001260 <PWR_ExitStopMode>:
{
 8001260:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001262:	f000 ffc7 	bl	80021f4 <HAL_ResumeTick>
  vcom_Resume();
 8001266:	f000 fbc3 	bl	80019f0 <vcom_Resume>
}
 800126a:	bd08      	pop	{r3, pc}

0800126c <PWR_EnterSleepMode>:
{
 800126c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800126e:	f000 ffb9 	bl	80021e4 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001272:	2101      	movs	r1, #1
 8001274:	2000      	movs	r0, #0
 8001276:	f002 f8c9 	bl	800340c <HAL_PWR_EnterSLEEPMode>
}
 800127a:	bd08      	pop	{r3, pc}

0800127c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	4770      	bx	lr

0800127e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127e:	e7fe      	b.n	800127e <NMI_Handler>

08001280 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <HardFault_Handler>

08001282 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <MemManage_Handler>

08001284 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <BusFault_Handler>

08001286 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <UsageFault_Handler>

08001288 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	4770      	bx	lr

0800128c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	4770      	bx	lr

08001290 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001292:	4802      	ldr	r0, [pc, #8]	; (800129c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001294:	f003 fa48 	bl	8004728 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001298:	bd08      	pop	{r3, pc}
 800129a:	bf00      	nop
 800129c:	2000187c 	.word	0x2000187c

080012a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f002 f89c 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012a8:	bd08      	pop	{r3, pc}

080012aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012aa:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012ac:	2002      	movs	r0, #2
 80012ae:	f002 f897 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012b2:	bd08      	pop	{r3, pc}

080012b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA1_Channel5_IRQHandler+0xc>)
 80012b8:	f001 fec4 	bl	8003044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012bc:	bd08      	pop	{r3, pc}
 80012be:	bf00      	nop
 80012c0:	200018c0 	.word	0x200018c0

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c6:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USART2_IRQHandler+0xc>)
 80012c8:	f003 feee 	bl	80050a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012cc:	bd08      	pop	{r3, pc}
 80012ce:	bf00      	nop
 80012d0:	20001920 	.word	0x20001920

080012d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80012d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012d6:	4802      	ldr	r0, [pc, #8]	; (80012e0 <RTC_Alarm_IRQHandler+0xc>)
 80012d8:	f003 f83a 	bl	8004350 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80012dc:	bd08      	pop	{r3, pc}
 80012de:	bf00      	nop
 80012e0:	2000187c 	.word	0x2000187c

080012e4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80012e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80012e6:	4802      	ldr	r0, [pc, #8]	; (80012f0 <SUBGHZ_Radio_IRQHandler+0xc>)
 80012e8:	f003 fccc 	bl	8004c84 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80012ec:	bd08      	pop	{r3, pc}
 80012ee:	bf00      	nop
 80012f0:	200018b4 	.word	0x200018b4

080012f4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80012f4:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_SUBGHZ_Init+0x18>)
 80012f8:	2308      	movs	r3, #8
 80012fa:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80012fc:	f003 fa4a 	bl	8004794 <HAL_SUBGHZ_Init>
 8001300:	b900      	cbnz	r0, 8001304 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001302:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001304:	f7ff fec9 	bl	800109a <Error_Handler>
}
 8001308:	e7fb      	b.n	8001302 <MX_SUBGHZ_Init+0xe>
 800130a:	bf00      	nop
 800130c:	200018b4 	.word	0x200018b4

08001310 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001310:	b500      	push	{lr}
 8001312:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001318:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001328:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	4611      	mov	r1, r2
 800132e:	2032      	movs	r0, #50	; 0x32
 8001330:	f001 fc3e 	bl	8002bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001334:	2032      	movs	r0, #50	; 0x32
 8001336:	f001 fc6f 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800133a:	b003      	add	sp, #12
 800133c:	f85d fb04 	ldr.w	pc, [sp], #4

08001340 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001340:	b40c      	push	{r2, r3}
 8001342:	b500      	push	{lr}
 8001344:	b083      	sub	sp, #12
 8001346:	ab04      	add	r3, sp, #16
 8001348:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800134c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800134e:	f00f fdbd 	bl	8010ecc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001352:	b003      	add	sp, #12
 8001354:	f85d eb04 	ldr.w	lr, [sp], #4
 8001358:	b002      	add	sp, #8
 800135a:	4770      	bx	lr

0800135c <TimestampNow>:
{
 800135c:	b530      	push	{r4, r5, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001364:	a802      	add	r0, sp, #8
 8001366:	f00f fb27 	bl	80109b8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800136a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	9b02      	ldr	r3, [sp, #8]
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <TimestampNow+0x2c>)
 8001374:	2110      	movs	r1, #16
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff ffe2 	bl	8001340 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800137c:	4620      	mov	r0, r4
 800137e:	f7fe fefb 	bl	8000178 <strlen>
 8001382:	8028      	strh	r0, [r5, #0]
}
 8001384:	b005      	add	sp, #20
 8001386:	bd30      	pop	{r4, r5, pc}
 8001388:	08011268 	.word	0x08011268

0800138c <SystemApp_Init>:
{
 800138c:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800138e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001392:	6893      	ldr	r3, [r2, #8]
 8001394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001398:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800139a:	f00f fb8d 	bl	8010ab8 <UTIL_TIMER_Init>
  DBG_Disable();
 800139e:	f000 f8c3 	bl	8001528 <DBG_Disable>
  DBG_ProbesInit();
 80013a2:	f000 f8c7 	bl	8001534 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 80013a6:	f00f f843 	bl	8010430 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <SystemApp_Init+0x40>)
 80013ac:	f00f f85a 	bl	8010464 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80013b0:	2002      	movs	r0, #2
 80013b2:	f00f f85d 	bl	8010470 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80013b6:	f7ff fdd3 	bl	8000f60 <SYS_InitMeasurement>
  EnvSensors_Init();
 80013ba:	f000 f8db 	bl	8001574 <EnvSensors_Init>
  UTIL_LPM_Init();
 80013be:	f00f f965 	bl	801068c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80013c2:	2101      	movs	r1, #1
 80013c4:	4608      	mov	r0, r1
 80013c6:	f00f f981 	bl	80106cc <UTIL_LPM_SetOffMode>
}
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	0800135d 	.word	0x0800135d

080013d0 <UTIL_SEQ_Idle>:
{
 80013d0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80013d2:	f00f f991 	bl	80106f8 <UTIL_LPM_EnterLowPower>
}
 80013d6:	bd08      	pop	{r3, pc}

080013d8 <GetBatteryLevel>:
{
 80013d8:	b510      	push	{r4, lr}
 80013da:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80013dc:	f7ff fdc8 	bl	8000f70 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80013e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013e4:	4298      	cmp	r0, r3
 80013e6:	d80d      	bhi.n	8001404 <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 80013e8:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80013ec:	d315      	bcc.n	800141a <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80013ee:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80013f2:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80013f6:	0044      	lsls	r4, r0, #1
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <GetBatteryLevel+0x48>)
 80013fa:	fba0 3404 	umull	r3, r4, r0, r4
 80013fe:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8001402:	e000      	b.n	8001406 <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 8001404:	24fe      	movs	r4, #254	; 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001406:	9400      	str	r4, [sp, #0]
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <GetBatteryLevel+0x4c>)
 800140a:	2201      	movs	r2, #1
 800140c:	2100      	movs	r1, #0
 800140e:	2002      	movs	r0, #2
 8001410:	f00f f882 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8001414:	4620      	mov	r0, r4
 8001416:	b002      	add	sp, #8
 8001418:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 800141a:	2400      	movs	r4, #0
 800141c:	e7f3      	b.n	8001406 <GetBatteryLevel+0x2e>
 800141e:	bf00      	nop
 8001420:	1b4e81b5 	.word	0x1b4e81b5
 8001424:	08011274 	.word	0x08011274

08001428 <GetTemperatureLevel>:
{
 8001428:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800142a:	f7ff fdc3 	bl	8000fb4 <SYS_GetTemperatureLevel>
 800142e:	4603      	mov	r3, r0
 8001430:	2800      	cmp	r0, #0
 8001432:	db02      	blt.n	800143a <GetTemperatureLevel+0x12>
}
 8001434:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8001438:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800143a:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 800143e:	e7f9      	b.n	8001434 <GetTemperatureLevel+0xc>

08001440 <GetUniqueId>:
{
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <GetUniqueId+0x60>)
 8001446:	681b      	ldr	r3, [r3, #0]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d011      	beq.n	8001472 <GetUniqueId+0x32>
    id[7] = val & 0xFF;
 800144e:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001450:	0a1a      	lsrs	r2, r3, #8
 8001452:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001454:	0c1a      	lsrs	r2, r3, #16
 8001456:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001458:	0e1b      	lsrs	r3, r3, #24
 800145a:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <GetUniqueId+0x64>)
 800145e:	681a      	ldr	r2, [r3, #0]
    id[3] = val & 0xFF;
 8001460:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001466:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001468:	0c1a      	lsrs	r2, r3, #16
 800146a:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800146c:	0e1b      	lsrs	r3, r3, #24
 800146e:	7003      	strb	r3, [r0, #0]
}
 8001470:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001472:	f000 fec7 	bl	8002204 <HAL_GetUIDw0>
 8001476:	4605      	mov	r5, r0
 8001478:	f000 fed0 	bl	800221c <HAL_GetUIDw2>
 800147c:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800147e:	f000 fec7 	bl	8002210 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001482:	0e2b      	lsrs	r3, r5, #24
 8001484:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001486:	0c2b      	lsrs	r3, r5, #16
 8001488:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 800148a:	0a2b      	lsrs	r3, r5, #8
 800148c:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800148e:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001490:	0e03      	lsrs	r3, r0, #24
 8001492:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001494:	0c03      	lsrs	r3, r0, #16
 8001496:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001498:	0a03      	lsrs	r3, r0, #8
 800149a:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800149c:	7020      	strb	r0, [r4, #0]
 800149e:	e7e7      	b.n	8001470 <GetUniqueId+0x30>
 80014a0:	1fff7580 	.word	0x1fff7580
 80014a4:	1fff7584 	.word	0x1fff7584

080014a8 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <GetDevAddr+0x24>)
 80014aa:	6818      	ldr	r0, [r3, #0]
  if (val == 0xFFFFFFFF)
 80014ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80014b0:	d000      	beq.n	80014b4 <GetDevAddr+0xc>
}
 80014b2:	4770      	bx	lr
{
 80014b4:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80014b6:	f000 fea5 	bl	8002204 <HAL_GetUIDw0>
 80014ba:	4604      	mov	r4, r0
 80014bc:	f000 fea8 	bl	8002210 <HAL_GetUIDw1>
 80014c0:	4044      	eors	r4, r0
 80014c2:	f000 feab 	bl	800221c <HAL_GetUIDw2>
 80014c6:	4060      	eors	r0, r4
}
 80014c8:	bd10      	pop	{r4, pc}
 80014ca:	bf00      	nop
 80014cc:	1fff7580 	.word	0x1fff7580

080014d0 <UTIL_ADV_TRACE_PreSendHook>:
{
 80014d0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80014d2:	2101      	movs	r1, #1
 80014d4:	2002      	movs	r0, #2
 80014d6:	f00f f8e3 	bl	80106a0 <UTIL_LPM_SetStopMode>
}
 80014da:	bd08      	pop	{r3, pc}

080014dc <UTIL_ADV_TRACE_PostSendHook>:
{
 80014dc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80014de:	2100      	movs	r1, #0
 80014e0:	2002      	movs	r0, #2
 80014e2:	f00f f8dd 	bl	80106a0 <UTIL_LPM_SetStopMode>
}
 80014e6:	bd08      	pop	{r3, pc}

080014e8 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80014e8:	2000      	movs	r0, #0
 80014ea:	4770      	bx	lr

080014ec <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80014ec:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80014ee:	f000 f85f 	bl	80015b0 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80014f2:	bd08      	pop	{r3, pc}

080014f4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80014f4:	b500      	push	{lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80014fa:	9801      	ldr	r0, [sp, #4]
 80014fc:	f000 f936 	bl	800176c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001500:	b003      	add	sp, #12
 8001502:	f85d fb04 	ldr.w	pc, [sp], #4

08001506 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001506:	b508      	push	{r3, lr}
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8001508:	2801      	cmp	r0, #1
 800150a:	d006      	beq.n	800151a <DBG_ConfigForLpm+0x14>
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 800150c:	f000 fe94 	bl	8002238 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001510:	f000 fea2 	bl	8002258 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001514:	f000 feb0 	bl	8002278 <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001518:	bd08      	pop	{r3, pc}
    HAL_DBGMCU_EnableDBGSleepMode();
 800151a:	f000 fe85 	bl	8002228 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800151e:	f000 fe93 	bl	8002248 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8001522:	f000 fea1 	bl	8002268 <HAL_DBGMCU_EnableDBGStandbyMode>
 8001526:	e7f7      	b.n	8001518 <DBG_ConfigForLpm+0x12>

08001528 <DBG_Disable>:
{
 8001528:	b508      	push	{r3, lr}
  DBG_ConfigForLpm(0);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff ffeb 	bl	8001506 <DBG_ConfigForLpm>
}
 8001530:	bd08      	pop	{r3, pc}
	...

08001534 <DBG_ProbesInit>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <DBG_ProbesInit+0x10>)
 8001536:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800153a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001542:	4770      	bx	lr
 8001544:	58000800 	.word	0x58000800

08001548 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <EnvSensors_Read+0x18>)
 800154a:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <EnvSensors_Read+0x1c>)
 800154e:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <EnvSensors_Read+0x20>)
 8001552:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <EnvSensors_Read+0x24>)
 8001556:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <EnvSensors_Read+0x28>)
 800155a:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 800155c:	2000      	movs	r0, #0
 800155e:	4770      	bx	lr
 8001560:	42480000 	.word	0x42480000
 8001564:	41900000 	.word	0x41900000
 8001568:	447a0000 	.word	0x447a0000
 800156c:	003e090d 	.word	0x003e090d
 8001570:	000503ab 	.word	0x000503ab

08001574 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8001574:	2000      	movs	r0, #0
 8001576:	4770      	bx	lr

08001578 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <TIMER_IF_SetTimerContext+0xc>)
 800157a:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800157c:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800157e:	4b02      	ldr	r3, [pc, #8]	; (8001588 <TIMER_IF_SetTimerContext+0x10>)
 8001580:	6018      	str	r0, [r3, #0]
}
 8001582:	4770      	bx	lr
 8001584:	40002800 	.word	0x40002800
 8001588:	200000f8 	.word	0x200000f8

0800158c <TIMER_IF_GetTimerContext>:
}
 800158c:	4b01      	ldr	r3, [pc, #4]	; (8001594 <TIMER_IF_GetTimerContext+0x8>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200000f8 	.word	0x200000f8

08001598 <TIMER_IF_GetTimerElapsedTime>:
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <TIMER_IF_GetTimerElapsedTime+0x10>)
 800159a:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800159c:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800159e:	4a03      	ldr	r2, [pc, #12]	; (80015ac <TIMER_IF_GetTimerElapsedTime+0x14>)
 80015a0:	6810      	ldr	r0, [r2, #0]
}
 80015a2:	1a18      	subs	r0, r3, r0
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40002800 	.word	0x40002800
 80015ac:	200000f8 	.word	0x200000f8

080015b0 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <TIMER_IF_GetTimerValue+0x14>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b11b      	cbz	r3, 80015be <TIMER_IF_GetTimerValue+0xe>
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <TIMER_IF_GetTimerValue+0x18>)
 80015b8:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80015ba:	43c0      	mvns	r0, r0
 80015bc:	4770      	bx	lr
  uint32_t ret = 0;
 80015be:	2000      	movs	r0, #0
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200000f4 	.word	0x200000f4
 80015c8:	40002800 	.word	0x40002800

080015cc <TIMER_IF_GetMinimumTimeout>:
}
 80015cc:	2003      	movs	r0, #3
 80015ce:	4770      	bx	lr

080015d0 <TIMER_IF_Convert_ms2Tick>:
{
 80015d0:	b508      	push	{r3, lr}
 80015d2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80015d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d8:	2300      	movs	r3, #0
 80015da:	0280      	lsls	r0, r0, #10
 80015dc:	0d89      	lsrs	r1, r1, #22
 80015de:	f7ff fabd 	bl	8000b5c <__aeabi_uldivmod>
}
 80015e2:	bd08      	pop	{r3, pc}

080015e4 <TIMER_IF_Convert_Tick2ms>:
{
 80015e4:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80015e6:	0142      	lsls	r2, r0, #5
 80015e8:	0ec3      	lsrs	r3, r0, #27
 80015ea:	1a12      	subs	r2, r2, r0
 80015ec:	f163 0300 	sbc.w	r3, r3, #0
 80015f0:	0099      	lsls	r1, r3, #2
 80015f2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80015f6:	0094      	lsls	r4, r2, #2
 80015f8:	1822      	adds	r2, r4, r0
 80015fa:	f141 0300 	adc.w	r3, r1, #0
 80015fe:	00d8      	lsls	r0, r3, #3
 8001600:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8001604:	00d1      	lsls	r1, r2, #3
 8001606:	0a8a      	lsrs	r2, r1, #10
}
 8001608:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 800160c:	bc10      	pop	{r4}
 800160e:	4770      	bx	lr

08001610 <TIMER_IF_StopTimer>:
{
 8001610:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <TIMER_IF_StopTimer+0x20>)
 8001614:	2201      	movs	r2, #1
 8001616:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001618:	4c06      	ldr	r4, [pc, #24]	; (8001634 <TIMER_IF_StopTimer+0x24>)
 800161a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161e:	4620      	mov	r0, r4
 8001620:	f002 fe56 	bl	80042d0 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	6323      	str	r3, [r4, #48]	; 0x30
}
 800162a:	2000      	movs	r0, #0
 800162c:	bd10      	pop	{r4, pc}
 800162e:	bf00      	nop
 8001630:	40002800 	.word	0x40002800
 8001634:	2000187c 	.word	0x2000187c

08001638 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001638:	b508      	push	{r3, lr}
 800163a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800163c:	2102      	movs	r1, #2
 800163e:	4802      	ldr	r0, [pc, #8]	; (8001648 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001640:	f003 f887 	bl	8004752 <HAL_RTCEx_BKUPWrite>
}
 8001644:	bd08      	pop	{r3, pc}
 8001646:	bf00      	nop
 8001648:	2000187c 	.word	0x2000187c

0800164c <TIMER_IF_Init>:
{
 800164c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <TIMER_IF_Init+0x40>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b10b      	cbz	r3, 8001658 <TIMER_IF_Init+0xc>
}
 8001654:	2000      	movs	r0, #0
 8001656:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001658:	4c0d      	ldr	r4, [pc, #52]	; (8001690 <TIMER_IF_Init+0x44>)
 800165a:	f04f 35ff 	mov.w	r5, #4294967295
 800165e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001660:	f7ff fd6e 	bl	8001140 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001664:	f7ff ffd4 	bl	8001610 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166c:	4620      	mov	r0, r4
 800166e:	f002 fe2f 	bl	80042d0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001672:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001674:	4620      	mov	r0, r4
 8001676:	f003 f80b 	bl	8004690 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff ffdc 	bl	8001638 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001680:	f7ff ff7a 	bl	8001578 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <TIMER_IF_Init+0x40>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e7e3      	b.n	8001654 <TIMER_IF_Init+0x8>
 800168c:	200000f4 	.word	0x200000f4
 8001690:	2000187c 	.word	0x2000187c

08001694 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001694:	b508      	push	{r3, lr}
 8001696:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001698:	2100      	movs	r1, #0
 800169a:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 800169c:	f003 f859 	bl	8004752 <HAL_RTCEx_BKUPWrite>
}
 80016a0:	bd08      	pop	{r3, pc}
 80016a2:	bf00      	nop
 80016a4:	2000187c 	.word	0x2000187c

080016a8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80016a8:	b508      	push	{r3, lr}
 80016aa:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80016ac:	2101      	movs	r1, #1
 80016ae:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80016b0:	f003 f84f 	bl	8004752 <HAL_RTCEx_BKUPWrite>
}
 80016b4:	bd08      	pop	{r3, pc}
 80016b6:	bf00      	nop
 80016b8:	2000187c 	.word	0x2000187c

080016bc <TIMER_IF_StartTimer>:
{
 80016bc:	b510      	push	{r4, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80016c2:	222c      	movs	r2, #44	; 0x2c
 80016c4:	2100      	movs	r1, #0
 80016c6:	a801      	add	r0, sp, #4
 80016c8:	f00f fcea 	bl	80110a0 <memset>
  TIMER_IF_StopTimer();
 80016cc:	f7ff ffa0 	bl	8001610 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <TIMER_IF_StartTimer+0x48>)
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80016d6:	2300      	movs	r3, #0
 80016d8:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80016da:	43e4      	mvns	r4, r4
 80016dc:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016de:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80016e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016e4:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016ec:	2201      	movs	r2, #1
 80016ee:	a901      	add	r1, sp, #4
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <TIMER_IF_StartTimer+0x4c>)
 80016f2:	f002 ff11 	bl	8004518 <HAL_RTC_SetAlarm_IT>
 80016f6:	b910      	cbnz	r0, 80016fe <TIMER_IF_StartTimer+0x42>
}
 80016f8:	2000      	movs	r0, #0
 80016fa:	b00c      	add	sp, #48	; 0x30
 80016fc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016fe:	f7ff fccc 	bl	800109a <Error_Handler>
 8001702:	e7f9      	b.n	80016f8 <TIMER_IF_StartTimer+0x3c>
 8001704:	200000f8 	.word	0x200000f8
 8001708:	2000187c 	.word	0x2000187c

0800170c <TIMER_IF_BkUp_Read_MSBticks>:
{
 800170c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800170e:	2102      	movs	r1, #2
 8001710:	4801      	ldr	r0, [pc, #4]	; (8001718 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001712:	f003 f825 	bl	8004760 <HAL_RTCEx_BKUPRead>
}
 8001716:	bd08      	pop	{r3, pc}
 8001718:	2000187c 	.word	0x2000187c

0800171c <TIMER_IF_GetTime>:
{
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4605      	mov	r5, r0
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <TIMER_IF_GetTime+0x2c>)
 8001722:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001724:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001726:	f7ff fff1 	bl	800170c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800172a:	2200      	movs	r2, #0
 800172c:	1912      	adds	r2, r2, r4
 800172e:	f140 0300 	adc.w	r3, r0, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001732:	0a94      	lsrs	r4, r2, #10
 8001734:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001738:	f3c2 0009 	ubfx	r0, r2, #0, #10
 800173c:	f7ff ff52 	bl	80015e4 <TIMER_IF_Convert_Tick2ms>
 8001740:	8028      	strh	r0, [r5, #0]
}
 8001742:	4620      	mov	r0, r4
 8001744:	bd38      	pop	{r3, r4, r5, pc}
 8001746:	bf00      	nop
 8001748:	40002800 	.word	0x40002800

0800174c <TIMER_IF_BkUp_Read_Seconds>:
{
 800174c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800174e:	2100      	movs	r1, #0
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001752:	f003 f805 	bl	8004760 <HAL_RTCEx_BKUPRead>
}
 8001756:	bd08      	pop	{r3, pc}
 8001758:	2000187c 	.word	0x2000187c

0800175c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800175c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800175e:	2101      	movs	r1, #1
 8001760:	4801      	ldr	r0, [pc, #4]	; (8001768 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001762:	f002 fffd 	bl	8004760 <HAL_RTCEx_BKUPRead>
}
 8001766:	bd08      	pop	{r3, pc}
 8001768:	2000187c 	.word	0x2000187c

0800176c <TIMER_IF_DelayMs>:
{
 800176c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800176e:	f7ff ff2f 	bl	80015d0 <TIMER_IF_Convert_ms2Tick>
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <TIMER_IF_DelayMs+0x20>)
 8001774:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001776:	43d2      	mvns	r2, r2
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <TIMER_IF_DelayMs+0x20>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	4283      	cmp	r3, r0
 8001782:	d201      	bcs.n	8001788 <TIMER_IF_DelayMs+0x1c>
    __NOP();
 8001784:	bf00      	nop
 8001786:	e7f7      	b.n	8001778 <TIMER_IF_DelayMs+0xc>
}
 8001788:	bd08      	pop	{r3, pc}
 800178a:	bf00      	nop
 800178c:	40002800 	.word	0x40002800

08001790 <HAL_RTC_AlarmAEventCallback>:
{
 8001790:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001792:	f00f fabd 	bl	8010d10 <UTIL_TIMER_IRQ_Handler>
}
 8001796:	bd08      	pop	{r3, pc}

08001798 <HAL_RTCEx_SSRUEventCallback>:
{
 8001798:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800179a:	f7ff ffb7 	bl	800170c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800179e:	3001      	adds	r0, #1
 80017a0:	f7ff ff4a 	bl	8001638 <TIMER_IF_BkUp_Write_MSBticks>
}
 80017a4:	bd08      	pop	{r3, pc}
	...

080017a8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017a8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017aa:	4817      	ldr	r0, [pc, #92]	; (8001808 <MX_USART2_UART_Init+0x60>)
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_USART2_UART_Init+0x64>)
 80017ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80017b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80017b4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	2300      	movs	r3, #0
 80017b8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017bc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017be:	220c      	movs	r2, #12
 80017c0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017cc:	f004 facd 	bl	8005d6a <HAL_UART_Init>
 80017d0:	b970      	cbnz	r0, 80017f0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_USART2_UART_Init+0x60>)
 80017d6:	f004 fc7a 	bl	80060ce <HAL_UARTEx_SetTxFifoThreshold>
 80017da:	b960      	cbnz	r0, 80017f6 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017dc:	2100      	movs	r1, #0
 80017de:	480a      	ldr	r0, [pc, #40]	; (8001808 <MX_USART2_UART_Init+0x60>)
 80017e0:	f004 fc9a 	bl	8006118 <HAL_UARTEx_SetRxFifoThreshold>
 80017e4:	b950      	cbnz	r0, 80017fc <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80017e6:	4808      	ldr	r0, [pc, #32]	; (8001808 <MX_USART2_UART_Init+0x60>)
 80017e8:	f004 fc4d 	bl	8006086 <HAL_UARTEx_EnableFifoMode>
 80017ec:	b948      	cbnz	r0, 8001802 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017f0:	f7ff fc53 	bl	800109a <Error_Handler>
 80017f4:	e7ed      	b.n	80017d2 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80017f6:	f7ff fc50 	bl	800109a <Error_Handler>
 80017fa:	e7ef      	b.n	80017dc <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80017fc:	f7ff fc4d 	bl	800109a <Error_Handler>
 8001800:	e7f1      	b.n	80017e6 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001802:	f7ff fc4a 	bl	800109a <Error_Handler>
}
 8001806:	e7f2      	b.n	80017ee <MX_USART2_UART_Init+0x46>
 8001808:	20001920 	.word	0x20001920
 800180c:	40004400 	.word	0x40004400

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b530      	push	{r4, r5, lr}
 8001812:	b097      	sub	sp, #92	; 0x5c
 8001814:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	2100      	movs	r1, #0
 8001818:	9111      	str	r1, [sp, #68]	; 0x44
 800181a:	9112      	str	r1, [sp, #72]	; 0x48
 800181c:	9113      	str	r1, [sp, #76]	; 0x4c
 800181e:	9114      	str	r1, [sp, #80]	; 0x50
 8001820:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001822:	2238      	movs	r2, #56	; 0x38
 8001824:	a803      	add	r0, sp, #12
 8001826:	f00f fc3b 	bl	80110a0 <memset>
  if(uartHandle->Instance==USART2)
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_UART_MspInit+0xd4>)
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001832:	b017      	add	sp, #92	; 0x5c
 8001834:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001836:	2302      	movs	r3, #2
 8001838:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_UART_MspInit+0xd8>)
 800183c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183e:	a803      	add	r0, sp, #12
 8001840:	f002 fc04 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8001844:	2800      	cmp	r0, #0
 8001846:	d144      	bne.n	80018d2 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001852:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001854:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001856:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800185a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800185c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800185e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800186e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001870:	230c      	movs	r3, #12
 8001872:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2500      	movs	r5, #0
 800187a:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001880:	2307      	movs	r3, #7
 8001882:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	a911      	add	r1, sp, #68	; 0x44
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f001 fc6f 	bl	800316c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800188e:	4817      	ldr	r0, [pc, #92]	; (80018ec <HAL_UART_MspInit+0xdc>)
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_UART_MspInit+0xe0>)
 8001892:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001894:	2314      	movs	r3, #20
 8001896:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001898:	2310      	movs	r3, #16
 800189a:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189c:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018a6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018aa:	f001 fa3d 	bl	8002d28 <HAL_DMA_Init>
 80018ae:	b998      	cbnz	r0, 80018d8 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80018b0:	2110      	movs	r1, #16
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <HAL_UART_MspInit+0xdc>)
 80018b4:	f001 fc3a 	bl	800312c <HAL_DMA_ConfigChannelAttributes>
 80018b8:	b988      	cbnz	r0, 80018de <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_UART_MspInit+0xdc>)
 80018bc:	67a3      	str	r3, [r4, #120]	; 0x78
 80018be:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2102      	movs	r1, #2
 80018c4:	2025      	movs	r0, #37	; 0x25
 80018c6:	f001 f973 	bl	8002bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ca:	2025      	movs	r0, #37	; 0x25
 80018cc:	f001 f9a4 	bl	8002c18 <HAL_NVIC_EnableIRQ>
}
 80018d0:	e7af      	b.n	8001832 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80018d2:	f7ff fbe2 	bl	800109a <Error_Handler>
 80018d6:	e7b7      	b.n	8001848 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80018d8:	f7ff fbdf 	bl	800109a <Error_Handler>
 80018dc:	e7e8      	b.n	80018b0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80018de:	f7ff fbdc 	bl	800109a <Error_Handler>
 80018e2:	e7ea      	b.n	80018ba <HAL_UART_MspInit+0xaa>
 80018e4:	40004400 	.word	0x40004400
 80018e8:	000c0004 	.word	0x000c0004
 80018ec:	200018c0 	.word	0x200018c0
 80018f0:	40020058 	.word	0x40020058

080018f4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 80018f4:	6802      	ldr	r2, [r0, #0]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_UART_MspDeInit+0x34>)
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d000      	beq.n	80018fe <HAL_UART_MspDeInit+0xa>
 80018fc:	4770      	bx	lr
{
 80018fe:	b510      	push	{r4, lr}
 8001900:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001908:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800190e:	210c      	movs	r1, #12
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f001 fce2 	bl	80032dc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001918:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800191a:	f001 fa77 	bl	8002e0c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800191e:	2025      	movs	r0, #37	; 0x25
 8001920:	f001 f988 	bl	8002c34 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001924:	bd10      	pop	{r4, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400

0800192c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800192c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <vcom_Init+0x20>)
 8001930:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001932:	f7ff fb91 	bl	8001058 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001936:	f7ff ff37 	bl	80017a8 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <vcom_Init+0x24>)
 800193c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001940:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001948:	2000      	movs	r0, #0
 800194a:	bd08      	pop	{r3, pc}
 800194c:	20000100 	.word	0x20000100
 8001950:	58000800 	.word	0x58000800

08001954 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001954:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800195c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001964:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800196a:	4804      	ldr	r0, [pc, #16]	; (800197c <vcom_DeInit+0x28>)
 800196c:	f7ff ffc2 	bl	80018f4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001970:	200f      	movs	r0, #15
 8001972:	f001 f95f 	bl	8002c34 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001976:	2000      	movs	r0, #0
 8001978:	bd08      	pop	{r3, pc}
 800197a:	bf00      	nop
 800197c:	20001920 	.word	0x20001920

08001980 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001980:	b508      	push	{r3, lr}
 8001982:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001984:	4601      	mov	r1, r0
 8001986:	4802      	ldr	r0, [pc, #8]	; (8001990 <vcom_Trace_DMA+0x10>)
 8001988:	f003 faba 	bl	8004f00 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800198c:	2000      	movs	r0, #0
 800198e:	bd08      	pop	{r3, pc}
 8001990:	20001920 	.word	0x20001920

08001994 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001994:	b510      	push	{r4, lr}
 8001996:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <vcom_ReceiveInit+0x50>)
 800199a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800199c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019a0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80019a2:	ab02      	add	r3, sp, #8
 80019a4:	e913 0006 	ldmdb	r3, {r1, r2}
 80019a8:	480f      	ldr	r0, [pc, #60]	; (80019e8 <vcom_ReceiveInit+0x54>)
 80019aa:	f004 fb14 	bl	8005fd6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <vcom_ReceiveInit+0x54>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80019b8:	d1f9      	bne.n	80019ae <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80019c0:	d0fb      	beq.n	80019ba <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019c8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80019ca:	4c07      	ldr	r4, [pc, #28]	; (80019e8 <vcom_ReceiveInit+0x54>)
 80019cc:	4620      	mov	r0, r4
 80019ce:	f004 fb43 	bl	8006058 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80019d2:	2201      	movs	r2, #1
 80019d4:	4905      	ldr	r1, [pc, #20]	; (80019ec <vcom_ReceiveInit+0x58>)
 80019d6:	4620      	mov	r0, r4
 80019d8:	f004 fa8e 	bl	8005ef8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80019dc:	2000      	movs	r0, #0
 80019de:	b002      	add	sp, #8
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	bf00      	nop
 80019e4:	200000fc 	.word	0x200000fc
 80019e8:	20001920 	.word	0x20001920
 80019ec:	200019b0 	.word	0x200019b0

080019f0 <vcom_Resume>:

void vcom_Resume(void)
{
 80019f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <vcom_Resume+0x20>)
 80019f4:	f004 f9b9 	bl	8005d6a <HAL_UART_Init>
 80019f8:	b920      	cbnz	r0, 8001a04 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <vcom_Resume+0x24>)
 80019fc:	f001 f994 	bl	8002d28 <HAL_DMA_Init>
 8001a00:	b918      	cbnz	r0, 8001a0a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001a02:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a04:	f7ff fb49 	bl	800109a <Error_Handler>
 8001a08:	e7f7      	b.n	80019fa <vcom_Resume+0xa>
    Error_Handler();
 8001a0a:	f7ff fb46 	bl	800109a <Error_Handler>
}
 8001a0e:	e7f8      	b.n	8001a02 <vcom_Resume+0x12>
 8001a10:	20001920 	.word	0x20001920
 8001a14:	200018c0 	.word	0x200018c0

08001a18 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001a1a:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <HAL_UART_TxCpltCallback+0xc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2000      	movs	r0, #0
 8001a20:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001a22:	bd08      	pop	{r3, pc}
 8001a24:	20000100 	.word	0x20000100

08001a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_UART_RxCpltCallback+0x24>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b12b      	cbz	r3, 8001a3e <HAL_UART_RxCpltCallback+0x16>
 8001a32:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001a36:	b912      	cbnz	r2, 8001a3e <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_UART_RxCpltCallback+0x28>)
 8001a3c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_UART_RxCpltCallback+0x28>)
 8001a42:	4620      	mov	r0, r4
 8001a44:	f004 fa58 	bl	8005ef8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200000fc 	.word	0x200000fc
 8001a50:	200019b0 	.word	0x200019b0

08001a54 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001a56:	f7ff fc99 	bl	800138c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001a5a:	f000 f999 	bl	8001d90 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001a5e:	bd08      	pop	{r3, pc}

08001a60 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295
 8001a66:	f00e feb3 	bl	80107d0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001a6a:	bd08      	pop	{r3, pc}

08001a6c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
  //BSP_LED_Off(LED_GREEN) ;
}
 8001a6c:	4770      	bx	lr

08001a6e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
  //BSP_LED_Off(LED_BLUE) ;
}
 8001a6e:	4770      	bx	lr

08001a70 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
  //BSP_LED_Toggle(LED_RED) ;
}
 8001a70:	4770      	bx	lr
	...

08001a74 <OnTxData>:
/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d03c      	beq.n	8001af2 <OnTxData+0x7e>
{
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	4604      	mov	r4, r0
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 8001a7e:	7803      	ldrb	r3, [r0, #0]
 8001a80:	b90b      	cbnz	r3, 8001a86 <OnTxData+0x12>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8001a82:	b004      	add	sp, #16
 8001a84:	bd10      	pop	{r4, pc}
      UTIL_TIMER_Start(&TxLedTimer);
 8001a86:	481b      	ldr	r0, [pc, #108]	; (8001af4 <OnTxData+0x80>)
 8001a88:	f00f f8e2 	bl	8010c50 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <OnTxData+0x84>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4611      	mov	r1, r2
 8001a92:	2002      	movs	r0, #2
 8001a94:	f00e fd40 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001a98:	7b23      	ldrb	r3, [r4, #12]
 8001a9a:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8001a9e:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8001aa2:	9103      	str	r1, [sp, #12]
 8001aa4:	9202      	str	r2, [sp, #8]
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	68a3      	ldr	r3, [r4, #8]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <OnTxData+0x88>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f00e fd30 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <OnTxData+0x8c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	4611      	mov	r1, r2
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f00e fd2a 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001ac4:	78a3      	ldrb	r3, [r4, #2]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10c      	bne.n	8001ae4 <OnTxData+0x70>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001aca:	78e3      	ldrb	r3, [r4, #3]
 8001acc:	b143      	cbz	r3, 8001ae0 <OnTxData+0x6c>
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <OnTxData+0x90>)
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <OnTxData+0x94>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f00e fd1d 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 8001ade:	e7d0      	b.n	8001a82 <OnTxData+0xe>
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <OnTxData+0x98>)
 8001ae2:	e7f5      	b.n	8001ad0 <OnTxData+0x5c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <OnTxData+0x9c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4611      	mov	r1, r2
 8001aea:	2003      	movs	r0, #3
 8001aec:	f00e fd14 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8001af0:	e7c7      	b.n	8001a82 <OnTxData+0xe>
 8001af2:	4770      	bx	lr
 8001af4:	20000228 	.word	0x20000228
 8001af8:	080112dc 	.word	0x080112dc
 8001afc:	08011310 	.word	0x08011310
 8001b00:	08011344 	.word	0x08011344
 8001b04:	080112d8 	.word	0x080112d8
 8001b08:	08011354 	.word	0x08011354
 8001b0c:	080112d0 	.word	0x080112d0
 8001b10:	08011368 	.word	0x08011368

08001b14 <OnTxTimerEvent>:
{
 8001b14:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001b16:	2100      	movs	r1, #0
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f00e fe23 	bl	8010764 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <OnTxTimerEvent+0x14>)
 8001b20:	f00f f896 	bl	8010c50 <UTIL_TIMER_Start>
}
 8001b24:	bd08      	pop	{r3, pc}
 8001b26:	bf00      	nop
 8001b28:	20000240 	.word	0x20000240

08001b2c <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 8001b2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2001      	movs	r0, #1
 8001b32:	f00e fe17 	bl	8010764 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8001b36:	bd08      	pop	{r3, pc}

08001b38 <OnRxData>:
{
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	460c      	mov	r4, r1
  if ((appData != NULL) || (params != NULL))
 8001b3e:	4605      	mov	r5, r0
 8001b40:	b358      	cbz	r0, 8001b9a <OnRxData+0x62>
    UTIL_TIMER_Start(&RxLedTimer);
 8001b42:	482d      	ldr	r0, [pc, #180]	; (8001bf8 <OnRxData+0xc0>)
 8001b44:	f00f f884 	bl	8010c50 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <OnRxData+0xc4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f00e fce2 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8001b54:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8001b58:	782b      	ldrb	r3, [r5, #0]
 8001b5a:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8001b5e:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8001b62:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8001b66:	9605      	str	r6, [sp, #20]
 8001b68:	9004      	str	r0, [sp, #16]
 8001b6a:	9103      	str	r1, [sp, #12]
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <OnRxData+0xc8>)
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	68a3      	ldr	r3, [r4, #8]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <OnRxData+0xcc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4611      	mov	r1, r2
 8001b80:	2003      	movs	r0, #3
 8001b82:	f00e fcc9 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8001b86:	782b      	ldrb	r3, [r5, #0]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d01d      	beq.n	8001bc8 <OnRxData+0x90>
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d102      	bne.n	8001b96 <OnRxData+0x5e>
        if (appData->BufferSize == 1)
 8001b90:	786b      	ldrb	r3, [r5, #1]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d004      	beq.n	8001ba0 <OnRxData+0x68>
}
 8001b96:	b006      	add	sp, #24
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
  if ((appData != NULL) || (params != NULL))
 8001b9a:	2900      	cmp	r1, #0
 8001b9c:	d1d1      	bne.n	8001b42 <OnRxData+0xa>
  }
 8001b9e:	e7fa      	b.n	8001b96 <OnRxData+0x5e>
          switch (appData->Buffer[0])
 8001ba0:	686b      	ldr	r3, [r5, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d007      	beq.n	8001bb8 <OnRxData+0x80>
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d009      	beq.n	8001bc0 <OnRxData+0x88>
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f2      	bne.n	8001b96 <OnRxData+0x5e>
              LmHandlerRequestClass(CLASS_A);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f004 fc85 	bl	80064c0 <LmHandlerRequestClass>
              break;
 8001bb6:	e7ee      	b.n	8001b96 <OnRxData+0x5e>
              LmHandlerRequestClass(CLASS_B);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f004 fc81 	bl	80064c0 <LmHandlerRequestClass>
              break;
 8001bbe:	e7ea      	b.n	8001b96 <OnRxData+0x5e>
              LmHandlerRequestClass(CLASS_C);
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f004 fc7d 	bl	80064c0 <LmHandlerRequestClass>
              break;
 8001bc6:	e7e6      	b.n	8001b96 <OnRxData+0x5e>
        if (appData->BufferSize == 1)
 8001bc8:	786b      	ldrb	r3, [r5, #1]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d1e3      	bne.n	8001b96 <OnRxData+0x5e>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8001bce:	686b      	ldr	r3, [r5, #4]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <OnRxData+0xd0>)
 8001bd8:	7013      	strb	r3, [r2, #0]
          if (AppLedStateOn == RESET)
 8001bda:	b933      	cbnz	r3, 8001bea <OnRxData+0xb2>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <OnRxData+0xd4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	4611      	mov	r1, r2
 8001be2:	2003      	movs	r0, #3
 8001be4:	f00e fc98 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 8001be8:	e7d5      	b.n	8001b96 <OnRxData+0x5e>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <OnRxData+0xd8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	4611      	mov	r1, r2
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f00e fc91 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8001bf6:	e7ce      	b.n	8001b96 <OnRxData+0x5e>
 8001bf8:	20000210 	.word	0x20000210
 8001bfc:	08011378 	.word	0x08011378
 8001c00:	0801154c 	.word	0x0801154c
 8001c04:	080113ac 	.word	0x080113ac
 8001c08:	200001f6 	.word	0x200001f6
 8001c0c:	080113f4 	.word	0x080113f4
 8001c10:	08011400 	.word	0x08011400

08001c14 <OnJoinRequest>:
  if (joinParams != NULL)
 8001c14:	b328      	cbz	r0, 8001c62 <OnJoinRequest+0x4e>
{
 8001c16:	b510      	push	{r4, lr}
 8001c18:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001c1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8001c1e:	b9cb      	cbnz	r3, 8001c54 <OnJoinRequest+0x40>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001c20:	4810      	ldr	r0, [pc, #64]	; (8001c64 <OnJoinRequest+0x50>)
 8001c22:	f00e ffb3 	bl	8010b8c <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <OnJoinRequest+0x54>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f00e fc73 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001c32:	78a3      	ldrb	r3, [r4, #2]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d006      	beq.n	8001c46 <OnJoinRequest+0x32>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <OnJoinRequest+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f00e fc6a 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 8001c44:	e00c      	b.n	8001c60 <OnJoinRequest+0x4c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <OnJoinRequest+0x5c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f00e fc63 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 8001c52:	e005      	b.n	8001c60 <OnJoinRequest+0x4c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <OnJoinRequest+0x60>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	4611      	mov	r1, r2
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f00e fc5c 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	4770      	bx	lr
 8001c64:	200001f8 	.word	0x200001f8
 8001c68:	0801140c 	.word	0x0801140c
 8001c6c:	08011444 	.word	0x08011444
 8001c70:	08011424 	.word	0x08011424
 8001c74:	08011464 	.word	0x08011464

08001c78 <SendTxData>:
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9303      	str	r3, [sp, #12]
  EnvSensors_Read(&sensor_data);
 8001c80:	a804      	add	r0, sp, #16
 8001c82:	f7ff fc61 	bl	8001548 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001c86:	f7ff f995 	bl	8000fb4 <SYS_GetTemperatureLevel>
 8001c8a:	f340 260f 	sbfx	r6, r0, #8, #16
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001c8e:	4938      	ldr	r1, [pc, #224]	; (8001d70 <SendTxData+0xf8>)
 8001c90:	9804      	ldr	r0, [sp, #16]
 8001c92:	f7fe fdf3 	bl	800087c <__aeabi_fmul>
 8001c96:	4937      	ldr	r1, [pc, #220]	; (8001d74 <SendTxData+0xfc>)
 8001c98:	f7fe fea4 	bl	80009e4 <__aeabi_fdiv>
 8001c9c:	f7fe ff3e 	bl	8000b1c <__aeabi_f2uiz>
 8001ca0:	b285      	uxth	r5, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001ca2:	4c35      	ldr	r4, [pc, #212]	; (8001d78 <SendTxData+0x100>)
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8001ca8:	4932      	ldr	r1, [pc, #200]	; (8001d74 <SendTxData+0xfc>)
 8001caa:	9806      	ldr	r0, [sp, #24]
 8001cac:	f7fe fde6 	bl	800087c <__aeabi_fmul>
 8001cb0:	f7fe ff34 	bl	8000b1c <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8001cb4:	6863      	ldr	r3, [r4, #4]
 8001cb6:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <SendTxData+0x104>)
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	0a2a      	lsrs	r2, r5, #8
 8001cc0:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8001cc2:	6863      	ldr	r3, [r4, #4]
 8001cc4:	709d      	strb	r5, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8001cc6:	6863      	ldr	r3, [r4, #4]
 8001cc8:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8001cca:	6863      	ldr	r3, [r4, #4]
 8001ccc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8001cd0:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	7158      	strb	r0, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <SendTxData+0x108>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d002      	beq.n	8001ce4 <SendTxData+0x6c>
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d000      	beq.n	8001ce4 <SendTxData+0x6c>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8001ce2:	b9ab      	cbnz	r3, 8001d10 <SendTxData+0x98>
    AppData.Buffer[i++] = 0;
 8001ce4:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <SendTxData+0x100>)
 8001ce6:	6851      	ldr	r1, [r2, #4]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8001cec:	6851      	ldr	r1, [r2, #4]
 8001cee:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8001cf0:	6852      	ldr	r2, [r2, #4]
 8001cf2:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8001cf4:	7253      	strb	r3, [r2, #9]
 8001cf6:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8001cf8:	481f      	ldr	r0, [pc, #124]	; (8001d78 <SendTxData+0x100>)
 8001cfa:	7043      	strb	r3, [r0, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	aa03      	add	r2, sp, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	f004 fc89 	bl	8006618 <LmHandlerSend>
 8001d06:	b1f8      	cbz	r0, 8001d48 <SendTxData+0xd0>
  else if (nextTxIn > 0)
 8001d08:	9b03      	ldr	r3, [sp, #12]
 8001d0a:	bb23      	cbnz	r3, 8001d56 <SendTxData+0xde>
}
 8001d0c:	b00b      	add	sp, #44	; 0x2c
 8001d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8001d10:	9d07      	ldr	r5, [sp, #28]
    longitude = sensor_data.longitude;
 8001d12:	9c08      	ldr	r4, [sp, #32]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8001d14:	4e18      	ldr	r6, [pc, #96]	; (8001d78 <SendTxData+0x100>)
 8001d16:	6877      	ldr	r7, [r6, #4]
 8001d18:	f7ff fb5e 	bl	80013d8 <GetBatteryLevel>
 8001d1c:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8001d1e:	6873      	ldr	r3, [r6, #4]
 8001d20:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8001d24:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8001d26:	6873      	ldr	r3, [r6, #4]
 8001d28:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8001d2c:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8001d2e:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8001d30:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8001d34:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8001d36:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8001d3a:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8001d3c:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8001d42:	739a      	strb	r2, [r3, #14]
 8001d44:	230f      	movs	r3, #15
 8001d46:	e7d7      	b.n	8001cf8 <SendTxData+0x80>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <SendTxData+0x10c>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f00e fbe2 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 8001d54:	e7da      	b.n	8001d0c <SendTxData+0x94>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8001d56:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <SendTxData+0x110>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <SendTxData+0x114>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	2100      	movs	r1, #0
 8001d66:	4610      	mov	r0, r2
 8001d68:	f00e fbd6 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8001d6c:	e7ce      	b.n	8001d0c <SendTxData+0x94>
 8001d6e:	bf00      	nop
 8001d70:	42c80000 	.word	0x42c80000
 8001d74:	41200000 	.word	0x41200000
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	200001f6 	.word	0x200001f6
 8001d80:	2000003c 	.word	0x2000003c
 8001d84:	08011480 	.word	0x08011480
 8001d88:	10624dd3 	.word	0x10624dd3
 8001d8c:	08011490 	.word	0x08011490

08001d90 <LoRaWAN_Init>:
{
 8001d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d94:	b085      	sub	sp, #20
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001d96:	2101      	movs	r1, #1
 8001d98:	4608      	mov	r0, r1
 8001d9a:	f000 f8ed 	bl	8001f78 <BSP_PB_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001d9e:	2400      	movs	r4, #0
 8001da0:	9402      	str	r4, [sp, #8]
 8001da2:	2501      	movs	r5, #1
 8001da4:	9501      	str	r5, [sp, #4]
 8001da6:	9500      	str	r5, [sp, #0]
 8001da8:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <LoRaWAN_Init+0xfc>)
 8001daa:	4622      	mov	r2, r4
 8001dac:	4621      	mov	r1, r4
 8001dae:	2002      	movs	r0, #2
 8001db0:	f00e fbb2 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001db4:	9402      	str	r4, [sp, #8]
 8001db6:	2303      	movs	r3, #3
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	2602      	movs	r6, #2
 8001dbc:	9600      	str	r6, [sp, #0]
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <LoRaWAN_Init+0x100>)
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f00e fba7 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001dca:	9402      	str	r4, [sp, #8]
 8001dcc:	9501      	str	r5, [sp, #4]
 8001dce:	9500      	str	r5, [sp, #0]
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <LoRaWAN_Init+0x104>)
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f00e fb9e 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001ddc:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8001ec0 <LoRaWAN_Init+0x130>
 8001de0:	9400      	str	r4, [sp, #0]
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <LoRaWAN_Init+0x108>)
 8001de4:	4622      	mov	r2, r4
 8001de6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dea:	4648      	mov	r0, r9
 8001dec:	f00e fe70 	bl	8010ad0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8001df0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001ec4 <LoRaWAN_Init+0x134>
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <LoRaWAN_Init+0x10c>)
 8001df8:	4622      	mov	r2, r4
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfe:	4640      	mov	r0, r8
 8001e00:	f00e fe66 	bl	8010ad0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8001e04:	4f26      	ldr	r7, [pc, #152]	; (8001ea0 <LoRaWAN_Init+0x110>)
 8001e06:	9400      	str	r4, [sp, #0]
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <LoRaWAN_Init+0x114>)
 8001e0a:	462a      	mov	r2, r5
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	4638      	mov	r0, r7
 8001e12:	f00e fe5d 	bl	8010ad0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8001e16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e1a:	4648      	mov	r0, r9
 8001e1c:	f00e ff5e 	bl	8010cdc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8001e20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e24:	4640      	mov	r0, r8
 8001e26:	f00e ff59 	bl	8010cdc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8001e2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e2e:	4638      	mov	r0, r7
 8001e30:	f00e ff54 	bl	8010cdc <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <LoRaWAN_Init+0x118>)
 8001e36:	4621      	mov	r1, r4
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f00e fd51 	bl	80108e0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <LoRaWAN_Init+0x11c>)
 8001e40:	4621      	mov	r1, r4
 8001e42:	4630      	mov	r0, r6
 8001e44:	f00e fd4c 	bl	80108e0 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8001e48:	f000 f848 	bl	8001edc <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8001e4c:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <LoRaWAN_Init+0x120>)
 8001e4e:	f004 fd9d 	bl	800698c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8001e52:	4818      	ldr	r0, [pc, #96]	; (8001eb4 <LoRaWAN_Init+0x124>)
 8001e54:	f004 fa3c 	bl	80062d0 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8001e58:	4638      	mov	r0, r7
 8001e5a:	f00e fef9 	bl	8010c50 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f004 fb90 	bl	8006584 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8001e64:	4d14      	ldr	r5, [pc, #80]	; (8001eb8 <LoRaWAN_Init+0x128>)
 8001e66:	9400      	str	r4, [sp, #0]
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <LoRaWAN_Init+0x12c>)
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	4628      	mov	r0, r5
 8001e72:	f00e fe2d 	bl	8010ad0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8001e76:	f242 7110 	movw	r1, #10000	; 0x2710
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f00e ff2e 	bl	8010cdc <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8001e80:	4628      	mov	r0, r5
 8001e82:	f00e fee5 	bl	8010c50 <UTIL_TIMER_Start>
}
 8001e86:	b005      	add	sp, #20
 8001e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e8c:	080114b0 	.word	0x080114b0
 8001e90:	080114d0 	.word	0x080114d0
 8001e94:	080114f0 	.word	0x080114f0
 8001e98:	08001a6d 	.word	0x08001a6d
 8001e9c:	08001a6f 	.word	0x08001a6f
 8001ea0:	200001f8 	.word	0x200001f8
 8001ea4:	08001a71 	.word	0x08001a71
 8001ea8:	0800648d 	.word	0x0800648d
 8001eac:	08001c79 	.word	0x08001c79
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	2000003c 	.word	0x2000003c
 8001eb8:	20000240 	.word	0x20000240
 8001ebc:	08001b15 	.word	0x08001b15
 8001ec0:	20000228 	.word	0x20000228
 8001ec4:	20000210 	.word	0x20000210

08001ec8 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8001ec8:	2801      	cmp	r0, #1
 8001eca:	d000      	beq.n	8001ece <HAL_GPIO_EXTI_Callback+0x6>
 8001ecc:	4770      	bx	lr
{
 8001ece:	b508      	push	{r3, lr}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f00e fc46 	bl	8010764 <UTIL_SEQ_SetTask>
}
 8001ed8:	bd08      	pop	{r3, pc}
	...

08001edc <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <LoraInfo_Init+0x14>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8001ee2:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 8001ee4:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001ee8:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8001eea:	2203      	movs	r2, #3
 8001eec:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8001eee:	4770      	bx	lr
 8001ef0:	20000258 	.word	0x20000258

08001ef4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8001ef4:	4800      	ldr	r0, [pc, #0]	; (8001ef8 <LoraInfo_GetPtr+0x4>)
 8001ef6:	4770      	bx	lr
 8001ef8:	20000258 	.word	0x20000258

08001efc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001efc:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8001efe:	f000 f8c5 	bl	800208c <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001f02:	bd08      	pop	{r3, pc}

08001f04 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001f04:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001f06:	f000 f901 	bl	800210c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001f0a:	bd08      	pop	{r3, pc}

08001f0c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001f0c:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001f0e:	f000 f94b 	bl	80021a8 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001f12:	bd08      	pop	{r3, pc}

08001f14 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001f14:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001f16:	f000 f949 	bl	80021ac <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001f1a:	bd08      	pop	{r3, pc}

08001f1c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001f1c:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001f1e:	f000 f947 	bl	80021b0 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001f22:	bd08      	pop	{r3, pc}

08001f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f28:	f000 f944 	bl	80021b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2e:	490d      	ldr	r1, [pc, #52]	; (8001f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <LoopForever+0xe>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f44:	4c0a      	ldr	r4, [pc, #40]	; (8001f70 <LoopForever+0x16>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f52:	f00f f881 	bl	8011058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f56:	f7ff f8e9 	bl	800112c <main>

08001f5a <LoopForever>:

LoopForever:
    b LoopForever
 8001f5a:	e7fe      	b.n	8001f5a <LoopForever>
  ldr   r0, =_estack
 8001f5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001f68:	08011fa4 	.word	0x08011fa4
  ldr r2, =_sbss
 8001f6c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001f70:	20001a68 	.word	0x20001a68

08001f74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001f78:	b530      	push	{r4, r5, lr}
 8001f7a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure = {0};
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9303      	str	r3, [sp, #12]
 8001f80:	9304      	str	r3, [sp, #16]
 8001f82:	9305      	str	r3, [sp, #20]
 8001f84:	9306      	str	r3, [sp, #24]
 8001f86:	9307      	str	r3, [sp, #28]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001f88:	4604      	mov	r4, r0
 8001f8a:	b9f0      	cbnz	r0, 8001fca <BSP_PB_Init+0x52>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001fa0:	9b00      	ldr	r3, [sp, #0]
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <BSP_PB_Init+0xd8>)
 8001fa4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001fa8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	9306      	str	r3, [sp, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001fb2:	bb31      	cbnz	r1, 8002002 <BSP_PB_Init+0x8a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001fb8:	a903      	add	r1, sp, #12
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <BSP_PB_Init+0xdc>)
 8001fbc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001fc0:	f001 f8d4 	bl	800316c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	b009      	add	sp, #36	; 0x24
 8001fc8:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001fca:	2801      	cmp	r0, #1
 8001fcc:	d00d      	beq.n	8001fea <BSP_PB_Init+0x72>
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d1e7      	bne.n	8001fa2 <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fd8:	f042 0204 	orr.w	r2, r2, #4
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001fe6:	9b02      	ldr	r3, [sp, #8]
}
 8001fe8:	e7db      	b.n	8001fa2 <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001ffe:	9b01      	ldr	r3, [sp, #4]
}
 8002000:	e7cf      	b.n	8001fa2 <BSP_PB_Init+0x2a>
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002002:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002006:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002008:	a903      	add	r1, sp, #12
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <BSP_PB_Init+0xdc>)
 800200c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002010:	f001 f8ac 	bl	800316c <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002014:	4d10      	ldr	r5, [pc, #64]	; (8002058 <BSP_PB_Init+0xe0>)
 8002016:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <BSP_PB_Init+0xe4>)
 800201c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002020:	4628      	mov	r0, r5
 8002022:	f001 f89d 	bl	8003160 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <BSP_PB_Init+0xe8>)
 8002028:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800202c:	2100      	movs	r1, #0
 800202e:	4628      	mov	r0, r5
 8002030:	f001 f88f 	bl	8003152 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <BSP_PB_Init+0xec>)
 8002036:	571d      	ldrsb	r5, [r3, r4]
 8002038:	2200      	movs	r2, #0
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <BSP_PB_Init+0xf0>)
 800203c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002040:	4628      	mov	r0, r5
 8002042:	f000 fdb5 	bl	8002bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002046:	4628      	mov	r0, r5
 8002048:	f000 fde6 	bl	8002c18 <HAL_NVIC_EnableIRQ>
 800204c:	e7ba      	b.n	8001fc4 <BSP_PB_Init+0x4c>
 800204e:	bf00      	nop
 8002050:	08011568 	.word	0x08011568
 8002054:	08011570 	.word	0x08011570
 8002058:	200019b4 	.word	0x200019b4
 800205c:	08011588 	.word	0x08011588
 8002060:	0801157c 	.word	0x0801157c
 8002064:	08011564 	.word	0x08011564
 8002068:	08011594 	.word	0x08011594

0800206c <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800206c:	4770      	bx	lr

0800206e <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 800206e:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW3);
 8002070:	2002      	movs	r0, #2
 8002072:	f7ff fffb 	bl	800206c <BSP_PB_Callback>
}
 8002076:	bd08      	pop	{r3, pc}

08002078 <BUTTON_SW2_EXTI_Callback>:
{
 8002078:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW2);
 800207a:	2001      	movs	r0, #1
 800207c:	f7ff fff6 	bl	800206c <BSP_PB_Callback>
}
 8002080:	bd08      	pop	{r3, pc}

08002082 <BUTTON_SW1_EXTI_Callback>:
{
 8002082:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW1);
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff fff1 	bl	800206c <BSP_PB_Callback>
}
 800208a:	bd08      	pop	{r3, pc}

0800208c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002090:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002092:	2400      	movs	r4, #0
 8002094:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800209c:	f042 0204 	orr.w	r2, r2, #4
 80020a0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80020aa:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80020ac:	2710      	movs	r7, #16
 80020ae:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80020b4:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80020ba:	4d13      	ldr	r5, [pc, #76]	; (8002108 <BSP_RADIO_Init+0x7c>)
 80020bc:	a901      	add	r1, sp, #4
 80020be:	4628      	mov	r0, r5
 80020c0:	f001 f854 	bl	800316c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80020c4:	f04f 0820 	mov.w	r8, #32
 80020c8:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80020cc:	a901      	add	r1, sp, #4
 80020ce:	4628      	mov	r0, r5
 80020d0:	f001 f84c 	bl	800316c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80020d4:	2608      	movs	r6, #8
 80020d6:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80020d8:	a901      	add	r1, sp, #4
 80020da:	4628      	mov	r0, r5
 80020dc:	f001 f846 	bl	800316c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80020e0:	4622      	mov	r2, r4
 80020e2:	4641      	mov	r1, r8
 80020e4:	4628      	mov	r0, r5
 80020e6:	f001 f975 	bl	80033d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80020ea:	4622      	mov	r2, r4
 80020ec:	4639      	mov	r1, r7
 80020ee:	4628      	mov	r0, r5
 80020f0:	f001 f970 	bl	80033d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80020f4:	4622      	mov	r2, r4
 80020f6:	4631      	mov	r1, r6
 80020f8:	4628      	mov	r0, r5
 80020fa:	f001 f96b 	bl	80033d4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80020fe:	4620      	mov	r0, r4
 8002100:	b006      	add	sp, #24
 8002102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002106:	bf00      	nop
 8002108:	48000800 	.word	0x48000800

0800210c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800210c:	b510      	push	{r4, lr}
  switch (Config)
 800210e:	2803      	cmp	r0, #3
 8002110:	d813      	bhi.n	800213a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002112:	e8df f000 	tbb	[pc, r0]
 8002116:	1402      	.short	0x1402
 8002118:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800211a:	4c22      	ldr	r4, [pc, #136]	; (80021a4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 800211c:	2200      	movs	r2, #0
 800211e:	2108      	movs	r1, #8
 8002120:	4620      	mov	r0, r4
 8002122:	f001 f957 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2110      	movs	r1, #16
 800212a:	4620      	mov	r0, r4
 800212c:	f001 f952 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	2120      	movs	r1, #32
 8002134:	4620      	mov	r0, r4
 8002136:	f001 f94d 	bl	80033d4 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800213a:	2000      	movs	r0, #0
 800213c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800213e:	4c19      	ldr	r4, [pc, #100]	; (80021a4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002140:	2201      	movs	r2, #1
 8002142:	2108      	movs	r1, #8
 8002144:	4620      	mov	r0, r4
 8002146:	f001 f945 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800214a:	2201      	movs	r2, #1
 800214c:	2110      	movs	r1, #16
 800214e:	4620      	mov	r0, r4
 8002150:	f001 f940 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002154:	2200      	movs	r2, #0
 8002156:	2120      	movs	r1, #32
 8002158:	4620      	mov	r0, r4
 800215a:	f001 f93b 	bl	80033d4 <HAL_GPIO_WritePin>
      break;
 800215e:	e7ec      	b.n	800213a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002160:	4c10      	ldr	r4, [pc, #64]	; (80021a4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002162:	2201      	movs	r2, #1
 8002164:	2108      	movs	r1, #8
 8002166:	4620      	mov	r0, r4
 8002168:	f001 f934 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800216c:	2201      	movs	r2, #1
 800216e:	2110      	movs	r1, #16
 8002170:	4620      	mov	r0, r4
 8002172:	f001 f92f 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002176:	2201      	movs	r2, #1
 8002178:	2120      	movs	r1, #32
 800217a:	4620      	mov	r0, r4
 800217c:	f001 f92a 	bl	80033d4 <HAL_GPIO_WritePin>
      break;
 8002180:	e7db      	b.n	800213a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002182:	4c08      	ldr	r4, [pc, #32]	; (80021a4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002184:	2201      	movs	r2, #1
 8002186:	2108      	movs	r1, #8
 8002188:	4620      	mov	r0, r4
 800218a:	f001 f923 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800218e:	2200      	movs	r2, #0
 8002190:	2110      	movs	r1, #16
 8002192:	4620      	mov	r0, r4
 8002194:	f001 f91e 	bl	80033d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002198:	2201      	movs	r2, #1
 800219a:	2120      	movs	r1, #32
 800219c:	4620      	mov	r0, r4
 800219e:	f001 f919 	bl	80033d4 <HAL_GPIO_WritePin>
      break;
 80021a2:	e7ca      	b.n	800213a <BSP_RADIO_ConfigRFSwitch+0x2e>
 80021a4:	48000800 	.word	0x48000800

080021a8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80021a8:	2000      	movs	r0, #0
 80021aa:	4770      	bx	lr

080021ac <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80021ac:	2001      	movs	r0, #1
 80021ae:	4770      	bx	lr

080021b0 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80021b0:	2001      	movs	r0, #1
 80021b2:	4770      	bx	lr

080021b4 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ba:	2003      	movs	r0, #3
 80021bc:	f000 fce6 	bl	8002b8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021c0:	f001 faa4 	bl	800370c <HAL_RCC_GetHCLKFreq>
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_Init+0x28>)
 80021c6:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c8:	200f      	movs	r0, #15
 80021ca:	f7ff f98d 	bl	80014e8 <HAL_InitTick>
 80021ce:	b110      	cbz	r0, 80021d6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80021d0:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80021d2:	4620      	mov	r0, r4
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	4604      	mov	r4, r0
    HAL_MspInit();
 80021d8:	f7ff f850 	bl	800127c <HAL_MspInit>
 80021dc:	e7f9      	b.n	80021d2 <HAL_Init+0x1a>
 80021de:	bf00      	nop
 80021e0:	2000004c 	.word	0x2000004c

080021e4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80021e4:	4a02      	ldr	r2, [pc, #8]	; (80021f0 <HAL_SuspendTick+0xc>)
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	f023 0302 	bic.w	r3, r3, #2
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	4770      	bx	lr
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80021f4:	4a02      	ldr	r2, [pc, #8]	; (8002200 <HAL_ResumeTick+0xc>)
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6013      	str	r3, [r2, #0]
}
 80021fe:	4770      	bx	lr
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002204:	4b01      	ldr	r3, [pc, #4]	; (800220c <HAL_GetUIDw0+0x8>)
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	1fff7590 	.word	0x1fff7590

08002210 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002210:	4b01      	ldr	r3, [pc, #4]	; (8002218 <HAL_GetUIDw1+0x8>)
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	1fff7594 	.word	0x1fff7594

0800221c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 800221c:	4b01      	ldr	r3, [pc, #4]	; (8002224 <HAL_GetUIDw2+0x8>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	1fff7598 	.word	0x1fff7598

08002228 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002228:	4a02      	ldr	r2, [pc, #8]	; (8002234 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800222a:	6853      	ldr	r3, [r2, #4]
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8002232:	4770      	bx	lr
 8002234:	e0042000 	.word	0xe0042000

08002238 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002238:	4a02      	ldr	r2, [pc, #8]	; (8002244 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800223a:	6853      	ldr	r3, [r2, #4]
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002242:	4770      	bx	lr
 8002244:	e0042000 	.word	0xe0042000

08002248 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002248:	4a02      	ldr	r2, [pc, #8]	; (8002254 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800224a:	6853      	ldr	r3, [r2, #4]
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8002252:	4770      	bx	lr
 8002254:	e0042000 	.word	0xe0042000

08002258 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002258:	4a02      	ldr	r2, [pc, #8]	; (8002264 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800225a:	6853      	ldr	r3, [r2, #4]
 800225c:	f023 0302 	bic.w	r3, r3, #2
 8002260:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002262:	4770      	bx	lr
 8002264:	e0042000 	.word	0xe0042000

08002268 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002268:	4a02      	ldr	r2, [pc, #8]	; (8002274 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800226a:	6853      	ldr	r3, [r2, #4]
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8002272:	4770      	bx	lr
 8002274:	e0042000 	.word	0xe0042000

08002278 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002278:	4a02      	ldr	r2, [pc, #8]	; (8002284 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800227a:	6853      	ldr	r3, [r2, #4]
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002282:	4770      	bx	lr
 8002284:	e0042000 	.word	0xe0042000

08002288 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800228c:	2300      	movs	r3, #0
 800228e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002290:	2800      	cmp	r0, #0
 8002292:	f000 8121 	beq.w	80024d8 <HAL_ADC_Init+0x250>
 8002296:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002298:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800229a:	b1bb      	cbz	r3, 80022cc <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800229e:	6893      	ldr	r3, [r2, #8]
 80022a0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022a4:	d11f      	bne.n	80022e6 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80022a6:	6893      	ldr	r3, [r2, #8]
 80022a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022ac:	f023 0317 	bic.w	r3, r3, #23
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_ADC_Init+0x254>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	099b      	lsrs	r3, r3, #6
 80022bc:	4a88      	ldr	r2, [pc, #544]	; (80024e0 <HAL_ADC_Init+0x258>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	3301      	adds	r3, #1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80022ca:	e009      	b.n	80022e0 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 80022cc:	f7fe fdec 	bl	8000ea8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80022d0:	2300      	movs	r3, #0
 80022d2:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80022d4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80022d8:	e7e0      	b.n	800229c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80022da:	9b01      	ldr	r3, [sp, #4]
 80022dc:	3b01      	subs	r3, #1
 80022de:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80022e0:	9b01      	ldr	r3, [sp, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f9      	bne.n	80022da <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e8:	6893      	ldr	r3, [r2, #8]
 80022ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_Init+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022f2:	f043 0310 	orr.w	r3, r3, #16
 80022f6:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002300:	2001      	movs	r0, #1
 8002302:	e000      	b.n	8002306 <HAL_ADC_Init+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002304:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002306:	6893      	ldr	r3, [r2, #8]
 8002308:	f013 0304 	ands.w	r3, r3, #4
 800230c:	d000      	beq.n	8002310 <HAL_ADC_Init+0x88>
 800230e:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002310:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002312:	f011 0f10 	tst.w	r1, #16
 8002316:	f040 80d8 	bne.w	80024ca <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 80d5 	bne.w	80024ca <HAL_ADC_Init+0x242>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002320:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002322:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002326:	f041 0102 	orr.w	r1, r1, #2
 800232a:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800232c:	6891      	ldr	r1, [r2, #8]
 800232e:	f011 0f01 	tst.w	r1, #1
 8002332:	d131      	bne.n	8002398 <HAL_ADC_Init+0x110>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002334:	68d1      	ldr	r1, [r2, #12]
 8002336:	f021 0118 	bic.w	r1, r1, #24
 800233a:	68a5      	ldr	r5, [r4, #8]
 800233c:	4329      	orrs	r1, r5
 800233e:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002340:	6862      	ldr	r2, [r4, #4]
 8002342:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002346:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002348:	4315      	orrs	r5, r2
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800234a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800234e:	2901      	cmp	r1, #1
 8002350:	d018      	beq.n	8002384 <HAL_ADC_Init+0xfc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002352:	6821      	ldr	r1, [r4, #0]
 8002354:	690e      	ldr	r6, [r1, #16]
 8002356:	4a63      	ldr	r2, [pc, #396]	; (80024e4 <HAL_ADC_Init+0x25c>)
 8002358:	4032      	ands	r2, r6
 800235a:	432a      	orrs	r2, r5
 800235c:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800235e:	6862      	ldr	r2, [r4, #4]
 8002360:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002364:	d019      	beq.n	800239a <HAL_ADC_Init+0x112>
 8002366:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800236a:	d016      	beq.n	800239a <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800236c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002370:	d013      	beq.n	800239a <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002372:	4e5d      	ldr	r6, [pc, #372]	; (80024e8 <HAL_ADC_Init+0x260>)
 8002374:	6831      	ldr	r1, [r6, #0]
 8002376:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800237a:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800237e:	430a      	orrs	r2, r1
 8002380:	6032      	str	r2, [r6, #0]
 8002382:	e00a      	b.n	800239a <HAL_ADC_Init+0x112>
                     hadc->Init.Oversampling.Ratio         |
 8002384:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002386:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002388:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800238a:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 800238c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800238e:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002390:	4315      	orrs	r5, r2
 8002392:	f045 0501 	orr.w	r5, r5, #1
 8002396:	e7dc      	b.n	8002352 <HAL_ADC_Init+0xca>
  uint32_t tmpCFGR2 = 0UL;
 8002398:	461d      	mov	r5, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800239a:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800239c:	7e62      	ldrb	r2, [r4, #25]
 800239e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80023a0:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023a4:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80023a6:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80023ac:	b109      	cbz	r1, 80023b2 <HAL_ADC_Init+0x12a>
 80023ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023b2:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 80023b4:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023b6:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023b8:	6921      	ldr	r1, [r4, #16]
 80023ba:	2900      	cmp	r1, #0
 80023bc:	db47      	blt.n	800244e <HAL_ADC_Init+0x1c6>
 80023be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80023c2:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023c4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023cc:	f894 1020 	ldrb.w	r1, [r4, #32]
 80023d0:	2901      	cmp	r1, #1
 80023d2:	d03f      	beq.n	8002454 <HAL_ADC_Init+0x1cc>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023d6:	b121      	cbz	r1, 80023e2 <HAL_ADC_Init+0x15a>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023d8:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80023dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023de:	4331      	orrs	r1, r6
 80023e0:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80023e2:	6826      	ldr	r6, [r4, #0]
 80023e4:	68f1      	ldr	r1, [r6, #12]
 80023e6:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80023ea:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 80023ee:	4311      	orrs	r1, r2
 80023f0:	60f1      	str	r1, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80023f2:	6826      	ldr	r6, [r4, #0]
 80023f4:	6937      	ldr	r7, [r6, #16]
 80023f6:	493d      	ldr	r1, [pc, #244]	; (80024ec <HAL_ADC_Init+0x264>)
 80023f8:	4039      	ands	r1, r7
 80023fa:	430d      	orrs	r5, r1
 80023fc:	6135      	str	r5, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023fe:	6826      	ldr	r6, [r4, #0]
 8002400:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002402:	6975      	ldr	r5, [r6, #20]
 8002404:	f025 0507 	bic.w	r5, r5, #7
 8002408:	4329      	orrs	r1, r5
 800240a:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800240c:	6825      	ldr	r5, [r4, #0]
 800240e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002410:	6969      	ldr	r1, [r5, #20]
 8002412:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002416:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800241a:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800241c:	6921      	ldr	r1, [r4, #16]
 800241e:	bb31      	cbnz	r1, 800246e <HAL_ADC_Init+0x1e6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002420:	6821      	ldr	r1, [r4, #0]
 8002422:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002424:	f063 030f 	orn	r3, r3, #15
 8002428:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	68d9      	ldr	r1, [r3, #12]
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_ADC_Init+0x268>)
 8002430:	400b      	ands	r3, r1
 8002432:	4293      	cmp	r3, r2
 8002434:	d040      	beq.n	80024b8 <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002436:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002438:	f023 0312 	bic.w	r3, r3, #18
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800244a:	2001      	movs	r0, #1
 800244c:	e042      	b.n	80024d4 <HAL_ADC_Init+0x24c>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800244e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002452:	e7b6      	b.n	80023c2 <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002454:	b916      	cbnz	r6, 800245c <HAL_ADC_Init+0x1d4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002456:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800245a:	e7bb      	b.n	80023d4 <HAL_ADC_Init+0x14c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800245e:	f041 0120 	orr.w	r1, r1, #32
 8002462:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002464:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002466:	f041 0101 	orr.w	r1, r1, #1
 800246a:	65e1      	str	r1, [r4, #92]	; 0x5c
 800246c:	e7b2      	b.n	80023d4 <HAL_ADC_Init+0x14c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800246e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002472:	d1da      	bne.n	800242a <HAL_ADC_Init+0x1a2>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002474:	2b07      	cmp	r3, #7
 8002476:	d808      	bhi.n	800248a <HAL_ADC_Init+0x202>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002478:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800247a:	009d      	lsls	r5, r3, #2
 800247c:	40e9      	lsrs	r1, r5
 800247e:	f001 010f 	and.w	r1, r1, #15
 8002482:	290f      	cmp	r1, #15
 8002484:	d001      	beq.n	800248a <HAL_ADC_Init+0x202>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002486:	3301      	adds	r3, #1
 8002488:	e7f4      	b.n	8002474 <HAL_ADC_Init+0x1ec>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800248a:	2b01      	cmp	r3, #1
 800248c:	d00e      	beq.n	80024ac <HAL_ADC_Init+0x224>
        MODIFY_REG(hadc->Instance->CHSELR,
 800248e:	6825      	ldr	r5, [r4, #0]
 8002490:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002492:	69e3      	ldr	r3, [r4, #28]
 8002494:	3b01      	subs	r3, #1
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f003 031c 	and.w	r3, r3, #28
 800249c:	f06f 010f 	mvn.w	r1, #15
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80024a6:	430b      	orrs	r3, r1
 80024a8:	62ab      	str	r3, [r5, #40]	; 0x28
 80024aa:	e7be      	b.n	800242a <HAL_ADC_Init+0x1a2>
        SET_BIT(hadc->Instance->CHSELR,
 80024ac:	6821      	ldr	r1, [r4, #0]
 80024ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80024b0:	f063 030f 	orn	r3, r3, #15
 80024b4:	628b      	str	r3, [r1, #40]	; 0x28
 80024b6:	e7b8      	b.n	800242a <HAL_ADC_Init+0x1a2>
      ADC_CLEAR_ERRORCODE(hadc);
 80024b8:	2300      	movs	r3, #0
 80024ba:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80024bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80024c8:	e004      	b.n	80024d4 <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024d2:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80024d4:	b003      	add	sp, #12
 80024d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e7fb      	b.n	80024d4 <HAL_ADC_Init+0x24c>
 80024dc:	2000004c 	.word	0x2000004c
 80024e0:	053e2d63 	.word	0x053e2d63
 80024e4:	1ffffc02 	.word	0x1ffffc02
 80024e8:	40012708 	.word	0x40012708
 80024ec:	dffffc02 	.word	0xdffffc02
 80024f0:	833fffe7 	.word	0x833fffe7

080024f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	4604      	mov	r4, r0
 80024f8:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024fa:	6946      	ldr	r6, [r0, #20]
 80024fc:	2e08      	cmp	r6, #8
 80024fe:	d005      	beq.n	800250c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f013 0f01 	tst.w	r3, #1
 8002508:	d11e      	bne.n	8002548 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800250a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800250c:	f7fe ffee 	bl	80014ec <HAL_GetTick>
 8002510:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4232      	tst	r2, r6
 8002518:	d11c      	bne.n	8002554 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800251e:	d0f8      	beq.n	8002512 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002520:	f7fe ffe4 	bl	80014ec <HAL_GetTick>
 8002524:	1bc3      	subs	r3, r0, r7
 8002526:	42ab      	cmp	r3, r5
 8002528:	d801      	bhi.n	800252e <HAL_ADC_PollForConversion+0x3a>
 800252a:	2d00      	cmp	r5, #0
 800252c:	d1f1      	bne.n	8002512 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4233      	tst	r3, r6
 8002534:	d1ed      	bne.n	8002512 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800253e:	2300      	movs	r3, #0
 8002540:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002544:	2003      	movs	r0, #3
 8002546:	e028      	b.n	800259a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800254a:	f043 0320 	orr.w	r3, r3, #32
 800254e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002550:	2001      	movs	r0, #1
 8002552:	e022      	b.n	800259a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002554:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002562:	d115      	bne.n	8002590 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002564:	7ea2      	ldrb	r2, [r4, #26]
 8002566:	b99a      	cbnz	r2, 8002590 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f012 0f08 	tst.w	r2, #8
 800256e:	d00f      	beq.n	8002590 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	f012 0f04 	tst.w	r2, #4
 8002576:	d111      	bne.n	800259c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	f022 020c 	bic.w	r2, r2, #12
 800257e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002580:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002590:	7e20      	ldrb	r0, [r4, #24]
 8002592:	b960      	cbnz	r0, 80025ae <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	220c      	movs	r2, #12
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800259e:	f043 0320 	orr.w	r3, r3, #32
 80025a2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80025ac:	e7f0      	b.n	8002590 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80025ae:	2000      	movs	r0, #0
 80025b0:	e7f3      	b.n	800259a <HAL_ADC_PollForConversion+0xa6>

080025b2 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80025b6:	4770      	bx	lr

080025b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80025b8:	b470      	push	{r4, r5, r6}
 80025ba:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025bc:	2200      	movs	r2, #0
 80025be:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025c0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80025c2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80025c6:	2a01      	cmp	r2, #1
 80025c8:	f000 80ee 	beq.w	80027a8 <HAL_ADC_ConfigChannel+0x1f0>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2201      	movs	r2, #1
 80025d0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d4:	6802      	ldr	r2, [r0, #0]
 80025d6:	6890      	ldr	r0, [r2, #8]
 80025d8:	f010 0f04 	tst.w	r0, #4
 80025dc:	d00a      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025e6:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80025ee:	b003      	add	sp, #12
 80025f0:	bc70      	pop	{r4, r5, r6}
 80025f2:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80025f4:	6848      	ldr	r0, [r1, #4]
 80025f6:	2802      	cmp	r0, #2
 80025f8:	f000 8097 	beq.w	800272a <HAL_ADC_ConfigChannel+0x172>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025fc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002600:	d029      	beq.n	8002656 <HAL_ADC_ConfigChannel+0x9e>
 8002602:	4d6a      	ldr	r5, [pc, #424]	; (80027ac <HAL_ADC_ConfigChannel+0x1f4>)
 8002604:	42ac      	cmp	r4, r5
 8002606:	d026      	beq.n	8002656 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002608:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800260a:	f000 001f 	and.w	r0, r0, #31
 800260e:	250f      	movs	r5, #15
 8002610:	4085      	lsls	r5, r0
 8002612:	ea24 0505 	bic.w	r5, r4, r5
 8002616:	680c      	ldr	r4, [r1, #0]
 8002618:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800261c:	2e00      	cmp	r6, #0
 800261e:	d133      	bne.n	8002688 <HAL_ADC_ConfigChannel+0xd0>
 8002620:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002624:	fa04 f000 	lsl.w	r0, r4, r0
 8002628:	4328      	orrs	r0, r5
 800262a:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800262c:	684c      	ldr	r4, [r1, #4]
 800262e:	08a0      	lsrs	r0, r4, #2
 8002630:	3001      	adds	r0, #1
 8002632:	69dd      	ldr	r5, [r3, #28]
 8002634:	42a8      	cmp	r0, r5
 8002636:	d814      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002638:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800263a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800263c:	f004 041f 	and.w	r4, r4, #31
 8002640:	260f      	movs	r6, #15
 8002642:	40a6      	lsls	r6, r4
 8002644:	ea20 0006 	bic.w	r0, r0, r6
 8002648:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800264c:	fa05 f404 	lsl.w	r4, r5, r4
 8002650:	4304      	orrs	r4, r0
 8002652:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002654:	e005      	b.n	8002662 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002656:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002658:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800265a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800265e:	4320      	orrs	r0, r4
 8002660:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002662:	681d      	ldr	r5, [r3, #0]
 8002664:	680e      	ldr	r6, [r1, #0]
 8002666:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002668:	696c      	ldr	r4, [r5, #20]
 800266a:	ea24 2406 	bic.w	r4, r4, r6, lsl #8
 800266e:	ea00 2206 	and.w	r2, r0, r6, lsl #8
 8002672:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800267a:	4322      	orrs	r2, r4
 800267c:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800267e:	680a      	ldr	r2, [r1, #0]
 8002680:	2a00      	cmp	r2, #0
 8002682:	db09      	blt.n	8002698 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002684:	2000      	movs	r0, #0
 8002686:	e7af      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800268c:	b114      	cbz	r4, 8002694 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800268e:	fab4 f484 	clz	r4, r4
 8002692:	e7c7      	b.n	8002624 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002694:	2420      	movs	r4, #32
 8002696:	e7c5      	b.n	8002624 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002698:	4945      	ldr	r1, [pc, #276]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 800269a:	6808      	ldr	r0, [r1, #0]
 800269c:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026a0:	4c44      	ldr	r4, [pc, #272]	; (80027b4 <HAL_ADC_ConfigChannel+0x1fc>)
 80026a2:	42a2      	cmp	r2, r4
 80026a4:	d007      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0xfe>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026a6:	4c44      	ldr	r4, [pc, #272]	; (80027b8 <HAL_ADC_ConfigChannel+0x200>)
 80026a8:	42a2      	cmp	r2, r4
 80026aa:	d024      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x13e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80026ac:	4c43      	ldr	r4, [pc, #268]	; (80027bc <HAL_ADC_ConfigChannel+0x204>)
 80026ae:	42a2      	cmp	r2, r4
 80026b0:	d02e      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x158>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b2:	2000      	movs	r0, #0
 80026b4:	e798      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026b6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80026ba:	d1f4      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0xee>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026bc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026c0:	483b      	ldr	r0, [pc, #236]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 80026c2:	6802      	ldr	r2, [r0, #0]
 80026c4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80026c8:	4311      	orrs	r1, r2
 80026ca:	6001      	str	r1, [r0, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026cc:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <HAL_ADC_ConfigChannel+0x208>)
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	0992      	lsrs	r2, r2, #6
 80026d2:	493c      	ldr	r1, [pc, #240]	; (80027c4 <HAL_ADC_ConfigChannel+0x20c>)
 80026d4:	fba1 1202 	umull	r1, r2, r1, r2
 80026d8:	0992      	lsrs	r2, r2, #6
 80026da:	3201      	adds	r2, #1
 80026dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80026e4:	e002      	b.n	80026ec <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 80026e6:	9a01      	ldr	r2, [sp, #4]
 80026e8:	3a01      	subs	r2, #1
 80026ea:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80026ec:	9a01      	ldr	r2, [sp, #4]
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	d1f9      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f2:	2000      	movs	r0, #0
 80026f4:	e778      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80026fa:	d1d7      	bne.n	80026ac <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fc:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002700:	482b      	ldr	r0, [pc, #172]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 8002702:	6802      	ldr	r2, [r0, #0]
 8002704:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002708:	4311      	orrs	r1, r2
 800270a:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270c:	2000      	movs	r0, #0
}
 800270e:	e76b      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002710:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002714:	d146      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x1ec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002716:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800271a:	4825      	ldr	r0, [pc, #148]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 800271c:	6801      	ldr	r1, [r0, #0]
 800271e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002722:	430a      	orrs	r2, r1
 8002724:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002726:	2000      	movs	r0, #0
}
 8002728:	e75e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800272a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800272e:	d002      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x17e>
 8002730:	481e      	ldr	r0, [pc, #120]	; (80027ac <HAL_ADC_ConfigChannel+0x1f4>)
 8002732:	4284      	cmp	r4, r0
 8002734:	d106      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x18c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002736:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002738:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800273a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800273e:	ea20 0004 	bic.w	r0, r0, r4
 8002742:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002744:	680a      	ldr	r2, [r1, #0]
 8002746:	2a00      	cmp	r2, #0
 8002748:	db01      	blt.n	800274e <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274a:	2000      	movs	r0, #0
 800274c:	e74c      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800274e:	4918      	ldr	r1, [pc, #96]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 8002750:	6809      	ldr	r1, [r1, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <HAL_ADC_ConfigChannel+0x1fc>)
 8002754:	4282      	cmp	r2, r0
 8002756:	d007      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x1b0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002758:	4817      	ldr	r0, [pc, #92]	; (80027b8 <HAL_ADC_ConfigChannel+0x200>)
 800275a:	4282      	cmp	r2, r0
 800275c:	d00e      	beq.n	800277c <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800275e:	4817      	ldr	r0, [pc, #92]	; (80027bc <HAL_ADC_ConfigChannel+0x204>)
 8002760:	4282      	cmp	r2, r0
 8002762:	d015      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2000      	movs	r0, #0
 8002766:	e73f      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800276c:	4810      	ldr	r0, [pc, #64]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 800276e:	6802      	ldr	r2, [r0, #0]
 8002770:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002774:	4311      	orrs	r1, r2
 8002776:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002778:	2000      	movs	r0, #0
}
 800277a:	e735      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277c:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 8002782:	6801      	ldr	r1, [r0, #0]
 8002784:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002788:	430a      	orrs	r2, r1
 800278a:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278c:	2000      	movs	r0, #0
}
 800278e:	e72b      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002790:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <HAL_ADC_ConfigChannel+0x1f8>)
 8002796:	6801      	ldr	r1, [r0, #0]
 8002798:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800279c:	430a      	orrs	r2, r1
 800279e:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a0:	2000      	movs	r0, #0
}
 80027a2:	e721      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
 80027a4:	2000      	movs	r0, #0
 80027a6:	e71f      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80027a8:	2002      	movs	r0, #2
 80027aa:	e720      	b.n	80025ee <HAL_ADC_ConfigChannel+0x36>
 80027ac:	80000004 	.word	0x80000004
 80027b0:	40012708 	.word	0x40012708
 80027b4:	b0001000 	.word	0xb0001000
 80027b8:	b8004000 	.word	0xb8004000
 80027bc:	b4002000 	.word	0xb4002000
 80027c0:	2000004c 	.word	0x2000004c
 80027c4:	053e2d63 	.word	0x053e2d63

080027c8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80027c8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80027ca:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	f012 0f04 	tst.w	r2, #4
 80027d2:	d02a      	beq.n	800282a <ADC_ConversionStop+0x62>
 80027d4:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	f012 0f02 	tst.w	r2, #2
 80027dc:	d107      	bne.n	80027ee <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027e4:	f022 0217 	bic.w	r2, r2, #23
 80027e8:	f042 0210 	orr.w	r2, r2, #16
 80027ec:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ee:	f7fe fe7d 	bl	80014ec <HAL_GetTick>
 80027f2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f013 0f04 	tst.w	r3, #4
 80027fc:	d013      	beq.n	8002826 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80027fe:	f7fe fe75 	bl	80014ec <HAL_GetTick>
 8002802:	1b43      	subs	r3, r0, r5
 8002804:	2b02      	cmp	r3, #2
 8002806:	d9f5      	bls.n	80027f4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f013 0f04 	tst.w	r3, #4
 8002810:	d0f0      	beq.n	80027f4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002814:	f043 0310 	orr.w	r3, r3, #16
 8002818:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
 8002824:	e002      	b.n	800282c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	e000      	b.n	800282c <ADC_ConversionStop+0x64>
 800282a:	2000      	movs	r0, #0
}
 800282c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002830 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002830:	b530      	push	{r4, r5, lr}
 8002832:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002834:	2300      	movs	r3, #0
 8002836:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002838:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	f012 0f01 	tst.w	r2, #1
 8002840:	d159      	bne.n	80028f6 <ADC_Enable+0xc6>
 8002842:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <ADC_Enable+0xcc>)
 8002848:	4211      	tst	r1, r2
 800284a:	d11b      	bne.n	8002884 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002852:	f022 0217 	bic.w	r2, r2, #23
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <ADC_Enable+0xd0>)
 800285e:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002860:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002864:	d018      	beq.n	8002898 <ADC_Enable+0x68>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <ADC_Enable+0xd4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <ADC_Enable+0xd8>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	099b      	lsrs	r3, r3, #6
 8002874:	3301      	adds	r3, #1
 8002876:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	b16b      	cbz	r3, 8002898 <ADC_Enable+0x68>
      {
        wait_loop_index--;
 800287c:	9b01      	ldr	r3, [sp, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	e7f9      	b.n	8002878 <ADC_Enable+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002894:	2001      	movs	r0, #1
 8002896:	e02f      	b.n	80028f8 <ADC_Enable+0xc8>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002898:	7e63      	ldrb	r3, [r4, #25]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <ADC_Enable+0x72>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800289e:	2000      	movs	r0, #0
 80028a0:	e02a      	b.n	80028f8 <ADC_Enable+0xc8>
      tickstart = HAL_GetTick();
 80028a2:	f7fe fe23 	bl	80014ec <HAL_GetTick>
 80028a6:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f012 0f01 	tst.w	r2, #1
 80028b0:	d11f      	bne.n	80028f2 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	f012 0f01 	tst.w	r2, #1
 80028b8:	d107      	bne.n	80028ca <ADC_Enable+0x9a>
  MODIFY_REG(ADCx->CR,
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028c0:	f022 0217 	bic.w	r2, r2, #23
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ca:	f7fe fe0f 	bl	80014ec <HAL_GetTick>
 80028ce:	1b40      	subs	r0, r0, r5
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d9e9      	bls.n	80028a8 <ADC_Enable+0x78>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f013 0f01 	tst.w	r3, #1
 80028dc:	d1e4      	bne.n	80028a8 <ADC_Enable+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028e0:	f043 0310 	orr.w	r3, r3, #16
 80028e4:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
 80028f0:	e002      	b.n	80028f8 <ADC_Enable+0xc8>
  return HAL_OK;
 80028f2:	2000      	movs	r0, #0
 80028f4:	e000      	b.n	80028f8 <ADC_Enable+0xc8>
 80028f6:	2000      	movs	r0, #0
}
 80028f8:	b003      	add	sp, #12
 80028fa:	bd30      	pop	{r4, r5, pc}
 80028fc:	80000017 	.word	0x80000017
 8002900:	40012708 	.word	0x40012708
 8002904:	2000004c 	.word	0x2000004c
 8002908:	053e2d63 	.word	0x053e2d63

0800290c <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f013 0f04 	tst.w	r3, #4
 8002914:	d128      	bne.n	8002968 <HAL_ADC_Start+0x5c>
{
 8002916:	b510      	push	{r4, lr}
 8002918:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800291a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800291e:	2b01      	cmp	r3, #1
 8002920:	d024      	beq.n	800296c <HAL_ADC_Start+0x60>
 8002922:	2301      	movs	r3, #1
 8002924:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002928:	f7ff ff82 	bl	8002830 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800292c:	b9c0      	cbnz	r0, 8002960 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800292e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002930:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800293e:	2300      	movs	r3, #0
 8002940:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	211c      	movs	r1, #28
 8002946:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002948:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800294c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800294e:	6893      	ldr	r3, [r2, #8]
 8002950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002954:	f023 0317 	bic.w	r3, r3, #23
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6093      	str	r3, [r2, #8]
}
 800295e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002960:	2300      	movs	r3, #0
 8002962:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002966:	e7fa      	b.n	800295e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002968:	2002      	movs	r0, #2
}
 800296a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800296c:	2002      	movs	r0, #2
 800296e:	e7f6      	b.n	800295e <HAL_ADC_Start+0x52>

08002970 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002974:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002976:	6893      	ldr	r3, [r2, #8]
 8002978:	f013 0302 	ands.w	r3, r3, #2
 800297c:	d000      	beq.n	8002980 <ADC_Disable+0x10>
 800297e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002980:	6891      	ldr	r1, [r2, #8]
 8002982:	f011 0f01 	tst.w	r1, #1
 8002986:	d039      	beq.n	80029fc <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002988:	2b00      	cmp	r3, #0
 800298a:	d139      	bne.n	8002a00 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800298c:	6893      	ldr	r3, [r2, #8]
 800298e:	f003 0305 	and.w	r3, r3, #5
 8002992:	2b01      	cmp	r3, #1
 8002994:	d009      	beq.n	80029aa <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80029a6:	2001      	movs	r0, #1
 80029a8:	e029      	b.n	80029fe <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80029aa:	6893      	ldr	r3, [r2, #8]
 80029ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b0:	f023 0317 	bic.w	r3, r3, #23
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	2203      	movs	r2, #3
 80029be:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fd94 	bl	80014ec <HAL_GetTick>
 80029c4:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f013 0f01 	tst.w	r3, #1
 80029ce:	d013      	beq.n	80029f8 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029d0:	f7fe fd8c 	bl	80014ec <HAL_GetTick>
 80029d4:	1b40      	subs	r0, r0, r5
 80029d6:	2802      	cmp	r0, #2
 80029d8:	d9f5      	bls.n	80029c6 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f013 0f01 	tst.w	r3, #1
 80029e2:	d0f0      	beq.n	80029c6 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029e6:	f043 0310 	orr.w	r3, r3, #16
 80029ea:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
 80029f6:	e002      	b.n	80029fe <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029f8:	2000      	movs	r0, #0
 80029fa:	e000      	b.n	80029fe <ADC_Disable+0x8e>
 80029fc:	2000      	movs	r0, #0
}
 80029fe:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002a00:	2000      	movs	r0, #0
 8002a02:	e7fc      	b.n	80029fe <ADC_Disable+0x8e>

08002a04 <HAL_ADC_DeInit>:
{
 8002a04:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d04a      	beq.n	8002aa0 <HAL_ADC_DeInit+0x9c>
 8002a0a:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002a0c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002a14:	f7ff fed8 	bl	80027c8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002a18:	4606      	mov	r6, r0
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d031      	beq.n	8002a82 <HAL_ADC_DeInit+0x7e>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002a1e:	6822      	ldr	r2, [r4, #0]
 8002a20:	6853      	ldr	r3, [r2, #4]
 8002a22:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	f240 329f 	movw	r2, #927	; 0x39f
 8002a32:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	68d1      	ldr	r1, [r2, #12]
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_ADC_DeInit+0xa0>)
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	6913      	ldr	r3, [r2, #16]
 8002a42:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a46:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	6953      	ldr	r3, [r2, #20]
 8002a4c:	f023 0307 	bic.w	r3, r3, #7
 8002a50:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	6a13      	ldr	r3, [r2, #32]
 8002a56:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002a5a:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a60:	2500      	movs	r5, #0
 8002a62:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_ADC_DeInit+0xa4>)
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002a6c:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7fe fa30 	bl	8000ed4 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002a74:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8002a76:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8002a78:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8002a7a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8002a7e:	4630      	mov	r0, r6
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff ff74 	bl	8002970 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002a88:	4606      	mov	r6, r0
 8002a8a:	b908      	cbnz	r0, 8002a90 <HAL_ADC_DeInit+0x8c>
      hadc->State = HAL_ADC_STATE_READY;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002a90:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002a92:	6893      	ldr	r3, [r2, #8]
 8002a94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a98:	f023 0317 	bic.w	r3, r3, #23
 8002a9c:	6093      	str	r3, [r2, #8]
}
 8002a9e:	e7be      	b.n	8002a1e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8002aa0:	2601      	movs	r6, #1
 8002aa2:	e7ec      	b.n	8002a7e <HAL_ADC_DeInit+0x7a>
 8002aa4:	833e0200 	.word	0x833e0200
 8002aa8:	40012708 	.word	0x40012708

08002aac <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002aac:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d019      	beq.n	8002ae8 <HAL_ADC_Stop+0x3c>
{
 8002ab4:	b510      	push	{r4, lr}
 8002ab6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002abe:	f7ff fe83 	bl	80027c8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002ac2:	b118      	cbz	r0, 8002acc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8002aca:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff ff4f 	bl	8002970 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d1f6      	bne.n	8002ac4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ae6:	e7ed      	b.n	8002ac4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8002ae8:	2002      	movs	r0, #2
}
 8002aea:	4770      	bx	lr

08002aec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002aec:	b530      	push	{r4, r5, lr}
 8002aee:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002af4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d045      	beq.n	8002b88 <HAL_ADCEx_Calibration_Start+0x9c>
 8002afc:	4604      	mov	r4, r0
 8002afe:	2301      	movs	r3, #1
 8002b00:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b04:	f7ff ff34 	bl	8002970 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b08:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	f012 0f01 	tst.w	r2, #1
 8002b10:	d008      	beq.n	8002b24 <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8002b20:	b003      	add	sp, #12
 8002b22:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002b24:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002b26:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002b2a:	f042 0202 	orr.w	r2, r2, #2
 8002b2e:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002b30:	68dd      	ldr	r5, [r3, #12]
 8002b32:	f005 0503 	and.w	r5, r5, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	f022 0203 	bic.w	r2, r2, #3
 8002b3c:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002b3e:	6821      	ldr	r1, [r4, #0]
 8002b40:	688b      	ldr	r3, [r1, #8]
 8002b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b46:	608b      	str	r3, [r1, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b48:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	2900      	cmp	r1, #0
 8002b4e:	db09      	blt.n	8002b64 <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	432a      	orrs	r2, r5
 8002b54:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b58:	f023 0303 	bic.w	r3, r3, #3
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b62:	e7da      	b.n	8002b1a <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 8002b64:	9b01      	ldr	r3, [sp, #4]
 8002b66:	3301      	adds	r3, #1
 8002b68:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b6a:	9b01      	ldr	r3, [sp, #4]
 8002b6c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8002b70:	d3ea      	bcc.n	8002b48 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8002b72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b74:	f023 0312 	bic.w	r3, r3, #18
 8002b78:	f043 0310 	orr.w	r3, r3, #16
 8002b7c:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
 8002b86:	e7cb      	b.n	8002b20 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 8002b88:	2002      	movs	r0, #2
 8002b8a:	e7c9      	b.n	8002b20 <HAL_ADCEx_Calibration_Start+0x34>

08002b8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b98:	0200      	lsls	r0, r0, #8
 8002b9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ba8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_NVIC_SetPriority+0x60>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bba:	f1c3 0407 	rsb	r4, r3, #7
 8002bbe:	2c04      	cmp	r4, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc4:	1d1d      	adds	r5, r3, #4
 8002bc6:	2d06      	cmp	r5, #6
 8002bc8:	d918      	bls.n	8002bfc <HAL_NVIC_SetPriority+0x4c>
 8002bca:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8002bd0:	fa05 f404 	lsl.w	r4, r5, r4
 8002bd4:	ea21 0104 	bic.w	r1, r1, r4
 8002bd8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bda:	fa05 f303 	lsl.w	r3, r5, r3
 8002bde:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002be4:	2800      	cmp	r0, #0
 8002be6:	db0b      	blt.n	8002c00 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	0109      	lsls	r1, r1, #4
 8002bea:	b2c9      	uxtb	r1, r1
 8002bec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002bf0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002bf4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002bf8:	bc30      	pop	{r4, r5}
 8002bfa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e7e5      	b.n	8002bcc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	f000 000f 	and.w	r0, r0, #15
 8002c04:	0109      	lsls	r1, r1, #4
 8002c06:	b2c9      	uxtb	r1, r1
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <HAL_NVIC_SetPriority+0x64>)
 8002c0a:	5419      	strb	r1, [r3, r0]
 8002c0c:	e7f4      	b.n	8002bf8 <HAL_NVIC_SetPriority+0x48>
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00
 8002c14:	e000ed14 	.word	0xe000ed14

08002c18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	db07      	blt.n	8002c2c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1c:	f000 021f 	and.w	r2, r0, #31
 8002c20:	0940      	lsrs	r0, r0, #5
 8002c22:	2301      	movs	r3, #1
 8002c24:	4093      	lsls	r3, r2
 8002c26:	4a02      	ldr	r2, [pc, #8]	; (8002c30 <HAL_NVIC_EnableIRQ+0x18>)
 8002c28:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c34:	2800      	cmp	r0, #0
 8002c36:	db0c      	blt.n	8002c52 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c38:	f000 021f 	and.w	r2, r0, #31
 8002c3c:	0940      	lsrs	r0, r0, #5
 8002c3e:	2301      	movs	r3, #1
 8002c40:	4093      	lsls	r3, r2
 8002c42:	3020      	adds	r0, #32
 8002c44:	4a03      	ldr	r2, [pc, #12]	; (8002c54 <HAL_NVIC_DisableIRQ+0x20>)
 8002c46:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c4e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002c52:	4770      	bx	lr
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c5a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002c5c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002c5e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c60:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002c62:	b114      	cbz	r4, 8002c6a <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c64:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002c66:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002c68:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c6a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c6c:	f004 051c 	and.w	r5, r4, #28
 8002c70:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002c72:	2401      	movs	r4, #1
 8002c74:	40ac      	lsls	r4, r5
 8002c76:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c78:	6804      	ldr	r4, [r0, #0]
 8002c7a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c7c:	6883      	ldr	r3, [r0, #8]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d005      	beq.n	8002c8e <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c86:	6803      	ldr	r3, [r0, #0]
 8002c88:	60da      	str	r2, [r3, #12]
  }
}
 8002c8a:	bc70      	pop	{r4, r5, r6}
 8002c8c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	60d9      	str	r1, [r3, #12]
 8002c96:	e7f8      	b.n	8002c8a <DMA_SetConfig+0x32>

08002c98 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c98:	6803      	ldr	r3, [r0, #0]
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d816      	bhi.n	8002cce <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002ca2:	f022 0203 	bic.w	r2, r2, #3
 8002ca6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002caa:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002cae:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3b08      	subs	r3, #8
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002cbe:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002ccc:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002cce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002cd0:	f022 0103 	bic.w	r1, r2, #3
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8002cd6:	440a      	add	r2, r1
 8002cd8:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	3307      	adds	r3, #7
 8002ce8:	e7e8      	b.n	8002cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8002cea:	bf00      	nop
 8002cec:	40020407 	.word	0x40020407
 8002cf0:	cccccccd 	.word	0xcccccccd
 8002cf4:	40020880 	.word	0x40020880
 8002cf8:	4002081c 	.word	0x4002081c

08002cfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cfc:	6843      	ldr	r3, [r0, #4]
 8002cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002d04:	441a      	add	r2, r3
 8002d06:	0092      	lsls	r2, r2, #2
 8002d08:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d0a:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002d0c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2201      	movs	r2, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	1000823f 	.word	0x1000823f
 8002d24:	40020940 	.word	0x40020940

08002d28 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d060      	beq.n	8002dee <HAL_DMA_Init+0xc6>
{
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d30:	6802      	ldr	r2, [r0, #0]
 8002d32:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_DMA_Init+0xcc>)
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d842      	bhi.n	8002dbe <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <HAL_DMA_Init+0xd0>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	492f      	ldr	r1, [pc, #188]	; (8002dfc <HAL_DMA_Init+0xd4>)
 8002d3e:	fba1 1303 	umull	r1, r3, r1, r3
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d48:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_DMA_Init+0xd8>)
 8002d4a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d5e:	6821      	ldr	r1, [r4, #0]
 8002d60:	680a      	ldr	r2, [r1, #0]
 8002d62:	68a3      	ldr	r3, [r4, #8]
 8002d64:	68e0      	ldr	r0, [r4, #12]
 8002d66:	4303      	orrs	r3, r0
 8002d68:	6920      	ldr	r0, [r4, #16]
 8002d6a:	4303      	orrs	r3, r0
 8002d6c:	6960      	ldr	r0, [r4, #20]
 8002d6e:	4303      	orrs	r3, r0
 8002d70:	69a0      	ldr	r0, [r4, #24]
 8002d72:	4303      	orrs	r3, r0
 8002d74:	69e0      	ldr	r0, [r4, #28]
 8002d76:	4303      	orrs	r3, r0
 8002d78:	6a20      	ldr	r0, [r4, #32]
 8002d7a:	4303      	orrs	r3, r0
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff ff89 	bl	8002c98 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d86:	68a3      	ldr	r3, [r4, #8]
 8002d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d8c:	d022      	beq.n	8002dd4 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d8e:	6863      	ldr	r3, [r4, #4]
 8002d90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d96:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002d9c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d9e:	6863      	ldr	r3, [r4, #4]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d919      	bls.n	8002dda <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002daa:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dac:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dae:	2000      	movs	r0, #0
 8002db0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002db8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002dbc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_DMA_Init+0xdc>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_DMA_Init+0xd4>)
 8002dc4:	fba1 1303 	umull	r1, r3, r1, r3
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_DMA_Init+0xe0>)
 8002dd0:	6403      	str	r3, [r0, #64]	; 0x40
 8002dd2:	e7bb      	b.n	8002d4c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6063      	str	r3, [r4, #4]
 8002dd8:	e7d9      	b.n	8002d8e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff ff8e 	bl	8002cfc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002de0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002de8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	e7df      	b.n	8002dae <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002dee:	2001      	movs	r0, #1
}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40020407 	.word	0x40020407
 8002df8:	bffdfff8 	.word	0xbffdfff8
 8002dfc:	cccccccd 	.word	0xcccccccd
 8002e00:	40020000 	.word	0x40020000
 8002e04:	bffdfbf8 	.word	0xbffdfbf8
 8002e08:	40020400 	.word	0x40020400

08002e0c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d04b      	beq.n	8002ea8 <HAL_DMA_DeInit+0x9c>
{
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	6813      	ldr	r3, [r2, #0]
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e1e:	6802      	ldr	r2, [r0, #0]
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_DMA_DeInit+0xa0>)
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d82c      	bhi.n	8002e80 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_DMA_DeInit+0xa4>)
 8002e28:	4413      	add	r3, r2
 8002e2a:	4922      	ldr	r1, [pc, #136]	; (8002eb4 <HAL_DMA_DeInit+0xa8>)
 8002e2c:	fba1 1303 	umull	r1, r3, r1, r3
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_DMA_DeInit+0xac>)
 8002e38:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e40:	f003 021c 	and.w	r2, r3, #28
 8002e44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002e46:	2301      	movs	r3, #1
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff ff23 	bl	8002c98 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8002e52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e54:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e58:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e5a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d918      	bls.n	8002e96 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8002e64:	2000      	movs	r0, #0
 8002e66:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002e68:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e6a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8002e6c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002e6e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002e70:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002e72:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e74:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002e76:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002e7a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_DMA_DeInit+0xb0>)
 8002e82:	4413      	add	r3, r2
 8002e84:	490b      	ldr	r1, [pc, #44]	; (8002eb4 <HAL_DMA_DeInit+0xa8>)
 8002e86:	fba1 1303 	umull	r1, r3, r1, r3
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_DMA_DeInit+0xb4>)
 8002e92:	6403      	str	r3, [r0, #64]	; 0x40
 8002e94:	e7d1      	b.n	8002e3a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff ff30 	bl	8002cfc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e9e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e7dd      	b.n	8002e64 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8002ea8:	2001      	movs	r0, #1
}
 8002eaa:	4770      	bx	lr
 8002eac:	40020407 	.word	0x40020407
 8002eb0:	bffdfff8 	.word	0xbffdfff8
 8002eb4:	cccccccd 	.word	0xcccccccd
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	bffdfbf8 	.word	0xbffdfbf8
 8002ec0:	40020400 	.word	0x40020400

08002ec4 <HAL_DMA_Start_IT>:
{
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002ec8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002ecc:	2801      	cmp	r0, #1
 8002ece:	d043      	beq.n	8002f58 <HAL_DMA_Start_IT+0x94>
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8002ed6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002eda:	b2c0      	uxtb	r0, r0
 8002edc:	2801      	cmp	r0, #1
 8002ede:	d006      	beq.n	8002eee <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
}
 8002eec:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002ef8:	6825      	ldr	r5, [r4, #0]
 8002efa:	6828      	ldr	r0, [r5, #0]
 8002efc:	f020 0001 	bic.w	r0, r0, #1
 8002f00:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f02:	4620      	mov	r0, r4
 8002f04:	f7ff fea8 	bl	8002c58 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002f08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f0a:	b1d3      	cbz	r3, 8002f42 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	f043 030e 	orr.w	r3, r3, #14
 8002f14:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002f1e:	d003      	beq.n	8002f28 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f26:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002f28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f2a:	b11b      	cbz	r3, 8002f34 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f32:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002f34:	6822      	ldr	r2, [r4, #0]
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2000      	movs	r0, #0
 8002f40:	e7d4      	b.n	8002eec <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	f043 030a 	orr.w	r3, r3, #10
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e7de      	b.n	8002f16 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8002f58:	2002      	movs	r0, #2
 8002f5a:	e7c7      	b.n	8002eec <HAL_DMA_Start_IT+0x28>

08002f5c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d034      	beq.n	8002fcc <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f62:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	2a02      	cmp	r2, #2
 8002f6a:	d006      	beq.n	8002f7a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002f70:	2200      	movs	r2, #0
 8002f72:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002f76:	2001      	movs	r0, #1
 8002f78:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7a:	6801      	ldr	r1, [r0, #0]
 8002f7c:	680a      	ldr	r2, [r1, #0]
 8002f7e:	f022 020e 	bic.w	r2, r2, #14
 8002f82:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f84:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f86:	680a      	ldr	r2, [r1, #0]
 8002f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f8e:	6801      	ldr	r1, [r0, #0]
 8002f90:	680a      	ldr	r2, [r1, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f9a:	f002 011c 	and.w	r1, r2, #28
 8002f9e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	408a      	lsls	r2, r1
 8002fa4:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fa8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002faa:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fae:	b132      	cbz	r2, 8002fbe <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fb0:	6811      	ldr	r1, [r2, #0]
 8002fb2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002fb6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002fbc:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002fca:	4770      	bx	lr
    return HAL_ERROR;
 8002fcc:	2001      	movs	r0, #1
}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_DMA_Abort_IT>:
{
 8002fd0:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fd2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d003      	beq.n	8002fe4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fdc:	2304      	movs	r3, #4
 8002fde:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002fe0:	2001      	movs	r0, #1
}
 8002fe2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe4:	6802      	ldr	r2, [r0, #0]
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	f023 030e 	bic.w	r3, r3, #14
 8002fec:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002fee:	6802      	ldr	r2, [r0, #0]
 8002ff0:	6813      	ldr	r3, [r2, #0]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ff8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002ffa:	6813      	ldr	r3, [r2, #0]
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003002:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003004:	f003 021c 	and.w	r2, r3, #28
 8003008:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800300a:	2301      	movs	r3, #1
 800300c:	4093      	lsls	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003010:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003012:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003014:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003016:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003018:	b133      	cbz	r3, 8003028 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003020:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003022:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003024:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003026:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003028:	2301      	movs	r3, #1
 800302a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800302e:	2300      	movs	r3, #0
 8003030:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003034:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003036:	b113      	cbz	r3, 800303e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003038:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2000      	movs	r0, #0
 800303c:	e7d1      	b.n	8002fe2 <HAL_DMA_Abort_IT+0x12>
 800303e:	2000      	movs	r0, #0
 8003040:	e7cf      	b.n	8002fe2 <HAL_DMA_Abort_IT+0x12>
	...

08003044 <HAL_DMA_IRQHandler>:
{
 8003044:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003046:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003048:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800304a:	6804      	ldr	r4, [r0, #0]
 800304c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800304e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003050:	f003 031c 	and.w	r3, r3, #28
 8003054:	2204      	movs	r2, #4
 8003056:	409a      	lsls	r2, r3
 8003058:	420a      	tst	r2, r1
 800305a:	d015      	beq.n	8003088 <HAL_DMA_IRQHandler+0x44>
 800305c:	f015 0f04 	tst.w	r5, #4
 8003060:	d012      	beq.n	8003088 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	f013 0f20 	tst.w	r3, #32
 8003068:	d103      	bne.n	8003072 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003072:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003074:	f003 021c 	and.w	r2, r3, #28
 8003078:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800307a:	2304      	movs	r3, #4
 800307c:	4093      	lsls	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003080:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003082:	b103      	cbz	r3, 8003086 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003084:	4798      	blx	r3
}
 8003086:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003088:	2202      	movs	r2, #2
 800308a:	409a      	lsls	r2, r3
 800308c:	420a      	tst	r2, r1
 800308e:	d028      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x9e>
 8003090:	f015 0f02 	tst.w	r5, #2
 8003094:	d025      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	f013 0f20 	tst.w	r3, #32
 800309c:	d106      	bne.n	80030ac <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	f023 030a 	bic.w	r3, r3, #10
 80030a4:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80030ac:	6802      	ldr	r2, [r0, #0]
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_DMA_IRQHandler+0xdc>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d90e      	bls.n	80030d2 <HAL_DMA_IRQHandler+0x8e>
 80030b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030b6:	f003 021c 	and.w	r2, r3, #28
 80030ba:	2302      	movs	r3, #2
 80030bc:	4093      	lsls	r3, r2
 80030be:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_DMA_IRQHandler+0xe0>)
 80030c0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80030c2:	2300      	movs	r3, #0
 80030c4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80030c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0db      	beq.n	8003086 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80030ce:	4798      	blx	r3
 80030d0:	e7d9      	b.n	8003086 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80030d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030d4:	f003 021c 	and.w	r2, r3, #28
 80030d8:	2302      	movs	r3, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <HAL_DMA_IRQHandler+0xe4>)
 80030de:	6053      	str	r3, [r2, #4]
 80030e0:	e7ef      	b.n	80030c2 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80030e2:	2208      	movs	r2, #8
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	420b      	tst	r3, r1
 80030ea:	d0cc      	beq.n	8003086 <HAL_DMA_IRQHandler+0x42>
 80030ec:	f015 0f08 	tst.w	r5, #8
 80030f0:	d0c9      	beq.n	8003086 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	f023 030e 	bic.w	r3, r3, #14
 80030f8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030fc:	f003 031c 	and.w	r3, r3, #28
 8003100:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003102:	2201      	movs	r2, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800310a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800310c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003110:	2300      	movs	r3, #0
 8003112:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003116:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0b4      	beq.n	8003086 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800311c:	4798      	blx	r3
  return;
 800311e:	e7b2      	b.n	8003086 <HAL_DMA_IRQHandler+0x42>
 8003120:	40020080 	.word	0x40020080
 8003124:	40020400 	.word	0x40020400
 8003128:	40020000 	.word	0x40020000

0800312c <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 800312c:	b178      	cbz	r0, 800314e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800312e:	6803      	ldr	r3, [r0, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003132:	f011 0f10 	tst.w	r1, #16
 8003136:	d004      	beq.n	8003142 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800313c:	d004      	beq.n	8003148 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 800313e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003142:	601a      	str	r2, [r3, #0]
  return status;
 8003144:	2000      	movs	r0, #0
 8003146:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003148:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800314c:	e7f9      	b.n	8003142 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 800314e:	2001      	movs	r0, #1
}
 8003150:	4770      	bx	lr

08003152 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003152:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003154:	4608      	mov	r0, r1
 8003156:	b909      	cbnz	r1, 800315c <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003158:	605a      	str	r2, [r3, #4]
      break;
 800315a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800315c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800315e:	4770      	bx	lr

08003160 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003160:	b110      	cbz	r0, 8003168 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003162:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8003164:	2000      	movs	r0, #0
 8003166:	4770      	bx	lr
    return HAL_ERROR;
 8003168:	2001      	movs	r0, #1
  }
}
 800316a:	4770      	bx	lr

0800316c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 800316e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003170:	e05f      	b.n	8003232 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003172:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003174:	005f      	lsls	r7, r3, #1
 8003176:	2503      	movs	r5, #3
 8003178:	40bd      	lsls	r5, r7
 800317a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800317e:	68cd      	ldr	r5, [r1, #12]
 8003180:	40bd      	lsls	r5, r7
 8003182:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003184:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003186:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003188:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318c:	684d      	ldr	r5, [r1, #4]
 800318e:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8003192:	409c      	lsls	r4, r3
 8003194:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8003196:	6044      	str	r4, [r0, #4]
 8003198:	e059      	b.n	800324e <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800319a:	08dd      	lsrs	r5, r3, #3
 800319c:	3508      	adds	r5, #8
 800319e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031a2:	f003 0407 	and.w	r4, r3, #7
 80031a6:	00a6      	lsls	r6, r4, #2
 80031a8:	240f      	movs	r4, #15
 80031aa:	40b4      	lsls	r4, r6
 80031ac:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031b0:	690c      	ldr	r4, [r1, #16]
 80031b2:	40b4      	lsls	r4, r6
 80031b4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 80031b6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80031ba:	e05c      	b.n	8003276 <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031bc:	2402      	movs	r4, #2
 80031be:	e000      	b.n	80031c2 <HAL_GPIO_Init+0x56>
 80031c0:	2400      	movs	r4, #0
 80031c2:	40b4      	lsls	r4, r6
 80031c4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031c6:	3502      	adds	r5, #2
 80031c8:	4e41      	ldr	r6, [pc, #260]	; (80032d0 <HAL_GPIO_Init+0x164>)
 80031ca:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80031ce:	4c41      	ldr	r4, [pc, #260]	; (80032d4 <HAL_GPIO_Init+0x168>)
 80031d0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80031d4:	43d4      	mvns	r4, r2
 80031d6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031da:	684f      	ldr	r7, [r1, #4]
 80031dc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80031e0:	d001      	beq.n	80031e6 <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 80031e2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80031e6:	4d3b      	ldr	r5, [pc, #236]	; (80032d4 <HAL_GPIO_Init+0x168>)
 80031e8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80031ec:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80031f0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f4:	684f      	ldr	r7, [r1, #4]
 80031f6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80031fa:	d001      	beq.n	8003200 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 80031fc:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003200:	4d34      	ldr	r5, [pc, #208]	; (80032d4 <HAL_GPIO_Init+0x168>)
 8003202:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003206:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003208:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320c:	684f      	ldr	r7, [r1, #4]
 800320e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003212:	d001      	beq.n	8003218 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8003214:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003218:	4d2e      	ldr	r5, [pc, #184]	; (80032d4 <HAL_GPIO_Init+0x168>)
 800321a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800321c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800321e:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003220:	684e      	ldr	r6, [r1, #4]
 8003222:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003226:	d001      	beq.n	800322c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8003228:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800322c:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <HAL_GPIO_Init+0x168>)
 800322e:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8003230:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	680a      	ldr	r2, [r1, #0]
 8003234:	fa32 f403 	lsrs.w	r4, r2, r3
 8003238:	d048      	beq.n	80032cc <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800323a:	2401      	movs	r4, #1
 800323c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800323e:	4022      	ands	r2, r4
 8003240:	d0f6      	beq.n	8003230 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003242:	684d      	ldr	r5, [r1, #4]
 8003244:	f005 0503 	and.w	r5, r5, #3
 8003248:	3d01      	subs	r5, #1
 800324a:	2d01      	cmp	r5, #1
 800324c:	d991      	bls.n	8003172 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800324e:	684c      	ldr	r4, [r1, #4]
 8003250:	f004 0403 	and.w	r4, r4, #3
 8003254:	2c03      	cmp	r4, #3
 8003256:	d009      	beq.n	800326c <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8003258:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800325a:	005e      	lsls	r6, r3, #1
 800325c:	2403      	movs	r4, #3
 800325e:	40b4      	lsls	r4, r6
 8003260:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003264:	688c      	ldr	r4, [r1, #8]
 8003266:	40b4      	lsls	r4, r6
 8003268:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800326a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326c:	684c      	ldr	r4, [r1, #4]
 800326e:	f004 0403 	and.w	r4, r4, #3
 8003272:	2c02      	cmp	r4, #2
 8003274:	d091      	beq.n	800319a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003276:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003278:	005e      	lsls	r6, r3, #1
 800327a:	2403      	movs	r4, #3
 800327c:	40b4      	lsls	r4, r6
 800327e:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003282:	684c      	ldr	r4, [r1, #4]
 8003284:	f004 0403 	and.w	r4, r4, #3
 8003288:	40b4      	lsls	r4, r6
 800328a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800328c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328e:	684c      	ldr	r4, [r1, #4]
 8003290:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003294:	d0cc      	beq.n	8003230 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003296:	089d      	lsrs	r5, r3, #2
 8003298:	1cae      	adds	r6, r5, #2
 800329a:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <HAL_GPIO_Init+0x164>)
 800329c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80032a0:	f003 0403 	and.w	r4, r3, #3
 80032a4:	00a6      	lsls	r6, r4, #2
 80032a6:	2407      	movs	r4, #7
 80032a8:	40b4      	lsls	r4, r6
 80032aa:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032ae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80032b2:	d085      	beq.n	80031c0 <HAL_GPIO_Init+0x54>
 80032b4:	4c08      	ldr	r4, [pc, #32]	; (80032d8 <HAL_GPIO_Init+0x16c>)
 80032b6:	42a0      	cmp	r0, r4
 80032b8:	d006      	beq.n	80032c8 <HAL_GPIO_Init+0x15c>
 80032ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032be:	42a0      	cmp	r0, r4
 80032c0:	f43f af7c 	beq.w	80031bc <HAL_GPIO_Init+0x50>
 80032c4:	2407      	movs	r4, #7
 80032c6:	e77c      	b.n	80031c2 <HAL_GPIO_Init+0x56>
 80032c8:	2401      	movs	r4, #1
 80032ca:	e77a      	b.n	80031c2 <HAL_GPIO_Init+0x56>
  }
}
 80032cc:	bcf0      	pop	{r4, r5, r6, r7}
 80032ce:	4770      	bx	lr
 80032d0:	40010000 	.word	0x40010000
 80032d4:	58000800 	.word	0x58000800
 80032d8:	48000400 	.word	0x48000400

080032dc <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80032dc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032de:	fa31 f203 	lsrs.w	r2, r1, r3
 80032e2:	d06f      	beq.n	80033c4 <HAL_GPIO_DeInit+0xe8>
{
 80032e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e6:	e02d      	b.n	8003344 <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80032e8:	2702      	movs	r7, #2
 80032ea:	e000      	b.n	80032ee <HAL_GPIO_DeInit+0x12>
 80032ec:	2700      	movs	r7, #0
 80032ee:	fa07 f404 	lsl.w	r4, r7, r4
 80032f2:	42b4      	cmp	r4, r6
 80032f4:	d046      	beq.n	8003384 <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80032f6:	6805      	ldr	r5, [r0, #0]
 80032f8:	005c      	lsls	r4, r3, #1
 80032fa:	2603      	movs	r6, #3
 80032fc:	fa06 f404 	lsl.w	r4, r6, r4
 8003300:	4325      	orrs	r5, r4
 8003302:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003304:	fa23 f506 	lsr.w	r5, r3, r6
 8003308:	3508      	adds	r5, #8
 800330a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800330e:	f003 0707 	and.w	r7, r3, #7
 8003312:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8003316:	270f      	movs	r7, #15
 8003318:	fa07 f70c 	lsl.w	r7, r7, ip
 800331c:	ea26 0607 	bic.w	r6, r6, r7
 8003320:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003324:	6885      	ldr	r5, [r0, #8]
 8003326:	ea25 0504 	bic.w	r5, r5, r4
 800332a:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800332c:	6845      	ldr	r5, [r0, #4]
 800332e:	ea25 0202 	bic.w	r2, r5, r2
 8003332:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003334:	68c2      	ldr	r2, [r0, #12]
 8003336:	ea22 0404 	bic.w	r4, r2, r4
 800333a:	60c4      	str	r4, [r0, #12]
    }

    position++;
 800333c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800333e:	fa31 f203 	lsrs.w	r2, r1, r3
 8003342:	d03e      	beq.n	80033c2 <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003348:	ea12 0e01 	ands.w	lr, r2, r1
 800334c:	d0f6      	beq.n	800333c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800334e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003352:	f10c 0502 	add.w	r5, ip, #2
 8003356:	4c1c      	ldr	r4, [pc, #112]	; (80033c8 <HAL_GPIO_DeInit+0xec>)
 8003358:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800335c:	f003 0403 	and.w	r4, r3, #3
 8003360:	00a4      	lsls	r4, r4, #2
 8003362:	2507      	movs	r5, #7
 8003364:	40a5      	lsls	r5, r4
 8003366:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003368:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800336c:	d0be      	beq.n	80032ec <HAL_GPIO_DeInit+0x10>
 800336e:	4f17      	ldr	r7, [pc, #92]	; (80033cc <HAL_GPIO_DeInit+0xf0>)
 8003370:	42b8      	cmp	r0, r7
 8003372:	d005      	beq.n	8003380 <HAL_GPIO_DeInit+0xa4>
 8003374:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003378:	42b8      	cmp	r0, r7
 800337a:	d0b5      	beq.n	80032e8 <HAL_GPIO_DeInit+0xc>
 800337c:	2707      	movs	r7, #7
 800337e:	e7b6      	b.n	80032ee <HAL_GPIO_DeInit+0x12>
 8003380:	2701      	movs	r7, #1
 8003382:	e7b4      	b.n	80032ee <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003384:	4c12      	ldr	r4, [pc, #72]	; (80033d0 <HAL_GPIO_DeInit+0xf4>)
 8003386:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800338a:	ea26 060e 	bic.w	r6, r6, lr
 800338e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003392:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8003396:	ea26 060e 	bic.w	r6, r6, lr
 800339a:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800339e:	6826      	ldr	r6, [r4, #0]
 80033a0:	ea26 060e 	bic.w	r6, r6, lr
 80033a4:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80033a6:	6866      	ldr	r6, [r4, #4]
 80033a8:	ea26 060e 	bic.w	r6, r6, lr
 80033ac:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033ae:	4e06      	ldr	r6, [pc, #24]	; (80033c8 <HAL_GPIO_DeInit+0xec>)
 80033b0:	f10c 0c02 	add.w	ip, ip, #2
 80033b4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80033b8:	ea24 0505 	bic.w	r5, r4, r5
 80033bc:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 80033c0:	e799      	b.n	80032f6 <HAL_GPIO_DeInit+0x1a>
  }
}
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	48000400 	.word	0x48000400
 80033d0:	58000800 	.word	0x58000800

080033d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d4:	b10a      	cbz	r2, 80033da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d6:	6181      	str	r1, [r0, #24]
 80033d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033da:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4203      	tst	r3, r0
 80033e8:	d100      	bne.n	80033ec <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80033ea:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80033ee:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f0:	f7fe fd6a 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
}
 80033f4:	e7f9      	b.n	80033ea <HAL_GPIO_EXTI_IRQHandler+0xa>
 80033f6:	bf00      	nop
 80033f8:	58000800 	.word	0x58000800

080033fc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fc:	4a02      	ldr	r2, [pc, #8]	; (8003408 <HAL_PWR_EnableBkUpAccess+0xc>)
 80033fe:	6813      	ldr	r3, [r2, #0]
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]
}
 8003406:	4770      	bx	lr
 8003408:	58000400 	.word	0x58000400

0800340c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800340c:	b510      	push	{r4, lr}
 800340e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003410:	b9a0      	cbnz	r0, 800343c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003412:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f413 7f00 	tst.w	r3, #512	; 0x200
 800341a:	d10a      	bne.n	8003432 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800341c:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_PWR_EnterSLEEPMode+0x48>)
 800341e:	6913      	ldr	r3, [r2, #16]
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003426:	2c01      	cmp	r4, #1
 8003428:	d010      	beq.n	800344c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800342a:	bf40      	sev
    __WFE();
 800342c:	bf20      	wfe
    __WFE();
 800342e:	bf20      	wfe
  }
}
 8003430:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003432:	f000 f821 	bl	8003478 <HAL_PWREx_DisableLowPowerRunMode>
 8003436:	2800      	cmp	r0, #0
 8003438:	d0f0      	beq.n	800341c <HAL_PWR_EnterSLEEPMode+0x10>
 800343a:	e7f9      	b.n	8003430 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_PWR_EnterSLEEPMode+0x44>)
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003444:	d1ea      	bne.n	800341c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003446:	f000 f80f 	bl	8003468 <HAL_PWREx_EnableLowPowerRunMode>
 800344a:	e7e7      	b.n	800341c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800344c:	bf30      	wfi
 800344e:	e7ef      	b.n	8003430 <HAL_PWR_EnterSLEEPMode+0x24>
 8003450:	58000400 	.word	0x58000400
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_PWREx_GetVoltageRange+0xc>)
 800345a:	6818      	ldr	r0, [r3, #0]
}
 800345c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	58000400 	.word	0x58000400

08003468 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003468:	4a02      	ldr	r2, [pc, #8]	; (8003474 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	4770      	bx	lr
 8003474:	58000400 	.word	0x58000400

08003478 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003478:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003480:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2332      	movs	r3, #50	; 0x32
 8003488:	fb03 f302 	mul.w	r3, r3, r2
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003494:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003496:	6952      	ldr	r2, [r2, #20]
 8003498:	f412 7f00 	tst.w	r2, #512	; 0x200
 800349c:	d002      	beq.n	80034a4 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 800349e:	b10b      	cbz	r3, 80034a4 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 80034a0:	3b01      	subs	r3, #1
 80034a2:	e7f7      	b.n	8003494 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034ac:	d101      	bne.n	80034b2 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80034ae:	2000      	movs	r0, #0
 80034b0:	4770      	bx	lr
    return HAL_TIMEOUT;
 80034b2:	2003      	movs	r0, #3
}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	58000400 	.word	0x58000400
 80034bc:	2000004c 	.word	0x2000004c
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	f023 0307 	bic.w	r3, r3, #7
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80034d4:	6913      	ldr	r3, [r2, #16]
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80034dc:	2801      	cmp	r0, #1
 80034de:	d008      	beq.n	80034f2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80034e0:	bf40      	sev
    __WFE();
 80034e2:	bf20      	wfe
    __WFE();
 80034e4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80034e8:	6913      	ldr	r3, [r2, #16]
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	6113      	str	r3, [r2, #16]
}
 80034f0:	4770      	bx	lr
    __WFI();
 80034f2:	bf30      	wfi
 80034f4:	e7f7      	b.n	80034e6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80034f6:	bf00      	nop
 80034f8:	58000400 	.word	0x58000400
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	4604      	mov	r4, r0
 8003506:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <RCC_SetFlashLatency+0xb0>)
 800350a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800350e:	9006      	str	r0, [sp, #24]
 8003510:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003514:	68d9      	ldr	r1, [r3, #12]
 8003516:	6898      	ldr	r0, [r3, #8]
 8003518:	9004      	str	r0, [sp, #16]
 800351a:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800351e:	ad01      	add	r5, sp, #4
 8003520:	3310      	adds	r3, #16
 8003522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003526:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800352a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800352e:	d01b      	beq.n	8003568 <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003530:	2300      	movs	r3, #0
 8003532:	2b02      	cmp	r3, #2
 8003534:	d822      	bhi.n	800357c <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003536:	aa08      	add	r2, sp, #32
 8003538:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800353c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003540:	42a2      	cmp	r2, r4
 8003542:	d215      	bcs.n	8003570 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003544:	3301      	adds	r3, #1
 8003546:	e7f4      	b.n	8003532 <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003548:	3301      	adds	r3, #1
 800354a:	2b02      	cmp	r3, #2
 800354c:	d80e      	bhi.n	800356c <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800354e:	aa08      	add	r2, sp, #32
 8003550:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003554:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003558:	42a2      	cmp	r2, r4
 800355a:	d3f5      	bcc.n	8003548 <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 800355c:	aa08      	add	r2, sp, #32
 800355e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003562:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003566:	e00a      	b.n	800357e <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003568:	2300      	movs	r3, #0
 800356a:	e7ee      	b.n	800354a <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800356c:	2500      	movs	r5, #0
 800356e:	e006      	b.n	800357e <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003570:	aa08      	add	r2, sp, #32
 8003572:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003576:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800357a:	e000      	b.n	800357e <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800357c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800357e:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <RCC_SetFlashLatency+0xb4>)
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	432b      	orrs	r3, r5
 8003588:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800358a:	f7fd ffaf 	bl	80014ec <HAL_GetTick>
 800358e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <RCC_SetFlashLatency+0xb4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	42ab      	cmp	r3, r5
 800359a:	d006      	beq.n	80035aa <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800359c:	f7fd ffa6 	bl	80014ec <HAL_GetTick>
 80035a0:	1b00      	subs	r0, r0, r4
 80035a2:	2802      	cmp	r0, #2
 80035a4:	d9f4      	bls.n	8003590 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 80035a6:	2003      	movs	r0, #3
 80035a8:	e000      	b.n	80035ac <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 80035aa:	2000      	movs	r0, #0
}
 80035ac:	b008      	add	sp, #32
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	080111c8 	.word	0x080111c8
 80035b4:	58004000 	.word	0x58004000

080035b8 <RCC_SetFlashLatencyFromMSIRange>:
{
 80035b8:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80035ba:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80035c0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80035c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80035d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80035d6:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80035da:	f7ff ff3d 	bl	8003458 <HAL_PWREx_GetVoltageRange>
 80035de:	4601      	mov	r1, r0
 80035e0:	4805      	ldr	r0, [pc, #20]	; (80035f8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80035e2:	fba0 3004 	umull	r3, r0, r0, r4
 80035e6:	0c80      	lsrs	r0, r0, #18
 80035e8:	f7ff ff8a 	bl	8003500 <RCC_SetFlashLatency>
}
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	bf00      	nop
 80035f0:	08011600 	.word	0x08011600
 80035f4:	080115a0 	.word	0x080115a0
 80035f8:	431bde83 	.word	0x431bde83

080035fc <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003600:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003608:	f012 020c 	ands.w	r2, r2, #12
 800360c:	d00a      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x28>
 800360e:	2a0c      	cmp	r2, #12
 8003610:	d006      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003612:	2a04      	cmp	r2, #4
 8003614:	d047      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003616:	2a08      	cmp	r2, #8
 8003618:	d03b      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800361a:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 800361c:	4608      	mov	r0, r1
 800361e:	e026      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003620:	2b01      	cmp	r3, #1
 8003622:	d1f6      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f013 0308 	ands.w	r3, r3, #8
 800362e:	d00d      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x50>
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f013 0308 	ands.w	r3, r3, #8
 800363a:	d124      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800363c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003640:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003644:	492e      	ldr	r1, [pc, #184]	; (8003700 <HAL_RCC_GetSysClockFreq+0x104>)
 8003646:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800364a:	e00e      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800364c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003650:	6809      	ldr	r1, [r1, #0]
 8003652:	f011 0f08 	tst.w	r1, #8
 8003656:	d112      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003660:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003664:	4926      	ldr	r1, [pc, #152]	; (8003700 <HAL_RCC_GetSysClockFreq+0x104>)
 8003666:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800366a:	b1d2      	cbz	r2, 80036a2 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800366c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d01a      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800367c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800367e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003682:	6809      	ldr	r1, [r1, #0]
 8003684:	e7ee      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x68>
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800368c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003690:	e7d8      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 800369c:	d106      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800369e:	4819      	ldr	r0, [pc, #100]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a0:	e7e5      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80036a2:	4608      	mov	r0, r1
 80036a4:	e7e3      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80036a6:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 80036a8:	4817      	ldr	r0, [pc, #92]	; (8003708 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036aa:	e7e0      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80036ac:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 80036ae:	4816      	ldr	r0, [pc, #88]	; (8003708 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036b0:	e7dd      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d009      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0xd8>
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d108      	bne.n	80036d6 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80036c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80036ce:	d115      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80036d4:	490c      	ldr	r1, [pc, #48]	; (8003708 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	68d0      	ldr	r0, [r2, #12]
 80036dc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80036e0:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80036e4:	68d3      	ldr	r3, [r2, #12]
 80036e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036ea:	3301      	adds	r3, #1
 80036ec:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80036f0:	68d3      	ldr	r3, [r2, #12]
 80036f2:	0f5b      	lsrs	r3, r3, #29
 80036f4:	3301      	adds	r3, #1
 80036f6:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80036fa:	e7bf      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80036fc:	4902      	ldr	r1, [pc, #8]	; (8003708 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036fe:	e7ea      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0xda>
 8003700:	08011600 	.word	0x08011600
 8003704:	01e84800 	.word	0x01e84800
 8003708:	00f42400 	.word	0x00f42400

0800370c <HAL_RCC_GetHCLKFreq>:
{
 800370c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800370e:	f7ff ff75 	bl	80035fc <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800371c:	4a02      	ldr	r2, [pc, #8]	; (8003728 <HAL_RCC_GetHCLKFreq+0x1c>)
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003722:	fbb0 f0f3 	udiv	r0, r0, r3
 8003726:	bd08      	pop	{r3, pc}
 8003728:	080115a0 	.word	0x080115a0

0800372c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800372c:	2800      	cmp	r0, #0
 800372e:	f000 8318 	beq.w	8003d62 <HAL_RCC_OscConfig+0x636>
{
 8003732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003734:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373a:	689d      	ldr	r5, [r3, #8]
 800373c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003740:	68de      	ldr	r6, [r3, #12]
 8003742:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003746:	6803      	ldr	r3, [r0, #0]
 8003748:	f013 0f20 	tst.w	r3, #32
 800374c:	f000 808f 	beq.w	800386e <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003750:	b1ed      	cbz	r5, 800378e <HAL_RCC_OscConfig+0x62>
 8003752:	2d0c      	cmp	r5, #12
 8003754:	d019      	beq.n	800378a <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003756:	6a23      	ldr	r3, [r4, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80bc 	beq.w	80038d6 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800375e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800376a:	f7fd febf 	bl	80014ec <HAL_GetTick>
 800376e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f013 0f02 	tst.w	r3, #2
 800377a:	d165      	bne.n	8003848 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800377c:	f7fd feb6 	bl	80014ec <HAL_GetTick>
 8003780:	1bc0      	subs	r0, r0, r7
 8003782:	2802      	cmp	r0, #2
 8003784:	d9f4      	bls.n	8003770 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8003786:	2003      	movs	r0, #3
 8003788:	e2f8      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800378a:	2e01      	cmp	r6, #1
 800378c:	d1e3      	bne.n	8003756 <HAL_RCC_OscConfig+0x2a>
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f013 0f02 	tst.w	r3, #2
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800379a:	6a23      	ldr	r3, [r4, #32]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 82e2 	beq.w	8003d66 <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f013 0f08 	tst.w	r3, #8
 80037ae:	d029      	beq.n	8003804 <HAL_RCC_OscConfig+0xd8>
 80037b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ba:	4298      	cmp	r0, r3
 80037bc:	d92a      	bls.n	8003814 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037be:	f7ff fefb 	bl	80035b8 <RCC_SetFlashLatencyFromMSIRange>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	f040 82d1 	bne.w	8003d6a <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80037e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037ec:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037ee:	f7ff ff8d 	bl	800370c <HAL_RCC_GetHCLKFreq>
 80037f2:	4bbc      	ldr	r3, [pc, #752]	; (8003ae4 <HAL_RCC_OscConfig+0x3b8>)
 80037f4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80037f6:	4bbc      	ldr	r3, [pc, #752]	; (8003ae8 <HAL_RCC_OscConfig+0x3bc>)
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	f7fd fe75 	bl	80014e8 <HAL_InitTick>
        if (status != HAL_OK)
 80037fe:	2800      	cmp	r0, #0
 8003800:	d035      	beq.n	800386e <HAL_RCC_OscConfig+0x142>
 8003802:	e2bb      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003812:	e7d2      	b.n	80037ba <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f042 0208 	orr.w	r2, r2, #8
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003826:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800382c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003834:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003838:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800383a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800383c:	f7ff febc 	bl	80035b8 <RCC_SetFlashLatencyFromMSIRange>
 8003840:	2800      	cmp	r0, #0
 8003842:	d0d4      	beq.n	80037ee <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8003844:	2001      	movs	r0, #1
 8003846:	e299      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f042 0208 	orr.w	r2, r2, #8
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800385a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003860:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003868:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800386c:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	f013 0f01 	tst.w	r3, #1
 8003874:	d051      	beq.n	800391a <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003876:	2d08      	cmp	r5, #8
 8003878:	d045      	beq.n	8003906 <HAL_RCC_OscConfig+0x1da>
 800387a:	2d0c      	cmp	r5, #12
 800387c:	d041      	beq.n	8003902 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800387e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003888:	68a1      	ldr	r1, [r4, #8]
 800388a:	430b      	orrs	r3, r1
 800388c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x232>
 8003896:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800389a:	d065      	beq.n	8003968 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80038ae:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b0:	6863      	ldr	r3, [r4, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d063      	beq.n	800397e <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 80038b6:	f7fd fe19 	bl	80014ec <HAL_GetTick>
 80038ba:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038c6:	d128      	bne.n	800391a <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fd fe10 	bl	80014ec <HAL_GetTick>
 80038cc:	1bc0      	subs	r0, r0, r7
 80038ce:	2864      	cmp	r0, #100	; 0x64
 80038d0:	d9f4      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	e252      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80038d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038e2:	f7fd fe03 	bl	80014ec <HAL_GetTick>
 80038e6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f013 0f02 	tst.w	r3, #2
 80038f2:	d0bc      	beq.n	800386e <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f4:	f7fd fdfa 	bl	80014ec <HAL_GetTick>
 80038f8:	1bc0      	subs	r0, r0, r7
 80038fa:	2802      	cmp	r0, #2
 80038fc:	d9f4      	bls.n	80038e8 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80038fe:	2003      	movs	r0, #3
 8003900:	e23c      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003902:	2e03      	cmp	r6, #3
 8003904:	d1bb      	bne.n	800387e <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003910:	d003      	beq.n	800391a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 822a 	beq.w	8003d6e <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	f013 0f02 	tst.w	r3, #2
 8003920:	d052      	beq.n	80039c8 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003922:	2d04      	cmp	r5, #4
 8003924:	d03d      	beq.n	80039a2 <HAL_RCC_OscConfig+0x276>
 8003926:	2d0c      	cmp	r5, #12
 8003928:	d039      	beq.n	800399e <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8091 	beq.w	8003a54 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800393e:	f7fd fdd5 	bl	80014ec <HAL_GetTick>
 8003942:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800394e:	d177      	bne.n	8003a40 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003950:	f7fd fdcc 	bl	80014ec <HAL_GetTick>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	2802      	cmp	r0, #2
 8003958:	d9f4      	bls.n	8003944 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 800395a:	2003      	movs	r0, #3
 800395c:	e20e      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800395e:	6813      	ldr	r3, [r2, #0]
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
}
 8003966:	e7a3      	b.n	80038b0 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003972:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	e798      	b.n	80038b0 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800397e:	f7fd fdb5 	bl	80014ec <HAL_GetTick>
 8003982:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800398e:	d0c4      	beq.n	800391a <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fd fdac 	bl	80014ec <HAL_GetTick>
 8003994:	1bc0      	subs	r0, r0, r7
 8003996:	2864      	cmp	r0, #100	; 0x64
 8003998:	d9f4      	bls.n	8003984 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 800399a:	2003      	movs	r0, #3
 800399c:	e1ee      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800399e:	2e02      	cmp	r6, #2
 80039a0:	d1c3      	bne.n	800392a <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 81de 	beq.w	8003d72 <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80039b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039bc:	6853      	ldr	r3, [r2, #4]
 80039be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80039c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80039c6:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	f013 0f08 	tst.w	r3, #8
 80039ce:	f000 808d 	beq.w	8003aec <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d2:	69a3      	ldr	r3, [r4, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d06c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80039e0:	69e1      	ldr	r1, [r4, #28]
 80039e2:	f003 0210 	and.w	r2, r3, #16
 80039e6:	4291      	cmp	r1, r2
 80039e8:	d011      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	2a02      	cmp	r2, #2
 80039f0:	f000 81c1 	beq.w	8003d76 <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80039f4:	f013 0f01 	tst.w	r3, #1
 80039f8:	d142      	bne.n	8003a80 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80039fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a02:	f023 0310 	bic.w	r3, r3, #16
 8003a06:	69e1      	ldr	r1, [r4, #28]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a12:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003a1e:	f7fd fd65 	bl	80014ec <HAL_GetTick>
 8003a22:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2c:	f013 0f02 	tst.w	r3, #2
 8003a30:	d15c      	bne.n	8003aec <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fd fd5b 	bl	80014ec <HAL_GetTick>
 8003a36:	1b80      	subs	r0, r0, r6
 8003a38:	2811      	cmp	r0, #17
 8003a3a:	d9f3      	bls.n	8003a24 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	e19d      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a46:	6853      	ldr	r3, [r2, #4]
 8003a48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a4c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a50:	6053      	str	r3, [r2, #4]
}
 8003a52:	e7b9      	b.n	80039c8 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a58:	6813      	ldr	r3, [r2, #0]
 8003a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a60:	f7fd fd44 	bl	80014ec <HAL_GetTick>
 8003a64:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a70:	d0aa      	beq.n	80039c8 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd fd3b 	bl	80014ec <HAL_GetTick>
 8003a76:	1b80      	subs	r0, r0, r6
 8003a78:	2802      	cmp	r0, #2
 8003a7a:	d9f4      	bls.n	8003a66 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	e17d      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a84:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003a90:	f7fd fd2c 	bl	80014ec <HAL_GetTick>
 8003a94:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9e:	f013 0f02 	tst.w	r3, #2
 8003aa2:	d0aa      	beq.n	80039fa <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fd fd22 	bl	80014ec <HAL_GetTick>
 8003aa8:	1b80      	subs	r0, r0, r6
 8003aaa:	2811      	cmp	r0, #17
 8003aac:	d9f3      	bls.n	8003a96 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8003aae:	2003      	movs	r0, #3
 8003ab0:	e164      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fd13 	bl	80014ec <HAL_GetTick>
 8003ac6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad0:	f013 0f02 	tst.w	r3, #2
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad6:	f7fd fd09 	bl	80014ec <HAL_GetTick>
 8003ada:	1b80      	subs	r0, r0, r6
 8003adc:	2811      	cmp	r0, #17
 8003ade:	d9f3      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	e14b      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
 8003ae4:	2000004c 	.word	0x2000004c
 8003ae8:	20000050 	.word	0x20000050
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	f013 0f04 	tst.w	r3, #4
 8003af2:	f000 80b1 	beq.w	8003c58 <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003af6:	4ba9      	ldr	r3, [pc, #676]	; (8003d9c <HAL_RCC_OscConfig+0x670>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003afe:	d110      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 8003b00:	f7ff fc7c 	bl	80033fc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003b04:	f7fd fcf2 	bl	80014ec <HAL_GetTick>
 8003b08:	4606      	mov	r6, r0
 8003b0a:	4ba4      	ldr	r3, [pc, #656]	; (8003d9c <HAL_RCC_OscConfig+0x670>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fd fcea 	bl	80014ec <HAL_GetTick>
 8003b18:	1b80      	subs	r0, r0, r6
 8003b1a:	2802      	cmp	r0, #2
 8003b1c:	d9f5      	bls.n	8003b0a <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8003b1e:	2003      	movs	r0, #3
 8003b20:	e12c      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b22:	68e3      	ldr	r3, [r4, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d061      	beq.n	8003bec <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003b28:	2b85      	cmp	r3, #133	; 0x85
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003b40:	f7fd fcd4 	bl	80014ec <HAL_GetTick>
 8003b44:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f013 0f02 	tst.w	r3, #2
 8003b62:	d108      	bne.n	8003b76 <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fd fcc2 	bl	80014ec <HAL_GetTick>
 8003b68:	1b80      	subs	r0, r0, r6
 8003b6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b6e:	4298      	cmp	r0, r3
 8003b70:	d9f1      	bls.n	8003b56 <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 8003b72:	2003      	movs	r0, #3
 8003b74:	e102      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	2b81      	cmp	r3, #129	; 0x81
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003b7c:	2b85      	cmp	r3, #133	; 0x85
 8003b7e:	d11a      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8003b80:	f7fd fcb4 	bl	80014ec <HAL_GetTick>
 8003b84:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003ba2:	d159      	bne.n	8003c58 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fd fca2 	bl	80014ec <HAL_GetTick>
 8003ba8:	1b80      	subs	r0, r0, r6
 8003baa:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bae:	4298      	cmp	r0, r3
 8003bb0:	d9f1      	bls.n	8003b96 <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8003bb2:	2003      	movs	r0, #3
 8003bb4:	e0e2      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 8003bb6:	f7fd fc99 	bl	80014ec <HAL_GetTick>
 8003bba:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003bd8:	d03e      	beq.n	8003c58 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd fc87 	bl	80014ec <HAL_GetTick>
 8003bde:	1b80      	subs	r0, r0, r6
 8003be0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003be4:	4298      	cmp	r0, r3
 8003be6:	d9f1      	bls.n	8003bcc <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8003be8:	2003      	movs	r0, #3
 8003bea:	e0c7      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8003bec:	f7fd fc7e 	bl	80014ec <HAL_GetTick>
 8003bf0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fd fc6c 	bl	80014ec <HAL_GetTick>
 8003c14:	1b80      	subs	r0, r0, r6
 8003c16:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c1a:	4298      	cmp	r0, r3
 8003c1c:	d9f1      	bls.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 8003c1e:	2003      	movs	r0, #3
 8003c20:	e0ac      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8003c22:	f7fd fc63 	bl	80014ec <HAL_GetTick>
 8003c26:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f013 0f02 	tst.w	r3, #2
 8003c44:	d008      	beq.n	8003c58 <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd fc51 	bl	80014ec <HAL_GetTick>
 8003c4a:	1b80      	subs	r0, r0, r6
 8003c4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c50:	4298      	cmp	r0, r3
 8003c52:	d9f1      	bls.n	8003c38 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8003c54:	2003      	movs	r0, #3
 8003c56:	e091      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 808d 	beq.w	8003d7a <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c60:	2d0c      	cmp	r5, #12
 8003c62:	d062      	beq.n	8003d2a <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d01f      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003c72:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	f022 0203 	bic.w	r2, r2, #3
 8003c7a:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003c82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c86:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003c88:	f7fd fc30 	bl	80014ec <HAL_GetTick>
 8003c8c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c98:	d073      	beq.n	8003d82 <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fd fc27 	bl	80014ec <HAL_GetTick>
 8003c9e:	1b00      	subs	r0, r0, r4
 8003ca0:	280a      	cmp	r0, #10
 8003ca2:	d9f4      	bls.n	8003c8e <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 8003ca4:	2003      	movs	r0, #3
 8003ca6:	e069      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fc1a 	bl	80014ec <HAL_GetTick>
 8003cb8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cc4:	d12a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cca:	68d3      	ldr	r3, [r2, #12]
 8003ccc:	4934      	ldr	r1, [pc, #208]	; (8003da0 <HAL_RCC_OscConfig+0x674>)
 8003cce:	4019      	ands	r1, r3
 8003cd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cd2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003cd4:	4303      	orrs	r3, r0
 8003cd6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cd8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003cdc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003cde:	4303      	orrs	r3, r0
 8003ce0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003ce2:	4303      	orrs	r3, r0
 8003ce4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003ce6:	4303      	orrs	r3, r0
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf4:	68d3      	ldr	r3, [r2, #12]
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fbf6 	bl	80014ec <HAL_GetTick>
 8003d00:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d0c:	d137      	bne.n	8003d7e <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd fbed 	bl	80014ec <HAL_GetTick>
 8003d12:	1b00      	subs	r0, r0, r4
 8003d14:	280a      	cmp	r0, #10
 8003d16:	d9f4      	bls.n	8003d02 <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 8003d18:	2003      	movs	r0, #3
 8003d1a:	e02f      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd fbe6 	bl	80014ec <HAL_GetTick>
 8003d20:	1b40      	subs	r0, r0, r5
 8003d22:	280a      	cmp	r0, #10
 8003d24:	d9c9      	bls.n	8003cba <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 8003d26:	2003      	movs	r0, #3
 8003d28:	e028      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d02b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003d34:	f003 0103 	and.w	r1, r3, #3
 8003d38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d3a:	4291      	cmp	r1, r2
 8003d3c:	d125      	bne.n	8003d8a <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003d3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d44:	428a      	cmp	r2, r1
 8003d46:	d122      	bne.n	8003d8e <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003d48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d4e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003d52:	d11e      	bne.n	8003d92 <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003d54:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003d58:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d11b      	bne.n	8003d96 <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 8003d5e:	2000      	movs	r0, #0
 8003d60:	e00c      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 8003d62:	2001      	movs	r0, #1
}
 8003d64:	4770      	bx	lr
        return HAL_ERROR;
 8003d66:	2001      	movs	r0, #1
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	e006      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8003d6e:	2001      	movs	r0, #1
 8003d70:	e004      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8003d72:	2001      	movs	r0, #1
 8003d74:	e002      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8003d7a:	2000      	movs	r0, #0
}
 8003d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e7fc      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
 8003d82:	2000      	movs	r0, #0
 8003d84:	e7fa      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8003d86:	2001      	movs	r0, #1
 8003d88:	e7f8      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	e7f6      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
 8003d8e:	2001      	movs	r0, #1
 8003d90:	e7f4      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
 8003d92:	2001      	movs	r0, #1
 8003d94:	e7f2      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
 8003d96:	2001      	movs	r0, #1
 8003d98:	e7f0      	b.n	8003d7c <HAL_RCC_OscConfig+0x650>
 8003d9a:	bf00      	nop
 8003d9c:	58000400 	.word	0x58000400
 8003da0:	11c1808c 	.word	0x11c1808c

08003da4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003da4:	2800      	cmp	r0, #0
 8003da6:	f000 8127 	beq.w	8003ff8 <HAL_RCC_ClockConfig+0x254>
{
 8003daa:	b570      	push	{r4, r5, r6, lr}
 8003dac:	460c      	mov	r4, r1
 8003dae:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b93      	ldr	r3, [pc, #588]	; (8004000 <HAL_RCC_ClockConfig+0x25c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	428b      	cmp	r3, r1
 8003dba:	d32d      	bcc.n	8003e18 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	f013 0f02 	tst.w	r3, #2
 8003dc2:	d13f      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	f013 0f20 	tst.w	r3, #32
 8003dca:	d153      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003dd2:	d16a      	bne.n	8003eaa <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	f013 0f04 	tst.w	r3, #4
 8003dda:	f040 8083 	bne.w	8003ee4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	682b      	ldr	r3, [r5, #0]
 8003de0:	f013 0f08 	tst.w	r3, #8
 8003de4:	f040 8097 	bne.w	8003f16 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	f013 0f01 	tst.w	r3, #1
 8003dee:	f000 80de 	beq.w	8003fae <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df2:	686b      	ldr	r3, [r5, #4]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	f000 80a8 	beq.w	8003f4a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	f000 80ad 	beq.w	8003f5a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 80b2 	bne.w	8003f6a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	f012 0f02 	tst.w	r2, #2
 8003e10:	f040 80b1 	bne.w	8003f76 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003e14:	2001      	movs	r0, #1
 8003e16:	e0ee      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e18:	4a79      	ldr	r2, [pc, #484]	; (8004000 <HAL_RCC_ClockConfig+0x25c>)
 8003e1a:	6813      	ldr	r3, [r2, #0]
 8003e1c:	f023 0307 	bic.w	r3, r3, #7
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e24:	f7fd fb62 	bl	80014ec <HAL_GetTick>
 8003e28:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b75      	ldr	r3, [pc, #468]	; (8004000 <HAL_RCC_ClockConfig+0x25c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	42a3      	cmp	r3, r4
 8003e34:	d0c2      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e36:	f7fd fb59 	bl	80014ec <HAL_GetTick>
 8003e3a:	1b80      	subs	r0, r0, r6
 8003e3c:	2802      	cmp	r0, #2
 8003e3e:	d9f4      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8003e40:	2003      	movs	r0, #3
 8003e42:	e0d8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003e44:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e4a:	688a      	ldr	r2, [r1, #8]
 8003e4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003e54:	f7fd fb4a 	bl	80014ec <HAL_GetTick>
 8003e58:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e64:	d1ae      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e66:	f7fd fb41 	bl	80014ec <HAL_GetTick>
 8003e6a:	1b80      	subs	r0, r0, r6
 8003e6c:	2802      	cmp	r0, #2
 8003e6e:	d9f4      	bls.n	8003e5a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8003e70:	2003      	movs	r0, #3
 8003e72:	e0c0      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003e74:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8003e7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003e88:	f7fd fb30 	bl	80014ec <HAL_GetTick>
 8003e8c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e9a:	d197      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e9c:	f7fd fb26 	bl	80014ec <HAL_GetTick>
 8003ea0:	1b80      	subs	r0, r0, r6
 8003ea2:	2802      	cmp	r0, #2
 8003ea4:	d9f3      	bls.n	8003e8e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8003ea6:	2003      	movs	r0, #3
 8003ea8:	e0a5      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003eaa:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003eb4:	f023 030f 	bic.w	r3, r3, #15
 8003eb8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003ebc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fb14 	bl	80014ec <HAL_GetTick>
 8003ec4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ece:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ed2:	f47f af7f 	bne.w	8003dd4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ed6:	f7fd fb09 	bl	80014ec <HAL_GetTick>
 8003eda:	1b80      	subs	r0, r0, r6
 8003edc:	2802      	cmp	r0, #2
 8003ede:	d9f2      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003ee0:	2003      	movs	r0, #3
 8003ee2:	e088      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003ee4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eea:	688a      	ldr	r2, [r1, #8]
 8003eec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fafa 	bl	80014ec <HAL_GetTick>
 8003ef8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f04:	f47f af6b 	bne.w	8003dde <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f08:	f7fd faf0 	bl	80014ec <HAL_GetTick>
 8003f0c:	1b80      	subs	r0, r0, r6
 8003f0e:	2802      	cmp	r0, #2
 8003f10:	d9f3      	bls.n	8003efa <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8003f12:	2003      	movs	r0, #3
 8003f14:	e06f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003f16:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f1c:	6893      	ldr	r3, [r2, #8]
 8003f1e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003f22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f26:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003f28:	f7fd fae0 	bl	80014ec <HAL_GetTick>
 8003f2c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003f38:	f47f af56 	bne.w	8003de8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f3c:	f7fd fad6 	bl	80014ec <HAL_GetTick>
 8003f40:	1b80      	subs	r0, r0, r6
 8003f42:	2802      	cmp	r0, #2
 8003f44:	d9f3      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8003f46:	2003      	movs	r0, #3
 8003f48:	e055      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003f54:	d10f      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
 8003f58:	e04d      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003f66:	2001      	movs	r0, #1
 8003f68:	e045      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003f74:	d042      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7a:	688a      	ldr	r2, [r1, #8]
 8003f7c:	f022 0203 	bic.w	r2, r2, #3
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003f84:	f7fd fab2 	bl	80014ec <HAL_GetTick>
 8003f88:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f94:	686a      	ldr	r2, [r5, #4]
 8003f96:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fd faa6 	bl	80014ec <HAL_GetTick>
 8003fa0:	1b80      	subs	r0, r0, r6
 8003fa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fa6:	4298      	cmp	r0, r3
 8003fa8:	d9ef      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8003faa:	2003      	movs	r0, #3
 8003fac:	e023      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_RCC_ClockConfig+0x25c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	d915      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4a11      	ldr	r2, [pc, #68]	; (8004000 <HAL_RCC_ClockConfig+0x25c>)
 8003fbc:	6813      	ldr	r3, [r2, #0]
 8003fbe:	f023 0307 	bic.w	r3, r3, #7
 8003fc2:	4323      	orrs	r3, r4
 8003fc4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003fc6:	f7fd fa91 	bl	80014ec <HAL_GetTick>
 8003fca:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_RCC_ClockConfig+0x25c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	d006      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fd8:	f7fd fa88 	bl	80014ec <HAL_GetTick>
 8003fdc:	1b40      	subs	r0, r0, r5
 8003fde:	2802      	cmp	r0, #2
 8003fe0:	d9f4      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8003fe2:	2003      	movs	r0, #3
 8003fe4:	e007      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fe6:	f7ff fb91 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_RCC_ClockConfig+0x260>)
 8003fec:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	f7fd fa79 	bl	80014e8 <HAL_InitTick>
}
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ff8:	2001      	movs	r0, #1
}
 8003ffa:	4770      	bx	lr
        return HAL_ERROR;
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	e7fa      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x252>
 8004000:	58004000 	.word	0x58004000
 8004004:	2000004c 	.word	0x2000004c
 8004008:	20000050 	.word	0x20000050

0800400c <HAL_RCC_GetPCLK1Freq>:
{
 800400c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800400e:	f7ff fb7d 	bl	800370c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800401c:	4a02      	ldr	r2, [pc, #8]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004022:	40d8      	lsrs	r0, r3
 8004024:	bd08      	pop	{r3, pc}
 8004026:	bf00      	nop
 8004028:	080115e0 	.word	0x080115e0

0800402c <HAL_RCC_GetPCLK2Freq>:
{
 800402c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800402e:	f7ff fb6d 	bl	800370c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800403c:	4a02      	ldr	r2, [pc, #8]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004042:	40d8      	lsrs	r0, r3
 8004044:	bd08      	pop	{r3, pc}
 8004046:	bf00      	nop
 8004048:	080115e0 	.word	0x080115e0

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004050:	6803      	ldr	r3, [r0, #0]
 8004052:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004056:	f040 80d6 	bne.w	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800405a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	f013 0f01 	tst.w	r3, #1
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004064:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800406a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800406e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004072:	b292      	uxth	r2, r2
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	f013 0f02 	tst.w	r3, #2
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004082:	68a2      	ldr	r2, [r4, #8]
 8004084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004088:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800408c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004090:	b292      	uxth	r2, r2
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f013 0f20 	tst.w	r3, #32
 800409e:	d009      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a0:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80040a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80040ba:	d00c      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040bc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80040c6:	0c02      	lsrs	r2, r0, #16
 80040c8:	0412      	lsls	r2, r2, #16
 80040ca:	ea23 0302 	bic.w	r3, r3, r2
 80040ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80040dc:	d00c      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80040e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80040e8:	0c02      	lsrs	r2, r0, #16
 80040ea:	0412      	lsls	r2, r2, #16
 80040ec:	ea23 0302 	bic.w	r3, r3, r2
 80040f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80040fe:	d00c      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004100:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004106:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800410a:	0c02      	lsrs	r2, r0, #16
 800410c:	0412      	lsls	r2, r2, #16
 800410e:	ea23 0302 	bic.w	r3, r3, r2
 8004112:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004120:	d00f      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004122:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004124:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004128:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800412c:	0919      	lsrs	r1, r3, #4
 800412e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004132:	ea22 0201 	bic.w	r2, r2, r1
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004148:	d00f      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800414a:	69a3      	ldr	r3, [r4, #24]
 800414c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004150:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004154:	0919      	lsrs	r1, r3, #4
 8004156:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800415a:	ea22 0201 	bic.w	r2, r2, r1
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004170:	d00f      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004172:	69e3      	ldr	r3, [r4, #28]
 8004174:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004178:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800417c:	0919      	lsrs	r1, r3, #4
 800417e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004182:	ea22 0201 	bic.w	r2, r2, r1
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f013 0f10 	tst.w	r3, #16
 8004198:	d00d      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800419a:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800419c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80041ae:	68e3      	ldr	r3, [r4, #12]
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d07f      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80041bc:	d00f      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041be:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80041c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041c8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041d4:	b91b      	cbnz	r3, 80041de <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041d6:	68cb      	ldr	r3, [r1, #12]
 80041d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041dc:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80041e4:	d00d      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80041e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004200:	d05e      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004202:	4628      	mov	r0, r5
 8004204:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004206:	f7ff f8f9 	bl	80033fc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800420a:	f7fd f96f 	bl	80014ec <HAL_GetTick>
 800420e:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004210:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004218:	d106      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fd f967 	bl	80014ec <HAL_GetTick>
 800421e:	1b40      	subs	r0, r0, r5
 8004220:	2802      	cmp	r0, #2
 8004222:	d9f5      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8004224:	2503      	movs	r5, #3
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004228:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800422a:	2d00      	cmp	r5, #0
 800422c:	f47f af16 	bne.w	800405c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800423c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800423e:	429a      	cmp	r2, r3
 8004240:	d024      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800424a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800424e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004252:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004256:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800425a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800425e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004262:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800426a:	f012 0f02 	tst.w	r2, #2
 800426e:	d10f      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8004270:	2d00      	cmp	r5, #0
 8004272:	f47f aef3 	bne.w	800405c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004276:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800427c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004280:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800428a:	e6e7      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800428c:	2200      	movs	r2, #0
 800428e:	e7ec      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8004290:	f7fd f92c 	bl	80014ec <HAL_GetTick>
 8004294:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	f013 0f02 	tst.w	r3, #2
 80042a2:	d1e5      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fd f922 	bl	80014ec <HAL_GetTick>
 80042a8:	1b80      	subs	r0, r0, r6
 80042aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80042ae:	4298      	cmp	r0, r3
 80042b0:	d9f1      	bls.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 80042b2:	2503      	movs	r5, #3
 80042b4:	e7dc      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80042b6:	68cb      	ldr	r3, [r1, #12]
 80042b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042bc:	60cb      	str	r3, [r1, #12]
 80042be:	e77a      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042c0:	68cb      	ldr	r3, [r1, #12]
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	60cb      	str	r3, [r1, #12]
 80042c8:	e79b      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80042ca:	bf00      	nop
 80042cc:	58000400 	.word	0x58000400

080042d0 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d036      	beq.n	8004346 <HAL_RTC_DeactivateAlarm+0x76>
 80042d8:	2301      	movs	r3, #1
 80042da:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RTC_DeactivateAlarm+0x7c>)
 80042e6:	22ca      	movs	r2, #202	; 0xca
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
 80042ea:	2253      	movs	r2, #83	; 0x53
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80042ee:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80042f2:	d019      	beq.n	8004328 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80042f4:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_RTC_DeactivateAlarm+0x7c>)
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80042fc:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80042fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004300:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004304:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004306:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004308:	f022 0202 	bic.w	r2, r2, #2
 800430c:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800430e:	2202      	movs	r2, #2
 8004310:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_RTC_DeactivateAlarm+0x7c>)
 8004314:	22ff      	movs	r2, #255	; 0xff
 8004316:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004318:	2301      	movs	r3, #1
 800431a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800431e:	2300      	movs	r3, #0
 8004320:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004324:	4618      	mov	r0, r3
 8004326:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800432e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004332:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004338:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004340:	2201      	movs	r2, #1
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c
 8004344:	e7e5      	b.n	8004312 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004346:	2002      	movs	r0, #2
}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40002800 	.word	0x40002800

08004350 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004356:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004358:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800435a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800435c:	f015 0f01 	tst.w	r5, #1
 8004360:	d106      	bne.n	8004370 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004362:	f015 0f02 	tst.w	r5, #2
 8004366:	d109      	bne.n	800437c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004368:	2301      	movs	r3, #1
 800436a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800436e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004372:	2201      	movs	r2, #1
 8004374:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004376:	f7fd fa0b 	bl	8001790 <HAL_RTC_AlarmAEventCallback>
 800437a:	e7f2      	b.n	8004362 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <HAL_RTC_AlarmIRQHandler+0x3c>)
 800437e:	2202      	movs	r2, #2
 8004380:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004382:	4620      	mov	r0, r4
 8004384:	f000 f9e4 	bl	8004750 <HAL_RTCEx_AlarmBEventCallback>
 8004388:	e7ee      	b.n	8004368 <HAL_RTC_AlarmIRQHandler+0x18>
 800438a:	bf00      	nop
 800438c:	40002800 	.word	0x40002800

08004390 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004390:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <HAL_RTC_WaitForSynchro+0x30>)
 8004394:	68d3      	ldr	r3, [r2, #12]
 8004396:	f023 0320 	bic.w	r3, r3, #32
 800439a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800439c:	f7fd f8a6 	bl	80014ec <HAL_GetTick>
 80043a0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <HAL_RTC_WaitForSynchro+0x30>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f013 0f20 	tst.w	r3, #32
 80043aa:	d107      	bne.n	80043bc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043ac:	f7fd f89e 	bl	80014ec <HAL_GetTick>
 80043b0:	1b00      	subs	r0, r0, r4
 80043b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043b6:	d9f4      	bls.n	80043a2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80043b8:	2003      	movs	r0, #3
 80043ba:	e000      	b.n	80043be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80043bc:	2000      	movs	r0, #0
}
 80043be:	bd10      	pop	{r4, pc}
 80043c0:	40002800 	.word	0x40002800

080043c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <RTC_EnterInitMode+0x48>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043ce:	d002      	beq.n	80043d6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80043d0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80043d2:	4620      	mov	r0, r4
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80043d8:	4a0c      	ldr	r2, [pc, #48]	; (800440c <RTC_EnterInitMode+0x48>)
 80043da:	68d3      	ldr	r3, [r2, #12]
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80043e2:	f7fd f883 	bl	80014ec <HAL_GetTick>
 80043e6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80043ea:	4b08      	ldr	r3, [pc, #32]	; (800440c <RTC_EnterInitMode+0x48>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043f2:	d1ee      	bne.n	80043d2 <RTC_EnterInitMode+0xe>
 80043f4:	2c03      	cmp	r4, #3
 80043f6:	d0ec      	beq.n	80043d2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043f8:	f7fd f878 	bl	80014ec <HAL_GetTick>
 80043fc:	1b43      	subs	r3, r0, r5
 80043fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004402:	d9f2      	bls.n	80043ea <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004404:	2403      	movs	r4, #3
 8004406:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800440a:	e7ee      	b.n	80043ea <RTC_EnterInitMode+0x26>
 800440c:	40002800 	.word	0x40002800

08004410 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004410:	b510      	push	{r4, lr}
 8004412:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <RTC_ExitInitMode+0x48>)
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f013 0f20 	tst.w	r3, #32
 8004424:	d106      	bne.n	8004434 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004426:	f7ff ffb3 	bl	8004390 <HAL_RTC_WaitForSynchro>
 800442a:	b198      	cbz	r0, 8004454 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800442c:	2003      	movs	r0, #3
 800442e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004432:	e00f      	b.n	8004454 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <RTC_ExitInitMode+0x48>)
 8004436:	6993      	ldr	r3, [r2, #24]
 8004438:	f023 0320 	bic.w	r3, r3, #32
 800443c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800443e:	f7ff ffa7 	bl	8004390 <HAL_RTC_WaitForSynchro>
 8004442:	b110      	cbz	r0, 800444a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004444:	2003      	movs	r0, #3
 8004446:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800444a:	4a03      	ldr	r2, [pc, #12]	; (8004458 <RTC_ExitInitMode+0x48>)
 800444c:	6993      	ldr	r3, [r2, #24]
 800444e:	f043 0320 	orr.w	r3, r3, #32
 8004452:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	40002800 	.word	0x40002800

0800445c <HAL_RTC_Init>:
  if (hrtc != NULL)
 800445c:	2800      	cmp	r0, #0
 800445e:	d04a      	beq.n	80044f6 <HAL_RTC_Init+0x9a>
{
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004464:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004468:	b19b      	cbz	r3, 8004492 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800446a:	2302      	movs	r3, #2
 800446c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004470:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RTC_Init+0xa0>)
 8004472:	22ca      	movs	r2, #202	; 0xca
 8004474:	625a      	str	r2, [r3, #36]	; 0x24
 8004476:	2253      	movs	r2, #83	; 0x53
 8004478:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800447a:	4620      	mov	r0, r4
 800447c:	f7ff ffa2 	bl	80043c4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004480:	b160      	cbz	r0, 800449c <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_RTC_Init+0xa0>)
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004488:	b910      	cbnz	r0, 8004490 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 800448a:	2301      	movs	r3, #1
 800448c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004490:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004492:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8004496:	f7fc fe91 	bl	80011bc <HAL_RTC_MspInit>
 800449a:	e7e6      	b.n	800446a <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <HAL_RTC_Init+0xa0>)
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80044a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a8:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80044aa:	6999      	ldr	r1, [r3, #24]
 80044ac:	6862      	ldr	r2, [r4, #4]
 80044ae:	6920      	ldr	r0, [r4, #16]
 80044b0:	4302      	orrs	r2, r0
 80044b2:	69a0      	ldr	r0, [r4, #24]
 80044b4:	4302      	orrs	r2, r0
 80044b6:	430a      	orrs	r2, r1
 80044b8:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80044ba:	68e2      	ldr	r2, [r4, #12]
 80044bc:	68a1      	ldr	r1, [r4, #8]
 80044be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80044c2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80044ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044ce:	4301      	orrs	r1, r0
 80044d0:	430a      	orrs	r2, r1
 80044d2:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7ff ff9b 	bl	8004410 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80044da:	2800      	cmp	r0, #0
 80044dc:	d1d1      	bne.n	8004482 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80044de:	4907      	ldr	r1, [pc, #28]	; (80044fc <HAL_RTC_Init+0xa0>)
 80044e0:	698b      	ldr	r3, [r1, #24]
 80044e2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80044e6:	6a22      	ldr	r2, [r4, #32]
 80044e8:	69e5      	ldr	r5, [r4, #28]
 80044ea:	432a      	orrs	r2, r5
 80044ec:	6965      	ldr	r5, [r4, #20]
 80044ee:	432a      	orrs	r2, r5
 80044f0:	4313      	orrs	r3, r2
 80044f2:	618b      	str	r3, [r1, #24]
 80044f4:	e7c5      	b.n	8004482 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80044f6:	2001      	movs	r0, #1
}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40002800 	.word	0x40002800

08004500 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004500:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004502:	2809      	cmp	r0, #9
 8004504:	d903      	bls.n	800450e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8004506:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004508:	380a      	subs	r0, #10
 800450a:	b2c0      	uxtb	r0, r0
 800450c:	e7f9      	b.n	8004502 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	b2db      	uxtb	r3, r3
}
 8004512:	4318      	orrs	r0, r3
 8004514:	4770      	bx	lr
	...

08004518 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004518:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800451c:	2b01      	cmp	r3, #1
 800451e:	f000 80b0 	beq.w	8004682 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8004522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004526:	4605      	mov	r5, r0
 8004528:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800452a:	2301      	movs	r3, #1
 800452c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004530:	2302      	movs	r3, #2
 8004532:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004536:	4b54      	ldr	r3, [pc, #336]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 8004538:	68de      	ldr	r6, [r3, #12]
 800453a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800453e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004542:	d043      	beq.n	80045cc <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8004544:	bb12      	cbnz	r2, 800458c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f013 0f40 	tst.w	r3, #64	; 0x40
 800454c:	d101      	bne.n	8004552 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004552:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004556:	7820      	ldrb	r0, [r4, #0]
 8004558:	f7ff ffd2 	bl	8004500 <RTC_ByteToBcd2>
 800455c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800455e:	7860      	ldrb	r0, [r4, #1]
 8004560:	f7ff ffce 	bl	8004500 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004564:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004568:	78a0      	ldrb	r0, [r4, #2]
 800456a:	f7ff ffc9 	bl	8004500 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800456e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004570:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004572:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004576:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800457a:	f7ff ffc1 	bl	8004500 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800457e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004582:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004584:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004586:	ea48 0000 	orr.w	r0, r8, r0
 800458a:	e020      	b.n	80045ce <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800458c:	6948      	ldr	r0, [r1, #20]
 800458e:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8004592:	d009      	beq.n	80045a8 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004594:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004598:	d006      	beq.n	80045a8 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800459a:	4b3b      	ldr	r3, [pc, #236]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045a2:	d101      	bne.n	80045a8 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045a8:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80045aa:	7863      	ldrb	r3, [r4, #1]
 80045ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80045b2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80045b4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80045b6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80045b8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80045bc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80045c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80045c4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80045c6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045c8:	4318      	orrs	r0, r3
 80045ca:	e000      	b.n	80045ce <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80045cc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 80045d0:	22ca      	movs	r2, #202	; 0xca
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
 80045d4:	2253      	movs	r2, #83	; 0x53
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80045d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045de:	d02a      	beq.n	8004636 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80045e0:	4b29      	ldr	r3, [pc, #164]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80045e8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80045ea:	2202      	movs	r2, #2
 80045ec:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80045ee:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80045f2:	d040      	beq.n	8004676 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 80045f6:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80045f8:	69a2      	ldr	r2, [r4, #24]
 80045fa:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80045fc:	6862      	ldr	r2, [r4, #4]
 80045fe:	4b22      	ldr	r3, [pc, #136]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 8004600:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004602:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004604:	f042 0202 	orr.w	r2, r2, #2
 8004608:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8004610:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <HAL_RTC_SetAlarm_IT+0x174>)
 8004614:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 8004622:	22ff      	movs	r2, #255	; 0xff
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004626:	2301      	movs	r3, #1
 8004628:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800462c:	2000      	movs	r0, #0
 800462e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8004632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800463e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004640:	2201      	movs	r2, #1
 8004642:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004644:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004648:	d00f      	beq.n	800466a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800464a:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 800464c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800464e:	69a2      	ldr	r2, [r4, #24]
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004652:	6862      	ldr	r2, [r4, #4]
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 8004656:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004658:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8004666:	619a      	str	r2, [r3, #24]
 8004668:	e7d3      	b.n	8004612 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800466a:	69a3      	ldr	r3, [r4, #24]
 800466c:	69e2      	ldr	r2, [r4, #28]
 800466e:	4313      	orrs	r3, r2
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 8004672:	6453      	str	r3, [r2, #68]	; 0x44
 8004674:	e7ed      	b.n	8004652 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004676:	69a3      	ldr	r3, [r4, #24]
 8004678:	69e2      	ldr	r2, [r4, #28]
 800467a:	4313      	orrs	r3, r2
 800467c:	4a02      	ldr	r2, [pc, #8]	; (8004688 <HAL_RTC_SetAlarm_IT+0x170>)
 800467e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004680:	e7bc      	b.n	80045fc <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8004682:	2002      	movs	r0, #2
}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40002800 	.word	0x40002800
 800468c:	58000800 	.word	0x58000800

08004690 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004690:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004694:	2b01      	cmp	r3, #1
 8004696:	d017      	beq.n	80046c8 <HAL_RTCEx_EnableBypassShadow+0x38>
 8004698:	2101      	movs	r1, #1
 800469a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800469e:	2302      	movs	r3, #2
 80046a0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80046a6:	22ca      	movs	r2, #202	; 0xca
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24
 80046aa:	2253      	movs	r2, #83	; 0x53
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	f042 0220 	orr.w	r2, r2, #32
 80046b4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80046ba:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046be:	2300      	movs	r3, #0
 80046c0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80046c4:	4618      	mov	r0, r3
 80046c6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80046c8:	2002      	movs	r0, #2
}
 80046ca:	4770      	bx	lr
 80046cc:	40002800 	.word	0x40002800

080046d0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d020      	beq.n	800471a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80046d8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80046da:	2101      	movs	r1, #1
 80046dc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046e0:	2302      	movs	r3, #2
 80046e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80046e8:	22ca      	movs	r2, #202	; 0xca
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
 80046ec:	2253      	movs	r2, #83	; 0x53
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046f6:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80046f8:	4c0a      	ldr	r4, [pc, #40]	; (8004724 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80046fa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80046fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004702:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004706:	22ff      	movs	r2, #255	; 0xff
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800470a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800470e:	2300      	movs	r3, #0
 8004710:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004714:	4618      	mov	r0, r3
}
 8004716:	bc10      	pop	{r4}
 8004718:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800471a:	2002      	movs	r0, #2
}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40002800 	.word	0x40002800
 8004724:	58000800 	.word	0x58000800

08004728 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004728:	b510      	push	{r4, lr}
 800472a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004734:	d103      	bne.n	800473e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004736:	2301      	movs	r3, #1
 8004738:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800473c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800473e:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8004740:	2240      	movs	r2, #64	; 0x40
 8004742:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004744:	f7fd f828 	bl	8001798 <HAL_RTCEx_SSRUEventCallback>
 8004748:	e7f5      	b.n	8004736 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800474a:	bf00      	nop
 800474c:	40002800 	.word	0x40002800

08004750 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004750:	4770      	bx	lr

08004752 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004752:	0089      	lsls	r1, r1, #2
 8004754:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004758:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800475c:	600a      	str	r2, [r1, #0]
}
 800475e:	4770      	bx	lr

08004760 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004760:	0089      	lsls	r1, r1, #2
 8004762:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004766:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800476a:	6808      	ldr	r0, [r1, #0]
}
 800476c:	4770      	bx	lr
	...

08004770 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <SUBGHZSPI_Init+0x20>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004778:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800477a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800477e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004780:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004784:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	4770      	bx	lr
 8004790:	58010000 	.word	0x58010000

08004794 <HAL_SUBGHZ_Init>:
{
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8004798:	2800      	cmp	r0, #0
 800479a:	d04e      	beq.n	800483a <HAL_SUBGHZ_Init+0xa6>
 800479c:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800479e:	7983      	ldrb	r3, [r0, #6]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d03b      	beq.n	800481c <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80047a4:	2302      	movs	r3, #2
 80047a6:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80047a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ac:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80047b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_SUBGHZ_Init+0xac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80047c0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80047c4:	2264      	movs	r2, #100	; 0x64
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	b34b      	cbz	r3, 8004824 <HAL_SUBGHZ_Init+0x90>
    count--;
 80047d0:	9b01      	ldr	r3, [sp, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80047e2:	d1f3      	bne.n	80047cc <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80047e4:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <HAL_SUBGHZ_Init+0xb0>)
 80047e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80047ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 80047f4:	4914      	ldr	r1, [pc, #80]	; (8004848 <HAL_SUBGHZ_Init+0xb4>)
 80047f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80047fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004808:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800480a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800480e:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8004810:	b15d      	cbz	r5, 800482a <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8004812:	2301      	movs	r3, #1
 8004814:	71a3      	strb	r3, [r4, #6]
}
 8004816:	4628      	mov	r0, r5
 8004818:	b003      	add	sp, #12
 800481a:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 800481c:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800481e:	f7fc fd77 	bl	8001310 <HAL_SUBGHZ_MspInit>
 8004822:	e7bf      	b.n	80047a4 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004824:	2501      	movs	r5, #1
 8004826:	60a5      	str	r5, [r4, #8]
      break;
 8004828:	e7dd      	b.n	80047e6 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	f7ff ffa0 	bl	8004770 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004830:	2301      	movs	r3, #1
 8004832:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004834:	2300      	movs	r3, #0
 8004836:	60a3      	str	r3, [r4, #8]
 8004838:	e7eb      	b.n	8004812 <HAL_SUBGHZ_Init+0x7e>
    return status;
 800483a:	2501      	movs	r5, #1
 800483c:	e7eb      	b.n	8004816 <HAL_SUBGHZ_Init+0x82>
 800483e:	bf00      	nop
 8004840:	2000004c 	.word	0x2000004c
 8004844:	58000400 	.word	0x58000400
 8004848:	58000800 	.word	0x58000800

0800484c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800484c:	b082      	sub	sp, #8
 800484e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <SUBGHZSPI_Transmit+0x70>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004858:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800485c:	2064      	movs	r0, #100	; 0x64
 800485e:	fb00 f303 	mul.w	r3, r0, r3
 8004862:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004864:	9b01      	ldr	r3, [sp, #4]
 8004866:	b14b      	cbz	r3, 800487c <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	3b01      	subs	r3, #1
 800486c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <SUBGHZSPI_Transmit+0x74>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f013 0f02 	tst.w	r3, #2
 8004876:	d0f5      	beq.n	8004864 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004878:	2000      	movs	r0, #0
 800487a:	e001      	b.n	8004880 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800487c:	2001      	movs	r0, #1
 800487e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8004880:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <SUBGHZSPI_Transmit+0x78>)
 8004882:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <SUBGHZSPI_Transmit+0x70>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800488c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004890:	2164      	movs	r1, #100	; 0x64
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004898:	9b01      	ldr	r3, [sp, #4]
 800489a:	b143      	cbz	r3, 80048ae <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800489c:	9b01      	ldr	r3, [sp, #4]
 800489e:	3b01      	subs	r3, #1
 80048a0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <SUBGHZSPI_Transmit+0x74>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f013 0f01 	tst.w	r3, #1
 80048aa:	d0f5      	beq.n	8004898 <SUBGHZSPI_Transmit+0x4c>
 80048ac:	e001      	b.n	80048b2 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048ae:	2001      	movs	r0, #1
 80048b0:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <SUBGHZSPI_Transmit+0x74>)
 80048b4:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80048b6:	b002      	add	sp, #8
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	2000004c 	.word	0x2000004c
 80048c0:	58010000 	.word	0x58010000
 80048c4:	5801000c 	.word	0x5801000c

080048c8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80048c8:	b410      	push	{r4}
 80048ca:	b083      	sub	sp, #12
 80048cc:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <SUBGHZSPI_Receive+0x78>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80048d6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80048da:	2064      	movs	r0, #100	; 0x64
 80048dc:	fb00 f303 	mul.w	r3, r0, r3
 80048e0:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80048e2:	9b01      	ldr	r3, [sp, #4]
 80048e4:	b14b      	cbz	r3, 80048fa <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80048e6:	9b01      	ldr	r3, [sp, #4]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80048ec:	4b15      	ldr	r3, [pc, #84]	; (8004944 <SUBGHZSPI_Receive+0x7c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f013 0f02 	tst.w	r3, #2
 80048f4:	d0f5      	beq.n	80048e2 <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2000      	movs	r0, #0
 80048f8:	e001      	b.n	80048fe <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048fa:	2001      	movs	r0, #1
 80048fc:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <SUBGHZSPI_Receive+0x80>)
 8004900:	24ff      	movs	r4, #255	; 0xff
 8004902:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <SUBGHZSPI_Receive+0x78>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800490c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004910:	2464      	movs	r4, #100	; 0x64
 8004912:	fb04 f303 	mul.w	r3, r4, r3
 8004916:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004918:	9b01      	ldr	r3, [sp, #4]
 800491a:	b143      	cbz	r3, 800492e <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800491c:	9b01      	ldr	r3, [sp, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <SUBGHZSPI_Receive+0x7c>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f013 0f01 	tst.w	r3, #1
 800492a:	d0f5      	beq.n	8004918 <SUBGHZSPI_Receive+0x50>
 800492c:	e001      	b.n	8004932 <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800492e:	2001      	movs	r0, #1
 8004930:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <SUBGHZSPI_Receive+0x7c>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	700b      	strb	r3, [r1, #0]

  return status;
}
 8004938:	b003      	add	sp, #12
 800493a:	bc10      	pop	{r4}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	2000004c 	.word	0x2000004c
 8004944:	58010000 	.word	0x58010000
 8004948:	5801000c 	.word	0x5801000c

0800494c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800494c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <SUBGHZ_WaitOnBusy+0x50>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004956:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800495a:	2264      	movs	r2, #100	; 0x64
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	e006      	b.n	8004972 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004964:	2302      	movs	r3, #2
 8004966:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8004968:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800496a:	b002      	add	sp, #8
 800496c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800496e:	4213      	tst	r3, r2
 8004970:	d012      	beq.n	8004998 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <SUBGHZ_WaitOnBusy+0x54>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f013 0304 	ands.w	r3, r3, #4
 800497a:	d000      	beq.n	800497e <SUBGHZ_WaitOnBusy+0x32>
 800497c:	2301      	movs	r3, #1
    if (count == 0U)
 800497e:	9a01      	ldr	r2, [sp, #4]
 8004980:	2a00      	cmp	r2, #0
 8004982:	d0ef      	beq.n	8004964 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8004984:	9a01      	ldr	r2, [sp, #4]
 8004986:	3a01      	subs	r2, #1
 8004988:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <SUBGHZ_WaitOnBusy+0x54>)
 800498c:	6952      	ldr	r2, [r2, #20]
 800498e:	f012 0202 	ands.w	r2, r2, #2
 8004992:	d0ec      	beq.n	800496e <SUBGHZ_WaitOnBusy+0x22>
 8004994:	2201      	movs	r2, #1
 8004996:	e7ea      	b.n	800496e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8004998:	2000      	movs	r0, #0
 800499a:	e7e6      	b.n	800496a <SUBGHZ_WaitOnBusy+0x1e>
 800499c:	2000004c 	.word	0x2000004c
 80049a0:	58000400 	.word	0x58000400

080049a4 <SUBGHZ_CheckDeviceReady>:
{
 80049a4:	b500      	push	{lr}
 80049a6:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80049a8:	7903      	ldrb	r3, [r0, #4]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d004      	beq.n	80049b8 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80049ae:	f7ff ffcd 	bl	800494c <SUBGHZ_WaitOnBusy>
}
 80049b2:	b003      	add	sp, #12
 80049b4:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <SUBGHZ_CheckDeviceReady+0x4c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80049c0:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80049c4:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80049c6:	4a0b      	ldr	r2, [pc, #44]	; (80049f4 <SUBGHZ_CheckDeviceReady+0x50>)
 80049c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f9      	bne.n	80049d4 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <SUBGHZ_CheckDeviceReady+0x50>)
 80049e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049ee:	e7de      	b.n	80049ae <SUBGHZ_CheckDeviceReady+0xa>
 80049f0:	2000004c 	.word	0x2000004c
 80049f4:	58000400 	.word	0x58000400

080049f8 <HAL_SUBGHZ_WriteRegisters>:
{
 80049f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049fe:	7980      	ldrb	r0, [r0, #6]
 8004a00:	fa5f f880 	uxtb.w	r8, r0
 8004a04:	f1b8 0f01 	cmp.w	r8, #1
 8004a08:	d13e      	bne.n	8004a88 <HAL_SUBGHZ_WriteRegisters+0x90>
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	4617      	mov	r7, r2
 8004a0e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004a10:	796b      	ldrb	r3, [r5, #5]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d03b      	beq.n	8004a8e <HAL_SUBGHZ_WriteRegisters+0x96>
 8004a16:	2301      	movs	r3, #1
 8004a18:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7ff ffc0 	bl	80049a4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004a24:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004a26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004a32:	210d      	movs	r1, #13
 8004a34:	4628      	mov	r0, r5
 8004a36:	f7ff ff09 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004a3a:	0a21      	lsrs	r1, r4, #8
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f7ff ff05 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004a42:	b2e1      	uxtb	r1, r4
 8004a44:	4628      	mov	r0, r5
 8004a46:	f7ff ff01 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a4a:	2400      	movs	r4, #0
 8004a4c:	e005      	b.n	8004a5a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004a4e:	5d39      	ldrb	r1, [r7, r4]
 8004a50:	4628      	mov	r0, r5
 8004a52:	f7ff fefb 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a56:	3401      	adds	r4, #1
 8004a58:	b2a4      	uxth	r4, r4
 8004a5a:	42b4      	cmp	r4, r6
 8004a5c:	d3f7      	bcc.n	8004a4e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004a5e:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004a60:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f7ff ff6d 	bl	800494c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a72:	68ab      	ldr	r3, [r5, #8]
 8004a74:	b90b      	cbnz	r3, 8004a7a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8004a76:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	716b      	strb	r3, [r5, #5]
}
 8004a82:	4640      	mov	r0, r8
 8004a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004a88:	f04f 0802 	mov.w	r8, #2
 8004a8c:	e7f9      	b.n	8004a82 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8004a8e:	f04f 0802 	mov.w	r8, #2
 8004a92:	e7f6      	b.n	8004a82 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8004a94:	58000400 	.word	0x58000400

08004a98 <HAL_SUBGHZ_ReadRegisters>:
{
 8004a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a9e:	7980      	ldrb	r0, [r0, #6]
 8004aa0:	fa5f f880 	uxtb.w	r8, r0
 8004aa4:	f1b8 0f01 	cmp.w	r8, #1
 8004aa8:	d141      	bne.n	8004b2e <HAL_SUBGHZ_ReadRegisters+0x96>
 8004aaa:	460c      	mov	r4, r1
 8004aac:	4615      	mov	r5, r2
 8004aae:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004ab0:	7973      	ldrb	r3, [r6, #5]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d03e      	beq.n	8004b34 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004aba:	4630      	mov	r0, r6
 8004abc:	f7ff ff72 	bl	80049a4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004ac2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ac6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004ace:	211d      	movs	r1, #29
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7ff febb 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004ad6:	0a21      	lsrs	r1, r4, #8
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff feb7 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004ade:	b2e1      	uxtb	r1, r4
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff feb3 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f7ff feaf 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004aee:	2400      	movs	r4, #0
 8004af0:	e006      	b.n	8004b00 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004af2:	4629      	mov	r1, r5
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7ff fee7 	bl	80048c8 <SUBGHZSPI_Receive>
      pData++;
 8004afa:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004afc:	3401      	adds	r4, #1
 8004afe:	b2a4      	uxth	r4, r4
 8004b00:	42bc      	cmp	r4, r7
 8004b02:	d3f6      	bcc.n	8004af2 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004b06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7ff ff1a 	bl	800494c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b18:	68b3      	ldr	r3, [r6, #8]
 8004b1a:	b90b      	cbnz	r3, 8004b20 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8004b1c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b20:	2301      	movs	r3, #1
 8004b22:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004b24:	2300      	movs	r3, #0
 8004b26:	7173      	strb	r3, [r6, #5]
}
 8004b28:	4640      	mov	r0, r8
 8004b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004b2e:	f04f 0802 	mov.w	r8, #2
 8004b32:	e7f9      	b.n	8004b28 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8004b34:	f04f 0802 	mov.w	r8, #2
 8004b38:	e7f6      	b.n	8004b28 <HAL_SUBGHZ_ReadRegisters+0x90>
 8004b3a:	bf00      	nop
 8004b3c:	58000400 	.word	0x58000400

08004b40 <HAL_SUBGHZ_ExecSetCmd>:
{
 8004b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b44:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b46:	7980      	ldrb	r0, [r0, #6]
 8004b48:	fa5f f980 	uxtb.w	r9, r0
 8004b4c:	f1b9 0f01 	cmp.w	r9, #1
 8004b50:	d143      	bne.n	8004bda <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8004b52:	4688      	mov	r8, r1
 8004b54:	4617      	mov	r7, r2
 8004b56:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004b58:	796b      	ldrb	r3, [r5, #5]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d040      	beq.n	8004be0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7ff ff1e 	bl	80049a4 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004b68:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8004b6c:	d005      	beq.n	8004b7a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8004b6e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8004b72:	d002      	beq.n	8004b7a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	712b      	strb	r3, [r5, #4]
 8004b78:	e001      	b.n	8004b7e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004b80:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f7ff fe5c 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b94:	2400      	movs	r4, #0
 8004b96:	e005      	b.n	8004ba4 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b98:	5d39      	ldrb	r1, [r7, r4]
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f7ff fe56 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004ba0:	3401      	adds	r4, #1
 8004ba2:	b2a4      	uxth	r4, r4
 8004ba4:	42b4      	cmp	r4, r6
 8004ba6:	d3f7      	bcc.n	8004b98 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	; (8004be8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004baa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8004bb6:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8004bba:	d10a      	bne.n	8004bd2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004bbc:	68ab      	ldr	r3, [r5, #8]
 8004bbe:	b90b      	cbnz	r3, 8004bc4 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8004bc0:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	716b      	strb	r3, [r5, #5]
}
 8004bcc:	4648      	mov	r0, r9
 8004bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f7ff feba 	bl	800494c <SUBGHZ_WaitOnBusy>
 8004bd8:	e7f0      	b.n	8004bbc <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8004bda:	f04f 0902 	mov.w	r9, #2
 8004bde:	e7f5      	b.n	8004bcc <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8004be0:	f04f 0902 	mov.w	r9, #2
 8004be4:	e7f2      	b.n	8004bcc <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8004be6:	bf00      	nop
 8004be8:	58000400 	.word	0x58000400

08004bec <HAL_SUBGHZ_ExecGetCmd>:
{
 8004bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004bf2:	7980      	ldrb	r0, [r0, #6]
 8004bf4:	fa5f f880 	uxtb.w	r8, r0
 8004bf8:	f1b8 0f01 	cmp.w	r8, #1
 8004bfc:	d139      	bne.n	8004c72 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8004bfe:	460c      	mov	r4, r1
 8004c00:	4615      	mov	r5, r2
 8004c02:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004c04:	7973      	ldrb	r3, [r6, #5]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d036      	beq.n	8004c78 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7ff fec8 	bl	80049a4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004c14:	4a1a      	ldr	r2, [pc, #104]	; (8004c80 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004c16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004c22:	4621      	mov	r1, r4
 8004c24:	4630      	mov	r0, r6
 8004c26:	f7ff fe11 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f7ff fe0d 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c32:	2400      	movs	r4, #0
 8004c34:	e006      	b.n	8004c44 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004c36:	4629      	mov	r1, r5
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f7ff fe45 	bl	80048c8 <SUBGHZSPI_Receive>
      pData++;
 8004c3e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004c40:	3401      	adds	r4, #1
 8004c42:	b2a4      	uxth	r4, r4
 8004c44:	42bc      	cmp	r4, r7
 8004c46:	d3f6      	bcc.n	8004c36 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004c4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7ff fe78 	bl	800494c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c5c:	68b3      	ldr	r3, [r6, #8]
 8004c5e:	b90b      	cbnz	r3, 8004c64 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8004c60:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c64:	2301      	movs	r3, #1
 8004c66:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	7173      	strb	r3, [r6, #5]
}
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004c72:	f04f 0802 	mov.w	r8, #2
 8004c76:	e7f9      	b.n	8004c6c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8004c78:	f04f 0802 	mov.w	r8, #2
 8004c7c:	e7f6      	b.n	8004c6c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8004c7e:	bf00      	nop
 8004c80:	58000400 	.word	0x58000400

08004c84 <HAL_SUBGHZ_IRQHandler>:
{
 8004c84:	b530      	push	{r4, r5, lr}
 8004c86:	b083      	sub	sp, #12
 8004c88:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004c90:	2302      	movs	r3, #2
 8004c92:	aa01      	add	r2, sp, #4
 8004c94:	2112      	movs	r1, #18
 8004c96:	f7ff ffa9 	bl	8004bec <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004c9a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8004c9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004ca2:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004ca6:	f013 0f01 	tst.w	r3, #1
 8004caa:	d126      	bne.n	8004cfa <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004cac:	f014 0f02 	tst.w	r4, #2
 8004cb0:	d127      	bne.n	8004d02 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004cb2:	f014 0f04 	tst.w	r4, #4
 8004cb6:	d128      	bne.n	8004d0a <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004cb8:	f014 0f08 	tst.w	r4, #8
 8004cbc:	d129      	bne.n	8004d12 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004cbe:	f014 0f10 	tst.w	r4, #16
 8004cc2:	d12a      	bne.n	8004d1a <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004cc4:	f014 0f20 	tst.w	r4, #32
 8004cc8:	d12b      	bne.n	8004d22 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004cca:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004cce:	d12c      	bne.n	8004d2a <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004cd0:	f014 0f80 	tst.w	r4, #128	; 0x80
 8004cd4:	d006      	beq.n	8004ce4 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004cd6:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004cda:	d02a      	beq.n	8004d32 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f00b fa96 	bl	8010210 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004ce4:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004ce8:	d128      	bne.n	8004d3c <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004cea:	2302      	movs	r3, #2
 8004cec:	aa01      	add	r2, sp, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7ff ff25 	bl	8004b40 <HAL_SUBGHZ_ExecSetCmd>
}
 8004cf6:	b003      	add	sp, #12
 8004cf8:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f00b fa70 	bl	80101e0 <HAL_SUBGHZ_TxCpltCallback>
 8004d00:	e7d4      	b.n	8004cac <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004d02:	4628      	mov	r0, r5
 8004d04:	f00b fa74 	bl	80101f0 <HAL_SUBGHZ_RxCpltCallback>
 8004d08:	e7d3      	b.n	8004cb2 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f00b faa4 	bl	8010258 <HAL_SUBGHZ_PreambleDetectedCallback>
 8004d10:	e7d2      	b.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004d12:	4628      	mov	r0, r5
 8004d14:	f00b faa8 	bl	8010268 <HAL_SUBGHZ_SyncWordValidCallback>
 8004d18:	e7d1      	b.n	8004cbe <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f00b faac 	bl	8010278 <HAL_SUBGHZ_HeaderValidCallback>
 8004d20:	e7d0      	b.n	8004cc4 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004d22:	4628      	mov	r0, r5
 8004d24:	f00b fa90 	bl	8010248 <HAL_SUBGHZ_HeaderErrorCallback>
 8004d28:	e7cf      	b.n	8004cca <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f00b fa68 	bl	8010200 <HAL_SUBGHZ_CRCErrorCallback>
 8004d30:	e7ce      	b.n	8004cd0 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004d32:	2100      	movs	r1, #0
 8004d34:	4628      	mov	r0, r5
 8004d36:	f00b fa6b 	bl	8010210 <HAL_SUBGHZ_CADStatusCallback>
 8004d3a:	e7d3      	b.n	8004ce4 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f00b fa79 	bl	8010234 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8004d42:	e7d2      	b.n	8004cea <HAL_SUBGHZ_IRQHandler+0x66>

08004d44 <HAL_SUBGHZ_WriteBuffer>:
{
 8004d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d48:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004d4a:	7980      	ldrb	r0, [r0, #6]
 8004d4c:	fa5f f880 	uxtb.w	r8, r0
 8004d50:	f1b8 0f01 	cmp.w	r8, #1
 8004d54:	d138      	bne.n	8004dc8 <HAL_SUBGHZ_WriteBuffer+0x84>
 8004d56:	460c      	mov	r4, r1
 8004d58:	4617      	mov	r7, r2
 8004d5a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004d5c:	796b      	ldrb	r3, [r5, #5]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d035      	beq.n	8004dce <HAL_SUBGHZ_WriteBuffer+0x8a>
 8004d62:	2301      	movs	r3, #1
 8004d64:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004d66:	4628      	mov	r0, r5
 8004d68:	f7ff fe1c 	bl	80049a4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d6c:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004d6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004d7a:	210e      	movs	r1, #14
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f7ff fd65 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004d82:	4621      	mov	r1, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	f7ff fd61 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d8a:	2400      	movs	r4, #0
 8004d8c:	e005      	b.n	8004d9a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004d8e:	5d39      	ldrb	r1, [r7, r4]
 8004d90:	4628      	mov	r0, r5
 8004d92:	f7ff fd5b 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d96:	3401      	adds	r4, #1
 8004d98:	b2a4      	uxth	r4, r4
 8004d9a:	42b4      	cmp	r4, r6
 8004d9c:	d3f7      	bcc.n	8004d8e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d9e:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004da0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004dac:	4628      	mov	r0, r5
 8004dae:	f7ff fdcd 	bl	800494c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004db2:	68ab      	ldr	r3, [r5, #8]
 8004db4:	b90b      	cbnz	r3, 8004dba <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8004db6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	716b      	strb	r3, [r5, #5]
}
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004dc8:	f04f 0802 	mov.w	r8, #2
 8004dcc:	e7f9      	b.n	8004dc2 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8004dce:	f04f 0802 	mov.w	r8, #2
 8004dd2:	e7f6      	b.n	8004dc2 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004dd4:	58000400 	.word	0x58000400

08004dd8 <HAL_SUBGHZ_ReadBuffer>:
{
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004dde:	7980      	ldrb	r0, [r0, #6]
 8004de0:	fa5f f880 	uxtb.w	r8, r0
 8004de4:	f1b8 0f01 	cmp.w	r8, #1
 8004de8:	d13d      	bne.n	8004e66 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8004dea:	460c      	mov	r4, r1
 8004dec:	4615      	mov	r5, r2
 8004dee:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004df0:	7973      	ldrb	r3, [r6, #5]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d03a      	beq.n	8004e6c <HAL_SUBGHZ_ReadBuffer+0x94>
 8004df6:	2301      	movs	r3, #1
 8004df8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7ff fdd2 	bl	80049a4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e00:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004e02:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004e0e:	211e      	movs	r1, #30
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff fd1b 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004e16:	4621      	mov	r1, r4
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff fd17 	bl	800484c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4630      	mov	r0, r6
 8004e22:	f7ff fd13 	bl	800484c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004e26:	2400      	movs	r4, #0
 8004e28:	e006      	b.n	8004e38 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff fd4b 	bl	80048c8 <SUBGHZSPI_Receive>
      pData++;
 8004e32:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004e34:	3401      	adds	r4, #1
 8004e36:	b2a4      	uxth	r4, r4
 8004e38:	42bc      	cmp	r4, r7
 8004e3a:	d3f6      	bcc.n	8004e2a <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004e3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff fd7e 	bl	800494c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004e50:	68b3      	ldr	r3, [r6, #8]
 8004e52:	b90b      	cbnz	r3, 8004e58 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8004e54:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	7173      	strb	r3, [r6, #5]
}
 8004e60:	4640      	mov	r0, r8
 8004e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004e66:	f04f 0802 	mov.w	r8, #2
 8004e6a:	e7f9      	b.n	8004e60 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8004e6c:	f04f 0802 	mov.w	r8, #2
 8004e70:	e7f6      	b.n	8004e60 <HAL_SUBGHZ_ReadBuffer+0x88>
 8004e72:	bf00      	nop
 8004e74:	58000400 	.word	0x58000400

08004e78 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004e78:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	e852 3f00 	ldrex	r3, [r2]
 8004e7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	e842 3100 	strex	r1, r3, [r2]
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d1f6      	bne.n	8004e78 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004e8a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	f102 0308 	add.w	r3, r2, #8
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	3208      	adds	r2, #8
 8004e9a:	e842 3100 	strex	r1, r3, [r2]
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	d1f3      	bne.n	8004e8a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8004ea8:	4770      	bx	lr

08004eaa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eaa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	e852 3f00 	ldrex	r3, [r2]
 8004eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	e842 3100 	strex	r1, r3, [r2]
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d1f6      	bne.n	8004eaa <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ebc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	f102 0308 	add.w	r3, r2, #8
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	3208      	adds	r2, #8
 8004ed0:	e842 3100 	strex	r1, r3, [r2]
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d1f1      	bne.n	8004ebc <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d006      	beq.n	8004eec <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ede:	2320      	movs	r3, #32
 8004ee0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ee8:	6703      	str	r3, [r0, #112]	; 0x70
}
 8004eea:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	e852 3f00 	ldrex	r3, [r2]
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	e842 3100 	strex	r1, r3, [r2]
 8004efa:	2900      	cmp	r1, #0
 8004efc:	d1f6      	bne.n	8004eec <UART_EndRxTransfer+0x42>
 8004efe:	e7ee      	b.n	8004ede <UART_EndRxTransfer+0x34>

08004f00 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004f00:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d14c      	bne.n	8004fa2 <HAL_UART_Transmit_DMA+0xa2>
{
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	d04a      	beq.n	8004fa6 <HAL_UART_Transmit_DMA+0xa6>
 8004f10:	2a00      	cmp	r2, #0
 8004f12:	d04a      	beq.n	8004faa <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8004f14:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d048      	beq.n	8004fae <HAL_UART_Transmit_DMA+0xae>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8004f22:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004f24:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f28:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f32:	2321      	movs	r3, #33	; 0x21
 8004f34:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8004f38:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004f3a:	b1f3      	cbz	r3, 8004f7a <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f3c:	491d      	ldr	r1, [pc, #116]	; (8004fb4 <HAL_UART_Transmit_DMA+0xb4>)
 8004f3e:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f40:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004f42:	491d      	ldr	r1, [pc, #116]	; (8004fb8 <HAL_UART_Transmit_DMA+0xb8>)
 8004f44:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f46:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004f48:	491c      	ldr	r1, [pc, #112]	; (8004fbc <HAL_UART_Transmit_DMA+0xbc>)
 8004f4a:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8004f4c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004f4e:	2100      	movs	r1, #0
 8004f50:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004f52:	6801      	ldr	r1, [r0, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8004f5a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004f5c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8004f5e:	f7fd ffb1 	bl	8002ec4 <HAL_DMA_Start_IT>
 8004f62:	b150      	cbz	r0, 8004f7a <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f64:	2310      	movs	r3, #16
 8004f66:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8004f70:	2320      	movs	r3, #32
 8004f72:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8004f76:	2001      	movs	r0, #1
 8004f78:	e012      	b.n	8004fa0 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	2240      	movs	r2, #64	; 0x40
 8004f7e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004f80:	2300      	movs	r3, #0
 8004f82:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	f102 0308 	add.w	r3, r2, #8
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	3208      	adds	r2, #8
 8004f96:	e842 3100 	strex	r1, r3, [r2]
 8004f9a:	2900      	cmp	r1, #0
 8004f9c:	d1f3      	bne.n	8004f86 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8004f9e:	2000      	movs	r0, #0
}
 8004fa0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004fa2:	2002      	movs	r0, #2
}
 8004fa4:	4770      	bx	lr
      return HAL_ERROR;
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	e7fa      	b.n	8004fa0 <HAL_UART_Transmit_DMA+0xa0>
 8004faa:	2001      	movs	r0, #1
 8004fac:	e7f8      	b.n	8004fa0 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8004fae:	2002      	movs	r0, #2
 8004fb0:	e7f6      	b.n	8004fa0 <HAL_UART_Transmit_DMA+0xa0>
 8004fb2:	bf00      	nop
 8004fb4:	08004fc1 	.word	0x08004fc1
 8004fb8:	0800502f 	.word	0x0800502f
 8004fbc:	0800503b 	.word	0x0800503b

08004fc0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b508      	push	{r3, lr}
 8004fc2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fc4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f013 0f20 	tst.w	r3, #32
 8004fce:	d118      	bne.n	8005002 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fd6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	f102 0308 	add.w	r3, r2, #8
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	3208      	adds	r2, #8
 8004fe6:	e842 3100 	strex	r1, r3, [r2]
 8004fea:	2900      	cmp	r1, #0
 8004fec:	d1f3      	bne.n	8004fd6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	e852 3f00 	ldrex	r3, [r2]
 8004ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	e842 3100 	strex	r1, r3, [r2]
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d1f6      	bne.n	8004fee <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005000:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005002:	f7fc fd09 	bl	8001a18 <HAL_UART_TxCpltCallback>
}
 8005006:	e7fb      	b.n	8005000 <UART_DMATransmitCplt+0x40>

08005008 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005008:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800500a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	e852 3f00 	ldrex	r3, [r2]
 8005010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	e842 3100 	strex	r1, r3, [r2]
 8005018:	2900      	cmp	r1, #0
 800501a:	d1f6      	bne.n	800500a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800501c:	2320      	movs	r3, #32
 800501e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005026:	f7fc fcf7 	bl	8001a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502a:	bd08      	pop	{r3, pc}

0800502c <HAL_UART_TxHalfCpltCallback>:
}
 800502c:	4770      	bx	lr

0800502e <UART_DMATxHalfCplt>:
{
 800502e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005030:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005032:	f7ff fffb 	bl	800502c <HAL_UART_TxHalfCpltCallback>
}
 8005036:	bd08      	pop	{r3, pc}

08005038 <HAL_UART_ErrorCallback>:
}
 8005038:	4770      	bx	lr

0800503a <UART_DMAError>:
{
 800503a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800503c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800503e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005042:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800504e:	d001      	beq.n	8005054 <UART_DMAError+0x1a>
 8005050:	2a21      	cmp	r2, #33	; 0x21
 8005052:	d010      	beq.n	8005076 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f013 0f40 	tst.w	r3, #64	; 0x40
 800505c:	d001      	beq.n	8005062 <UART_DMAError+0x28>
 800505e:	2d22      	cmp	r5, #34	; 0x22
 8005060:	d010      	beq.n	8005084 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005062:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005066:	f043 0310 	orr.w	r3, r3, #16
 800506a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800506e:	4620      	mov	r0, r4
 8005070:	f7ff ffe2 	bl	8005038 <HAL_UART_ErrorCallback>
}
 8005074:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800507c:	4620      	mov	r0, r4
 800507e:	f7ff fefb 	bl	8004e78 <UART_EndTxTransfer>
 8005082:	e7e7      	b.n	8005054 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800508a:	4620      	mov	r0, r4
 800508c:	f7ff ff0d 	bl	8004eaa <UART_EndRxTransfer>
 8005090:	e7e7      	b.n	8005062 <UART_DMAError+0x28>

08005092 <UART_DMAAbortOnError>:
{
 8005092:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005094:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800509c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80050a0:	f7ff ffca 	bl	8005038 <HAL_UART_ErrorCallback>
}
 80050a4:	bd08      	pop	{r3, pc}

080050a6 <HAL_UARTEx_RxEventCallback>:
}
 80050a6:	4770      	bx	lr

080050a8 <HAL_UART_IRQHandler>:
{
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050ac:	6801      	ldr	r1, [r0, #0]
 80050ae:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050b0:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050b2:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050b4:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80050b8:	401a      	ands	r2, r3
 80050ba:	d108      	bne.n	80050ce <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050bc:	f013 0f20 	tst.w	r3, #32
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050c2:	f010 0f20 	tst.w	r0, #32
 80050c6:	d134      	bne.n	8005132 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050c8:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80050cc:	d131      	bne.n	8005132 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80050ce:	b12a      	cbz	r2, 80050dc <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80050d0:	4abd      	ldr	r2, [pc, #756]	; (80053c8 <HAL_UART_IRQHandler+0x320>)
 80050d2:	402a      	ands	r2, r5
 80050d4:	d133      	bne.n	800513e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050d6:	4ebd      	ldr	r6, [pc, #756]	; (80053cc <HAL_UART_IRQHandler+0x324>)
 80050d8:	4230      	tst	r0, r6
 80050da:	d130      	bne.n	800513e <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80050de:	2a01      	cmp	r2, #1
 80050e0:	f000 80c3 	beq.w	800526a <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80050e8:	d003      	beq.n	80050f2 <HAL_UART_IRQHandler+0x4a>
 80050ea:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80050ee:	f040 8155 	bne.w	800539c <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80050f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050f6:	d007      	beq.n	8005108 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80050f8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80050fc:	f040 8155 	bne.w	80053aa <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005100:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005104:	f040 8151 	bne.w	80053aa <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005108:	f013 0f40 	tst.w	r3, #64	; 0x40
 800510c:	d003      	beq.n	8005116 <HAL_UART_IRQHandler+0x6e>
 800510e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005112:	f040 8151 	bne.w	80053b8 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005116:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800511a:	d003      	beq.n	8005124 <HAL_UART_IRQHandler+0x7c>
 800511c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005120:	f040 814e 	bne.w	80053c0 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005124:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005128:	d002      	beq.n	8005130 <HAL_UART_IRQHandler+0x88>
 800512a:	2800      	cmp	r0, #0
 800512c:	f2c0 8152 	blt.w	80053d4 <HAL_UART_IRQHandler+0x32c>
}
 8005130:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005132:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0fb      	beq.n	8005130 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005138:	4620      	mov	r0, r4
 800513a:	4798      	blx	r3
      return;
 800513c:	e7f8      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800513e:	f013 0f01 	tst.w	r3, #1
 8005142:	d009      	beq.n	8005158 <HAL_UART_IRQHandler+0xb0>
 8005144:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005148:	d006      	beq.n	8005158 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800514a:	2601      	movs	r6, #1
 800514c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800514e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005152:	4331      	orrs	r1, r6
 8005154:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005158:	f013 0f02 	tst.w	r3, #2
 800515c:	d00b      	beq.n	8005176 <HAL_UART_IRQHandler+0xce>
 800515e:	f015 0f01 	tst.w	r5, #1
 8005162:	d008      	beq.n	8005176 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005164:	6821      	ldr	r1, [r4, #0]
 8005166:	2602      	movs	r6, #2
 8005168:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800516a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800516e:	f041 0104 	orr.w	r1, r1, #4
 8005172:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005176:	f013 0f04 	tst.w	r3, #4
 800517a:	d00b      	beq.n	8005194 <HAL_UART_IRQHandler+0xec>
 800517c:	f015 0f01 	tst.w	r5, #1
 8005180:	d008      	beq.n	8005194 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005182:	6821      	ldr	r1, [r4, #0]
 8005184:	2604      	movs	r6, #4
 8005186:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005188:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800518c:	f041 0102 	orr.w	r1, r1, #2
 8005190:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005194:	f013 0f08 	tst.w	r3, #8
 8005198:	d00b      	beq.n	80051b2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800519a:	f010 0f20 	tst.w	r0, #32
 800519e:	d100      	bne.n	80051a2 <HAL_UART_IRQHandler+0xfa>
 80051a0:	b13a      	cbz	r2, 80051b2 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	2108      	movs	r1, #8
 80051a6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051a8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80051ac:	430a      	orrs	r2, r1
 80051ae:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80051b6:	d00c      	beq.n	80051d2 <HAL_UART_IRQHandler+0x12a>
 80051b8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80051bc:	d009      	beq.n	80051d2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051c4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051c6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80051ca:	f042 0220 	orr.w	r2, r2, #32
 80051ce:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	d0aa      	beq.n	8005130 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051da:	f013 0f20 	tst.w	r3, #32
 80051de:	d009      	beq.n	80051f4 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051e0:	f010 0f20 	tst.w	r0, #32
 80051e4:	d102      	bne.n	80051ec <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051e6:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80051ea:	d003      	beq.n	80051f4 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80051ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80051ee:	b10b      	cbz	r3, 80051f4 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80051f0:	4620      	mov	r0, r4
 80051f2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80051f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005200:	d102      	bne.n	8005208 <HAL_UART_IRQHandler+0x160>
 8005202:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005206:	d029      	beq.n	800525c <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff fe4e 	bl	8004eaa <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005216:	d01d      	beq.n	8005254 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005218:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	f102 0308 	add.w	r3, r2, #8
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	3208      	adds	r2, #8
 8005228:	e842 3100 	strex	r1, r3, [r2]
 800522c:	2900      	cmp	r1, #0
 800522e:	d1f3      	bne.n	8005218 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005230:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005232:	b15b      	cbz	r3, 800524c <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005234:	4a66      	ldr	r2, [pc, #408]	; (80053d0 <HAL_UART_IRQHandler+0x328>)
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005238:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800523a:	f7fd fec9 	bl	8002fd0 <HAL_DMA_Abort_IT>
 800523e:	2800      	cmp	r0, #0
 8005240:	f43f af76 	beq.w	8005130 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005244:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005246:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005248:	4798      	blx	r3
 800524a:	e771      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff fef3 	bl	8005038 <HAL_UART_ErrorCallback>
 8005252:	e76d      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005254:	4620      	mov	r0, r4
 8005256:	f7ff feef 	bl	8005038 <HAL_UART_ErrorCallback>
 800525a:	e769      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800525c:	4620      	mov	r0, r4
 800525e:	f7ff feeb 	bl	8005038 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005262:	2300      	movs	r3, #0
 8005264:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005268:	e762      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800526a:	f013 0f10 	tst.w	r3, #16
 800526e:	f43f af39 	beq.w	80050e4 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005272:	f010 0f10 	tst.w	r0, #16
 8005276:	f43f af35 	beq.w	80050e4 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527a:	2310      	movs	r3, #16
 800527c:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005286:	d04f      	beq.n	8005328 <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005288:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800528a:	6813      	ldr	r3, [r2, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005290:	2b00      	cmp	r3, #0
 8005292:	f43f af4d 	beq.w	8005130 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005296:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800529a:	4299      	cmp	r1, r3
 800529c:	f67f af48 	bls.w	8005130 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80052a0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052a4:	6813      	ldr	r3, [r2, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f013 0f20 	tst.w	r3, #32
 80052ac:	d131      	bne.n	8005312 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	e852 3f00 	ldrex	r3, [r2]
 80052b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	e842 3100 	strex	r1, r3, [r2]
 80052bc:	2900      	cmp	r1, #0
 80052be:	d1f6      	bne.n	80052ae <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	f102 0308 	add.w	r3, r2, #8
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	3208      	adds	r2, #8
 80052d0:	e842 3100 	strex	r1, r3, [r2]
 80052d4:	2900      	cmp	r1, #0
 80052d6:	d1f3      	bne.n	80052c0 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	f102 0308 	add.w	r3, r2, #8
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	3208      	adds	r2, #8
 80052e8:	e842 3100 	strex	r1, r3, [r2]
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d1f3      	bne.n	80052d8 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80052f0:	2320      	movs	r3, #32
 80052f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	2300      	movs	r3, #0
 80052f8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	e852 3f00 	ldrex	r3, [r2]
 8005300:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	e842 3100 	strex	r1, r3, [r2]
 8005308:	2900      	cmp	r1, #0
 800530a:	d1f6      	bne.n	80052fa <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800530c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800530e:	f7fd fe25 	bl	8002f5c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005312:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005316:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800531a:	b29b      	uxth	r3, r3
 800531c:	1ac9      	subs	r1, r1, r3
 800531e:	b289      	uxth	r1, r1
 8005320:	4620      	mov	r0, r4
 8005322:	f7ff fec0 	bl	80050a6 <HAL_UARTEx_RxEventCallback>
      return;
 8005326:	e703      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005328:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800532c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005330:	b29b      	uxth	r3, r3
 8005332:	1ac9      	subs	r1, r1, r3
 8005334:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8005336:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	f43f aef7 	beq.w	8005130 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8005342:	2900      	cmp	r1, #0
 8005344:	f43f aef4 	beq.w	8005130 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005348:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	e852 3f00 	ldrex	r3, [r2]
 800534e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	e842 3000 	strex	r0, r3, [r2]
 8005356:	2800      	cmp	r0, #0
 8005358:	d1f6      	bne.n	8005348 <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800535a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	f102 0308 	add.w	r3, r2, #8
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	3208      	adds	r2, #8
 800536e:	e842 3000 	strex	r0, r3, [r2]
 8005372:	2800      	cmp	r0, #0
 8005374:	d1f1      	bne.n	800535a <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 8005376:	2320      	movs	r3, #32
 8005378:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	2300      	movs	r3, #0
 800537e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005380:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005382:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	e852 3f00 	ldrex	r3, [r2]
 8005388:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	e842 3000 	strex	r0, r3, [r2]
 8005390:	2800      	cmp	r0, #0
 8005392:	d1f6      	bne.n	8005382 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005394:	4620      	mov	r0, r4
 8005396:	f7ff fe86 	bl	80050a6 <HAL_UARTEx_RxEventCallback>
      return;
 800539a:	e6c9      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800539c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053a0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 fe14 	bl	8005fd0 <HAL_UARTEx_WakeupCallback>
    return;
 80053a8:	e6c2      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80053aa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f43f aebf 	beq.w	8005130 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80053b2:	4620      	mov	r0, r4
 80053b4:	4798      	blx	r3
    return;
 80053b6:	e6bb      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7ff fe25 	bl	8005008 <UART_EndTransmit_IT>
    return;
 80053be:	e6b7      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fe07 	bl	8005fd4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80053c6:	e6b3      	b.n	8005130 <HAL_UART_IRQHandler+0x88>
 80053c8:	10000001 	.word	0x10000001
 80053cc:	04000120 	.word	0x04000120
 80053d0:	08005093 	.word	0x08005093
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053d4:	4620      	mov	r0, r4
 80053d6:	f000 fdfc 	bl	8005fd2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80053da:	e6a9      	b.n	8005130 <HAL_UART_IRQHandler+0x88>

080053dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053dc:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80053de:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053e2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80053e6:	2a22      	cmp	r2, #34	; 0x22
 80053e8:	d005      	beq.n	80053f6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ea:	6802      	ldr	r2, [r0, #0]
 80053ec:	6993      	ldr	r3, [r2, #24]
 80053ee:	f043 0308 	orr.w	r3, r3, #8
 80053f2:	6193      	str	r3, [r2, #24]
  }
}
 80053f4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053f6:	6802      	ldr	r2, [r0, #0]
 80053f8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80053fe:	400b      	ands	r3, r1
 8005400:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005402:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005404:	3301      	adds	r3, #1
 8005406:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005408:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005416:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e9      	bne.n	80053f4 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005420:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	e852 3f00 	ldrex	r3, [r2]
 8005426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	e842 3100 	strex	r1, r3, [r2]
 800542e:	2900      	cmp	r1, #0
 8005430:	d1f6      	bne.n	8005420 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	f102 0308 	add.w	r3, r2, #8
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	3208      	adds	r2, #8
 8005442:	e842 3100 	strex	r1, r3, [r2]
 8005446:	2900      	cmp	r1, #0
 8005448:	d1f3      	bne.n	8005432 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800544a:	2320      	movs	r3, #32
 800544c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005454:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d116      	bne.n	8005488 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545a:	2300      	movs	r3, #0
 800545c:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	e852 3f00 	ldrex	r3, [r2]
 8005464:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	e842 3100 	strex	r1, r3, [r2]
 800546c:	2900      	cmp	r1, #0
 800546e:	d1f6      	bne.n	800545e <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005470:	6803      	ldr	r3, [r0, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	f012 0f10 	tst.w	r2, #16
 8005478:	d001      	beq.n	800547e <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800547a:	2210      	movs	r2, #16
 800547c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800547e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005482:	f7ff fe10 	bl	80050a6 <HAL_UARTEx_RxEventCallback>
 8005486:	e7b5      	b.n	80053f4 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005488:	f7fc face 	bl	8001a28 <HAL_UART_RxCpltCallback>
 800548c:	e7b2      	b.n	80053f4 <UART_RxISR_8BIT+0x18>

0800548e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800548e:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005490:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005494:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005498:	2b22      	cmp	r3, #34	; 0x22
 800549a:	d005      	beq.n	80054a8 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800549c:	6802      	ldr	r2, [r0, #0]
 800549e:	6993      	ldr	r3, [r2, #24]
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	6193      	str	r3, [r2, #24]
  }
}
 80054a6:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054a8:	6803      	ldr	r3, [r0, #0]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054ac:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80054ae:	4013      	ands	r3, r2
 80054b0:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80054b2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80054b4:	3302      	adds	r3, #2
 80054b6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80054b8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80054c6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ea      	bne.n	80054a6 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	e852 3f00 	ldrex	r3, [r2]
 80054d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	e842 3100 	strex	r1, r3, [r2]
 80054de:	2900      	cmp	r1, #0
 80054e0:	d1f6      	bne.n	80054d0 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	f102 0308 	add.w	r3, r2, #8
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	3208      	adds	r2, #8
 80054f2:	e842 3100 	strex	r1, r3, [r2]
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d1f3      	bne.n	80054e2 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80054fa:	2320      	movs	r3, #32
 80054fc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d116      	bne.n	8005538 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	2300      	movs	r3, #0
 800550c:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	e852 3f00 	ldrex	r3, [r2]
 8005514:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	e842 3100 	strex	r1, r3, [r2]
 800551c:	2900      	cmp	r1, #0
 800551e:	d1f6      	bne.n	800550e <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005520:	6803      	ldr	r3, [r0, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	f012 0f10 	tst.w	r2, #16
 8005528:	d001      	beq.n	800552e <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800552a:	2210      	movs	r2, #16
 800552c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800552e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005532:	f7ff fdb8 	bl	80050a6 <HAL_UARTEx_RxEventCallback>
 8005536:	e7b6      	b.n	80054a6 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005538:	f7fc fa76 	bl	8001a28 <HAL_UART_RxCpltCallback>
 800553c:	e7b3      	b.n	80054a6 <UART_RxISR_16BIT+0x18>
	...

08005540 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8005544:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005548:	6803      	ldr	r3, [r0, #0]
 800554a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800554c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005550:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005554:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005558:	2a22      	cmp	r2, #34	; 0x22
 800555a:	d005      	beq.n	8005568 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	619a      	str	r2, [r3, #24]
  }
}
 8005564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005568:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800556a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800556e:	e008      	b.n	8005582 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005570:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d14c      	bne.n	8005612 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005578:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d04e      	beq.n	8005620 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005582:	2f00      	cmp	r7, #0
 8005584:	f000 8087 	beq.w	8005696 <UART_RxISR_8BIT_FIFOEN+0x156>
 8005588:	f015 0f20 	tst.w	r5, #32
 800558c:	f000 8083 	beq.w	8005696 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005594:	b2f3      	uxtb	r3, r6
 8005596:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005598:	400b      	ands	r3, r1
 800559a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800559c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800559e:	3301      	adds	r3, #1
 80055a0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80055a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055b4:	f015 0f07 	tst.w	r5, #7
 80055b8:	d0de      	beq.n	8005578 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055ba:	f015 0f01 	tst.w	r5, #1
 80055be:	d009      	beq.n	80055d4 <UART_RxISR_8BIT_FIFOEN+0x94>
 80055c0:	f419 7f80 	tst.w	r9, #256	; 0x100
 80055c4:	d006      	beq.n	80055d4 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c6:	2201      	movs	r2, #1
 80055c8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d4:	f015 0f02 	tst.w	r5, #2
 80055d8:	d00b      	beq.n	80055f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80055da:	f018 0f01 	tst.w	r8, #1
 80055de:	d008      	beq.n	80055f2 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	2202      	movs	r2, #2
 80055e4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055f2:	f015 0f04 	tst.w	r5, #4
 80055f6:	d0bb      	beq.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x30>
 80055f8:	f018 0f01 	tst.w	r8, #1
 80055fc:	d0b8      	beq.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	2204      	movs	r2, #4
 8005602:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005604:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005608:	f043 0302 	orr.w	r3, r3, #2
 800560c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005610:	e7ae      	b.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff fd10 	bl	8005038 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	2300      	movs	r3, #0
 800561a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800561e:	e7ab      	b.n	8005578 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005620:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	e852 3f00 	ldrex	r3, [r2]
 8005626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	e842 3100 	strex	r1, r3, [r2]
 800562e:	2900      	cmp	r1, #0
 8005630:	d1f6      	bne.n	8005620 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005632:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	f102 0308 	add.w	r3, r2, #8
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005640:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	3208      	adds	r2, #8
 8005646:	e842 3100 	strex	r1, r3, [r2]
 800564a:	2900      	cmp	r1, #0
 800564c:	d1f1      	bne.n	8005632 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800564e:	2320      	movs	r3, #32
 8005650:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d003      	beq.n	8005666 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 800565e:	4620      	mov	r0, r4
 8005660:	f7fc f9e2 	bl	8001a28 <HAL_UART_RxCpltCallback>
 8005664:	e78d      	b.n	8005582 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	2300      	movs	r3, #0
 8005668:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	e852 3f00 	ldrex	r3, [r2]
 8005670:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	e842 3100 	strex	r1, r3, [r2]
 8005678:	2900      	cmp	r1, #0
 800567a:	d1f6      	bne.n	800566a <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	f012 0f10 	tst.w	r2, #16
 8005684:	d001      	beq.n	800568a <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005686:	2210      	movs	r2, #16
 8005688:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800568a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800568e:	4620      	mov	r0, r4
 8005690:	f7ff fd09 	bl	80050a6 <HAL_UARTEx_RxEventCallback>
 8005694:	e775      	b.n	8005582 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005696:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800569a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800569c:	2b00      	cmp	r3, #0
 800569e:	f43f af61 	beq.w	8005564 <UART_RxISR_8BIT_FIFOEN+0x24>
 80056a2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80056a6:	429a      	cmp	r2, r3
 80056a8:	f67f af5c 	bls.w	8005564 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	f102 0308 	add.w	r3, r2, #8
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	3208      	adds	r2, #8
 80056bc:	e842 3100 	strex	r1, r3, [r2]
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d1f3      	bne.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80056c6:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	e852 3f00 	ldrex	r3, [r2]
 80056ce:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	e842 3100 	strex	r1, r3, [r2]
 80056d6:	2900      	cmp	r1, #0
 80056d8:	d1f6      	bne.n	80056c8 <UART_RxISR_8BIT_FIFOEN+0x188>
 80056da:	e743      	b.n	8005564 <UART_RxISR_8BIT_FIFOEN+0x24>
 80056dc:	080053dd 	.word	0x080053dd

080056e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80056e4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056e8:	6803      	ldr	r3, [r0, #0]
 80056ea:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056ec:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056f0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80056f8:	2a22      	cmp	r2, #34	; 0x22
 80056fa:	d005      	beq.n	8005708 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	f042 0208 	orr.w	r2, r2, #8
 8005702:	619a      	str	r2, [r3, #24]
  }
}
 8005704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005708:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800570a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800570e:	e008      	b.n	8005722 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005710:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d14b      	bne.n	80057b0 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8005718:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d04d      	beq.n	80057be <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005722:	2f00      	cmp	r7, #0
 8005724:	f000 8086 	beq.w	8005834 <UART_RxISR_16BIT_FIFOEN+0x154>
 8005728:	f015 0f20 	tst.w	r5, #32
 800572c:	f000 8082 	beq.w	8005834 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005734:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8005736:	4033      	ands	r3, r6
 8005738:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800573a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800573c:	3302      	adds	r3, #2
 800573e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005740:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005752:	f015 0f07 	tst.w	r5, #7
 8005756:	d0df      	beq.n	8005718 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005758:	f015 0f01 	tst.w	r5, #1
 800575c:	d009      	beq.n	8005772 <UART_RxISR_16BIT_FIFOEN+0x92>
 800575e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005762:	d006      	beq.n	8005772 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005764:	2201      	movs	r2, #1
 8005766:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005768:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005772:	f015 0f02 	tst.w	r5, #2
 8005776:	d00b      	beq.n	8005790 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8005778:	f018 0f01 	tst.w	r8, #1
 800577c:	d008      	beq.n	8005790 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	2202      	movs	r2, #2
 8005782:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005784:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005790:	f015 0f04 	tst.w	r5, #4
 8005794:	d0bc      	beq.n	8005710 <UART_RxISR_16BIT_FIFOEN+0x30>
 8005796:	f018 0f01 	tst.w	r8, #1
 800579a:	d0b9      	beq.n	8005710 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	2204      	movs	r2, #4
 80057a0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80057a6:	f043 0302 	orr.w	r3, r3, #2
 80057aa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80057ae:	e7af      	b.n	8005710 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff fc41 	bl	8005038 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80057bc:	e7ac      	b.n	8005718 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	e852 3f00 	ldrex	r3, [r2]
 80057c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	e842 3100 	strex	r1, r3, [r2]
 80057cc:	2900      	cmp	r1, #0
 80057ce:	d1f6      	bne.n	80057be <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	f102 0308 	add.w	r3, r2, #8
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	3208      	adds	r2, #8
 80057e4:	e842 3100 	strex	r1, r3, [r2]
 80057e8:	2900      	cmp	r1, #0
 80057ea:	d1f1      	bne.n	80057d0 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80057ec:	2320      	movs	r3, #32
 80057ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d003      	beq.n	8005804 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80057fc:	4620      	mov	r0, r4
 80057fe:	f7fc f913 	bl	8001a28 <HAL_UART_RxCpltCallback>
 8005802:	e78e      	b.n	8005722 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005804:	2300      	movs	r3, #0
 8005806:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005808:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	e852 3f00 	ldrex	r3, [r2]
 800580e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	e842 3100 	strex	r1, r3, [r2]
 8005816:	2900      	cmp	r1, #0
 8005818:	d1f6      	bne.n	8005808 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	f012 0f10 	tst.w	r2, #16
 8005822:	d001      	beq.n	8005828 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005824:	2210      	movs	r2, #16
 8005826:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005828:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff fc3a 	bl	80050a6 <HAL_UARTEx_RxEventCallback>
 8005832:	e776      	b.n	8005722 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005834:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005838:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800583a:	2b00      	cmp	r3, #0
 800583c:	f43f af62 	beq.w	8005704 <UART_RxISR_16BIT_FIFOEN+0x24>
 8005840:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005844:	429a      	cmp	r2, r3
 8005846:	f67f af5d 	bls.w	8005704 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800584a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f102 0308 	add.w	r3, r2, #8
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	3208      	adds	r2, #8
 800585a:	e842 3100 	strex	r1, r3, [r2]
 800585e:	2900      	cmp	r1, #0
 8005860:	d1f3      	bne.n	800584a <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8005864:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005866:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	e852 3f00 	ldrex	r3, [r2]
 800586c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	e842 3100 	strex	r1, r3, [r2]
 8005874:	2900      	cmp	r1, #0
 8005876:	d1f6      	bne.n	8005866 <UART_RxISR_16BIT_FIFOEN+0x186>
 8005878:	e744      	b.n	8005704 <UART_RxISR_16BIT_FIFOEN+0x24>
 800587a:	bf00      	nop
 800587c:	0800548f 	.word	0x0800548f

08005880 <UART_SetConfig>:
{
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005886:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005888:	6883      	ldr	r3, [r0, #8]
 800588a:	6902      	ldr	r2, [r0, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	6942      	ldr	r2, [r0, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	69c2      	ldr	r2, [r0, #28]
 8005894:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005896:	6808      	ldr	r0, [r1, #0]
 8005898:	4aa1      	ldr	r2, [pc, #644]	; (8005b20 <UART_SetConfig+0x2a0>)
 800589a:	4002      	ands	r2, r0
 800589c:	4313      	orrs	r3, r2
 800589e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	6853      	ldr	r3, [r2, #4]
 80058a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058a8:	68e1      	ldr	r1, [r4, #12]
 80058aa:	430b      	orrs	r3, r1
 80058ac:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ae:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	4b9c      	ldr	r3, [pc, #624]	; (8005b24 <UART_SetConfig+0x2a4>)
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 80058b8:	6a23      	ldr	r3, [r4, #32]
 80058ba:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058bc:	6893      	ldr	r3, [r2, #8]
 80058be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80058c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058c6:	430b      	orrs	r3, r1
 80058c8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058ce:	f023 030f 	bic.w	r3, r3, #15
 80058d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058d4:	430b      	orrs	r3, r1
 80058d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	4b93      	ldr	r3, [pc, #588]	; (8005b28 <UART_SetConfig+0x2a8>)
 80058dc:	429a      	cmp	r2, r3
 80058de:	d01c      	beq.n	800591a <UART_SetConfig+0x9a>
 80058e0:	4b92      	ldr	r3, [pc, #584]	; (8005b2c <UART_SetConfig+0x2ac>)
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d031      	beq.n	800594a <UART_SetConfig+0xca>
 80058e6:	4b8f      	ldr	r3, [pc, #572]	; (8005b24 <UART_SetConfig+0x2a4>)
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d04b      	beq.n	8005984 <UART_SetConfig+0x104>
 80058ec:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ee:	498d      	ldr	r1, [pc, #564]	; (8005b24 <UART_SetConfig+0x2a4>)
 80058f0:	428a      	cmp	r2, r1
 80058f2:	d068      	beq.n	80059c6 <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f4:	69e0      	ldr	r0, [r4, #28]
 80058f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80058fa:	f000 80a7 	beq.w	8005a4c <UART_SetConfig+0x1cc>
    switch (clocksource)
 80058fe:	2b08      	cmp	r3, #8
 8005900:	f200 8122 	bhi.w	8005b48 <UART_SetConfig+0x2c8>
 8005904:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005908:	00f800d5 	.word	0x00f800d5
 800590c:	012000d3 	.word	0x012000d3
 8005910:	012000fb 	.word	0x012000fb
 8005914:	01200120 	.word	0x01200120
 8005918:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800591a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800592a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800592e:	2b03      	cmp	r3, #3
 8005930:	d809      	bhi.n	8005946 <UART_SetConfig+0xc6>
 8005932:	e8df f003 	tbb	[pc, r3]
 8005936:	0402      	.short	0x0402
 8005938:	063c      	.short	0x063c
 800593a:	2301      	movs	r3, #1
 800593c:	e7d7      	b.n	80058ee <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800593e:	2304      	movs	r3, #4
 8005940:	e7d5      	b.n	80058ee <UART_SetConfig+0x6e>
 8005942:	2308      	movs	r3, #8
 8005944:	e7d3      	b.n	80058ee <UART_SetConfig+0x6e>
 8005946:	2310      	movs	r3, #16
 8005948:	e7d1      	b.n	80058ee <UART_SetConfig+0x6e>
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800595a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d80e      	bhi.n	8005980 <UART_SetConfig+0x100>
 8005962:	e8df f003 	tbb	[pc, r3]
 8005966:	0d07      	.short	0x0d07
 8005968:	0d090d0d 	.word	0x0d090d0d
 800596c:	0d260d0d 	.word	0x0d260d0d
 8005970:	0d0d      	.short	0x0d0d
 8005972:	0b          	.byte	0x0b
 8005973:	00          	.byte	0x00
 8005974:	2300      	movs	r3, #0
 8005976:	e7ba      	b.n	80058ee <UART_SetConfig+0x6e>
 8005978:	2304      	movs	r3, #4
 800597a:	e7b8      	b.n	80058ee <UART_SetConfig+0x6e>
 800597c:	2308      	movs	r3, #8
 800597e:	e7b6      	b.n	80058ee <UART_SetConfig+0x6e>
 8005980:	2310      	movs	r3, #16
 8005982:	e7b4      	b.n	80058ee <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d00f      	beq.n	80059b6 <UART_SetConfig+0x136>
 8005996:	d805      	bhi.n	80059a4 <UART_SetConfig+0x124>
 8005998:	b17b      	cbz	r3, 80059ba <UART_SetConfig+0x13a>
 800599a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599e:	d10e      	bne.n	80059be <UART_SetConfig+0x13e>
 80059a0:	2304      	movs	r3, #4
 80059a2:	e7a4      	b.n	80058ee <UART_SetConfig+0x6e>
 80059a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059a8:	d10b      	bne.n	80059c2 <UART_SetConfig+0x142>
 80059aa:	2308      	movs	r3, #8
 80059ac:	e79f      	b.n	80058ee <UART_SetConfig+0x6e>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e79d      	b.n	80058ee <UART_SetConfig+0x6e>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e79b      	b.n	80058ee <UART_SetConfig+0x6e>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e799      	b.n	80058ee <UART_SetConfig+0x6e>
 80059ba:	2300      	movs	r3, #0
 80059bc:	e797      	b.n	80058ee <UART_SetConfig+0x6e>
 80059be:	2310      	movs	r3, #16
 80059c0:	e795      	b.n	80058ee <UART_SetConfig+0x6e>
 80059c2:	2310      	movs	r3, #16
 80059c4:	e793      	b.n	80058ee <UART_SetConfig+0x6e>
    switch (clocksource)
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	f200 809f 	bhi.w	8005b0a <UART_SetConfig+0x28a>
 80059cc:	e8df f003 	tbb	[pc, r3]
 80059d0:	9d3c9d08 	.word	0x9d3c9d08
 80059d4:	9d9d9d39 	.word	0x9d9d9d39
 80059d8:	05          	.byte	0x05
 80059d9:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 80059da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80059de:	e004      	b.n	80059ea <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fe fb14 	bl	800400c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f000 8092 	beq.w	8005b0e <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059ec:	4b50      	ldr	r3, [pc, #320]	; (8005b30 <UART_SetConfig+0x2b0>)
 80059ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80059f2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f6:	6865      	ldr	r5, [r4, #4]
 80059f8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80059fc:	4299      	cmp	r1, r3
 80059fe:	f200 8088 	bhi.w	8005b12 <UART_SetConfig+0x292>
 8005a02:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005a06:	f200 8086 	bhi.w	8005b16 <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	b292      	uxth	r2, r2
 8005a10:	2300      	movs	r3, #0
 8005a12:	4641      	mov	r1, r8
 8005a14:	f7fb f8a2 	bl	8000b5c <__aeabi_uldivmod>
 8005a18:	020f      	lsls	r7, r1, #8
 8005a1a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005a1e:	0206      	lsls	r6, r0, #8
 8005a20:	0868      	lsrs	r0, r5, #1
 8005a22:	462a      	mov	r2, r5
 8005a24:	4643      	mov	r3, r8
 8005a26:	1830      	adds	r0, r6, r0
 8005a28:	f147 0100 	adc.w	r1, r7, #0
 8005a2c:	f7fb f896 	bl	8000b5c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a30:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005a34:	4b3f      	ldr	r3, [pc, #252]	; (8005b34 <UART_SetConfig+0x2b4>)
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d86f      	bhi.n	8005b1a <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	60d8      	str	r0, [r3, #12]
 8005a3e:	4640      	mov	r0, r8
 8005a40:	e050      	b.n	8005ae4 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a42:	f7fd fddb 	bl	80035fc <HAL_RCC_GetSysClockFreq>
        break;
 8005a46:	e7cd      	b.n	80059e4 <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 8005a48:	483b      	ldr	r0, [pc, #236]	; (8005b38 <UART_SetConfig+0x2b8>)
 8005a4a:	e7ce      	b.n	80059ea <UART_SetConfig+0x16a>
    switch (clocksource)
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d875      	bhi.n	8005b3c <UART_SetConfig+0x2bc>
 8005a50:	e8df f003 	tbb	[pc, r3]
 8005a54:	74052707 	.word	0x74052707
 8005a58:	7474742a 	.word	0x7474742a
 8005a5c:	0b          	.byte	0x0b
 8005a5d:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a5e:	4836      	ldr	r0, [pc, #216]	; (8005b38 <UART_SetConfig+0x2b8>)
 8005a60:	e003      	b.n	8005a6a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a62:	f7fe fad3 	bl	800400c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d06a      	beq.n	8005b40 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a6c:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <UART_SetConfig+0x2b0>)
 8005a6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005a72:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a76:	6862      	ldr	r2, [r4, #4]
 8005a78:	0853      	lsrs	r3, r2, #1
 8005a7a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005a7e:	fbb0 f0f2 	udiv	r0, r0, r2
 8005a82:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a84:	f1a0 0210 	sub.w	r2, r0, #16
 8005a88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d859      	bhi.n	8005b44 <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a90:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a94:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005a98:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	60d8      	str	r0, [r3, #12]
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	e020      	b.n	8005ae4 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa2:	f7fe fac3 	bl	800402c <HAL_RCC_GetPCLK2Freq>
        break;
 8005aa6:	e7de      	b.n	8005a66 <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa8:	f7fd fda8 	bl	80035fc <HAL_RCC_GetSysClockFreq>
        break;
 8005aac:	e7db      	b.n	8005a66 <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aae:	4822      	ldr	r0, [pc, #136]	; (8005b38 <UART_SetConfig+0x2b8>)
 8005ab0:	e003      	b.n	8005aba <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab2:	f7fe faab 	bl	800400c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d048      	beq.n	8005b4c <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005abc:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <UART_SetConfig+0x2b0>)
 8005abe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005ac2:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ac6:	6863      	ldr	r3, [r4, #4]
 8005ac8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005acc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ad0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad2:	f1a0 0210 	sub.w	r2, r0, #16
 8005ad6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d838      	bhi.n	8005b50 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	60d8      	str	r0, [r3, #12]
 8005ae2:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005aea:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005af2:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7fe fa98 	bl	800402c <HAL_RCC_GetPCLK2Freq>
        break;
 8005afc:	e7db      	b.n	8005ab6 <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fd fd7d 	bl	80035fc <HAL_RCC_GetSysClockFreq>
        break;
 8005b02:	e7d8      	b.n	8005ab6 <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 8005b04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005b08:	e7d7      	b.n	8005aba <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	e7ea      	b.n	8005ae4 <UART_SetConfig+0x264>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	e7e8      	b.n	8005ae4 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005b12:	2001      	movs	r0, #1
 8005b14:	e7e6      	b.n	8005ae4 <UART_SetConfig+0x264>
 8005b16:	2001      	movs	r0, #1
 8005b18:	e7e4      	b.n	8005ae4 <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	e7e2      	b.n	8005ae4 <UART_SetConfig+0x264>
 8005b1e:	bf00      	nop
 8005b20:	cfff69f3 	.word	0xcfff69f3
 8005b24:	40008000 	.word	0x40008000
 8005b28:	40013800 	.word	0x40013800
 8005b2c:	40004400 	.word	0x40004400
 8005b30:	08011640 	.word	0x08011640
 8005b34:	000ffcff 	.word	0x000ffcff
 8005b38:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	e7d1      	b.n	8005ae4 <UART_SetConfig+0x264>
 8005b40:	2000      	movs	r0, #0
 8005b42:	e7cf      	b.n	8005ae4 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005b44:	2001      	movs	r0, #1
 8005b46:	e7cd      	b.n	8005ae4 <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b48:	2001      	movs	r0, #1
 8005b4a:	e7cb      	b.n	8005ae4 <UART_SetConfig+0x264>
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e7c9      	b.n	8005ae4 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005b50:	2001      	movs	r0, #1
 8005b52:	e7c7      	b.n	8005ae4 <UART_SetConfig+0x264>

08005b54 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b56:	f013 0f01 	tst.w	r3, #1
 8005b5a:	d006      	beq.n	8005b6a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5c:	6802      	ldr	r2, [r0, #0]
 8005b5e:	6853      	ldr	r3, [r2, #4]
 8005b60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b64:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b6c:	f013 0f02 	tst.w	r3, #2
 8005b70:	d006      	beq.n	8005b80 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b72:	6802      	ldr	r2, [r0, #0]
 8005b74:	6853      	ldr	r3, [r2, #4]
 8005b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b82:	f013 0f04 	tst.w	r3, #4
 8005b86:	d006      	beq.n	8005b96 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b88:	6802      	ldr	r2, [r0, #0]
 8005b8a:	6853      	ldr	r3, [r2, #4]
 8005b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b90:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005b92:	430b      	orrs	r3, r1
 8005b94:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b98:	f013 0f08 	tst.w	r3, #8
 8005b9c:	d006      	beq.n	8005bac <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b9e:	6802      	ldr	r2, [r0, #0]
 8005ba0:	6853      	ldr	r3, [r2, #4]
 8005ba2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005bae:	f013 0f10 	tst.w	r3, #16
 8005bb2:	d006      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bb4:	6802      	ldr	r2, [r0, #0]
 8005bb6:	6893      	ldr	r3, [r2, #8]
 8005bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bbc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005bc4:	f013 0f20 	tst.w	r3, #32
 8005bc8:	d006      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bca:	6802      	ldr	r2, [r0, #0]
 8005bcc:	6893      	ldr	r3, [r2, #8]
 8005bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bd2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005bda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bde:	d00a      	beq.n	8005bf6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005be0:	6802      	ldr	r2, [r0, #0]
 8005be2:	6853      	ldr	r3, [r2, #4]
 8005be4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005be8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005bea:	430b      	orrs	r3, r1
 8005bec:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf4:	d00b      	beq.n	8005c0e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005bf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bfc:	d006      	beq.n	8005c0c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bfe:	6802      	ldr	r2, [r0, #0]
 8005c00:	6853      	ldr	r3, [r2, #4]
 8005c02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005c06:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6053      	str	r3, [r2, #4]
}
 8005c0c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c0e:	6802      	ldr	r2, [r0, #0]
 8005c10:	6853      	ldr	r3, [r2, #4]
 8005c12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c16:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6053      	str	r3, [r2, #4]
 8005c1c:	e7eb      	b.n	8005bf6 <UART_AdvFeatureConfig+0xa2>

08005c1e <UART_WaitOnFlagUntilTimeout>:
{
 8005c1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c22:	4605      	mov	r5, r0
 8005c24:	460f      	mov	r7, r1
 8005c26:	4616      	mov	r6, r2
 8005c28:	4699      	mov	r9, r3
 8005c2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2e:	682c      	ldr	r4, [r5, #0]
 8005c30:	69e4      	ldr	r4, [r4, #28]
 8005c32:	ea37 0304 	bics.w	r3, r7, r4
 8005c36:	bf0c      	ite	eq
 8005c38:	2401      	moveq	r4, #1
 8005c3a:	2400      	movne	r4, #0
 8005c3c:	42b4      	cmp	r4, r6
 8005c3e:	d157      	bne.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8005c40:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005c44:	d0f3      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c46:	f7fb fc51 	bl	80014ec <HAL_GetTick>
 8005c4a:	eba0 0009 	sub.w	r0, r0, r9
 8005c4e:	4540      	cmp	r0, r8
 8005c50:	d82f      	bhi.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x94>
 8005c52:	f1b8 0f00 	cmp.w	r8, #0
 8005c56:	d02c      	beq.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	f012 0f04 	tst.w	r2, #4
 8005c60:	d0e5      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005c68:	d0e1      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c6e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c70:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	e852 3f00 	ldrex	r3, [r2]
 8005c76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	e842 3100 	strex	r1, r3, [r2]
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	d1f6      	bne.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	f102 0308 	add.w	r3, r2, #8
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	3208      	adds	r2, #8
 8005c92:	e842 3100 	strex	r1, r3, [r2]
 8005c96:	2900      	cmp	r1, #0
 8005c98:	d1f3      	bne.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005cae:	2003      	movs	r0, #3
 8005cb0:	e01f      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cb2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	e852 3f00 	ldrex	r3, [r2]
 8005cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	e842 3100 	strex	r1, r3, [r2]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d1f6      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	f102 0308 	add.w	r3, r2, #8
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	3208      	adds	r2, #8
 8005cd4:	e842 3100 	strex	r1, r3, [r2]
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d1f3      	bne.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005cec:	2003      	movs	r0, #3
 8005cee:	e000      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005cf0:	2000      	movs	r0, #0
}
 8005cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005cf6 <UART_CheckIdleState>:
{
 8005cf6:	b530      	push	{r4, r5, lr}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005d02:	f7fb fbf3 	bl	80014ec <HAL_GetTick>
 8005d06:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f013 0f08 	tst.w	r3, #8
 8005d10:	d10f      	bne.n	8005d32 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f013 0f04 	tst.w	r3, #4
 8005d1a:	d118      	bne.n	8005d4e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d22:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	2000      	movs	r0, #0
 8005d28:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005d2a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005d2e:	b003      	add	sp, #12
 8005d30:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7ff ff6c 	bl	8005c1e <UART_WaitOnFlagUntilTimeout>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d0e3      	beq.n	8005d12 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005d4a:	2003      	movs	r0, #3
 8005d4c:	e7ef      	b.n	8005d2e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	462b      	mov	r3, r5
 8005d56:	2200      	movs	r2, #0
 8005d58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f7ff ff5e 	bl	8005c1e <UART_WaitOnFlagUntilTimeout>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d0da      	beq.n	8005d1c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005d66:	2003      	movs	r0, #3
 8005d68:	e7e1      	b.n	8005d2e <UART_CheckIdleState+0x38>

08005d6a <HAL_UART_Init>:
  if (huart == NULL)
 8005d6a:	b378      	cbz	r0, 8005dcc <HAL_UART_Init+0x62>
{
 8005d6c:	b510      	push	{r4, lr}
 8005d6e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005d70:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005d74:	b30b      	cbz	r3, 8005dba <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005d76:	2324      	movs	r3, #36	; 0x24
 8005d78:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d86:	4620      	mov	r0, r4
 8005d88:	f7ff fd7a 	bl	8005880 <UART_SetConfig>
 8005d8c:	2801      	cmp	r0, #1
 8005d8e:	d013      	beq.n	8005db8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d92:	b9bb      	cbnz	r3, 8005dc4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	6853      	ldr	r3, [r2, #4]
 8005d98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005d9c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	6893      	ldr	r3, [r2, #8]
 8005da2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005da6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005da8:	6822      	ldr	r2, [r4, #0]
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff ff9f 	bl	8005cf6 <UART_CheckIdleState>
}
 8005db8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005dba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005dbe:	f7fb fd27 	bl	8001810 <HAL_UART_MspInit>
 8005dc2:	e7d8      	b.n	8005d76 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f7ff fec5 	bl	8005b54 <UART_AdvFeatureConfig>
 8005dca:	e7e3      	b.n	8005d94 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005dcc:	2001      	movs	r0, #1
}
 8005dce:	4770      	bx	lr

08005dd0 <UART_Start_Receive_IT>:
{
 8005dd0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8005dd2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005dd4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005dd8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8005de0:	6883      	ldr	r3, [r0, #8]
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de6:	d006      	beq.n	8005df6 <UART_Start_Receive_IT+0x26>
 8005de8:	b9a3      	cbnz	r3, 8005e14 <UART_Start_Receive_IT+0x44>
 8005dea:	6903      	ldr	r3, [r0, #16]
 8005dec:	b973      	cbnz	r3, 8005e0c <UART_Start_Receive_IT+0x3c>
 8005dee:	23ff      	movs	r3, #255	; 0xff
 8005df0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005df4:	e014      	b.n	8005e20 <UART_Start_Receive_IT+0x50>
 8005df6:	6903      	ldr	r3, [r0, #16]
 8005df8:	b923      	cbnz	r3, 8005e04 <UART_Start_Receive_IT+0x34>
 8005dfa:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005dfe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005e02:	e00d      	b.n	8005e20 <UART_Start_Receive_IT+0x50>
 8005e04:	23ff      	movs	r3, #255	; 0xff
 8005e06:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005e0a:	e009      	b.n	8005e20 <UART_Start_Receive_IT+0x50>
 8005e0c:	237f      	movs	r3, #127	; 0x7f
 8005e0e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005e12:	e005      	b.n	8005e20 <UART_Start_Receive_IT+0x50>
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e18:	d02d      	beq.n	8005e76 <UART_Start_Receive_IT+0xa6>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e26:	2322      	movs	r3, #34	; 0x22
 8005e28:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	f101 0308 	add.w	r3, r1, #8
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	3108      	adds	r1, #8
 8005e3c:	e841 3400 	strex	r4, r3, [r1]
 8005e40:	2c00      	cmp	r4, #0
 8005e42:	d1f3      	bne.n	8005e2c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e44:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e4a:	d01e      	beq.n	8005e8a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4c:	6883      	ldr	r3, [r0, #8]
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d043      	beq.n	8005edc <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8005e54:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <UART_Start_Receive_IT+0x118>)
 8005e56:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005e5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	e852 3f00 	ldrex	r3, [r2]
 8005e64:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	e842 3100 	strex	r1, r3, [r2]
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d1f6      	bne.n	8005e5e <UART_Start_Receive_IT+0x8e>
}
 8005e70:	2000      	movs	r0, #0
 8005e72:	bc10      	pop	{r4}
 8005e74:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8005e76:	6903      	ldr	r3, [r0, #16]
 8005e78:	b91b      	cbnz	r3, 8005e82 <UART_Start_Receive_IT+0xb2>
 8005e7a:	237f      	movs	r3, #127	; 0x7f
 8005e7c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005e80:	e7ce      	b.n	8005e20 <UART_Start_Receive_IT+0x50>
 8005e82:	233f      	movs	r3, #63	; 0x3f
 8005e84:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005e88:	e7ca      	b.n	8005e20 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e8a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d8dc      	bhi.n	8005e4c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e92:	6883      	ldr	r3, [r0, #8]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	d01a      	beq.n	8005ed0 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e9a:	4b14      	ldr	r3, [pc, #80]	; (8005eec <UART_Start_Receive_IT+0x11c>)
 8005e9c:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ea4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	e852 3f00 	ldrex	r3, [r2]
 8005eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	e842 3100 	strex	r1, r3, [r2]
 8005eb2:	2900      	cmp	r1, #0
 8005eb4:	d1f6      	bne.n	8005ea4 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005eb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	f102 0308 	add.w	r3, r2, #8
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	3208      	adds	r2, #8
 8005ec6:	e842 3100 	strex	r1, r3, [r2]
 8005eca:	2900      	cmp	r1, #0
 8005ecc:	d1f3      	bne.n	8005eb6 <UART_Start_Receive_IT+0xe6>
 8005ece:	e7cf      	b.n	8005e70 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	6903      	ldr	r3, [r0, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e1      	bne.n	8005e9a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005ed6:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <UART_Start_Receive_IT+0x120>)
 8005ed8:	6703      	str	r3, [r0, #112]	; 0x70
 8005eda:	e7e0      	b.n	8005e9e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005edc:	6903      	ldr	r3, [r0, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1b8      	bne.n	8005e54 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8005ee2:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <UART_Start_Receive_IT+0x124>)
 8005ee4:	6703      	str	r3, [r0, #112]	; 0x70
 8005ee6:	e7b7      	b.n	8005e58 <UART_Start_Receive_IT+0x88>
 8005ee8:	080053dd 	.word	0x080053dd
 8005eec:	08005541 	.word	0x08005541
 8005ef0:	080056e1 	.word	0x080056e1
 8005ef4:	0800548f 	.word	0x0800548f

08005ef8 <HAL_UART_Receive_IT>:
{
 8005ef8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005efa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d11e      	bne.n	8005f40 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005f02:	b1f9      	cbz	r1, 8005f44 <HAL_UART_Receive_IT+0x4c>
 8005f04:	b302      	cbz	r2, 8005f48 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8005f06:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d01e      	beq.n	8005f4c <HAL_UART_Receive_IT+0x54>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	2300      	movs	r3, #0
 8005f16:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f18:	6803      	ldr	r3, [r0, #0]
 8005f1a:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <HAL_UART_Receive_IT+0x58>)
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d00c      	beq.n	8005f3a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005f26:	d008      	beq.n	8005f3a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f28:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	e854 3f00 	ldrex	r3, [r4]
 8005f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	e844 3500 	strex	r5, r3, [r4]
 8005f36:	2d00      	cmp	r5, #0
 8005f38:	d1f6      	bne.n	8005f28 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8005f3a:	f7ff ff49 	bl	8005dd0 <UART_Start_Receive_IT>
 8005f3e:	e000      	b.n	8005f42 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8005f40:	2002      	movs	r0, #2
}
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005f44:	2001      	movs	r0, #1
 8005f46:	e7fc      	b.n	8005f42 <HAL_UART_Receive_IT+0x4a>
 8005f48:	2001      	movs	r0, #1
 8005f4a:	e7fa      	b.n	8005f42 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8005f4c:	2002      	movs	r0, #2
 8005f4e:	e7f8      	b.n	8005f42 <HAL_UART_Receive_IT+0x4a>
 8005f50:	40008000 	.word	0x40008000

08005f54 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005f54:	b082      	sub	sp, #8
 8005f56:	ab02      	add	r3, sp, #8
 8005f58:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005f5c:	6802      	ldr	r2, [r0, #0]
 8005f5e:	6853      	ldr	r3, [r2, #4]
 8005f60:	f023 0310 	bic.w	r3, r3, #16
 8005f64:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005f6c:	6802      	ldr	r2, [r0, #0]
 8005f6e:	6853      	ldr	r3, [r2, #4]
 8005f70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f74:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005f78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f7c:	6053      	str	r3, [r2, #4]
}
 8005f7e:	b002      	add	sp, #8
 8005f80:	4770      	bx	lr
	...

08005f84 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f84:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005f86:	b92b      	cbnz	r3, 8005f94 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f8e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005f92:	4770      	bx	lr
{
 8005f94:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f96:	6803      	ldr	r3, [r0, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f9e:	6899      	ldr	r1, [r3, #8]
 8005fa0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa2:	4d09      	ldr	r5, [pc, #36]	; (8005fc8 <UARTEx_SetNbDataToProcess+0x44>)
 8005fa4:	5c6b      	ldrb	r3, [r5, r1]
 8005fa6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fa8:	4c08      	ldr	r4, [pc, #32]	; (8005fcc <UARTEx_SetNbDataToProcess+0x48>)
 8005faa:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fac:	fb93 f3f1 	sdiv	r3, r3, r1
 8005fb0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fb4:	5cab      	ldrb	r3, [r5, r2]
 8005fb6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fb8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fbe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005fc2:	bc30      	pop	{r4, r5}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	08011660 	.word	0x08011660
 8005fcc:	08011658 	.word	0x08011658

08005fd0 <HAL_UARTEx_WakeupCallback>:
}
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	ab04      	add	r3, sp, #16
 8005fdc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8005fe0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d035      	beq.n	8006054 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	2301      	movs	r3, #1
 8005fec:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	2324      	movs	r3, #36	; 0x24
 8005ff2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005ff6:	6802      	ldr	r2, [r0, #0]
 8005ff8:	6813      	ldr	r3, [r2, #0]
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006000:	6801      	ldr	r1, [r0, #0]
 8006002:	688b      	ldr	r3, [r1, #8]
 8006004:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006008:	9a02      	ldr	r2, [sp, #8]
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800600e:	b1aa      	cbz	r2, 800603c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	6813      	ldr	r3, [r2, #0]
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800601a:	f7fb fa67 	bl	80014ec <HAL_GetTick>
 800601e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006020:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006024:	9200      	str	r2, [sp, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800602c:	4620      	mov	r0, r4
 800602e:	f7ff fdf6 	bl	8005c1e <UART_WaitOnFlagUntilTimeout>
 8006032:	b948      	cbnz	r0, 8006048 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006034:	2320      	movs	r3, #32
 8006036:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800603a:	e006      	b.n	800604a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800603c:	ab04      	add	r3, sp, #16
 800603e:	e913 0006 	ldmdb	r3, {r1, r2}
 8006042:	f7ff ff87 	bl	8005f54 <UARTEx_Wakeup_AddressConfig>
 8006046:	e7e3      	b.n	8006010 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006048:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800604a:	2300      	movs	r3, #0
 800604c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006050:	b004      	add	sp, #16
 8006052:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006054:	2002      	movs	r0, #2
 8006056:	e7fb      	b.n	8006050 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006058 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006058:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800605c:	2b01      	cmp	r3, #1
 800605e:	d010      	beq.n	8006082 <HAL_UARTEx_EnableStopMode+0x2a>
 8006060:	2301      	movs	r3, #1
 8006062:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006066:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	e852 3f00 	ldrex	r3, [r2]
 800606c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	e842 3100 	strex	r1, r3, [r2]
 8006074:	2900      	cmp	r1, #0
 8006076:	d1f6      	bne.n	8006066 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006078:	2300      	movs	r3, #0
 800607a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800607e:	4618      	mov	r0, r3
 8006080:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006082:	2002      	movs	r0, #2
}
 8006084:	4770      	bx	lr

08006086 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006086:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800608a:	2b01      	cmp	r3, #1
 800608c:	d01d      	beq.n	80060ca <HAL_UARTEx_EnableFifoMode+0x44>
{
 800608e:	b510      	push	{r4, lr}
 8006090:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006092:	2301      	movs	r3, #1
 8006094:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	2324      	movs	r3, #36	; 0x24
 800609a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800609e:	6802      	ldr	r2, [r0, #0]
 80060a0:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80060a2:	6811      	ldr	r1, [r2, #0]
 80060a4:	f021 0101 	bic.w	r1, r1, #1
 80060a8:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80060ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80060b2:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b4:	6802      	ldr	r2, [r0, #0]
 80060b6:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 80060b8:	f7ff ff64 	bl	8005f84 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80060bc:	2320      	movs	r3, #32
 80060be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80060c2:	2000      	movs	r0, #0
 80060c4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80060c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80060ca:	2002      	movs	r0, #2
}
 80060cc:	4770      	bx	lr

080060ce <HAL_UARTEx_SetTxFifoThreshold>:
{
 80060ce:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80060d0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d01d      	beq.n	8006114 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80060d8:	4604      	mov	r4, r0
 80060da:	2301      	movs	r3, #1
 80060dc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80060e0:	2324      	movs	r3, #36	; 0x24
 80060e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e6:	6803      	ldr	r3, [r0, #0]
 80060e8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060f2:	6802      	ldr	r2, [r0, #0]
 80060f4:	6893      	ldr	r3, [r2, #8]
 80060f6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80060fa:	4319      	orrs	r1, r3
 80060fc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80060fe:	f7ff ff41 	bl	8005f84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006106:	2320      	movs	r3, #32
 8006108:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800610c:	2000      	movs	r0, #0
 800610e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006112:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006114:	2002      	movs	r0, #2
 8006116:	e7fc      	b.n	8006112 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006118 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006118:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800611a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800611e:	2b01      	cmp	r3, #1
 8006120:	d01d      	beq.n	800615e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006122:	4604      	mov	r4, r0
 8006124:	2301      	movs	r3, #1
 8006126:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800612a:	2324      	movs	r3, #36	; 0x24
 800612c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006130:	6803      	ldr	r3, [r0, #0]
 8006132:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800613c:	6802      	ldr	r2, [r0, #0]
 800613e:	6893      	ldr	r3, [r2, #8]
 8006140:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006144:	4319      	orrs	r1, r3
 8006146:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006148:	f7ff ff1c 	bl	8005f84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006150:	2320      	movs	r3, #32
 8006152:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006156:	2000      	movs	r0, #0
 8006158:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800615c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800615e:	2002      	movs	r0, #2
 8006160:	e7fc      	b.n	800615c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006164 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006164:	2804      	cmp	r0, #4
 8006166:	d807      	bhi.n	8006178 <LmHandlerPackageIsInitialized+0x14>
{
 8006168:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <LmHandlerPackageIsInitialized+0x1c>)
 800616c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	b11b      	cbz	r3, 800617c <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006174:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006176:	bd08      	pop	{r3, pc}
        return false;
 8006178:	2000      	movs	r0, #0
}
 800617a:	4770      	bx	lr
        return false;
 800617c:	2000      	movs	r0, #0
 800617e:	e7fa      	b.n	8006176 <LmHandlerPackageIsInitialized+0x12>
 8006180:	20000360 	.word	0x20000360

08006184 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	4605      	mov	r5, r0
 8006188:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800618a:	2400      	movs	r4, #0
 800618c:	e018      	b.n	80061c0 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	b1a2      	cbz	r2, 80061bc <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006196:	429a      	cmp	r2, r3
 8006198:	d005      	beq.n	80061a6 <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800619a:	b97c      	cbnz	r4, 80061bc <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800619c:	4b13      	ldr	r3, [pc, #76]	; (80061ec <LmHandlerPackagesNotify+0x68>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4798      	blx	r3
 80061a4:	b150      	cbz	r0, 80061bc <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <LmHandlerPackagesNotify+0x68>)
 80061a8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	4638      	mov	r0, r7
 80061b0:	4798      	blx	r3
 80061b2:	e003      	b.n	80061bc <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	b10b      	cbz	r3, 80061bc <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 80061b8:	4638      	mov	r0, r7
 80061ba:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80061bc:	3401      	adds	r4, #1
 80061be:	b264      	sxtb	r4, r4
 80061c0:	2c04      	cmp	r4, #4
 80061c2:	dc11      	bgt.n	80061e8 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 80061c4:	4626      	mov	r6, r4
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <LmHandlerPackagesNotify+0x68>)
 80061c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0f5      	beq.n	80061bc <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 80061d0:	2d01      	cmp	r5, #1
 80061d2:	d0dc      	beq.n	800618e <LmHandlerPackagesNotify+0xa>
 80061d4:	2d02      	cmp	r5, #2
 80061d6:	d0ed      	beq.n	80061b4 <LmHandlerPackagesNotify+0x30>
 80061d8:	2d00      	cmp	r5, #0
 80061da:	d1ef      	bne.n	80061bc <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ec      	beq.n	80061bc <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 80061e2:	4638      	mov	r0, r7
 80061e4:	4798      	blx	r3
 80061e6:	e7e9      	b.n	80061bc <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 80061e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000360 	.word	0x20000360

080061f0 <McpsConfirm>:
{
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80061f4:	480c      	ldr	r0, [pc, #48]	; (8006228 <McpsConfirm+0x38>)
 80061f6:	2301      	movs	r3, #1
 80061f8:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 80061fa:	7863      	ldrb	r3, [r4, #1]
 80061fc:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80061fe:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006202:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006204:	68e3      	ldr	r3, [r4, #12]
 8006206:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006208:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800620c:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006212:	7923      	ldrb	r3, [r4, #4]
 8006214:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <McpsConfirm+0x3c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800621e:	4621      	mov	r1, r4
 8006220:	2000      	movs	r0, #0
 8006222:	f7ff ffaf 	bl	8006184 <LmHandlerPackagesNotify>
}
 8006226:	bd10      	pop	{r4, pc}
 8006228:	200003a8 	.word	0x200003a8
 800622c:	2000035c 	.word	0x2000035c

08006230 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8006230:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006232:	2400      	movs	r4, #0
 8006234:	e001      	b.n	800623a <LmHandlerPackagesProcess+0xa>
 8006236:	3401      	adds	r4, #1
 8006238:	b264      	sxtb	r4, r4
 800623a:	2c04      	cmp	r4, #4
 800623c:	dc12      	bgt.n	8006264 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <LmHandlerPackagesProcess+0x38>)
 8006240:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f6      	beq.n	8006236 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006248:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f3      	beq.n	8006236 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800624e:	b2e0      	uxtb	r0, r4
 8006250:	f7ff ff88 	bl	8006164 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006254:	2800      	cmp	r0, #0
 8006256:	d0ee      	beq.n	8006236 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <LmHandlerPackagesProcess+0x38>)
 800625a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	4798      	blx	r3
 8006262:	e7e8      	b.n	8006236 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006264:	bd38      	pop	{r3, r4, r5, pc}
 8006266:	bf00      	nop
 8006268:	20000360 	.word	0x20000360

0800626c <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800626c:	b500      	push	{lr}
 800626e:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <DisplayClassUpdate+0x1c>)
 8006272:	5c1b      	ldrb	r3, [r3, r0]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <DisplayClassUpdate+0x20>)
 8006278:	2200      	movs	r2, #0
 800627a:	4611      	mov	r1, r2
 800627c:	2002      	movs	r0, #2
 800627e:	f00a f94b 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8006282:	b003      	add	sp, #12
 8006284:	f85d fb04 	ldr.w	pc, [sp], #4
 8006288:	08011684 	.word	0x08011684
 800628c:	08011668 	.word	0x08011668

08006290 <LmHandlerSetSystemMaxRxError>:
{
 8006290:	b500      	push	{lr}
 8006292:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006294:	2322      	movs	r3, #34	; 0x22
 8006296:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800629a:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800629c:	a801      	add	r0, sp, #4
 800629e:	f003 fa6b 	bl	8009778 <LoRaMacMibSetRequestConfirm>
 80062a2:	b910      	cbnz	r0, 80062aa <LmHandlerSetSystemMaxRxError+0x1a>
}
 80062a4:	b00b      	add	sp, #44	; 0x2c
 80062a6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	e7f9      	b.n	80062a4 <LmHandlerSetSystemMaxRxError+0x14>

080062b0 <LmHandlerDeviceTimeReq>:
{
 80062b0:	b500      	push	{lr}
 80062b2:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80062b4:	230a      	movs	r3, #10
 80062b6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80062ba:	a801      	add	r0, sp, #4
 80062bc:	f003 fcd4 	bl	8009c68 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 80062c0:	b910      	cbnz	r0, 80062c8 <LmHandlerDeviceTimeReq+0x18>
}
 80062c2:	b007      	add	sp, #28
 80062c4:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e7f9      	b.n	80062c2 <LmHandlerDeviceTimeReq+0x12>
	...

080062d0 <LmHandlerConfigure>:
{
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	b095      	sub	sp, #84	; 0x54
 80062d4:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80062d6:	4c63      	ldr	r4, [pc, #396]	; (8006464 <LmHandlerConfigure+0x194>)
 80062d8:	2210      	movs	r2, #16
 80062da:	4620      	mov	r0, r4
 80062dc:	f00a fa30 	bl	8010740 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 80062e0:	f7fb fe08 	bl	8001ef4 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80062e4:	7822      	ldrb	r2, [r4, #0]
 80062e6:	2301      	movs	r3, #1
 80062e8:	4093      	lsls	r3, r2
 80062ea:	6841      	ldr	r1, [r0, #4]
 80062ec:	420b      	tst	r3, r1
 80062ee:	f000 80aa 	beq.w	8006446 <LmHandlerConfigure+0x176>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80062f2:	495d      	ldr	r1, [pc, #372]	; (8006468 <LmHandlerConfigure+0x198>)
 80062f4:	485d      	ldr	r0, [pc, #372]	; (800646c <LmHandlerConfigure+0x19c>)
 80062f6:	f002 feef 	bl	80090d8 <LoRaMacInitialization>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f040 80ae 	bne.w	800645c <LmHandlerConfigure+0x18c>
    nbNvmData = NvmDataMgmtRestore( );
 8006300:	f004 fead 	bl	800b05e <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006304:	2800      	cmp	r0, #0
 8006306:	f000 80a5 	beq.w	8006454 <LmHandlerConfigure+0x184>
        CtxRestoreDone = true;
 800630a:	4b59      	ldr	r3, [pc, #356]	; (8006470 <LmHandlerConfigure+0x1a0>)
 800630c:	2201      	movs	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8006310:	2502      	movs	r5, #2
 8006312:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006316:	a80b      	add	r0, sp, #44	; 0x2c
 8006318:	f003 f916 	bl	8009548 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800631c:	4c55      	ldr	r4, [pc, #340]	; (8006474 <LmHandlerConfigure+0x1a4>)
 800631e:	2208      	movs	r2, #8
 8006320:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006322:	4620      	mov	r0, r4
 8006324:	f007 ff6f 	bl	800e206 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006328:	2303      	movs	r3, #3
 800632a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 800632e:	a80b      	add	r0, sp, #44	; 0x2c
 8006330:	f003 f90a 	bl	8009548 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8006334:	2208      	movs	r2, #8
 8006336:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006338:	18a0      	adds	r0, r4, r2
 800633a:	f007 ff64 	bl	800e206 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800633e:	4b4e      	ldr	r3, [pc, #312]	; (8006478 <LmHandlerConfigure+0x1a8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4798      	blx	r3
 8006346:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 8006348:	2206      	movs	r2, #6
 800634a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800634e:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006350:	a80b      	add	r0, sp, #44	; 0x2c
 8006352:	f003 fa11 	bl	8009778 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006356:	7823      	ldrb	r3, [r4, #0]
 8006358:	7862      	ldrb	r2, [r4, #1]
 800635a:	78a1      	ldrb	r1, [r4, #2]
 800635c:	78e0      	ldrb	r0, [r4, #3]
 800635e:	7926      	ldrb	r6, [r4, #4]
 8006360:	7967      	ldrb	r7, [r4, #5]
 8006362:	f894 c006 	ldrb.w	ip, [r4, #6]
 8006366:	f894 e007 	ldrb.w	lr, [r4, #7]
 800636a:	f8cd e01c 	str.w	lr, [sp, #28]
 800636e:	f8cd c018 	str.w	ip, [sp, #24]
 8006372:	9705      	str	r7, [sp, #20]
 8006374:	9604      	str	r6, [sp, #16]
 8006376:	9003      	str	r0, [sp, #12]
 8006378:	9102      	str	r1, [sp, #8]
 800637a:	9201      	str	r2, [sp, #4]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	4b3f      	ldr	r3, [pc, #252]	; (800647c <LmHandlerConfigure+0x1ac>)
 8006380:	2200      	movs	r2, #0
 8006382:	4611      	mov	r1, r2
 8006384:	4628      	mov	r0, r5
 8006386:	f00a f8c7 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800638a:	7a23      	ldrb	r3, [r4, #8]
 800638c:	7a62      	ldrb	r2, [r4, #9]
 800638e:	7aa1      	ldrb	r1, [r4, #10]
 8006390:	7ae0      	ldrb	r0, [r4, #11]
 8006392:	7b26      	ldrb	r6, [r4, #12]
 8006394:	7b67      	ldrb	r7, [r4, #13]
 8006396:	f894 c00e 	ldrb.w	ip, [r4, #14]
 800639a:	f894 e00f 	ldrb.w	lr, [r4, #15]
 800639e:	f8cd e01c 	str.w	lr, [sp, #28]
 80063a2:	f8cd c018 	str.w	ip, [sp, #24]
 80063a6:	9705      	str	r7, [sp, #20]
 80063a8:	9604      	str	r6, [sp, #16]
 80063aa:	9003      	str	r0, [sp, #12]
 80063ac:	9102      	str	r1, [sp, #8]
 80063ae:	9201      	str	r2, [sp, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	4b33      	ldr	r3, [pc, #204]	; (8006480 <LmHandlerConfigure+0x1b0>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	4611      	mov	r1, r2
 80063b8:	4628      	mov	r0, r5
 80063ba:	f00a f8ad 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 80063be:	7de3      	ldrb	r3, [r4, #23]
 80063c0:	7da2      	ldrb	r2, [r4, #22]
 80063c2:	7d61      	ldrb	r1, [r4, #21]
 80063c4:	7d20      	ldrb	r0, [r4, #20]
 80063c6:	9003      	str	r0, [sp, #12]
 80063c8:	9102      	str	r1, [sp, #8]
 80063ca:	9201      	str	r2, [sp, #4]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <LmHandlerConfigure+0x1b4>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	4611      	mov	r1, r2
 80063d4:	4628      	mov	r0, r5
 80063d6:	f00a f89f 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80063da:	260f      	movs	r6, #15
 80063dc:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80063e6:	a80b      	add	r0, sp, #44	; 0x2c
 80063e8:	f003 f9c6 	bl	8009778 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 80063ec:	2305      	movs	r3, #5
 80063ee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80063f2:	2400      	movs	r4, #0
 80063f4:	940c      	str	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80063f6:	a80b      	add	r0, sp, #44	; 0x2c
 80063f8:	f003 f9be 	bl	8009778 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80063fc:	2310      	movs	r3, #16
 80063fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8006402:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006406:	a80b      	add	r0, sp, #44	; 0x2c
 8006408:	f003 f9b6 	bl	8009778 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800640c:	2304      	movs	r3, #4
 800640e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006412:	4d14      	ldr	r5, [pc, #80]	; (8006464 <LmHandlerConfigure+0x194>)
 8006414:	78ab      	ldrb	r3, [r5, #2]
 8006416:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800641a:	a80b      	add	r0, sp, #44	; 0x2c
 800641c:	f003 f9ac 	bl	8009778 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006420:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8006424:	a909      	add	r1, sp, #36	; 0x24
 8006426:	7828      	ldrb	r0, [r5, #0]
 8006428:	f004 fe25 	bl	800b076 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800642c:	1b03      	subs	r3, r0, r4
 800642e:	bf18      	it	ne
 8006430:	2301      	movne	r3, #1
 8006432:	716b      	strb	r3, [r5, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 8006434:	2014      	movs	r0, #20
 8006436:	f7ff ff2b 	bl	8006290 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800643a:	7968      	ldrb	r0, [r5, #5]
 800643c:	f003 fda4 	bl	8009f88 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8006440:	4620      	mov	r0, r4
}
 8006442:	b015      	add	sp, #84	; 0x54
 8006444:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <LmHandlerConfigure+0x1b8>)
 8006448:	2201      	movs	r2, #1
 800644a:	2100      	movs	r1, #0
 800644c:	4608      	mov	r0, r1
 800644e:	f00a f863 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8006452:	e7fe      	b.n	8006452 <LmHandlerConfigure+0x182>
        CtxRestoreDone = false;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <LmHandlerConfigure+0x1a0>)
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	e759      	b.n	8006310 <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	e7ef      	b.n	8006442 <LmHandlerConfigure+0x172>
 8006462:	bf00      	nop
 8006464:	20000374 	.word	0x20000374
 8006468:	20000384 	.word	0x20000384
 800646c:	20000398 	.word	0x20000398
 8006470:	2000035a 	.word	0x2000035a
 8006474:	20000054 	.word	0x20000054
 8006478:	2000035c 	.word	0x2000035c
 800647c:	080116d4 	.word	0x080116d4
 8006480:	08011710 	.word	0x08011710
 8006484:	0801174c 	.word	0x0801174c
 8006488:	08011688 	.word	0x08011688

0800648c <LmHandlerProcess>:
{
 800648c:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 800648e:	f002 fdef 	bl	8009070 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8006492:	f7ff fecd 	bl	8006230 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 8006496:	f004 fde0 	bl	800b05a <NvmDataMgmtStore>
}
 800649a:	bd08      	pop	{r3, pc}

0800649c <LmHandlerJoinStatus>:
{
 800649c:	b500      	push	{lr}
 800649e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80064a6:	a801      	add	r0, sp, #4
 80064a8:	f003 f84e 	bl	8009548 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80064ac:	b920      	cbnz	r0, 80064b8 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80064ae:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80064b2:	b110      	cbz	r0, 80064ba <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80064b4:	2001      	movs	r0, #1
 80064b6:	e000      	b.n	80064ba <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80064b8:	2000      	movs	r0, #0
}
 80064ba:	b00b      	add	sp, #44	; 0x2c
 80064bc:	f85d fb04 	ldr.w	pc, [sp], #4

080064c0 <LmHandlerRequestClass>:
{
 80064c0:	b510      	push	{r4, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 80064c6:	f002 fdc1 	bl	800904c <LoRaMacIsBusy>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d13d      	bne.n	800654a <LmHandlerRequestClass+0x8a>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80064ce:	f7ff ffe5 	bl	800649c <LmHandlerJoinStatus>
 80064d2:	2801      	cmp	r0, #1
 80064d4:	d13c      	bne.n	8006550 <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80064dc:	a801      	add	r0, sp, #4
 80064de:	f003 f833 	bl	8009548 <LoRaMacMibGetRequestConfirm>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d137      	bne.n	8006556 <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 80064e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	d036      	beq.n	800655c <LmHandlerRequestClass+0x9c>
        switch( newClass )
 80064ee:	2c01      	cmp	r4, #1
 80064f0:	d036      	beq.n	8006560 <LmHandlerRequestClass+0xa0>
 80064f2:	2c02      	cmp	r4, #2
 80064f4:	d017      	beq.n	8006526 <LmHandlerRequestClass+0x66>
 80064f6:	b114      	cbz	r4, 80064fe <LmHandlerRequestClass+0x3e>
 80064f8:	2000      	movs	r0, #0
}
 80064fa:	b00a      	add	sp, #40	; 0x28
 80064fc:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80064fe:	b90b      	cbnz	r3, 8006504 <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006500:	2000      	movs	r0, #0
 8006502:	e7fa      	b.n	80064fa <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 8006504:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006508:	a801      	add	r0, sp, #4
 800650a:	f003 f935 	bl	8009778 <LoRaMacMibSetRequestConfirm>
 800650e:	bb50      	cbnz	r0, 8006566 <LmHandlerRequestClass+0xa6>
                        DisplayClassUpdate(newClass);
 8006510:	4620      	mov	r0, r4
 8006512:	f7ff feab 	bl	800626c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006516:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <LmHandlerRequestClass+0xc0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	b333      	cbz	r3, 800656c <LmHandlerRequestClass+0xac>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800651e:	4620      	mov	r0, r4
 8006520:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006522:	2000      	movs	r0, #0
 8006524:	e7e9      	b.n	80064fa <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 8006526:	bb1b      	cbnz	r3, 8006570 <LmHandlerRequestClass+0xb0>
                    mibReq.Param.Class = newClass;
 8006528:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800652c:	a801      	add	r0, sp, #4
 800652e:	f003 f923 	bl	8009778 <LoRaMacMibSetRequestConfirm>
 8006532:	bb00      	cbnz	r0, 8006576 <LmHandlerRequestClass+0xb6>
                        DisplayClassUpdate(newClass);
 8006534:	4620      	mov	r0, r4
 8006536:	f7ff fe99 	bl	800626c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <LmHandlerRequestClass+0xc0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	b1e3      	cbz	r3, 800657c <LmHandlerRequestClass+0xbc>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006542:	4620      	mov	r0, r4
 8006544:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006546:	2000      	movs	r0, #0
 8006548:	e7d7      	b.n	80064fa <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800654a:	f06f 0001 	mvn.w	r0, #1
 800654e:	e7d4      	b.n	80064fa <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006550:	f06f 0002 	mvn.w	r0, #2
 8006554:	e7d1      	b.n	80064fa <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 8006556:	f04f 30ff 	mov.w	r0, #4294967295
 800655a:	e7ce      	b.n	80064fa <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800655c:	2000      	movs	r0, #0
 800655e:	e7cc      	b.n	80064fa <LmHandlerRequestClass+0x3a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	e7c9      	b.n	80064fa <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	e7c6      	b.n	80064fa <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800656c:	2000      	movs	r0, #0
 800656e:	e7c4      	b.n	80064fa <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	e7c1      	b.n	80064fa <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8006576:	f04f 30ff 	mov.w	r0, #4294967295
 800657a:	e7be      	b.n	80064fa <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800657c:	2000      	movs	r0, #0
 800657e:	e7bc      	b.n	80064fa <LmHandlerRequestClass+0x3a>
 8006580:	2000035c 	.word	0x2000035c

08006584 <LmHandlerJoin>:
{
 8006584:	b500      	push	{lr}
 8006586:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 8006588:	2802      	cmp	r0, #2
 800658a:	d021      	beq.n	80065d0 <LmHandlerJoin+0x4c>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800658c:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <LmHandlerJoin+0x80>)
 800658e:	2201      	movs	r2, #1
 8006590:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006592:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <LmHandlerJoin+0x84>)
 8006594:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006598:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800659a:	2200      	movs	r2, #0
 800659c:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800659e:	4b1b      	ldr	r3, [pc, #108]	; (800660c <LmHandlerJoin+0x88>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b32b      	cbz	r3, 80065f0 <LmHandlerJoin+0x6c>
        LoRaMacStart();
 80065a4:	f002 ff62 	bl	800946c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80065ae:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80065b2:	a805      	add	r0, sp, #20
 80065b4:	f003 f8e0 	bl	8009778 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <LmHandlerJoin+0x8c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4811      	ldr	r0, [pc, #68]	; (8006604 <LmHandlerJoin+0x80>)
 80065c0:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80065c2:	4b11      	ldr	r3, [pc, #68]	; (8006608 <LmHandlerJoin+0x84>)
 80065c4:	7858      	ldrb	r0, [r3, #1]
 80065c6:	f7ff ff7b 	bl	80064c0 <LmHandlerRequestClass>
}
 80065ca:	b00f      	add	sp, #60	; 0x3c
 80065cc:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <LmHandlerJoin+0x80>)
 80065d2:	2202      	movs	r2, #2
 80065d4:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 80065d6:	f002 ff49 	bl	800946c <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 80065da:	2301      	movs	r3, #1
 80065dc:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <LmHandlerJoin+0x84>)
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 80065e8:	4668      	mov	r0, sp
 80065ea:	f003 fb3d 	bl	8009c68 <LoRaMacMlmeRequest>
 80065ee:	e7ec      	b.n	80065ca <LmHandlerJoin+0x46>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80065f0:	2327      	movs	r3, #39	; 0x27
 80065f2:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <LmHandlerJoin+0x90>)
 80065f8:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80065fa:	a805      	add	r0, sp, #20
 80065fc:	f003 f8bc 	bl	8009778 <LoRaMacMibSetRequestConfirm>
 8006600:	e7d0      	b.n	80065a4 <LmHandlerJoin+0x20>
 8006602:	bf00      	nop
 8006604:	2000006c 	.word	0x2000006c
 8006608:	20000374 	.word	0x20000374
 800660c:	2000035a 	.word	0x2000035a
 8006610:	2000035c 	.word	0x2000035c
 8006614:	01000300 	.word	0x01000300

08006618 <LmHandlerSend>:
{
 8006618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661a:	b087      	sub	sp, #28
 800661c:	4604      	mov	r4, r0
 800661e:	460e      	mov	r6, r1
 8006620:	4615      	mov	r5, r2
 8006622:	461f      	mov	r7, r3
    if (LoRaMacIsBusy() == true)
 8006624:	f002 fd12 	bl	800904c <LoRaMacIsBusy>
 8006628:	2800      	cmp	r0, #0
 800662a:	d16c      	bne.n	8006706 <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800662c:	f7ff ff36 	bl	800649c <LmHandlerJoinStatus>
 8006630:	2801      	cmp	r0, #1
 8006632:	d13d      	bne.n	80066b0 <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8006634:	4b39      	ldr	r3, [pc, #228]	; (800671c <LmHandlerSend+0x104>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	4798      	blx	r3
 800663c:	b138      	cbz	r0, 800664e <LmHandlerSend+0x36>
 800663e:	7823      	ldrb	r3, [r4, #0]
 8006640:	4a36      	ldr	r2, [pc, #216]	; (800671c <LmHandlerSend+0x104>)
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	4293      	cmp	r3, r2
 8006648:	d001      	beq.n	800664e <LmHandlerSend+0x36>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d15e      	bne.n	800670c <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800664e:	4b34      	ldr	r3, [pc, #208]	; (8006720 <LmHandlerSend+0x108>)
 8006650:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8006654:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006658:	4669      	mov	r1, sp
 800665a:	7860      	ldrb	r0, [r4, #1]
 800665c:	f002 ff0e 	bl	800947c <LoRaMacQueryTxPossible>
 8006660:	b368      	cbz	r0, 80066be <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8006662:	2200      	movs	r2, #0
 8006664:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <LmHandlerSend+0x10c>)
 8006666:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006668:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800666c:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800666e:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 8006672:	4a2c      	ldr	r2, [pc, #176]	; (8006724 <LmHandlerSend+0x10c>)
 8006674:	f102 060c 	add.w	r6, r2, #12
 8006678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800667c:	e886 0003 	stmia.w	r6, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006680:	4b27      	ldr	r3, [pc, #156]	; (8006720 <LmHandlerSend+0x108>)
 8006682:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8006686:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8006688:	4639      	mov	r1, r7
 800668a:	a801      	add	r0, sp, #4
 800668c:	f003 fbc2 	bl	8009e14 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8006690:	b10d      	cbz	r5, 8006696 <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	602b      	str	r3, [r5, #0]
    switch (status)
 8006696:	2811      	cmp	r0, #17
 8006698:	d832      	bhi.n	8006700 <LmHandlerSend+0xe8>
 800669a:	e8df f000 	tbb	[pc, r0]
 800669e:	3a26      	.short	0x3a26
 80066a0:	31313131 	.word	0x31313131
 80066a4:	31312831 	.word	0x31312831
 80066a8:	31312e31 	.word	0x31312e31
 80066ac:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 80066b0:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <LmHandlerSend+0x110>)
 80066b2:	7898      	ldrb	r0, [r3, #2]
 80066b4:	f7ff ff66 	bl	8006584 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80066b8:	f06f 0002 	mvn.w	r0, #2
 80066bc:	e02b      	b.n	8006716 <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 80066be:	4b19      	ldr	r3, [pc, #100]	; (8006724 <LmHandlerSend+0x10c>)
 80066c0:	709e      	strb	r6, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80066c2:	7823      	ldrb	r3, [r4, #0]
 80066c4:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80066c8:	7863      	ldrb	r3, [r4, #1]
 80066ca:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80066ce:	6863      	ldr	r3, [r4, #4]
 80066d0:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 80066d2:	b91e      	cbnz	r6, 80066dc <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 80066d4:	2300      	movs	r3, #0
 80066d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80066da:	e7ca      	b.n	8006672 <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 80066dc:	2301      	movs	r3, #1
 80066de:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80066e2:	2308      	movs	r3, #8
 80066e4:	f88d 3013 	strb.w	r3, [sp, #19]
 80066e8:	e7c3      	b.n	8006672 <LmHandlerSend+0x5a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80066ea:	2000      	movs	r0, #0
 80066ec:	e013      	b.n	8006716 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80066ee:	f06f 0002 	mvn.w	r0, #2
            break;
 80066f2:	e010      	b.n	8006716 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80066f4:	f06f 0004 	mvn.w	r0, #4
            break;
 80066f8:	e00d      	b.n	8006716 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80066fa:	f06f 0005 	mvn.w	r0, #5
            break;
 80066fe:	e00a      	b.n	8006716 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8006700:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 8006704:	e007      	b.n	8006716 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006706:	f06f 0001 	mvn.w	r0, #1
 800670a:	e004      	b.n	8006716 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800670c:	f06f 0003 	mvn.w	r0, #3
 8006710:	e001      	b.n	8006716 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8006712:	f06f 0001 	mvn.w	r0, #1
}
 8006716:	b007      	add	sp, #28
 8006718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671a:	bf00      	nop
 800671c:	20000360 	.word	0x20000360
 8006720:	20000374 	.word	0x20000374
 8006724:	200003a8 	.word	0x200003a8
 8006728:	2000006c 	.word	0x2000006c

0800672c <MlmeIndication>:
{
 800672c:	b510      	push	{r4, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <MlmeIndication+0x64>)
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006738:	7842      	ldrb	r2, [r0, #1]
 800673a:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800673c:	f9b1 0000 	ldrsh.w	r0, [r1]
 8006740:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 8006742:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8006746:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006748:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800674c:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800674e:	2a0e      	cmp	r2, #14
 8006750:	d005      	beq.n	800675e <MlmeIndication+0x32>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <MlmeIndication+0x68>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	490d      	ldr	r1, [pc, #52]	; (8006790 <MlmeIndication+0x64>)
 800675a:	2000      	movs	r0, #0
 800675c:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 800675e:	7823      	ldrb	r3, [r4, #0]
 8006760:	2b07      	cmp	r3, #7
 8006762:	d001      	beq.n	8006768 <MlmeIndication+0x3c>
}
 8006764:	b002      	add	sp, #8
 8006766:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 8006768:	2300      	movs	r3, #0
 800676a:	f88d 3000 	strb.w	r3, [sp]
 800676e:	f88d 3001 	strb.w	r3, [sp, #1]
 8006772:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <MlmeIndication+0x6c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	4798      	blx	r3
 800677c:	2800      	cmp	r0, #0
 800677e:	d1f1      	bne.n	8006764 <MlmeIndication+0x38>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8006780:	2301      	movs	r3, #1
 8006782:	2200      	movs	r2, #0
 8006784:	4611      	mov	r1, r2
 8006786:	4668      	mov	r0, sp
 8006788:	f7ff ff46 	bl	8006618 <LmHandlerSend>
}
 800678c:	e7ea      	b.n	8006764 <MlmeIndication+0x38>
 800678e:	bf00      	nop
 8006790:	2000007c 	.word	0x2000007c
 8006794:	2000035c 	.word	0x2000035c
 8006798:	20000360 	.word	0x20000360

0800679c <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 800679c:	b170      	cbz	r0, 80067bc <LmHandlerGetCurrentClass+0x20>
{
 800679e:	b510      	push	{r4, lr}
 80067a0:	b08a      	sub	sp, #40	; 0x28
 80067a2:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 80067a4:	2300      	movs	r3, #0
 80067a6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80067aa:	a801      	add	r0, sp, #4
 80067ac:	f002 fecc 	bl	8009548 <LoRaMacMibGetRequestConfirm>
 80067b0:	b938      	cbnz	r0, 80067c2 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 80067b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80067b6:	7023      	strb	r3, [r4, #0]
}
 80067b8:	b00a      	add	sp, #40	; 0x28
 80067ba:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80067c0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295
 80067c6:	e7f7      	b.n	80067b8 <LmHandlerGetCurrentClass+0x1c>

080067c8 <McpsIndication>:
{
 80067c8:	b530      	push	{r4, r5, lr}
 80067ca:	b087      	sub	sp, #28
 80067cc:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 80067ce:	2200      	movs	r2, #0
 80067d0:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 80067d4:	4922      	ldr	r1, [pc, #136]	; (8006860 <McpsIndication+0x98>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 80067da:	7842      	ldrb	r2, [r0, #1]
 80067dc:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80067de:	bb62      	cbnz	r2, 800683a <McpsIndication+0x72>
 80067e0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80067e2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80067e6:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = RxStatus->Rssi;
 80067e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80067ec:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = RxStatus->Snr;
 80067ee:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80067f2:	710a      	strb	r2, [r1, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80067f4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80067f8:	730b      	strb	r3, [r1, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80067fa:	6903      	ldr	r3, [r0, #16]
 80067fc:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 80067fe:	78c3      	ldrb	r3, [r0, #3]
 8006800:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8006804:	7b03      	ldrb	r3, [r0, #12]
 8006806:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800680a:	6883      	ldr	r3, [r0, #8]
 800680c:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800680e:	4d15      	ldr	r5, [pc, #84]	; (8006864 <McpsIndication+0x9c>)
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	a804      	add	r0, sp, #16
 8006816:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	b113      	cbz	r3, 8006824 <McpsIndication+0x5c>
 800681e:	7e22      	ldrb	r2, [r4, #24]
 8006820:	b102      	cbz	r2, 8006824 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8006822:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8006824:	4621      	mov	r1, r4
 8006826:	2001      	movs	r0, #1
 8006828:	f7ff fcac 	bl	8006184 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 800682c:	f10d 000f 	add.w	r0, sp, #15
 8006830:	f7ff ffb4 	bl	800679c <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8006834:	7963      	ldrb	r3, [r4, #5]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d001      	beq.n	800683e <McpsIndication+0x76>
}
 800683a:	b007      	add	sp, #28
 800683c:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800683e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f9      	bne.n	800683a <McpsIndication+0x72>
        LmHandlerAppData_t appData =
 8006846:	2100      	movs	r1, #0
 8006848:	f88d 1004 	strb.w	r1, [sp, #4]
 800684c:	f88d 1005 	strb.w	r1, [sp, #5]
 8006850:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8006852:	2301      	movs	r3, #1
 8006854:	460a      	mov	r2, r1
 8006856:	a801      	add	r0, sp, #4
 8006858:	f7ff fede 	bl	8006618 <LmHandlerSend>
 800685c:	e7ed      	b.n	800683a <McpsIndication+0x72>
 800685e:	bf00      	nop
 8006860:	2000007c 	.word	0x2000007c
 8006864:	2000035c 	.word	0x2000035c

08006868 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8006868:	b180      	cbz	r0, 800688c <LmHandlerGetTxDatarate+0x24>
{
 800686a:	b510      	push	{r4, lr}
 800686c:	b08a      	sub	sp, #40	; 0x28
 800686e:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8006870:	231f      	movs	r3, #31
 8006872:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8006876:	a801      	add	r0, sp, #4
 8006878:	f002 fe66 	bl	8009548 <LoRaMacMibGetRequestConfirm>
 800687c:	b948      	cbnz	r0, 8006892 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800687e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8006882:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8006884:	4a04      	ldr	r2, [pc, #16]	; (8006898 <LmHandlerGetTxDatarate+0x30>)
 8006886:	70d3      	strb	r3, [r2, #3]
}
 8006888:	b00a      	add	sp, #40	; 0x28
 800688a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006890:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8006892:	f04f 30ff 	mov.w	r0, #4294967295
 8006896:	e7f7      	b.n	8006888 <LmHandlerGetTxDatarate+0x20>
 8006898:	20000374 	.word	0x20000374

0800689c <MlmeConfirm>:
{
 800689c:	b510      	push	{r4, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80068a2:	481d      	ldr	r0, [pc, #116]	; (8006918 <MlmeConfirm+0x7c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 80068a8:	7863      	ldrb	r3, [r4, #1]
 80068aa:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80068ac:	4b1b      	ldr	r3, [pc, #108]	; (800691c <MlmeConfirm+0x80>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80068b4:	4621      	mov	r1, r4
 80068b6:	2002      	movs	r0, #2
 80068b8:	f7ff fc64 	bl	8006184 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80068bc:	7823      	ldrb	r3, [r4, #0]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d003      	beq.n	80068ca <MlmeConfirm+0x2e>
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d020      	beq.n	8006908 <MlmeConfirm+0x6c>
}
 80068c6:	b00a      	add	sp, #40	; 0x28
 80068c8:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 80068ca:	2306      	movs	r3, #6
 80068cc:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80068d0:	a801      	add	r0, sp, #4
 80068d2:	f002 fe39 	bl	8009548 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80068d6:	9a02      	ldr	r2, [sp, #8]
 80068d8:	4b11      	ldr	r3, [pc, #68]	; (8006920 <MlmeConfirm+0x84>)
 80068da:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80068dc:	4811      	ldr	r0, [pc, #68]	; (8006924 <MlmeConfirm+0x88>)
 80068de:	f7ff ffc3 	bl	8006868 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80068e2:	7863      	ldrb	r3, [r4, #1]
 80068e4:	b143      	cbz	r3, 80068f8 <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <MlmeConfirm+0x88>)
 80068e8:	22ff      	movs	r2, #255	; 0xff
 80068ea:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80068ec:	4b0b      	ldr	r3, [pc, #44]	; (800691c <MlmeConfirm+0x80>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	480c      	ldr	r0, [pc, #48]	; (8006924 <MlmeConfirm+0x88>)
 80068f4:	4798      	blx	r3
        break;
 80068f6:	e7e6      	b.n	80068c6 <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <MlmeConfirm+0x88>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80068fe:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <MlmeConfirm+0x8c>)
 8006900:	7858      	ldrb	r0, [r3, #1]
 8006902:	f7ff fddd 	bl	80064c0 <LmHandlerRequestClass>
 8006906:	e7f1      	b.n	80068ec <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <MlmeConfirm+0x90>)
 800690a:	2201      	movs	r2, #1
 800690c:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800690e:	7a22      	ldrb	r2, [r4, #8]
 8006910:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8006912:	7a62      	ldrb	r2, [r4, #9]
 8006914:	73da      	strb	r2, [r3, #15]
}
 8006916:	e7d6      	b.n	80068c6 <MlmeConfirm+0x2a>
 8006918:	200003a8 	.word	0x200003a8
 800691c:	2000035c 	.word	0x2000035c
 8006920:	20000054 	.word	0x20000054
 8006924:	2000006c 	.word	0x2000006c
 8006928:	20000374 	.word	0x20000374
 800692c:	2000007c 	.word	0x2000007c

08006930 <LmHandlerPackageRegister>:
    switch( id )
 8006930:	b9e0      	cbnz	r0, 800696c <LmHandlerPackageRegister+0x3c>
{
 8006932:	b538      	push	{r3, r4, r5, lr}
 8006934:	460c      	mov	r4, r1
 8006936:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 8006938:	f000 fa20 	bl	8006d7c <LmhpCompliancePackageFactory>
    if( package != NULL )
 800693c:	b198      	cbz	r0, 8006966 <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 800693e:	4a0d      	ldr	r2, [pc, #52]	; (8006974 <LmHandlerPackageRegister+0x44>)
 8006940:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8006944:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <LmHandlerPackageRegister+0x48>)
 8006946:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8006948:	4a0c      	ldr	r2, [pc, #48]	; (800697c <LmHandlerPackageRegister+0x4c>)
 800694a:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800694c:	4a0c      	ldr	r2, [pc, #48]	; (8006980 <LmHandlerPackageRegister+0x50>)
 800694e:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8006950:	4a0c      	ldr	r2, [pc, #48]	; (8006984 <LmHandlerPackageRegister+0x54>)
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	6912      	ldr	r2, [r2, #16]
 8006956:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8006958:	6843      	ldr	r3, [r0, #4]
 800695a:	22f2      	movs	r2, #242	; 0xf2
 800695c:	490a      	ldr	r1, [pc, #40]	; (8006988 <LmHandlerPackageRegister+0x58>)
 800695e:	4620      	mov	r0, r4
 8006960:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8006962:	2000      	movs	r0, #0
}
 8006964:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8006966:	f04f 30ff 	mov.w	r0, #4294967295
 800696a:	e7fb      	b.n	8006964 <LmHandlerPackageRegister+0x34>
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000360 	.word	0x20000360
 8006978:	08006585 	.word	0x08006585
 800697c:	08006619 	.word	0x08006619
 8006980:	080062b1 	.word	0x080062b1
 8006984:	2000035c 	.word	0x2000035c
 8006988:	20000268 	.word	0x20000268

0800698c <LmHandlerInit>:
{
 800698c:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <LmHandlerInit+0x40>)
 8006990:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <LmHandlerInit+0x44>)
 8006994:	4a0f      	ldr	r2, [pc, #60]	; (80069d4 <LmHandlerInit+0x48>)
 8006996:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8006998:	4a0f      	ldr	r2, [pc, #60]	; (80069d8 <LmHandlerInit+0x4c>)
 800699a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800699c:	4a0f      	ldr	r2, [pc, #60]	; (80069dc <LmHandlerInit+0x50>)
 800699e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80069a0:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <LmHandlerInit+0x54>)
 80069a2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80069a4:	6802      	ldr	r2, [r0, #0]
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <LmHandlerInit+0x58>)
 80069a8:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80069aa:	6842      	ldr	r2, [r0, #4]
 80069ac:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80069ae:	6882      	ldr	r2, [r0, #8]
 80069b0:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80069b2:	4a0d      	ldr	r2, [pc, #52]	; (80069e8 <LmHandlerInit+0x5c>)
 80069b4:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80069b6:	6902      	ldr	r2, [r0, #16]
 80069b8:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80069ba:	490c      	ldr	r1, [pc, #48]	; (80069ec <LmHandlerInit+0x60>)
 80069bc:	2000      	movs	r0, #0
 80069be:	f7ff ffb7 	bl	8006930 <LmHandlerPackageRegister>
 80069c2:	b900      	cbnz	r0, 80069c6 <LmHandlerInit+0x3a>
}
 80069c4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 80069c6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ca:	e7fb      	b.n	80069c4 <LmHandlerInit+0x38>
 80069cc:	2000035c 	.word	0x2000035c
 80069d0:	20000398 	.word	0x20000398
 80069d4:	080061f1 	.word	0x080061f1
 80069d8:	080067c9 	.word	0x080067c9
 80069dc:	0800689d 	.word	0x0800689d
 80069e0:	0800672d 	.word	0x0800672d
 80069e4:	20000384 	.word	0x20000384
 80069e8:	0800b059 	.word	0x0800b059
 80069ec:	20000070 	.word	0x20000070

080069f0 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80069f0:	4603      	mov	r3, r0
 80069f2:	b140      	cbz	r0, 8006a06 <LmhpComplianceInit+0x16>
 80069f4:	b139      	cbz	r1, 8006a06 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80069f6:	4807      	ldr	r0, [pc, #28]	; (8006a14 <LmhpComplianceInit+0x24>)
 80069f8:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <LmhpComplianceInit+0x28>)
 80069fc:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80069fe:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	4a02      	ldr	r2, [pc, #8]	; (8006a14 <LmhpComplianceInit+0x24>)
 8006a0a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8006a0c:	4a02      	ldr	r2, [pc, #8]	; (8006a18 <LmhpComplianceInit+0x28>)
 8006a0e:	7013      	strb	r3, [r2, #0]
    }
}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	200003ec 	.word	0x200003ec
 8006a18:	200003c0 	.word	0x200003c0

08006a1c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8006a1c:	4b01      	ldr	r3, [pc, #4]	; (8006a24 <LmhpComplianceIsInitialized+0x8>)
 8006a1e:	7818      	ldrb	r0, [r3, #0]
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	200003c0 	.word	0x200003c0

08006a28 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8006a28:	4b02      	ldr	r3, [pc, #8]	; (8006a34 <LmhpComplianceIsRunning+0xc>)
 8006a2a:	7818      	ldrb	r0, [r3, #0]
 8006a2c:	b100      	cbz	r0, 8006a30 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8006a2e:	7858      	ldrb	r0, [r3, #1]
}
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	200003c0 	.word	0x200003c0

08006a38 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 8006a38:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <LmhpComplianceOnMcpsConfirm+0x24>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	b12b      	cbz	r3, 8006a4a <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8006a3e:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <LmhpComplianceOnMcpsConfirm+0x24>)
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	b113      	cbz	r3, 8006a4a <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8006a44:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d000      	beq.n	8006a4c <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8006a4a:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8006a4c:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0fb      	beq.n	8006a4a <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8006a52:	4a02      	ldr	r2, [pc, #8]	; (8006a5c <LmhpComplianceOnMcpsConfirm+0x24>)
 8006a54:	8993      	ldrh	r3, [r2, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	8193      	strh	r3, [r2, #12]
 8006a5a:	e7f6      	b.n	8006a4a <LmhpComplianceOnMcpsConfirm+0x12>
 8006a5c:	200003c0 	.word	0x200003c0

08006a60 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8006a60:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <LmhpComplianceOnMlmeConfirm+0x24>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b12b      	cbz	r3, 8006a72 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <LmhpComplianceOnMlmeConfirm+0x24>)
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	b113      	cbz	r3, 8006a72 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8006a6c:	7803      	ldrb	r3, [r0, #0]
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d000      	beq.n	8006a74 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8006a72:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <LmhpComplianceOnMlmeConfirm+0x24>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8006a7a:	7a02      	ldrb	r2, [r0, #8]
 8006a7c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006a7e:	7a42      	ldrb	r2, [r0, #9]
 8006a80:	741a      	strb	r2, [r3, #16]
 8006a82:	e7f6      	b.n	8006a72 <LmhpComplianceOnMlmeConfirm+0x12>
 8006a84:	200003c0 	.word	0x200003c0

08006a88 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8006a88:	4770      	bx	lr
	...

08006a8c <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8006a8c:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d03e      	beq.n	8006b12 <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8006a94:	4b21      	ldr	r3, [pc, #132]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d03d      	beq.n	8006b18 <LmhpComplianceTxProcess+0x8c>
{
 8006a9c:	b530      	push	{r4, r5, lr}
 8006a9e:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 8006aa0:	4b1e      	ldr	r3, [pc, #120]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006aa2:	7b9b      	ldrb	r3, [r3, #14]
 8006aa4:	b313      	cbz	r3, 8006aec <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8006aac:	2203      	movs	r2, #3
 8006aae:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	2105      	movs	r1, #5
 8006ab4:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8006ab6:	7bd9      	ldrb	r1, [r3, #15]
 8006ab8:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8006aba:	7c19      	ldrb	r1, [r3, #16]
 8006abc:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8006abe:	2201      	movs	r2, #1
 8006ac0:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 8006ac2:	23e0      	movs	r3, #224	; 0xe0
 8006ac4:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8006ac8:	4c14      	ldr	r4, [pc, #80]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006aca:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8006acc:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8006ad0:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 8006ad2:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8006ad4:	4812      	ldr	r0, [pc, #72]	; (8006b20 <LmhpComplianceTxProcess+0x94>)
 8006ad6:	f00a f8bb 	bl	8010c50 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <LmhpComplianceTxProcess+0x98>)
 8006adc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006ade:	2301      	movs	r3, #1
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	78e1      	ldrb	r1, [r4, #3]
 8006ae4:	4668      	mov	r0, sp
 8006ae6:	47a8      	blx	r5
}
 8006ae8:	b003      	add	sp, #12
 8006aea:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006aee:	789b      	ldrb	r3, [r3, #2]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d005      	beq.n	8006b00 <LmhpComplianceTxProcess+0x74>
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d1e4      	bne.n	8006ac2 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	709a      	strb	r2, [r3, #2]
            break;
 8006afe:	e7e0      	b.n	8006ac2 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <LmhpComplianceTxProcess+0x90>)
 8006b02:	2202      	movs	r2, #2
 8006b04:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8006b06:	899a      	ldrh	r2, [r3, #12]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	0a11      	lsrs	r1, r2, #8
 8006b0c:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8006b0e:	705a      	strb	r2, [r3, #1]
            break;
 8006b10:	e7d7      	b.n	8006ac2 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8006b12:	f04f 30ff 	mov.w	r0, #4294967295
 8006b16:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8006b18:	2000      	movs	r0, #0
}
 8006b1a:	4770      	bx	lr
 8006b1c:	200003c0 	.word	0x200003c0
 8006b20:	200003d4 	.word	0x200003d4
 8006b24:	2000008c 	.word	0x2000008c

08006b28 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8006b28:	4b8d      	ldr	r3, [pc, #564]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8116 	beq.w	8006d5e <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 8006b32:	7b43      	ldrb	r3, [r0, #13]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8112 	beq.w	8006d5e <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 8006b3a:	4b89      	ldr	r3, [pc, #548]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	b12b      	cbz	r3, 8006b4c <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8006b40:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8006b42:	b91a      	cbnz	r2, 8006b4c <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8006b44:	4986      	ldr	r1, [pc, #536]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006b46:	898a      	ldrh	r2, [r1, #12]
 8006b48:	3201      	adds	r2, #1
 8006b4a:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8006b4c:	78c2      	ldrb	r2, [r0, #3]
 8006b4e:	2ae0      	cmp	r2, #224	; 0xe0
 8006b50:	f040 8105 	bne.w	8006d5e <LmhpComplianceOnMcpsIndication+0x236>
{
 8006b54:	b510      	push	{r4, lr}
 8006b56:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d140      	bne.n	8006bde <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006b5c:	7b03      	ldrb	r3, [r0, #12]
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d001      	beq.n	8006b66 <LmhpComplianceOnMcpsIndication+0x3e>
}
 8006b62:	b00c      	add	sp, #48	; 0x30
 8006b64:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006b66:	6883      	ldr	r3, [r0, #8]
 8006b68:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006b6a:	2a01      	cmp	r2, #1
 8006b6c:	d1f9      	bne.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006b6e:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006b70:	2a01      	cmp	r2, #1
 8006b72:	d1f6      	bne.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006b74:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006b76:	2a01      	cmp	r2, #1
 8006b78:	d1f3      	bne.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8006b7a:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d1f0      	bne.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006b80:	4b77      	ldr	r3, [pc, #476]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006b82:	2400      	movs	r4, #0
 8006b84:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8006b86:	22e0      	movs	r2, #224	; 0xe0
 8006b88:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8006b8e:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8006b90:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8006b92:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8006b94:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8006b96:	2201      	movs	r2, #1
 8006b98:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8006b9a:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 8006ba2:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006ba6:	a803      	add	r0, sp, #12
 8006ba8:	f002 fde6 	bl	8009778 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8006bac:	4620      	mov	r0, r4
 8006bae:	f003 f9eb 	bl	8009f88 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8006bb2:	4b6c      	ldr	r3, [pc, #432]	; (8006d64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	b103      	cbz	r3, 8006bbc <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8006bba:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8006bbc:	4c6a      	ldr	r4, [pc, #424]	; (8006d68 <LmhpComplianceOnMcpsIndication+0x240>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	9200      	str	r2, [sp, #0]
 8006bc2:	4b6a      	ldr	r3, [pc, #424]	; (8006d6c <LmhpComplianceOnMcpsIndication+0x244>)
 8006bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f009 ff81 	bl	8010ad0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006bce:	f241 3188 	movw	r1, #5000	; 0x1388
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f00a f882 	bl	8010cdc <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8006bd8:	f7ff ff58 	bl	8006a8c <LmhpComplianceTxProcess>
 8006bdc:	e7c1      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006bde:	6882      	ldr	r2, [r0, #8]
 8006be0:	7813      	ldrb	r3, [r2, #0]
 8006be2:	495f      	ldr	r1, [pc, #380]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006be4:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8006be6:	2b0a      	cmp	r3, #10
 8006be8:	d8bb      	bhi.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
 8006bea:	e8df f003 	tbb	[pc, r3]
 8006bee:	2206      	.short	0x2206
 8006bf0:	47312b26 	.word	0x47312b26
 8006bf4:	a49d6d4e 	.word	0xa49d6d4e
 8006bf8:	ae          	.byte	0xae
 8006bf9:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8006bfa:	485b      	ldr	r0, [pc, #364]	; (8006d68 <LmhpComplianceOnMcpsIndication+0x240>)
 8006bfc:	f009 ffc6 	bl	8010b8c <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006c00:	4b57      	ldr	r3, [pc, #348]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006c06:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006c0e:	4c55      	ldr	r4, [pc, #340]	; (8006d64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006c18:	a803      	add	r0, sp, #12
 8006c1a:	f002 fdad 	bl	8009778 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	7858      	ldrb	r0, [r3, #1]
 8006c22:	f003 f9b1 	bl	8009f88 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d099      	beq.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8006c2e:	4798      	blx	r3
            break;
 8006c30:	e797      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8006c32:	4b4b      	ldr	r3, [pc, #300]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c34:	2202      	movs	r2, #2
 8006c36:	719a      	strb	r2, [r3, #6]
            break;
 8006c38:	e793      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8006c3a:	4b49      	ldr	r3, [pc, #292]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006c40:	709a      	strb	r2, [r3, #2]
            break;
 8006c42:	e78e      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006c44:	4b46      	ldr	r3, [pc, #280]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	709a      	strb	r2, [r3, #2]
            break;
 8006c4e:	e788      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8006c50:	7b01      	ldrb	r1, [r0, #12]
 8006c52:	4b43      	ldr	r3, [pc, #268]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c54:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8006c56:	689c      	ldr	r4, [r3, #8]
 8006c58:	2304      	movs	r3, #4
 8006c5a:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e005      	b.n	8006c6c <LmhpComplianceOnMcpsIndication+0x144>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8006c60:	6882      	ldr	r2, [r0, #8]
 8006c62:	5cd2      	ldrb	r2, [r2, r3]
 8006c64:	3201      	adds	r2, #1
 8006c66:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006c68:	3301      	adds	r3, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	4a3c      	ldr	r2, [pc, #240]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c6e:	7952      	ldrb	r2, [r2, #5]
 8006c70:	428a      	cmp	r2, r1
 8006c72:	bf28      	it	cs
 8006c74:	460a      	movcs	r2, r1
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d8f2      	bhi.n	8006c60 <LmhpComplianceOnMcpsIndication+0x138>
 8006c7a:	e772      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006c82:	a803      	add	r0, sp, #12
 8006c84:	f002 fff0 	bl	8009c68 <LoRaMacMlmeRequest>
            break;
 8006c88:	e76b      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8006c8a:	4837      	ldr	r0, [pc, #220]	; (8006d68 <LmhpComplianceOnMcpsIndication+0x240>)
 8006c8c:	f009 ff7e 	bl	8010b8c <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006c90:	4b33      	ldr	r3, [pc, #204]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006c96:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006c9e:	4c31      	ldr	r4, [pc, #196]	; (8006d64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006ca8:	a803      	add	r0, sp, #12
 8006caa:	f002 fd65 	bl	8009778 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	7858      	ldrb	r0, [r3, #1]
 8006cb2:	f003 f969 	bl	8009f88 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	b103      	cbz	r3, 8006cbe <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8006cbc:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8006cbe:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <LmhpComplianceOnMcpsIndication+0x248>)
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	2002      	movs	r0, #2
 8006cc4:	4798      	blx	r3
            break;
 8006cc6:	e74c      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8006cc8:	7b03      	ldrb	r3, [r0, #12]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d008      	beq.n	8006ce0 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8006cce:	2b07      	cmp	r3, #7
 8006cd0:	d010      	beq.n	8006cf4 <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8006cd2:	a803      	add	r0, sp, #12
 8006cd4:	f002 ffc8 	bl	8009c68 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8006cd8:	4b21      	ldr	r3, [pc, #132]	; (8006d60 <LmhpComplianceOnMcpsIndication+0x238>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	709a      	strb	r2, [r3, #2]
            break;
 8006cde:	e740      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8006ce0:	2305      	movs	r3, #5
 8006ce2:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006ce6:	7851      	ldrb	r1, [r2, #1]
 8006ce8:	7893      	ldrb	r3, [r2, #2]
 8006cea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006cee:	f8ad 3010 	strh.w	r3, [sp, #16]
 8006cf2:	e7ee      	b.n	8006cd2 <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8006cf4:	2306      	movs	r3, #6
 8006cf6:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006cfa:	7851      	ldrb	r1, [r2, #1]
 8006cfc:	7893      	ldrb	r3, [r2, #2]
 8006cfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d02:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8006d06:	78d1      	ldrb	r1, [r2, #3]
 8006d08:	7913      	ldrb	r3, [r2, #4]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006d10:	7952      	ldrb	r2, [r2, #5]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	2264      	movs	r2, #100	; 0x64
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8006d1c:	6883      	ldr	r3, [r0, #8]
 8006d1e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006d22:	f88d 3018 	strb.w	r3, [sp, #24]
 8006d26:	e7d4      	b.n	8006cd2 <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8006d28:	230a      	movs	r3, #10
 8006d2a:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006d2e:	a803      	add	r0, sp, #12
 8006d30:	f002 ff9a 	bl	8009c68 <LoRaMacMlmeRequest>
            break;
 8006d34:	e715      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8006d3c:	7853      	ldrb	r3, [r2, #1]
 8006d3e:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006d42:	a803      	add	r0, sp, #12
 8006d44:	f002 fd18 	bl	8009778 <LoRaMacMibSetRequestConfirm>
            break;
 8006d48:	e70b      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8006d4a:	230d      	movs	r3, #13
 8006d4c:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8006d50:	7853      	ldrb	r3, [r2, #1]
 8006d52:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8006d56:	a803      	add	r0, sp, #12
 8006d58:	f002 ff86 	bl	8009c68 <LoRaMacMlmeRequest>
            break;
 8006d5c:	e701      	b.n	8006b62 <LmhpComplianceOnMcpsIndication+0x3a>
 8006d5e:	4770      	bx	lr
 8006d60:	200003c0 	.word	0x200003c0
 8006d64:	200003ec 	.word	0x200003ec
 8006d68:	200003d4 	.word	0x200003d4
 8006d6c:	08006d75 	.word	0x08006d75
 8006d70:	2000008c 	.word	0x2000008c

08006d74 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8006d74:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8006d76:	f7ff fe89 	bl	8006a8c <LmhpComplianceTxProcess>
}
 8006d7a:	bd08      	pop	{r3, pc}

08006d7c <LmhpCompliancePackageFactory>:
}
 8006d7c:	4800      	ldr	r0, [pc, #0]	; (8006d80 <LmhpCompliancePackageFactory+0x4>)
 8006d7e:	4770      	bx	lr
 8006d80:	2000008c 	.word	0x2000008c

08006d84 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8006d84:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8006d86:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <OnRadioRxError+0x1c>)
 8006d88:	7813      	ldrb	r3, [r2, #0]
 8006d8a:	f043 0302 	orr.w	r3, r3, #2
 8006d8e:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006d90:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <OnRadioRxError+0x20>)
 8006d92:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8006d96:	b113      	cbz	r3, 8006d9e <OnRadioRxError+0x1a>
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	b103      	cbz	r3, 8006d9e <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006d9c:	4798      	blx	r3
    }
}
 8006d9e:	bd08      	pop	{r3, pc}
 8006da0:	200003f0 	.word	0x200003f0
 8006da4:	200003f4 	.word	0x200003f4

08006da8 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006da8:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <UpdateRxSlotIdleState+0x20>)
 8006daa:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d004      	beq.n	8006dbc <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <UpdateRxSlotIdleState+0x24>)
 8006db4:	2206      	movs	r2, #6
 8006db6:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8006dba:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <UpdateRxSlotIdleState+0x24>)
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	200008fc 	.word	0x200008fc
 8006dcc:	200003f4 	.word	0x200003f4

08006dd0 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8006dd0:	4b01      	ldr	r3, [pc, #4]	; (8006dd8 <LoRaMacEnableRequests+0x8>)
 8006dd2:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8006dd6:	4770      	bx	lr
 8006dd8:	200003f4 	.word	0x200003f4

08006ddc <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8006ddc:	b530      	push	{r4, r5, lr}
 8006dde:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8006de0:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <LoRaMacHandleIndicationEvents+0x90>)
 8006de2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006de6:	f013 0f08 	tst.w	r3, #8
 8006dea:	d00e      	beq.n	8006e0a <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8006dec:	481f      	ldr	r0, [pc, #124]	; (8006e6c <LoRaMacHandleIndicationEvents+0x90>)
 8006dee:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8006df2:	f36f 03c3 	bfc	r3, #3, #1
 8006df6:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8006dfa:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8006e04:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8006e08:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8006e0a:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <LoRaMacHandleIndicationEvents+0x90>)
 8006e0c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006e10:	f013 0f10 	tst.w	r3, #16
 8006e14:	d013      	beq.n	8006e3e <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8006e16:	2307      	movs	r3, #7
 8006e18:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006e1c:	2500      	movs	r5, #0
 8006e1e:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8006e22:	4c12      	ldr	r4, [pc, #72]	; (8006e6c <LoRaMacHandleIndicationEvents+0x90>)
 8006e24:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8006e2e:	a801      	add	r0, sp, #4
 8006e30:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8006e32:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8006e36:	f365 1304 	bfi	r3, r5, #4, #1
 8006e3a:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <LoRaMacHandleIndicationEvents+0x90>)
 8006e40:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006e44:	f013 0f02 	tst.w	r3, #2
 8006e48:	d00e      	beq.n	8006e68 <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8006e4a:	4808      	ldr	r0, [pc, #32]	; (8006e6c <LoRaMacHandleIndicationEvents+0x90>)
 8006e4c:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8006e50:	f36f 0341 	bfc	r3, #1, #1
 8006e54:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8006e58:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8006e62:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8006e66:	4798      	blx	r3
    }
}
 8006e68:	b009      	add	sp, #36	; 0x24
 8006e6a:	bd30      	pop	{r4, r5, pc}
 8006e6c:	200003f4 	.word	0x200003f4

08006e70 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8006e70:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <LoRaMacCheckForRxAbort+0x18>)
 8006e72:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8006e76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e7a:	d004      	beq.n	8006e86 <LoRaMacCheckForRxAbort+0x16>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006e7c:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8006e80:	4a01      	ldr	r2, [pc, #4]	; (8006e88 <LoRaMacCheckForRxAbort+0x18>)
 8006e82:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8006e86:	4770      	bx	lr
 8006e88:	200003f4 	.word	0x200003f4

08006e8c <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006e8c:	4a03      	ldr	r2, [pc, #12]	; (8006e9c <SetMlmeScheduleUplinkIndication+0x10>)
 8006e8e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8006e92:	f043 0310 	orr.w	r3, r3, #16
 8006e96:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8006e9a:	4770      	bx	lr
 8006e9c:	200003f4 	.word	0x200003f4

08006ea0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <CalculateBackOff+0x1c>)
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	b94b      	cbnz	r3, 8006eba <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8006ea6:	4905      	ldr	r1, [pc, #20]	; (8006ebc <CalculateBackOff+0x1c>)
 8006ea8:	f8b1 2102 	ldrh.w	r2, [r1, #258]	; 0x102
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <CalculateBackOff+0x20>)
 8006eae:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8006eb2:	3a01      	subs	r2, #1
 8006eb4:	fb03 f302 	mul.w	r3, r3, r2
 8006eb8:	630b      	str	r3, [r1, #48]	; 0x30
    }
}
 8006eba:	4770      	bx	lr
 8006ebc:	200008fc 	.word	0x200008fc
 8006ec0:	200003f4 	.word	0x200003f4

08006ec4 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <SetTxContinuousWave1+0x24>)
 8006ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	b249      	sxtb	r1, r1
 8006ed4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8006ed6:	4a05      	ldr	r2, [pc, #20]	; (8006eec <SetTxContinuousWave1+0x28>)
 8006ed8:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8006edc:	f043 0302 	orr.w	r3, r3, #2
 8006ee0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	bd10      	pop	{r4, pc}
 8006ee8:	08011df8 	.word	0x08011df8
 8006eec:	200003f4 	.word	0x200003f4

08006ef0 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8006ef0:	4800      	ldr	r0, [pc, #0]	; (8006ef4 <GetNvmData+0x4>)
 8006ef2:	4770      	bx	lr
 8006ef4:	200008fc 	.word	0x200008fc

08006ef8 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8006ef8:	4602      	mov	r2, r0
 8006efa:	b1f8      	cbz	r0, 8006f3c <DetermineFrameType+0x44>
 8006efc:	b301      	cbz	r1, 8006f40 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8006efe:	7b03      	ldrb	r3, [r0, #12]
 8006f00:	f013 030f 	ands.w	r3, r3, #15
 8006f04:	d005      	beq.n	8006f12 <DetermineFrameType+0x1a>
 8006f06:	f890 0020 	ldrb.w	r0, [r0, #32]
 8006f0a:	b110      	cbz	r0, 8006f12 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	7008      	strb	r0, [r1, #0]
 8006f10:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8006f12:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8006f16:	b910      	cbnz	r0, 8006f1e <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	700b      	strb	r3, [r1, #0]
 8006f1c:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8006f1e:	b92b      	cbnz	r3, 8006f2c <DetermineFrameType+0x34>
 8006f20:	f892 0020 	ldrb.w	r0, [r2, #32]
 8006f24:	b910      	cbnz	r0, 8006f2c <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8006f26:	2302      	movs	r3, #2
 8006f28:	700b      	strb	r3, [r1, #0]
 8006f2a:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8006f2c:	b953      	cbnz	r3, 8006f44 <DetermineFrameType+0x4c>
 8006f2e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f32:	b14a      	cbz	r2, 8006f48 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8006f34:	2203      	movs	r2, #3
 8006f36:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8006f38:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8006f3a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8006f3c:	2003      	movs	r0, #3
 8006f3e:	4770      	bx	lr
 8006f40:	2003      	movs	r0, #3
 8006f42:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8006f44:	2017      	movs	r0, #23
 8006f46:	4770      	bx	lr
 8006f48:	2017      	movs	r0, #23
}
 8006f4a:	4770      	bx	lr

08006f4c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <CheckRetransUnconfirmedUplink+0x40>)
 8006f4e:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8006f52:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <CheckRetransUnconfirmedUplink+0x44>)
 8006f54:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d20f      	bcs.n	8006f7c <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <CheckRetransUnconfirmedUplink+0x40>)
 8006f5e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006f62:	f013 0f02 	tst.w	r3, #2
 8006f66:	d00b      	beq.n	8006f80 <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <CheckRetransUnconfirmedUplink+0x44>)
 8006f6a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8006f6e:	b14b      	cbz	r3, 8006f84 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <CheckRetransUnconfirmedUplink+0x40>)
 8006f72:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8006f76:	b13b      	cbz	r3, 8006f88 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8006f78:	2000      	movs	r0, #0
 8006f7a:	4770      	bx	lr
        return true;
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	4770      	bx	lr
    return false;
 8006f80:	2000      	movs	r0, #0
 8006f82:	4770      	bx	lr
            return true;
 8006f84:	2001      	movs	r0, #1
 8006f86:	4770      	bx	lr
                return true;
 8006f88:	2001      	movs	r0, #1
}
 8006f8a:	4770      	bx	lr
 8006f8c:	200003f4 	.word	0x200003f4
 8006f90:	200008fc 	.word	0x200008fc

08006f94 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <CheckRetransConfirmedUplink+0x2c>)
 8006f96:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8006f9a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d209      	bcs.n	8006fb6 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006fa2:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <CheckRetransConfirmedUplink+0x2c>)
 8006fa4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006fa8:	f013 0f02 	tst.w	r3, #2
 8006fac:	d005      	beq.n	8006fba <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8006fae:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <CheckRetransConfirmedUplink+0x2c>)
 8006fb0:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8006fb4:	4770      	bx	lr
        return true;
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8006fba:	2000      	movs	r0, #0
}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	200003f4 	.word	0x200003f4

08006fc4 <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8006fc4:	4b11      	ldr	r3, [pc, #68]	; (800700c <StopRetransmission+0x48>)
 8006fc6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006fca:	f013 0f02 	tst.w	r3, #2
 8006fce:	d004      	beq.n	8006fda <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8006fd0:	4b0e      	ldr	r3, [pc, #56]	; (800700c <StopRetransmission+0x48>)
 8006fd2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d907      	bls.n	8006fea <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8006fda:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <StopRetransmission+0x4c>)
 8006fdc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006fe0:	b11b      	cbz	r3, 8006fea <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8006fe2:	4a0b      	ldr	r2, [pc, #44]	; (8007010 <StopRetransmission+0x4c>)
 8006fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <StopRetransmission+0x48>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8006ff2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8006ff6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006ffa:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8006ffe:	f022 0202 	bic.w	r2, r2, #2
 8007002:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007006:	2001      	movs	r0, #1
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	200003f4 	.word	0x200003f4
 8007010:	200008fc 	.word	0x200008fc

08007014 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007014:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007016:	4b04      	ldr	r3, [pc, #16]	; (8007028 <CallNvmDataChangeCallback+0x14>)
 8007018:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800701c:	b113      	cbz	r3, 8007024 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800701e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007020:	b103      	cbz	r3, 8007024 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007022:	4798      	blx	r3
    }
}
 8007024:	bd08      	pop	{r3, pc}
 8007026:	bf00      	nop
 8007028:	200003f4 	.word	0x200003f4

0800702c <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <IsRequestPending+0x14>)
 800702e:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 8007032:	f010 0005 	ands.w	r0, r0, #5
 8007036:	d100      	bne.n	800703a <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007038:	4770      	bx	lr
        return 1;
 800703a:	2001      	movs	r0, #1
 800703c:	e7fc      	b.n	8007038 <IsRequestPending+0xc>
 800703e:	bf00      	nop
 8007040:	200003f4 	.word	0x200003f4

08007044 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8007044:	4a13      	ldr	r2, [pc, #76]	; (8007094 <AckTimeoutRetriesProcess+0x50>)
 8007046:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 800704a:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 800704e:	4293      	cmp	r3, r2
 8007050:	d207      	bcs.n	8007062 <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8007052:	3301      	adds	r3, #1
 8007054:	b2db      	uxtb	r3, r3
 8007056:	4a0f      	ldr	r2, [pc, #60]	; (8007094 <AckTimeoutRetriesProcess+0x50>)
 8007058:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800705c:	f013 0f01 	tst.w	r3, #1
 8007060:	d100      	bne.n	8007064 <AckTimeoutRetriesProcess+0x20>
 8007062:	4770      	bx	lr
{
 8007064:	b510      	push	{r4, lr}
 8007066:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007068:	2322      	movs	r3, #34	; 0x22
 800706a:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800706e:	4c0a      	ldr	r4, [pc, #40]	; (8007098 <AckTimeoutRetriesProcess+0x54>)
 8007070:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8007074:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007078:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 800707c:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007080:	a902      	add	r1, sp, #8
 8007082:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007086:	f003 fff6 	bl	800b076 <RegionGetPhyParam>
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800708a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 800708e:	b004      	add	sp, #16
 8007090:	bd10      	pop	{r4, pc}
 8007092:	bf00      	nop
 8007094:	200003f4 	.word	0x200003f4
 8007098:	200008fc 	.word	0x200008fc

0800709c <GetMaxAppPayloadWithoutFOptsLength>:
{
 800709c:	b500      	push	{lr}
 800709e:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 80070a2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80070a6:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 80070aa:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80070ae:	220d      	movs	r2, #13
 80070b0:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80070b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070b8:	b113      	cbz	r3, 80070c0 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80070ba:	230e      	movs	r3, #14
 80070bc:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80070c0:	a902      	add	r1, sp, #8
 80070c2:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 80070c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80070c8:	f003 ffd5 	bl	800b076 <RegionGetPhyParam>
}
 80070cc:	b2c0      	uxtb	r0, r0
 80070ce:	b005      	add	sp, #20
 80070d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d4:	200008fc 	.word	0x200008fc

080070d8 <ValidatePayloadLength>:
{
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4605      	mov	r5, r0
 80070dc:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80070de:	4608      	mov	r0, r1
 80070e0:	f7ff ffdc 	bl	800709c <GetMaxAppPayloadWithoutFOptsLength>
 80070e4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 80070e6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d303      	bcc.n	80070f4 <ValidatePayloadLength+0x1c>
 80070ec:	2aff      	cmp	r2, #255	; 0xff
 80070ee:	d903      	bls.n	80070f8 <ValidatePayloadLength+0x20>
    return false;
 80070f0:	2000      	movs	r0, #0
 80070f2:	e000      	b.n	80070f6 <ValidatePayloadLength+0x1e>
 80070f4:	2000      	movs	r0, #0
}
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80070f8:	2001      	movs	r0, #1
 80070fa:	e7fc      	b.n	80070f6 <ValidatePayloadLength+0x1e>

080070fc <ProcessRadioTxDone>:
{
 80070fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070fe:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007100:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <ProcessRadioTxDone+0xec>)
 8007102:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007106:	2b02      	cmp	r3, #2
 8007108:	d002      	beq.n	8007110 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800710a:	4b38      	ldr	r3, [pc, #224]	; (80071ec <ProcessRadioTxDone+0xf0>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007110:	4c37      	ldr	r4, [pc, #220]	; (80071f0 <ProcessRadioTxDone+0xf4>)
 8007112:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8007116:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800711a:	4628      	mov	r0, r5
 800711c:	f009 fdde 	bl	8010cdc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007120:	4628      	mov	r0, r5
 8007122:	f009 fd95 	bl	8010c50 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8007126:	f504 7566 	add.w	r5, r4, #920	; 0x398
 800712a:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800712e:	4628      	mov	r0, r5
 8007130:	f009 fdd4 	bl	8010cdc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8007134:	4628      	mov	r0, r5
 8007136:	f009 fd8b 	bl	8010c50 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800713a:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <ProcessRadioTxDone+0xec>)
 800713c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007140:	2b02      	cmp	r3, #2
 8007142:	d002      	beq.n	800714a <ProcessRadioTxDone+0x4e>
 8007144:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007148:	b1a3      	cbz	r3, 8007174 <ProcessRadioTxDone+0x78>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800714a:	2316      	movs	r3, #22
 800714c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007150:	a90a      	add	r1, sp, #40	; 0x28
 8007152:	4b25      	ldr	r3, [pc, #148]	; (80071e8 <ProcessRadioTxDone+0xec>)
 8007154:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007158:	f003 ff8d 	bl	800b076 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800715c:	4c24      	ldr	r4, [pc, #144]	; (80071f0 <ProcessRadioTxDone+0xf4>)
 800715e:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007162:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8007166:	4401      	add	r1, r0
 8007168:	4620      	mov	r0, r4
 800716a:	f009 fdb7 	bl	8010cdc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800716e:	4620      	mov	r0, r4
 8007170:	f009 fd6e 	bl	8010c50 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007174:	4b1f      	ldr	r3, [pc, #124]	; (80071f4 <ProcessRadioTxDone+0xf8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4c1b      	ldr	r4, [pc, #108]	; (80071e8 <ProcessRadioTxDone+0xec>)
 800717a:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800717c:	4f1c      	ldr	r7, [pc, #112]	; (80071f0 <ProcessRadioTxDone+0xf4>)
 800717e:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8007182:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8007186:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007188:	ae0c      	add	r6, sp, #48	; 0x30
 800718a:	4630      	mov	r0, r6
 800718c:	f009 fc34 	bl	80109f8 <SysTimeGetMcuTime>
 8007190:	ad02      	add	r5, sp, #8
 8007192:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800719c:	e896 0006 	ldmia.w	r6, {r1, r2}
 80071a0:	4628      	mov	r0, r5
 80071a2:	f009 fbca 	bl	801093a <SysTimeSub>
 80071a6:	ab07      	add	r3, sp, #28
 80071a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80071ac:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80071b0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80071b4:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80071bc:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80071c0:	b90b      	cbnz	r3, 80071c6 <ProcessRadioTxDone+0xca>
        txDone.Joined  = false;
 80071c2:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80071c6:	a904      	add	r1, sp, #16
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <ProcessRadioTxDone+0xec>)
 80071ca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80071ce:	f003 ff6a 	bl	800b0a6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <ProcessRadioTxDone+0xf4>)
 80071d4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80071d8:	b91b      	cbnz	r3, 80071e2 <ProcessRadioTxDone+0xe6>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <ProcessRadioTxDone+0xf4>)
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 80071e2:	b00f      	add	sp, #60	; 0x3c
 80071e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200008fc 	.word	0x200008fc
 80071ec:	08011df8 	.word	0x08011df8
 80071f0:	200003f4 	.word	0x200003f4
 80071f4:	200019cc 	.word	0x200019cc

080071f8 <OnAckTimeoutTimerEvent>:
{
 80071f8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80071fa:	4c10      	ldr	r4, [pc, #64]	; (800723c <OnAckTimeoutTimerEvent+0x44>)
 80071fc:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8007200:	f009 fcc4 	bl	8010b8c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8007204:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007208:	b113      	cbz	r3, 8007210 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800720a:	2201      	movs	r2, #1
 800720c:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <OnAckTimeoutTimerEvent+0x48>)
 8007212:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007216:	2b02      	cmp	r3, #2
 8007218:	d007      	beq.n	800722a <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800721a:	4b08      	ldr	r3, [pc, #32]	; (800723c <OnAckTimeoutTimerEvent+0x44>)
 800721c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007220:	b113      	cbz	r3, 8007228 <OnAckTimeoutTimerEvent+0x30>
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	b103      	cbz	r3, 8007228 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007226:	4798      	blx	r3
}
 8007228:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800722a:	4a04      	ldr	r2, [pc, #16]	; (800723c <OnAckTimeoutTimerEvent+0x44>)
 800722c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007230:	f043 0320 	orr.w	r3, r3, #32
 8007234:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8007238:	e7ef      	b.n	800721a <OnAckTimeoutTimerEvent+0x22>
 800723a:	bf00      	nop
 800723c:	200003f4 	.word	0x200003f4
 8007240:	200008fc 	.word	0x200008fc

08007244 <PrepareRxDoneAbort>:
{
 8007244:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <PrepareRxDoneAbort+0x34>)
 8007248:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800724c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007250:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8007254:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007258:	b94b      	cbnz	r3, 800726e <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <PrepareRxDoneAbort+0x34>)
 800725c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007260:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8007264:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007268:	f7ff fd9e 	bl	8006da8 <UpdateRxSlotIdleState>
}
 800726c:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 800726e:	2000      	movs	r0, #0
 8007270:	f7ff ffc2 	bl	80071f8 <OnAckTimeoutTimerEvent>
 8007274:	e7f1      	b.n	800725a <PrepareRxDoneAbort+0x16>
 8007276:	bf00      	nop
 8007278:	200003f4 	.word	0x200003f4

0800727c <LoRaMacCheckForBeaconAcquisition>:
{
 800727c:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800727e:	200c      	movs	r0, #12
 8007280:	f003 f98c 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 8007284:	b188      	cbz	r0, 80072aa <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8007288:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800728c:	f010 0f01 	tst.w	r0, #1
 8007290:	d10d      	bne.n	80072ae <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007292:	f010 0004 	ands.w	r0, r0, #4
 8007296:	d009      	beq.n	80072ac <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007298:	461a      	mov	r2, r3
 800729a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800729e:	f023 0302 	bic.w	r3, r3, #2
 80072a2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80072a6:	2001      	movs	r0, #1
 80072a8:	e000      	b.n	80072ac <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80072aa:	2000      	movs	r0, #0
}
 80072ac:	bd08      	pop	{r3, pc}
    return 0x00;
 80072ae:	2000      	movs	r0, #0
 80072b0:	e7fc      	b.n	80072ac <LoRaMacCheckForBeaconAcquisition+0x30>
 80072b2:	bf00      	nop
 80072b4:	200003f4 	.word	0x200003f4

080072b8 <GetFCntDown>:
{
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	9c05      	ldr	r4, [sp, #20]
 80072bc:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80072be:	b1fa      	cbz	r2, 8007300 <GetFCntDown+0x48>
 80072c0:	4616      	mov	r6, r2
 80072c2:	b1fc      	cbz	r4, 8007304 <GetFCntDown+0x4c>
 80072c4:	b305      	cbz	r5, 8007308 <GetFCntDown+0x50>
    switch( addrID )
 80072c6:	b188      	cbz	r0, 80072ec <GetFCntDown+0x34>
 80072c8:	2801      	cmp	r0, #1
 80072ca:	d11f      	bne.n	800730c <GetFCntDown+0x54>
            if( lrWanVersion.Fields.Minor == 1 )
 80072cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80072d0:	2a01      	cmp	r2, #1
 80072d2:	d002      	beq.n	80072da <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 80072d4:	2303      	movs	r3, #3
 80072d6:	7023      	strb	r3, [r4, #0]
 80072d8:	e00a      	b.n	80072f0 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80072da:	b121      	cbz	r1, 80072e6 <GetFCntDown+0x2e>
 80072dc:	2903      	cmp	r1, #3
 80072de:	d002      	beq.n	80072e6 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 80072e0:	2301      	movs	r3, #1
 80072e2:	7023      	strb	r3, [r4, #0]
 80072e4:	e004      	b.n	80072f0 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 80072e6:	2302      	movs	r3, #2
 80072e8:	7023      	strb	r3, [r4, #0]
 80072ea:	e001      	b.n	80072f0 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80072ec:	2304      	movs	r3, #4
 80072ee:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80072f0:	462b      	mov	r3, r5
 80072f2:	89f2      	ldrh	r2, [r6, #14]
 80072f4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80072f8:	7820      	ldrb	r0, [r4, #0]
 80072fa:	f003 fb71 	bl	800a9e0 <LoRaMacCryptoGetFCntDown>
}
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007300:	200a      	movs	r0, #10
 8007302:	e7fc      	b.n	80072fe <GetFCntDown+0x46>
 8007304:	200a      	movs	r0, #10
 8007306:	e7fa      	b.n	80072fe <GetFCntDown+0x46>
 8007308:	200a      	movs	r0, #10
 800730a:	e7f8      	b.n	80072fe <GetFCntDown+0x46>
    switch( addrID )
 800730c:	2005      	movs	r0, #5
 800730e:	e7f6      	b.n	80072fe <GetFCntDown+0x46>

08007310 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007310:	2801      	cmp	r0, #1
 8007312:	d900      	bls.n	8007316 <RemoveMacCommands+0x6>
 8007314:	4770      	bx	lr
{
 8007316:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8007318:	2a01      	cmp	r2, #1
 800731a:	d105      	bne.n	8007328 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800731c:	f011 0f20 	tst.w	r1, #32
 8007320:	d004      	beq.n	800732c <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8007322:	f002 ffd7 	bl	800a2d4 <LoRaMacCommandsRemoveStickyAnsCmds>
 8007326:	e001      	b.n	800732c <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8007328:	f002 ffd4 	bl	800a2d4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800732c:	bd08      	pop	{r3, pc}
	...

08007330 <ProcessMacCommands>:
{
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	b08f      	sub	sp, #60	; 0x3c
 8007336:	4605      	mov	r5, r0
 8007338:	460c      	mov	r4, r1
 800733a:	4616      	mov	r6, r2
 800733c:	4698      	mov	r8, r3
    uint8_t status = 0;
 800733e:	2700      	movs	r7, #0
 8007340:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007344:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8007348:	42b4      	cmp	r4, r6
 800734a:	f080 82b8 	bcs.w	80078be <ProcessMacCommands+0x58e>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800734e:	5d28      	ldrb	r0, [r5, r4]
 8007350:	f003 f828 	bl	800a3a4 <LoRaMacCommandsGetCmdSize>
 8007354:	4420      	add	r0, r4
 8007356:	42b0      	cmp	r0, r6
 8007358:	f300 82b1 	bgt.w	80078be <ProcessMacCommands+0x58e>
        switch( payload[macIndex++] )
 800735c:	f104 0901 	add.w	r9, r4, #1
 8007360:	fa5f f989 	uxtb.w	r9, r9
 8007364:	5d29      	ldrb	r1, [r5, r4]
 8007366:	3902      	subs	r1, #2
 8007368:	2911      	cmp	r1, #17
 800736a:	f200 82a8 	bhi.w	80078be <ProcessMacCommands+0x58e>
 800736e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007372:	0012      	.short	0x0012
 8007374:	00920029 	.word	0x00920029
 8007378:	00ed00a6 	.word	0x00ed00a6
 800737c:	013c0105 	.word	0x013c0105
 8007380:	01ab0155 	.word	0x01ab0155
 8007384:	02a602a6 	.word	0x02a602a6
 8007388:	02a601db 	.word	0x02a601db
 800738c:	023202a6 	.word	0x023202a6
 8007390:	02690249 	.word	0x02690249
 8007394:	0285      	.short	0x0285
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8007396:	2004      	movs	r0, #4
 8007398:	f003 f900 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 800739c:	b908      	cbnz	r0, 80073a2 <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 800739e:	464c      	mov	r4, r9
 80073a0:	e7d2      	b.n	8007348 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80073a2:	2104      	movs	r1, #4
 80073a4:	2000      	movs	r0, #0
 80073a6:	f003 f8ad 	bl	800a504 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80073aa:	1ca3      	adds	r3, r4, #2
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f815 1009 	ldrb.w	r1, [r5, r9]
 80073b2:	4ac1      	ldr	r2, [pc, #772]	; (80076b8 <ProcessMacCommands+0x388>)
 80073b4:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80073b8:	3403      	adds	r4, #3
 80073ba:	b2e4      	uxtb	r4, r4
 80073bc:	5ceb      	ldrb	r3, [r5, r3]
 80073be:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 80073c2:	e7c1      	b.n	8007348 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 80073ca:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 80073ce:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 80073d2:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 80073d6:	b10f      	cbz	r7, 80073dc <ProcessMacCommands+0xac>
                break;
 80073d8:	464c      	mov	r4, r9
 80073da:	e7b5      	b.n	8007348 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80073dc:	f109 33ff 	add.w	r3, r9, #4294967295
 80073e0:	442b      	add	r3, r5
 80073e2:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80073e4:	eba6 0309 	sub.w	r3, r6, r9
 80073e8:	3301      	adds	r3, #1
 80073ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80073ee:	48b3      	ldr	r0, [pc, #716]	; (80076bc <ProcessMacCommands+0x38c>)
 80073f0:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 80073f4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80073f8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80073fc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007400:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 8007404:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007408:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 800740c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007410:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8007414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8007418:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800741c:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800741e:	ab05      	add	r3, sp, #20
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	ab03      	add	r3, sp, #12
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	f10d 030b 	add.w	r3, sp, #11
 800742a:	f10d 020a 	add.w	r2, sp, #10
 800742e:	a907      	add	r1, sp, #28
 8007430:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8007434:	f003 feb3 	bl	800b19e <RegionLinkAdrReq>
 8007438:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 800743c:	f000 0007 	and.w	r0, r0, #7
 8007440:	2807      	cmp	r0, #7
 8007442:	d001      	beq.n	8007448 <ProcessMacCommands+0x118>
{
 8007444:	2400      	movs	r4, #0
 8007446:	e015      	b.n	8007474 <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8007448:	4b9c      	ldr	r3, [pc, #624]	; (80076bc <ProcessMacCommands+0x38c>)
 800744a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800744e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8007452:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8007456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800745a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800745e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8007462:	e7ef      	b.n	8007444 <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8007464:	2201      	movs	r2, #1
 8007466:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800746a:	2003      	movs	r0, #3
 800746c:	f002 fed2 	bl	800a214 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007470:	3401      	adds	r4, #1
 8007472:	b2e4      	uxtb	r4, r4
 8007474:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8007478:	4b91      	ldr	r3, [pc, #580]	; (80076c0 <ProcessMacCommands+0x390>)
 800747a:	fba3 1302 	umull	r1, r3, r3, r2
 800747e:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 8007482:	d3ef      	bcc.n	8007464 <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 8007484:	4491      	add	r9, r2
 8007486:	fa5f f989 	uxtb.w	r9, r9
 800748a:	f109 39ff 	add.w	r9, r9, #4294967295
 800748e:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 8007492:	2701      	movs	r7, #1
 8007494:	e7a0      	b.n	80073d8 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8007496:	3402      	adds	r4, #2
 8007498:	b2e4      	uxtb	r4, r4
 800749a:	f815 3009 	ldrb.w	r3, [r5, r9]
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	4986      	ldr	r1, [pc, #536]	; (80076bc <ProcessMacCommands+0x38c>)
 80074a4:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80074a8:	2201      	movs	r2, #1
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80074b2:	2200      	movs	r2, #0
 80074b4:	a90b      	add	r1, sp, #44	; 0x2c
 80074b6:	2004      	movs	r0, #4
 80074b8:	f002 feac 	bl	800a214 <LoRaMacCommandsAddCmd>
                break;
 80074bc:	e744      	b.n	8007348 <ProcessMacCommands+0x18>
                status = 0x07;
 80074be:	2307      	movs	r3, #7
 80074c0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80074c4:	f815 3009 	ldrb.w	r3, [r5, r9]
 80074c8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80074cc:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80074d0:	f915 3009 	ldrsb.w	r3, [r5, r9]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80074dc:	1ca3      	adds	r3, r4, #2
 80074de:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80074e0:	1ce1      	adds	r1, r4, #3
 80074e2:	b2c9      	uxtb	r1, r1
 80074e4:	5ceb      	ldrb	r3, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80074e6:	1d22      	adds	r2, r4, #4
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	5c69      	ldrb	r1, [r5, r1]
 80074ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80074f0:	3405      	adds	r4, #5
 80074f2:	b2e4      	uxtb	r4, r4
 80074f4:	5caa      	ldrb	r2, [r5, r2]
 80074f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                rxParamSetupReq.Frequency *= 100;
 80074fa:	2264      	movs	r2, #100	; 0x64
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
 8007500:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8007502:	a907      	add	r1, sp, #28
 8007504:	4b6d      	ldr	r3, [pc, #436]	; (80076bc <ProcessMacCommands+0x38c>)
 8007506:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800750a:	f003 fe61 	bl	800b1d0 <RegionRxParamSetupReq>
 800750e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8007512:	f000 0307 	and.w	r3, r0, #7
 8007516:	2b07      	cmp	r3, #7
 8007518:	d009      	beq.n	800752e <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 800751a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800751e:	2201      	movs	r2, #1
 8007520:	a90b      	add	r1, sp, #44	; 0x2c
 8007522:	2005      	movs	r0, #5
 8007524:	f002 fe76 	bl	800a214 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8007528:	f7ff fcb0 	bl	8006e8c <SetMlmeScheduleUplinkIndication>
                break;
 800752c:	e70c      	b.n	8007348 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800752e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8007532:	4b62      	ldr	r3, [pc, #392]	; (80076bc <ProcessMacCommands+0x38c>)
 8007534:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8007538:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800753c:	9a08      	ldr	r2, [sp, #32]
 800753e:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8007540:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8007542:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8007546:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800754a:	e7e6      	b.n	800751a <ProcessMacCommands+0x1ea>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800754c:	4b5a      	ldr	r3, [pc, #360]	; (80076b8 <ProcessMacCommands+0x388>)
 800754e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007552:	b17b      	cbz	r3, 8007574 <ProcessMacCommands+0x244>
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	b17b      	cbz	r3, 8007578 <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8007558:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800755a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800755e:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8007562:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8007566:	2202      	movs	r2, #2
 8007568:	a90b      	add	r1, sp, #44	; 0x2c
 800756a:	2006      	movs	r0, #6
 800756c:	f002 fe52 	bl	800a214 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8007570:	464c      	mov	r4, r9
                break;
 8007572:	e6e9      	b.n	8007348 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8007574:	20ff      	movs	r0, #255	; 0xff
 8007576:	e7f0      	b.n	800755a <ProcessMacCommands+0x22a>
 8007578:	20ff      	movs	r0, #255	; 0xff
 800757a:	e7ee      	b.n	800755a <ProcessMacCommands+0x22a>
                status = 0x03;
 800757c:	2303      	movs	r3, #3
 800757e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8007582:	1ca3      	adds	r3, r4, #2
 8007584:	b2db      	uxtb	r3, r3
 8007586:	f915 2009 	ldrsb.w	r2, [r5, r9]
 800758a:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800758e:	aa07      	add	r2, sp, #28
 8007590:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007592:	1ce2      	adds	r2, r4, #3
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	5ceb      	ldrb	r3, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007598:	1d21      	adds	r1, r4, #4
 800759a:	b2c9      	uxtb	r1, r1
 800759c:	5caa      	ldrb	r2, [r5, r2]
 800759e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80075a2:	1d62      	adds	r2, r4, #5
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	5c69      	ldrb	r1, [r5, r1]
 80075a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                chParam.Frequency *= 100;
 80075ac:	2164      	movs	r1, #100	; 0x64
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80075b8:	3406      	adds	r4, #6
 80075ba:	b2e4      	uxtb	r4, r4
 80075bc:	56ab      	ldrsb	r3, [r5, r2]
 80075be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80075c2:	a905      	add	r1, sp, #20
 80075c4:	4b3d      	ldr	r3, [pc, #244]	; (80076bc <ProcessMacCommands+0x38c>)
 80075c6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80075ca:	f003 fe10 	bl	800b1ee <RegionNewChannelReq>
 80075ce:	b2c3      	uxtb	r3, r0
 80075d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f6ff aeb7 	blt.w	8007348 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80075da:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80075de:	2201      	movs	r2, #1
 80075e0:	a90b      	add	r1, sp, #44	; 0x2c
 80075e2:	2007      	movs	r0, #7
 80075e4:	f002 fe16 	bl	800a214 <LoRaMacCommandsAddCmd>
                break;
 80075e8:	e6ae      	b.n	8007348 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80075ea:	3402      	adds	r4, #2
 80075ec:	b2e4      	uxtb	r4, r4
 80075ee:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 80075f2:	f013 020f 	ands.w	r2, r3, #15
 80075f6:	d100      	bne.n	80075fa <ProcessMacCommands+0x2ca>
                    delay++;
 80075f8:	3201      	adds	r2, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80075fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075fe:	fb03 f302 	mul.w	r3, r3, r2
 8007602:	4a2e      	ldr	r2, [pc, #184]	; (80076bc <ProcessMacCommands+0x38c>)
 8007604:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007606:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800760a:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800760c:	2200      	movs	r2, #0
 800760e:	a90b      	add	r1, sp, #44	; 0x2c
 8007610:	2008      	movs	r0, #8
 8007612:	f002 fdff 	bl	800a214 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8007616:	f7ff fc39 	bl	8006e8c <SetMlmeScheduleUplinkIndication>
                break;
 800761a:	e695      	b.n	8007348 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 800761c:	3402      	adds	r4, #2
 800761e:	b2e4      	uxtb	r4, r4
 8007620:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 8007624:	2200      	movs	r2, #0
 8007626:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800762a:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800762e:	f013 0f20 	tst.w	r3, #32
 8007632:	d002      	beq.n	800763a <ProcessMacCommands+0x30a>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8007634:	2201      	movs	r2, #1
 8007636:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800763a:	f013 0f10 	tst.w	r3, #16
 800763e:	d002      	beq.n	8007646 <ProcessMacCommands+0x316>
                    txParamSetupReq.UplinkDwellTime = 1;
 8007640:	2201      	movs	r2, #1
 8007642:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800764e:	a903      	add	r1, sp, #12
 8007650:	4b1a      	ldr	r3, [pc, #104]	; (80076bc <ProcessMacCommands+0x38c>)
 8007652:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007656:	f003 fdd9 	bl	800b20c <RegionTxParamSetupReq>
 800765a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800765e:	f43f ae73 	beq.w	8007348 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8007662:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8007666:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80076bc <ProcessMacCommands+0x38c>
 800766a:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800766e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007672:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007676:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800767a:	4a12      	ldr	r2, [pc, #72]	; (80076c4 <ProcessMacCommands+0x394>)
 800767c:	5cd0      	ldrb	r0, [r2, r3]
 800767e:	f7f9 f8a5 	bl	80007cc <__aeabi_ui2f>
 8007682:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8007686:	2302      	movs	r3, #2
 8007688:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800768c:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007690:	a907      	add	r1, sp, #28
 8007692:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8007696:	f003 fcee 	bl	800b076 <RegionGetPhyParam>
 800769a:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800769c:	b240      	sxtb	r0, r0
 800769e:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 80076a2:	4298      	cmp	r0, r3
 80076a4:	bfb8      	it	lt
 80076a6:	4618      	movlt	r0, r3
 80076a8:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80076ac:	2200      	movs	r2, #0
 80076ae:	a90b      	add	r1, sp, #44	; 0x2c
 80076b0:	2009      	movs	r0, #9
 80076b2:	f002 fdaf 	bl	800a214 <LoRaMacCommandsAddCmd>
                break;
 80076b6:	e647      	b.n	8007348 <ProcessMacCommands+0x18>
 80076b8:	200003f4 	.word	0x200003f4
 80076bc:	200008fc 	.word	0x200008fc
 80076c0:	cccccccd 	.word	0xcccccccd
 80076c4:	080117b4 	.word	0x080117b4
                status = 0x03;
 80076c8:	2303      	movs	r3, #3
 80076ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80076ce:	1ca3      	adds	r3, r4, #2
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f815 2009 	ldrb.w	r2, [r5, r9]
 80076d6:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80076da:	1ce1      	adds	r1, r4, #3
 80076dc:	b2c9      	uxtb	r1, r1
 80076de:	5ceb      	ldrb	r3, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80076e0:	1d22      	adds	r2, r4, #4
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	5c69      	ldrb	r1, [r5, r1]
 80076e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80076ea:	3405      	adds	r4, #5
 80076ec:	b2e4      	uxtb	r4, r4
 80076ee:	5caa      	ldrb	r2, [r5, r2]
 80076f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                dlChannelReq.Rx1Frequency *= 100;
 80076f4:	2264      	movs	r2, #100	; 0x64
 80076f6:	fb02 f303 	mul.w	r3, r2, r3
 80076fa:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80076fc:	a907      	add	r1, sp, #28
 80076fe:	4b71      	ldr	r3, [pc, #452]	; (80078c4 <ProcessMacCommands+0x594>)
 8007700:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007704:	f003 fd91 	bl	800b22a <RegionDlChannelReq>
 8007708:	b2c3      	uxtb	r3, r0
 800770a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800770e:	2800      	cmp	r0, #0
 8007710:	f6ff ae1a 	blt.w	8007348 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8007714:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8007718:	2201      	movs	r2, #1
 800771a:	a90b      	add	r1, sp, #44	; 0x2c
 800771c:	200a      	movs	r0, #10
 800771e:	f002 fd79 	bl	800a214 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 8007722:	f7ff fbb3 	bl	8006e8c <SetMlmeScheduleUplinkIndication>
                break;
 8007726:	e60f      	b.n	8007348 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8007728:	200a      	movs	r0, #10
 800772a:	f002 ff37 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 800772e:	b908      	cbnz	r0, 8007734 <ProcessMacCommands+0x404>
        switch( payload[macIndex++] )
 8007730:	464c      	mov	r4, r9
 8007732:	e609      	b.n	8007348 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8007734:	210a      	movs	r1, #10
 8007736:	2000      	movs	r0, #0
 8007738:	f002 fee4 	bl	800a504 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800773c:	2300      	movs	r3, #0
 800773e:	f8ad 3012 	strh.w	r3, [sp, #18]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8007742:	1ca1      	adds	r1, r4, #2
 8007744:	b2c9      	uxtb	r1, r1
 8007746:	f815 3009 	ldrb.w	r3, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800774a:	1ce2      	adds	r2, r4, #3
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	5c69      	ldrb	r1, [r5, r1]
 8007750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007754:	1d21      	adds	r1, r4, #4
 8007756:	b2c9      	uxtb	r1, r1
 8007758:	5caa      	ldrb	r2, [r5, r2]
 800775a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800775e:	1d62      	adds	r2, r4, #5
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	5c69      	ldrb	r1, [r5, r1]
 8007764:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007768:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800776a:	3406      	adds	r4, #6
 800776c:	b2e4      	uxtb	r4, r4
 800776e:	5ca9      	ldrb	r1, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007774:	fb02 f201 	mul.w	r2, r2, r1
 8007778:	0a12      	lsrs	r2, r2, #8
 800777a:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800777e:	f10d 0914 	add.w	r9, sp, #20
 8007782:	9904      	ldr	r1, [sp, #16]
 8007784:	4618      	mov	r0, r3
 8007786:	e889 0003 	stmia.w	r9, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800778a:	4a4f      	ldr	r2, [pc, #316]	; (80078c8 <ProcessMacCommands+0x598>)
 800778c:	441a      	add	r2, r3
 800778e:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8007790:	f10d 0b1c 	add.w	fp, sp, #28
 8007794:	4658      	mov	r0, fp
 8007796:	f009 f90f 	bl	80109b8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800779a:	f8df a130 	ldr.w	sl, [pc, #304]	; 80078cc <ProcessMacCommands+0x59c>
 800779e:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 80077a8:	e899 0006 	ldmia.w	r9, {r1, r2}
 80077ac:	a80c      	add	r0, sp, #48	; 0x30
 80077ae:	f009 f8c4 	bl	801093a <SysTimeSub>
 80077b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077b8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80077bc:	4648      	mov	r0, r9
 80077be:	f009 f89f 	bl	8010900 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80077c2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80077c6:	f009 f8d5 	bl	8010974 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80077ca:	f002 fc8c 	bl	800a0e6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f88a 3434 	strb.w	r3, [sl, #1076]	; 0x434
 80077d4:	e5b8      	b.n	8007348 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80077d6:	200d      	movs	r0, #13
 80077d8:	f002 fee0 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 80077dc:	b908      	cbnz	r0, 80077e2 <ProcessMacCommands+0x4b2>
        switch( payload[macIndex++] )
 80077de:	464c      	mov	r4, r9
 80077e0:	e5b2      	b.n	8007348 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80077e2:	210d      	movs	r1, #13
 80077e4:	2000      	movs	r0, #0
 80077e6:	f002 fe8d 	bl	800a504 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80077ea:	4b38      	ldr	r3, [pc, #224]	; (80078cc <ProcessMacCommands+0x59c>)
 80077ec:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80077f0:	3b04      	subs	r3, #4
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d801      	bhi.n	80077fc <ProcessMacCommands+0x4cc>
        switch( payload[macIndex++] )
 80077f8:	464c      	mov	r4, r9
 80077fa:	e5a5      	b.n	8007348 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 80077fc:	f002 fc6f 	bl	800a0de <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8007800:	464c      	mov	r4, r9
 8007802:	e5a1      	b.n	8007348 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8007804:	1ca2      	adds	r2, r4, #2
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800780c:	1ce1      	adds	r1, r4, #3
 800780e:	b2c9      	uxtb	r1, r1
 8007810:	5caa      	ldrb	r2, [r5, r2]
 8007812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007816:	1d22      	adds	r2, r4, #4
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	5c69      	ldrb	r1, [r5, r1]
 800781c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8007820:	3405      	adds	r4, #5
 8007822:	b2e4      	uxtb	r4, r4
 8007824:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8007826:	2164      	movs	r1, #100	; 0x64
 8007828:	fb01 f103 	mul.w	r1, r1, r3
 800782c:	f000 000f 	and.w	r0, r0, #15
 8007830:	f002 fc56 	bl	800a0e0 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8007834:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8007838:	2201      	movs	r2, #1
 800783a:	a90b      	add	r1, sp, #44	; 0x2c
 800783c:	2011      	movs	r0, #17
 800783e:	f002 fce9 	bl	800a214 <LoRaMacCommandsAddCmd>
                break;
 8007842:	e581      	b.n	8007348 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8007844:	200e      	movs	r0, #14
 8007846:	f002 fea9 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 800784a:	b908      	cbnz	r0, 8007850 <ProcessMacCommands+0x520>
        switch( payload[macIndex++] )
 800784c:	464c      	mov	r4, r9
 800784e:	e57b      	b.n	8007348 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8007850:	210e      	movs	r1, #14
 8007852:	2000      	movs	r0, #0
 8007854:	f002 fe56 	bl	800a504 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8007858:	1ca2      	adds	r2, r4, #2
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007860:	1ce3      	adds	r3, r4, #3
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8007868:	3404      	adds	r4, #4
 800786a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800786c:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <ProcessMacCommands+0x5a0>)
 800786e:	6812      	ldr	r2, [r2, #0]
 8007870:	5ce9      	ldrb	r1, [r5, r3]
 8007872:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8007876:	f002 fc35 	bl	800a0e4 <LoRaMacClassBBeaconTimingAns>
 800787a:	e565      	b.n	8007348 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 800787c:	1ca1      	adds	r1, r4, #2
 800787e:	b2c9      	uxtb	r1, r1
 8007880:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007884:	1ce2      	adds	r2, r4, #3
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	5c68      	ldrb	r0, [r5, r1]
 800788a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800788e:	3404      	adds	r4, #4
 8007890:	b2e4      	uxtb	r4, r4
 8007892:	5ca8      	ldrb	r0, [r5, r2]
 8007894:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007898:	2064      	movs	r0, #100	; 0x64
 800789a:	fb00 f003 	mul.w	r0, r0, r3
 800789e:	f002 fc23 	bl	800a0e8 <LoRaMacClassBBeaconFreqReq>
 80078a2:	b140      	cbz	r0, 80078b6 <ProcessMacCommands+0x586>
                        macCmdPayload[0] = 1;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80078aa:	2201      	movs	r2, #1
 80078ac:	a90b      	add	r1, sp, #44	; 0x2c
 80078ae:	2013      	movs	r0, #19
 80078b0:	f002 fcb0 	bl	800a214 <LoRaMacCommandsAddCmd>
                break;
 80078b4:	e548      	b.n	8007348 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80078bc:	e7f5      	b.n	80078aa <ProcessMacCommands+0x57a>
}
 80078be:	b00f      	add	sp, #60	; 0x3c
 80078c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c4:	200008fc 	.word	0x200008fc
 80078c8:	12d53d80 	.word	0x12d53d80
 80078cc:	200003f4 	.word	0x200003f4
 80078d0:	200019d0 	.word	0x200019d0

080078d4 <ProcessRadioRxDone>:
{
 80078d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078d8:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 80078da:	4bbd      	ldr	r3, [pc, #756]	; (8007bd0 <ProcessRadioRxDone+0x2fc>)
 80078dc:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80078de:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80078e0:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80078e4:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80078ec:	4ab9      	ldr	r2, [pc, #740]	; (8007bd4 <ProcessRadioRxDone+0x300>)
 80078ee:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 80078f2:	4cb9      	ldr	r4, [pc, #740]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 80078f4:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80078f8:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 80078fc:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8007900:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 8007904:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8007908:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800790c:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8007910:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8007914:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8007918:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800791c:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8007920:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8007924:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007928:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800792c:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8007930:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8007934:	4ba9      	ldr	r3, [pc, #676]	; (8007bdc <ProcessRadioRxDone+0x308>)
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800793a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800793e:	f009 f925 	bl	8010b8c <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8007942:	4629      	mov	r1, r5
 8007944:	4630      	mov	r0, r6
 8007946:	f002 fbb7 	bl	800a0b8 <LoRaMacClassBRxBeacon>
 800794a:	b998      	cbnz	r0, 8007974 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800794c:	4ba1      	ldr	r3, [pc, #644]	; (8007bd4 <ProcessRadioRxDone+0x300>)
 800794e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007952:	2b01      	cmp	r3, #1
 8007954:	d013      	beq.n	800797e <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8007956:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8007958:	0963      	lsrs	r3, r4, #5
 800795a:	3b01      	subs	r3, #1
 800795c:	2b06      	cmp	r3, #6
 800795e:	f200 827c 	bhi.w	8007e5a <ProcessRadioRxDone+0x586>
 8007962:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007966:	0029      	.short	0x0029
 8007968:	00a7027a 	.word	0x00a7027a
 800796c:	00a3027a 	.word	0x00a3027a
 8007970:	0254027a 	.word	0x0254027a
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8007974:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8007978:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 800797c:	e282      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800797e:	f002 fb9f 	bl	800a0c0 <LoRaMacClassBIsPingExpected>
 8007982:	b150      	cbz	r0, 800799a <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007984:	2000      	movs	r0, #0
 8007986:	f002 fb90 	bl	800a0aa <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800798a:	2000      	movs	r0, #0
 800798c:	f002 fb92 	bl	800a0b4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8007990:	4b91      	ldr	r3, [pc, #580]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007992:	2204      	movs	r2, #4
 8007994:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8007998:	e7dd      	b.n	8007956 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800799a:	f002 fb93 	bl	800a0c4 <LoRaMacClassBIsMulticastExpected>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d0d9      	beq.n	8007956 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80079a2:	2000      	movs	r0, #0
 80079a4:	f002 fb82 	bl	800a0ac <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80079a8:	2000      	movs	r0, #0
 80079aa:	f002 fb84 	bl	800a0b6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80079ae:	4b8a      	ldr	r3, [pc, #552]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 80079b0:	2205      	movs	r2, #5
 80079b2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80079b6:	e7ce      	b.n	8007956 <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80079b8:	2d10      	cmp	r5, #16
 80079ba:	d95a      	bls.n	8007a72 <ProcessRadioRxDone+0x19e>
            macMsgJoinAccept.Buffer = payload;
 80079bc:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 80079be:	b2ed      	uxtb	r5, r5
 80079c0:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80079c4:	4b83      	ldr	r3, [pc, #524]	; (8007bd4 <ProcessRadioRxDone+0x300>)
 80079c6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d158      	bne.n	8007a80 <ProcessRadioRxDone+0x1ac>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80079ce:	f006 fbe9 	bl	800e1a4 <SecureElementGetJoinEui>
 80079d2:	4601      	mov	r1, r0
 80079d4:	aa07      	add	r2, sp, #28
 80079d6:	20ff      	movs	r0, #255	; 0xff
 80079d8:	f003 f976 	bl	800acc8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80079dc:	2800      	cmp	r0, #0
 80079de:	d15b      	bne.n	8007a98 <ProcessRadioRxDone+0x1c4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80079e0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80079e4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80079e8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80079ec:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 80079f0:	4b78      	ldr	r3, [pc, #480]	; (8007bd4 <ProcessRadioRxDone+0x300>)
 80079f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80079f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80079fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079fc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8007a00:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8007a04:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8007a08:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007a0c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8007a10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007a14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8007a18:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8007a1c:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8007a1e:	b90a      	cbnz	r2, 8007a24 <ProcessRadioRxDone+0x150>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8007a20:	2201      	movs	r2, #1
 8007a22:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8007a24:	4c6b      	ldr	r4, [pc, #428]	; (8007bd4 <ProcessRadioRxDone+0x300>)
 8007a26:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a2c:	fb03 f302 	mul.w	r3, r3, r2
 8007a30:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007a32:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007a36:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8007a3e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8007a42:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 8007a44:	3d11      	subs	r5, #17
 8007a46:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007a4a:	a920      	add	r1, sp, #128	; 0x80
 8007a4c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007a50:	f003 fb55 	bl	800b0fe <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007a54:	2302      	movs	r3, #2
 8007a56:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	f002 fd9e 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 8007a60:	b9a8      	cbnz	r0, 8007a8e <ProcessRadioRxDone+0x1ba>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8007a62:	4a5d      	ldr	r2, [pc, #372]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007a64:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007a68:	f043 0308 	orr.w	r3, r3, #8
 8007a6c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8007a70:	e1e7      	b.n	8007e42 <ProcessRadioRxDone+0x56e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a72:	4b59      	ldr	r3, [pc, #356]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007a7a:	f7ff fbe3 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007a7e:	e201      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a80:	4b55      	ldr	r3, [pc, #340]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007a88:	f7ff fbdc 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007a8c:	e1fa      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8007a8e:	2101      	movs	r1, #1
 8007a90:	2000      	movs	r0, #0
 8007a92:	f002 fd37 	bl	800a504 <LoRaMacConfirmQueueSetStatus>
 8007a96:	e7e4      	b.n	8007a62 <ProcessRadioRxDone+0x18e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f002 fd7f 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d0df      	beq.n	8007a62 <ProcessRadioRxDone+0x18e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	2007      	movs	r0, #7
 8007aa6:	f002 fd2d 	bl	800a504 <LoRaMacConfirmQueueSetStatus>
 8007aaa:	e7da      	b.n	8007a62 <ProcessRadioRxDone+0x18e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007aac:	4b4a      	ldr	r3, [pc, #296]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007ab4:	4b47      	ldr	r3, [pc, #284]	; (8007bd4 <ProcessRadioRxDone+0x300>)
 8007ab6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8007aba:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8007abe:	4a46      	ldr	r2, [pc, #280]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007ac0:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 8007ac4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007ac8:	220d      	movs	r2, #13
 8007aca:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007ace:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ad2:	b113      	cbz	r3, 8007ada <ProcessRadioRxDone+0x206>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007ad4:	230e      	movs	r3, #14
 8007ad6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007ada:	a91e      	add	r1, sp, #120	; 0x78
 8007adc:	4b3d      	ldr	r3, [pc, #244]	; (8007bd4 <ProcessRadioRxDone+0x300>)
 8007ade:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007ae2:	f003 fac8 	bl	800b076 <RegionGetPhyParam>
 8007ae6:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8007ae8:	f1a5 030d 	sub.w	r3, r5, #13
 8007aec:	b21b      	sxth	r3, r3
 8007aee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007af2:	b200      	sxth	r0, r0
 8007af4:	4283      	cmp	r3, r0
 8007af6:	dc01      	bgt.n	8007afc <ProcessRadioRxDone+0x228>
 8007af8:	2d0b      	cmp	r5, #11
 8007afa:	d806      	bhi.n	8007b0a <ProcessRadioRxDone+0x236>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007afc:	4b36      	ldr	r3, [pc, #216]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007b04:	f7ff fb9e 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007b08:	e1bc      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
            macMsgData.Buffer = payload;
 8007b0a:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8007b0c:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8007b10:	4b33      	ldr	r3, [pc, #204]	; (8007be0 <ProcessRadioRxDone+0x30c>)
 8007b12:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8007b14:	23ff      	movs	r3, #255	; 0xff
 8007b16:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8007b1a:	a811      	add	r0, sp, #68	; 0x44
 8007b1c:	f003 f998 	bl	800ae50 <LoRaMacParserData>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d146      	bne.n	8007bb2 <ProcessRadioRxDone+0x2de>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8007b24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b26:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007b28:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8007b2c:	f10d 0116 	add.w	r1, sp, #22
 8007b30:	a811      	add	r0, sp, #68	; 0x44
 8007b32:	f7ff f9e1 	bl	8006ef8 <DetermineFrameType>
 8007b36:	4605      	mov	r5, r0
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d141      	bne.n	8007bc0 <ProcessRadioRxDone+0x2ec>
            downLinkCounter = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d04e      	beq.n	8007be4 <ProcessRadioRxDone+0x310>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8007b46:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8007b48:	2d01      	cmp	r5, #1
 8007b4a:	d108      	bne.n	8007b5e <ProcessRadioRxDone+0x28a>
 8007b4c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d174      	bne.n	8007c3e <ProcessRadioRxDone+0x36a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8007b54:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8007b58:	f013 0f60 	tst.w	r3, #96	; 0x60
 8007b5c:	d16f      	bne.n	8007c3e <ProcessRadioRxDone+0x36a>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8007b5e:	2315      	movs	r3, #21
 8007b60:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b64:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8007bd4 <ProcessRadioRxDone+0x300>
 8007b68:	a91e      	add	r1, sp, #120	; 0x78
 8007b6a:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8007b6e:	f003 fa82 	bl	800b076 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8007b72:	ab06      	add	r3, sp, #24
 8007b74:	9302      	str	r3, [sp, #8]
 8007b76:	f10d 0317 	add.w	r3, sp, #23
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	b280      	uxth	r0, r0
 8007b7e:	9000      	str	r0, [sp, #0]
 8007b80:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
 8007b84:	aa11      	add	r2, sp, #68	; 0x44
 8007b86:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7ff fb94 	bl	80072b8 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d075      	beq.n	8007c80 <ProcessRadioRxDone+0x3ac>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8007b94:	2807      	cmp	r0, #7
 8007b96:	d059      	beq.n	8007c4c <ProcessRadioRxDone+0x378>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8007b98:	2808      	cmp	r0, #8
 8007b9a:	d06c      	beq.n	8007c76 <ProcessRadioRxDone+0x3a2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007ba6:	9a06      	ldr	r2, [sp, #24]
 8007ba8:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8007bac:	f7ff fb4a 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007bb0:	e168      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007bb2:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007bba:	f7ff fb43 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007bbe:	e161      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <ProcessRadioRxDone+0x304>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007bc8:	f7ff fb3c 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007bcc:	e15a      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
 8007bce:	bf00      	nop
 8007bd0:	200019d0 	.word	0x200019d0
 8007bd4:	200008fc 	.word	0x200008fc
 8007bd8:	200003f4 	.word	0x200003f4
 8007bdc:	08011df8 	.word	0x08011df8
 8007be0:	2000062c 	.word	0x2000062c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007be4:	4618      	mov	r0, r3
 8007be6:	49ab      	ldr	r1, [pc, #684]	; (8007e94 <ProcessRadioRxDone+0x5c0>)
 8007be8:	222c      	movs	r2, #44	; 0x2c
 8007bea:	fb02 1203 	mla	r2, r2, r3, r1
 8007bee:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8007bf2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007bf4:	428a      	cmp	r2, r1
 8007bf6:	d002      	beq.n	8007bfe <ProcessRadioRxDone+0x32a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	e7a1      	b.n	8007b42 <ProcessRadioRxDone+0x26e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8007bfe:	4ea5      	ldr	r6, [pc, #660]	; (8007e94 <ProcessRadioRxDone+0x5c0>)
 8007c00:	212c      	movs	r1, #44	; 0x2c
 8007c02:	fb01 6103 	mla	r1, r1, r3, r6
 8007c06:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007c0a:	2900      	cmp	r1, #0
 8007c0c:	d0f4      	beq.n	8007bf8 <ProcessRadioRxDone+0x324>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8007c0e:	4633      	mov	r3, r6
 8007c10:	212c      	movs	r1, #44	; 0x2c
 8007c12:	fb01 6000 	mla	r0, r1, r0, r6
 8007c16:	f890 60d3 	ldrb.w	r6, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8007c1a:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8007c1e:	6809      	ldr	r1, [r1, #0]
 8007c20:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007c22:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d002      	beq.n	8007c30 <ProcessRadioRxDone+0x35c>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007c2a:	4690      	mov	r8, r2
                    multicast = 1;
 8007c2c:	2501      	movs	r5, #1
 8007c2e:	e78b      	b.n	8007b48 <ProcessRadioRxDone+0x274>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007c30:	4b99      	ldr	r3, [pc, #612]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007c32:	2103      	movs	r1, #3
 8007c34:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007c38:	4690      	mov	r8, r2
                    multicast = 1;
 8007c3a:	2501      	movs	r5, #1
 8007c3c:	e784      	b.n	8007b48 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007c3e:	4b96      	ldr	r3, [pc, #600]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007c46:	f7ff fafd 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007c4a:	e11b      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8007c4c:	4b92      	ldr	r3, [pc, #584]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007c4e:	2208      	movs	r2, #8
 8007c50:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8007c54:	f899 310e 	ldrb.w	r3, [r9, #270]	; 0x10e
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1a3      	bne.n	8007ba4 <ProcessRadioRxDone+0x2d0>
 8007c5c:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8007c60:	2ca0      	cmp	r4, #160	; 0xa0
 8007c62:	d19f      	bne.n	8007ba4 <ProcessRadioRxDone+0x2d0>
 8007c64:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 8007c68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d19a      	bne.n	8007ba4 <ProcessRadioRxDone+0x2d0>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f889 203a 	strb.w	r2, [r9, #58]	; 0x3a
 8007c74:	e796      	b.n	8007ba4 <ProcessRadioRxDone+0x2d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8007c76:	4b88      	ldr	r3, [pc, #544]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007c78:	220a      	movs	r2, #10
 8007c7a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8007c7e:	e791      	b.n	8007ba4 <ProcessRadioRxDone+0x2d0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8007c80:	ab11      	add	r3, sp, #68	; 0x44
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	9b06      	ldr	r3, [sp, #24]
 8007c86:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f002 ff6f 	bl	800ab70 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d13a      	bne.n	8007d0c <ProcessRadioRxDone+0x438>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007c96:	4b80      	ldr	r3, [pc, #512]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007c98:	2100      	movs	r1, #0
 8007c9a:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8007c9e:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007ca2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007ca6:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8007caa:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8007cae:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8007cb2:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007cb6:	9806      	ldr	r0, [sp, #24]
 8007cb8:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007cbc:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007cc0:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007cc4:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007cc8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007ccc:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8007cd0:	2801      	cmp	r0, #1
 8007cd2:	d929      	bls.n	8007d28 <ProcessRadioRxDone+0x454>
            if( multicast == 1 )
 8007cd4:	2d01      	cmp	r5, #1
 8007cd6:	d02a      	beq.n	8007d2e <ProcessRadioRxDone+0x45a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8007cd8:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8007cdc:	2ca0      	cmp	r4, #160	; 0xa0
 8007cde:	d02b      	beq.n	8007d38 <ProcessRadioRxDone+0x464>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4a6c      	ldr	r2, [pc, #432]	; (8007e94 <ProcessRadioRxDone+0x5c0>)
 8007ce4:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007ce8:	4a6b      	ldr	r2, [pc, #428]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007cea:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8007cee:	4b6a      	ldr	r3, [pc, #424]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007cf0:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 8007cf4:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8007cf8:	f7ff fb0a 	bl	8007310 <RemoveMacCommands>
            switch( fType )
 8007cfc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d87d      	bhi.n	8007e00 <ProcessRadioRxDone+0x52c>
 8007d04:	e8df f003 	tbb	[pc, r3]
 8007d08:	6c5c4a27 	.word	0x6c5c4a27
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8007d0c:	2802      	cmp	r0, #2
 8007d0e:	d006      	beq.n	8007d1e <ProcessRadioRxDone+0x44a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8007d10:	4b61      	ldr	r3, [pc, #388]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007d12:	220c      	movs	r2, #12
 8007d14:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007d18:	f7ff fa94 	bl	8007244 <PrepareRxDoneAbort>
                return;
 8007d1c:	e0b2      	b.n	8007e84 <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8007d1e:	4b5e      	ldr	r3, [pc, #376]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007d20:	220b      	movs	r2, #11
 8007d22:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8007d26:	e7f7      	b.n	8007d18 <ProcessRadioRxDone+0x444>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8007d28:	4b5a      	ldr	r3, [pc, #360]	; (8007e94 <ProcessRadioRxDone+0x5c0>)
 8007d2a:	6299      	str	r1, [r3, #40]	; 0x28
 8007d2c:	e7d2      	b.n	8007cd4 <ProcessRadioRxDone+0x400>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8007d2e:	4b5a      	ldr	r3, [pc, #360]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8007d36:	e7da      	b.n	8007cee <ProcessRadioRxDone+0x41a>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8007d38:	4b56      	ldr	r3, [pc, #344]	; (8007e94 <ProcessRadioRxDone+0x5c0>)
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8007d40:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8007d44:	b913      	cbnz	r3, 8007d4c <ProcessRadioRxDone+0x478>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8007d46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d48:	4b52      	ldr	r3, [pc, #328]	; (8007e94 <ProcessRadioRxDone+0x5c0>)
 8007d4a:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007d4c:	4b52      	ldr	r3, [pc, #328]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8007d54:	e7cb      	b.n	8007cee <ProcessRadioRxDone+0x41a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007d56:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007d5a:	4c4f      	ldr	r4, [pc, #316]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007d5c:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	463b      	mov	r3, r7
 8007d64:	f002 020f 	and.w	r2, r2, #15
 8007d68:	2100      	movs	r1, #0
 8007d6a:	a815      	add	r0, sp, #84	; 0x54
 8007d6c:	f7ff fae0 	bl	8007330 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007d70:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007d74:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007d78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d7a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007d7e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8007d82:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007d8c:	4a42      	ldr	r2, [pc, #264]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007d8e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007d92:	f043 0302 	orr.w	r3, r3, #2
 8007d96:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8007d9a:	e052      	b.n	8007e42 <ProcessRadioRxDone+0x56e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007d9c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007da0:	4c3d      	ldr	r4, [pc, #244]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007da2:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	463b      	mov	r3, r7
 8007daa:	f002 020f 	and.w	r2, r2, #15
 8007dae:	2100      	movs	r1, #0
 8007db0:	a815      	add	r0, sp, #84	; 0x54
 8007db2:	f7ff fabd 	bl	8007330 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007db6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007dba:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8007dbe:	e7e5      	b.n	8007d8c <ProcessRadioRxDone+0x4b8>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8007dc0:	4c35      	ldr	r4, [pc, #212]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007dc2:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	463b      	mov	r3, r7
 8007dca:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8007dce:	2100      	movs	r1, #0
 8007dd0:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007dd2:	f7ff faad 	bl	8007330 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007dd6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007dda:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8007dde:	e7d5      	b.n	8007d8c <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007de0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8007de4:	4b2c      	ldr	r3, [pc, #176]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007de6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007dea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007dec:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007df0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8007df4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8007dfe:	e7c5      	b.n	8007d8c <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8007e08:	f7ff fa1c 	bl	8007244 <PrepareRxDoneAbort>
                    break;
 8007e0c:	e7be      	b.n	8007d8c <ProcessRadioRxDone+0x4b8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8007e0e:	1e6a      	subs	r2, r5, #1
 8007e10:	4c21      	ldr	r4, [pc, #132]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007e12:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8007e16:	b292      	uxth	r2, r2
 8007e18:	1c71      	adds	r1, r6, #1
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	f006 f9f3 	bl	800e206 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8007e20:	2303      	movs	r3, #3
 8007e22:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8007e2c:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8007e30:	3d01      	subs	r5, #1
 8007e32:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007e36:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8007e3a:	f043 0302 	orr.w	r3, r3, #2
 8007e3e:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007e44:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007e48:	b173      	cbz	r3, 8007e68 <ProcessRadioRxDone+0x594>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007e4c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8007e50:	b17b      	cbz	r3, 8007e72 <ProcessRadioRxDone+0x59e>
            OnAckTimeoutTimerEvent( NULL );
 8007e52:	2000      	movs	r0, #0
 8007e54:	f7ff f9d0 	bl	80071f8 <OnAckTimeoutTimerEvent>
 8007e58:	e00b      	b.n	8007e72 <ProcessRadioRxDone+0x59e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8007e62:	f7ff f9ef 	bl	8007244 <PrepareRxDoneAbort>
            break;
 8007e66:	e7ec      	b.n	8007e42 <ProcessRadioRxDone+0x56e>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <ProcessRadioRxDone+0x5c0>)
 8007e6a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d00b      	beq.n	8007e8a <ProcessRadioRxDone+0x5b6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007e72:	4a09      	ldr	r2, [pc, #36]	; (8007e98 <ProcessRadioRxDone+0x5c4>)
 8007e74:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007e78:	f043 0320 	orr.w	r3, r3, #32
 8007e7c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007e80:	f7fe ff92 	bl	8006da8 <UpdateRxSlotIdleState>
}
 8007e84:	b023      	add	sp, #140	; 0x8c
 8007e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f7ff f9b4 	bl	80071f8 <OnAckTimeoutTimerEvent>
 8007e90:	e7ef      	b.n	8007e72 <ProcessRadioRxDone+0x59e>
 8007e92:	bf00      	nop
 8007e94:	200008fc 	.word	0x200008fc
 8007e98:	200003f4 	.word	0x200003f4

08007e9c <ProcessRadioTxTimeout>:
{
 8007e9c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <ProcessRadioTxTimeout+0x40>)
 8007ea0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d002      	beq.n	8007eae <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <ProcessRadioTxTimeout+0x44>)
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8007eae:	f7fe ff7b 	bl	8006da8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <ProcessRadioTxTimeout+0x48>)
 8007eb4:	2002      	movs	r0, #2
 8007eb6:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8007eba:	f002 fb51 	bl	800a560 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8007ebe:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007ec2:	b113      	cbz	r3, 8007eca <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007eca:	4a06      	ldr	r2, [pc, #24]	; (8007ee4 <ProcessRadioTxTimeout+0x48>)
 8007ecc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007ed0:	f043 0320 	orr.w	r3, r3, #32
 8007ed4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	200008fc 	.word	0x200008fc
 8007ee0:	08011df8 	.word	0x08011df8
 8007ee4:	200003f4 	.word	0x200003f4

08007ee8 <CheckForClassBCollision>:
{
 8007ee8:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007eea:	f002 f8e7 	bl	800a0bc <LoRaMacClassBIsBeaconExpected>
 8007eee:	b978      	cbnz	r0, 8007f10 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007ef0:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <CheckForClassBCollision+0x30>)
 8007ef2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d001      	beq.n	8007efe <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8007efa:	2000      	movs	r0, #0
}
 8007efc:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007efe:	f002 f8df 	bl	800a0c0 <LoRaMacClassBIsPingExpected>
 8007f02:	b938      	cbnz	r0, 8007f14 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007f04:	f002 f8de 	bl	800a0c4 <LoRaMacClassBIsMulticastExpected>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d0f7      	beq.n	8007efc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007f0c:	200f      	movs	r0, #15
 8007f0e:	e7f5      	b.n	8007efc <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8007f10:	200e      	movs	r0, #14
 8007f12:	e7f3      	b.n	8007efc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007f14:	200f      	movs	r0, #15
 8007f16:	e7f1      	b.n	8007efc <CheckForClassBCollision+0x14>
 8007f18:	200008fc 	.word	0x200008fc

08007f1c <HandleRadioRxErrorTimeout>:
{
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	4605      	mov	r5, r0
 8007f20:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007f22:	4b37      	ldr	r3, [pc, #220]	; (8008000 <HandleRadioRxErrorTimeout+0xe4>)
 8007f24:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d002      	beq.n	8007f32 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8007f2c:	4b35      	ldr	r3, [pc, #212]	; (8008004 <HandleRadioRxErrorTimeout+0xe8>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007f32:	f002 f8c3 	bl	800a0bc <LoRaMacClassBIsBeaconExpected>
 8007f36:	4606      	mov	r6, r0
 8007f38:	bb00      	cbnz	r0, 8007f7c <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007f3a:	4b31      	ldr	r3, [pc, #196]	; (8008000 <HandleRadioRxErrorTimeout+0xe4>)
 8007f3c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d022      	beq.n	8007f8a <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8007f44:	b9be      	cbnz	r6, 8007f76 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007f46:	4b30      	ldr	r3, [pc, #192]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007f48:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d13f      	bne.n	8007fd0 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8007f50:	4b2d      	ldr	r3, [pc, #180]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007f52:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007f56:	b113      	cbz	r3, 8007f5e <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007f58:	4b2b      	ldr	r3, [pc, #172]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007f5a:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f002 fafe 	bl	800a560 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8007f64:	4b26      	ldr	r3, [pc, #152]	; (8008000 <HandleRadioRxErrorTimeout+0xe4>)
 8007f66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007f68:	f008 fdda 	bl	8010b20 <UTIL_TIMER_GetElapsedTime>
 8007f6c:	4b26      	ldr	r3, [pc, #152]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007f6e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8007f72:	4298      	cmp	r0, r3
 8007f74:	d220      	bcs.n	8007fb8 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8007f76:	f7fe ff17 	bl	8006da8 <UpdateRxSlotIdleState>
}
 8007f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8007f7c:	2002      	movs	r0, #2
 8007f7e:	f002 f893 	bl	800a0a8 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007f82:	2000      	movs	r0, #0
 8007f84:	f002 f895 	bl	800a0b2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8007f88:	e7d7      	b.n	8007f3a <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007f8a:	f002 f899 	bl	800a0c0 <LoRaMacClassBIsPingExpected>
 8007f8e:	4607      	mov	r7, r0
 8007f90:	b950      	cbnz	r0, 8007fa8 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007f92:	f002 f897 	bl	800a0c4 <LoRaMacClassBIsMulticastExpected>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d0d4      	beq.n	8007f44 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	f002 f886 	bl	800a0ac <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	f002 f888 	bl	800a0b6 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8007fa6:	e7e6      	b.n	8007f76 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007fa8:	2000      	movs	r0, #0
 8007faa:	f002 f87e 	bl	800a0aa <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f002 f880 	bl	800a0b4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007fb4:	463e      	mov	r6, r7
 8007fb6:	e7ec      	b.n	8007f92 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8007fb8:	4c13      	ldr	r4, [pc, #76]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007fba:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8007fbe:	f008 fde5 	bl	8010b8c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007fc2:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8007fc6:	f043 0320 	orr.w	r3, r3, #32
 8007fca:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8007fce:	e7d2      	b.n	8007f76 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8007fd0:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007fd2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007fd6:	b113      	cbz	r3, 8007fde <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007fda:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f002 fabe 	bl	800a560 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007fe4:	4b06      	ldr	r3, [pc, #24]	; (8008000 <HandleRadioRxErrorTimeout+0xe4>)
 8007fe6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d0c3      	beq.n	8007f76 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007fee:	4a06      	ldr	r2, [pc, #24]	; (8008008 <HandleRadioRxErrorTimeout+0xec>)
 8007ff0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007ff4:	f043 0320 	orr.w	r3, r3, #32
 8007ff8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8007ffc:	e7bb      	b.n	8007f76 <HandleRadioRxErrorTimeout+0x5a>
 8007ffe:	bf00      	nop
 8008000:	200008fc 	.word	0x200008fc
 8008004:	08011df8 	.word	0x08011df8
 8008008:	200003f4 	.word	0x200003f4

0800800c <ProcessRadioRxError>:
{
 800800c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800800e:	2106      	movs	r1, #6
 8008010:	2005      	movs	r0, #5
 8008012:	f7ff ff83 	bl	8007f1c <HandleRadioRxErrorTimeout>
}
 8008016:	bd08      	pop	{r3, pc}

08008018 <ProcessRadioRxTimeout>:
{
 8008018:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800801a:	2104      	movs	r1, #4
 800801c:	2003      	movs	r0, #3
 800801e:	f7ff ff7d 	bl	8007f1c <HandleRadioRxErrorTimeout>
}
 8008022:	bd08      	pop	{r3, pc}

08008024 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008024:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008028:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800802a:	4a14      	ldr	r2, [pc, #80]	; (800807c <LoRaMacHandleIrqEvents+0x58>)
 800802c:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800802e:	2000      	movs	r0, #0
 8008030:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008032:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008036:	b303      	cbz	r3, 800807a <LoRaMacHandleIrqEvents+0x56>
{
 8008038:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800803a:	b2dc      	uxtb	r4, r3
 800803c:	f013 0f10 	tst.w	r3, #16
 8008040:	d10c      	bne.n	800805c <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008042:	f014 0f08 	tst.w	r4, #8
 8008046:	d10c      	bne.n	8008062 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008048:	f014 0f04 	tst.w	r4, #4
 800804c:	d10c      	bne.n	8008068 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800804e:	f014 0f02 	tst.w	r4, #2
 8008052:	d10c      	bne.n	800806e <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008054:	f014 0f01 	tst.w	r4, #1
 8008058:	d10c      	bne.n	8008074 <LoRaMacHandleIrqEvents+0x50>
}
 800805a:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800805c:	f7ff f84e 	bl	80070fc <ProcessRadioTxDone>
 8008060:	e7ef      	b.n	8008042 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008062:	f7ff fc37 	bl	80078d4 <ProcessRadioRxDone>
 8008066:	e7ef      	b.n	8008048 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008068:	f7ff ff18 	bl	8007e9c <ProcessRadioTxTimeout>
 800806c:	e7ef      	b.n	800804e <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800806e:	f7ff ffcd 	bl	800800c <ProcessRadioRxError>
 8008072:	e7ef      	b.n	8008054 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008074:	f7ff ffd0 	bl	8008018 <ProcessRadioRxTimeout>
}
 8008078:	e7ef      	b.n	800805a <LoRaMacHandleIrqEvents+0x36>
 800807a:	4770      	bx	lr
 800807c:	200003f0 	.word	0x200003f0

08008080 <LoRaMacHandleMlmeRequest>:
{
 8008080:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008082:	4b16      	ldr	r3, [pc, #88]	; (80080dc <LoRaMacHandleMlmeRequest+0x5c>)
 8008084:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008088:	f013 0f04 	tst.w	r3, #4
 800808c:	d100      	bne.n	8008090 <LoRaMacHandleMlmeRequest+0x10>
}
 800808e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008090:	2001      	movs	r0, #1
 8008092:	f002 fa83 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 8008096:	b178      	cbz	r0, 80080b8 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008098:	2001      	movs	r0, #1
 800809a:	f002 fa49 	bl	800a530 <LoRaMacConfirmQueueGetStatus>
 800809e:	b918      	cbnz	r0, 80080a8 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <LoRaMacHandleMlmeRequest+0x5c>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80080a8:	4a0c      	ldr	r2, [pc, #48]	; (80080dc <LoRaMacHandleMlmeRequest+0x5c>)
 80080aa:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80080ae:	f023 0302 	bic.w	r3, r3, #2
 80080b2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 80080b6:	e7ea      	b.n	800808e <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80080b8:	2005      	movs	r0, #5
 80080ba:	f002 fa6f 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
 80080be:	b138      	cbz	r0, 80080d0 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80080c0:	4a06      	ldr	r2, [pc, #24]	; (80080dc <LoRaMacHandleMlmeRequest+0x5c>)
 80080c2:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80080c6:	f023 0302 	bic.w	r3, r3, #2
 80080ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80080ce:	e7de      	b.n	800808e <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80080d0:	2006      	movs	r0, #6
 80080d2:	f002 fa63 	bl	800a59c <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d0d9      	beq.n	800808e <LoRaMacHandleMlmeRequest+0xe>
 80080da:	e7f1      	b.n	80080c0 <LoRaMacHandleMlmeRequest+0x40>
 80080dc:	200003f4 	.word	0x200003f4

080080e0 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 80080e0:	4b14      	ldr	r3, [pc, #80]	; (8008134 <AckTimeoutRetriesFinalize+0x54>)
 80080e2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80080e6:	b12b      	cbz	r3, 80080f4 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80080e8:	4b12      	ldr	r3, [pc, #72]	; (8008134 <AckTimeoutRetriesFinalize+0x54>)
 80080ea:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80080ee:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 80080f2:	4770      	bx	lr
{
 80080f4:	b500      	push	{lr}
 80080f6:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80080f8:	2302      	movs	r3, #2
 80080fa:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80080fe:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <AckTimeoutRetriesFinalize+0x58>)
 8008100:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8008104:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8008106:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 800810a:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800810c:	a901      	add	r1, sp, #4
 800810e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008112:	f002 ffd6 	bl	800b0c2 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <AckTimeoutRetriesFinalize+0x54>)
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800811e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008122:	4b04      	ldr	r3, [pc, #16]	; (8008134 <AckTimeoutRetriesFinalize+0x54>)
 8008124:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008128:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800812c:	b005      	add	sp, #20
 800812e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008132:	bf00      	nop
 8008134:	200003f4 	.word	0x200003f4
 8008138:	200008fc 	.word	0x200008fc

0800813c <SerializeTxFrame>:
{
 800813c:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800813e:	4b0f      	ldr	r3, [pc, #60]	; (800817c <SerializeTxFrame+0x40>)
 8008140:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008144:	b11b      	cbz	r3, 800814e <SerializeTxFrame+0x12>
 8008146:	2b04      	cmp	r3, #4
 8008148:	d00a      	beq.n	8008160 <SerializeTxFrame+0x24>
 800814a:	2003      	movs	r0, #3
}
 800814c:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800814e:	480c      	ldr	r0, [pc, #48]	; (8008180 <SerializeTxFrame+0x44>)
 8008150:	f002 fedd 	bl	800af0e <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008154:	b968      	cbnz	r0, 8008172 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008156:	4b09      	ldr	r3, [pc, #36]	; (800817c <SerializeTxFrame+0x40>)
 8008158:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800815c:	801a      	strh	r2, [r3, #0]
            break;
 800815e:	e7f5      	b.n	800814c <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008160:	4807      	ldr	r0, [pc, #28]	; (8008180 <SerializeTxFrame+0x44>)
 8008162:	f002 ff0a 	bl	800af7a <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008166:	b930      	cbnz	r0, 8008176 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <SerializeTxFrame+0x40>)
 800816a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800816e:	801a      	strh	r2, [r3, #0]
            break;
 8008170:	e7ec      	b.n	800814c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008172:	2011      	movs	r0, #17
 8008174:	e7ea      	b.n	800814c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008176:	2011      	movs	r0, #17
 8008178:	e7e8      	b.n	800814c <SerializeTxFrame+0x10>
 800817a:	bf00      	nop
 800817c:	200003f4 	.word	0x200003f4
 8008180:	200004fc 	.word	0x200004fc

08008184 <ComputeRxWindowParameters>:
{
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008188:	4c1d      	ldr	r4, [pc, #116]	; (8008200 <ComputeRxWindowParameters+0x7c>)
 800818a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800818e:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 8008192:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 8008196:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800819a:	4630      	mov	r0, r6
 800819c:	f003 f885 	bl	800b2aa <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80081a0:	4d18      	ldr	r5, [pc, #96]	; (8008204 <ComputeRxWindowParameters+0x80>)
 80081a2:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80081aa:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80081ae:	b241      	sxtb	r1, r0
 80081b0:	4630      	mov	r0, r6
 80081b2:	f002 ffc1 	bl	800b138 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80081b6:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80081be:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80081c2:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 80081c6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80081ca:	f002 ffb5 	bl	800b138 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80081ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80081d0:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 80081d4:	440b      	add	r3, r1
 80081d6:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80081da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80081dc:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 80081e0:	4413      	add	r3, r2
 80081e2:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80081e6:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80081ea:	b93b      	cbnz	r3, 80081fc <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80081ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ee:	4419      	add	r1, r3
 80081f0:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80081f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081f6:	440a      	add	r2, r1
 80081f8:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 80081fc:	b002      	add	sp, #8
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	200008fc 	.word	0x200008fc
 8008204:	200003f4 	.word	0x200003f4

08008208 <VerifyTxFrame>:
{
 8008208:	b510      	push	{r4, lr}
 800820a:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <VerifyTxFrame+0x40>)
 8008212:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 8008216:	b914      	cbnz	r4, 800821e <VerifyTxFrame+0x16>
}
 8008218:	4620      	mov	r0, r4
 800821a:	b002      	add	sp, #8
 800821c:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800821e:	a801      	add	r0, sp, #4
 8008220:	f002 f86c 	bl	800a2fc <LoRaMacCommandsGetSizeSerializedCmds>
 8008224:	4604      	mov	r4, r0
 8008226:	b968      	cbnz	r0, 8008244 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008228:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <VerifyTxFrame+0x40>)
 800822e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8008232:	4b06      	ldr	r3, [pc, #24]	; (800824c <VerifyTxFrame+0x44>)
 8008234:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8008238:	f7fe ff4e 	bl	80070d8 <ValidatePayloadLength>
 800823c:	2800      	cmp	r0, #0
 800823e:	d1eb      	bne.n	8008218 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008240:	2408      	movs	r4, #8
 8008242:	e7e9      	b.n	8008218 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008244:	2413      	movs	r4, #19
 8008246:	e7e7      	b.n	8008218 <VerifyTxFrame+0x10>
 8008248:	200008fc 	.word	0x200008fc
 800824c:	200003f4 	.word	0x200003f4

08008250 <SecureFrame>:
{
 8008250:	b530      	push	{r4, r5, lr}
 8008252:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <SecureFrame+0x74>)
 800825a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800825e:	b133      	cbz	r3, 800826e <SecureFrame+0x1e>
 8008260:	4605      	mov	r5, r0
 8008262:	460c      	mov	r4, r1
 8008264:	2b04      	cmp	r3, #4
 8008266:	d00b      	beq.n	8008280 <SecureFrame+0x30>
 8008268:	2003      	movs	r0, #3
}
 800826a:	b003      	add	sp, #12
 800826c:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800826e:	4816      	ldr	r0, [pc, #88]	; (80082c8 <SecureFrame+0x78>)
 8008270:	f002 fc0e 	bl	800aa90 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008274:	bb00      	cbnz	r0, 80082b8 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008276:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <SecureFrame+0x74>)
 8008278:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800827c:	801a      	strh	r2, [r3, #0]
            break;
 800827e:	e7f4      	b.n	800826a <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008280:	a801      	add	r0, sp, #4
 8008282:	f002 fba1 	bl	800a9c8 <LoRaMacCryptoGetFCntUp>
 8008286:	b9c8      	cbnz	r0, 80082bc <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008288:	4b0e      	ldr	r3, [pc, #56]	; (80082c4 <SecureFrame+0x74>)
 800828a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800828e:	b923      	cbnz	r3, 800829a <SecureFrame+0x4a>
 8008290:	4b0c      	ldr	r3, [pc, #48]	; (80082c4 <SecureFrame+0x74>)
 8008292:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8008296:	2b01      	cmp	r3, #1
 8008298:	d902      	bls.n	80082a0 <SecureFrame+0x50>
                fCntUp -= 1;
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	3b01      	subs	r3, #1
 800829e:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <SecureFrame+0x78>)
 80082a2:	4622      	mov	r2, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	9801      	ldr	r0, [sp, #4]
 80082a8:	f002 fc1e 	bl	800aae8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80082ac:	b940      	cbnz	r0, 80082c0 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80082ae:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <SecureFrame+0x74>)
 80082b0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80082b4:	801a      	strh	r2, [r3, #0]
            break;
 80082b6:	e7d8      	b.n	800826a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80082b8:	2011      	movs	r0, #17
 80082ba:	e7d6      	b.n	800826a <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80082bc:	2012      	movs	r0, #18
 80082be:	e7d4      	b.n	800826a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80082c0:	2011      	movs	r0, #17
 80082c2:	e7d2      	b.n	800826a <SecureFrame+0x1a>
 80082c4:	200003f4 	.word	0x200003f4
 80082c8:	200004fc 	.word	0x200004fc

080082cc <SendFrameOnChannel>:
{
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	4606      	mov	r6, r0
    int8_t txPower = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 80082d8:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80082dc:	4d33      	ldr	r5, [pc, #204]	; (80083ac <SendFrameOnChannel+0xe0>)
 80082de:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 80082e2:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80082e6:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 80082ea:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80082ee:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80082f0:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80082f2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80082f4:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80082f6:	4c2e      	ldr	r4, [pc, #184]	; (80083b0 <SendFrameOnChannel+0xe4>)
 80082f8:	8823      	ldrh	r3, [r4, #0]
 80082fa:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80082fe:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 8008302:	f10d 0207 	add.w	r2, sp, #7
 8008306:	a902      	add	r1, sp, #8
 8008308:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800830c:	f002 ff36 	bl	800b17c <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008316:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800831a:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800831e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008322:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8008326:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800832a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 800832e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008332:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008336:	f001 fec7 	bl	800a0c8 <LoRaMacClassBIsBeaconModeActive>
 800833a:	bb58      	cbnz	r0, 8008394 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800833c:	4b1b      	ldr	r3, [pc, #108]	; (80083ac <SendFrameOnChannel+0xe0>)
 800833e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008342:	2b01      	cmp	r3, #1
 8008344:	d02e      	beq.n	80083a4 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 8008346:	f001 fec2 	bl	800a0ce <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800834a:	4b18      	ldr	r3, [pc, #96]	; (80083ac <SendFrameOnChannel+0xe0>)
 800834c:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008350:	4b17      	ldr	r3, [pc, #92]	; (80083b0 <SendFrameOnChannel+0xe4>)
 8008352:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 8008356:	b2c0      	uxtb	r0, r0
 8008358:	f7ff ff7a 	bl	8008250 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800835c:	4604      	mov	r4, r0
 800835e:	b9b0      	cbnz	r0, 800838e <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008360:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <SendFrameOnChannel+0xe4>)
 8008362:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008366:	f042 0202 	orr.w	r2, r2, #2
 800836a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800836e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008372:	b92b      	cbnz	r3, 8008380 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 8008374:	4a0e      	ldr	r2, [pc, #56]	; (80083b0 <SendFrameOnChannel+0xe4>)
 8008376:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 800837a:	3301      	adds	r3, #1
 800837c:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <SendFrameOnChannel+0xe8>)
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	480a      	ldr	r0, [pc, #40]	; (80083b0 <SendFrameOnChannel+0xe4>)
 8008386:	f830 1b02 	ldrh.w	r1, [r0], #2
 800838a:	b2c9      	uxtb	r1, r1
 800838c:	4798      	blx	r3
}
 800838e:	4620      	mov	r0, r4
 8008390:	b006      	add	sp, #24
 8008392:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008394:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 8008398:	f001 fea8 	bl	800a0ec <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800839c:	2800      	cmp	r0, #0
 800839e:	d0cd      	beq.n	800833c <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80083a0:	2410      	movs	r4, #16
 80083a2:	e7f4      	b.n	800838e <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 80083a4:	f001 fea4 	bl	800a0f0 <LoRaMacClassBStopRxSlots>
 80083a8:	e7cd      	b.n	8008346 <SendFrameOnChannel+0x7a>
 80083aa:	bf00      	nop
 80083ac:	200008fc 	.word	0x200008fc
 80083b0:	200003f4 	.word	0x200003f4
 80083b4:	08011df8 	.word	0x08011df8

080083b8 <ScheduleTx>:
{
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	b08c      	sub	sp, #48	; 0x30
 80083be:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 80083c0:	f7ff fd92 	bl	8007ee8 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 80083c4:	4604      	mov	r4, r0
 80083c6:	b118      	cbz	r0, 80083d0 <ScheduleTx+0x18>
}
 80083c8:	4620      	mov	r0, r4
 80083ca:	b00c      	add	sp, #48	; 0x30
 80083cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 80083d0:	f7fe fd66 	bl	8006ea0 <CalculateBackOff>
    status = SerializeTxFrame( );
 80083d4:	f7ff feb2 	bl	800813c <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80083d8:	4604      	mov	r4, r0
 80083da:	2800      	cmp	r0, #0
 80083dc:	d1f4      	bne.n	80083c8 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80083de:	4e36      	ldr	r6, [pc, #216]	; (80084b8 <ScheduleTx+0x100>)
 80083e0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80083e2:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80083e4:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 80083e8:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80083ec:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 80083f0:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80083f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80083f8:	4640      	mov	r0, r8
 80083fa:	f008 fafd 	bl	80109f8 <SysTimeGetMcuTime>
 80083fe:	af02      	add	r7, sp, #8
 8008400:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 800840a:	e898 0006 	ldmia.w	r8, {r1, r2}
 800840e:	4638      	mov	r0, r7
 8008410:	f008 fa93 	bl	801093a <SysTimeSub>
 8008414:	ab07      	add	r3, sp, #28
 8008416:	e897 0003 	ldmia.w	r7, {r0, r1}
 800841a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800841e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008420:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 8008422:	2300      	movs	r3, #0
 8008424:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8008428:	2301      	movs	r3, #1
 800842a:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800842e:	4b23      	ldr	r3, [pc, #140]	; (80084bc <ScheduleTx+0x104>)
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008436:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 800843a:	b92b      	cbnz	r3, 8008448 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800843c:	2301      	movs	r3, #1
 800843e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 8008442:	2300      	movs	r3, #0
 8008444:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8008448:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <ScheduleTx+0x104>)
 800844a:	481b      	ldr	r0, [pc, #108]	; (80084b8 <ScheduleTx+0x100>)
 800844c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	f202 4384 	addw	r3, r2, #1156	; 0x484
 8008456:	f202 4215 	addw	r2, r2, #1045	; 0x415
 800845a:	a904      	add	r1, sp, #16
 800845c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008460:	f002 ff02 	bl	800b268 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8008464:	b1b0      	cbz	r0, 8008494 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008466:	280b      	cmp	r0, #11
 8008468:	d122      	bne.n	80084b0 <ScheduleTx+0xf8>
 800846a:	b31d      	cbz	r5, 80084b4 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800846c:	4b13      	ldr	r3, [pc, #76]	; (80084bc <ScheduleTx+0x104>)
 800846e:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 8008472:	2900      	cmp	r1, #0
 8008474:	d0a8      	beq.n	80083c8 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008476:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800847a:	f042 0220 	orr.w	r2, r2, #32
 800847e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008482:	f503 755a 	add.w	r5, r3, #872	; 0x368
 8008486:	4628      	mov	r0, r5
 8008488:	f008 fc28 	bl	8010cdc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800848c:	4628      	mov	r0, r5
 800848e:	f008 fbdf 	bl	8010c50 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 8008492:	e799      	b.n	80083c8 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 8008494:	f7ff fe76 	bl	8008184 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8008498:	f7ff feb6 	bl	8008208 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800849c:	4604      	mov	r4, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d192      	bne.n	80083c8 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80084a2:	4b06      	ldr	r3, [pc, #24]	; (80084bc <ScheduleTx+0x104>)
 80084a4:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 80084a8:	f7ff ff10 	bl	80082cc <SendFrameOnChannel>
 80084ac:	4604      	mov	r4, r0
 80084ae:	e78b      	b.n	80083c8 <ScheduleTx+0x10>
            return status;
 80084b0:	4604      	mov	r4, r0
 80084b2:	e789      	b.n	80083c8 <ScheduleTx+0x10>
 80084b4:	4604      	mov	r4, r0
 80084b6:	e787      	b.n	80083c8 <ScheduleTx+0x10>
 80084b8:	200008fc 	.word	0x200008fc
 80084bc:	200003f4 	.word	0x200003f4

080084c0 <OnTxDelayedTimerEvent>:
{
 80084c0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80084c2:	4c11      	ldr	r4, [pc, #68]	; (8008508 <OnTxDelayedTimerEvent+0x48>)
 80084c4:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80084c8:	f008 fb60 	bl	8010b8c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80084cc:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80084d0:	f023 0320 	bic.w	r3, r3, #32
 80084d4:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 80084d8:	2001      	movs	r0, #1
 80084da:	f7ff ff6d 	bl	80083b8 <ScheduleTx>
 80084de:	b108      	cbz	r0, 80084e4 <OnTxDelayedTimerEvent+0x24>
 80084e0:	280b      	cmp	r0, #11
 80084e2:	d100      	bne.n	80084e6 <OnTxDelayedTimerEvent+0x26>
}
 80084e4:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <OnTxDelayedTimerEvent+0x4c>)
 80084e8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80084ec:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80084f0:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 80084f4:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80084f8:	2009      	movs	r0, #9
 80084fa:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80084fe:	f002 f82f 	bl	800a560 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008502:	f7fe fd5f 	bl	8006fc4 <StopRetransmission>
}
 8008506:	e7ed      	b.n	80084e4 <OnTxDelayedTimerEvent+0x24>
 8008508:	200003f4 	.word	0x200003f4
 800850c:	200008fc 	.word	0x200008fc

08008510 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008510:	4b23      	ldr	r3, [pc, #140]	; (80085a0 <LoRaMacHandleMcpsRequest+0x90>)
 8008512:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008516:	f013 0f01 	tst.w	r3, #1
 800851a:	d040      	beq.n	800859e <LoRaMacHandleMcpsRequest+0x8e>
{
 800851c:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800851e:	4b20      	ldr	r3, [pc, #128]	; (80085a0 <LoRaMacHandleMcpsRequest+0x90>)
 8008520:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8008524:	b12b      	cbz	r3, 8008532 <LoRaMacHandleMcpsRequest+0x22>
 8008526:	2b03      	cmp	r3, #3
 8008528:	d003      	beq.n	8008532 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800852a:	2b01      	cmp	r3, #1
 800852c:	d007      	beq.n	800853e <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 800852e:	2400      	movs	r4, #0
 8008530:	e003      	b.n	800853a <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8008532:	f7fe fd0b 	bl	8006f4c <CheckRetransUnconfirmedUplink>
 8008536:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 8008538:	b9a4      	cbnz	r4, 8008564 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 800853a:	b31c      	cbz	r4, 8008584 <LoRaMacHandleMcpsRequest+0x74>
}
 800853c:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800853e:	4b18      	ldr	r3, [pc, #96]	; (80085a0 <LoRaMacHandleMcpsRequest+0x90>)
 8008540:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8008544:	b1e3      	cbz	r3, 8008580 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8008546:	f7fe fd25 	bl	8006f94 <CheckRetransConfirmedUplink>
 800854a:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800854c:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <LoRaMacHandleMcpsRequest+0x94>)
 800854e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f0      	bne.n	8008538 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 8008556:	b910      	cbnz	r0, 800855e <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 8008558:	f7fe fd74 	bl	8007044 <AckTimeoutRetriesProcess>
 800855c:	e7ec      	b.n	8008538 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800855e:	f7ff fdbf 	bl	80080e0 <AckTimeoutRetriesFinalize>
 8008562:	e7e9      	b.n	8008538 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 8008564:	4c0e      	ldr	r4, [pc, #56]	; (80085a0 <LoRaMacHandleMcpsRequest+0x90>)
 8008566:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800856a:	f008 fb0f 	bl	8010b8c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800856e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008572:	f023 0320 	bic.w	r3, r3, #32
 8008576:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800857a:	f7fe fd23 	bl	8006fc4 <StopRetransmission>
 800857e:	e7dd      	b.n	800853c <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 8008580:	2401      	movs	r4, #1
 8008582:	e7da      	b.n	800853a <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <LoRaMacHandleMcpsRequest+0x90>)
 8008586:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800858a:	f36f 1245 	bfc	r2, #5, #1
 800858e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8008592:	2000      	movs	r0, #0
 8008594:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8008598:	f7ff ff92 	bl	80084c0 <OnTxDelayedTimerEvent>
}
 800859c:	e7ce      	b.n	800853c <LoRaMacHandleMcpsRequest+0x2c>
 800859e:	4770      	bx	lr
 80085a0:	200003f4 	.word	0x200003f4
 80085a4:	200008fc 	.word	0x200008fc

080085a8 <LoRaMacHandleRequestEvents>:
{
 80085a8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80085aa:	4b22      	ldr	r3, [pc, #136]	; (8008634 <LoRaMacHandleRequestEvents+0x8c>)
 80085ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80085b0:	bb7b      	cbnz	r3, 8008612 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80085b2:	4b20      	ldr	r3, [pc, #128]	; (8008634 <LoRaMacHandleRequestEvents+0x8c>)
 80085b4:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 80085b8:	f014 0501 	ands.w	r5, r4, #1
 80085bc:	d005      	beq.n	80085ca <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80085be:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80085c2:	f36f 0200 	bfc	r2, #0, #1
 80085c6:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80085ca:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <LoRaMacHandleRequestEvents+0x8c>)
 80085cc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80085d0:	f013 0f04 	tst.w	r3, #4
 80085d4:	d006      	beq.n	80085e4 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80085d6:	4b17      	ldr	r3, [pc, #92]	; (8008634 <LoRaMacHandleRequestEvents+0x8c>)
 80085d8:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80085dc:	f36f 0282 	bfc	r2, #2, #1
 80085e0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80085e4:	2001      	movs	r0, #1
 80085e6:	f7fe fbf3 	bl	8006dd0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 80085ea:	b135      	cbz	r5, 80085fa <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80085ec:	4811      	ldr	r0, [pc, #68]	; (8008634 <LoRaMacHandleRequestEvents+0x8c>)
 80085ee:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 80085f8:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80085fa:	f014 0f04 	tst.w	r4, #4
 80085fe:	d109      	bne.n	8008614 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8008600:	f001 fd66 	bl	800a0d0 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008604:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <LoRaMacHandleRequestEvents+0x8c>)
 8008606:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800860a:	f36f 1245 	bfc	r2, #5, #1
 800860e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 8008612:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8008614:	4808      	ldr	r0, [pc, #32]	; (8008638 <LoRaMacHandleRequestEvents+0x90>)
 8008616:	f001 ffcd 	bl	800a5b4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800861a:	f001 fffd 	bl	800a618 <LoRaMacConfirmQueueGetCnt>
 800861e:	2800      	cmp	r0, #0
 8008620:	d0ee      	beq.n	8008600 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008622:	4a04      	ldr	r2, [pc, #16]	; (8008634 <LoRaMacHandleRequestEvents+0x8c>)
 8008624:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008628:	f043 0304 	orr.w	r3, r3, #4
 800862c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8008630:	e7e6      	b.n	8008600 <LoRaMacHandleRequestEvents+0x58>
 8008632:	bf00      	nop
 8008634:	200003f4 	.word	0x200003f4
 8008638:	20000840 	.word	0x20000840

0800863c <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 800863e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008642:	b103      	cbz	r3, 8008646 <LoRaMacHandleScheduleUplinkEvent+0xa>
 8008644:	4770      	bx	lr
{
 8008646:	b500      	push	{lr}
 8008648:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800864a:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800864e:	f10d 0007 	add.w	r0, sp, #7
 8008652:	f001 fe91 	bl	800a378 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008656:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800865a:	b913      	cbnz	r3, 8008662 <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 800865c:	b003      	add	sp, #12
 800865e:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 8008662:	f7fe fc13 	bl	8006e8c <SetMlmeScheduleUplinkIndication>
}
 8008666:	e7f9      	b.n	800865c <LoRaMacHandleScheduleUplinkEvent+0x20>
 8008668:	200003f4 	.word	0x200003f4

0800866c <LoRaMacHandleNvm>:
{
 800866c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800866e:	4b30      	ldr	r3, [pc, #192]	; (8008730 <LoRaMacHandleNvm+0xc4>)
 8008670:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008674:	b103      	cbz	r3, 8008678 <LoRaMacHandleNvm+0xc>
}
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800867a:	2124      	movs	r1, #36	; 0x24
 800867c:	f005 fde2 	bl	800e244 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8008680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008682:	4283      	cmp	r3, r0
 8008684:	d052      	beq.n	800872c <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 8008686:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008688:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800868a:	2114      	movs	r1, #20
 800868c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008690:	f005 fdd8 	bl	800e244 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8008694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008696:	4283      	cmp	r3, r0
 8008698:	d002      	beq.n	80086a0 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800869a:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800869c:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80086a0:	21d4      	movs	r1, #212	; 0xd4
 80086a2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80086a6:	f005 fdcd 	bl	800e244 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 80086aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80086ae:	4283      	cmp	r3, r0
 80086b0:	d003      	beq.n	80086ba <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 80086b2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80086b6:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80086ba:	21bc      	movs	r1, #188	; 0xbc
 80086bc:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80086c0:	f005 fdc0 	bl	800e244 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80086c4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 80086c8:	4283      	cmp	r3, r0
 80086ca:	d003      	beq.n	80086d4 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 80086cc:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80086d0:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80086d4:	21a0      	movs	r1, #160	; 0xa0
 80086d6:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 80086da:	f005 fdb3 	bl	800e244 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80086de:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 80086e2:	4283      	cmp	r3, r0
 80086e4:	d003      	beq.n	80086ee <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 80086e6:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80086ea:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80086ee:	f44f 715e 	mov.w	r1, #888	; 0x378
 80086f2:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80086f6:	f005 fda5 	bl	800e244 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80086fa:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	; 0x5f4
 80086fe:	4283      	cmp	r3, r0
 8008700:	d003      	beq.n	800870a <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 8008702:	f8c4 05f4 	str.w	r0, [r4, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8008706:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800870a:	2114      	movs	r1, #20
 800870c:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 8008710:	f005 fd98 	bl	800e244 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8008714:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8008718:	4283      	cmp	r3, r0
 800871a:	d003      	beq.n	8008724 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800871c:	f8c4 060c 	str.w	r0, [r4, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008720:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 8008724:	4628      	mov	r0, r5
 8008726:	f7fe fc75 	bl	8007014 <CallNvmDataChangeCallback>
 800872a:	e7a4      	b.n	8008676 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800872c:	2500      	movs	r5, #0
 800872e:	e7ac      	b.n	800868a <LoRaMacHandleNvm+0x1e>
 8008730:	200003f4 	.word	0x200003f4

08008734 <RestoreNvmData>:
    if( nvm == NULL )
 8008734:	2800      	cmp	r0, #0
 8008736:	d07a      	beq.n	800882e <RestoreNvmData+0xfa>
{
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800873c:	4b3d      	ldr	r3, [pc, #244]	; (8008834 <RestoreNvmData+0x100>)
 800873e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008742:	2b01      	cmp	r3, #1
 8008744:	d001      	beq.n	800874a <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 8008746:	2001      	movs	r0, #1
}
 8008748:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800874a:	2124      	movs	r1, #36	; 0x24
 800874c:	f005 fd7a 	bl	800e244 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8008750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008752:	4283      	cmp	r3, r0
 8008754:	d032      	beq.n	80087bc <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8008756:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800875a:	2114      	movs	r1, #20
 800875c:	4628      	mov	r0, r5
 800875e:	f005 fd71 	bl	800e244 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8008762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008764:	4283      	cmp	r3, r0
 8008766:	d02f      	beq.n	80087c8 <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8008768:	f104 0540 	add.w	r5, r4, #64	; 0x40
 800876c:	21d4      	movs	r1, #212	; 0xd4
 800876e:	4628      	mov	r0, r5
 8008770:	f005 fd68 	bl	800e244 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8008774:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8008778:	4283      	cmp	r3, r0
 800877a:	d02b      	beq.n	80087d4 <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800877c:	f504 758c 	add.w	r5, r4, #280	; 0x118
 8008780:	21bc      	movs	r1, #188	; 0xbc
 8008782:	4628      	mov	r0, r5
 8008784:	f005 fd5e 	bl	800e244 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8008788:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800878c:	4283      	cmp	r3, r0
 800878e:	d03b      	beq.n	8008808 <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8008790:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 8008794:	21a0      	movs	r1, #160	; 0xa0
 8008796:	4628      	mov	r0, r5
 8008798:	f005 fd54 	bl	800e244 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 800879c:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 80087a0:	4283      	cmp	r3, r0
 80087a2:	d037      	beq.n	8008814 <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 80087a4:	f504 65bf 	add.w	r5, r4, #1528	; 0x5f8
 80087a8:	2114      	movs	r1, #20
 80087aa:	4628      	mov	r0, r5
 80087ac:	f005 fd4a 	bl	800e244 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 80087b0:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 80087b4:	4283      	cmp	r3, r0
 80087b6:	d033      	beq.n	8008820 <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 80087b8:	2000      	movs	r0, #0
 80087ba:	e7c5      	b.n	8008748 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80087bc:	2228      	movs	r2, #40	; 0x28
 80087be:	4621      	mov	r1, r4
 80087c0:	481d      	ldr	r0, [pc, #116]	; (8008838 <RestoreNvmData+0x104>)
 80087c2:	f005 fd20 	bl	800e206 <memcpy1>
 80087c6:	e7c6      	b.n	8008756 <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80087c8:	2218      	movs	r2, #24
 80087ca:	4629      	mov	r1, r5
 80087cc:	481b      	ldr	r0, [pc, #108]	; (800883c <RestoreNvmData+0x108>)
 80087ce:	f005 fd1a 	bl	800e206 <memcpy1>
 80087d2:	e7c9      	b.n	8008768 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80087d4:	4e18      	ldr	r6, [pc, #96]	; (8008838 <RestoreNvmData+0x104>)
 80087d6:	22d8      	movs	r2, #216	; 0xd8
 80087d8:	4629      	mov	r1, r5
 80087da:	f106 0040 	add.w	r0, r6, #64	; 0x40
 80087de:	f005 fd12 	bl	800e206 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80087e2:	4b14      	ldr	r3, [pc, #80]	; (8008834 <RestoreNvmData+0x100>)
 80087e4:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80087e8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80087ec:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80087ee:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80087f2:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 80087f6:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008800:	2202      	movs	r2, #2
 8008802:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8008806:	e7b9      	b.n	800877c <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8008808:	22c0      	movs	r2, #192	; 0xc0
 800880a:	4629      	mov	r1, r5
 800880c:	480c      	ldr	r0, [pc, #48]	; (8008840 <RestoreNvmData+0x10c>)
 800880e:	f005 fcfa 	bl	800e206 <memcpy1>
 8008812:	e7bd      	b.n	8008790 <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8008814:	22a4      	movs	r2, #164	; 0xa4
 8008816:	4629      	mov	r1, r5
 8008818:	480a      	ldr	r0, [pc, #40]	; (8008844 <RestoreNvmData+0x110>)
 800881a:	f005 fcf4 	bl	800e206 <memcpy1>
 800881e:	e7c1      	b.n	80087a4 <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8008820:	2218      	movs	r2, #24
 8008822:	4629      	mov	r1, r5
 8008824:	4808      	ldr	r0, [pc, #32]	; (8008848 <RestoreNvmData+0x114>)
 8008826:	f005 fcee 	bl	800e206 <memcpy1>
    return LORAMAC_STATUS_OK;
 800882a:	2000      	movs	r0, #0
 800882c:	e78c      	b.n	8008748 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800882e:	2003      	movs	r0, #3
}
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	200003f4 	.word	0x200003f4
 8008838:	200008fc 	.word	0x200008fc
 800883c:	20000924 	.word	0x20000924
 8008840:	20000a14 	.word	0x20000a14
 8008844:	20000ad4 	.word	0x20000ad4
 8008848:	20000ef4 	.word	0x20000ef4

0800884c <OpenContinuousRxCWindow>:
{
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8008850:	4c12      	ldr	r4, [pc, #72]	; (800889c <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008852:	4d13      	ldr	r5, [pc, #76]	; (80088a0 <OpenContinuousRxCWindow+0x54>)
 8008854:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 8008858:	9600      	str	r6, [sp, #0]
 800885a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800885c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008860:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8008864:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008868:	f002 fc66 	bl	800b138 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800886c:	2302      	movs	r3, #2
 800886e:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008872:	2301      	movs	r3, #1
 8008874:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008878:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 800887c:	4631      	mov	r1, r6
 800887e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008882:	f002 fc6b 	bl	800b15c <RegionRxConfig>
 8008886:	b138      	cbz	r0, 8008898 <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <OpenContinuousRxCWindow+0x58>)
 800888a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888c:	2000      	movs	r0, #0
 800888e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8008890:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 8008894:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 8008898:	b002      	add	sp, #8
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	200008fc 	.word	0x200008fc
 80088a0:	200003f4 	.word	0x200003f4
 80088a4:	08011df8 	.word	0x08011df8

080088a8 <RxWindowSetup>:
{
 80088a8:	b510      	push	{r4, lr}
 80088aa:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80088ac:	f008 f96e 	bl	8010b8c <UTIL_TIMER_Stop>
    Radio.Standby( );
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <RxWindowSetup+0x34>)
 80088b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b4:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80088b6:	4a0a      	ldr	r2, [pc, #40]	; (80088e0 <RxWindowSetup+0x38>)
 80088b8:	4621      	mov	r1, r4
 80088ba:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <RxWindowSetup+0x3c>)
 80088bc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80088c0:	f002 fc4c 	bl	800b15c <RegionRxConfig>
 80088c4:	b140      	cbz	r0, 80088d8 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <RxWindowSetup+0x34>)
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	4a06      	ldr	r2, [pc, #24]	; (80088e4 <RxWindowSetup+0x3c>)
 80088cc:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80088ce:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80088d0:	7ce2      	ldrb	r2, [r4, #19]
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <RxWindowSetup+0x40>)
 80088d4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	08011df8 	.word	0x08011df8
 80088e0:	20000814 	.word	0x20000814
 80088e4:	200008fc 	.word	0x200008fc
 80088e8:	200003f4 	.word	0x200003f4

080088ec <OnRxWindow2TimerEvent>:
{
 80088ec:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <OnRxWindow2TimerEvent+0x48>)
 80088f0:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80088f4:	b903      	cbnz	r3, 80088f8 <OnRxWindow2TimerEvent+0xc>
}
 80088f6:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80088f8:	480e      	ldr	r0, [pc, #56]	; (8008934 <OnRxWindow2TimerEvent+0x48>)
 80088fa:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 80088fe:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008902:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <OnRxWindow2TimerEvent+0x4c>)
 8008904:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008906:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800890a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800890e:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008912:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008916:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800891a:	2300      	movs	r3, #0
 800891c:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008920:	2301      	movs	r3, #1
 8008922:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008926:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800892a:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800892e:	f7ff ffbb 	bl	80088a8 <RxWindowSetup>
 8008932:	e7e0      	b.n	80088f6 <OnRxWindow2TimerEvent+0xa>
 8008934:	200003f4 	.word	0x200003f4
 8008938:	200008fc 	.word	0x200008fc

0800893c <OnRxWindow1TimerEvent>:
{
 800893c:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800893e:	480f      	ldr	r0, [pc, #60]	; (800897c <OnRxWindow1TimerEvent+0x40>)
 8008940:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8008944:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <OnRxWindow1TimerEvent+0x44>)
 800894a:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800894e:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008952:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008956:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800895a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800895e:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8008962:	2300      	movs	r3, #0
 8008964:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8008968:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800896c:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 8008970:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8008974:	f7ff ff98 	bl	80088a8 <RxWindowSetup>
}
 8008978:	bd08      	pop	{r3, pc}
 800897a:	bf00      	nop
 800897c:	200003f4 	.word	0x200003f4
 8008980:	200008fc 	.word	0x200008fc

08008984 <OnRadioRxTimeout>:
{
 8008984:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <OnRadioRxTimeout+0x28>)
 8008988:	7813      	ldrb	r3, [r2, #0]
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <OnRadioRxTimeout+0x2c>)
 8008992:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008996:	b113      	cbz	r3, 800899e <OnRadioRxTimeout+0x1a>
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	b103      	cbz	r3, 800899e <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800899c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800899e:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <OnRadioRxTimeout+0x30>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	2100      	movs	r1, #0
 80089a4:	2002      	movs	r0, #2
 80089a6:	f007 fdb7 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 80089aa:	bd08      	pop	{r3, pc}
 80089ac:	200003f0 	.word	0x200003f0
 80089b0:	200003f4 	.word	0x200003f4
 80089b4:	08011774 	.word	0x08011774

080089b8 <OnRadioTxTimeout>:
{
 80089b8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80089ba:	4a09      	ldr	r2, [pc, #36]	; (80089e0 <OnRadioTxTimeout+0x28>)
 80089bc:	7813      	ldrb	r3, [r2, #0]
 80089be:	f043 0304 	orr.w	r3, r3, #4
 80089c2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80089c4:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <OnRadioTxTimeout+0x2c>)
 80089c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80089ca:	b113      	cbz	r3, 80089d2 <OnRadioTxTimeout+0x1a>
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	b103      	cbz	r3, 80089d2 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80089d0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80089d2:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <OnRadioTxTimeout+0x30>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	2100      	movs	r1, #0
 80089d8:	2002      	movs	r0, #2
 80089da:	f007 fd9d 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 80089de:	bd08      	pop	{r3, pc}
 80089e0:	200003f0 	.word	0x200003f0
 80089e4:	200003f4 	.word	0x200003f4
 80089e8:	08011784 	.word	0x08011784

080089ec <OnRadioRxDone>:
{
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	4680      	mov	r8, r0
 80089f2:	460f      	mov	r7, r1
 80089f4:	4616      	mov	r6, r2
 80089f6:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80089f8:	f008 f888 	bl	8010b0c <UTIL_TIMER_GetCurrentTime>
 80089fc:	4c0d      	ldr	r4, [pc, #52]	; (8008a34 <OnRadioRxDone+0x48>)
 80089fe:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8008a00:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8008a04:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8008a06:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8008a08:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008a0a:	4a0b      	ldr	r2, [pc, #44]	; (8008a38 <OnRadioRxDone+0x4c>)
 8008a0c:	7813      	ldrb	r3, [r2, #0]
 8008a0e:	f043 0308 	orr.w	r3, r3, #8
 8008a12:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008a14:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <OnRadioRxDone+0x50>)
 8008a16:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008a1a:	b113      	cbz	r3, 8008a22 <OnRadioRxDone+0x36>
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	b103      	cbz	r3, 8008a22 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008a20:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <OnRadioRxDone+0x54>)
 8008a24:	2201      	movs	r2, #1
 8008a26:	2100      	movs	r1, #0
 8008a28:	2002      	movs	r0, #2
 8008a2a:	f007 fd75 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8008a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a32:	bf00      	nop
 8008a34:	200019d0 	.word	0x200019d0
 8008a38:	200003f0 	.word	0x200003f0
 8008a3c:	200003f4 	.word	0x200003f4
 8008a40:	08011794 	.word	0x08011794

08008a44 <OnRadioTxDone>:
{
 8008a44:	b530      	push	{r4, r5, lr}
 8008a46:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008a48:	f008 f860 	bl	8010b0c <UTIL_TIMER_GetCurrentTime>
 8008a4c:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <OnRadioTxDone+0x48>)
 8008a4e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008a50:	4d0f      	ldr	r5, [pc, #60]	; (8008a90 <OnRadioTxDone+0x4c>)
 8008a52:	466c      	mov	r4, sp
 8008a54:	4620      	mov	r0, r4
 8008a56:	f007 ffaf 	bl	80109b8 <SysTimeGet>
 8008a5a:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8008a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a62:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8008a66:	4a0b      	ldr	r2, [pc, #44]	; (8008a94 <OnRadioTxDone+0x50>)
 8008a68:	7813      	ldrb	r3, [r2, #0]
 8008a6a:	f043 0310 	orr.w	r3, r3, #16
 8008a6e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008a70:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8008a74:	b113      	cbz	r3, 8008a7c <OnRadioTxDone+0x38>
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	b103      	cbz	r3, 8008a7c <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008a7a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <OnRadioTxDone+0x54>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	2100      	movs	r1, #0
 8008a82:	2002      	movs	r0, #2
 8008a84:	f007 fd48 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 8008a88:	b003      	add	sp, #12
 8008a8a:	bd30      	pop	{r4, r5, pc}
 8008a8c:	200019cc 	.word	0x200019cc
 8008a90:	200003f4 	.word	0x200003f4
 8008a94:	200003f0 	.word	0x200003f0
 8008a98:	080117a4 	.word	0x080117a4

08008a9c <ResetMacParameters>:
{
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	b08e      	sub	sp, #56	; 0x38
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8008aa2:	4c4d      	ldr	r4, [pc, #308]	; (8008bd8 <ResetMacParameters+0x13c>)
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 8008aaa:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8008aac:	4d4b      	ldr	r5, [pc, #300]	; (8008bdc <ResetMacParameters+0x140>)
 8008aae:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8008ab2:	f04f 0801 	mov.w	r8, #1
 8008ab6:	f885 8411 	strb.w	r8, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008aba:	f885 8412 	strb.w	r8, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8008abe:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 8008ac2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8008ac6:	f8a4 8102 	strh.w	r8, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008aca:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 8008ace:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008ad2:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 8008ad6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8008ada:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8008ade:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008ae2:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8008ae6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008aea:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008aee:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008af2:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8008af6:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8008afa:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008afe:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8008b02:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8008b06:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8008b0a:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8008b0e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8008b12:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8008b16:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008b18:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8008b1c:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8008b1e:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8008b22:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008b26:	f88d 800c 	strb.w	r8, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8008b2a:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8008b2e:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8008b30:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 8008b34:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008b36:	a901      	add	r1, sp, #4
 8008b38:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008b3c:	f002 fac1 	bl	800b0c2 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8008b40:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008b44:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b4a:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008b4e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8008b52:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008b56:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8008b5a:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008b5e:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008b62:	f885 83df 	strb.w	r8, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008b66:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 8008b6a:	f505 7773 	add.w	r7, r5, #972	; 0x3cc
 8008b6e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008b76:	f885 83f2 	strb.w	r8, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8008b80:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8008b82:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 8008b84:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8008b88:	b11b      	cbz	r3, 8008b92 <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <ResetMacParameters+0x140>)
 8008b94:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8008b98:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8008b9a:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 8008b9e:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8008ba0:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 8008ba4:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8008ba6:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8008baa:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8008bac:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <ResetMacParameters+0x13c>)
 8008bae:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 8008bb2:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8008bb4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8008bb8:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8008bba:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8008bbe:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8008bc0:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 8008bc4:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008bc6:	f502 62bf 	add.w	r2, r2, #1528	; 0x5f8
 8008bca:	a90c      	add	r1, sp, #48	; 0x30
 8008bcc:	a804      	add	r0, sp, #16
 8008bce:	f001 fa6a 	bl	800a0a6 <LoRaMacClassBInit>
}
 8008bd2:	b00e      	add	sp, #56	; 0x38
 8008bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd8:	200008fc 	.word	0x200008fc
 8008bdc:	200003f4 	.word	0x200003f4

08008be0 <SwitchClass>:
{
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8008be4:	4b3d      	ldr	r3, [pc, #244]	; (8008cdc <SwitchClass+0xfc>)
 8008be6:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 8008bea:	2d01      	cmp	r5, #1
 8008bec:	d062      	beq.n	8008cb4 <SwitchClass+0xd4>
 8008bee:	2d02      	cmp	r5, #2
 8008bf0:	d068      	beq.n	8008cc4 <SwitchClass+0xe4>
 8008bf2:	b10d      	cbz	r5, 8008bf8 <SwitchClass+0x18>
 8008bf4:	2003      	movs	r0, #3
}
 8008bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 8008bf8:	b928      	cbnz	r0, 8008c06 <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8008bfa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008bfe:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008c00:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008c02:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8008c06:	2c01      	cmp	r4, #1
 8008c08:	d01f      	beq.n	8008c4a <SwitchClass+0x6a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008c0a:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8008c0c:	2c02      	cmp	r4, #2
 8008c0e:	d1f2      	bne.n	8008bf6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008c10:	4b32      	ldr	r3, [pc, #200]	; (8008cdc <SwitchClass+0xfc>)
 8008c12:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008c16:	4f32      	ldr	r7, [pc, #200]	; (8008ce0 <SwitchClass+0x100>)
 8008c18:	f507 7478 	add.w	r4, r7, #992	; 0x3e0
 8008c1c:	f507 7673 	add.w	r6, r7, #972	; 0x3cc
 8008c20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c24:	6833      	ldr	r3, [r6, #0]
 8008c26:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008c28:	2302      	movs	r3, #2
 8008c2a:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dd13      	ble.n	8008c5c <SwitchClass+0x7c>
                MacCtx.NodeAckRequested = false;
 8008c34:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <SwitchClass+0x100>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 8008c3c:	4b29      	ldr	r3, [pc, #164]	; (8008ce4 <SwitchClass+0x104>)
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8008c42:	f7ff fe03 	bl	800884c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8008c46:	4628      	mov	r0, r5
 8008c48:	e7d5      	b.n	8008bf6 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f001 fa41 	bl	800a0d2 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1db      	bne.n	8008c0c <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8008c54:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <SwitchClass+0xfc>)
 8008c56:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8008c5a:	e7d7      	b.n	8008c0c <SwitchClass+0x2c>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	491f      	ldr	r1, [pc, #124]	; (8008cdc <SwitchClass+0xfc>)
 8008c60:	222c      	movs	r2, #44	; 0x2c
 8008c62:	fb02 1203 	mla	r2, r2, r3, r1
 8008c66:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 8008c6a:	b912      	cbnz	r2, 8008c72 <SwitchClass+0x92>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	b25b      	sxtb	r3, r3
 8008c70:	e7de      	b.n	8008c30 <SwitchClass+0x50>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008c72:	460a      	mov	r2, r1
 8008c74:	232c      	movs	r3, #44	; 0x2c
 8008c76:	fb03 1000 	mla	r0, r3, r0, r1
 8008c7a:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8008c7e:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8008c80:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8008c84:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <SwitchClass+0x100>)
 8008c8a:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8008c8e:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8008c92:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008c96:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8008c9a:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008c9e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8008ca2:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8008cb2:	e7bf      	b.n	8008c34 <SwitchClass+0x54>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8008cb4:	f001 fa0d 	bl	800a0d2 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d19c      	bne.n	8008bf6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008cbc:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <SwitchClass+0xfc>)
 8008cbe:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8008cc2:	e798      	b.n	8008bf6 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8008cc4:	b938      	cbnz	r0, 8008cd6 <SwitchClass+0xf6>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008cc6:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <SwitchClass+0xfc>)
 8008cc8:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <SwitchClass+0x104>)
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	e78f      	b.n	8008bf6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008cd6:	2003      	movs	r0, #3
 8008cd8:	e78d      	b.n	8008bf6 <SwitchClass+0x16>
 8008cda:	bf00      	nop
 8008cdc:	200008fc 	.word	0x200008fc
 8008ce0:	200003f4 	.word	0x200003f4
 8008ce4:	08011df8 	.word	0x08011df8

08008ce8 <SendReJoinReq>:
{
 8008ce8:	b570      	push	{r4, r5, r6, lr}
    switch( joinReqType )
 8008cea:	28ff      	cmp	r0, #255	; 0xff
 8008cec:	d003      	beq.n	8008cf6 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8008cee:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8008cf0:	f7ff fb62 	bl	80083b8 <ScheduleTx>
}
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	f04f 0600 	mov.w	r6, #0
            SwitchClass( CLASS_A );
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	f7ff ff70 	bl	8008be0 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008d00:	4d0f      	ldr	r5, [pc, #60]	; (8008d40 <SendReJoinReq+0x58>)
 8008d02:	2400      	movs	r4, #0
 8008d04:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008d08:	1cab      	adds	r3, r5, #2
 8008d0a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008d0e:	23ff      	movs	r3, #255	; 0xff
 8008d10:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8008d14:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8008d18:	f885 610d 	strb.w	r6, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008d1c:	f005 fa42 	bl	800e1a4 <SecureElementGetJoinEui>
 8008d20:	4601      	mov	r1, r0
 8008d22:	2208      	movs	r2, #8
 8008d24:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8008d28:	f005 fa6d 	bl	800e206 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8008d2c:	f005 fa24 	bl	800e178 <SecureElementGetDevEui>
 8008d30:	4601      	mov	r1, r0
 8008d32:	2208      	movs	r2, #8
 8008d34:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8008d38:	f005 fa65 	bl	800e206 <memcpy1>
            allowDelayedTx = false;
 8008d3c:	4620      	mov	r0, r4
            break;
 8008d3e:	e7d7      	b.n	8008cf0 <SendReJoinReq+0x8>
 8008d40:	200003f4 	.word	0x200003f4

08008d44 <SetTxContinuousWave>:
{
 8008d44:	b510      	push	{r4, lr}
 8008d46:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8008d48:	4c10      	ldr	r4, [pc, #64]	; (8008d8c <SetTxContinuousWave+0x48>)
 8008d4a:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 8008d4e:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008d52:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <SetTxContinuousWave+0x4c>)
 8008d54:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8008d58:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008d5c:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8008d60:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008d64:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008d66:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008d68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008d6a:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 8008d6c:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8008d70:	4669      	mov	r1, sp
 8008d72:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008d76:	f002 fa8a 	bl	800b28e <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008d7a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008d7e:	f043 0302 	orr.w	r3, r3, #2
 8008d82:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8008d86:	2000      	movs	r0, #0
 8008d88:	b004      	add	sp, #16
 8008d8a:	bd10      	pop	{r4, pc}
 8008d8c:	200003f4 	.word	0x200003f4
 8008d90:	200008fc 	.word	0x200008fc

08008d94 <PrepareFrame>:
{
 8008d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	4617      	mov	r7, r2
 8008da0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8008da4:	4959      	ldr	r1, [pc, #356]	; (8008f0c <PrepareFrame+0x178>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8008daa:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8008dae:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8008db0:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8008db2:	4698      	mov	r8, r3
 8008db4:	b1cb      	cbz	r3, 8008dea <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008db6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8008f0c <PrepareFrame+0x178>
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8008dc2:	f005 fa20 	bl	800e206 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8008dc6:	b2e0      	uxtb	r0, r4
 8008dc8:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8008dcc:	782b      	ldrb	r3, [r5, #0]
 8008dce:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8008dd2:	782b      	ldrb	r3, [r5, #0]
 8008dd4:	095b      	lsrs	r3, r3, #5
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d009      	beq.n	8008dee <PrepareFrame+0x5a>
 8008dda:	2b07      	cmp	r3, #7
 8008ddc:	d078      	beq.n	8008ed0 <PrepareFrame+0x13c>
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d009      	beq.n	8008df6 <PrepareFrame+0x62>
 8008de2:	2002      	movs	r0, #2
}
 8008de4:	b003      	add	sp, #12
 8008de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8008dea:	4614      	mov	r4, r2
 8008dec:	e7e3      	b.n	8008db6 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8008dee:	4b47      	ldr	r3, [pc, #284]	; (8008f0c <PrepareFrame+0x178>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008df6:	4b45      	ldr	r3, [pc, #276]	; (8008f0c <PrepareFrame+0x178>)
 8008df8:	2204      	movs	r2, #4
 8008dfa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008dfe:	1c9a      	adds	r2, r3, #2
 8008e00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008e04:	22ff      	movs	r2, #255	; 0xff
 8008e06:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008e0a:	782a      	ldrb	r2, [r5, #0]
 8008e0c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008e10:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8008e14:	4a3e      	ldr	r2, [pc, #248]	; (8008f10 <PrepareFrame+0x17c>)
 8008e16:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8008e1a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008e1e:	7832      	ldrb	r2, [r6, #0]
 8008e20:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8008e24:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8008e28:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8008e2c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008e30:	a801      	add	r0, sp, #4
 8008e32:	f001 fdc9 	bl	800a9c8 <LoRaMacCryptoGetFCntUp>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d15b      	bne.n	8008ef2 <PrepareFrame+0x15e>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8008e3a:	9a01      	ldr	r2, [sp, #4]
 8008e3c:	4b33      	ldr	r3, [pc, #204]	; (8008f0c <PrepareFrame+0x178>)
 8008e3e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8008e42:	2100      	movs	r1, #0
 8008e44:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8008e48:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8008e4c:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008e50:	4668      	mov	r0, sp
 8008e52:	f001 fa53 	bl	800a2fc <LoRaMacCommandsGetSizeSerializedCmds>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d14d      	bne.n	8008ef6 <PrepareFrame+0x162>
            if( macCmdsSize > 0 )
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0c1      	beq.n	8008de4 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8008e60:	4b2b      	ldr	r3, [pc, #172]	; (8008f10 <PrepareFrame+0x17c>)
 8008e62:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008e66:	f7fe f919 	bl	800709c <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008e6a:	4b28      	ldr	r3, [pc, #160]	; (8008f0c <PrepareFrame+0x178>)
 8008e6c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8008e70:	b113      	cbz	r3, 8008e78 <PrepareFrame+0xe4>
 8008e72:	9a00      	ldr	r2, [sp, #0]
 8008e74:	2a0f      	cmp	r2, #15
 8008e76:	d915      	bls.n	8008ea4 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008e78:	b113      	cbz	r3, 8008e80 <PrepareFrame+0xec>
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	2b0f      	cmp	r3, #15
 8008e7e:	d820      	bhi.n	8008ec2 <PrepareFrame+0x12e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008e80:	4a24      	ldr	r2, [pc, #144]	; (8008f14 <PrepareFrame+0x180>)
 8008e82:	4669      	mov	r1, sp
 8008e84:	f001 fa46 	bl	800a314 <LoRaMacCommandsSerializeCmds>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d13a      	bne.n	8008f02 <PrepareFrame+0x16e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008e8c:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <PrepareFrame+0x178>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8008e94:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8008e98:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008e9c:	9a00      	ldr	r2, [sp, #0]
 8008e9e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8008ea2:	e79f      	b.n	8008de4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8008ea4:	4a1c      	ldr	r2, [pc, #112]	; (8008f18 <PrepareFrame+0x184>)
 8008ea6:	4669      	mov	r1, sp
 8008ea8:	200f      	movs	r0, #15
 8008eaa:	f001 fa33 	bl	800a314 <LoRaMacCommandsSerializeCmds>
 8008eae:	bb20      	cbnz	r0, 8008efa <PrepareFrame+0x166>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8008eb0:	7833      	ldrb	r3, [r6, #0]
 8008eb2:	9a00      	ldr	r2, [sp, #0]
 8008eb4:	f362 0303 	bfi	r3, r2, #0, #4
 8008eb8:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008eba:	4a14      	ldr	r2, [pc, #80]	; (8008f0c <PrepareFrame+0x178>)
 8008ebc:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 8008ec0:	e790      	b.n	8008de4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008ec2:	4a14      	ldr	r2, [pc, #80]	; (8008f14 <PrepareFrame+0x180>)
 8008ec4:	4669      	mov	r1, sp
 8008ec6:	f001 fa25 	bl	800a314 <LoRaMacCommandsSerializeCmds>
 8008eca:	b1c0      	cbz	r0, 8008efe <PrepareFrame+0x16a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ecc:	2013      	movs	r0, #19
 8008ece:	e789      	b.n	8008de4 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8008ed0:	f1b8 0f00 	cmp.w	r8, #0
 8008ed4:	d017      	beq.n	8008f06 <PrepareFrame+0x172>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d084      	beq.n	8008de4 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8008eda:	4c0c      	ldr	r4, [pc, #48]	; (8008f0c <PrepareFrame+0x178>)
 8008edc:	b282      	uxth	r2, r0
 8008ede:	4641      	mov	r1, r8
 8008ee0:	1ce0      	adds	r0, r4, #3
 8008ee2:	f005 f990 	bl	800e206 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8008ee6:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8008eea:	3301      	adds	r3, #1
 8008eec:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e778      	b.n	8008de4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008ef2:	2012      	movs	r0, #18
 8008ef4:	e776      	b.n	8008de4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ef6:	2013      	movs	r0, #19
 8008ef8:	e774      	b.n	8008de4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008efa:	2013      	movs	r0, #19
 8008efc:	e772      	b.n	8008de4 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8008efe:	200a      	movs	r0, #10
 8008f00:	e770      	b.n	8008de4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008f02:	2013      	movs	r0, #19
 8008f04:	e76e      	b.n	8008de4 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8008f06:	2000      	movs	r0, #0
 8008f08:	e76c      	b.n	8008de4 <PrepareFrame+0x50>
 8008f0a:	bf00      	nop
 8008f0c:	200003f4 	.word	0x200003f4
 8008f10:	200008fc 	.word	0x200008fc
 8008f14:	2000087c 	.word	0x2000087c
 8008f18:	2000050c 	.word	0x2000050c

08008f1c <Send>:
{
 8008f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f20:	b08a      	sub	sp, #40	; 0x28
 8008f22:	4617      	mov	r7, r2
 8008f24:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f26:	4c47      	ldr	r4, [pc, #284]	; (8009044 <Send+0x128>)
 8008f28:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8008f2c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008f30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008f32:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008f34:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 8081 	beq.w	8009040 <Send+0x124>
 8008f3e:	4605      	mov	r5, r0
 8008f40:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8008f42:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 8008f46:	b90b      	cbnz	r3, 8008f4c <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8008f4c:	2100      	movs	r1, #0
    fCtrl.Bits.FOptsLen      = 0;
 8008f4e:	460b      	mov	r3, r1
 8008f50:	f361 0303 	bfi	r3, r1, #0, #4
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8008f54:	483b      	ldr	r0, [pc, #236]	; (8009044 <Send+0x128>)
 8008f56:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 8008f5a:	f361 13c7 	bfi	r3, r1, #7, #1
 8008f5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008f62:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d057      	beq.n	800901a <Send+0xfe>
        fCtrl.Bits.FPending      = 0;
 8008f6a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008f6e:	f36f 1304 	bfc	r3, #4, #1
 8008f72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8008f76:	4b33      	ldr	r3, [pc, #204]	; (8009044 <Send+0x128>)
 8008f78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f7c:	b12b      	cbz	r3, 8008f8a <Send+0x6e>
        fCtrl.Bits.Ack = 1;
 8008f7e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008f82:	f043 0320 	orr.w	r3, r3, #32
 8008f86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 8008f8a:	4c2e      	ldr	r4, [pc, #184]	; (8009044 <Send+0x128>)
 8008f8c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008f90:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8008f98:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008f9c:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008f9e:	4b2a      	ldr	r3, [pc, #168]	; (8009048 <Send+0x12c>)
 8008fa0:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 8008fa4:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8008fa8:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8008fac:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008fb0:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008fb4:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008fb8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8008fbc:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8008fc0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008fc4:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008fc8:	ab08      	add	r3, sp, #32
 8008fca:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8008fce:	f104 0139 	add.w	r1, r4, #57	; 0x39
 8008fd2:	a803      	add	r0, sp, #12
 8008fd4:	f001 f85f 	bl	800a096 <LoRaMacAdrCalcNext>
 8008fd8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008fdc:	f360 1386 	bfi	r3, r0, #6, #1
 8008fe0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008fe4:	f8cd 8000 	str.w	r8, [sp]
 8008fe8:	463b      	mov	r3, r7
 8008fea:	4632      	mov	r2, r6
 8008fec:	a909      	add	r1, sp, #36	; 0x24
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f7ff fed0 	bl	8008d94 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	b108      	cbz	r0, 8008ffc <Send+0xe0>
 8008ff8:	280a      	cmp	r0, #10
 8008ffa:	d104      	bne.n	8009006 <Send+0xea>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8008ffc:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009000:	f7ff f9da 	bl	80083b8 <ScheduleTx>
 8009004:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009006:	b17c      	cbz	r4, 8009028 <Send+0x10c>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009008:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <Send+0x128>)
 800900a:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800900e:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009012:	4620      	mov	r0, r4
 8009014:	b00a      	add	sp, #40	; 0x28
 8009016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800901a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800901e:	f043 0310 	orr.w	r3, r3, #16
 8009022:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009026:	e7a6      	b.n	8008f76 <Send+0x5a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <Send+0x128>)
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009030:	9a08      	ldr	r2, [sp, #32]
 8009032:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009034:	f001 f936 	bl	800a2a4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009038:	2800      	cmp	r0, #0
 800903a:	d0ea      	beq.n	8009012 <Send+0xf6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800903c:	2413      	movs	r4, #19
 800903e:	e7e8      	b.n	8009012 <Send+0xf6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009040:	2407      	movs	r4, #7
 8009042:	e7e6      	b.n	8009012 <Send+0xf6>
 8009044:	200008fc 	.word	0x200008fc
 8009048:	200003f4 	.word	0x200003f4

0800904c <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800904c:	4b07      	ldr	r3, [pc, #28]	; (800906c <LoRaMacIsBusy+0x20>)
 800904e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009052:	b933      	cbnz	r3, 8009062 <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <LoRaMacIsBusy+0x20>)
 8009056:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800905a:	2b01      	cmp	r3, #1
 800905c:	d003      	beq.n	8009066 <LoRaMacIsBusy+0x1a>
    return true;
 800905e:	2001      	movs	r0, #1
 8009060:	4770      	bx	lr
 8009062:	2001      	movs	r0, #1
 8009064:	4770      	bx	lr
        return false;
 8009066:	2000      	movs	r0, #0
}
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	200003f4 	.word	0x200003f4

08009070 <LoRaMacProcess>:
{
 8009070:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009072:	f7fe ffd7 	bl	8008024 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009076:	f001 f83c 	bl	800a0f2 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800907a:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <LoRaMacProcess+0x60>)
 800907c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009080:	f013 0f20 	tst.w	r3, #32
 8009084:	d107      	bne.n	8009096 <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 8009086:	f7fd fea9 	bl	8006ddc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800908a:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <LoRaMacProcess+0x60>)
 800908c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009090:	2b02      	cmp	r3, #2
 8009092:	d01a      	beq.n	80090ca <LoRaMacProcess+0x5a>
}
 8009094:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009096:	2000      	movs	r0, #0
 8009098:	f7fd fe9a 	bl	8006dd0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800909c:	f7fd fee8 	bl	8006e70 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 80090a0:	f7fd ffc4 	bl	800702c <IsRequestPending>
 80090a4:	b110      	cbz	r0, 80090ac <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80090a6:	f7fe f8e9 	bl	800727c <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 80090aa:	b918      	cbnz	r0, 80090b4 <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 80090ac:	f7fe ffe8 	bl	8008080 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80090b0:	f7ff fa2e 	bl	8008510 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 80090b4:	f7ff fa78 	bl	80085a8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80090b8:	f7ff fac0 	bl	800863c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 80090bc:	4805      	ldr	r0, [pc, #20]	; (80090d4 <LoRaMacProcess+0x64>)
 80090be:	f7ff fad5 	bl	800866c <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80090c2:	2001      	movs	r0, #1
 80090c4:	f7fd fe84 	bl	8006dd0 <LoRaMacEnableRequests>
 80090c8:	e7dd      	b.n	8009086 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 80090ca:	f7ff fbbf 	bl	800884c <OpenContinuousRxCWindow>
}
 80090ce:	e7e1      	b.n	8009094 <LoRaMacProcess+0x24>
 80090d0:	200003f4 	.word	0x200003f4
 80090d4:	200008fc 	.word	0x200008fc

080090d8 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80090de:	2800      	cmp	r0, #0
 80090e0:	f000 8190 	beq.w	8009404 <LoRaMacInitialization+0x32c>
 80090e4:	460e      	mov	r6, r1
 80090e6:	4691      	mov	r9, r2
 80090e8:	4680      	mov	r8, r0
 80090ea:	2900      	cmp	r1, #0
 80090ec:	f000 818c 	beq.w	8009408 <LoRaMacInitialization+0x330>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80090f0:	6803      	ldr	r3, [r0, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 818a 	beq.w	800940c <LoRaMacInitialization+0x334>
        ( primitives->MacMcpsIndication == NULL ) ||
 80090f8:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 8188 	beq.w	8009410 <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009100:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 8186 	beq.w	8009414 <LoRaMacInitialization+0x33c>
        ( primitives->MacMlmeIndication == NULL ) )
 8009108:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 8184 	beq.w	8009418 <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009110:	4610      	mov	r0, r2
 8009112:	f001 ffa6 	bl	800b062 <RegionIsActive>
 8009116:	2800      	cmp	r0, #0
 8009118:	f000 8180 	beq.w	800941c <LoRaMacInitialization+0x344>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800911c:	4640      	mov	r0, r8
 800911e:	f001 f9a3 	bl	800a468 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009122:	4cc5      	ldr	r4, [pc, #788]	; (8009438 <LoRaMacInitialization+0x360>)
 8009124:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8009128:	2100      	movs	r1, #0
 800912a:	4620      	mov	r0, r4
 800912c:	f005 f881 	bl	800e232 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009130:	4dc2      	ldr	r5, [pc, #776]	; (800943c <LoRaMacInitialization+0x364>)
 8009132:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8009136:	2100      	movs	r1, #0
 8009138:	4628      	mov	r0, r5
 800913a:	f005 f87a 	bl	800e232 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800913e:	f04f 0a01 	mov.w	sl, #1
 8009142:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8009146:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 800914a:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800914e:	2700      	movs	r7, #0
 8009150:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009154:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009158:	4bb9      	ldr	r3, [pc, #740]	; (8009440 <LoRaMacInitialization+0x368>)
 800915a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800915e:	230f      	movs	r3, #15
 8009160:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009164:	a908      	add	r1, sp, #32
 8009166:	4648      	mov	r0, r9
 8009168:	f001 ff85 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800916c:	1bc0      	subs	r0, r0, r7
 800916e:	bf18      	it	ne
 8009170:	2001      	movne	r0, #1
 8009172:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009176:	f04f 0b0a 	mov.w	fp, #10
 800917a:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800917e:	a908      	add	r1, sp, #32
 8009180:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009184:	f001 ff77 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009188:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 800918c:	f04f 0906 	mov.w	r9, #6
 8009190:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009194:	a908      	add	r1, sp, #32
 8009196:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800919a:	f001 ff6c 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800919e:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80091a2:	2310      	movs	r3, #16
 80091a4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091a8:	a908      	add	r1, sp, #32
 80091aa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091ae:	f001 ff62 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80091b2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80091b6:	2311      	movs	r3, #17
 80091b8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091bc:	a908      	add	r1, sp, #32
 80091be:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091c2:	f001 ff58 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80091c6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80091ca:	2312      	movs	r3, #18
 80091cc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091d0:	a908      	add	r1, sp, #32
 80091d2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091d6:	f001 ff4e 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80091da:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80091de:	2313      	movs	r3, #19
 80091e0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091e4:	a908      	add	r1, sp, #32
 80091e6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091ea:	f001 ff44 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80091ee:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80091f2:	2314      	movs	r3, #20
 80091f4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80091f8:	a908      	add	r1, sp, #32
 80091fa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091fe:	f001 ff3a 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009202:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009206:	2317      	movs	r3, #23
 8009208:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800920c:	a908      	add	r1, sp, #32
 800920e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009212:	f001 ff30 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009216:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800921a:	2318      	movs	r3, #24
 800921c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009220:	a908      	add	r1, sp, #32
 8009222:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009226:	f001 ff26 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800922a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800922e:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009232:	2319      	movs	r3, #25
 8009234:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009238:	a908      	add	r1, sp, #32
 800923a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800923e:	f001 ff1a 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009242:	b2c0      	uxtb	r0, r0
 8009244:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009248:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800924c:	231e      	movs	r3, #30
 800924e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009252:	a908      	add	r1, sp, #32
 8009254:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009258:	f001 ff0d 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800925c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009260:	231f      	movs	r3, #31
 8009262:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009266:	a908      	add	r1, sp, #32
 8009268:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800926c:	f001 ff03 	bl	800b076 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009270:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009274:	2320      	movs	r3, #32
 8009276:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800927a:	eb0d 0103 	add.w	r1, sp, r3
 800927e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009282:	f001 fef8 	bl	800b076 <RegionGetPhyParam>
 8009286:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800928e:	2321      	movs	r3, #33	; 0x21
 8009290:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009294:	a908      	add	r1, sp, #32
 8009296:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800929a:	f001 feec 	bl	800b076 <RegionGetPhyParam>
 800929e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80092a0:	9b07      	ldr	r3, [sp, #28]
 80092a2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80092a6:	230b      	movs	r3, #11
 80092a8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092ac:	a908      	add	r1, sp, #32
 80092ae:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092b2:	f001 fee0 	bl	800b076 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 80092b6:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80092ba:	230c      	movs	r3, #12
 80092bc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092c0:	a908      	add	r1, sp, #32
 80092c2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092c6:	f001 fed6 	bl	800b076 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 80092ca:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80092ce:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80092d2:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80092d6:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80092da:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80092de:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80092e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80092e6:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80092e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80092ec:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80092ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80092f2:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80092f4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80092f8:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80092fa:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80092fe:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8009300:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8009304:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009308:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 800930c:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800930e:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 8009312:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009314:	a904      	add	r1, sp, #16
 8009316:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800931a:	f001 fed2 	bl	800b0c2 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800931e:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 8009322:	f7ff fbbb 	bl	8008a9c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8009326:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800932a:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800932e:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8009332:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8009336:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009338:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800933a:	9700      	str	r7, [sp, #0]
 800933c:	4b41      	ldr	r3, [pc, #260]	; (8009444 <LoRaMacInitialization+0x36c>)
 800933e:	463a      	mov	r2, r7
 8009340:	f04f 31ff 	mov.w	r1, #4294967295
 8009344:	f505 705a 	add.w	r0, r5, #872	; 0x368
 8009348:	f007 fbc2 	bl	8010ad0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800934c:	9700      	str	r7, [sp, #0]
 800934e:	4b3e      	ldr	r3, [pc, #248]	; (8009448 <LoRaMacInitialization+0x370>)
 8009350:	463a      	mov	r2, r7
 8009352:	f04f 31ff 	mov.w	r1, #4294967295
 8009356:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800935a:	f007 fbb9 	bl	8010ad0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800935e:	9700      	str	r7, [sp, #0]
 8009360:	4b3a      	ldr	r3, [pc, #232]	; (800944c <LoRaMacInitialization+0x374>)
 8009362:	463a      	mov	r2, r7
 8009364:	f04f 31ff 	mov.w	r1, #4294967295
 8009368:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800936c:	f007 fbb0 	bl	8010ad0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009370:	9700      	str	r7, [sp, #0]
 8009372:	4b37      	ldr	r3, [pc, #220]	; (8009450 <LoRaMacInitialization+0x378>)
 8009374:	463a      	mov	r2, r7
 8009376:	f04f 31ff 	mov.w	r1, #4294967295
 800937a:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800937e:	f007 fba7 	bl	8010ad0 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009382:	af02      	add	r7, sp, #8
 8009384:	4638      	mov	r0, r7
 8009386:	f007 fb37 	bl	80109f8 <SysTimeGetMcuTime>
 800938a:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800938e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009392:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009396:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <LoRaMacInitialization+0x37c>)
 8009398:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800939c:	4b2e      	ldr	r3, [pc, #184]	; (8009458 <LoRaMacInitialization+0x380>)
 800939e:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80093a2:	4b2e      	ldr	r3, [pc, #184]	; (800945c <LoRaMacInitialization+0x384>)
 80093a4:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80093a8:	4b2d      	ldr	r3, [pc, #180]	; (8009460 <LoRaMacInitialization+0x388>)
 80093aa:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80093ae:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <LoRaMacInitialization+0x38c>)
 80093b0:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80093b4:	4b2c      	ldr	r3, [pc, #176]	; (8009468 <LoRaMacInitialization+0x390>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 80093bc:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80093be:	68b1      	ldr	r1, [r6, #8]
 80093c0:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80093c4:	f004 fd36 	bl	800de34 <SecureElementInit>
 80093c8:	bb68      	cbnz	r0, 8009426 <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80093ca:	4620      	mov	r0, r4
 80093cc:	f001 fadc 	bl	800a988 <LoRaMacCryptoInit>
 80093d0:	bb58      	cbnz	r0, 800942a <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80093d2:	f000 ff11 	bl	800a1f8 <LoRaMacCommandsInit>
 80093d6:	bb50      	cbnz	r0, 800942e <LoRaMacInitialization+0x356>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80093d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093dc:	f001 fb3c 	bl	800aa58 <LoRaMacCryptoSetMulticastReference>
 80093e0:	4604      	mov	r4, r0
 80093e2:	bb30      	cbnz	r0, 8009432 <LoRaMacInitialization+0x35a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80093e4:	4d20      	ldr	r5, [pc, #128]	; (8009468 <LoRaMacInitialization+0x390>)
 80093e6:	696b      	ldr	r3, [r5, #20]
 80093e8:	4798      	blx	r3
 80093ea:	f004 fef9 	bl	800e1e0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80093ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80093f0:	4a11      	ldr	r2, [pc, #68]	; (8009438 <LoRaMacInitialization+0x360>)
 80093f2:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 80093f6:	4798      	blx	r3
    Radio.Sleep( );
 80093f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80093fa:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80093fc:	4650      	mov	r0, sl
 80093fe:	f7fd fce7 	bl	8006dd0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8009402:	e00c      	b.n	800941e <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009404:	2403      	movs	r4, #3
 8009406:	e00a      	b.n	800941e <LoRaMacInitialization+0x346>
 8009408:	2403      	movs	r4, #3
 800940a:	e008      	b.n	800941e <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800940c:	2403      	movs	r4, #3
 800940e:	e006      	b.n	800941e <LoRaMacInitialization+0x346>
 8009410:	2403      	movs	r4, #3
 8009412:	e004      	b.n	800941e <LoRaMacInitialization+0x346>
 8009414:	2403      	movs	r4, #3
 8009416:	e002      	b.n	800941e <LoRaMacInitialization+0x346>
 8009418:	2403      	movs	r4, #3
 800941a:	e000      	b.n	800941e <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800941c:	2409      	movs	r4, #9
}
 800941e:	4620      	mov	r0, r4
 8009420:	b00b      	add	sp, #44	; 0x2c
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009426:	2411      	movs	r4, #17
 8009428:	e7f9      	b.n	800941e <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800942a:	2411      	movs	r4, #17
 800942c:	e7f7      	b.n	800941e <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800942e:	2413      	movs	r4, #19
 8009430:	e7f5      	b.n	800941e <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009432:	2411      	movs	r4, #17
 8009434:	e7f3      	b.n	800941e <LoRaMacInitialization+0x346>
 8009436:	bf00      	nop
 8009438:	200008fc 	.word	0x200008fc
 800943c:	200003f4 	.word	0x200003f4
 8009440:	01000300 	.word	0x01000300
 8009444:	080084c1 	.word	0x080084c1
 8009448:	0800893d 	.word	0x0800893d
 800944c:	080088ed 	.word	0x080088ed
 8009450:	080071f9 	.word	0x080071f9
 8009454:	08008a45 	.word	0x08008a45
 8009458:	080089ed 	.word	0x080089ed
 800945c:	08006d85 	.word	0x08006d85
 8009460:	080089b9 	.word	0x080089b9
 8009464:	08008985 	.word	0x08008985
 8009468:	08011df8 	.word	0x08011df8

0800946c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800946c:	2000      	movs	r0, #0
 800946e:	4b02      	ldr	r3, [pc, #8]	; (8009478 <LoRaMacStart+0xc>)
 8009470:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	200003f4 	.word	0x200003f4

0800947c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800947c:	b530      	push	{r4, r5, lr}
 800947e:	b089      	sub	sp, #36	; 0x24
 8009480:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009482:	4b2f      	ldr	r3, [pc, #188]	; (8009540 <LoRaMacQueryTxPossible+0xc4>)
 8009484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009486:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009488:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 800948c:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009490:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8009494:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800949c:	2900      	cmp	r1, #0
 800949e:	d048      	beq.n	8009532 <LoRaMacQueryTxPossible+0xb6>
 80094a0:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 80094a2:	4b27      	ldr	r3, [pc, #156]	; (8009540 <LoRaMacQueryTxPossible+0xc4>)
 80094a4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80094a8:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 80094aa:	2100      	movs	r1, #0
 80094ac:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80094b0:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 80094b4:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80094b8:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80094ba:	4a22      	ldr	r2, [pc, #136]	; (8009544 <LoRaMacQueryTxPossible+0xc8>)
 80094bc:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 80094c0:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80094c4:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 80094c8:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80094cc:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80094d0:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80094d4:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80094d8:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80094dc:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80094e0:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 80094e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094e8:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80094ec:	ab02      	add	r3, sp, #8
 80094ee:	f10d 0206 	add.w	r2, sp, #6
 80094f2:	f10d 0107 	add.w	r1, sp, #7
 80094f6:	a803      	add	r0, sp, #12
 80094f8:	f000 fdcd 	bl	800a096 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80094fc:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8009500:	f7fd fdcc 	bl	800709c <GetMaxAppPayloadWithoutFOptsLength>
 8009504:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009506:	4668      	mov	r0, sp
 8009508:	f000 fef8 	bl	800a2fc <LoRaMacCommandsGetSizeSerializedCmds>
 800950c:	b998      	cbnz	r0, 8009536 <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	2b0f      	cmp	r3, #15
 8009512:	d80a      	bhi.n	800952a <LoRaMacQueryTxPossible+0xae>
 8009514:	786a      	ldrb	r2, [r5, #1]
 8009516:	4293      	cmp	r3, r2
 8009518:	d807      	bhi.n	800952a <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800951e:	9b00      	ldr	r3, [sp, #0]
 8009520:	441c      	add	r4, r3
 8009522:	42a2      	cmp	r2, r4
 8009524:	d309      	bcc.n	800953a <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8009526:	b009      	add	sp, #36	; 0x24
 8009528:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800952e:	2008      	movs	r0, #8
 8009530:	e7f9      	b.n	8009526 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009532:	2003      	movs	r0, #3
 8009534:	e7f7      	b.n	8009526 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009536:	2013      	movs	r0, #19
 8009538:	e7f5      	b.n	8009526 <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800953a:	2008      	movs	r0, #8
 800953c:	e7f3      	b.n	8009526 <LoRaMacQueryTxPossible+0xaa>
 800953e:	bf00      	nop
 8009540:	200008fc 	.word	0x200008fc
 8009544:	200003f4 	.word	0x200003f4

08009548 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8009548:	2800      	cmp	r0, #0
 800954a:	f000 8109 	beq.w	8009760 <LoRaMacMibGetRequestConfirm+0x218>
{
 800954e:	b510      	push	{r4, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8009554:	7800      	ldrb	r0, [r0, #0]
 8009556:	2828      	cmp	r0, #40	; 0x28
 8009558:	f200 80fe 	bhi.w	8009758 <LoRaMacMibGetRequestConfirm+0x210>
 800955c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009560:	002f0029 	.word	0x002f0029
 8009564:	003a0035 	.word	0x003a0035
 8009568:	0045003f 	.word	0x0045003f
 800956c:	00fc004b 	.word	0x00fc004b
 8009570:	00fc00fc 	.word	0x00fc00fc
 8009574:	00fc00fc 	.word	0x00fc00fc
 8009578:	00fc00fc 	.word	0x00fc00fc
 800957c:	005100fc 	.word	0x005100fc
 8009580:	005d0057 	.word	0x005d0057
 8009584:	00710069 	.word	0x00710069
 8009588:	00810079 	.word	0x00810079
 800958c:	00890095 	.word	0x00890095
 8009590:	00a700a1 	.word	0x00a700a1
 8009594:	00b100ac 	.word	0x00b100ac
 8009598:	00bb00b6 	.word	0x00bb00b6
 800959c:	00c600c0 	.word	0x00c600c0
 80095a0:	00cc00d2 	.word	0x00cc00d2
 80095a4:	00dd00d8 	.word	0x00dd00d8
 80095a8:	00ed00e3 	.word	0x00ed00e3
 80095ac:	00fc00e8 	.word	0x00fc00e8
 80095b0:	00f3      	.short	0x00f3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80095b2:	4b6c      	ldr	r3, [pc, #432]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80095b4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80095b8:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 80095ba:	b004      	add	sp, #16
 80095bc:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80095be:	4b69      	ldr	r3, [pc, #420]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80095c0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80095c4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095c6:	2000      	movs	r0, #0
            break;
 80095c8:	e7f7      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80095ca:	f004 fdd5 	bl	800e178 <SecureElementGetDevEui>
 80095ce:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095d0:	2000      	movs	r0, #0
            break;
 80095d2:	e7f2      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80095d4:	f004 fde6 	bl	800e1a4 <SecureElementGetJoinEui>
 80095d8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095da:	2000      	movs	r0, #0
            break;
 80095dc:	e7ed      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80095de:	4b61      	ldr	r3, [pc, #388]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80095e0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80095e4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095e6:	2000      	movs	r0, #0
            break;
 80095e8:	e7e7      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80095ea:	4b5e      	ldr	r3, [pc, #376]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80095ec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80095f0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095f2:	2000      	movs	r0, #0
            break;
 80095f4:	e7e1      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80095f6:	4b5b      	ldr	r3, [pc, #364]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80095f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80095fc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80095fe:	2000      	movs	r0, #0
            break;
 8009600:	e7db      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8009602:	4b58      	ldr	r3, [pc, #352]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009604:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8009608:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800960a:	2000      	movs	r0, #0
            break;
 800960c:	e7d5      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800960e:	4b55      	ldr	r3, [pc, #340]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009614:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009616:	2000      	movs	r0, #0
            break;
 8009618:	e7cf      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 800961a:	231d      	movs	r3, #29
 800961c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009620:	a902      	add	r1, sp, #8
 8009622:	4b50      	ldr	r3, [pc, #320]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009624:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009628:	f001 fd25 	bl	800b076 <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 800962c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800962e:	2000      	movs	r0, #0
            break;
 8009630:	e7c3      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009632:	3404      	adds	r4, #4
 8009634:	4b4c      	ldr	r3, [pc, #304]	; (8009768 <LoRaMacMibGetRequestConfirm+0x220>)
 8009636:	e893 0003 	ldmia.w	r3, {r0, r1}
 800963a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800963e:	2000      	movs	r0, #0
            break;
 8009640:	e7bb      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009642:	3404      	adds	r4, #4
 8009644:	4b49      	ldr	r3, [pc, #292]	; (800976c <LoRaMacMibGetRequestConfirm+0x224>)
 8009646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800964a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800964e:	2000      	movs	r0, #0
            break;
 8009650:	e7b3      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8009652:	3404      	adds	r4, #4
 8009654:	4b46      	ldr	r3, [pc, #280]	; (8009770 <LoRaMacMibGetRequestConfirm+0x228>)
 8009656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800965a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800965e:	2000      	movs	r0, #0
            break;
 8009660:	e7ab      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009662:	3404      	adds	r4, #4
 8009664:	4b43      	ldr	r3, [pc, #268]	; (8009774 <LoRaMacMibGetRequestConfirm+0x22c>)
 8009666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800966a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800966e:	2000      	movs	r0, #0
            break;
 8009670:	e7a3      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009672:	231b      	movs	r3, #27
 8009674:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009678:	a902      	add	r1, sp, #8
 800967a:	4b3a      	ldr	r3, [pc, #232]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 800967c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009680:	f001 fcf9 	bl	800b076 <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8009684:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009686:	2000      	movs	r0, #0
            break;
 8009688:	e797      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800968a:	231a      	movs	r3, #26
 800968c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009690:	a902      	add	r1, sp, #8
 8009692:	4b34      	ldr	r3, [pc, #208]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009694:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009698:	f001 fced 	bl	800b076 <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800969c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800969e:	2000      	movs	r0, #0
            break;
 80096a0:	e78b      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80096a2:	4b30      	ldr	r3, [pc, #192]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80096a8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096aa:	2000      	movs	r0, #0
            break;
 80096ac:	e785      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80096ae:	4b2d      	ldr	r3, [pc, #180]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096b2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096b4:	2000      	movs	r0, #0
            break;
 80096b6:	e780      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096bc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096be:	2000      	movs	r0, #0
            break;
 80096c0:	e77b      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80096c2:	4b28      	ldr	r3, [pc, #160]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096c8:	2000      	movs	r0, #0
            break;
 80096ca:	e776      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80096cc:	4b25      	ldr	r3, [pc, #148]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096d2:	2000      	movs	r0, #0
            break;
 80096d4:	e771      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80096d6:	4b23      	ldr	r3, [pc, #140]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096da:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096dc:	2000      	movs	r0, #0
            break;
 80096de:	e76c      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80096e0:	4b20      	ldr	r3, [pc, #128]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096e2:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 80096e6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096e8:	2000      	movs	r0, #0
            break;
 80096ea:	e766      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80096ec:	4b1d      	ldr	r3, [pc, #116]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80096f2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096f4:	2000      	movs	r0, #0
            break;
 80096f6:	e760      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80096f8:	4b1a      	ldr	r3, [pc, #104]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 80096fa:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 80096fe:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009700:	2000      	movs	r0, #0
            break;
 8009702:	e75a      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009704:	4b17      	ldr	r3, [pc, #92]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009706:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800970a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800970c:	2000      	movs	r0, #0
            break;
 800970e:	e754      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8009710:	4b14      	ldr	r3, [pc, #80]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009714:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009716:	2000      	movs	r0, #0
            break;
 8009718:	e74f      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800971a:	4b12      	ldr	r3, [pc, #72]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 800971c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009720:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009722:	2000      	movs	r0, #0
            break;
 8009724:	e749      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009726:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800972a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800972c:	2000      	movs	r0, #0
            break;
 800972e:	e744      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 8009730:	f7fd fbde 	bl	8006ef0 <GetNvmData>
 8009734:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009736:	2000      	movs	r0, #0
            break;
 8009738:	e73f      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800973a:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 800973c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009740:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009742:	2000      	movs	r0, #0
            break;
 8009744:	e739      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8009746:	4b07      	ldr	r3, [pc, #28]	; (8009764 <LoRaMacMibGetRequestConfirm+0x21c>)
 8009748:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800974c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800974e:	f001 fdbd 	bl	800b2cc <RegionGetVersion>
 8009752:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009754:	2000      	movs	r0, #0
            break;
 8009756:	e730      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fcbc 	bl	800a0d6 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800975e:	e72c      	b.n	80095ba <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009760:	2003      	movs	r0, #3
}
 8009762:	4770      	bx	lr
 8009764:	200008fc 	.word	0x200008fc
 8009768:	20000960 	.word	0x20000960
 800976c:	200009a0 	.word	0x200009a0
 8009770:	20000968 	.word	0x20000968
 8009774:	200009a8 	.word	0x200009a8

08009778 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009778:	b530      	push	{r4, r5, lr}
 800977a:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800977c:	2800      	cmp	r0, #0
 800977e:	f000 8240 	beq.w	8009c02 <LoRaMacMibSetRequestConfirm+0x48a>
 8009782:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009784:	4bb1      	ldr	r3, [pc, #708]	; (8009a4c <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009786:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800978a:	f013 0f02 	tst.w	r3, #2
 800978e:	f040 823a 	bne.w	8009c06 <LoRaMacMibSetRequestConfirm+0x48e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 8009792:	7804      	ldrb	r4, [r0, #0]
 8009794:	2c27      	cmp	r4, #39	; 0x27
 8009796:	f200 8230 	bhi.w	8009bfa <LoRaMacMibSetRequestConfirm+0x482>
 800979a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800979e:	0028      	.short	0x0028
 80097a0:	0036002d 	.word	0x0036002d
 80097a4:	0047003f 	.word	0x0047003f
 80097a8:	0053004d 	.word	0x0053004d
 80097ac:	00660059 	.word	0x00660059
 80097b0:	00800073 	.word	0x00800073
 80097b4:	009a008d 	.word	0x009a008d
 80097b8:	00b400a7 	.word	0x00b400a7
 80097bc:	00cc00c1 	.word	0x00cc00c1
 80097c0:	00d2022e 	.word	0x00d2022e
 80097c4:	011000f7 	.word	0x011000f7
 80097c8:	0173013d 	.word	0x0173013d
 80097cc:	01830163 	.word	0x01830163
 80097d0:	0193018e 	.word	0x0193018e
 80097d4:	019d0198 	.word	0x019d0198
 80097d8:	01a701a2 	.word	0x01a701a2
 80097dc:	01e901bc 	.word	0x01e901bc
 80097e0:	01fd01d5 	.word	0x01fd01d5
 80097e4:	020c0204 	.word	0x020c0204
 80097e8:	02170211 	.word	0x02170211
 80097ec:	021e      	.short	0x021e
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80097ee:	7900      	ldrb	r0, [r0, #4]
 80097f0:	f7ff f9f6 	bl	8008be0 <SwitchClass>
 80097f4:	4604      	mov	r4, r0
            break;
 80097f6:	e207      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80097f8:	7903      	ldrb	r3, [r0, #4]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	f000 8207 	beq.w	8009c0e <LoRaMacMibSetRequestConfirm+0x496>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8009800:	4a93      	ldr	r2, [pc, #588]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009802:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009806:	2400      	movs	r4, #0
 8009808:	e1fe      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800980a:	6840      	ldr	r0, [r0, #4]
 800980c:	f004 fca6 	bl	800e15c <SecureElementSetDevEui>
 8009810:	4604      	mov	r4, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	f000 81f8 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009818:	2403      	movs	r4, #3
 800981a:	e1f5      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800981c:	6840      	ldr	r0, [r0, #4]
 800981e:	f004 fcb1 	bl	800e184 <SecureElementSetJoinEui>
 8009822:	2800      	cmp	r0, #0
 8009824:	f040 81f0 	bne.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009828:	4604      	mov	r4, r0
 800982a:	e1ed      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800982c:	7902      	ldrb	r2, [r0, #4]
 800982e:	4b88      	ldr	r3, [pc, #544]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009830:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009834:	2400      	movs	r4, #0
            break;
 8009836:	e1e7      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8009838:	6842      	ldr	r2, [r0, #4]
 800983a:	4b85      	ldr	r3, [pc, #532]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800983c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009840:	2400      	movs	r4, #0
            break;
 8009842:	e1e1      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009844:	6842      	ldr	r2, [r0, #4]
 8009846:	4b82      	ldr	r3, [pc, #520]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009848:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800984c:	2400      	movs	r4, #0
            break;
 800984e:	e1db      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8009850:	6841      	ldr	r1, [r0, #4]
 8009852:	2900      	cmp	r1, #0
 8009854:	f000 81dd 	beq.w	8009c12 <LoRaMacMibSetRequestConfirm+0x49a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009858:	2000      	movs	r0, #0
 800985a:	f001 fa19 	bl	800ac90 <LoRaMacCryptoSetKey>
 800985e:	4604      	mov	r4, r0
 8009860:	2800      	cmp	r0, #0
 8009862:	f000 81d1 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009866:	2411      	movs	r4, #17
 8009868:	e1ce      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800986a:	6841      	ldr	r1, [r0, #4]
 800986c:	2900      	cmp	r1, #0
 800986e:	f000 81d2 	beq.w	8009c16 <LoRaMacMibSetRequestConfirm+0x49e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009872:	2001      	movs	r0, #1
 8009874:	f001 fa0c 	bl	800ac90 <LoRaMacCryptoSetKey>
 8009878:	4604      	mov	r4, r0
 800987a:	2800      	cmp	r0, #0
 800987c:	f000 81c4 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009880:	2411      	movs	r4, #17
 8009882:	e1c1      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8009884:	6841      	ldr	r1, [r0, #4]
 8009886:	2900      	cmp	r1, #0
 8009888:	f000 81c7 	beq.w	8009c1a <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800988c:	2002      	movs	r0, #2
 800988e:	f001 f9ff 	bl	800ac90 <LoRaMacCryptoSetKey>
 8009892:	4604      	mov	r4, r0
 8009894:	2800      	cmp	r0, #0
 8009896:	f000 81b7 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800989a:	2411      	movs	r4, #17
 800989c:	e1b4      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800989e:	6841      	ldr	r1, [r0, #4]
 80098a0:	2900      	cmp	r1, #0
 80098a2:	f000 81bc 	beq.w	8009c1e <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80098a6:	2003      	movs	r0, #3
 80098a8:	f001 f9f2 	bl	800ac90 <LoRaMacCryptoSetKey>
 80098ac:	4604      	mov	r4, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f000 81aa 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80098b4:	2411      	movs	r4, #17
 80098b6:	e1a7      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80098b8:	6841      	ldr	r1, [r0, #4]
 80098ba:	2900      	cmp	r1, #0
 80098bc:	f000 81b1 	beq.w	8009c22 <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80098c0:	207f      	movs	r0, #127	; 0x7f
 80098c2:	f001 f9e5 	bl	800ac90 <LoRaMacCryptoSetKey>
 80098c6:	4604      	mov	r4, r0
 80098c8:	2800      	cmp	r0, #0
 80098ca:	f000 819d 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80098ce:	2411      	movs	r4, #17
 80098d0:	e19a      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80098d2:	6841      	ldr	r1, [r0, #4]
 80098d4:	2900      	cmp	r1, #0
 80098d6:	f000 81a6 	beq.w	8009c26 <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80098da:	2080      	movs	r0, #128	; 0x80
 80098dc:	f001 f9d8 	bl	800ac90 <LoRaMacCryptoSetKey>
 80098e0:	4604      	mov	r4, r0
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f000 8190 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80098e8:	2411      	movs	r4, #17
 80098ea:	e18d      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80098ec:	6841      	ldr	r1, [r0, #4]
 80098ee:	2900      	cmp	r1, #0
 80098f0:	f000 819b 	beq.w	8009c2a <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80098f4:	2081      	movs	r0, #129	; 0x81
 80098f6:	f001 f9cb 	bl	800ac90 <LoRaMacCryptoSetKey>
 80098fa:	4604      	mov	r4, r0
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f000 8183 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009902:	2411      	movs	r4, #17
 8009904:	e180      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009906:	6841      	ldr	r1, [r0, #4]
 8009908:	2900      	cmp	r1, #0
 800990a:	f000 8190 	beq.w	8009c2e <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800990e:	2082      	movs	r0, #130	; 0x82
 8009910:	f001 f9be 	bl	800ac90 <LoRaMacCryptoSetKey>
 8009914:	4604      	mov	r4, r0
 8009916:	2800      	cmp	r0, #0
 8009918:	f000 8176 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800991c:	2411      	movs	r4, #17
 800991e:	e173      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009920:	7900      	ldrb	r0, [r0, #4]
 8009922:	4b4b      	ldr	r3, [pc, #300]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009924:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009928:	4c4a      	ldr	r4, [pc, #296]	; (8009a54 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800992a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800992c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800992e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009930:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009932:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 8009934:	e168      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009936:	7902      	ldrb	r2, [r0, #4]
 8009938:	4b45      	ldr	r3, [pc, #276]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800993a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800993e:	2400      	movs	r4, #0
            break;
 8009940:	e162      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009942:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009946:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800994a:	4b41      	ldr	r3, [pc, #260]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800994c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009950:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009954:	2207      	movs	r2, #7
 8009956:	a901      	add	r1, sp, #4
 8009958:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800995c:	f001 fbbf 	bl	800b0de <RegionVerify>
 8009960:	b908      	cbnz	r0, 8009966 <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009962:	2403      	movs	r4, #3
 8009964:	e150      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009966:	686b      	ldr	r3, [r5, #4]
 8009968:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800996a:	2200      	movs	r2, #0
 800996c:	a901      	add	r1, sp, #4
 800996e:	4b38      	ldr	r3, [pc, #224]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009970:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009974:	f001 fbb3 	bl	800b0de <RegionVerify>
 8009978:	2800      	cmp	r0, #0
 800997a:	f000 815a 	beq.w	8009c32 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800997e:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009980:	68a9      	ldr	r1, [r5, #8]
 8009982:	6868      	ldr	r0, [r5, #4]
 8009984:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009988:	2400      	movs	r4, #0
 800998a:	e13d      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800998c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009990:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009994:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009996:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800999a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800999e:	2207      	movs	r2, #7
 80099a0:	a901      	add	r1, sp, #4
 80099a2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80099a6:	f001 fb9a 	bl	800b0de <RegionVerify>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	f000 8143 	beq.w	8009c36 <LoRaMacMibSetRequestConfirm+0x4be>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80099b0:	4b2a      	ldr	r3, [pc, #168]	; (8009a5c <LoRaMacMibSetRequestConfirm+0x2e4>)
 80099b2:	68a9      	ldr	r1, [r5, #8]
 80099b4:	6868      	ldr	r0, [r5, #4]
 80099b6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099ba:	2400      	movs	r4, #0
 80099bc:	e124      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80099be:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80099c2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80099c6:	4b22      	ldr	r3, [pc, #136]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 80099c8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80099cc:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80099d0:	2207      	movs	r2, #7
 80099d2:	a901      	add	r1, sp, #4
 80099d4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80099d8:	f001 fb81 	bl	800b0de <RegionVerify>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f000 812c 	beq.w	8009c3a <LoRaMacMibSetRequestConfirm+0x4c2>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80099e2:	4b1b      	ldr	r3, [pc, #108]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 80099e4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80099e8:	68a9      	ldr	r1, [r5, #8]
 80099ea:	6868      	ldr	r0, [r5, #4]
 80099ec:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80099f0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d001      	beq.n	80099fc <LoRaMacMibSetRequestConfirm+0x284>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099f8:	2400      	movs	r4, #0
 80099fa:	e105      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80099fc:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 8009a00:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 8009a04:	2c00      	cmp	r4, #0
 8009a06:	f000 80ff 	beq.w	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8009a0a:	4b12      	ldr	r3, [pc, #72]	; (8009a54 <LoRaMacMibSetRequestConfirm+0x2dc>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8009a10:	f7fe ff1c 	bl	800884c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a14:	2400      	movs	r4, #0
 8009a16:	e0f7      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009a18:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009a1c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009a22:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009a26:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009a2a:	2207      	movs	r2, #7
 8009a2c:	a901      	add	r1, sp, #4
 8009a2e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a32:	f001 fb54 	bl	800b0de <RegionVerify>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f000 8101 	beq.w	8009c3e <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009a3c:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8009a3e:	68a9      	ldr	r1, [r5, #8]
 8009a40:	6868      	ldr	r0, [r5, #4]
 8009a42:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a46:	2400      	movs	r4, #0
 8009a48:	e0de      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
 8009a4a:	bf00      	nop
 8009a4c:	200003f4 	.word	0x200003f4
 8009a50:	200008fc 	.word	0x200008fc
 8009a54:	08011df8 	.word	0x08011df8
 8009a58:	20000960 	.word	0x20000960
 8009a5c:	200009a0 	.word	0x200009a0
 8009a60:	200009a8 	.word	0x200009a8
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009a64:	6843      	ldr	r3, [r0, #4]
 8009a66:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009a6e:	a902      	add	r1, sp, #8
 8009a70:	4b7c      	ldr	r3, [pc, #496]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009a72:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a76:	f001 fb50 	bl	800b11a <RegionChanMaskSet>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f000 80e1 	beq.w	8009c42 <LoRaMacMibSetRequestConfirm+0x4ca>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a80:	2400      	movs	r4, #0
 8009a82:	e0c1      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009a84:	6843      	ldr	r3, [r0, #4]
 8009a86:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009a8e:	a902      	add	r1, sp, #8
 8009a90:	4b74      	ldr	r3, [pc, #464]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009a92:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a96:	f001 fb40 	bl	800b11a <RegionChanMaskSet>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f000 80d3 	beq.w	8009c46 <LoRaMacMibSetRequestConfirm+0x4ce>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009aa0:	2400      	movs	r4, #0
 8009aa2:	e0b1      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009aa4:	7902      	ldrb	r2, [r0, #4]
 8009aa6:	1e53      	subs	r3, r2, #1
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b0e      	cmp	r3, #14
 8009aac:	f200 80cd 	bhi.w	8009c4a <LoRaMacMibSetRequestConfirm+0x4d2>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009ab0:	4b6c      	ldr	r3, [pc, #432]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009ab2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ab6:	2400      	movs	r4, #0
 8009ab8:	e0a6      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009aba:	6842      	ldr	r2, [r0, #4]
 8009abc:	4b69      	ldr	r3, [pc, #420]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009abe:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ac0:	2400      	movs	r4, #0
            break;
 8009ac2:	e0a1      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009ac4:	6842      	ldr	r2, [r0, #4]
 8009ac6:	4b67      	ldr	r3, [pc, #412]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009ac8:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009aca:	2400      	movs	r4, #0
            break;
 8009acc:	e09c      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009ace:	6842      	ldr	r2, [r0, #4]
 8009ad0:	4b64      	ldr	r3, [pc, #400]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009ad2:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ad4:	2400      	movs	r4, #0
            break;
 8009ad6:	e097      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009ad8:	6842      	ldr	r2, [r0, #4]
 8009ada:	4b62      	ldr	r3, [pc, #392]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009adc:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ade:	2400      	movs	r4, #0
            break;
 8009ae0:	e092      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009ae2:	6842      	ldr	r2, [r0, #4]
 8009ae4:	4b5f      	ldr	r3, [pc, #380]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009ae6:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ae8:	2400      	movs	r4, #0
            break;
 8009aea:	e08d      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009aec:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009af0:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009af4:	2206      	movs	r2, #6
 8009af6:	a901      	add	r1, sp, #4
 8009af8:	4b5a      	ldr	r3, [pc, #360]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009afa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009afe:	f001 faee 	bl	800b0de <RegionVerify>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f000 80a3 	beq.w	8009c4e <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8009b08:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009b0c:	4b55      	ldr	r3, [pc, #340]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b0e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b12:	2400      	movs	r4, #0
 8009b14:	e078      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009b16:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009b1a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009b1e:	4b51      	ldr	r3, [pc, #324]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b20:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009b24:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009b28:	2205      	movs	r2, #5
 8009b2a:	a901      	add	r1, sp, #4
 8009b2c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b30:	f001 fad5 	bl	800b0de <RegionVerify>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f000 808c 	beq.w	8009c52 <LoRaMacMibSetRequestConfirm+0x4da>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009b3a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009b3e:	4b49      	ldr	r3, [pc, #292]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b44:	2400      	movs	r4, #0
 8009b46:	e05f      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009b48:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009b4c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009b50:	220a      	movs	r2, #10
 8009b52:	a901      	add	r1, sp, #4
 8009b54:	4b43      	ldr	r3, [pc, #268]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b56:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b5a:	f001 fac0 	bl	800b0de <RegionVerify>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d079      	beq.n	8009c56 <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009b62:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009b66:	4b3f      	ldr	r3, [pc, #252]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b68:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b6c:	2400      	movs	r4, #0
 8009b6e:	e04b      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009b70:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009b74:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009b78:	2209      	movs	r2, #9
 8009b7a:	a901      	add	r1, sp, #4
 8009b7c:	4b39      	ldr	r3, [pc, #228]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b7e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b82:	f001 faac 	bl	800b0de <RegionVerify>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d067      	beq.n	8009c5a <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009b8a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009b8e:	4b35      	ldr	r3, [pc, #212]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b94:	2400      	movs	r4, #0
 8009b96:	e037      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009b98:	6842      	ldr	r2, [r0, #4]
 8009b9a:	4b32      	ldr	r3, [pc, #200]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009ba0:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ba2:	2400      	movs	r4, #0
            break;
 8009ba4:	e030      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009ba6:	7902      	ldrb	r2, [r0, #4]
 8009ba8:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009baa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8009bae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bb2:	2400      	movs	r4, #0
            break;
 8009bb4:	e028      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009bb6:	6842      	ldr	r2, [r0, #4]
 8009bb8:	4b2a      	ldr	r3, [pc, #168]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bba:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bbc:	2400      	movs	r4, #0
            break;
 8009bbe:	e023      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009bc0:	6842      	ldr	r2, [r0, #4]
 8009bc2:	4b28      	ldr	r3, [pc, #160]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bc4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bc8:	2400      	movs	r4, #0
            break;
 8009bca:	e01d      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8009bcc:	6840      	ldr	r0, [r0, #4]
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d045      	beq.n	8009c5e <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8009bd2:	f7fe fdaf 	bl	8008734 <RestoreNvmData>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	e016      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009bda:	7983      	ldrb	r3, [r0, #6]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d901      	bls.n	8009be4 <LoRaMacMibSetRequestConfirm+0x46c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009be0:	2403      	movs	r4, #3
 8009be2:	e011      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009be4:	6842      	ldr	r2, [r0, #4]
 8009be6:	4b1f      	ldr	r3, [pc, #124]	; (8009c64 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009be8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009bec:	6840      	ldr	r0, [r0, #4]
 8009bee:	f000 fee3 	bl	800a9b8 <LoRaMacCryptoSetLrWanVersion>
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	b140      	cbz	r0, 8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009bf6:	2411      	movs	r4, #17
 8009bf8:	e006      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009bfa:	f000 fa6e 	bl	800a0da <LoRaMacMibClassBSetRequestConfirm>
 8009bfe:	4604      	mov	r4, r0
            break;
 8009c00:	e002      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009c02:	2403      	movs	r4, #3
 8009c04:	e000      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_BUSY;
 8009c06:	2401      	movs	r4, #1
        }
    }
    return status;
}
 8009c08:	4620      	mov	r0, r4
 8009c0a:	b005      	add	sp, #20
 8009c0c:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c0e:	2403      	movs	r4, #3
 8009c10:	e7fa      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c12:	2403      	movs	r4, #3
 8009c14:	e7f8      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c16:	2403      	movs	r4, #3
 8009c18:	e7f6      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c1a:	2403      	movs	r4, #3
 8009c1c:	e7f4      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c1e:	2403      	movs	r4, #3
 8009c20:	e7f2      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c22:	2403      	movs	r4, #3
 8009c24:	e7f0      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c26:	2403      	movs	r4, #3
 8009c28:	e7ee      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c2a:	2403      	movs	r4, #3
 8009c2c:	e7ec      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c2e:	2403      	movs	r4, #3
 8009c30:	e7ea      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c32:	2403      	movs	r4, #3
 8009c34:	e7e8      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c36:	2403      	movs	r4, #3
 8009c38:	e7e6      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c3a:	2403      	movs	r4, #3
 8009c3c:	e7e4      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c3e:	2403      	movs	r4, #3
 8009c40:	e7e2      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c42:	2403      	movs	r4, #3
 8009c44:	e7e0      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c46:	2403      	movs	r4, #3
 8009c48:	e7de      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c4a:	2403      	movs	r4, #3
 8009c4c:	e7dc      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c4e:	2403      	movs	r4, #3
 8009c50:	e7da      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c52:	2403      	movs	r4, #3
 8009c54:	e7d8      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c56:	2403      	movs	r4, #3
 8009c58:	e7d6      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c5a:	2403      	movs	r4, #3
 8009c5c:	e7d4      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c5e:	2403      	movs	r4, #3
 8009c60:	e7d2      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x490>
 8009c62:	bf00      	nop
 8009c64:	200008fc 	.word	0x200008fc

08009c68 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 8009c72:	2800      	cmp	r0, #0
 8009c74:	f000 80c5 	beq.w	8009e02 <LoRaMacMlmeRequest+0x19a>
 8009c78:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009c7a:	f7ff f9e7 	bl	800904c <LoRaMacIsBusy>
 8009c7e:	b118      	cbz	r0, 8009c88 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 8009c80:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8009c82:	4620      	mov	r0, r4
 8009c84:	b002      	add	sp, #8
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009c88:	f000 fccc 	bl	800a624 <LoRaMacConfirmQueueIsFull>
 8009c8c:	b108      	cbz	r0, 8009c92 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 8009c8e:	2401      	movs	r4, #1
 8009c90:	e7f7      	b.n	8009c82 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009c92:	f000 fcc1 	bl	800a618 <LoRaMacConfirmQueueGetCnt>
 8009c96:	b1f8      	cbz	r0, 8009cd8 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c98:	4b5b      	ldr	r3, [pc, #364]	; (8009e08 <LoRaMacMlmeRequest+0x1a0>)
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009ca0:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009ca4:	f042 0204 	orr.w	r2, r2, #4
 8009ca8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8009cac:	782b      	ldrb	r3, [r5, #0]
 8009cae:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009cb2:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 8009cbc:	461c      	mov	r4, r3
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	2b0d      	cmp	r3, #13
 8009cc2:	f200 8084 	bhi.w	8009dce <LoRaMacMlmeRequest+0x166>
 8009cc6:	e8df f003 	tbb	[pc, r3]
 8009cca:	820d      	.short	0x820d
 8009ccc:	423d3382 	.word	0x423d3382
 8009cd0:	4b828282 	.word	0x4b828282
 8009cd4:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009cd8:	2214      	movs	r2, #20
 8009cda:	2100      	movs	r1, #0
 8009cdc:	484b      	ldr	r0, [pc, #300]	; (8009e0c <LoRaMacMlmeRequest+0x1a4>)
 8009cde:	f004 faa8 	bl	800e232 <memset1>
 8009ce2:	e7d9      	b.n	8009c98 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009ce4:	4b48      	ldr	r3, [pc, #288]	; (8009e08 <LoRaMacMlmeRequest+0x1a0>)
 8009ce6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009cea:	f013 0f20 	tst.w	r3, #32
 8009cee:	d1c8      	bne.n	8009c82 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009cf0:	f7fe fed4 	bl	8008a9c <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009cf4:	4c46      	ldr	r4, [pc, #280]	; (8009e10 <LoRaMacMlmeRequest+0x1a8>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009cfc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d00:	f001 faa2 	bl	800b248 <RegionAlternateDr>
 8009d04:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009d08:	2307      	movs	r3, #7
 8009d0a:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 8009d0e:	20ff      	movs	r0, #255	; 0xff
 8009d10:	f7fe ffea 	bl	8008ce8 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 8009d14:	4604      	mov	r4, r0
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d05a      	beq.n	8009dd0 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009d1a:	4e3d      	ldr	r6, [pc, #244]	; (8009e10 <LoRaMacMlmeRequest+0x1a8>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009d22:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8009d26:	f001 fa8f 	bl	800b248 <RegionAlternateDr>
 8009d2a:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 8009d2e:	e04f      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d30:	2200      	movs	r2, #0
 8009d32:	4669      	mov	r1, sp
 8009d34:	2002      	movs	r0, #2
 8009d36:	f000 fa6d 	bl	800a214 <LoRaMacCommandsAddCmd>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d047      	beq.n	8009dd0 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d40:	2413      	movs	r4, #19
 8009d42:	e045      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009d44:	88a8      	ldrh	r0, [r5, #4]
 8009d46:	f7fe fffd 	bl	8008d44 <SetTxContinuousWave>
 8009d4a:	4604      	mov	r4, r0
            break;
 8009d4c:	e040      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8009d4e:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	68a9      	ldr	r1, [r5, #8]
 8009d56:	88a8      	ldrh	r0, [r5, #4]
 8009d58:	f7fd f8b4 	bl	8006ec4 <SetTxContinuousWave1>
 8009d5c:	4604      	mov	r4, r0
            break;
 8009d5e:	e037      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d60:	2200      	movs	r2, #0
 8009d62:	4669      	mov	r1, sp
 8009d64:	200d      	movs	r0, #13
 8009d66:	f000 fa55 	bl	800a214 <LoRaMacCommandsAddCmd>
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	b380      	cbz	r0, 8009dd0 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d6e:	2413      	movs	r4, #19
 8009d70:	e02e      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009d72:	4b27      	ldr	r3, [pc, #156]	; (8009e10 <LoRaMacMlmeRequest+0x1a8>)
 8009d74:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009d78:	b10b      	cbz	r3, 8009d7e <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009d7a:	2402      	movs	r4, #2
 8009d7c:	e028      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009d7e:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009d80:	f004 0007 	and.w	r0, r4, #7
 8009d84:	f000 f9a2 	bl	800a0cc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009d88:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	4669      	mov	r1, sp
 8009d90:	2010      	movs	r0, #16
 8009d92:	f000 fa3f 	bl	800a214 <LoRaMacCommandsAddCmd>
 8009d96:	4604      	mov	r4, r0
 8009d98:	b1d0      	cbz	r0, 8009dd0 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d9a:	2413      	movs	r4, #19
 8009d9c:	e018      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009d9e:	2200      	movs	r2, #0
 8009da0:	4669      	mov	r1, sp
 8009da2:	2012      	movs	r0, #18
 8009da4:	f000 fa36 	bl	800a214 <LoRaMacCommandsAddCmd>
 8009da8:	4604      	mov	r4, r0
 8009daa:	b188      	cbz	r0, 8009dd0 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009dac:	2413      	movs	r4, #19
 8009dae:	e00f      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 8009db0:	2301      	movs	r3, #1
 8009db2:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009db6:	f000 f97a 	bl	800a0ae <LoRaMacClassBIsAcquisitionInProgress>
 8009dba:	b108      	cbz	r0, 8009dc0 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 8009dbc:	2401      	movs	r4, #1
 8009dbe:	e007      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009dc0:	f000 f972 	bl	800a0a8 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	f000 f974 	bl	800a0b2 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009dca:	2400      	movs	r4, #0
 8009dcc:	e000      	b.n	8009dd0 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 8009dce:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009dd0:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <LoRaMacMlmeRequest+0x1a0>)
 8009dd2:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8009dd6:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8009dd8:	b17c      	cbz	r4, 8009dfa <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009dda:	f000 fc1d 	bl	800a618 <LoRaMacConfirmQueueGetCnt>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f47f af4f 	bne.w	8009c82 <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 8009de4:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <LoRaMacMlmeRequest+0x1a0>)
 8009de6:	2100      	movs	r1, #0
 8009de8:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009dec:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009df0:	f361 0282 	bfi	r2, r1, #2, #1
 8009df4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8009df8:	e743      	b.n	8009c82 <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009dfa:	a801      	add	r0, sp, #4
 8009dfc:	f000 fb48 	bl	800a490 <LoRaMacConfirmQueueAdd>
 8009e00:	e73f      	b.n	8009c82 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009e02:	2403      	movs	r4, #3
 8009e04:	e73d      	b.n	8009c82 <LoRaMacMlmeRequest+0x1a>
 8009e06:	bf00      	nop
 8009e08:	200003f4 	.word	0x200003f4
 8009e0c:	20000840 	.word	0x20000840
 8009e10:	200008fc 	.word	0x200008fc

08009e14 <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009e14:	2800      	cmp	r0, #0
 8009e16:	f000 80af 	beq.w	8009f78 <LoRaMacMcpsRequest+0x164>
{
 8009e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	460d      	mov	r5, r1
 8009e22:	f04f 0800 	mov.w	r8, #0
 8009e26:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009e28:	f7ff f910 	bl	800904c <LoRaMacIsBusy>
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	b118      	cbz	r0, 8009e38 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8009e30:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009e32:	b008      	add	sp, #32
 8009e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 8009e38:	4641      	mov	r1, r8
 8009e3a:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009e3e:	4f50      	ldr	r7, [pc, #320]	; (8009f80 <LoRaMacMcpsRequest+0x16c>)
 8009e40:	2214      	movs	r2, #20
 8009e42:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 8009e46:	f004 f9f4 	bl	800e232 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009e50:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 8009e54:	7823      	ldrb	r3, [r4, #0]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d058      	beq.n	8009f0c <LoRaMacMcpsRequest+0xf8>
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d06e      	beq.n	8009f3c <LoRaMacMcpsRequest+0x128>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d041      	beq.n	8009ee6 <LoRaMacMcpsRequest+0xd2>
 8009e62:	2700      	movs	r7, #0
 8009e64:	46ba      	mov	sl, r7
 8009e66:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e6e:	4b45      	ldr	r3, [pc, #276]	; (8009f84 <LoRaMacMcpsRequest+0x170>)
 8009e70:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009e74:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e78:	a906      	add	r1, sp, #24
 8009e7a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009e7e:	f001 f8fa 	bl	800b076 <RegionGetPhyParam>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009e82:	b240      	sxtb	r0, r0
 8009e84:	42b8      	cmp	r0, r7
 8009e86:	bfb8      	it	lt
 8009e88:	4638      	movlt	r0, r7
    if( readyToSend == true )
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d06e      	beq.n	8009f6c <LoRaMacMcpsRequest+0x158>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8009e8e:	4b3d      	ldr	r3, [pc, #244]	; (8009f84 <LoRaMacMcpsRequest+0x170>)
 8009e90:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009e94:	b99b      	cbnz	r3, 8009ebe <LoRaMacMcpsRequest+0xaa>
            verify.DatarateParams.Datarate = datarate;
 8009e96:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e9a:	4b3a      	ldr	r3, [pc, #232]	; (8009f84 <LoRaMacMcpsRequest+0x170>)
 8009e9c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009ea0:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009ea4:	2205      	movs	r2, #5
 8009ea6:	a903      	add	r1, sp, #12
 8009ea8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009eac:	f001 f917 	bl	800b0de <RegionVerify>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d063      	beq.n	8009f7c <LoRaMacMcpsRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009eb4:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 8009eb8:	4b32      	ldr	r3, [pc, #200]	; (8009f84 <LoRaMacMcpsRequest+0x170>)
 8009eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009ebe:	9500      	str	r5, [sp, #0]
 8009ec0:	4643      	mov	r3, r8
 8009ec2:	4652      	mov	r2, sl
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	a804      	add	r0, sp, #16
 8009ec8:	f7ff f828 	bl	8008f1c <Send>
        if( status == LORAMAC_STATUS_OK )
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d148      	bne.n	8009f62 <LoRaMacMcpsRequest+0x14e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8009ed0:	7822      	ldrb	r2, [r4, #0]
 8009ed2:	4b2b      	ldr	r3, [pc, #172]	; (8009f80 <LoRaMacMcpsRequest+0x16c>)
 8009ed4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8009ed8:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009edc:	f042 0201 	orr.w	r2, r2, #1
 8009ee0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8009ee4:	e043      	b.n	8009f6e <LoRaMacMcpsRequest+0x15a>
            MacCtx.AckTimeoutRetries = 1;
 8009ee6:	2601      	movs	r6, #1
 8009ee8:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009eec:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	f362 1347 	bfi	r3, r2, #5, #3
 8009ef6:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8009efa:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8009efe:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8009f02:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8009f06:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 8009f0a:	e7ad      	b.n	8009e68 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8009f0c:	7be3      	ldrb	r3, [r4, #15]
 8009f0e:	2b08      	cmp	r3, #8
 8009f10:	bf28      	it	cs
 8009f12:	2308      	movcs	r3, #8
 8009f14:	4a1a      	ldr	r2, [pc, #104]	; (8009f80 <LoRaMacMcpsRequest+0x16c>)
 8009f16:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009f1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009f1e:	2204      	movs	r2, #4
 8009f20:	f362 1347 	bfi	r3, r2, #5, #3
 8009f24:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8009f28:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009f2c:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8009f30:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009f34:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 8009f38:	2601      	movs	r6, #1
            break;
 8009f3a:	e795      	b.n	8009e68 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 8009f3c:	2601      	movs	r6, #1
 8009f3e:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <LoRaMacMcpsRequest+0x16c>)
 8009f40:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8009f44:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009f48:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8009f4c:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009f50:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009f54:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009f58:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 8009f5c:	f04f 0900 	mov.w	r9, #0
            break;
 8009f60:	e782      	b.n	8009e68 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 8009f62:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <LoRaMacMcpsRequest+0x16c>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009f6a:	e000      	b.n	8009f6e <LoRaMacMcpsRequest+0x15a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009f6c:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009f6e:	4b04      	ldr	r3, [pc, #16]	; (8009f80 <LoRaMacMcpsRequest+0x16c>)
 8009f70:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8009f74:	6123      	str	r3, [r4, #16]
    return status;
 8009f76:	e75c      	b.n	8009e32 <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f78:	2003      	movs	r0, #3
}
 8009f7a:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f7c:	2003      	movs	r0, #3
 8009f7e:	e758      	b.n	8009e32 <LoRaMacMcpsRequest+0x1e>
 8009f80:	200003f4 	.word	0x200003f4
 8009f84:	200008fc 	.word	0x200008fc

08009f88 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8009f8e:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8009f92:	220f      	movs	r2, #15
 8009f94:	a901      	add	r1, sp, #4
 8009f96:	4b05      	ldr	r3, [pc, #20]	; (8009fac <LoRaMacTestSetDutyCycleOn+0x24>)
 8009f98:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009f9c:	f001 f89f 	bl	800b0de <RegionVerify>
 8009fa0:	b110      	cbz	r0, 8009fa8 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8009fa2:	4b02      	ldr	r3, [pc, #8]	; (8009fac <LoRaMacTestSetDutyCycleOn+0x24>)
 8009fa4:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 8009fa8:	b002      	add	sp, #8
 8009faa:	bd10      	pop	{r4, pc}
 8009fac:	200008fc 	.word	0x200008fc

08009fb0 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	b089      	sub	sp, #36	; 0x24
 8009fb6:	460f      	mov	r7, r1
 8009fb8:	4616      	mov	r6, r2
 8009fba:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 8009fbc:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 8009fc0:	f990 a011 	ldrsb.w	sl, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8009fc4:	6883      	ldr	r3, [r0, #8]
 8009fc6:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 8009fc8:	f890 8005 	ldrb.w	r8, [r0, #5]
 8009fcc:	f1b8 0f00 	cmp.w	r8, #0
 8009fd0:	d107      	bne.n	8009fe2 <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 8009fd2:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 8009fd6:	f886 a000 	strb.w	sl, [r6]
    return adrAckReq;
}
 8009fda:	4640      	mov	r0, r8
 8009fdc:	b009      	add	sp, #36	; 0x24
 8009fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe2:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009fea:	7c83      	ldrb	r3, [r0, #18]
 8009fec:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009ff0:	a906      	add	r1, sp, #24
 8009ff2:	7cc0      	ldrb	r0, [r0, #19]
 8009ff4:	f001 f83f 	bl	800b076 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8009ff8:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 8009ffc:	464a      	mov	r2, r9
 8009ffe:	45d9      	cmp	r9, fp
 800a000:	bfb8      	it	lt
 800a002:	465a      	movlt	r2, fp
 800a004:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800a006:	45d9      	cmp	r9, fp
 800a008:	dc04      	bgt.n	800a014 <CalcNextV10X+0x64>
            *adrAckCounter = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800a00e:	4691      	mov	r9, r2
            adrAckReq = false;
 800a010:	4698      	mov	r8, r3
 800a012:	e7de      	b.n	8009fd2 <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a014:	68a2      	ldr	r2, [r4, #8]
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d201      	bcs.n	800a020 <CalcNextV10X+0x70>
                adrAckReq = false;
 800a01c:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a020:	89e1      	ldrh	r1, [r4, #14]
 800a022:	440b      	add	r3, r1
 800a024:	429a      	cmp	r2, r3
 800a026:	d202      	bcs.n	800a02e <CalcNextV10X+0x7e>
        datarate = MAX( datarate, minTxDatarate );
 800a028:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a02c:	e7d1      	b.n	8009fd2 <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a02e:	2308      	movs	r3, #8
 800a030:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a034:	a906      	add	r1, sp, #24
 800a036:	7ce0      	ldrb	r0, [r4, #19]
 800a038:	f001 f81d 	bl	800b076 <RegionGetPhyParam>
                txPower = phyParam.Value;
 800a03c:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a040:	68a1      	ldr	r1, [r4, #8]
 800a042:	89e2      	ldrh	r2, [r4, #14]
 800a044:	fbb1 f3f2 	udiv	r3, r1, r2
 800a048:	fb02 1313 	mls	r3, r2, r3, r1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d002      	beq.n	800a056 <CalcNextV10X+0xa6>
        datarate = MAX( datarate, minTxDatarate );
 800a050:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a054:	e7bd      	b.n	8009fd2 <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a056:	2322      	movs	r3, #34	; 0x22
 800a058:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a062:	7ca3      	ldrb	r3, [r4, #18]
 800a064:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a068:	a906      	add	r1, sp, #24
 800a06a:	7ce0      	ldrb	r0, [r4, #19]
 800a06c:	f001 f803 	bl	800b076 <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800a070:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800a074:	45cb      	cmp	fp, r9
 800a076:	d1ac      	bne.n	8009fd2 <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800a078:	f894 8004 	ldrb.w	r8, [r4, #4]
 800a07c:	f1b8 0f00 	cmp.w	r8, #0
 800a080:	d0a7      	beq.n	8009fd2 <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a082:	2302      	movs	r3, #2
 800a084:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800a088:	a902      	add	r1, sp, #8
 800a08a:	7ce0      	ldrb	r0, [r4, #19]
 800a08c:	f001 f819 	bl	800b0c2 <RegionInitDefaults>
                        adrAckReq = false;
 800a090:	f04f 0800 	mov.w	r8, #0
 800a094:	e79d      	b.n	8009fd2 <CalcNextV10X+0x22>

0800a096 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a096:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800a098:	7884      	ldrb	r4, [r0, #2]
 800a09a:	b10c      	cbz	r4, 800a0a0 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a09c:	2000      	movs	r0, #0
}
 800a09e:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800a0a0:	f7ff ff86 	bl	8009fb0 <CalcNextV10X>
 800a0a4:	e7fb      	b.n	800a09e <LoRaMacAdrCalcNext+0x8>

0800a0a6 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0a6:	4770      	bx	lr

0800a0a8 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0a8:	4770      	bx	lr

0800a0aa <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0aa:	4770      	bx	lr

0800a0ac <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0ac:	4770      	bx	lr

0800a0ae <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	4770      	bx	lr

0800a0b2 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0b2:	4770      	bx	lr

0800a0b4 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0b4:	4770      	bx	lr

0800a0b6 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0b6:	4770      	bx	lr

0800a0b8 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	4770      	bx	lr

0800a0bc <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0bc:	2000      	movs	r0, #0
 800a0be:	4770      	bx	lr

0800a0c0 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	4770      	bx	lr

0800a0c4 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	4770      	bx	lr

0800a0c8 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	4770      	bx	lr

0800a0cc <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0cc:	4770      	bx	lr

0800a0ce <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0ce:	4770      	bx	lr

0800a0d0 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0d0:	4770      	bx	lr

0800a0d2 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0d2:	2002      	movs	r0, #2
 800a0d4:	4770      	bx	lr

0800a0d6 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0d6:	2002      	movs	r0, #2
 800a0d8:	4770      	bx	lr

0800a0da <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0da:	2002      	movs	r0, #2
 800a0dc:	4770      	bx	lr

0800a0de <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0de:	4770      	bx	lr

0800a0e0 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	4770      	bx	lr

0800a0e4 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0e4:	4770      	bx	lr

0800a0e6 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0e6:	4770      	bx	lr

0800a0e8 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	4770      	bx	lr

0800a0ec <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	4770      	bx	lr

0800a0f0 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0f0:	4770      	bx	lr

0800a0f2 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a0f2:	4770      	bx	lr

0800a0f4 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	2b0f      	cmp	r3, #15
 800a0f8:	d804      	bhi.n	800a104 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800a0fa:	5cc2      	ldrb	r2, [r0, r3]
 800a0fc:	b922      	cbnz	r2, 800a108 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a0fe:	3301      	adds	r3, #1
 800a100:	b29b      	uxth	r3, r3
 800a102:	e7f8      	b.n	800a0f6 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800a104:	2001      	movs	r0, #1
 800a106:	4770      	bx	lr
            return false;
 800a108:	2000      	movs	r0, #0
}
 800a10a:	4770      	bx	lr

0800a10c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800a10c:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800a10e:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a110:	0125      	lsls	r5, r4, #4
 800a112:	f105 0308 	add.w	r3, r5, #8
 800a116:	4d06      	ldr	r5, [pc, #24]	; (800a130 <MallocNewMacCommandSlot+0x24>)
 800a118:	441d      	add	r5, r3
 800a11a:	4628      	mov	r0, r5
 800a11c:	f7ff ffea 	bl	800a0f4 <IsSlotFree>
 800a120:	b920      	cbnz	r0, 800a12c <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800a122:	3401      	adds	r4, #1
 800a124:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800a126:	2c0f      	cmp	r4, #15
 800a128:	d1f2      	bne.n	800a110 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800a12a:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800a12c:	4628      	mov	r0, r5
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	20000f0c 	.word	0x20000f0c

0800a134 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800a134:	b120      	cbz	r0, 800a140 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800a136:	2200      	movs	r2, #0
 800a138:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800a13a:	6042      	str	r2, [r0, #4]

    return true;
 800a13c:	2001      	movs	r0, #1
 800a13e:	4770      	bx	lr
        return false;
 800a140:	2000      	movs	r0, #0
}
 800a142:	4770      	bx	lr

0800a144 <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a144:	4603      	mov	r3, r0
 800a146:	b160      	cbz	r0, 800a162 <LinkedListAdd+0x1e>
 800a148:	b169      	cbz	r1, 800a166 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800a14a:	6802      	ldr	r2, [r0, #0]
 800a14c:	b13a      	cbz	r2, 800a15e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	b102      	cbz	r2, 800a154 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800a152:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800a154:	2200      	movs	r2, #0
 800a156:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800a158:	6059      	str	r1, [r3, #4]

    return true;
 800a15a:	2001      	movs	r0, #1
 800a15c:	4770      	bx	lr
        list->First = element;
 800a15e:	6001      	str	r1, [r0, #0]
 800a160:	e7f5      	b.n	800a14e <LinkedListAdd+0xa>
        return false;
 800a162:	2000      	movs	r0, #0
 800a164:	4770      	bx	lr
 800a166:	2000      	movs	r0, #0
}
 800a168:	4770      	bx	lr

0800a16a <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a16a:	b160      	cbz	r0, 800a186 <LinkedListGetPrevious+0x1c>
 800a16c:	b161      	cbz	r1, 800a188 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800a16e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800a170:	4281      	cmp	r1, r0
 800a172:	d102      	bne.n	800a17a <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800a174:	2000      	movs	r0, #0
    }

    return curElement;
}
 800a176:	4770      	bx	lr
            curElement = curElement->Next;
 800a178:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d0fb      	beq.n	800a176 <LinkedListGetPrevious+0xc>
 800a17e:	6803      	ldr	r3, [r0, #0]
 800a180:	428b      	cmp	r3, r1
 800a182:	d1f9      	bne.n	800a178 <LinkedListGetPrevious+0xe>
 800a184:	4770      	bx	lr
 800a186:	4770      	bx	lr
        return NULL;
 800a188:	4608      	mov	r0, r1
 800a18a:	4770      	bx	lr

0800a18c <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a18c:	b1b8      	cbz	r0, 800a1be <LinkedListRemove+0x32>
{
 800a18e:	b538      	push	{r3, r4, r5, lr}
 800a190:	460c      	mov	r4, r1
 800a192:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800a194:	b1a9      	cbz	r1, 800a1c2 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800a196:	f7ff ffe8 	bl	800a16a <LinkedListGetPrevious>

    if( list->First == element )
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	d009      	beq.n	800a1b4 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800a1a0:	686b      	ldr	r3, [r5, #4]
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	d009      	beq.n	800a1ba <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800a1a6:	b108      	cbz	r0, 800a1ac <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	6023      	str	r3, [r4, #0]

    return true;
 800a1b0:	2001      	movs	r0, #1
}
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	602b      	str	r3, [r5, #0]
 800a1b8:	e7f2      	b.n	800a1a0 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800a1ba:	6068      	str	r0, [r5, #4]
 800a1bc:	e7f3      	b.n	800a1a6 <LinkedListRemove+0x1a>
        return false;
 800a1be:	2000      	movs	r0, #0
}
 800a1c0:	4770      	bx	lr
        return false;
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	e7f5      	b.n	800a1b2 <LinkedListRemove+0x26>

0800a1c6 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800a1c6:	2805      	cmp	r0, #5
 800a1c8:	d006      	beq.n	800a1d8 <IsSticky+0x12>
 800a1ca:	d307      	bcc.n	800a1dc <IsSticky+0x16>
 800a1cc:	3808      	subs	r0, #8
 800a1ce:	b2c0      	uxtb	r0, r0
 800a1d0:	2802      	cmp	r0, #2
 800a1d2:	d905      	bls.n	800a1e0 <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4770      	bx	lr
    switch( cid )
 800a1d8:	2001      	movs	r0, #1
 800a1da:	4770      	bx	lr
            return false;
 800a1dc:	2000      	movs	r0, #0
 800a1de:	4770      	bx	lr
    switch( cid )
 800a1e0:	2001      	movs	r0, #1
    }
}
 800a1e2:	4770      	bx	lr

0800a1e4 <FreeMacCommandSlot>:
    if( slot == NULL )
 800a1e4:	b130      	cbz	r0, 800a1f4 <FreeMacCommandSlot+0x10>
{
 800a1e6:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	f004 f821 	bl	800e232 <memset1>
    return true;
 800a1f0:	2001      	movs	r0, #1
}
 800a1f2:	bd08      	pop	{r3, pc}
        return false;
 800a1f4:	2000      	movs	r0, #0
}
 800a1f6:	4770      	bx	lr

0800a1f8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a1f8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a1fa:	4c05      	ldr	r4, [pc, #20]	; (800a210 <LoRaMacCommandsInit+0x18>)
 800a1fc:	22fc      	movs	r2, #252	; 0xfc
 800a1fe:	2100      	movs	r1, #0
 800a200:	4620      	mov	r0, r4
 800a202:	f004 f816 	bl	800e232 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800a206:	4620      	mov	r0, r4
 800a208:	f7ff ff94 	bl	800a134 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a20c:	2000      	movs	r0, #0
 800a20e:	bd10      	pop	{r4, pc}
 800a210:	20000f0c 	.word	0x20000f0c

0800a214 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800a214:	b301      	cbz	r1, 800a258 <LoRaMacCommandsAddCmd+0x44>
{
 800a216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a218:	4605      	mov	r5, r0
 800a21a:	4614      	mov	r4, r2
 800a21c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800a21e:	f7ff ff75 	bl	800a10c <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800a222:	4606      	mov	r6, r0
 800a224:	b1d0      	cbz	r0, 800a25c <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800a226:	4601      	mov	r1, r0
 800a228:	480e      	ldr	r0, [pc, #56]	; (800a264 <LoRaMacCommandsAddCmd+0x50>)
 800a22a:	f7ff ff8b 	bl	800a144 <LinkedListAdd>
 800a22e:	b1b8      	cbz	r0, 800a260 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a230:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800a232:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a234:	b2a2      	uxth	r2, r4
 800a236:	4639      	mov	r1, r7
 800a238:	1d70      	adds	r0, r6, #5
 800a23a:	f003 ffe4 	bl	800e206 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800a23e:	4628      	mov	r0, r5
 800a240:	f7ff ffc1 	bl	800a1c6 <IsSticky>
 800a244:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <LoRaMacCommandsAddCmd+0x50>)
 800a248:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800a24c:	4414      	add	r4, r2
 800a24e:	3401      	adds	r4, #1
 800a250:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800a254:	2000      	movs	r0, #0
}
 800a256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a258:	2001      	movs	r0, #1
}
 800a25a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a25c:	2002      	movs	r0, #2
 800a25e:	e7fa      	b.n	800a256 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800a260:	2005      	movs	r0, #5
 800a262:	e7f8      	b.n	800a256 <LoRaMacCommandsAddCmd+0x42>
 800a264:	20000f0c 	.word	0x20000f0c

0800a268 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800a268:	b1a0      	cbz	r0, 800a294 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800a26a:	b510      	push	{r4, lr}
 800a26c:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800a26e:	4601      	mov	r1, r0
 800a270:	480b      	ldr	r0, [pc, #44]	; (800a2a0 <LoRaMacCommandsRemoveCmd+0x38>)
 800a272:	f7ff ff8b 	bl	800a18c <LinkedListRemove>
 800a276:	b178      	cbz	r0, 800a298 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a278:	68a1      	ldr	r1, [r4, #8]
 800a27a:	4a09      	ldr	r2, [pc, #36]	; (800a2a0 <LoRaMacCommandsRemoveCmd+0x38>)
 800a27c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800a280:	1a5b      	subs	r3, r3, r1
 800a282:	3b01      	subs	r3, #1
 800a284:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800a288:	4620      	mov	r0, r4
 800a28a:	f7ff ffab 	bl	800a1e4 <FreeMacCommandSlot>
 800a28e:	b128      	cbz	r0, 800a29c <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a290:	2000      	movs	r0, #0
}
 800a292:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a294:	2001      	movs	r0, #1
}
 800a296:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800a298:	2003      	movs	r0, #3
 800a29a:	e7fa      	b.n	800a292 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800a29c:	2005      	movs	r0, #5
 800a29e:	e7f8      	b.n	800a292 <LoRaMacCommandsRemoveCmd+0x2a>
 800a2a0:	20000f0c 	.word	0x20000f0c

0800a2a4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	; (800a2d0 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800a2a6:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a2a8:	b120      	cbz	r0, 800a2b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800a2aa:	7b03      	ldrb	r3, [r0, #12]
 800a2ac:	b11b      	cbz	r3, 800a2b6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800a2ae:	6800      	ldr	r0, [r0, #0]
 800a2b0:	e7fa      	b.n	800a2a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a2b2:	bd10      	pop	{r4, pc}
 800a2b4:	4770      	bx	lr
{
 800a2b6:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800a2b8:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800a2ba:	f7ff ffd5 	bl	800a268 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800a2be:	4620      	mov	r0, r4
    while( curElement != NULL )
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d0f6      	beq.n	800a2b2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800a2c4:	7b03      	ldrb	r3, [r0, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f6      	beq.n	800a2b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800a2ca:	6800      	ldr	r0, [r0, #0]
 800a2cc:	e7f8      	b.n	800a2c0 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800a2ce:	bf00      	nop
 800a2d0:	20000f0c 	.word	0x20000f0c

0800a2d4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a2d4:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a2d6:	4b08      	ldr	r3, [pc, #32]	; (800a2f8 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a2d8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a2da:	e003      	b.n	800a2e4 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f7ff ffc3 	bl	800a268 <LoRaMacCommandsRemoveCmd>
{
 800a2e2:	462c      	mov	r4, r5
    while( curElement != NULL )
 800a2e4:	b134      	cbz	r4, 800a2f4 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
        nexElement = curElement->Next;
 800a2e6:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800a2e8:	7920      	ldrb	r0, [r4, #4]
 800a2ea:	f7ff ff6c 	bl	800a1c6 <IsSticky>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d0f7      	beq.n	800a2e2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 800a2f2:	e7f3      	b.n	800a2dc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	20000f0c 	.word	0x20000f0c

0800a2fc <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800a2fc:	b128      	cbz	r0, 800a30a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800a2fe:	4a04      	ldr	r2, [pc, #16]	; (800a310 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a300:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800a304:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a306:	2000      	movs	r0, #0
 800a308:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a30a:	2001      	movs	r0, #1
}
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	20000f0c 	.word	0x20000f0c

0800a314 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a318:	4b16      	ldr	r3, [pc, #88]	; (800a374 <LoRaMacCommandsSerializeCmds+0x60>)
 800a31a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a31c:	b32a      	cbz	r2, 800a36a <LoRaMacCommandsSerializeCmds+0x56>
 800a31e:	4607      	mov	r7, r0
 800a320:	4688      	mov	r8, r1
 800a322:	4616      	mov	r6, r2
 800a324:	b319      	cbz	r1, 800a36e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800a326:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a328:	b194      	cbz	r4, 800a350 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a32a:	1a7a      	subs	r2, r7, r1
 800a32c:	68a3      	ldr	r3, [r4, #8]
 800a32e:	3301      	adds	r3, #1
 800a330:	429a      	cmp	r2, r3
 800a332:	d30d      	bcc.n	800a350 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800a334:	1c4d      	adds	r5, r1, #1
 800a336:	b2ed      	uxtb	r5, r5
 800a338:	7923      	ldrb	r3, [r4, #4]
 800a33a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a33c:	8922      	ldrh	r2, [r4, #8]
 800a33e:	1d61      	adds	r1, r4, #5
 800a340:	1970      	adds	r0, r6, r5
 800a342:	f003 ff60 	bl	800e206 <memcpy1>
            itr += curElement->PayloadSize;
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	441d      	add	r5, r3
 800a34a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800a34c:	6824      	ldr	r4, [r4, #0]
 800a34e:	e7eb      	b.n	800a328 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800a350:	b12c      	cbz	r4, 800a35e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800a352:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a354:	4620      	mov	r0, r4
 800a356:	f7ff ff87 	bl	800a268 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800a35a:	462c      	mov	r4, r5
 800a35c:	e7f8      	b.n	800a350 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a35e:	4640      	mov	r0, r8
 800a360:	f7ff ffcc 	bl	800a2fc <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a364:	2000      	movs	r0, #0
}
 800a366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a36a:	2001      	movs	r0, #1
 800a36c:	e7fb      	b.n	800a366 <LoRaMacCommandsSerializeCmds+0x52>
 800a36e:	2001      	movs	r0, #1
 800a370:	e7f9      	b.n	800a366 <LoRaMacCommandsSerializeCmds+0x52>
 800a372:	bf00      	nop
 800a374:	20000f0c 	.word	0x20000f0c

0800a378 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800a378:	4601      	mov	r1, r0
 800a37a:	b170      	cbz	r0, 800a39a <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a37c:	4b08      	ldr	r3, [pc, #32]	; (800a3a0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a37e:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800a380:	2200      	movs	r2, #0
 800a382:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a384:	b13b      	cbz	r3, 800a396 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800a386:	7b1a      	ldrb	r2, [r3, #12]
 800a388:	b90a      	cbnz	r2, 800a38e <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	e7fa      	b.n	800a384 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800a38e:	2301      	movs	r3, #1
 800a390:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a392:	2000      	movs	r0, #0
 800a394:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a396:	2000      	movs	r0, #0
 800a398:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a39a:	2001      	movs	r0, #1
}
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20000f0c 	.word	0x20000f0c

0800a3a4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a3a4:	1e83      	subs	r3, r0, #2
 800a3a6:	2b11      	cmp	r3, #17
 800a3a8:	d80a      	bhi.n	800a3c0 <LoRaMacCommandsGetCmdSize+0x1c>
 800a3aa:	e8df f003 	tbb	[pc, r3]
 800a3ae:	0b23      	.short	0x0b23
 800a3b0:	110f240d 	.word	0x110f240d
 800a3b4:	09171513 	.word	0x09171513
 800a3b8:	09091909 	.word	0x09091909
 800a3bc:	211f1d1b 	.word	0x211f1d1b
            break;
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	4770      	bx	lr
            cidSize = 5;
 800a3c4:	2005      	movs	r0, #5
            break;
 800a3c6:	4770      	bx	lr
            cidSize = 2;
 800a3c8:	2002      	movs	r0, #2
            break;
 800a3ca:	4770      	bx	lr
            cidSize = 1;
 800a3cc:	2001      	movs	r0, #1
            break;
 800a3ce:	4770      	bx	lr
            cidSize = 6;
 800a3d0:	2006      	movs	r0, #6
            break;
 800a3d2:	4770      	bx	lr
            cidSize = 2;
 800a3d4:	2002      	movs	r0, #2
            break;
 800a3d6:	4770      	bx	lr
            cidSize = 2;
 800a3d8:	2002      	movs	r0, #2
            break;
 800a3da:	4770      	bx	lr
            cidSize = 5;
 800a3dc:	2005      	movs	r0, #5
            break;
 800a3de:	4770      	bx	lr
            cidSize = 6;
 800a3e0:	2006      	movs	r0, #6
            break;
 800a3e2:	4770      	bx	lr
            cidSize = 1;
 800a3e4:	2001      	movs	r0, #1
            break;
 800a3e6:	4770      	bx	lr
            cidSize = 5;
 800a3e8:	2005      	movs	r0, #5
            break;
 800a3ea:	4770      	bx	lr
            cidSize = 4;
 800a3ec:	2004      	movs	r0, #4
            break;
 800a3ee:	4770      	bx	lr
            cidSize = 4;
 800a3f0:	2004      	movs	r0, #4
            break;
 800a3f2:	4770      	bx	lr
            cidSize = 3;
 800a3f4:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a3f6:	4770      	bx	lr

0800a3f8 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a3f8:	4b03      	ldr	r3, [pc, #12]	; (800a408 <IncreaseBufferPointer+0x10>)
 800a3fa:	4298      	cmp	r0, r3
 800a3fc:	d001      	beq.n	800a402 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800a3fe:	3004      	adds	r0, #4
 800a400:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a402:	4802      	ldr	r0, [pc, #8]	; (800a40c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20001024 	.word	0x20001024
 800a40c:	20001014 	.word	0x20001014

0800a410 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800a410:	b108      	cbz	r0, 800a416 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800a412:	2000      	movs	r0, #0
 800a414:	4770      	bx	lr
        return true;
 800a416:	2001      	movs	r0, #1
}
 800a418:	4770      	bx	lr

0800a41a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a41a:	2804      	cmp	r0, #4
 800a41c:	d801      	bhi.n	800a422 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800a41e:	2000      	movs	r0, #0
 800a420:	4770      	bx	lr
        return true;
 800a422:	2001      	movs	r0, #1
}
 800a424:	4770      	bx	lr
	...

0800a428 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	4606      	mov	r6, r0
 800a42c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <GetElement+0x3c>)
 800a430:	f893 7020 	ldrb.w	r7, [r3, #32]
 800a434:	4638      	mov	r0, r7
 800a436:	f7ff ffeb 	bl	800a410 <IsListEmpty>
 800a43a:	b970      	cbnz	r0, 800a45a <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a43c:	2500      	movs	r5, #0
 800a43e:	42af      	cmp	r7, r5
 800a440:	d909      	bls.n	800a456 <GetElement+0x2e>
    {
        if( element->Request == request )
 800a442:	7823      	ldrb	r3, [r4, #0]
 800a444:	42b3      	cmp	r3, r6
 800a446:	d00a      	beq.n	800a45e <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800a448:	4620      	mov	r0, r4
 800a44a:	f7ff ffd5 	bl	800a3f8 <IncreaseBufferPointer>
 800a44e:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a450:	3501      	adds	r5, #1
 800a452:	b2ed      	uxtb	r5, r5
 800a454:	e7f3      	b.n	800a43e <GetElement+0x16>
    }

    return NULL;
 800a456:	2000      	movs	r0, #0
}
 800a458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800a45a:	2000      	movs	r0, #0
 800a45c:	e7fc      	b.n	800a458 <GetElement+0x30>
            return element;
 800a45e:	4620      	mov	r0, r4
 800a460:	e7fa      	b.n	800a458 <GetElement+0x30>
 800a462:	bf00      	nop
 800a464:	20001008 	.word	0x20001008

0800a468 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a468:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a46a:	4c08      	ldr	r4, [pc, #32]	; (800a48c <LoRaMacConfirmQueueInit+0x24>)
 800a46c:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a474:	f104 000c 	add.w	r0, r4, #12
 800a478:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a47a:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a47c:	2214      	movs	r2, #20
 800a47e:	21ff      	movs	r1, #255	; 0xff
 800a480:	f003 fed7 	bl	800e232 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800a48a:	bd10      	pop	{r4, pc}
 800a48c:	20001008 	.word	0x20001008

0800a490 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a494:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <LoRaMacConfirmQueueAdd+0x44>)
 800a496:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a49a:	f7ff ffbe 	bl	800a41a <IsListFull>
 800a49e:	b9b8      	cbnz	r0, 800a4d0 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a4a0:	4c0c      	ldr	r4, [pc, #48]	; (800a4d4 <LoRaMacConfirmQueueAdd+0x44>)
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	782a      	ldrb	r2, [r5, #0]
 800a4a6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	786a      	ldrb	r2, [r5, #1]
 800a4ac:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a4ae:	68a3      	ldr	r3, [r4, #8]
 800a4b0:	78ea      	ldrb	r2, [r5, #3]
 800a4b2:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a4ba:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a4c4:	68a0      	ldr	r0, [r4, #8]
 800a4c6:	f7ff ff97 	bl	800a3f8 <IncreaseBufferPointer>
 800a4ca:	60a0      	str	r0, [r4, #8]

    return true;
 800a4cc:	2001      	movs	r0, #1
}
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	e7fc      	b.n	800a4ce <LoRaMacConfirmQueueAdd+0x3e>
 800a4d4:	20001008 	.word	0x20001008

0800a4d8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800a4d8:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a4dc:	f893 4020 	ldrb.w	r4, [r3, #32]
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f7ff ff95 	bl	800a410 <IsListEmpty>
 800a4e6:	b948      	cbnz	r0, 800a4fc <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a4e8:	4d05      	ldr	r5, [pc, #20]	; (800a500 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a4ea:	3c01      	subs	r4, #1
 800a4ec:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a4f0:	6868      	ldr	r0, [r5, #4]
 800a4f2:	f7ff ff81 	bl	800a3f8 <IncreaseBufferPointer>
 800a4f6:	6068      	str	r0, [r5, #4]

    return true;
 800a4f8:	2001      	movs	r0, #1
}
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e7fc      	b.n	800a4fa <LoRaMacConfirmQueueRemoveFirst+0x22>
 800a500:	20001008 	.word	0x20001008

0800a504 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4605      	mov	r5, r0
 800a508:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a50a:	4b08      	ldr	r3, [pc, #32]	; (800a52c <LoRaMacConfirmQueueSetStatus+0x28>)
 800a50c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a510:	f7ff ff7e 	bl	800a410 <IsListEmpty>
 800a514:	b948      	cbnz	r0, 800a52a <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <LoRaMacConfirmQueueSetStatus+0x28>)
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	6859      	ldr	r1, [r3, #4]
 800a51c:	4620      	mov	r0, r4
 800a51e:	f7ff ff83 	bl	800a428 <GetElement>
        if( element != NULL )
 800a522:	b110      	cbz	r0, 800a52a <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800a524:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800a526:	2201      	movs	r2, #1
 800a528:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20001008 	.word	0x20001008

0800a530 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a530:	b510      	push	{r4, lr}
 800a532:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a534:	4b09      	ldr	r3, [pc, #36]	; (800a55c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a536:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a53a:	f7ff ff69 	bl	800a410 <IsListEmpty>
 800a53e:	b940      	cbnz	r0, 800a552 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a540:	4b06      	ldr	r3, [pc, #24]	; (800a55c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	6859      	ldr	r1, [r3, #4]
 800a546:	4620      	mov	r0, r4
 800a548:	f7ff ff6e 	bl	800a428 <GetElement>
        if( element != NULL )
 800a54c:	b118      	cbz	r0, 800a556 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800a54e:	7840      	ldrb	r0, [r0, #1]
 800a550:	e000      	b.n	800a554 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a552:	2001      	movs	r0, #1
}
 800a554:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a556:	2001      	movs	r0, #1
 800a558:	e7fc      	b.n	800a554 <LoRaMacConfirmQueueGetStatus+0x24>
 800a55a:	bf00      	nop
 800a55c:	20001008 	.word	0x20001008

0800a560 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a564:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a566:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a568:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a56c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a570:	f7ff ff4e 	bl	800a410 <IsListEmpty>
 800a574:	b150      	cbz	r0, 800a58c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800a576:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800a578:	2301      	movs	r3, #1
 800a57a:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800a57c:	4620      	mov	r0, r4
 800a57e:	f7ff ff3b 	bl	800a3f8 <IncreaseBufferPointer>
 800a582:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a584:	4b04      	ldr	r3, [pc, #16]	; (800a598 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	4283      	cmp	r3, r0
 800a58a:	d0f4      	beq.n	800a576 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800a58c:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a58e:	78e3      	ldrb	r3, [r4, #3]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1f3      	bne.n	800a57c <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800a594:	e7f0      	b.n	800a578 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800a596:	bf00      	nop
 800a598:	20001008 	.word	0x20001008

0800a59c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800a59c:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a59e:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800a5a0:	689a      	ldr	r2, [r3, #8]
 800a5a2:	6859      	ldr	r1, [r3, #4]
 800a5a4:	f7ff ff40 	bl	800a428 <GetElement>
 800a5a8:	b100      	cbz	r0, 800a5ac <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800a5aa:	2001      	movs	r0, #1
    }
    return false;
}
 800a5ac:	bd08      	pop	{r3, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20001008 	.word	0x20001008

0800a5b4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a5ba:	4b16      	ldr	r3, [pc, #88]	; (800a614 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a5bc:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a5c0:	2400      	movs	r4, #0
 800a5c2:	e00d      	b.n	800a5e0 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a5c4:	781a      	ldrb	r2, [r3, #0]
 800a5c6:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a5ca:	785a      	ldrb	r2, [r3, #1]
 800a5cc:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a5d0:	78db      	ldrb	r3, [r3, #3]
 800a5d2:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800a5d6:	f7ff ff7f 	bl	800a4d8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800a5da:	b1a5      	cbz	r5, 800a606 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a5dc:	3401      	adds	r4, #1
 800a5de:	b2e4      	uxtb	r4, r4
 800a5e0:	42bc      	cmp	r4, r7
 800a5e2:	d214      	bcs.n	800a60e <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	7812      	ldrb	r2, [r2, #0]
 800a5ea:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	7852      	ldrb	r2, [r2, #1]
 800a5f0:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800a5f6:	2d00      	cmp	r5, #0
 800a5f8:	d0e4      	beq.n	800a5c4 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a5fa:	4b06      	ldr	r3, [pc, #24]	; (800a614 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	4630      	mov	r0, r6
 800a602:	4798      	blx	r3
 800a604:	e7e7      	b.n	800a5d6 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a606:	a801      	add	r0, sp, #4
 800a608:	f7ff ff42 	bl	800a490 <LoRaMacConfirmQueueAdd>
 800a60c:	e7e6      	b.n	800a5dc <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800a60e:	b003      	add	sp, #12
 800a610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a612:	bf00      	nop
 800a614:	20001008 	.word	0x20001008

0800a618 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800a618:	4b01      	ldr	r3, [pc, #4]	; (800a620 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a61a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a61e:	4770      	bx	lr
 800a620:	20001008 	.word	0x20001008

0800a624 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800a624:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a626:	4b03      	ldr	r3, [pc, #12]	; (800a634 <LoRaMacConfirmQueueIsFull+0x10>)
 800a628:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a62c:	f7ff fef5 	bl	800a41a <IsListFull>
    }
    else
    {
        return false;
    }
}
 800a630:	bd08      	pop	{r3, pc}
 800a632:	bf00      	nop
 800a634:	20001008 	.word	0x20001008

0800a638 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800a638:	b430      	push	{r4, r5}
 800a63a:	9c02      	ldr	r4, [sp, #8]
 800a63c:	9903      	ldr	r1, [sp, #12]
 800a63e:	9a04      	ldr	r2, [sp, #16]
    if( b0 == 0 )
 800a640:	b1d2      	cbz	r2, 800a678 <PrepareB0+0x40>
 800a642:	4605      	mov	r5, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800a644:	2049      	movs	r0, #73	; 0x49
 800a646:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800a648:	2000      	movs	r0, #0
 800a64a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800a64c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800a64e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800a650:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800a652:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800a654:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a656:	0a23      	lsrs	r3, r4, #8
 800a658:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a65a:	0c23      	lsrs	r3, r4, #16
 800a65c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a65e:	0e24      	lsrs	r4, r4, #24
 800a660:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800a662:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a664:	0a0b      	lsrs	r3, r1, #8
 800a666:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a668:	0c0b      	lsrs	r3, r1, #16
 800a66a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a66c:	0e09      	lsrs	r1, r1, #24
 800a66e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800a670:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800a672:	73d5      	strb	r5, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a674:	bc30      	pop	{r4, r5}
 800a676:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a678:	200a      	movs	r0, #10
 800a67a:	e7fb      	b.n	800a674 <PrepareB0+0x3c>

0800a67c <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a67c:	2300      	movs	r3, #0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d813      	bhi.n	800a6aa <GetKeyAddrItem+0x2e>
{
 800a682:	b410      	push	{r4}
    {
        if( KeyAddrList[i].AddrID == addrID )
 800a684:	461c      	mov	r4, r3
 800a686:	4a0a      	ldr	r2, [pc, #40]	; (800a6b0 <GetKeyAddrItem+0x34>)
 800a688:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800a68c:	4282      	cmp	r2, r0
 800a68e:	d006      	beq.n	800a69e <GetKeyAddrItem+0x22>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a690:	3301      	adds	r3, #1
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b01      	cmp	r3, #1
 800a696:	d9f5      	bls.n	800a684 <GetKeyAddrItem+0x8>
        {
            *item = &( KeyAddrList[i] );
            return LORAMAC_CRYPTO_SUCCESS;
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800a698:	200c      	movs	r0, #12
}
 800a69a:	bc10      	pop	{r4}
 800a69c:	4770      	bx	lr
            *item = &( KeyAddrList[i] );
 800a69e:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <GetKeyAddrItem+0x34>)
 800a6a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6a4:	600c      	str	r4, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	e7f7      	b.n	800a69a <GetKeyAddrItem+0x1e>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800a6aa:	200c      	movs	r0, #12
}
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	200000c0 	.word	0x200000c0

0800a6b4 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	d024      	beq.n	800a704 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a6ba:	3801      	subs	r0, #1
 800a6bc:	2803      	cmp	r0, #3
 800a6be:	d823      	bhi.n	800a708 <GetLastFcntDown+0x54>
 800a6c0:	e8df f000 	tbb	[pc, r0]
 800a6c4:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a6c8:	4a10      	ldr	r2, [pc, #64]	; (800a70c <GetLastFcntDown+0x58>)
 800a6ca:	6812      	ldr	r2, [r2, #0]
 800a6cc:	6911      	ldr	r1, [r2, #16]
 800a6ce:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a6d0:	6913      	ldr	r3, [r2, #16]
 800a6d2:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a6d4:	2000      	movs	r0, #0
            break;
 800a6d6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a6d8:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <GetLastFcntDown+0x58>)
 800a6da:	6812      	ldr	r2, [r2, #0]
 800a6dc:	6951      	ldr	r1, [r2, #20]
 800a6de:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a6e0:	6953      	ldr	r3, [r2, #20]
 800a6e2:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a6e4:	2000      	movs	r0, #0
            break;
 800a6e6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a6e8:	4a08      	ldr	r2, [pc, #32]	; (800a70c <GetLastFcntDown+0x58>)
 800a6ea:	6812      	ldr	r2, [r2, #0]
 800a6ec:	6991      	ldr	r1, [r2, #24]
 800a6ee:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a6f0:	6993      	ldr	r3, [r2, #24]
 800a6f2:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a6f4:	2000      	movs	r0, #0
            break;
 800a6f6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a6f8:	4a04      	ldr	r2, [pc, #16]	; (800a70c <GetLastFcntDown+0x58>)
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	69d2      	ldr	r2, [r2, #28]
 800a6fe:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800a700:	2000      	movs	r0, #0
            break;
 800a702:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a704:	200a      	movs	r0, #10
 800a706:	4770      	bx	lr
    if( lastDown == NULL )
 800a708:	2005      	movs	r0, #5
}
 800a70a:	4770      	bx	lr
 800a70c:	2000102c 	.word	0x2000102c

0800a710 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800a710:	b510      	push	{r4, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a71a:	a901      	add	r1, sp, #4
 800a71c:	f7ff ffca 	bl	800a6b4 <GetLastFcntDown>
 800a720:	b948      	cbnz	r0, 800a736 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	42a3      	cmp	r3, r4
 800a726:	d309      	bcc.n	800a73c <CheckFCntDown+0x2c>
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d001      	beq.n	800a732 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800a72e:	2000      	movs	r0, #0
 800a730:	e002      	b.n	800a738 <CheckFCntDown+0x28>
        return true;
 800a732:	2001      	movs	r0, #1
 800a734:	e000      	b.n	800a738 <CheckFCntDown+0x28>
        return false;
 800a736:	2000      	movs	r0, #0
    }
}
 800a738:	b002      	add	sp, #8
 800a73a:	bd10      	pop	{r4, pc}
        return true;
 800a73c:	2001      	movs	r0, #1
 800a73e:	e7fb      	b.n	800a738 <CheckFCntDown+0x28>

0800a740 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800a740:	3801      	subs	r0, #1
 800a742:	2803      	cmp	r0, #3
 800a744:	d812      	bhi.n	800a76c <UpdateFCntDown+0x2c>
 800a746:	e8df f000 	tbb	[pc, r0]
 800a74a:	0602      	.short	0x0602
 800a74c:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800a74e:	4b08      	ldr	r3, [pc, #32]	; (800a770 <UpdateFCntDown+0x30>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6119      	str	r1, [r3, #16]
            break;
 800a754:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800a756:	4b06      	ldr	r3, [pc, #24]	; (800a770 <UpdateFCntDown+0x30>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6159      	str	r1, [r3, #20]
            break;
 800a75c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800a75e:	4b04      	ldr	r3, [pc, #16]	; (800a770 <UpdateFCntDown+0x30>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6199      	str	r1, [r3, #24]
            break;
 800a764:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800a766:	4b02      	ldr	r3, [pc, #8]	; (800a770 <UpdateFCntDown+0x30>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	2000102c 	.word	0x2000102c

0800a774 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800a774:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <ResetFCnts+0x2c>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	2300      	movs	r3, #0
 800a77a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a77c:	f04f 31ff 	mov.w	r1, #4294967295
 800a780:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a782:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a784:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a786:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dd00      	ble.n	800a78e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800a78c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800a78e:	1d99      	adds	r1, r3, #6
 800a790:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a79a:	3301      	adds	r3, #1
 800a79c:	e7f4      	b.n	800a788 <ResetFCnts+0x14>
 800a79e:	bf00      	nop
 800a7a0:	2000102c 	.word	0x2000102c

0800a7a4 <ComputeCmacB0>:
{
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	b088      	sub	sp, #32
 800a7aa:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a7ac:	b1f0      	cbz	r0, 800a7ec <ComputeCmacB0+0x48>
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	4615      	mov	r5, r2
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	4680      	mov	r8, r0
 800a7b6:	b1de      	cbz	r6, 800a7f0 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a7b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a7bc:	d81a      	bhi.n	800a7f4 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800a7be:	af04      	add	r7, sp, #16
 800a7c0:	9702      	str	r7, [sp, #8]
 800a7c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f7ff ff31 	bl	800a638 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800a7d6:	9600      	str	r6, [sp, #0]
 800a7d8:	462b      	mov	r3, r5
 800a7da:	4622      	mov	r2, r4
 800a7dc:	4641      	mov	r1, r8
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f003 fbae 	bl	800df40 <SecureElementComputeAesCmac>
 800a7e4:	b940      	cbnz	r0, 800a7f8 <ComputeCmacB0+0x54>
}
 800a7e6:	b008      	add	sp, #32
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a7ec:	200a      	movs	r0, #10
 800a7ee:	e7fa      	b.n	800a7e6 <ComputeCmacB0+0x42>
 800a7f0:	200a      	movs	r0, #10
 800a7f2:	e7f8      	b.n	800a7e6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a7f4:	200e      	movs	r0, #14
 800a7f6:	e7f6      	b.n	800a7e6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a7f8:	200f      	movs	r0, #15
 800a7fa:	e7f4      	b.n	800a7e6 <ComputeCmacB0+0x42>

0800a7fc <DeriveSessionKey10x>:
{
 800a7fc:	b510      	push	{r4, lr}
 800a7fe:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800a800:	2400      	movs	r4, #0
 800a802:	9402      	str	r4, [sp, #8]
 800a804:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800a806:	2802      	cmp	r0, #2
 800a808:	d003      	beq.n	800a812 <DeriveSessionKey10x+0x16>
 800a80a:	2803      	cmp	r0, #3
 800a80c:	d025      	beq.n	800a85a <DeriveSessionKey10x+0x5e>
 800a80e:	200b      	movs	r0, #11
 800a810:	e021      	b.n	800a856 <DeriveSessionKey10x+0x5a>
            compBase[0] = 0x01;
 800a812:	2401      	movs	r4, #1
 800a814:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a818:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a81c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a820:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a824:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a828:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a82c:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a830:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a834:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a838:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a83c:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a840:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a844:	0a1b      	lsrs	r3, r3, #8
 800a846:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a84a:	4602      	mov	r2, r0
 800a84c:	2101      	movs	r1, #1
 800a84e:	4668      	mov	r0, sp
 800a850:	f003 fc12 	bl	800e078 <SecureElementDeriveAndStoreKey>
 800a854:	b928      	cbnz	r0, 800a862 <DeriveSessionKey10x+0x66>
}
 800a856:	b004      	add	sp, #16
 800a858:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800a85a:	2402      	movs	r4, #2
 800a85c:	f88d 4000 	strb.w	r4, [sp]
            break;
 800a860:	e7da      	b.n	800a818 <DeriveSessionKey10x+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a862:	200f      	movs	r0, #15
 800a864:	e7f7      	b.n	800a856 <DeriveSessionKey10x+0x5a>

0800a866 <PayloadEncrypt>:
{
 800a866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	4690      	mov	r8, r2
 800a86e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800a870:	2800      	cmp	r0, #0
 800a872:	d050      	beq.n	800a916 <PayloadEncrypt+0xb0>
 800a874:	460d      	mov	r5, r1
 800a876:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800a878:	2600      	movs	r6, #0
 800a87a:	9604      	str	r6, [sp, #16]
 800a87c:	9605      	str	r6, [sp, #20]
 800a87e:	9606      	str	r6, [sp, #24]
 800a880:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800a882:	9600      	str	r6, [sp, #0]
 800a884:	9601      	str	r6, [sp, #4]
 800a886:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800a888:	2701      	movs	r7, #1
 800a88a:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800a88e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800a892:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800a896:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a89a:	0a19      	lsrs	r1, r3, #8
 800a89c:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a8a0:	0c19      	lsrs	r1, r3, #16
 800a8a2:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a8a6:	0e1b      	lsrs	r3, r3, #24
 800a8a8:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800a8ac:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a8b0:	0a13      	lsrs	r3, r2, #8
 800a8b2:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a8b6:	0c13      	lsrs	r3, r2, #16
 800a8b8:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a8bc:	0e12      	lsrs	r2, r2, #24
 800a8be:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800a8c2:	e013      	b.n	800a8ec <PayloadEncrypt+0x86>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a8c4:	18f2      	adds	r2, r6, r3
 800a8c6:	5ca0      	ldrb	r0, [r4, r2]
 800a8c8:	a908      	add	r1, sp, #32
 800a8ca:	4419      	add	r1, r3
 800a8cc:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800a8d0:	4048      	eors	r0, r1
 800a8d2:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	462a      	mov	r2, r5
 800a8da:	2d10      	cmp	r5, #16
 800a8dc:	bfa8      	it	ge
 800a8de:	2210      	movge	r2, #16
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	dbef      	blt.n	800a8c4 <PayloadEncrypt+0x5e>
        size -= 16;
 800a8e4:	3d10      	subs	r5, #16
 800a8e6:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800a8e8:	3610      	adds	r6, #16
 800a8ea:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800a8ec:	2d00      	cmp	r5, #0
 800a8ee:	dd0e      	ble.n	800a90e <PayloadEncrypt+0xa8>
        aBlock[15] = ctr & 0xFF;
 800a8f0:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800a8f4:	3701      	adds	r7, #1
 800a8f6:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a8f8:	ab04      	add	r3, sp, #16
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	2110      	movs	r1, #16
 800a8fe:	4668      	mov	r0, sp
 800a900:	f003 fb40 	bl	800df84 <SecureElementAesEncrypt>
 800a904:	4603      	mov	r3, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	d0e6      	beq.n	800a8d8 <PayloadEncrypt+0x72>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a90a:	200f      	movs	r0, #15
 800a90c:	e000      	b.n	800a910 <PayloadEncrypt+0xaa>
    return LORAMAC_CRYPTO_SUCCESS;
 800a90e:	2000      	movs	r0, #0
}
 800a910:	b008      	add	sp, #32
 800a912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a916:	200a      	movs	r0, #10
 800a918:	e7fa      	b.n	800a910 <PayloadEncrypt+0xaa>

0800a91a <VerifyCmacB0>:
    if( msg == 0 )
 800a91a:	b370      	cbz	r0, 800a97a <VerifyCmacB0+0x60>
{
 800a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a920:	b0c8      	sub	sp, #288	; 0x120
 800a922:	460c      	mov	r4, r1
 800a924:	4615      	mov	r5, r2
 800a926:	461e      	mov	r6, r3
 800a928:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a92a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a92e:	d826      	bhi.n	800a97e <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a930:	af04      	add	r7, sp, #16
 800a932:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a936:	2100      	movs	r1, #0
 800a938:	4638      	mov	r0, r7
 800a93a:	f003 fc7a 	bl	800e232 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800a93e:	9702      	str	r7, [sp, #8]
 800a940:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800a94c:	4632      	mov	r2, r6
 800a94e:	4629      	mov	r1, r5
 800a950:	4620      	mov	r0, r4
 800a952:	f7ff fe71 	bl	800a638 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a956:	4622      	mov	r2, r4
 800a958:	4641      	mov	r1, r8
 800a95a:	a808      	add	r0, sp, #32
 800a95c:	f003 fc53 	bl	800e206 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800a960:	f104 0110 	add.w	r1, r4, #16
 800a964:	462b      	mov	r3, r5
 800a966:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800a968:	b289      	uxth	r1, r1
 800a96a:	4638      	mov	r0, r7
 800a96c:	f003 faf4 	bl	800df58 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800a970:	b130      	cbz	r0, 800a980 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800a972:	2801      	cmp	r0, #1
 800a974:	d004      	beq.n	800a980 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a976:	200f      	movs	r0, #15
 800a978:	e002      	b.n	800a980 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a97a:	200a      	movs	r0, #10
}
 800a97c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a97e:	200e      	movs	r0, #14
}
 800a980:	b048      	add	sp, #288	; 0x120
 800a982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a988 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800a988:	b188      	cbz	r0, 800a9ae <LoRaMacCryptoInit+0x26>
{
 800a98a:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800a98c:	4c09      	ldr	r4, [pc, #36]	; (800a9b4 <LoRaMacCryptoInit+0x2c>)
 800a98e:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a990:	2228      	movs	r2, #40	; 0x28
 800a992:	2100      	movs	r1, #0
 800a994:	f003 fc4d 	bl	800e232 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	2201      	movs	r2, #1
 800a99c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800a99e:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800a9a0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800a9a2:	2400      	movs	r4, #0
 800a9a4:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800a9a6:	f7ff fee5 	bl	800a774 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800a9aa:	4620      	mov	r0, r4
}
 800a9ac:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800a9ae:	2009      	movs	r0, #9
}
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	2000102c 	.word	0x2000102c

0800a9b8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800a9b8:	4b02      	ldr	r3, [pc, #8]	; (800a9c4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800a9be:	2000      	movs	r0, #0
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	2000102c 	.word	0x2000102c

0800a9c8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800a9c8:	b130      	cbz	r0, 800a9d8 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800a9ca:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <LoRaMacCryptoGetFCntUp+0x14>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9d8:	200a      	movs	r0, #10
}
 800a9da:	4770      	bx	lr
 800a9dc:	2000102c 	.word	0x2000102c

0800a9e0 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800a9ea:	b373      	cbz	r3, 800aa4a <LoRaMacCryptoGetFCntDown+0x6a>
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800a9f0:	a901      	add	r1, sp, #4
 800a9f2:	f7ff fe5f 	bl	800a6b4 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a9f6:	b9c8      	cbnz	r0, 800aa2c <LoRaMacCryptoGetFCntDown+0x4c>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800a9f8:	9b01      	ldr	r3, [sp, #4]
 800a9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fe:	d017      	beq.n	800aa30 <LoRaMacCryptoGetFCntDown+0x50>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	1aaa      	subs	r2, r5, r2

        if( fCntDiff > 0 )
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	dd15      	ble.n	800aa34 <LoRaMacCryptoGetFCntDown+0x54>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800aa08:	4413      	add	r3, r2
 800aa0a:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800aa0c:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <LoRaMacCryptoGetFCntDown+0x74>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	789b      	ldrb	r3, [r3, #2]
 800aa12:	b95b      	cbnz	r3, 800aa2c <LoRaMacCryptoGetFCntDown+0x4c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800aa14:	6830      	ldr	r0, [r6, #0]
 800aa16:	9a01      	ldr	r2, [sp, #4]
 800aa18:	1a80      	subs	r0, r0, r2
 800aa1a:	eb60 0100 	sbc.w	r1, r0, r0
 800aa1e:	b2a4      	uxth	r4, r4
 800aa20:	2500      	movs	r5, #0
 800aa22:	42a0      	cmp	r0, r4
 800aa24:	eb71 0205 	sbcs.w	r2, r1, r5
 800aa28:	da11      	bge.n	800aa4e <LoRaMacCryptoGetFCntDown+0x6e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800aa2a:	4618      	mov	r0, r3
}
 800aa2c:	b002      	add	sp, #8
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800aa30:	6035      	str	r5, [r6, #0]
 800aa32:	e7eb      	b.n	800aa0c <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800aa34:	b132      	cbz	r2, 800aa44 <LoRaMacCryptoGetFCntDown+0x64>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800aa36:	0c1b      	lsrs	r3, r3, #16
 800aa38:	041b      	lsls	r3, r3, #16
 800aa3a:	442b      	add	r3, r5
 800aa3c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800aa40:	6033      	str	r3, [r6, #0]
 800aa42:	e7e3      	b.n	800aa0c <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800aa44:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800aa46:	2007      	movs	r0, #7
 800aa48:	e7f0      	b.n	800aa2c <LoRaMacCryptoGetFCntDown+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa4a:	200a      	movs	r0, #10
 800aa4c:	e7ee      	b.n	800aa2c <LoRaMacCryptoGetFCntDown+0x4c>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800aa4e:	2008      	movs	r0, #8
 800aa50:	e7ec      	b.n	800aa2c <LoRaMacCryptoGetFCntDown+0x4c>
 800aa52:	bf00      	nop
 800aa54:	2000102c 	.word	0x2000102c

0800aa58 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800aa58:	b908      	cbnz	r0, 800aa5e <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa5a:	200a      	movs	r0, #10
 800aa5c:	4770      	bx	lr
 800aa5e:	4601      	mov	r1, r0
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aa60:	2300      	movs	r3, #0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dd01      	ble.n	800aa6a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800aa66:	2000      	movs	r0, #0
}
 800aa68:	4770      	bx	lr
{
 800aa6a:	b410      	push	{r4}
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800aa6c:	4a07      	ldr	r2, [pc, #28]	; (800aa8c <LoRaMacCryptoSetMulticastReference+0x34>)
 800aa6e:	6812      	ldr	r2, [r2, #0]
 800aa70:	202c      	movs	r0, #44	; 0x2c
 800aa72:	fb00 1003 	mla	r0, r0, r3, r1
 800aa76:	1d9c      	adds	r4, r3, #6
 800aa78:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800aa7c:	3204      	adds	r2, #4
 800aa7e:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aa80:	3301      	adds	r3, #1
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	ddf2      	ble.n	800aa6c <LoRaMacCryptoSetMulticastReference+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800aa86:	2000      	movs	r0, #0
}
 800aa88:	bc10      	pop	{r4}
 800aa8a:	4770      	bx	lr
 800aa8c:	2000102c 	.word	0x2000102c

0800aa90 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800aa90:	b300      	cbz	r0, 800aad4 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800aa92:	b510      	push	{r4, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800aa9c:	a803      	add	r0, sp, #12
 800aa9e:	f003 fb4f 	bl	800e140 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800aaa2:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800aaaa:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800aaac:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 fa2d 	bl	800af0e <LoRaMacSerializerJoinRequest>
 800aab4:	b980      	cbnz	r0, 800aad8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800aab6:	4623      	mov	r3, r4
 800aab8:	f853 1b18 	ldr.w	r1, [r3], #24
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	2301      	movs	r3, #1
 800aac0:	2213      	movs	r2, #19
 800aac2:	f003 fa3d 	bl	800df40 <SecureElementComputeAesCmac>
 800aac6:	b950      	cbnz	r0, 800aade <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 fa20 	bl	800af0e <LoRaMacSerializerJoinRequest>
 800aace:	b120      	cbz	r0, 800aada <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800aad0:	2011      	movs	r0, #17
 800aad2:	e002      	b.n	800aada <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aad4:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800aad6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800aad8:	2011      	movs	r0, #17
}
 800aada:	b004      	add	sp, #16
 800aadc:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aade:	200f      	movs	r0, #15
 800aae0:	e7fb      	b.n	800aada <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800aae2:	bf00      	nop
 800aae4:	2000102c 	.word	0x2000102c

0800aae8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d036      	beq.n	800ab5a <LoRaMacCryptoSecureMessage+0x72>
{
 800aaec:	b530      	push	{r4, r5, lr}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800aaf4:	4b1d      	ldr	r3, [pc, #116]	; (800ab6c <LoRaMacCryptoSecureMessage+0x84>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	4283      	cmp	r3, r0
 800aafc:	d82f      	bhi.n	800ab5e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800aafe:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ab02:	b342      	cbz	r2, 800ab56 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800ab04:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800ab06:	42a3      	cmp	r3, r4
 800ab08:	d209      	bcs.n	800ab1e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ab0a:	9401      	str	r4, [sp, #4]
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	68ab      	ldr	r3, [r5, #8]
 800ab12:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ab16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ab18:	f7ff fea5 	bl	800a866 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ab1c:	bb10      	cbnz	r0, 800ab64 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 fa2b 	bl	800af7a <LoRaMacSerializerData>
 800ab24:	b9e8      	cbnz	r0, 800ab62 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ab26:	7929      	ldrb	r1, [r5, #4]
 800ab28:	3904      	subs	r1, #4
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	9402      	str	r4, [sp, #8]
 800ab34:	68ab      	ldr	r3, [r5, #8]
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	b289      	uxth	r1, r1
 800ab40:	f7ff fe30 	bl	800a7a4 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ab44:	b970      	cbnz	r0, 800ab64 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab46:	4628      	mov	r0, r5
 800ab48:	f000 fa17 	bl	800af7a <LoRaMacSerializerData>
 800ab4c:	b960      	cbnz	r0, 800ab68 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ab4e:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <LoRaMacCryptoSecureMessage+0x84>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800ab54:	e006      	b.n	800ab64 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ab56:	2202      	movs	r2, #2
 800ab58:	e7d5      	b.n	800ab06 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab5a:	200a      	movs	r0, #10
}
 800ab5c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ab5e:	2006      	movs	r0, #6
 800ab60:	e000      	b.n	800ab64 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ab62:	2011      	movs	r0, #17
}
 800ab64:	b005      	add	sp, #20
 800ab66:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ab68:	2011      	movs	r0, #17
 800ab6a:	e7fb      	b.n	800ab64 <LoRaMacCryptoSecureMessage+0x7c>
 800ab6c:	2000102c 	.word	0x2000102c

0800ab70 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800ab70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab74:	b087      	sub	sp, #28
 800ab76:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800ab78:	2e00      	cmp	r6, #0
 800ab7a:	d049      	beq.n	800ac10 <LoRaMacCryptoUnsecureMessage+0xa0>
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	4688      	mov	r8, r1
 800ab80:	4617      	mov	r7, r2
 800ab82:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ab84:	4619      	mov	r1, r3
 800ab86:	4610      	mov	r0, r2
 800ab88:	f7ff fdc2 	bl	800a710 <CheckFCntDown>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d041      	beq.n	800ac14 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f95d 	bl	800ae50 <LoRaMacParserData>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d141      	bne.n	800ac1e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ab9a:	a905      	add	r1, sp, #20
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f7ff fd6d 	bl	800a67c <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aba2:	4605      	mov	r5, r0
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d136      	bne.n	800ac16 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800aba8:	9b05      	ldr	r3, [sp, #20]
 800abaa:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800abae:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800abb0:	68b3      	ldr	r3, [r6, #8]
 800abb2:	4543      	cmp	r3, r8
 800abb4:	d135      	bne.n	800ac22 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800abb6:	7b33      	ldrb	r3, [r6, #12]
 800abb8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800abbc:	491a      	ldr	r1, [pc, #104]	; (800ac28 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800abbe:	6809      	ldr	r1, [r1, #0]
 800abc0:	7889      	ldrb	r1, [r1, #2]
 800abc2:	b901      	cbnz	r1, 800abc6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800abc4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800abc6:	7931      	ldrb	r1, [r6, #4]
 800abc8:	3904      	subs	r1, #4
 800abca:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800abcc:	9003      	str	r0, [sp, #12]
 800abce:	9402      	str	r4, [sp, #8]
 800abd0:	f8cd 8004 	str.w	r8, [sp, #4]
 800abd4:	2001      	movs	r0, #1
 800abd6:	9000      	str	r0, [sp, #0]
 800abd8:	b289      	uxth	r1, r1
 800abda:	6830      	ldr	r0, [r6, #0]
 800abdc:	f7ff fe9d 	bl	800a91a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800abe0:	4605      	mov	r5, r0
 800abe2:	b9c0      	cbnz	r0, 800ac16 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800abe4:	f896 3020 	ldrb.w	r3, [r6, #32]
 800abe8:	b90b      	cbnz	r3, 800abee <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800abea:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800abee:	9401      	str	r4, [sp, #4]
 800abf0:	2301      	movs	r3, #1
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	4643      	mov	r3, r8
 800abf6:	464a      	mov	r2, r9
 800abf8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800abfc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800abfe:	f7ff fe32 	bl	800a866 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac02:	4605      	mov	r5, r0
 800ac04:	b938      	cbnz	r0, 800ac16 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800ac06:	4621      	mov	r1, r4
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7ff fd99 	bl	800a740 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800ac0e:	e002      	b.n	800ac16 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac10:	250a      	movs	r5, #10
 800ac12:	e000      	b.n	800ac16 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ac14:	2506      	movs	r5, #6
}
 800ac16:	4628      	mov	r0, r5
 800ac18:	b007      	add	sp, #28
 800ac1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ac1e:	2510      	movs	r5, #16
 800ac20:	e7f9      	b.n	800ac16 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ac22:	2502      	movs	r5, #2
 800ac24:	e7f7      	b.n	800ac16 <LoRaMacCryptoUnsecureMessage+0xa6>
 800ac26:	bf00      	nop
 800ac28:	2000102c 	.word	0x2000102c

0800ac2c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800ac2c:	b9a9      	cbnz	r1, 800ac5a <LoRaMacCryptoDeriveMcRootKey+0x2e>
{
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	460c      	mov	r4, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800ac34:	2300      	movs	r3, #0
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	9302      	str	r3, [sp, #8]
 800ac3c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800ac3e:	2801      	cmp	r0, #1
 800ac40:	d007      	beq.n	800ac52 <LoRaMacCryptoDeriveMcRootKey+0x26>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ac42:	2204      	movs	r2, #4
 800ac44:	4621      	mov	r1, r4
 800ac46:	4668      	mov	r0, sp
 800ac48:	f003 fa16 	bl	800e078 <SecureElementDeriveAndStoreKey>
 800ac4c:	b938      	cbnz	r0, 800ac5e <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ac4e:	b004      	add	sp, #16
 800ac50:	bd10      	pop	{r4, pc}
        compBase[0] = 0x20;
 800ac52:	2320      	movs	r3, #32
 800ac54:	f88d 3000 	strb.w	r3, [sp]
 800ac58:	e7f3      	b.n	800ac42 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ac5a:	200b      	movs	r0, #11
}
 800ac5c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac5e:	200f      	movs	r0, #15
 800ac60:	e7f5      	b.n	800ac4e <LoRaMacCryptoDeriveMcRootKey+0x22>

0800ac62 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800ac62:	2804      	cmp	r0, #4
 800ac64:	d001      	beq.n	800ac6a <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ac66:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ac68:	4770      	bx	lr
{
 800ac6a:	b500      	push	{lr}
 800ac6c:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800ac6e:	2300      	movs	r3, #0
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	9302      	str	r3, [sp, #8]
 800ac76:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ac78:	227f      	movs	r2, #127	; 0x7f
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	4668      	mov	r0, sp
 800ac7e:	f003 f9fb 	bl	800e078 <SecureElementDeriveAndStoreKey>
 800ac82:	b910      	cbnz	r0, 800ac8a <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800ac84:	b005      	add	sp, #20
 800ac86:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac8a:	200f      	movs	r0, #15
 800ac8c:	e7fa      	b.n	800ac84 <LoRaMacCryptoDeriveMcKEKey+0x22>
	...

0800ac90 <LoRaMacCryptoSetKey>:
{
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ac94:	f003 f9ae 	bl	800dff4 <SecureElementSetKey>
 800ac98:	b978      	cbnz	r0, 800acba <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800ac9a:	b104      	cbz	r4, 800ac9e <LoRaMacCryptoSetKey+0xe>
}
 800ac9c:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ac9e:	4b09      	ldr	r3, [pc, #36]	; (800acc4 <LoRaMacCryptoSetKey+0x34>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4621      	mov	r1, r4
 800aca4:	7898      	ldrb	r0, [r3, #2]
 800aca6:	f7ff ffc1 	bl	800ac2c <LoRaMacCryptoDeriveMcRootKey>
 800acaa:	b940      	cbnz	r0, 800acbe <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800acac:	2004      	movs	r0, #4
 800acae:	f7ff ffd8 	bl	800ac62 <LoRaMacCryptoDeriveMcKEKey>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d0f2      	beq.n	800ac9c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800acb6:	200f      	movs	r0, #15
 800acb8:	e7f0      	b.n	800ac9c <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800acba:	200f      	movs	r0, #15
 800acbc:	e7ee      	b.n	800ac9c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800acbe:	200f      	movs	r0, #15
 800acc0:	e7ec      	b.n	800ac9c <LoRaMacCryptoSetKey+0xc>
 800acc2:	bf00      	nop
 800acc4:	2000102c 	.word	0x2000102c

0800acc8 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800acc8:	2a00      	cmp	r2, #0
 800acca:	d064      	beq.n	800ad96 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800accc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acce:	b08f      	sub	sp, #60	; 0x3c
 800acd0:	4607      	mov	r7, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800acd6:	2900      	cmp	r1, #0
 800acd8:	d05f      	beq.n	800ad9a <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800acda:	2600      	movs	r6, #0
 800acdc:	9605      	str	r6, [sp, #20]
 800acde:	221d      	movs	r2, #29
 800ace0:	4631      	mov	r1, r6
 800ace2:	a806      	add	r0, sp, #24
 800ace4:	f006 f9dc 	bl	80110a0 <memset>
    uint8_t versionMinor         = 0;
 800ace8:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800acec:	4b2f      	ldr	r3, [pc, #188]	; (800adac <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800acf2:	f10d 0313 	add.w	r3, sp, #19
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	ab05      	add	r3, sp, #20
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	7923      	ldrb	r3, [r4, #4]
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	4632      	mov	r2, r6
 800ad04:	4629      	mov	r1, r5
 800ad06:	4638      	mov	r0, r7
 800ad08:	f003 f9d6 	bl	800e0b8 <SecureElementProcessJoinAccept>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	d146      	bne.n	800ad9e <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800ad10:	7922      	ldrb	r2, [r4, #4]
 800ad12:	a905      	add	r1, sp, #20
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	f003 fa76 	bl	800e206 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 f848 	bl	800adb0 <LoRaMacParserJoinAccept>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d13f      	bne.n	800ada4 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ad24:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ad26:	79e3      	ldrb	r3, [r4, #7]
 800ad28:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ad2c:	7a23      	ldrb	r3, [r4, #8]
 800ad2e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ad32:	4b1e      	ldr	r3, [pc, #120]	; (800adac <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	42aa      	cmp	r2, r5
 800ad3a:	d035      	beq.n	800ada8 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ad3c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ad3e:	2100      	movs	r1, #0
 800ad40:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ad44:	f7ff ff72 	bl	800ac2c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad48:	bb50      	cbnz	r0, 800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800ad4a:	2004      	movs	r0, #4
 800ad4c:	f7ff ff89 	bl	800ac62 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad50:	bb30      	cbnz	r0, 800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800ad52:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ad54:	7aa2      	ldrb	r2, [r4, #10]
 800ad56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ad5a:	7ae4      	ldrb	r4, [r4, #11]
 800ad5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ad60:	4633      	mov	r3, r6
 800ad62:	4622      	mov	r2, r4
 800ad64:	4629      	mov	r1, r5
 800ad66:	2003      	movs	r0, #3
 800ad68:	f7ff fd48 	bl	800a7fc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad6c:	b9c0      	cbnz	r0, 800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ad6e:	4633      	mov	r3, r6
 800ad70:	4622      	mov	r2, r4
 800ad72:	4629      	mov	r1, r5
 800ad74:	2002      	movs	r0, #2
 800ad76:	f7ff fd41 	bl	800a7fc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad7a:	b988      	cbnz	r0, 800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ad7c:	4b0b      	ldr	r3, [pc, #44]	; (800adac <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ad84:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800ad86:	2200      	movs	r2, #0
 800ad88:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ad90:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ad92:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800ad94:	e004      	b.n	800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ad96:	200a      	movs	r0, #10
}
 800ad98:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ad9a:	200a      	movs	r0, #10
 800ad9c:	e000      	b.n	800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad9e:	200f      	movs	r0, #15
}
 800ada0:	b00f      	add	sp, #60	; 0x3c
 800ada2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ada4:	2010      	movs	r0, #16
 800ada6:	e7fb      	b.n	800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ada8:	2003      	movs	r0, #3
 800adaa:	e7f9      	b.n	800ada0 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800adac:	2000102c 	.word	0x2000102c

0800adb0 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d047      	beq.n	800ae44 <LoRaMacParserJoinAccept+0x94>
{
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800adb8:	6801      	ldr	r1, [r0, #0]
 800adba:	2900      	cmp	r1, #0
 800adbc:	d044      	beq.n	800ae48 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800adbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adc2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800adc4:	2203      	movs	r2, #3
 800adc6:	3006      	adds	r0, #6
 800adc8:	f003 fa1d 	bl	800e206 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800adcc:	4620      	mov	r0, r4
 800adce:	f850 1b09 	ldr.w	r1, [r0], #9
 800add2:	2203      	movs	r2, #3
 800add4:	3104      	adds	r1, #4
 800add6:	f003 fa16 	bl	800e206 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800adda:	6821      	ldr	r1, [r4, #0]
 800addc:	79cb      	ldrb	r3, [r1, #7]
 800adde:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ade0:	7a0a      	ldrb	r2, [r1, #8]
 800ade2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ade6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ade8:	7a4a      	ldrb	r2, [r1, #9]
 800adea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adee:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800adf0:	7a8a      	ldrb	r2, [r1, #10]
 800adf2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800adf6:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800adf8:	7acb      	ldrb	r3, [r1, #11]
 800adfa:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800adfc:	7b0b      	ldrb	r3, [r1, #12]
 800adfe:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800ae00:	7923      	ldrb	r3, [r4, #4]
 800ae02:	2b21      	cmp	r3, #33	; 0x21
 800ae04:	d016      	beq.n	800ae34 <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800ae06:	2b11      	cmp	r3, #17
 800ae08:	dc20      	bgt.n	800ae4c <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ae0a:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ae0c:	6821      	ldr	r1, [r4, #0]
 800ae0e:	1c55      	adds	r5, r2, #1
 800ae10:	5c8b      	ldrb	r3, [r1, r2]
 800ae12:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ae14:	1c90      	adds	r0, r2, #2
 800ae16:	5d4d      	ldrb	r5, [r1, r5]
 800ae18:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800ae1c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ae1e:	3203      	adds	r2, #3
 800ae20:	5c08      	ldrb	r0, [r1, r0]
 800ae22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae26:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ae28:	5c8a      	ldrb	r2, [r1, r2]
 800ae2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ae2e:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800ae30:	2000      	movs	r0, #0
}
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800ae34:	2210      	movs	r2, #16
 800ae36:	310d      	adds	r1, #13
 800ae38:	f104 0012 	add.w	r0, r4, #18
 800ae3c:	f003 f9e3 	bl	800e206 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800ae40:	221d      	movs	r2, #29
 800ae42:	e7e3      	b.n	800ae0c <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800ae44:	2002      	movs	r0, #2
}
 800ae46:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800ae48:	2002      	movs	r0, #2
 800ae4a:	e7f2      	b.n	800ae32 <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800ae4c:	2001      	movs	r0, #1
 800ae4e:	e7f0      	b.n	800ae32 <LoRaMacParserJoinAccept+0x82>

0800ae50 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d058      	beq.n	800af06 <LoRaMacParserData+0xb6>
{
 800ae54:	b510      	push	{r4, lr}
 800ae56:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae58:	6801      	ldr	r1, [r0, #0]
 800ae5a:	2900      	cmp	r1, #0
 800ae5c:	d055      	beq.n	800af0a <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ae5e:	780b      	ldrb	r3, [r1, #0]
 800ae60:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800ae62:	784b      	ldrb	r3, [r1, #1]
 800ae64:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ae66:	788a      	ldrb	r2, [r1, #2]
 800ae68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ae6c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ae6e:	78ca      	ldrb	r2, [r1, #3]
 800ae70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae74:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ae76:	790a      	ldrb	r2, [r1, #4]
 800ae78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ae7c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800ae7e:	794b      	ldrb	r3, [r1, #5]
 800ae80:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800ae82:	798b      	ldrb	r3, [r1, #6]
 800ae84:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ae86:	79ca      	ldrb	r2, [r1, #7]
 800ae88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ae8c:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ae8e:	7b02      	ldrb	r2, [r0, #12]
 800ae90:	f002 020f 	and.w	r2, r2, #15
 800ae94:	3108      	adds	r1, #8
 800ae96:	3010      	adds	r0, #16
 800ae98:	f003 f9b5 	bl	800e206 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ae9c:	7b23      	ldrb	r3, [r4, #12]
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800aea6:	2200      	movs	r2, #0
 800aea8:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800aeac:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800aeb0:	7922      	ldrb	r2, [r4, #4]
 800aeb2:	1a11      	subs	r1, r2, r0
 800aeb4:	2904      	cmp	r1, #4
 800aeb6:	dc16      	bgt.n	800aee6 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800aeb8:	6822      	ldr	r2, [r4, #0]
 800aeba:	7923      	ldrb	r3, [r4, #4]
 800aebc:	441a      	add	r2, r3
 800aebe:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800aec2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800aec4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800aec8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800aecc:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800aece:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800aed2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800aed6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800aed8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800aedc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800aee0:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800aee2:	2000      	movs	r0, #0
}
 800aee4:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800aee6:	6821      	ldr	r1, [r4, #0]
 800aee8:	3309      	adds	r3, #9
 800aeea:	5c08      	ldrb	r0, [r1, r0]
 800aeec:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800aef0:	1ad2      	subs	r2, r2, r3
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	3a04      	subs	r2, #4
 800aef6:	b2d2      	uxtb	r2, r2
 800aef8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800aefc:	4419      	add	r1, r3
 800aefe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af00:	f003 f981 	bl	800e206 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800af04:	e7d8      	b.n	800aeb8 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800af06:	2002      	movs	r0, #2
}
 800af08:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800af0a:	2002      	movs	r0, #2
 800af0c:	e7ea      	b.n	800aee4 <LoRaMacParserData+0x94>

0800af0e <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af0e:	b370      	cbz	r0, 800af6e <LoRaMacSerializerJoinRequest+0x60>
{
 800af10:	b510      	push	{r4, lr}
 800af12:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af14:	6803      	ldr	r3, [r0, #0]
 800af16:	b363      	cbz	r3, 800af72 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800af18:	7902      	ldrb	r2, [r0, #4]
 800af1a:	2a16      	cmp	r2, #22
 800af1c:	d92b      	bls.n	800af76 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800af1e:	7942      	ldrb	r2, [r0, #5]
 800af20:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800af22:	4601      	mov	r1, r0
 800af24:	f851 0b06 	ldr.w	r0, [r1], #6
 800af28:	2208      	movs	r2, #8
 800af2a:	3001      	adds	r0, #1
 800af2c:	f003 f975 	bl	800e21a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800af30:	4621      	mov	r1, r4
 800af32:	f851 0b0e 	ldr.w	r0, [r1], #14
 800af36:	2208      	movs	r2, #8
 800af38:	3009      	adds	r0, #9
 800af3a:	f003 f96e 	bl	800e21a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800af3e:	8ae2      	ldrh	r2, [r4, #22]
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800af44:	8ae3      	ldrh	r3, [r4, #22]
 800af46:	6822      	ldr	r2, [r4, #0]
 800af48:	0a1b      	lsrs	r3, r3, #8
 800af4a:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800af4c:	69a2      	ldr	r2, [r4, #24]
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800af52:	69a3      	ldr	r3, [r4, #24]
 800af54:	0a1b      	lsrs	r3, r3, #8
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800af5a:	8b62      	ldrh	r2, [r4, #26]
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800af60:	7ee2      	ldrb	r2, [r4, #27]
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800af66:	2317      	movs	r3, #23
 800af68:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800af6a:	2000      	movs	r0, #0
}
 800af6c:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800af6e:	2001      	movs	r0, #1
}
 800af70:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800af72:	2001      	movs	r0, #1
 800af74:	e7fa      	b.n	800af6c <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800af76:	2002      	movs	r0, #2
 800af78:	e7f8      	b.n	800af6c <LoRaMacSerializerJoinRequest+0x5e>

0800af7a <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d066      	beq.n	800b04c <LoRaMacSerializerData+0xd2>
{
 800af7e:	b538      	push	{r3, r4, r5, lr}
 800af80:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af82:	6801      	ldr	r1, [r0, #0]
 800af84:	2900      	cmp	r1, #0
 800af86:	d063      	beq.n	800b050 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af88:	7b02      	ldrb	r2, [r0, #12]
 800af8a:	f002 020f 	and.w	r2, r2, #15
 800af8e:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800af92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800af96:	b10b      	cbz	r3, 800af9c <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800af98:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800af9c:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800af9e:	3304      	adds	r3, #4
 800afa0:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800afa2:	7922      	ldrb	r2, [r4, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d355      	bcc.n	800b054 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800afa8:	7963      	ldrb	r3, [r4, #5]
 800afaa:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800afac:	68a2      	ldr	r2, [r4, #8]
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800afb2:	68a3      	ldr	r3, [r4, #8]
 800afb4:	0a1b      	lsrs	r3, r3, #8
 800afb6:	6822      	ldr	r2, [r4, #0]
 800afb8:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800afba:	8962      	ldrh	r2, [r4, #10]
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800afc0:	7ae2      	ldrb	r2, [r4, #11]
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	7b22      	ldrb	r2, [r4, #12]
 800afca:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800afcc:	89e2      	ldrh	r2, [r4, #14]
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800afd2:	89e3      	ldrh	r3, [r4, #14]
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800afda:	4621      	mov	r1, r4
 800afdc:	f851 0b10 	ldr.w	r0, [r1], #16
 800afe0:	7b22      	ldrb	r2, [r4, #12]
 800afe2:	f002 020f 	and.w	r2, r2, #15
 800afe6:	3008      	adds	r0, #8
 800afe8:	f003 f90d 	bl	800e206 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800afec:	7b23      	ldrb	r3, [r4, #12]
 800afee:	f003 030f 	and.w	r3, r3, #15
 800aff2:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800aff6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800affa:	b12a      	cbz	r2, 800b008 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800affc:	6822      	ldr	r2, [r4, #0]
 800affe:	f894 1020 	ldrb.w	r1, [r4, #32]
 800b002:	5551      	strb	r1, [r2, r5]
 800b004:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800b008:	6820      	ldr	r0, [r4, #0]
 800b00a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b00e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b010:	4428      	add	r0, r5
 800b012:	f003 f8f8 	bl	800e206 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b016:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b01a:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b01c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b01e:	6821      	ldr	r1, [r4, #0]
 800b020:	1c5a      	adds	r2, r3, #1
 800b022:	b292      	uxth	r2, r2
 800b024:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b026:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b028:	0a08      	lsrs	r0, r1, #8
 800b02a:	6825      	ldr	r5, [r4, #0]
 800b02c:	1c99      	adds	r1, r3, #2
 800b02e:	b289      	uxth	r1, r1
 800b030:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b032:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800b034:	6820      	ldr	r0, [r4, #0]
 800b036:	1cda      	adds	r2, r3, #3
 800b038:	b292      	uxth	r2, r2
 800b03a:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b03c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800b040:	6821      	ldr	r1, [r4, #0]
 800b042:	3304      	adds	r3, #4
 800b044:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800b046:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800b048:	2000      	movs	r0, #0
}
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b04c:	2001      	movs	r0, #1
}
 800b04e:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b050:	2001      	movs	r0, #1
 800b052:	e7fa      	b.n	800b04a <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b054:	2002      	movs	r0, #2
 800b056:	e7f8      	b.n	800b04a <LoRaMacSerializerData+0xd0>

0800b058 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800b058:	4770      	bx	lr

0800b05a <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800b05a:	2000      	movs	r0, #0
 800b05c:	4770      	bx	lr

0800b05e <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800b05e:	2000      	movs	r0, #0
 800b060:	4770      	bx	lr

0800b062 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800b062:	2805      	cmp	r0, #5
 800b064:	d005      	beq.n	800b072 <RegionIsActive+0x10>
 800b066:	2808      	cmp	r0, #8
 800b068:	d001      	beq.n	800b06e <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800b06a:	2000      	movs	r0, #0
        }
    }
}
 800b06c:	4770      	bx	lr
    switch( region )
 800b06e:	2001      	movs	r0, #1
 800b070:	4770      	bx	lr
 800b072:	2001      	movs	r0, #1
 800b074:	4770      	bx	lr

0800b076 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b076:	b500      	push	{lr}
 800b078:	b083      	sub	sp, #12
 800b07a:	4603      	mov	r3, r0
 800b07c:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800b07e:	2200      	movs	r2, #0
 800b080:	9200      	str	r2, [sp, #0]
    switch( region )
 800b082:	2b05      	cmp	r3, #5
 800b084:	d004      	beq.n	800b090 <RegionGetPhyParam+0x1a>
 800b086:	2b08      	cmp	r3, #8
 800b088:	d009      	beq.n	800b09e <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800b08a:	9b00      	ldr	r3, [sp, #0]
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	e002      	b.n	800b096 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800b090:	f000 fde4 	bl	800bc5c <RegionEU868GetPhyParam>
 800b094:	9001      	str	r0, [sp, #4]
        }
    }
}
 800b096:	9801      	ldr	r0, [sp, #4]
 800b098:	b003      	add	sp, #12
 800b09a:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800b09e:	f001 fbff 	bl	800c8a0 <RegionUS915GetPhyParam>
 800b0a2:	9001      	str	r0, [sp, #4]
 800b0a4:	e7f7      	b.n	800b096 <RegionGetPhyParam+0x20>

0800b0a6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b0a6:	b508      	push	{r3, lr}
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	4608      	mov	r0, r1
    switch( region )
 800b0ac:	2b05      	cmp	r3, #5
 800b0ae:	d002      	beq.n	800b0b6 <RegionSetBandTxDone+0x10>
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	d003      	beq.n	800b0bc <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800b0b4:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800b0b6:	f000 fe95 	bl	800bde4 <RegionEU868SetBandTxDone>
 800b0ba:	e7fb      	b.n	800b0b4 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800b0bc:	f001 fcca 	bl	800ca54 <RegionUS915SetBandTxDone>
 800b0c0:	e7f8      	b.n	800b0b4 <RegionSetBandTxDone+0xe>

0800b0c2 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b0c2:	b508      	push	{r3, lr}
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	4608      	mov	r0, r1
    switch( region )
 800b0c8:	2b05      	cmp	r3, #5
 800b0ca:	d002      	beq.n	800b0d2 <RegionInitDefaults+0x10>
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d003      	beq.n	800b0d8 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800b0d0:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800b0d2:	f000 fea5 	bl	800be20 <RegionEU868InitDefaults>
 800b0d6:	e7fb      	b.n	800b0d0 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800b0d8:	f001 fcda 	bl	800ca90 <RegionUS915InitDefaults>
}
 800b0dc:	e7f8      	b.n	800b0d0 <RegionInitDefaults+0xe>

0800b0de <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b0de:	b508      	push	{r3, lr}
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	4611      	mov	r1, r2
    switch( region )
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d003      	beq.n	800b0f2 <RegionVerify+0x14>
 800b0ea:	2b08      	cmp	r3, #8
 800b0ec:	d004      	beq.n	800b0f8 <RegionVerify+0x1a>
 800b0ee:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b0f0:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800b0f2:	f000 ff01 	bl	800bef8 <RegionEU868Verify>
 800b0f6:	e7fb      	b.n	800b0f0 <RegionVerify+0x12>
        US915_VERIFY( );
 800b0f8:	f001 fd70 	bl	800cbdc <RegionUS915Verify>
 800b0fc:	e7f8      	b.n	800b0f0 <RegionVerify+0x12>

0800b0fe <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800b0fe:	b508      	push	{r3, lr}
 800b100:	4603      	mov	r3, r0
 800b102:	4608      	mov	r0, r1
    switch( region )
 800b104:	2b05      	cmp	r3, #5
 800b106:	d002      	beq.n	800b10e <RegionApplyCFList+0x10>
 800b108:	2b08      	cmp	r3, #8
 800b10a:	d003      	beq.n	800b114 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800b10c:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800b10e:	f001 fabb 	bl	800c688 <RegionEU868ApplyCFList>
 800b112:	e7fb      	b.n	800b10c <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800b114:	f001 fd92 	bl	800cc3c <RegionUS915ApplyCFList>
}
 800b118:	e7f8      	b.n	800b10c <RegionApplyCFList+0xe>

0800b11a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800b11a:	b508      	push	{r3, lr}
 800b11c:	4603      	mov	r3, r0
 800b11e:	4608      	mov	r0, r1
    switch( region )
 800b120:	2b05      	cmp	r3, #5
 800b122:	d003      	beq.n	800b12c <RegionChanMaskSet+0x12>
 800b124:	2b08      	cmp	r3, #8
 800b126:	d004      	beq.n	800b132 <RegionChanMaskSet+0x18>
 800b128:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b12a:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800b12c:	f000 ff2a 	bl	800bf84 <RegionEU868ChanMaskSet>
 800b130:	e7fb      	b.n	800b12a <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800b132:	f001 fdc1 	bl	800ccb8 <RegionUS915ChanMaskSet>
 800b136:	e7f8      	b.n	800b12a <RegionChanMaskSet+0x10>

0800b138 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b138:	b510      	push	{r4, lr}
 800b13a:	4604      	mov	r4, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	461a      	mov	r2, r3
    switch( region )
 800b142:	2c05      	cmp	r4, #5
 800b144:	d002      	beq.n	800b14c <RegionComputeRxWindowParameters+0x14>
 800b146:	2c08      	cmp	r4, #8
 800b148:	d004      	beq.n	800b154 <RegionComputeRxWindowParameters+0x1c>
        default:
        {
            break;
        }
    }
}
 800b14a:	bd10      	pop	{r4, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	f000 ff37 	bl	800bfc0 <RegionEU868ComputeRxWindowParameters>
 800b152:	e7fa      	b.n	800b14a <RegionComputeRxWindowParameters+0x12>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	f001 fdf3 	bl	800cd40 <RegionUS915ComputeRxWindowParameters>
}
 800b15a:	e7f6      	b.n	800b14a <RegionComputeRxWindowParameters+0x12>

0800b15c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b15c:	b508      	push	{r3, lr}
 800b15e:	4603      	mov	r3, r0
 800b160:	4608      	mov	r0, r1
 800b162:	4611      	mov	r1, r2
    switch( region )
 800b164:	2b05      	cmp	r3, #5
 800b166:	d003      	beq.n	800b170 <RegionRxConfig+0x14>
 800b168:	2b08      	cmp	r3, #8
 800b16a:	d004      	beq.n	800b176 <RegionRxConfig+0x1a>
 800b16c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b16e:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800b170:	f000 ff5c 	bl	800c02c <RegionEU868RxConfig>
 800b174:	e7fb      	b.n	800b16e <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800b176:	f001 fe11 	bl	800cd9c <RegionUS915RxConfig>
 800b17a:	e7f8      	b.n	800b16e <RegionRxConfig+0x12>

0800b17c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b17c:	b510      	push	{r4, lr}
 800b17e:	4604      	mov	r4, r0
 800b180:	4608      	mov	r0, r1
 800b182:	4611      	mov	r1, r2
 800b184:	461a      	mov	r2, r3
    switch( region )
 800b186:	2c05      	cmp	r4, #5
 800b188:	d003      	beq.n	800b192 <RegionTxConfig+0x16>
 800b18a:	2c08      	cmp	r4, #8
 800b18c:	d004      	beq.n	800b198 <RegionTxConfig+0x1c>
 800b18e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b190:	bd10      	pop	{r4, pc}
        EU868_TX_CONFIG( );
 800b192:	f000 ffcf 	bl	800c134 <RegionEU868TxConfig>
 800b196:	e7fb      	b.n	800b190 <RegionTxConfig+0x14>
        US915_TX_CONFIG( );
 800b198:	f001 fe5a 	bl	800ce50 <RegionUS915TxConfig>
 800b19c:	e7f8      	b.n	800b190 <RegionTxConfig+0x14>

0800b19e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	b082      	sub	sp, #8
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	461a      	mov	r2, r3
    switch( region )
 800b1aa:	2c05      	cmp	r4, #5
 800b1ac:	d004      	beq.n	800b1b8 <RegionLinkAdrReq+0x1a>
 800b1ae:	2c08      	cmp	r4, #8
 800b1b0:	d008      	beq.n	800b1c4 <RegionLinkAdrReq+0x26>
 800b1b2:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b1b4:	b002      	add	sp, #8
 800b1b6:	bd10      	pop	{r4, pc}
        EU868_LINK_ADR_REQ( );
 800b1b8:	9b05      	ldr	r3, [sp, #20]
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	9b04      	ldr	r3, [sp, #16]
 800b1be:	f001 f851 	bl	800c264 <RegionEU868LinkAdrReq>
 800b1c2:	e7f7      	b.n	800b1b4 <RegionLinkAdrReq+0x16>
        US915_LINK_ADR_REQ( );
 800b1c4:	9b05      	ldr	r3, [sp, #20]
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	9b04      	ldr	r3, [sp, #16]
 800b1ca:	f001 febb 	bl	800cf44 <RegionUS915LinkAdrReq>
 800b1ce:	e7f1      	b.n	800b1b4 <RegionLinkAdrReq+0x16>

0800b1d0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800b1d0:	b508      	push	{r3, lr}
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4608      	mov	r0, r1
    switch( region )
 800b1d6:	2b05      	cmp	r3, #5
 800b1d8:	d003      	beq.n	800b1e2 <RegionRxParamSetupReq+0x12>
 800b1da:	2b08      	cmp	r3, #8
 800b1dc:	d004      	beq.n	800b1e8 <RegionRxParamSetupReq+0x18>
 800b1de:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b1e0:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800b1e2:	f001 f903 	bl	800c3ec <RegionEU868RxParamSetupReq>
 800b1e6:	e7fb      	b.n	800b1e0 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800b1e8:	f001 ffea 	bl	800d1c0 <RegionUS915RxParamSetupReq>
 800b1ec:	e7f8      	b.n	800b1e0 <RegionRxParamSetupReq+0x10>

0800b1ee <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800b1ee:	b508      	push	{r3, lr}
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	4608      	mov	r0, r1
    switch( region )
 800b1f4:	2b05      	cmp	r3, #5
 800b1f6:	d003      	beq.n	800b200 <RegionNewChannelReq+0x12>
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d004      	beq.n	800b206 <RegionNewChannelReq+0x18>
 800b1fc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b1fe:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800b200:	f001 fa82 	bl	800c708 <RegionEU868NewChannelReq>
 800b204:	e7fb      	b.n	800b1fe <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800b206:	f002 f806 	bl	800d216 <RegionUS915NewChannelReq>
 800b20a:	e7f8      	b.n	800b1fe <RegionNewChannelReq+0x10>

0800b20c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800b20c:	b508      	push	{r3, lr}
 800b20e:	4603      	mov	r3, r0
 800b210:	4608      	mov	r0, r1
    switch( region )
 800b212:	2b05      	cmp	r3, #5
 800b214:	d003      	beq.n	800b21e <RegionTxParamSetupReq+0x12>
 800b216:	2b08      	cmp	r3, #8
 800b218:	d004      	beq.n	800b224 <RegionTxParamSetupReq+0x18>
 800b21a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b21c:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800b21e:	f001 f909 	bl	800c434 <RegionEU868TxParamSetupReq>
 800b222:	e7fb      	b.n	800b21c <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800b224:	f001 fffa 	bl	800d21c <RegionUS915TxParamSetupReq>
 800b228:	e7f8      	b.n	800b21c <RegionTxParamSetupReq+0x10>

0800b22a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800b22a:	b508      	push	{r3, lr}
 800b22c:	4603      	mov	r3, r0
 800b22e:	4608      	mov	r0, r1
    switch( region )
 800b230:	2b05      	cmp	r3, #5
 800b232:	d003      	beq.n	800b23c <RegionDlChannelReq+0x12>
 800b234:	2b08      	cmp	r3, #8
 800b236:	d004      	beq.n	800b242 <RegionDlChannelReq+0x18>
 800b238:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b23a:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800b23c:	f001 f8fe 	bl	800c43c <RegionEU868DlChannelReq>
 800b240:	e7fb      	b.n	800b23a <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800b242:	f001 ffee 	bl	800d222 <RegionUS915DlChannelReq>
 800b246:	e7f8      	b.n	800b23a <RegionDlChannelReq+0x10>

0800b248 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b248:	b508      	push	{r3, lr}
 800b24a:	4603      	mov	r3, r0
 800b24c:	4608      	mov	r0, r1
 800b24e:	4611      	mov	r1, r2
    switch( region )
 800b250:	2b05      	cmp	r3, #5
 800b252:	d003      	beq.n	800b25c <RegionAlternateDr+0x14>
 800b254:	2b08      	cmp	r3, #8
 800b256:	d004      	beq.n	800b262 <RegionAlternateDr+0x1a>
 800b258:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b25a:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800b25c:	f001 f916 	bl	800c48c <RegionEU868AlternateDr>
 800b260:	e7fb      	b.n	800b25a <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800b262:	f001 ffe1 	bl	800d228 <RegionUS915AlternateDr>
 800b266:	e7f8      	b.n	800b25a <RegionAlternateDr+0x12>

0800b268 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b268:	b510      	push	{r4, lr}
 800b26a:	4604      	mov	r4, r0
 800b26c:	4608      	mov	r0, r1
 800b26e:	4611      	mov	r1, r2
 800b270:	461a      	mov	r2, r3
    switch( region )
 800b272:	2c05      	cmp	r4, #5
 800b274:	d003      	beq.n	800b27e <RegionNextChannel+0x16>
 800b276:	2c08      	cmp	r4, #8
 800b278:	d005      	beq.n	800b286 <RegionNextChannel+0x1e>
 800b27a:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800b27c:	bd10      	pop	{r4, pc}
        EU868_NEXT_CHANNEL( );
 800b27e:	9b02      	ldr	r3, [sp, #8]
 800b280:	f001 f906 	bl	800c490 <RegionEU868NextChannel>
 800b284:	e7fa      	b.n	800b27c <RegionNextChannel+0x14>
        US915_NEXT_CHANNEL( );
 800b286:	9b02      	ldr	r3, [sp, #8]
 800b288:	f001 fff4 	bl	800d274 <RegionUS915NextChannel>
 800b28c:	e7f6      	b.n	800b27c <RegionNextChannel+0x14>

0800b28e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b28e:	b508      	push	{r3, lr}
 800b290:	4603      	mov	r3, r0
 800b292:	4608      	mov	r0, r1
    switch( region )
 800b294:	2b05      	cmp	r3, #5
 800b296:	d002      	beq.n	800b29e <RegionSetContinuousWave+0x10>
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d003      	beq.n	800b2a4 <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800b29c:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800b29e:	f001 fa5f 	bl	800c760 <RegionEU868SetContinuousWave>
 800b2a2:	e7fb      	b.n	800b29c <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800b2a4:	f002 f896 	bl	800d3d4 <RegionUS915SetContinuousWave>
}
 800b2a8:	e7f8      	b.n	800b29c <RegionSetContinuousWave+0xe>

0800b2aa <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	4608      	mov	r0, r1
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	461a      	mov	r2, r3
    switch( region )
 800b2b4:	2c05      	cmp	r4, #5
 800b2b6:	d003      	beq.n	800b2c0 <RegionApplyDrOffset+0x16>
 800b2b8:	2c08      	cmp	r4, #8
 800b2ba:	d004      	beq.n	800b2c6 <RegionApplyDrOffset+0x1c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800b2bc:	b2c8      	uxtb	r0, r1
 800b2be:	e001      	b.n	800b2c4 <RegionApplyDrOffset+0x1a>
        EU868_APPLY_DR_OFFSET( );
 800b2c0:	f001 fa7c 	bl	800c7bc <RegionEU868ApplyDrOffset>
        }
    }
}
 800b2c4:	bd10      	pop	{r4, pc}
        US915_APPLY_DR_OFFSET( );
 800b2c6:	f002 f8b9 	bl	800d43c <RegionUS915ApplyDrOffset>
 800b2ca:	e7fb      	b.n	800b2c4 <RegionApplyDrOffset+0x1a>

0800b2cc <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800b2cc:	4800      	ldr	r0, [pc, #0]	; (800b2d0 <RegionGetVersion+0x4>)
 800b2ce:	4770      	bx	lr
 800b2d0:	01000300 	.word	0x01000300

0800b2d4 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800b2d4:	b1b9      	cbz	r1, 800b306 <FindAvailable125kHzChannels+0x32>
{
 800b2d6:	b410      	push	{r4}
 800b2d8:	460c      	mov	r4, r1
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800b2da:	b1b2      	cbz	r2, 800b30a <FindAvailable125kHzChannels+0x36>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800b2e0:	e001      	b.n	800b2e6 <FindAvailable125kHzChannels+0x12>
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b07      	cmp	r3, #7
 800b2e8:	d80a      	bhi.n	800b300 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800b2ea:	fa40 f103 	asr.w	r1, r0, r3
 800b2ee:	f011 0f01 	tst.w	r1, #1
 800b2f2:	d0f6      	beq.n	800b2e2 <FindAvailable125kHzChannels+0xe>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800b2f4:	7811      	ldrb	r1, [r2, #0]
 800b2f6:	5463      	strb	r3, [r4, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800b2f8:	7811      	ldrb	r1, [r2, #0]
 800b2fa:	3101      	adds	r1, #1
 800b2fc:	7011      	strb	r1, [r2, #0]
 800b2fe:	e7f0      	b.n	800b2e2 <FindAvailable125kHzChannels+0xe>
        }
    }

    return LORAMAC_STATUS_OK;
 800b300:	2000      	movs	r0, #0
}
 800b302:	bc10      	pop	{r4}
 800b304:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b306:	2003      	movs	r0, #3
}
 800b308:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b30a:	2003      	movs	r0, #3
 800b30c:	e7f9      	b.n	800b302 <FindAvailable125kHzChannels+0x2e>

0800b30e <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800b30e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b310:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800b312:	2300      	movs	r3, #0
 800b314:	9302      	str	r3, [sp, #8]
 800b316:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800b318:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d03c      	beq.n	800b39a <RegionBaseUSComputeNext125kHzJoinChannel+0x8c>
 800b320:	460d      	mov	r5, r1
 800b322:	4617      	mov	r7, r2
 800b324:	4606      	mov	r6, r0
 800b326:	2900      	cmp	r1, #0
 800b328:	d039      	beq.n	800b39e <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800b32a:	2a00      	cmp	r2, #0
 800b32c:	d039      	beq.n	800b3a2 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800b32e:	780c      	ldrb	r4, [r1, #0]
 800b330:	e015      	b.n	800b35e <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800b332:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800b336:	0a00      	lsrs	r0, r0, #8
 800b338:	e017      	b.n	800b36a <RegionBaseUSComputeNext125kHzJoinChannel+0x5c>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800b33a:	3901      	subs	r1, #1
 800b33c:	2000      	movs	r0, #0
 800b33e:	f002 ff55 	bl	800e1ec <randr>
 800b342:	ab04      	add	r3, sp, #16
 800b344:	4418      	add	r0, r3
 800b346:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800b34a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b34e:	703b      	strb	r3, [r7, #0]
 800b350:	e016      	b.n	800b380 <RegionBaseUSComputeNext125kHzJoinChannel+0x72>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800b352:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b356:	b9cb      	cbnz	r3, 800b38c <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
 800b358:	782a      	ldrb	r2, [r5, #0]
 800b35a:	42a2      	cmp	r2, r4
 800b35c:	d016      	beq.n	800b38c <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800b35e:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800b360:	f014 0f01 	tst.w	r4, #1
 800b364:	d1e5      	bne.n	800b332 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800b366:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800b36a:	f10d 0207 	add.w	r2, sp, #7
 800b36e:	a902      	add	r1, sp, #8
 800b370:	f7ff ffb0 	bl	800b2d4 <FindAvailable125kHzChannels>
 800b374:	2803      	cmp	r0, #3
 800b376:	d00b      	beq.n	800b390 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        if ( availableChannels > 0 )
 800b378:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b37c:	2900      	cmp	r1, #0
 800b37e:	d1dc      	bne.n	800b33a <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800b380:	3401      	adds	r4, #1
 800b382:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800b384:	2c07      	cmp	r4, #7
 800b386:	d9e4      	bls.n	800b352 <RegionBaseUSComputeNext125kHzJoinChannel+0x44>
            startIndex = 0;
 800b388:	2400      	movs	r4, #0
 800b38a:	e7e2      	b.n	800b352 <RegionBaseUSComputeNext125kHzJoinChannel+0x44>

    if ( availableChannels > 0 )
 800b38c:	b913      	cbnz	r3, 800b394 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800b38e:	2003      	movs	r0, #3
}
 800b390:	b005      	add	sp, #20
 800b392:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800b394:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800b396:	2000      	movs	r0, #0
 800b398:	e7fa      	b.n	800b390 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b39a:	2003      	movs	r0, #3
 800b39c:	e7f8      	b.n	800b390 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800b39e:	2003      	movs	r0, #3
 800b3a0:	e7f6      	b.n	800b390 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800b3a2:	2003      	movs	r0, #3
 800b3a4:	e7f4      	b.n	800b390 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>

0800b3a6 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800b3a6:	fb02 1000 	mla	r0, r2, r0, r1
 800b3aa:	4770      	bx	lr

0800b3ac <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	f10d 0c08 	add.w	ip, sp, #8
 800b3b2:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800b3b6:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800b3b8:	b971      	cbnz	r1, 800b3d8 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b3ba:	9b00      	ldr	r3, [sp, #0]
 800b3bc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800b3c0:	d306      	bcc.n	800b3d0 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b3c2:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d80a      	bhi.n	800b3e0 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800b3ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3ce:	e000      	b.n	800b3d2 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b3d0:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b3d2:	4298      	cmp	r0, r3
 800b3d4:	bf38      	it	cc
 800b3d6:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800b3d8:	b900      	cbnz	r0, 800b3dc <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800b3da:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800b3dc:	b002      	add	sp, #8
 800b3de:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b3e0:	f242 7310 	movw	r3, #10000	; 0x2710
 800b3e4:	e7f5      	b.n	800b3d2 <GetDutyCycle+0x26>

0800b3e6 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800b3e6:	b410      	push	{r4}
 800b3e8:	4604      	mov	r4, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800b3ea:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800b3ec:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800b3ee:	e001      	b.n	800b3f4 <CountChannels+0xe>
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	428b      	cmp	r3, r1
 800b3f6:	d206      	bcs.n	800b406 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	409a      	lsls	r2, r3
 800b3fc:	43a2      	bics	r2, r4
 800b3fe:	d1f7      	bne.n	800b3f0 <CountChannels+0xa>
        {
            nbActiveBits++;
 800b400:	3001      	adds	r0, #1
 800b402:	b2c0      	uxtb	r0, r0
 800b404:	e7f4      	b.n	800b3f0 <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 800b406:	bc10      	pop	{r4}
 800b408:	4770      	bx	lr
	...

0800b40c <SetMaxTimeCredits>:
{
 800b40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b410:	b089      	sub	sp, #36	; 0x24
 800b412:	4604      	mov	r4, r0
 800b414:	460e      	mov	r6, r1
 800b416:	ad02      	add	r5, sp, #8
 800b418:	e885 000c 	stmia.w	r5, {r2, r3}
 800b41c:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 800b420:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800b424:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b428:	f005 fafc 	bl	8010a24 <SysTimeToMs>
 800b42c:	4681      	mov	r9, r0
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b42e:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b432:	4631      	mov	r1, r6
 800b434:	4620      	mov	r0, r4
 800b436:	f7ff ffb9 	bl	800b3ac <GetDutyCycle>
 800b43a:	4605      	mov	r5, r0
    if( joined == false )
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	d149      	bne.n	800b4d4 <SetMaxTimeCredits+0xc8>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b440:	2864      	cmp	r0, #100	; 0x64
 800b442:	d023      	beq.n	800b48c <SetMaxTimeCredits+0x80>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b444:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b448:	d024      	beq.n	800b494 <SetMaxTimeCredits+0x88>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b44a:	4e25      	ldr	r6, [pc, #148]	; (800b4e0 <SetMaxTimeCredits+0xd4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b44c:	68a1      	ldr	r1, [r4, #8]
 800b44e:	a806      	add	r0, sp, #24
 800b450:	f005 fb08 	bl	8010a64 <SysTimeFromMs>
 800b454:	9b07      	ldr	r3, [sp, #28]
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	9b06      	ldr	r3, [sp, #24]
 800b45a:	9a03      	ldr	r2, [sp, #12]
 800b45c:	9902      	ldr	r1, [sp, #8]
 800b45e:	a804      	add	r0, sp, #16
 800b460:	f005 fa6b 	bl	801093a <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b464:	b917      	cbnz	r7, 800b46c <SetMaxTimeCredits+0x60>
 800b466:	f1b8 0f00 	cmp.w	r8, #0
 800b46a:	d002      	beq.n	800b472 <SetMaxTimeCredits+0x66>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b46c:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b46e:	42b3      	cmp	r3, r6
 800b470:	d014      	beq.n	800b49c <SetMaxTimeCredits+0x90>
            band->TimeCredits = maxCredits;
 800b472:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b474:	9b02      	ldr	r3, [sp, #8]
 800b476:	4a1b      	ldr	r2, [pc, #108]	; (800b4e4 <SetMaxTimeCredits+0xd8>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d814      	bhi.n	800b4a6 <SetMaxTimeCredits+0x9a>
    if( band->LastBandUpdateTime == 0 )
 800b47c:	6863      	ldr	r3, [r4, #4]
 800b47e:	b903      	cbnz	r3, 800b482 <SetMaxTimeCredits+0x76>
        band->TimeCredits = maxCredits;
 800b480:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800b482:	6126      	str	r6, [r4, #16]
}
 800b484:	4628      	mov	r0, r5
 800b486:	b009      	add	sp, #36	; 0x24
 800b488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800b48c:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b490:	4e15      	ldr	r6, [pc, #84]	; (800b4e8 <SetMaxTimeCredits+0xdc>)
 800b492:	e7db      	b.n	800b44c <SetMaxTimeCredits+0x40>
            band->LastMaxCreditAssignTime = elapsedTime;
 800b494:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b498:	4e14      	ldr	r6, [pc, #80]	; (800b4ec <SetMaxTimeCredits+0xe0>)
 800b49a:	e7d7      	b.n	800b44c <SetMaxTimeCredits+0x40>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b49c:	9a04      	ldr	r2, [sp, #16]
 800b49e:	4b14      	ldr	r3, [pc, #80]	; (800b4f0 <SetMaxTimeCredits+0xe4>)
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d9eb      	bls.n	800b47c <SetMaxTimeCredits+0x70>
 800b4a4:	e7e5      	b.n	800b472 <SetMaxTimeCredits+0x66>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b4a6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800b4aa:	3b30      	subs	r3, #48	; 0x30
 800b4ac:	4a11      	ldr	r2, [pc, #68]	; (800b4f4 <SetMaxTimeCredits+0xe8>)
 800b4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b2:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800b4b4:	4a10      	ldr	r2, [pc, #64]	; (800b4f8 <SetMaxTimeCredits+0xec>)
 800b4b6:	fb02 f303 	mul.w	r3, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b4ba:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800b4be:	3330      	adds	r3, #48	; 0x30
 800b4c0:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800b4c8:	9905      	ldr	r1, [sp, #20]
 800b4ca:	9804      	ldr	r0, [sp, #16]
 800b4cc:	f005 faaa 	bl	8010a24 <SysTimeToMs>
 800b4d0:	60a0      	str	r0, [r4, #8]
 800b4d2:	e7d3      	b.n	800b47c <SetMaxTimeCredits+0x70>
        if( dutyCycleEnabled == false )
 800b4d4:	b917      	cbnz	r7, 800b4dc <SetMaxTimeCredits+0xd0>
            band->TimeCredits = maxCredits;
 800b4d6:	4e04      	ldr	r6, [pc, #16]	; (800b4e8 <SetMaxTimeCredits+0xdc>)
 800b4d8:	60e6      	str	r6, [r4, #12]
 800b4da:	e7cf      	b.n	800b47c <SetMaxTimeCredits+0x70>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b4dc:	4e02      	ldr	r6, [pc, #8]	; (800b4e8 <SetMaxTimeCredits+0xdc>)
 800b4de:	e7cd      	b.n	800b47c <SetMaxTimeCredits+0x70>
 800b4e0:	02932e00 	.word	0x02932e00
 800b4e4:	0001ec2f 	.word	0x0001ec2f
 800b4e8:	001b7740 	.word	0x001b7740
 800b4ec:	0112a880 	.word	0x0112a880
 800b4f0:	0001517f 	.word	0x0001517f
 800b4f4:	c22e4507 	.word	0xc22e4507
 800b4f8:	00015180 	.word	0x00015180

0800b4fc <UpdateTimeCredits>:
{
 800b4fc:	b570      	push	{r4, r5, r6, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	4604      	mov	r4, r0
 800b502:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	9200      	str	r2, [sp, #0]
 800b508:	ab06      	add	r3, sp, #24
 800b50a:	cb0c      	ldmia	r3, {r2, r3}
 800b50c:	f7ff ff7e 	bl	800b40c <SetMaxTimeCredits>
 800b510:	4605      	mov	r5, r0
    if( joined == true )
 800b512:	b94e      	cbnz	r6, 800b528 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800b514:	68e2      	ldr	r2, [r4, #12]
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d900      	bls.n	800b51e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800b51c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800b51e:	9b08      	ldr	r3, [sp, #32]
 800b520:	6063      	str	r3, [r4, #4]
}
 800b522:	4628      	mov	r0, r5
 800b524:	b002      	add	sp, #8
 800b526:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b528:	6860      	ldr	r0, [r4, #4]
 800b52a:	f005 faf9 	bl	8010b20 <UTIL_TIMER_GetElapsedTime>
 800b52e:	68e3      	ldr	r3, [r4, #12]
 800b530:	4403      	add	r3, r0
 800b532:	60e3      	str	r3, [r4, #12]
 800b534:	e7ee      	b.n	800b514 <UpdateTimeCredits+0x18>

0800b536 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800b536:	4288      	cmp	r0, r1
 800b538:	db03      	blt.n	800b542 <RegionCommonValueInRange+0xc>
 800b53a:	4290      	cmp	r0, r2
 800b53c:	dd03      	ble.n	800b546 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800b53e:	2000      	movs	r0, #0
 800b540:	4770      	bx	lr
 800b542:	2000      	movs	r0, #0
 800b544:	4770      	bx	lr
        return 1;
 800b546:	2001      	movs	r0, #1
}
 800b548:	4770      	bx	lr

0800b54a <RegionCommonChanVerifyDr>:
{
 800b54a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b54e:	4682      	mov	sl, r0
 800b550:	460e      	mov	r6, r1
 800b552:	4690      	mov	r8, r2
 800b554:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800b558:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800b55c:	4619      	mov	r1, r3
 800b55e:	4640      	mov	r0, r8
 800b560:	f7ff ffe9 	bl	800b536 <RegionCommonValueInRange>
 800b564:	b338      	cbz	r0, 800b5b6 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b566:	2500      	movs	r5, #0
 800b568:	462f      	mov	r7, r5
 800b56a:	e01e      	b.n	800b5aa <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800b56c:	3401      	adds	r4, #1
 800b56e:	b2e4      	uxtb	r4, r4
 800b570:	2c0f      	cmp	r4, #15
 800b572:	d816      	bhi.n	800b5a2 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b574:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800b578:	4123      	asrs	r3, r4
 800b57a:	f013 0f01 	tst.w	r3, #1
 800b57e:	d0f5      	beq.n	800b56c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b580:	193b      	adds	r3, r7, r4
 800b582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b586:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b58a:	7a19      	ldrb	r1, [r3, #8]
 800b58c:	090a      	lsrs	r2, r1, #4
 800b58e:	f001 010f 	and.w	r1, r1, #15
 800b592:	4640      	mov	r0, r8
 800b594:	f7ff ffcf 	bl	800b536 <RegionCommonValueInRange>
 800b598:	2801      	cmp	r0, #1
 800b59a:	d1e7      	bne.n	800b56c <RegionCommonChanVerifyDr+0x22>
                    return true;
 800b59c:	2001      	movs	r0, #1
}
 800b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	b2ff      	uxtb	r7, r7
 800b5a6:	3501      	adds	r5, #1
 800b5a8:	b2ed      	uxtb	r5, r5
 800b5aa:	4557      	cmp	r7, sl
 800b5ac:	d201      	bcs.n	800b5b2 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800b5ae:	2400      	movs	r4, #0
 800b5b0:	e7de      	b.n	800b570 <RegionCommonChanVerifyDr+0x26>
    return false;
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e7f3      	b.n	800b59e <RegionCommonChanVerifyDr+0x54>
        return false;
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	e7f1      	b.n	800b59e <RegionCommonChanVerifyDr+0x54>

0800b5ba <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b5ba:	0913      	lsrs	r3, r2, #4
 800b5bc:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800b5c0:	d311      	bcc.n	800b5e6 <RegionCommonChanDisable+0x2c>
{
 800b5c2:	b410      	push	{r4}
 800b5c4:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b5c6:	4291      	cmp	r1, r2
 800b5c8:	d20f      	bcs.n	800b5ea <RegionCommonChanDisable+0x30>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800b5ca:	f001 010f 	and.w	r1, r1, #15
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	fa03 f101 	lsl.w	r1, r3, r1
 800b5d4:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 800b5d8:	ea22 0101 	bic.w	r1, r2, r1
 800b5dc:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]

    return true;
 800b5e0:	4618      	mov	r0, r3
}
 800b5e2:	bc10      	pop	{r4}
 800b5e4:	4770      	bx	lr
        return false;
 800b5e6:	2000      	movs	r0, #0
}
 800b5e8:	4770      	bx	lr
        return false;
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	e7f9      	b.n	800b5e2 <RegionCommonChanDisable+0x28>

0800b5ee <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800b5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800b5f0:	b188      	cbz	r0, 800b616 <RegionCommonCountChannels+0x28>
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800b5f8:	2500      	movs	r5, #0
 800b5fa:	e008      	b.n	800b60e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b5fc:	2110      	movs	r1, #16
 800b5fe:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b602:	f7ff fef0 	bl	800b3e6 <CountChannels>
 800b606:	4405      	add	r5, r0
 800b608:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b60a:	3401      	adds	r4, #1
 800b60c:	b2e4      	uxtb	r4, r4
 800b60e:	42b4      	cmp	r4, r6
 800b610:	d3f4      	bcc.n	800b5fc <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800b612:	4628      	mov	r0, r5
 800b614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800b616:	2500      	movs	r5, #0
 800b618:	e7fb      	b.n	800b612 <RegionCommonCountChannels+0x24>

0800b61a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b61a:	b170      	cbz	r0, 800b63a <RegionCommonChanMaskCopy+0x20>
{
 800b61c:	b410      	push	{r4}
 800b61e:	4604      	mov	r4, r0
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b620:	b149      	cbz	r1, 800b636 <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 800b622:	2300      	movs	r3, #0
 800b624:	4293      	cmp	r3, r2
 800b626:	d206      	bcs.n	800b636 <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800b628:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b62c:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800b630:	3301      	adds	r3, #1
 800b632:	b2db      	uxtb	r3, r3
 800b634:	e7f6      	b.n	800b624 <RegionCommonChanMaskCopy+0xa>
        }
    }
}
 800b636:	bc10      	pop	{r4}
 800b638:	4770      	bx	lr
 800b63a:	4770      	bx	lr

0800b63c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b63c:	b082      	sub	sp, #8
 800b63e:	b538      	push	{r3, r4, r5, lr}
 800b640:	4605      	mov	r5, r0
 800b642:	460c      	mov	r4, r1
 800b644:	4611      	mov	r1, r2
 800b646:	aa04      	add	r2, sp, #16
 800b648:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b64c:	ca0c      	ldmia	r2, {r2, r3}
 800b64e:	f7ff fead 	bl	800b3ac <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b652:	68eb      	ldr	r3, [r5, #12]
 800b654:	fb04 f100 	mul.w	r1, r4, r0
 800b658:	428b      	cmp	r3, r1
 800b65a:	d905      	bls.n	800b668 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800b65c:	1a59      	subs	r1, r3, r1
 800b65e:	60e9      	str	r1, [r5, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800b660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b664:	b002      	add	sp, #8
 800b666:	4770      	bx	lr
        band->TimeCredits = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	60eb      	str	r3, [r5, #12]
}
 800b66c:	e7f8      	b.n	800b660 <RegionCommonSetBandTxDone+0x24>
	...

0800b670 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	b089      	sub	sp, #36	; 0x24
 800b676:	4607      	mov	r7, r0
 800b678:	468b      	mov	fp, r1
 800b67a:	4691      	mov	r9, r2
 800b67c:	4698      	mov	r8, r3
 800b67e:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b682:	f005 fa43 	bl	8010b0c <UTIL_TIMER_GetCurrentTime>
 800b686:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800b688:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800b68a:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b68c:	f04f 33ff 	mov.w	r3, #4294967295
 800b690:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b692:	e005      	b.n	800b6a0 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800b694:	2301      	movs	r3, #1
 800b696:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800b698:	441e      	add	r6, r3
 800b69a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800b69c:	3401      	adds	r4, #1
 800b69e:	b2e4      	uxtb	r4, r4
 800b6a0:	454c      	cmp	r4, r9
 800b6a2:	d25b      	bcs.n	800b75c <RegionCommonUpdateBandTimeOff+0xec>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b6a4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b6a8:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800b6ac:	9b04      	ldr	r3, [sp, #16]
 800b6ae:	9302      	str	r3, [sp, #8]
 800b6b0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b6b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b6b4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b6b8:	4653      	mov	r3, sl
 800b6ba:	4642      	mov	r2, r8
 800b6bc:	4639      	mov	r1, r7
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f7ff ff1c 	bl	800b4fc <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b6c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6c6:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b6ca:	68ea      	ldr	r2, [r5, #12]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d8e1      	bhi.n	800b694 <RegionCommonUpdateBandTimeOff+0x24>
 800b6d0:	f1b8 0f00 	cmp.w	r8, #0
 800b6d4:	d101      	bne.n	800b6da <RegionCommonUpdateBandTimeOff+0x6a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b6d6:	2f00      	cmp	r7, #0
 800b6d8:	d1dc      	bne.n	800b694 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800b6da:	2100      	movs	r1, #0
 800b6dc:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800b6de:	6929      	ldr	r1, [r5, #16]
 800b6e0:	4299      	cmp	r1, r3
 800b6e2:	d907      	bls.n	800b6f4 <RegionCommonUpdateBandTimeOff+0x84>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b6e4:	1a9b      	subs	r3, r3, r2
 800b6e6:	9a05      	ldr	r2, [sp, #20]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	bf28      	it	cs
 800b6ec:	461a      	movcs	r2, r3
 800b6ee:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	d1d1      	bne.n	800b69c <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b6fe:	2864      	cmp	r0, #100	; 0x64
 800b700:	d024      	beq.n	800b74c <RegionCommonUpdateBandTimeOff+0xdc>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b702:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b706:	d025      	beq.n	800b754 <RegionCommonUpdateBandTimeOff+0xe4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b708:	4b19      	ldr	r3, [pc, #100]	; (800b770 <RegionCommonUpdateBandTimeOff+0x100>)
 800b70a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b70c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b70e:	4a18      	ldr	r2, [pc, #96]	; (800b770 <RegionCommonUpdateBandTimeOff+0x100>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d90c      	bls.n	800b72e <RegionCommonUpdateBandTimeOff+0xbe>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b714:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800b718:	3b30      	subs	r3, #48	; 0x30
 800b71a:	4a16      	ldr	r2, [pc, #88]	; (800b774 <RegionCommonUpdateBandTimeOff+0x104>)
 800b71c:	fba2 2303 	umull	r2, r3, r2, r3
 800b720:	0c1b      	lsrs	r3, r3, #16
 800b722:	4a15      	ldr	r2, [pc, #84]	; (800b778 <RegionCommonUpdateBandTimeOff+0x108>)
 800b724:	fb03 2202 	mla	r2, r3, r2, r2
 800b728:	9b06      	ldr	r3, [sp, #24]
 800b72a:	441a      	add	r2, r3
 800b72c:	9206      	str	r2, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b72e:	ad06      	add	r5, sp, #24
 800b730:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b736:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b73a:	4628      	mov	r0, r5
 800b73c:	f005 f8fd 	bl	801093a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b740:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b744:	f005 f96e 	bl	8010a24 <SysTimeToMs>
 800b748:	9005      	str	r0, [sp, #20]
 800b74a:	e7a7      	b.n	800b69c <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b74c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b750:	9306      	str	r3, [sp, #24]
 800b752:	e7db      	b.n	800b70c <RegionCommonUpdateBandTimeOff+0x9c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800b754:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800b758:	9306      	str	r3, [sp, #24]
 800b75a:	e7d7      	b.n	800b70c <RegionCommonUpdateBandTimeOff+0x9c>
            }
        }
    }


    if( validBands == 0 )
 800b75c:	b11e      	cbz	r6, 800b766 <RegionCommonUpdateBandTimeOff+0xf6>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800b75e:	9805      	ldr	r0, [sp, #20]
 800b760:	b009      	add	sp, #36	; 0x24
 800b762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800b766:	f04f 33ff 	mov.w	r3, #4294967295
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	e7f7      	b.n	800b75e <RegionCommonUpdateBandTimeOff+0xee>
 800b76e:	bf00      	nop
 800b770:	0001ec30 	.word	0x0001ec30
 800b774:	c22e4507 	.word	0xc22e4507
 800b778:	00015180 	.word	0x00015180

0800b77c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b77c:	7803      	ldrb	r3, [r0, #0]
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d001      	beq.n	800b786 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800b782:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800b784:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800b786:	7843      	ldrb	r3, [r0, #1]
 800b788:	f990 2001 	ldrsb.w	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b78c:	f002 020f 	and.w	r2, r2, #15
 800b790:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b792:	091b      	lsrs	r3, r3, #4
 800b794:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800b796:	7883      	ldrb	r3, [r0, #2]
 800b798:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800b79a:	78c2      	ldrb	r2, [r0, #3]
 800b79c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b7a0:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800b7a2:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b7a4:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800b7a8:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800b7aa:	f003 030f 	and.w	r3, r3, #15
 800b7ae:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800b7b0:	2005      	movs	r0, #5
 800b7b2:	4770      	bx	lr

0800b7b4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4688      	mov	r8, r1
 800b7be:	4617      	mov	r7, r2
 800b7c0:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800b7c2:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800b7c4:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800b7c8:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800b7cc:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800b7d0:	7943      	ldrb	r3, [r0, #5]
 800b7d2:	b92b      	cbnz	r3, 800b7e0 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800b7d4:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800b7d8:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800b7dc:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800b7e0:	b95d      	cbnz	r5, 800b7fa <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800b7e2:	2d07      	cmp	r5, #7
 800b7e4:	d02c      	beq.n	800b840 <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800b7e6:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800b7ea:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800b7ee:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	b005      	add	sp, #20
 800b7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800b7fa:	69a3      	ldr	r3, [r4, #24]
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800b808:	465a      	mov	r2, fp
 800b80a:	6921      	ldr	r1, [r4, #16]
 800b80c:	7b20      	ldrb	r0, [r4, #12]
 800b80e:	f7ff fe9c 	bl	800b54a <RegionCommonChanVerifyDr>
 800b812:	b908      	cbnz	r0, 800b818 <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 800b814:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800b818:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800b81c:	9303      	str	r3, [sp, #12]
 800b81e:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800b822:	461c      	mov	r4, r3
 800b824:	4619      	mov	r1, r3
 800b826:	4648      	mov	r0, r9
 800b828:	f7ff fe85 	bl	800b536 <RegionCommonValueInRange>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d1d8      	bne.n	800b7e2 <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 800b830:	454c      	cmp	r4, r9
 800b832:	dc02      	bgt.n	800b83a <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 800b834:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800b838:	e7d3      	b.n	800b7e2 <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 800b83a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b83e:	e7d0      	b.n	800b7e2 <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 800b840:	f1ba 0f00 	cmp.w	sl, #0
 800b844:	d1cf      	bne.n	800b7e6 <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 800b846:	f04f 0a01 	mov.w	sl, #1
 800b84a:	e7cc      	b.n	800b7e6 <RegionCommonLinkAdrReqVerifyParams+0x32>

0800b84c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b84c:	4b02      	ldr	r3, [pc, #8]	; (800b858 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800b84e:	fa03 f000 	lsl.w	r0, r3, r0
}
 800b852:	fbb0 f0f1 	udiv	r0, r0, r1
 800b856:	4770      	bx	lr
 800b858:	000f4240 	.word	0x000f4240

0800b85c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800b85c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800b860:	fbb3 f0f0 	udiv	r0, r3, r0
 800b864:	4770      	bx	lr
	...

0800b868 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800b868:	b430      	push	{r4, r5}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b86a:	1f0c      	subs	r4, r1, #4
 800b86c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b870:	fb05 f202 	mul.w	r2, r5, r2
 800b874:	fb00 2204 	mla	r2, r0, r4, r2
 800b878:	0052      	lsls	r2, r2, #1
 800b87a:	d021      	beq.n	800b8c0 <RegionCommonComputeRxWindowParameters+0x58>
 800b87c:	4402      	add	r2, r0
 800b87e:	3a01      	subs	r2, #1
 800b880:	fbb2 f2f0 	udiv	r2, r2, r0
 800b884:	428a      	cmp	r2, r1
 800b886:	bf38      	it	cc
 800b888:	460a      	movcc	r2, r1
 800b88a:	9902      	ldr	r1, [sp, #8]
 800b88c:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b88e:	0081      	lsls	r1, r0, #2
 800b890:	fb00 f002 	mul.w	r0, r0, r2
 800b894:	b1b8      	cbz	r0, 800b8c6 <RegionCommonComputeRxWindowParameters+0x5e>
 800b896:	3001      	adds	r0, #1
 800b898:	0840      	lsrs	r0, r0, #1
 800b89a:	1a08      	subs	r0, r1, r0
 800b89c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8a0:	fb02 0313 	mls	r3, r2, r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dd10      	ble.n	800b8ca <RegionCommonComputeRxWindowParameters+0x62>
 800b8a8:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800b8ac:	480a      	ldr	r0, [pc, #40]	; (800b8d8 <RegionCommonComputeRxWindowParameters+0x70>)
 800b8ae:	fb80 2003 	smull	r2, r0, r0, r3
 800b8b2:	17db      	asrs	r3, r3, #31
 800b8b4:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800b8b8:	9a03      	ldr	r2, [sp, #12]
 800b8ba:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b8bc:	bc30      	pop	{r4, r5}
 800b8be:	4770      	bx	lr
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b8c0:	fbb2 f2f0 	udiv	r2, r2, r0
 800b8c4:	e7de      	b.n	800b884 <RegionCommonComputeRxWindowParameters+0x1c>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b8c6:	0840      	lsrs	r0, r0, #1
 800b8c8:	e7e7      	b.n	800b89a <RegionCommonComputeRxWindowParameters+0x32>
 800b8ca:	4803      	ldr	r0, [pc, #12]	; (800b8d8 <RegionCommonComputeRxWindowParameters+0x70>)
 800b8cc:	fb80 2003 	smull	r2, r0, r0, r3
 800b8d0:	17db      	asrs	r3, r3, #31
 800b8d2:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800b8d6:	e7ef      	b.n	800b8b8 <RegionCommonComputeRxWindowParameters+0x50>
 800b8d8:	10624dd3 	.word	0x10624dd3

0800b8dc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	460d      	mov	r5, r1
 800b8e0:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b8e2:	0040      	lsls	r0, r0, #1
 800b8e4:	f7f4 ff72 	bl	80007cc <__aeabi_ui2f>
 800b8e8:	4601      	mov	r1, r0
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f7f4 febc 	bl	8000668 <__aeabi_fsub>
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	f7f4 feb9 	bl	8000668 <__aeabi_fsub>
 800b8f6:	f7f4 fdab 	bl	8000450 <__aeabi_f2d>
 800b8fa:	f005 fbd9 	bl	80110b0 <floor>
 800b8fe:	f7f4 fe87 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800b902:	b240      	sxtb	r0, r0
 800b904:	bd38      	pop	{r3, r4, r5, pc}

0800b906 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	b083      	sub	sp, #12
 800b90c:	4605      	mov	r5, r0
 800b90e:	468b      	mov	fp, r1
 800b910:	9200      	str	r2, [sp, #0]
 800b912:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b914:	2600      	movs	r6, #0
 800b916:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800b918:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800b91a:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b91c:	e04a      	b.n	800b9b4 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800b91e:	7a3a      	ldrb	r2, [r7, #8]
 800b920:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800b924:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b928:	b252      	sxtb	r2, r2
 800b92a:	b249      	sxtb	r1, r1
 800b92c:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800b930:	f7ff fe01 	bl	800b536 <RegionCommonValueInRange>
 800b934:	b178      	cbz	r0, 800b956 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800b936:	68ea      	ldr	r2, [r5, #12]
 800b938:	7a7b      	ldrb	r3, [r7, #9]
 800b93a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b93e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b942:	7d1b      	ldrb	r3, [r3, #20]
 800b944:	b35b      	cbz	r3, 800b99e <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800b946:	f109 0301 	add.w	r3, r9, #1
 800b94a:	eb08 0204 	add.w	r2, r8, r4
 800b94e:	f80b 2009 	strb.w	r2, [fp, r9]
 800b952:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800b956:	3401      	adds	r4, #1
 800b958:	b2e4      	uxtb	r4, r4
 800b95a:	2c0f      	cmp	r4, #15
 800b95c:	d824      	bhi.n	800b9a8 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800b95e:	686b      	ldr	r3, [r5, #4]
 800b960:	0072      	lsls	r2, r6, #1
 800b962:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800b966:	4123      	asrs	r3, r4
 800b968:	f013 0f01 	tst.w	r3, #1
 800b96c:	d0f3      	beq.n	800b956 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800b96e:	68a8      	ldr	r0, [r5, #8]
 800b970:	eb08 0304 	add.w	r3, r8, r4
 800b974:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b978:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800b97c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0e8      	beq.n	800b956 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b984:	782b      	ldrb	r3, [r5, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1c9      	bne.n	800b91e <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800b98a:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0c6      	beq.n	800b91e <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800b990:	5a9b      	ldrh	r3, [r3, r2]
 800b992:	fa43 f104 	asr.w	r1, r3, r4
 800b996:	f011 0f01 	tst.w	r1, #1
 800b99a:	d1c0      	bne.n	800b91e <RegionCommonCountNbOfEnabledChannels+0x18>
 800b99c:	e7db      	b.n	800b956 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800b99e:	f10a 0a01 	add.w	sl, sl, #1
 800b9a2:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800b9a6:	e7d6      	b.n	800b956 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b9a8:	f108 0810 	add.w	r8, r8, #16
 800b9ac:	fa5f f888 	uxtb.w	r8, r8
 800b9b0:	3601      	adds	r6, #1
 800b9b2:	b2f6      	uxtb	r6, r6
 800b9b4:	fa1f f388 	uxth.w	r3, r8
 800b9b8:	8a2a      	ldrh	r2, [r5, #16]
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d201      	bcs.n	800b9c2 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800b9be:	2400      	movs	r4, #0
 800b9c0:	e7cb      	b.n	800b95a <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800b9c2:	9b00      	ldr	r3, [sp, #0]
 800b9c4:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	f883 a000 	strb.w	sl, [r3]
}
 800b9ce:	b003      	add	sp, #12
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9d4 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800b9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9d8:	b085      	sub	sp, #20
 800b9da:	4604      	mov	r4, r0
 800b9dc:	460f      	mov	r7, r1
 800b9de:	4616      	mov	r6, r2
 800b9e0:	461d      	mov	r5, r3
 800b9e2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b9e6:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b9ea:	6840      	ldr	r0, [r0, #4]
 800b9ec:	f005 f898 	bl	8010b20 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	1a1b      	subs	r3, r3, r0
 800b9f4:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ba02:	6863      	ldr	r3, [r4, #4]
 800ba04:	b113      	cbz	r3, 800ba0c <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800ba06:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ba08:	4283      	cmp	r3, r0
 800ba0a:	d81c      	bhi.n	800ba46 <RegionCommonIdentifyChannels+0x72>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800ba10:	69e3      	ldr	r3, [r4, #28]
 800ba12:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ba16:	781f      	ldrb	r7, [r3, #0]
 800ba18:	69a3      	ldr	r3, [r4, #24]
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	ab01      	add	r3, sp, #4
 800ba1e:	6921      	ldr	r1, [r4, #16]
 800ba20:	68e0      	ldr	r0, [r4, #12]
 800ba22:	e883 0003 	stmia.w	r3, {r0, r1}
 800ba26:	7d23      	ldrb	r3, [r4, #20]
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	7a23      	ldrb	r3, [r4, #8]
 800ba2c:	7a62      	ldrb	r2, [r4, #9]
 800ba2e:	4661      	mov	r1, ip
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7ff fe1d 	bl	800b670 <RegionCommonUpdateBandTimeOff>
 800ba36:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800ba3a:	4643      	mov	r3, r8
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4631      	mov	r1, r6
 800ba40:	69e0      	ldr	r0, [r4, #28]
 800ba42:	f7ff ff60 	bl	800b906 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800ba46:	782b      	ldrb	r3, [r5, #0]
 800ba48:	b923      	cbnz	r3, 800ba54 <RegionCommonIdentifyChannels+0x80>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800ba4a:	f898 3000 	ldrb.w	r3, [r8]
 800ba4e:	b13b      	cbz	r3, 800ba60 <RegionCommonIdentifyChannels+0x8c>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800ba50:	200b      	movs	r0, #11
 800ba52:	e002      	b.n	800ba5a <RegionCommonIdentifyChannels+0x86>
        *nextTxDelay = 0;
 800ba54:	2000      	movs	r0, #0
 800ba56:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800ba5a:	b005      	add	sp, #20
 800ba5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800ba60:	200c      	movs	r0, #12
 800ba62:	e7fa      	b.n	800ba5a <RegionCommonIdentifyChannels+0x86>

0800ba64 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800ba6a:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800ba6e:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800ba72:	42a6      	cmp	r6, r4
 800ba74:	d011      	beq.n	800ba9a <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800ba76:	3c01      	subs	r4, #1
 800ba78:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800ba7a:	42a6      	cmp	r6, r4
 800ba7c:	d00e      	beq.n	800ba9c <RegionCommonGetNextLowerTxDr+0x38>
 800ba7e:	68ab      	ldr	r3, [r5, #8]
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	4633      	mov	r3, r6
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	6869      	ldr	r1, [r5, #4]
 800ba8e:	78e8      	ldrb	r0, [r5, #3]
 800ba90:	f7ff fd5b 	bl	800b54a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d0ee      	beq.n	800ba76 <RegionCommonGetNextLowerTxDr+0x12>
 800ba98:	e000      	b.n	800ba9c <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800ba9a:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	b002      	add	sp, #8
 800baa0:	bd70      	pop	{r4, r5, r6, pc}

0800baa2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800baa2:	4288      	cmp	r0, r1
 800baa4:	bfb8      	it	lt
 800baa6:	4608      	movlt	r0, r1
 800baa8:	4770      	bx	lr
	...

0800baac <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800baac:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800bab0:	4a05      	ldr	r2, [pc, #20]	; (800bac8 <RegionCommonGetBandwidth+0x1c>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d004      	beq.n	800bac0 <RegionCommonGetBandwidth+0x14>
 800bab6:	4a05      	ldr	r2, [pc, #20]	; (800bacc <RegionCommonGetBandwidth+0x20>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d103      	bne.n	800bac4 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800babc:	2002      	movs	r0, #2
 800babe:	4770      	bx	lr
            return 1;
 800bac0:	2001      	movs	r0, #1
 800bac2:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800bac4:	2000      	movs	r0, #0
    }
}
 800bac6:	4770      	bx	lr
 800bac8:	0003d090 	.word	0x0003d090
 800bacc:	0007a120 	.word	0x0007a120

0800bad0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800bad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bad2:	b08b      	sub	sp, #44	; 0x2c
 800bad4:	4606      	mov	r6, r0
 800bad6:	460f      	mov	r7, r1
 800bad8:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800bada:	ac04      	add	r4, sp, #16
 800badc:	4d11      	ldr	r5, [pc, #68]	; (800bb24 <RegionCommonRxConfigPrint+0x54>)
 800bade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bae2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bae6:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800baea:	2e05      	cmp	r6, #5
 800baec:	d810      	bhi.n	800bb10 <RegionCommonRxConfigPrint+0x40>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800baee:	f8cd c008 	str.w	ip, [sp, #8]
 800baf2:	9701      	str	r7, [sp, #4]
 800baf4:	ab0a      	add	r3, sp, #40	; 0x28
 800baf6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800bafa:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <RegionCommonRxConfigPrint+0x58>)
 800bb02:	2201      	movs	r2, #1
 800bb04:	2100      	movs	r1, #0
 800bb06:	2002      	movs	r0, #2
 800bb08:	f004 fd06 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800bb0c:	b00b      	add	sp, #44	; 0x2c
 800bb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bb10:	f8cd c004 	str.w	ip, [sp, #4]
 800bb14:	9700      	str	r7, [sp, #0]
 800bb16:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <RegionCommonRxConfigPrint+0x5c>)
 800bb18:	2201      	movs	r2, #1
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	2002      	movs	r0, #2
 800bb1e:	f004 fcfb 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 800bb22:	e7f3      	b.n	800bb0c <RegionCommonRxConfigPrint+0x3c>
 800bb24:	080111e4 	.word	0x080111e4
 800bb28:	080117d8 	.word	0x080117d8
 800bb2c:	080117f8 	.word	0x080117f8

0800bb30 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800bb30:	b500      	push	{lr}
 800bb32:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bb34:	9101      	str	r1, [sp, #4]
 800bb36:	9000      	str	r0, [sp, #0]
 800bb38:	4b04      	ldr	r3, [pc, #16]	; (800bb4c <RegionCommonTxConfigPrint+0x1c>)
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	2002      	movs	r0, #2
 800bb40:	f004 fcea 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 800bb44:	b003      	add	sp, #12
 800bb46:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb4a:	bf00      	nop
 800bb4c:	08011814 	.word	0x08011814

0800bb50 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	4604      	mov	r4, r0
 800bb54:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800bb56:	4b1b      	ldr	r3, [pc, #108]	; (800bbc4 <VerifyRfFreq+0x74>)
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	4798      	blx	r3
 800bb5c:	b130      	cbz	r0, 800bb6c <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800bb5e:	4b1a      	ldr	r3, [pc, #104]	; (800bbc8 <VerifyRfFreq+0x78>)
 800bb60:	4423      	add	r3, r4
 800bb62:	4a1a      	ldr	r2, [pc, #104]	; (800bbcc <VerifyRfFreq+0x7c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d802      	bhi.n	800bb6e <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800bb68:	2302      	movs	r3, #2
 800bb6a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800bb6e:	4b18      	ldr	r3, [pc, #96]	; (800bbd0 <VerifyRfFreq+0x80>)
 800bb70:	4423      	add	r3, r4
 800bb72:	4a18      	ldr	r2, [pc, #96]	; (800bbd4 <VerifyRfFreq+0x84>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d802      	bhi.n	800bb7e <VerifyRfFreq+0x2e>
        *band = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	702b      	strb	r3, [r5, #0]
 800bb7c:	e7f6      	b.n	800bb6c <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800bb7e:	4b16      	ldr	r3, [pc, #88]	; (800bbd8 <VerifyRfFreq+0x88>)
 800bb80:	4423      	add	r3, r4
 800bb82:	4a16      	ldr	r2, [pc, #88]	; (800bbdc <VerifyRfFreq+0x8c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d802      	bhi.n	800bb8e <VerifyRfFreq+0x3e>
        *band = 1;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	702b      	strb	r3, [r5, #0]
 800bb8c:	e7ee      	b.n	800bb6c <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800bb8e:	4b14      	ldr	r3, [pc, #80]	; (800bbe0 <VerifyRfFreq+0x90>)
 800bb90:	4423      	add	r3, r4
 800bb92:	4a14      	ldr	r2, [pc, #80]	; (800bbe4 <VerifyRfFreq+0x94>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d802      	bhi.n	800bb9e <VerifyRfFreq+0x4e>
        *band = 5;
 800bb98:	2305      	movs	r3, #5
 800bb9a:	702b      	strb	r3, [r5, #0]
 800bb9c:	e7e6      	b.n	800bb6c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800bb9e:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <VerifyRfFreq+0x98>)
 800bba0:	4423      	add	r3, r4
 800bba2:	4a12      	ldr	r2, [pc, #72]	; (800bbec <VerifyRfFreq+0x9c>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d802      	bhi.n	800bbae <VerifyRfFreq+0x5e>
        *band = 3;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	702b      	strb	r3, [r5, #0]
 800bbac:	e7de      	b.n	800bb6c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800bbae:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <VerifyRfFreq+0xa0>)
 800bbb0:	4423      	add	r3, r4
 800bbb2:	4a10      	ldr	r2, [pc, #64]	; (800bbf4 <VerifyRfFreq+0xa4>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d802      	bhi.n	800bbbe <VerifyRfFreq+0x6e>
        *band = 4;
 800bbb8:	2304      	movs	r3, #4
 800bbba:	702b      	strb	r3, [r5, #0]
 800bbbc:	e7d6      	b.n	800bb6c <VerifyRfFreq+0x1c>
        return false;
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	e7d4      	b.n	800bb6c <VerifyRfFreq+0x1c>
 800bbc2:	bf00      	nop
 800bbc4:	08011df8 	.word	0x08011df8
 800bbc8:	cc8faa40 	.word	0xcc8faa40
 800bbcc:	001e847f 	.word	0x001e847f
 800bbd0:	cc7125c0 	.word	0xcc7125c0
 800bbd4:	002dc6c0 	.word	0x002dc6c0
 800bbd8:	cc435eff 	.word	0xcc435eff
 800bbdc:	000927bf 	.word	0x000927bf
 800bbe0:	cc38b0a0 	.word	0xcc38b0a0
 800bbe4:	0007a120 	.word	0x0007a120
 800bbe8:	cc2e0240 	.word	0xcc2e0240
 800bbec:	0003d090 	.word	0x0003d090
 800bbf0:	cc296e60 	.word	0xcc296e60
 800bbf4:	000493e0 	.word	0x000493e0

0800bbf8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800bc00:	4b13      	ldr	r3, [pc, #76]	; (800bc50 <GetTimeOnAir+0x58>)
 800bc02:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800bc04:	4913      	ldr	r1, [pc, #76]	; (800bc54 <GetTimeOnAir+0x5c>)
 800bc06:	f7ff ff51 	bl	800baac <RegionCommonGetBandwidth>
 800bc0a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800bc0c:	2d07      	cmp	r5, #7
 800bc0e:	d00e      	beq.n	800bc2e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800bc10:	4b11      	ldr	r3, [pc, #68]	; (800bc58 <GetTimeOnAir+0x60>)
 800bc12:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bc14:	2001      	movs	r0, #1
 800bc16:	9003      	str	r0, [sp, #12]
 800bc18:	b2e4      	uxtb	r4, r4
 800bc1a:	9402      	str	r4, [sp, #8]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	2308      	movs	r3, #8
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	4603      	mov	r3, r0
 800bc26:	4632      	mov	r2, r6
 800bc28:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800bc2a:	b004      	add	sp, #16
 800bc2c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800bc2e:	4b0a      	ldr	r3, [pc, #40]	; (800bc58 <GetTimeOnAir+0x60>)
 800bc30:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bc32:	2301      	movs	r3, #1
 800bc34:	9303      	str	r3, [sp, #12]
 800bc36:	b2e4      	uxtb	r4, r4
 800bc38:	9402      	str	r4, [sp, #8]
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	9001      	str	r0, [sp, #4]
 800bc3e:	2305      	movs	r3, #5
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	4603      	mov	r3, r0
 800bc44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc48:	fb02 f206 	mul.w	r2, r2, r6
 800bc4c:	47a8      	blx	r5
 800bc4e:	e7ec      	b.n	800bc2a <GetTimeOnAir+0x32>
 800bc50:	08011850 	.word	0x08011850
 800bc54:	08011830 	.word	0x08011830
 800bc58:	08011df8 	.word	0x08011df8

0800bc5c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800bc5c:	b500      	push	{lr}
 800bc5e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800bc60:	2300      	movs	r3, #0
 800bc62:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800bc64:	7803      	ldrb	r3, [r0, #0]
 800bc66:	3b0b      	subs	r3, #11
 800bc68:	2b2e      	cmp	r3, #46	; 0x2e
 800bc6a:	d830      	bhi.n	800bcce <RegionEU868GetPhyParam+0x72>
 800bc6c:	e8df f003 	tbb	[pc, r3]
 800bc70:	3f393633 	.word	0x3f393633
 800bc74:	504c4845 	.word	0x504c4845
 800bc78:	605c5854 	.word	0x605c5854
 800bc7c:	6c2f692f 	.word	0x6c2f692f
 800bc80:	2f7b7872 	.word	0x2f7b7872
 800bc84:	18837f2f 	.word	0x18837f2f
 800bc88:	2f2f2f2f 	.word	0x2f2f2f2f
 800bc8c:	2f2f2f2f 	.word	0x2f2f2f2f
 800bc90:	2f2f2f2f 	.word	0x2f2f2f2f
 800bc94:	9389862f 	.word	0x9389862f
 800bc98:	99962f2f 	.word	0x99962f2f
 800bc9c:	9c2f      	.short	0x9c2f
 800bc9e:	a2          	.byte	0xa2
 800bc9f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800bca0:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800bca4:	f88d 3004 	strb.w	r3, [sp, #4]
 800bca8:	2307      	movs	r3, #7
 800bcaa:	f88d 3005 	strb.w	r3, [sp, #5]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f88d 3006 	strb.w	r3, [sp, #6]
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800bcba:	4b42      	ldr	r3, [pc, #264]	; (800bdc4 <RegionEU868GetPhyParam+0x168>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800bcc2:	9202      	str	r2, [sp, #8]
 800bcc4:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800bcc6:	a801      	add	r0, sp, #4
 800bcc8:	f7ff fecc 	bl	800ba64 <RegionCommonGetNextLowerTxDr>
 800bccc:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 800bcce:	9804      	ldr	r0, [sp, #16]
 800bcd0:	b007      	add	sp, #28
 800bcd2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800bcd6:	2340      	movs	r3, #64	; 0x40
 800bcd8:	9304      	str	r3, [sp, #16]
            break;
 800bcda:	e7f8      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800bcdc:	2320      	movs	r3, #32
 800bcde:	9304      	str	r3, [sp, #16]
            break;
 800bce0:	e7f5      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800bce2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bce6:	4a38      	ldr	r2, [pc, #224]	; (800bdc8 <RegionEU868GetPhyParam+0x16c>)
 800bce8:	5cd3      	ldrb	r3, [r2, r3]
 800bcea:	9304      	str	r3, [sp, #16]
            break;
 800bcec:	e7ef      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800bcee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bcf2:	4a36      	ldr	r2, [pc, #216]	; (800bdcc <RegionEU868GetPhyParam+0x170>)
 800bcf4:	5cd3      	ldrb	r3, [r2, r3]
 800bcf6:	9304      	str	r3, [sp, #16]
            break;
 800bcf8:	e7e9      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	9304      	str	r3, [sp, #16]
            break;
 800bcfe:	e7e6      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800bd00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bd04:	9304      	str	r3, [sp, #16]
            break;
 800bd06:	e7e2      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800bd08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd0c:	9304      	str	r3, [sp, #16]
            break;
 800bd0e:	e7de      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800bd10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bd14:	9304      	str	r3, [sp, #16]
            break;
 800bd16:	e7da      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800bd18:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd1c:	9304      	str	r3, [sp, #16]
            break;
 800bd1e:	e7d6      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800bd20:	f241 7370 	movw	r3, #6000	; 0x1770
 800bd24:	9304      	str	r3, [sp, #16]
            break;
 800bd26:	e7d2      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800bd28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd2c:	9304      	str	r3, [sp, #16]
            break;
 800bd2e:	e7ce      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800bd30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bd34:	4826      	ldr	r0, [pc, #152]	; (800bdd0 <RegionEU868GetPhyParam+0x174>)
 800bd36:	f002 fa59 	bl	800e1ec <randr>
 800bd3a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800bd3e:	9004      	str	r0, [sp, #16]
            break;
 800bd40:	e7c5      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800bd42:	4b24      	ldr	r3, [pc, #144]	; (800bdd4 <RegionEU868GetPhyParam+0x178>)
 800bd44:	9304      	str	r3, [sp, #16]
            break;
 800bd46:	e7c2      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bd48:	4b1e      	ldr	r3, [pc, #120]	; (800bdc4 <RegionEU868GetPhyParam+0x168>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800bd50:	9304      	str	r3, [sp, #16]
            break;
 800bd52:	e7bc      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800bd54:	4b1b      	ldr	r3, [pc, #108]	; (800bdc4 <RegionEU868GetPhyParam+0x168>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800bd5c:	9304      	str	r3, [sp, #16]
            break;
 800bd5e:	e7b6      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800bd60:	2310      	movs	r3, #16
 800bd62:	9304      	str	r3, [sp, #16]
            break;
 800bd64:	e7b3      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800bd66:	4b17      	ldr	r3, [pc, #92]	; (800bdc4 <RegionEU868GetPhyParam+0x168>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	9304      	str	r3, [sp, #16]
            break;
 800bd6c:	e7af      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800bd6e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800bd72:	9304      	str	r3, [sp, #16]
            break;
 800bd74:	e7ab      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800bd76:	4b18      	ldr	r3, [pc, #96]	; (800bdd8 <RegionEU868GetPhyParam+0x17c>)
 800bd78:	9304      	str	r3, [sp, #16]
            break;
 800bd7a:	e7a8      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800bd7c:	4b15      	ldr	r3, [pc, #84]	; (800bdd4 <RegionEU868GetPhyParam+0x178>)
 800bd7e:	9304      	str	r3, [sp, #16]
            break;
 800bd80:	e7a5      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800bd82:	2311      	movs	r3, #17
 800bd84:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800bd94:	e79b      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800bd96:	2303      	movs	r3, #3
 800bd98:	9304      	str	r3, [sp, #16]
            break;
 800bd9a:	e798      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800bd9c:	4b0d      	ldr	r3, [pc, #52]	; (800bdd4 <RegionEU868GetPhyParam+0x178>)
 800bd9e:	9304      	str	r3, [sp, #16]
            break;
 800bda0:	e795      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800bda2:	2303      	movs	r3, #3
 800bda4:	9304      	str	r3, [sp, #16]
            break;
 800bda6:	e792      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bda8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bdac:	4a0b      	ldr	r2, [pc, #44]	; (800bddc <RegionEU868GetPhyParam+0x180>)
 800bdae:	5cd3      	ldrb	r3, [r2, r3]
 800bdb0:	9304      	str	r3, [sp, #16]
            break;
 800bdb2:	e78c      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800bdb4:	490a      	ldr	r1, [pc, #40]	; (800bde0 <RegionEU868GetPhyParam+0x184>)
 800bdb6:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800bdba:	f7ff fe77 	bl	800baac <RegionCommonGetBandwidth>
 800bdbe:	9004      	str	r0, [sp, #16]
            break;
 800bdc0:	e785      	b.n	800bcce <RegionEU868GetPhyParam+0x72>
 800bdc2:	bf00      	nop
 800bdc4:	20001034 	.word	0x20001034
 800bdc8:	08011858 	.word	0x08011858
 800bdcc:	08011860 	.word	0x08011860
 800bdd0:	fffffc18 	.word	0xfffffc18
 800bdd4:	33d3e608 	.word	0x33d3e608
 800bdd8:	4009999a 	.word	0x4009999a
 800bddc:	08011850 	.word	0x08011850
 800bde0:	08011830 	.word	0x08011830

0800bde4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800bde4:	b530      	push	{r4, r5, lr}
 800bde6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800bde8:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <RegionEU868SetBandTxDone+0x34>)
 800bdea:	681d      	ldr	r5, [r3, #0]
 800bdec:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <RegionEU868SetBandTxDone+0x38>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	7803      	ldrb	r3, [r0, #0]
 800bdf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bdf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdfa:	7a5b      	ldrb	r3, [r3, #9]
 800bdfc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800be00:	6903      	ldr	r3, [r0, #16]
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	68c3      	ldr	r3, [r0, #12]
 800be06:	7842      	ldrb	r2, [r0, #1]
 800be08:	6881      	ldr	r1, [r0, #8]
 800be0a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800be0e:	f7ff fc15 	bl	800b63c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800be12:	b003      	add	sp, #12
 800be14:	bd30      	pop	{r4, r5, pc}
 800be16:	bf00      	nop
 800be18:	20001030 	.word	0x20001030
 800be1c:	20001034 	.word	0x20001034

0800be20 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800be20:	b530      	push	{r4, r5, lr}
 800be22:	b0a5      	sub	sp, #148	; 0x94
 800be24:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800be26:	2290      	movs	r2, #144	; 0x90
 800be28:	2100      	movs	r1, #0
 800be2a:	4668      	mov	r0, sp
 800be2c:	f005 f938 	bl	80110a0 <memset>
 800be30:	2364      	movs	r3, #100	; 0x64
 800be32:	f8ad 3000 	strh.w	r3, [sp]
 800be36:	f8ad 3018 	strh.w	r3, [sp, #24]
 800be3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be3e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800be42:	210a      	movs	r1, #10
 800be44:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800be48:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800be4c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800be50:	7a23      	ldrb	r3, [r4, #8]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d031      	beq.n	800beba <RegionEU868InitDefaults+0x9a>
 800be56:	2b02      	cmp	r3, #2
 800be58:	d03d      	beq.n	800bed6 <RegionEU868InitDefaults+0xb6>
 800be5a:	b10b      	cbz	r3, 800be60 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800be5c:	b025      	add	sp, #148	; 0x94
 800be5e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800be60:	6820      	ldr	r0, [r4, #0]
 800be62:	2800      	cmp	r0, #0
 800be64:	d0fa      	beq.n	800be5c <RegionEU868InitDefaults+0x3c>
 800be66:	6863      	ldr	r3, [r4, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0f7      	beq.n	800be5c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800be6c:	4a1f      	ldr	r2, [pc, #124]	; (800beec <RegionEU868InitDefaults+0xcc>)
 800be6e:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800be70:	4c1f      	ldr	r4, [pc, #124]	; (800bef0 <RegionEU868InitDefaults+0xd0>)
 800be72:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800be74:	2290      	movs	r2, #144	; 0x90
 800be76:	4669      	mov	r1, sp
 800be78:	f002 f9c5 	bl	800e206 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800be7c:	6824      	ldr	r4, [r4, #0]
 800be7e:	4b1d      	ldr	r3, [pc, #116]	; (800bef4 <RegionEU868InitDefaults+0xd4>)
 800be80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800be88:	f104 050c 	add.w	r5, r4, #12
 800be8c:	f103 020c 	add.w	r2, r3, #12
 800be90:	ca07      	ldmia	r2, {r0, r1, r2}
 800be92:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800be96:	f104 0518 	add.w	r5, r4, #24
 800be9a:	3318      	adds	r3, #24
 800be9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bea0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800bea4:	2307      	movs	r3, #7
 800bea6:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800beaa:	2201      	movs	r2, #1
 800beac:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800beb0:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800beb4:	f7ff fbb1 	bl	800b61a <RegionCommonChanMaskCopy>
            break;
 800beb8:	e7d0      	b.n	800be5c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800beba:	4b0d      	ldr	r3, [pc, #52]	; (800bef0 <RegionEU868InitDefaults+0xd0>)
 800bebc:	6818      	ldr	r0, [r3, #0]
 800bebe:	2300      	movs	r3, #0
 800bec0:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800bec2:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800bec4:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bec6:	2201      	movs	r2, #1
 800bec8:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800becc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800bed0:	f7ff fba3 	bl	800b61a <RegionCommonChanMaskCopy>
            break;
 800bed4:	e7c2      	b.n	800be5c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800bed6:	4b06      	ldr	r3, [pc, #24]	; (800bef0 <RegionEU868InitDefaults+0xd0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800bede:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800bee2:	430a      	orrs	r2, r1
 800bee4:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800bee8:	e7b8      	b.n	800be5c <RegionEU868InitDefaults+0x3c>
 800beea:	bf00      	nop
 800beec:	20001030 	.word	0x20001030
 800bef0:	20001034 	.word	0x20001034
 800bef4:	080111fc 	.word	0x080111fc

0800bef8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bef8:	b500      	push	{lr}
 800befa:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800befc:	290f      	cmp	r1, #15
 800befe:	d83c      	bhi.n	800bf7a <RegionEU868Verify+0x82>
 800bf00:	e8df f001 	tbb	[pc, r1]
 800bf04:	3b3b3b0a 	.word	0x3b3b3b0a
 800bf08:	271d133b 	.word	0x271d133b
 800bf0c:	3b31313b 	.word	0x3b31313b
 800bf10:	083b3b3b 	.word	0x083b3b3b
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800bf14:	2001      	movs	r0, #1
 800bf16:	e031      	b.n	800bf7c <RegionEU868Verify+0x84>
            uint8_t band = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800bf1e:	f10d 0107 	add.w	r1, sp, #7
 800bf22:	6800      	ldr	r0, [r0, #0]
 800bf24:	f7ff fe14 	bl	800bb50 <VerifyRfFreq>
 800bf28:	e028      	b.n	800bf7c <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800bf2a:	2207      	movs	r2, #7
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f990 0000 	ldrsb.w	r0, [r0]
 800bf32:	f7ff fb00 	bl	800b536 <RegionCommonValueInRange>
 800bf36:	3800      	subs	r0, #0
 800bf38:	bf18      	it	ne
 800bf3a:	2001      	movne	r0, #1
 800bf3c:	e01e      	b.n	800bf7c <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800bf3e:	2205      	movs	r2, #5
 800bf40:	2100      	movs	r1, #0
 800bf42:	f990 0000 	ldrsb.w	r0, [r0]
 800bf46:	f7ff faf6 	bl	800b536 <RegionCommonValueInRange>
 800bf4a:	3800      	subs	r0, #0
 800bf4c:	bf18      	it	ne
 800bf4e:	2001      	movne	r0, #1
 800bf50:	e014      	b.n	800bf7c <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800bf52:	2207      	movs	r2, #7
 800bf54:	2100      	movs	r1, #0
 800bf56:	f990 0000 	ldrsb.w	r0, [r0]
 800bf5a:	f7ff faec 	bl	800b536 <RegionCommonValueInRange>
 800bf5e:	3800      	subs	r0, #0
 800bf60:	bf18      	it	ne
 800bf62:	2001      	movne	r0, #1
 800bf64:	e00a      	b.n	800bf7c <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800bf66:	2207      	movs	r2, #7
 800bf68:	2100      	movs	r1, #0
 800bf6a:	f990 0000 	ldrsb.w	r0, [r0]
 800bf6e:	f7ff fae2 	bl	800b536 <RegionCommonValueInRange>
 800bf72:	3800      	subs	r0, #0
 800bf74:	bf18      	it	ne
 800bf76:	2001      	movne	r0, #1
 800bf78:	e000      	b.n	800bf7c <RegionEU868Verify+0x84>
            return false;
 800bf7a:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800bf7c:	b003      	add	sp, #12
 800bf7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bf84 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800bf84:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800bf86:	7903      	ldrb	r3, [r0, #4]
 800bf88:	b11b      	cbz	r3, 800bf92 <RegionEU868ChanMaskSet+0xe>
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d00b      	beq.n	800bfa6 <RegionEU868ChanMaskSet+0x22>
 800bf8e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800bf90:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bf92:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <RegionEU868ChanMaskSet+0x38>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2201      	movs	r2, #1
 800bf98:	6801      	ldr	r1, [r0, #0]
 800bf9a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800bf9e:	f7ff fb3c 	bl	800b61a <RegionCommonChanMaskCopy>
    return true;
 800bfa2:	2001      	movs	r0, #1
            break;
 800bfa4:	e7f4      	b.n	800bf90 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bfa6:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <RegionEU868ChanMaskSet+0x38>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	6801      	ldr	r1, [r0, #0]
 800bfae:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800bfb2:	f7ff fb32 	bl	800b61a <RegionCommonChanMaskCopy>
    return true;
 800bfb6:	2001      	movs	r0, #1
            break;
 800bfb8:	e7ea      	b.n	800bf90 <RegionEU868ChanMaskSet+0xc>
 800bfba:	bf00      	nop
 800bfbc:	20001034 	.word	0x20001034

0800bfc0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	460e      	mov	r6, r1
 800bfc6:	4617      	mov	r7, r2
 800bfc8:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bfca:	2807      	cmp	r0, #7
 800bfcc:	bfa8      	it	ge
 800bfce:	2007      	movge	r0, #7
 800bfd0:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bfd2:	4913      	ldr	r1, [pc, #76]	; (800c020 <RegionEU868ComputeRxWindowParameters+0x60>)
 800bfd4:	f7ff fd6a 	bl	800baac <RegionCommonGetBandwidth>
 800bfd8:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800bfda:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800bfde:	2b07      	cmp	r3, #7
 800bfe0:	d017      	beq.n	800c012 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800bfe2:	4a0f      	ldr	r2, [pc, #60]	; (800c020 <RegionEU868ComputeRxWindowParameters+0x60>)
 800bfe4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bfe8:	4a0e      	ldr	r2, [pc, #56]	; (800c024 <RegionEU868ComputeRxWindowParameters+0x64>)
 800bfea:	5cd0      	ldrb	r0, [r2, r3]
 800bfec:	f7ff fc2e 	bl	800b84c <RegionCommonComputeSymbolTimeLoRa>
 800bff0:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800bff2:	4b0d      	ldr	r3, [pc, #52]	; (800c028 <RegionEU868ComputeRxWindowParameters+0x68>)
 800bff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bff6:	4798      	blx	r3
 800bff8:	4603      	mov	r3, r0
 800bffa:	f104 020c 	add.w	r2, r4, #12
 800bffe:	9201      	str	r2, [sp, #4]
 800c000:	3408      	adds	r4, #8
 800c002:	9400      	str	r4, [sp, #0]
 800c004:	463a      	mov	r2, r7
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	f7ff fc2d 	bl	800b868 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800c00e:	b003      	add	sp, #12
 800c010:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800c012:	4a04      	ldr	r2, [pc, #16]	; (800c024 <RegionEU868ComputeRxWindowParameters+0x64>)
 800c014:	5cd0      	ldrb	r0, [r2, r3]
 800c016:	f7ff fc21 	bl	800b85c <RegionCommonComputeSymbolTimeFsk>
 800c01a:	4605      	mov	r5, r0
 800c01c:	e7e9      	b.n	800bff2 <RegionEU868ComputeRxWindowParameters+0x32>
 800c01e:	bf00      	nop
 800c020:	08011830 	.word	0x08011830
 800c024:	08011850 	.word	0x08011850
 800c028:	08011df8 	.word	0x08011df8

0800c02c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c030:	b08a      	sub	sp, #40	; 0x28
 800c032:	4604      	mov	r4, r0
 800c034:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800c036:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800c03a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800c03e:	4b37      	ldr	r3, [pc, #220]	; (800c11c <RegionEU868RxConfig+0xf0>)
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	4798      	blx	r3
 800c044:	2800      	cmp	r0, #0
 800c046:	d167      	bne.n	800c118 <RegionEU868RxConfig+0xec>
 800c048:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c04a:	7ce3      	ldrb	r3, [r4, #19]
 800c04c:	b983      	cbnz	r3, 800c070 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c04e:	4b34      	ldr	r3, [pc, #208]	; (800c120 <RegionEU868RxConfig+0xf4>)
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	7823      	ldrb	r3, [r4, #0]
 800c054:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c058:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c05c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c064:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	d100      	bne.n	800c070 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c06e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800c070:	4b2c      	ldr	r3, [pc, #176]	; (800c124 <RegionEU868RxConfig+0xf8>)
 800c072:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800c076:	4b29      	ldr	r3, [pc, #164]	; (800c11c <RegionEU868RxConfig+0xf0>)
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	4640      	mov	r0, r8
 800c07c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800c07e:	2d07      	cmp	r5, #7
 800c080:	d02b      	beq.n	800c0da <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c082:	4b26      	ldr	r3, [pc, #152]	; (800c11c <RegionEU868RxConfig+0xf0>)
 800c084:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c088:	7ca3      	ldrb	r3, [r4, #18]
 800c08a:	9309      	str	r3, [sp, #36]	; 0x24
 800c08c:	2601      	movs	r6, #1
 800c08e:	9608      	str	r6, [sp, #32]
 800c090:	2300      	movs	r3, #0
 800c092:	9307      	str	r3, [sp, #28]
 800c094:	9306      	str	r3, [sp, #24]
 800c096:	9305      	str	r3, [sp, #20]
 800c098:	9304      	str	r3, [sp, #16]
 800c09a:	9303      	str	r3, [sp, #12]
 800c09c:	8922      	ldrh	r2, [r4, #8]
 800c09e:	9202      	str	r2, [sp, #8]
 800c0a0:	2208      	movs	r2, #8
 800c0a2:	9201      	str	r2, [sp, #4]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	4633      	mov	r3, r6
 800c0a8:	464a      	mov	r2, r9
 800c0aa:	78a1      	ldrb	r1, [r4, #2]
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800c0b0:	7c63      	ldrb	r3, [r4, #17]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d02d      	beq.n	800c112 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800c0b6:	4b1c      	ldr	r3, [pc, #112]	; (800c128 <RegionEU868RxConfig+0xfc>)
 800c0b8:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c0ba:	4b18      	ldr	r3, [pc, #96]	; (800c11c <RegionEU868RxConfig+0xf0>)
 800c0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0be:	310d      	adds	r1, #13
 800c0c0:	b2c9      	uxtb	r1, r1
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c0c6:	462a      	mov	r2, r5
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	7ce0      	ldrb	r0, [r4, #19]
 800c0cc:	f7ff fd00 	bl	800bad0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800c0d0:	703d      	strb	r5, [r7, #0]
    return true;
 800c0d2:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800c0d4:	b00a      	add	sp, #40	; 0x28
 800c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800c0da:	4b10      	ldr	r3, [pc, #64]	; (800c11c <RegionEU868RxConfig+0xf0>)
 800c0dc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c0e0:	7ca3      	ldrb	r3, [r4, #18]
 800c0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	9008      	str	r0, [sp, #32]
 800c0e8:	9007      	str	r0, [sp, #28]
 800c0ea:	9006      	str	r0, [sp, #24]
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	9305      	str	r3, [sp, #20]
 800c0f0:	9004      	str	r0, [sp, #16]
 800c0f2:	9003      	str	r0, [sp, #12]
 800c0f4:	8923      	ldrh	r3, [r4, #8]
 800c0f6:	9302      	str	r3, [sp, #8]
 800c0f8:	2305      	movs	r3, #5
 800c0fa:	9301      	str	r3, [sp, #4]
 800c0fc:	4b0b      	ldr	r3, [pc, #44]	; (800c12c <RegionEU868RxConfig+0x100>)
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	4603      	mov	r3, r0
 800c102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c106:	fb02 f209 	mul.w	r2, r2, r9
 800c10a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c10e:	47d0      	blx	sl
 800c110:	e7ce      	b.n	800c0b0 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800c112:	4b07      	ldr	r3, [pc, #28]	; (800c130 <RegionEU868RxConfig+0x104>)
 800c114:	5d59      	ldrb	r1, [r3, r5]
 800c116:	e7d0      	b.n	800c0ba <RegionEU868RxConfig+0x8e>
        return false;
 800c118:	2000      	movs	r0, #0
 800c11a:	e7db      	b.n	800c0d4 <RegionEU868RxConfig+0xa8>
 800c11c:	08011df8 	.word	0x08011df8
 800c120:	20001034 	.word	0x20001034
 800c124:	08011850 	.word	0x08011850
 800c128:	08011860 	.word	0x08011860
 800c12c:	00014585 	.word	0x00014585
 800c130:	08011858 	.word	0x08011858

0800c134 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	b08d      	sub	sp, #52	; 0x34
 800c13a:	4604      	mov	r4, r0
 800c13c:	460f      	mov	r7, r1
 800c13e:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800c140:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c144:	4a42      	ldr	r2, [pc, #264]	; (800c250 <RegionEU868TxConfig+0x11c>)
 800c146:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800c14a:	4b42      	ldr	r3, [pc, #264]	; (800c254 <RegionEU868TxConfig+0x120>)
 800c14c:	6819      	ldr	r1, [r3, #0]
 800c14e:	4d42      	ldr	r5, [pc, #264]	; (800c258 <RegionEU868TxConfig+0x124>)
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	7802      	ldrb	r2, [r0, #0]
 800c154:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c158:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c15c:	7a53      	ldrb	r3, [r2, #9]
 800c15e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c162:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c166:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c16a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c16e:	f7ff fc98 	bl	800baa2 <RegionCommonLimitTxPower>
 800c172:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800c174:	4939      	ldr	r1, [pc, #228]	; (800c25c <RegionEU868TxConfig+0x128>)
 800c176:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c17a:	f7ff fc97 	bl	800baac <RegionCommonGetBandwidth>
 800c17e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c180:	68a2      	ldr	r2, [r4, #8]
 800c182:	6861      	ldr	r1, [r4, #4]
 800c184:	4630      	mov	r0, r6
 800c186:	f7ff fba9 	bl	800b8dc <RegionCommonComputeTxPower>
 800c18a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800c18c:	4b34      	ldr	r3, [pc, #208]	; (800c260 <RegionEU868TxConfig+0x12c>)
 800c18e:	68da      	ldr	r2, [r3, #12]
 800c190:	6829      	ldr	r1, [r5, #0]
 800c192:	7823      	ldrb	r3, [r4, #0]
 800c194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c198:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800c19c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800c19e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c1a2:	2b07      	cmp	r3, #7
 800c1a4:	d031      	beq.n	800c20a <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c1a6:	4b2e      	ldr	r3, [pc, #184]	; (800c260 <RegionEU868TxConfig+0x12c>)
 800c1a8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800c1ac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c1b0:	9308      	str	r3, [sp, #32]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	9207      	str	r2, [sp, #28]
 800c1b6:	9206      	str	r2, [sp, #24]
 800c1b8:	9205      	str	r2, [sp, #20]
 800c1ba:	2501      	movs	r5, #1
 800c1bc:	9504      	str	r5, [sp, #16]
 800c1be:	9203      	str	r2, [sp, #12]
 800c1c0:	2308      	movs	r3, #8
 800c1c2:	9302      	str	r3, [sp, #8]
 800c1c4:	9501      	str	r5, [sp, #4]
 800c1c6:	f8cd a000 	str.w	sl, [sp]
 800c1ca:	464b      	mov	r3, r9
 800c1cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800c1d2:	4b21      	ldr	r3, [pc, #132]	; (800c258 <RegionEU868TxConfig+0x124>)
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	7823      	ldrb	r3, [r4, #0]
 800c1d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c1dc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800c1e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c1e4:	f7ff fca4 	bl	800bb30 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800c1e8:	89a1      	ldrh	r1, [r4, #12]
 800c1ea:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c1ee:	f7ff fd03 	bl	800bbf8 <GetTimeOnAir>
 800c1f2:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800c1f6:	4b1a      	ldr	r3, [pc, #104]	; (800c260 <RegionEU868TxConfig+0x12c>)
 800c1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1fa:	7b21      	ldrb	r1, [r4, #12]
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	4798      	blx	r3

    *txPower = txPowerLimited;
 800c200:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800c202:	2001      	movs	r0, #1
 800c204:	b00d      	add	sp, #52	; 0x34
 800c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c20a:	4b15      	ldr	r3, [pc, #84]	; (800c260 <RegionEU868TxConfig+0x12c>)
 800c20c:	69dd      	ldr	r5, [r3, #28]
 800c20e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c212:	fb03 f30a 	mul.w	r3, r3, sl
 800c216:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c21a:	9208      	str	r2, [sp, #32]
 800c21c:	f04f 0b00 	mov.w	fp, #0
 800c220:	f8cd b01c 	str.w	fp, [sp, #28]
 800c224:	f8cd b018 	str.w	fp, [sp, #24]
 800c228:	f8cd b014 	str.w	fp, [sp, #20]
 800c22c:	2201      	movs	r2, #1
 800c22e:	9204      	str	r2, [sp, #16]
 800c230:	f8cd b00c 	str.w	fp, [sp, #12]
 800c234:	2205      	movs	r2, #5
 800c236:	9202      	str	r2, [sp, #8]
 800c238:	f8cd b004 	str.w	fp, [sp, #4]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	464b      	mov	r3, r9
 800c240:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800c244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c246:	4658      	mov	r0, fp
 800c248:	47a8      	blx	r5
        modem = MODEM_FSK;
 800c24a:	465d      	mov	r5, fp
 800c24c:	e7c1      	b.n	800c1d2 <RegionEU868TxConfig+0x9e>
 800c24e:	bf00      	nop
 800c250:	08011850 	.word	0x08011850
 800c254:	20001030 	.word	0x20001030
 800c258:	20001034 	.word	0x20001034
 800c25c:	08011830 	.word	0x08011830
 800c260:	08011df8 	.word	0x08011df8

0800c264 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	b08f      	sub	sp, #60	; 0x3c
 800c26a:	4607      	mov	r7, r0
 800c26c:	468b      	mov	fp, r1
 800c26e:	4692      	mov	sl, r2
 800c270:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c272:	2500      	movs	r5, #0
 800c274:	950c      	str	r5, [sp, #48]	; 0x30
 800c276:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800c27a:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800c27e:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c282:	e02d      	b.n	800c2e0 <RegionEU868LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c284:	2400      	movs	r4, #0
        status = 0x07;
 800c286:	f04f 0807 	mov.w	r8, #7
 800c28a:	e00f      	b.n	800c2ac <RegionEU868LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800c28c:	4a56      	ldr	r2, [pc, #344]	; (800c3e8 <RegionEU868LinkAdrReq+0x184>)
 800c28e:	6812      	ldr	r2, [r2, #0]
 800c290:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c294:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c298:	b132      	cbz	r2, 800c2a8 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800c29a:	2201      	movs	r2, #1
 800c29c:	40a2      	lsls	r2, r4
 800c29e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800c2a2:	430a      	orrs	r2, r1
 800c2a4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c2a8:	3401      	adds	r4, #1
 800c2aa:	b2e4      	uxtb	r4, r4
 800c2ac:	2c0f      	cmp	r4, #15
 800c2ae:	d817      	bhi.n	800c2e0 <RegionEU868LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800c2b0:	2b06      	cmp	r3, #6
 800c2b2:	d0eb      	beq.n	800c28c <RegionEU868LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c2b4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800c2b8:	4126      	asrs	r6, r4
 800c2ba:	f016 0f01 	tst.w	r6, #1
 800c2be:	d0f3      	beq.n	800c2a8 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800c2c0:	4a49      	ldr	r2, [pc, #292]	; (800c3e8 <RegionEU868LinkAdrReq+0x184>)
 800c2c2:	6812      	ldr	r2, [r2, #0]
 800c2c4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c2c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	d1eb      	bne.n	800c2a8 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800c2d0:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800c2d4:	e7e8      	b.n	800c2a8 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800c2d6:	f04f 0806 	mov.w	r8, #6
 800c2da:	e001      	b.n	800c2e0 <RegionEU868LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800c2dc:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c2e0:	7a3b      	ldrb	r3, [r7, #8]
 800c2e2:	42ab      	cmp	r3, r5
 800c2e4:	d919      	bls.n	800c31a <RegionEU868LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	a90c      	add	r1, sp, #48	; 0x30
 800c2ea:	4428      	add	r0, r5
 800c2ec:	f7ff fa46 	bl	800b77c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800c2f0:	b198      	cbz	r0, 800c31a <RegionEU868LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800c2f2:	4405      	add	r5, r0
 800c2f4:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800c2f6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800c2fa:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800c2fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c302:	b90b      	cbnz	r3, 800c308 <RegionEU868LinkAdrReq+0xa4>
 800c304:	2a00      	cmp	r2, #0
 800c306:	d0e6      	beq.n	800c2d6 <RegionEU868LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800c308:	1e5a      	subs	r2, r3, #1
 800c30a:	b2d2      	uxtb	r2, r2
 800c30c:	2a04      	cmp	r2, #4
 800c30e:	d9e5      	bls.n	800c2dc <RegionEU868LinkAdrReq+0x78>
 800c310:	2b06      	cmp	r3, #6
 800c312:	d9b7      	bls.n	800c284 <RegionEU868LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800c314:	f04f 0806 	mov.w	r8, #6
 800c318:	e7e2      	b.n	800c2e0 <RegionEU868LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c31a:	2302      	movs	r3, #2
 800c31c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800c320:	7a7b      	ldrb	r3, [r7, #9]
 800c322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800c326:	a80a      	add	r0, sp, #40	; 0x28
 800c328:	f7ff fc98 	bl	800bc5c <RegionEU868GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800c32c:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800c330:	7abb      	ldrb	r3, [r7, #10]
 800c332:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800c336:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800c33a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800c33e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800c342:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800c346:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c34a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800c34e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c352:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800c356:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c35a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800c35e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c362:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800c366:	2310      	movs	r3, #16
 800c368:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800c36c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800c370:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800c372:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800c376:	2307      	movs	r3, #7
 800c378:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800c37c:	4a1a      	ldr	r2, [pc, #104]	; (800c3e8 <RegionEU868LinkAdrReq+0x184>)
 800c37e:	6812      	ldr	r2, [r2, #0]
 800c380:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800c382:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800c386:	2300      	movs	r3, #0
 800c388:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c390:	ab0c      	add	r3, sp, #48	; 0x30
 800c392:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c396:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800c39a:	a801      	add	r0, sp, #4
 800c39c:	f7ff fa0a 	bl	800b7b4 <RegionCommonLinkAdrReqVerifyParams>
 800c3a0:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800c3a2:	2807      	cmp	r0, #7
 800c3a4:	d011      	beq.n	800c3ca <RegionEU868LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800c3a6:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800c3aa:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800c3ae:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800c3b2:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800c3b6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c3ba:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800c3be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c3c0:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	b00f      	add	sp, #60	; 0x3c
 800c3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800c3ca:	4e07      	ldr	r6, [pc, #28]	; (800c3e8 <RegionEU868LinkAdrReq+0x184>)
 800c3cc:	6830      	ldr	r0, [r6, #0]
 800c3ce:	220c      	movs	r2, #12
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c3d6:	f001 ff2c 	bl	800e232 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800c3da:	6833      	ldr	r3, [r6, #0]
 800c3dc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800c3e0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800c3e4:	e7df      	b.n	800c3a6 <RegionEU868LinkAdrReq+0x142>
 800c3e6:	bf00      	nop
 800c3e8:	20001034 	.word	0x20001034

0800c3ec <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c3ec:	b530      	push	{r4, r5, lr}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800c3f8:	f10d 0107 	add.w	r1, sp, #7
 800c3fc:	6840      	ldr	r0, [r0, #4]
 800c3fe:	f7ff fba7 	bl	800bb50 <VerifyRfFreq>
 800c402:	b1a8      	cbz	r0, 800c430 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800c404:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800c406:	2207      	movs	r2, #7
 800c408:	2100      	movs	r1, #0
 800c40a:	f994 0000 	ldrsb.w	r0, [r4]
 800c40e:	f7ff f892 	bl	800b536 <RegionCommonValueInRange>
 800c412:	b908      	cbnz	r0, 800c418 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800c414:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800c418:	2205      	movs	r2, #5
 800c41a:	2100      	movs	r1, #0
 800c41c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c420:	f7ff f889 	bl	800b536 <RegionCommonValueInRange>
 800c424:	b908      	cbnz	r0, 800c42a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800c426:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800c42a:	4628      	mov	r0, r5
 800c42c:	b003      	add	sp, #12
 800c42e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800c430:	2506      	movs	r5, #6
 800c432:	e7e8      	b.n	800c406 <RegionEU868RxParamSetupReq+0x1a>

0800c434 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800c434:	f04f 30ff 	mov.w	r0, #4294967295
 800c438:	4770      	bx	lr
	...

0800c43c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800c43c:	b510      	push	{r4, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800c448:	f10d 0107 	add.w	r1, sp, #7
 800c44c:	6840      	ldr	r0, [r0, #4]
 800c44e:	f7ff fb7f 	bl	800bb50 <VerifyRfFreq>
 800c452:	b178      	cbz	r0, 800c474 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800c454:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <RegionEU868DlChannelReq+0x4c>)
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	7823      	ldrb	r3, [r4, #0]
 800c45c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c460:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800c464:	b909      	cbnz	r1, 800c46a <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800c466:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800c46a:	2803      	cmp	r0, #3
 800c46c:	d004      	beq.n	800c478 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800c46e:	b240      	sxtb	r0, r0
 800c470:	b002      	add	sp, #8
 800c472:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800c474:	2002      	movs	r0, #2
 800c476:	e7ee      	b.n	800c456 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800c478:	6861      	ldr	r1, [r4, #4]
 800c47a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c47e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c482:	6059      	str	r1, [r3, #4]
 800c484:	e7f3      	b.n	800c46e <RegionEU868DlChannelReq+0x32>
 800c486:	bf00      	nop
 800c488:	20001034 	.word	0x20001034

0800c48c <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800c48c:	4770      	bx	lr
	...

0800c490 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c492:	b097      	sub	sp, #92	; 0x5c
 800c494:	4604      	mov	r4, r0
 800c496:	460f      	mov	r7, r1
 800c498:	4616      	mov	r6, r2
 800c49a:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800c49c:	2100      	movs	r1, #0
 800c49e:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800c4a2:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c4a6:	9111      	str	r1, [sp, #68]	; 0x44
 800c4a8:	9112      	str	r1, [sp, #72]	; 0x48
 800c4aa:	9113      	str	r1, [sp, #76]	; 0x4c
 800c4ac:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c4ae:	2307      	movs	r3, #7
 800c4b0:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c4b4:	4b32      	ldr	r3, [pc, #200]	; (800c580 <RegionEU868NextChannel+0xf0>)
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c4be:	f7ff f896 	bl	800b5ee <RegionCommonCountChannels>
 800c4c2:	b938      	cbnz	r0, 800c4d4 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c4c4:	4b2e      	ldr	r3, [pc, #184]	; (800c580 <RegionEU868NextChannel+0xf0>)
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c4cc:	f043 0307 	orr.w	r3, r3, #7
 800c4d0:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800c4d4:	7a63      	ldrb	r3, [r4, #9]
 800c4d6:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c4da:	7a23      	ldrb	r3, [r4, #8]
 800c4dc:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c4e0:	4b27      	ldr	r3, [pc, #156]	; (800c580 <RegionEU868NextChannel+0xf0>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800c4e8:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800c4ea:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800c4ec:	4b25      	ldr	r3, [pc, #148]	; (800c584 <RegionEU868NextChannel+0xf4>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800c4f2:	2310      	movs	r3, #16
 800c4f4:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800c4f8:	f10d 030a 	add.w	r3, sp, #10
 800c4fc:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c502:	6863      	ldr	r3, [r4, #4]
 800c504:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800c506:	7aa3      	ldrb	r3, [r4, #10]
 800c508:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800c50c:	2306      	movs	r3, #6
 800c50e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c512:	ab0c      	add	r3, sp, #48	; 0x30
 800c514:	6921      	ldr	r1, [r4, #16]
 800c516:	68e0      	ldr	r0, [r4, #12]
 800c518:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c51c:	7d23      	ldrb	r3, [r4, #20]
 800c51e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c522:	8ae1      	ldrh	r1, [r4, #22]
 800c524:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800c528:	f7ff fb66 	bl	800bbf8 <GetTimeOnAir>
 800c52c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c532:	9601      	str	r6, [sp, #4]
 800c534:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800c53e:	aa11      	add	r2, sp, #68	; 0x44
 800c540:	4629      	mov	r1, r5
 800c542:	a809      	add	r0, sp, #36	; 0x24
 800c544:	f7ff fa46 	bl	800b9d4 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c548:	4604      	mov	r4, r0
 800c54a:	b120      	cbz	r0, 800c556 <RegionEU868NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800c54c:	280c      	cmp	r0, #12
 800c54e:	d00d      	beq.n	800c56c <RegionEU868NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c550:	4620      	mov	r0, r4
 800c552:	b017      	add	sp, #92	; 0x5c
 800c554:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c556:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800c55a:	3901      	subs	r1, #1
 800c55c:	f001 fe46 	bl	800e1ec <randr>
 800c560:	ab16      	add	r3, sp, #88	; 0x58
 800c562:	4418      	add	r0, r3
 800c564:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800c568:	703b      	strb	r3, [r7, #0]
 800c56a:	e7f1      	b.n	800c550 <RegionEU868NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c56c:	4b04      	ldr	r3, [pc, #16]	; (800c580 <RegionEU868NextChannel+0xf0>)
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c574:	f043 0307 	orr.w	r3, r3, #7
 800c578:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800c57c:	e7e8      	b.n	800c550 <RegionEU868NextChannel+0xc0>
 800c57e:	bf00      	nop
 800c580:	20001034 	.word	0x20001034
 800c584:	20001030 	.word	0x20001030

0800c588 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800c588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c58a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800c592:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c594:	2d02      	cmp	r5, #2
 800c596:	d94f      	bls.n	800c638 <RegionEU868ChannelAdd+0xb0>
 800c598:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800c59a:	2d0f      	cmp	r5, #15
 800c59c:	d84e      	bhi.n	800c63c <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c59e:	6803      	ldr	r3, [r0, #0]
 800c5a0:	7a18      	ldrb	r0, [r3, #8]
 800c5a2:	f340 0003 	sbfx	r0, r0, #0, #4
 800c5a6:	2207      	movs	r2, #7
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	b240      	sxtb	r0, r0
 800c5ac:	f7fe ffc3 	bl	800b536 <RegionCommonValueInRange>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d03d      	beq.n	800c630 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800c5b4:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	7a18      	ldrb	r0, [r3, #8]
 800c5ba:	f340 1003 	sbfx	r0, r0, #4, #4
 800c5be:	2207      	movs	r2, #7
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	b240      	sxtb	r0, r0
 800c5c4:	f7fe ffb7 	bl	800b536 <RegionCommonValueInRange>
 800c5c8:	b900      	cbnz	r0, 800c5cc <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800c5ca:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	7a03      	ldrb	r3, [r0, #8]
 800c5d0:	f343 0203 	sbfx	r2, r3, #0, #4
 800c5d4:	b252      	sxtb	r2, r2
 800c5d6:	f343 1303 	sbfx	r3, r3, #4, #4
 800c5da:	b25b      	sxtb	r3, r3
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	dd00      	ble.n	800c5e2 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800c5e0:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800c5e2:	f10d 0107 	add.w	r1, sp, #7
 800c5e6:	6800      	ldr	r0, [r0, #0]
 800c5e8:	f7ff fab2 	bl	800bb50 <VerifyRfFreq>
 800c5ec:	b310      	cbz	r0, 800c634 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800c5ee:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c5f0:	b106      	cbz	r6, 800c5f4 <RegionEU868ChannelAdd+0x6c>
 800c5f2:	bb33      	cbnz	r3, 800c642 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800c5f4:	bb3e      	cbnz	r6, 800c646 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800c5f6:	bb43      	cbnz	r3, 800c64a <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800c5f8:	4f15      	ldr	r7, [pc, #84]	; (800c650 <RegionEU868ChannelAdd+0xc8>)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	006e      	lsls	r6, r5, #1
 800c5fe:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800c602:	220c      	movs	r2, #12
 800c604:	6821      	ldr	r1, [r4, #0]
 800c606:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c60a:	f001 fdfc 	bl	800e206 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	442e      	add	r6, r5
 800c612:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c61a:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c61c:	2301      	movs	r3, #1
 800c61e:	fa03 f505 	lsl.w	r5, r3, r5
 800c622:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c626:	431d      	orrs	r5, r3
 800c628:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800c62c:	2000      	movs	r0, #0
 800c62e:	e006      	b.n	800c63e <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800c630:	2601      	movs	r6, #1
 800c632:	e7c0      	b.n	800c5b6 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800c634:	2301      	movs	r3, #1
 800c636:	e7db      	b.n	800c5f0 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c638:	2006      	movs	r0, #6
 800c63a:	e000      	b.n	800c63e <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c63c:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c63e:	b003      	add	sp, #12
 800c640:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c642:	2006      	movs	r0, #6
 800c644:	e7fb      	b.n	800c63e <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800c646:	2005      	movs	r0, #5
 800c648:	e7f9      	b.n	800c63e <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800c64a:	2004      	movs	r0, #4
 800c64c:	e7f7      	b.n	800c63e <RegionEU868ChannelAdd+0xb6>
 800c64e:	bf00      	nop
 800c650:	20001034 	.word	0x20001034

0800c654 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800c654:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c656:	2902      	cmp	r1, #2
 800c658:	d801      	bhi.n	800c65e <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800c65a:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800c65c:	4770      	bx	lr
{
 800c65e:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800c660:	4b08      	ldr	r3, [pc, #32]	; (800c684 <RegionEU868ChannelsRemove+0x30>)
 800c662:	6818      	ldr	r0, [r3, #0]
 800c664:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800c668:	009c      	lsls	r4, r3, #2
 800c66a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c66e:	2200      	movs	r2, #0
 800c670:	5102      	str	r2, [r0, r4]
 800c672:	605a      	str	r2, [r3, #4]
 800c674:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800c676:	2210      	movs	r2, #16
 800c678:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c67c:	f7fe ff9d 	bl	800b5ba <RegionCommonChanDisable>
}
 800c680:	bd10      	pop	{r4, pc}
 800c682:	bf00      	nop
 800c684:	20001034 	.word	0x20001034

0800c688 <RegionEU868ApplyCFList>:
{
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c68c:	2350      	movs	r3, #80	; 0x50
 800c68e:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800c692:	7903      	ldrb	r3, [r0, #4]
 800c694:	2b10      	cmp	r3, #16
 800c696:	d135      	bne.n	800c704 <RegionEU868ApplyCFList+0x7c>
 800c698:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800c69a:	6803      	ldr	r3, [r0, #0]
 800c69c:	7bdd      	ldrb	r5, [r3, #15]
 800c69e:	2d00      	cmp	r5, #0
 800c6a0:	d130      	bne.n	800c704 <RegionEU868ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c6a2:	2403      	movs	r4, #3
 800c6a4:	e01a      	b.n	800c6dc <RegionEU868ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c6a6:	6832      	ldr	r2, [r6, #0]
 800c6a8:	5d53      	ldrb	r3, [r2, r5]
 800c6aa:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c6ac:	442a      	add	r2, r5
 800c6ae:	7851      	ldrb	r1, [r2, #1]
 800c6b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c6b4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800c6b6:	7892      	ldrb	r2, [r2, #2]
 800c6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800c6bc:	2264      	movs	r2, #100	; 0x64
 800c6be:	fb02 f303 	mul.w	r3, r2, r3
 800c6c2:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	e011      	b.n	800c6ee <RegionEU868ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800c6ca:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800c6ce:	4668      	mov	r0, sp
 800c6d0:	f7ff ffc0 	bl	800c654 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c6d4:	3503      	adds	r5, #3
 800c6d6:	b2ed      	uxtb	r5, r5
 800c6d8:	3401      	adds	r4, #1
 800c6da:	b2e4      	uxtb	r4, r4
 800c6dc:	2c0f      	cmp	r4, #15
 800c6de:	d811      	bhi.n	800c704 <RegionEU868ApplyCFList+0x7c>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800c6e0:	2c07      	cmp	r4, #7
 800c6e2:	d9e0      	bls.n	800c6a6 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800c6e8:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800c6ec:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0ea      	beq.n	800c6ca <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800c6f4:	ab03      	add	r3, sp, #12
 800c6f6:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800c6f8:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800c6fc:	a801      	add	r0, sp, #4
 800c6fe:	f7ff ff43 	bl	800c588 <RegionEU868ChannelAdd>
 800c702:	e7e7      	b.n	800c6d4 <RegionEU868ApplyCFList+0x4c>
}
 800c704:	b006      	add	sp, #24
 800c706:	bd70      	pop	{r4, r5, r6, pc}

0800c708 <RegionEU868NewChannelReq>:
{
 800c708:	b500      	push	{lr}
 800c70a:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c70c:	6803      	ldr	r3, [r0, #0]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	b952      	cbnz	r2, 800c728 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c712:	7903      	ldrb	r3, [r0, #4]
 800c714:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c718:	a801      	add	r0, sp, #4
 800c71a:	f7ff ff9b 	bl	800c654 <RegionEU868ChannelsRemove>
 800c71e:	b1d0      	cbz	r0, 800c756 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800c720:	2003      	movs	r0, #3
}
 800c722:	b005      	add	sp, #20
 800c724:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800c728:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800c72a:	7903      	ldrb	r3, [r0, #4]
 800c72c:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800c730:	a802      	add	r0, sp, #8
 800c732:	f7ff ff29 	bl	800c588 <RegionEU868ChannelAdd>
 800c736:	2806      	cmp	r0, #6
 800c738:	d80b      	bhi.n	800c752 <RegionEU868NewChannelReq+0x4a>
 800c73a:	e8df f000 	tbb	[pc, r0]
 800c73e:	0a04      	.short	0x0a04
 800c740:	060e0a0a 	.word	0x060e0a0a
 800c744:	08          	.byte	0x08
 800c745:	00          	.byte	0x00
 800c746:	2003      	movs	r0, #3
 800c748:	e7eb      	b.n	800c722 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800c74a:	2001      	movs	r0, #1
                break;
 800c74c:	e7e9      	b.n	800c722 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c74e:	2000      	movs	r0, #0
                break;
 800c750:	e7e7      	b.n	800c722 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c752:	2000      	movs	r0, #0
                break;
 800c754:	e7e5      	b.n	800c722 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800c756:	2000      	movs	r0, #0
 800c758:	e7e3      	b.n	800c722 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800c75a:	2002      	movs	r0, #2
 800c75c:	e7e1      	b.n	800c722 <RegionEU868NewChannelReq+0x1a>
	...

0800c760 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c760:	b538      	push	{r3, r4, r5, lr}
 800c762:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c764:	4b12      	ldr	r3, [pc, #72]	; (800c7b0 <RegionEU868SetContinuousWave+0x50>)
 800c766:	6819      	ldr	r1, [r3, #0]
 800c768:	4d12      	ldr	r5, [pc, #72]	; (800c7b4 <RegionEU868SetContinuousWave+0x54>)
 800c76a:	682b      	ldr	r3, [r5, #0]
 800c76c:	7802      	ldrb	r2, [r0, #0]
 800c76e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c772:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c776:	7a53      	ldrb	r3, [r2, #9]
 800c778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c77c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c780:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c784:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c788:	f7ff f98b 	bl	800baa2 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c78c:	682a      	ldr	r2, [r5, #0]
 800c78e:	7823      	ldrb	r3, [r4, #0]
 800c790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c794:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c798:	68a2      	ldr	r2, [r4, #8]
 800c79a:	6861      	ldr	r1, [r4, #4]
 800c79c:	f7ff f89e 	bl	800b8dc <RegionCommonComputeTxPower>
 800c7a0:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c7a2:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <RegionEU868SetContinuousWave+0x58>)
 800c7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a6:	89a2      	ldrh	r2, [r4, #12]
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800c7ac:	bd38      	pop	{r3, r4, r5, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20001030 	.word	0x20001030
 800c7b4:	20001034 	.word	0x20001034
 800c7b8:	08011df8 	.word	0x08011df8

0800c7bc <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800c7bc:	1a88      	subs	r0, r1, r2
 800c7be:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	db01      	blt.n	800c7c8 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800c7c4:	b2c0      	uxtb	r0, r0
 800c7c6:	4770      	bx	lr
        datarate = DR_0;
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e7fb      	b.n	800c7c4 <RegionEU868ApplyDrOffset+0x8>

0800c7cc <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c7d0:	4b10      	ldr	r3, [pc, #64]	; (800c814 <VerifyRfFreq+0x48>)
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	4798      	blx	r3
 800c7d6:	b1c8      	cbz	r0, 800c80c <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800c7d8:	4b0f      	ldr	r3, [pc, #60]	; (800c818 <VerifyRfFreq+0x4c>)
 800c7da:	4423      	add	r3, r4
 800c7dc:	4a0f      	ldr	r2, [pc, #60]	; (800c81c <VerifyRfFreq+0x50>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d813      	bhi.n	800c80a <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800c7e2:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800c7e6:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800c7ea:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800c7ee:	fba2 1203 	umull	r1, r2, r2, r3
 800c7f2:	0c92      	lsrs	r2, r2, #18
 800c7f4:	490a      	ldr	r1, [pc, #40]	; (800c820 <VerifyRfFreq+0x54>)
 800c7f6:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800c7fa:	b942      	cbnz	r2, 800c80e <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800c7fc:	4b09      	ldr	r3, [pc, #36]	; (800c824 <VerifyRfFreq+0x58>)
 800c7fe:	4423      	add	r3, r4
 800c800:	4a09      	ldr	r2, [pc, #36]	; (800c828 <VerifyRfFreq+0x5c>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d902      	bls.n	800c80c <VerifyRfFreq+0x40>
    {
        return false;
 800c806:	2000      	movs	r0, #0
 800c808:	e000      	b.n	800c80c <VerifyRfFreq+0x40>
        return false;
 800c80a:	2000      	movs	r0, #0
    }
    return true;
}
 800c80c:	bd10      	pop	{r4, pc}
        return false;
 800c80e:	2000      	movs	r0, #0
 800c810:	e7fc      	b.n	800c80c <VerifyRfFreq+0x40>
 800c812:	bf00      	nop
 800c814:	08011df8 	.word	0x08011df8
 800c818:	c8f78f60 	.word	0xc8f78f60
 800c81c:	00401640 	.word	0x00401640
 800c820:	000927c0 	.word	0x000927c0
 800c824:	ca37fea0 	.word	0xca37fea0
 800c828:	01808580 	.word	0x01808580

0800c82c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800c832:	4b0a      	ldr	r3, [pc, #40]	; (800c85c <GetTimeOnAir+0x30>)
 800c834:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800c836:	490a      	ldr	r1, [pc, #40]	; (800c860 <GetTimeOnAir+0x34>)
 800c838:	f7ff f938 	bl	800baac <RegionCommonGetBandwidth>
 800c83c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c83e:	4b09      	ldr	r3, [pc, #36]	; (800c864 <GetTimeOnAir+0x38>)
 800c840:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c842:	2001      	movs	r0, #1
 800c844:	9003      	str	r0, [sp, #12]
 800c846:	b2e4      	uxtb	r4, r4
 800c848:	9402      	str	r4, [sp, #8]
 800c84a:	2200      	movs	r2, #0
 800c84c:	9201      	str	r2, [sp, #4]
 800c84e:	2208      	movs	r2, #8
 800c850:	9200      	str	r2, [sp, #0]
 800c852:	4603      	mov	r3, r0
 800c854:	4632      	mov	r2, r6
 800c856:	47a8      	blx	r5
}
 800c858:	b004      	add	sp, #16
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	080118bc 	.word	0x080118bc
 800c860:	08011868 	.word	0x08011868
 800c864:	08011df8 	.word	0x08011df8

0800c868 <LimitTxPower>:
{
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	4606      	mov	r6, r0
 800c86c:	4615      	mov	r5, r2
 800c86e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800c870:	f7ff f917 	bl	800baa2 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800c874:	2d04      	cmp	r5, #4
 800c876:	d105      	bne.n	800c884 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800c878:	4634      	mov	r4, r6
 800c87a:	2e02      	cmp	r6, #2
 800c87c:	bfb8      	it	lt
 800c87e:	2402      	movlt	r4, #2
}
 800c880:	4620      	mov	r0, r4
 800c882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c884:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800c886:	2204      	movs	r2, #4
 800c888:	2100      	movs	r1, #0
 800c88a:	4638      	mov	r0, r7
 800c88c:	f7fe feaf 	bl	800b5ee <RegionCommonCountChannels>
 800c890:	2831      	cmp	r0, #49	; 0x31
 800c892:	d8f5      	bhi.n	800c880 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800c894:	4634      	mov	r4, r6
 800c896:	2e05      	cmp	r6, #5
 800c898:	bfb8      	it	lt
 800c89a:	2405      	movlt	r4, #5
 800c89c:	e7f0      	b.n	800c880 <LimitTxPower+0x18>
	...

0800c8a0 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800c8a0:	b500      	push	{lr}
 800c8a2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800c8a8:	7803      	ldrb	r3, [r0, #0]
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	2b38      	cmp	r3, #56	; 0x38
 800c8ae:	d820      	bhi.n	800c8f2 <RegionUS915GetPhyParam+0x52>
 800c8b0:	e8df f003 	tbb	[pc, r3]
 800c8b4:	1f1f1f1d 	.word	0x1f1f1f1d
 800c8b8:	1f1f1f1f 	.word	0x1f1f1f1f
 800c8bc:	3e3b1f1f 	.word	0x3e3b1f1f
 800c8c0:	4d1f4741 	.word	0x4d1f4741
 800c8c4:	5d595551 	.word	0x5d595551
 800c8c8:	6e1f6561 	.word	0x6e1f6561
 800c8cc:	807a7471 	.word	0x807a7471
 800c8d0:	871f1f83 	.word	0x871f1f83
 800c8d4:	1f1f238a 	.word	0x1f1f238a
 800c8d8:	1f1f1f1f 	.word	0x1f1f1f1f
 800c8dc:	1f1f1f1f 	.word	0x1f1f1f1f
 800c8e0:	8d1f1f1f 	.word	0x8d1f1f1f
 800c8e4:	1fa19e94 	.word	0x1fa19e94
 800c8e8:	b1aeaba4 	.word	0xb1aeaba4
 800c8ec:	b7          	.byte	0xb7
 800c8ed:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800c8ee:	2308      	movs	r3, #8
 800c8f0:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_US915 */
    return phyParam;
}
 800c8f2:	9804      	ldr	r0, [sp, #16]
 800c8f4:	b007      	add	sp, #28
 800c8f6:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800c8fa:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c8fe:	f88d 3004 	strb.w	r3, [sp, #4]
 800c902:	2304      	movs	r3, #4
 800c904:	f88d 3005 	strb.w	r3, [sp, #5]
 800c908:	2300      	movs	r3, #0
 800c90a:	f88d 3006 	strb.w	r3, [sp, #6]
 800c90e:	2348      	movs	r3, #72	; 0x48
 800c910:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800c914:	4b46      	ldr	r3, [pc, #280]	; (800ca30 <RegionUS915GetPhyParam+0x190>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c91c:	9202      	str	r2, [sp, #8]
 800c91e:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800c920:	a801      	add	r0, sp, #4
 800c922:	f7ff f89f 	bl	800ba64 <RegionCommonGetNextLowerTxDr>
 800c926:	9004      	str	r0, [sp, #16]
            break;
 800c928:	e7e3      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800c92a:	2340      	movs	r3, #64	; 0x40
 800c92c:	9304      	str	r3, [sp, #16]
            break;
 800c92e:	e7e0      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800c930:	2320      	movs	r3, #32
 800c932:	9304      	str	r3, [sp, #16]
            break;
 800c934:	e7dd      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800c936:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c93a:	4a3e      	ldr	r2, [pc, #248]	; (800ca34 <RegionUS915GetPhyParam+0x194>)
 800c93c:	5cd3      	ldrb	r3, [r2, r3]
 800c93e:	9304      	str	r3, [sp, #16]
            break;
 800c940:	e7d7      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800c942:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c946:	4a3c      	ldr	r2, [pc, #240]	; (800ca38 <RegionUS915GetPhyParam+0x198>)
 800c948:	5cd3      	ldrb	r3, [r2, r3]
 800c94a:	9304      	str	r3, [sp, #16]
            break;
 800c94c:	e7d1      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800c94e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c952:	9304      	str	r3, [sp, #16]
            break;
 800c954:	e7cd      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800c956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c95a:	9304      	str	r3, [sp, #16]
            break;
 800c95c:	e7c9      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800c95e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c962:	9304      	str	r3, [sp, #16]
            break;
 800c964:	e7c5      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800c966:	f241 3388 	movw	r3, #5000	; 0x1388
 800c96a:	9304      	str	r3, [sp, #16]
            break;
 800c96c:	e7c1      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800c96e:	f241 7370 	movw	r3, #6000	; 0x1770
 800c972:	9304      	str	r3, [sp, #16]
            break;
 800c974:	e7bd      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800c976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c97a:	9304      	str	r3, [sp, #16]
            break;
 800c97c:	e7b9      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800c97e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c982:	482e      	ldr	r0, [pc, #184]	; (800ca3c <RegionUS915GetPhyParam+0x19c>)
 800c984:	f001 fc32 	bl	800e1ec <randr>
 800c988:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800c98c:	9004      	str	r0, [sp, #16]
            break;
 800c98e:	e7b0      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800c990:	4b2b      	ldr	r3, [pc, #172]	; (800ca40 <RegionUS915GetPhyParam+0x1a0>)
 800c992:	9304      	str	r3, [sp, #16]
            break;
 800c994:	e7ad      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800c996:	2308      	movs	r3, #8
 800c998:	9304      	str	r3, [sp, #16]
            break;
 800c99a:	e7aa      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c99c:	4b24      	ldr	r3, [pc, #144]	; (800ca30 <RegionUS915GetPhyParam+0x190>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800c9a4:	9304      	str	r3, [sp, #16]
            break;
 800c9a6:	e7a4      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800c9a8:	4b21      	ldr	r3, [pc, #132]	; (800ca30 <RegionUS915GetPhyParam+0x190>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800c9b0:	9304      	str	r3, [sp, #16]
            break;
 800c9b2:	e79e      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800c9b4:	2348      	movs	r3, #72	; 0x48
 800c9b6:	9304      	str	r3, [sp, #16]
            break;
 800c9b8:	e79b      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800c9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ca30 <RegionUS915GetPhyParam+0x190>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	9304      	str	r3, [sp, #16]
            break;
 800c9c0:	e797      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800c9c2:	4b20      	ldr	r3, [pc, #128]	; (800ca44 <RegionUS915GetPhyParam+0x1a4>)
 800c9c4:	9304      	str	r3, [sp, #16]
            break;
 800c9c6:	e794      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9304      	str	r3, [sp, #16]
            break;
 800c9cc:	e791      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800c9ce:	4a1e      	ldr	r2, [pc, #120]	; (800ca48 <RegionUS915GetPhyParam+0x1a8>)
 800c9d0:	491b      	ldr	r1, [pc, #108]	; (800ca40 <RegionUS915GetPhyParam+0x1a0>)
 800c9d2:	7900      	ldrb	r0, [r0, #4]
 800c9d4:	f7fe fce7 	bl	800b3a6 <RegionBaseUSCalcDownlinkFrequency>
 800c9d8:	9004      	str	r0, [sp, #16]
            break;
 800c9da:	e78a      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800c9dc:	2317      	movs	r3, #23
 800c9de:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800c9e2:	2305      	movs	r3, #5
 800c9e4:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800c9ee:	e780      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	9304      	str	r3, [sp, #16]
            break;
 800c9f4:	e77d      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	9304      	str	r3, [sp, #16]
            break;
 800c9fa:	e77a      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800c9fc:	4a12      	ldr	r2, [pc, #72]	; (800ca48 <RegionUS915GetPhyParam+0x1a8>)
 800c9fe:	4910      	ldr	r1, [pc, #64]	; (800ca40 <RegionUS915GetPhyParam+0x1a0>)
 800ca00:	7900      	ldrb	r0, [r0, #4]
 800ca02:	f7fe fcd0 	bl	800b3a6 <RegionBaseUSCalcDownlinkFrequency>
 800ca06:	9004      	str	r0, [sp, #16]
            break;
 800ca08:	e773      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800ca0a:	2308      	movs	r3, #8
 800ca0c:	9304      	str	r3, [sp, #16]
            break;
 800ca0e:	e770      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800ca10:	2308      	movs	r3, #8
 800ca12:	9304      	str	r3, [sp, #16]
            break;
 800ca14:	e76d      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800ca16:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ca1a:	4a0c      	ldr	r2, [pc, #48]	; (800ca4c <RegionUS915GetPhyParam+0x1ac>)
 800ca1c:	5cd3      	ldrb	r3, [r2, r3]
 800ca1e:	9304      	str	r3, [sp, #16]
            break;
 800ca20:	e767      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800ca22:	490b      	ldr	r1, [pc, #44]	; (800ca50 <RegionUS915GetPhyParam+0x1b0>)
 800ca24:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ca28:	f7ff f840 	bl	800baac <RegionCommonGetBandwidth>
 800ca2c:	9004      	str	r0, [sp, #16]
            break;
 800ca2e:	e760      	b.n	800c8f2 <RegionUS915GetPhyParam+0x52>
 800ca30:	2000103c 	.word	0x2000103c
 800ca34:	080118dc 	.word	0x080118dc
 800ca38:	080118cc 	.word	0x080118cc
 800ca3c:	fffffc18 	.word	0xfffffc18
 800ca40:	370870a0 	.word	0x370870a0
 800ca44:	4200999a 	.word	0x4200999a
 800ca48:	000927c0 	.word	0x000927c0
 800ca4c:	080118bc 	.word	0x080118bc
 800ca50:	08011868 	.word	0x08011868

0800ca54 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ca54:	b530      	push	{r4, r5, lr}
 800ca56:	b083      	sub	sp, #12
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ca58:	4b0b      	ldr	r3, [pc, #44]	; (800ca88 <RegionUS915SetBandTxDone+0x34>)
 800ca5a:	681d      	ldr	r5, [r3, #0]
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <RegionUS915SetBandTxDone+0x38>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	7803      	ldrb	r3, [r0, #0]
 800ca62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca6a:	7a5b      	ldrb	r3, [r3, #9]
 800ca6c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800ca70:	6903      	ldr	r3, [r0, #16]
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	68c3      	ldr	r3, [r0, #12]
 800ca76:	7842      	ldrb	r2, [r0, #1]
 800ca78:	6881      	ldr	r1, [r0, #8]
 800ca7a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800ca7e:	f7fe fddd 	bl	800b63c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 800ca82:	b003      	add	sp, #12
 800ca84:	bd30      	pop	{r4, r5, pc}
 800ca86:	bf00      	nop
 800ca88:	20001038 	.word	0x20001038
 800ca8c:	2000103c 	.word	0x2000103c

0800ca90 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800ca90:	b510      	push	{r4, lr}
 800ca92:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800ca94:	2301      	movs	r3, #1
 800ca96:	f8ad 3000 	strh.w	r3, [sp]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f88d 3002 	strb.w	r3, [sp, #2]
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	9302      	str	r3, [sp, #8]
 800caa4:	9303      	str	r3, [sp, #12]
 800caa6:	9304      	str	r3, [sp, #16]
 800caa8:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800caac:	7a04      	ldrb	r4, [r0, #8]
 800caae:	b17c      	cbz	r4, 800cad0 <RegionUS915InitDefaults+0x40>
 800cab0:	3c01      	subs	r4, #1
 800cab2:	b2e4      	uxtb	r4, r4
 800cab4:	2c01      	cmp	r4, #1
 800cab6:	f200 8082 	bhi.w	800cbbe <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800caba:	4b42      	ldr	r3, [pc, #264]	; (800cbc4 <RegionUS915InitDefaults+0x134>)
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	2206      	movs	r2, #6
 800cac0:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800cac4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cac8:	f7fe fda7 	bl	800b61a <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cacc:	2300      	movs	r3, #0
 800cace:	e074      	b.n	800cbba <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cad0:	6803      	ldr	r3, [r0, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d073      	beq.n	800cbbe <RegionUS915InitDefaults+0x12e>
 800cad6:	6842      	ldr	r2, [r0, #4]
 800cad8:	2a00      	cmp	r2, #0
 800cada:	d070      	beq.n	800cbbe <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800cadc:	493a      	ldr	r1, [pc, #232]	; (800cbc8 <RegionUS915InitDefaults+0x138>)
 800cade:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cae0:	4938      	ldr	r1, [pc, #224]	; (800cbc4 <RegionUS915InitDefaults+0x134>)
 800cae2:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800caea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800caee:	2218      	movs	r2, #24
 800caf0:	4669      	mov	r1, sp
 800caf2:	4618      	mov	r0, r3
 800caf4:	f001 fb87 	bl	800e206 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800caf8:	e011      	b.n	800cb1e <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800cafa:	4b32      	ldr	r3, [pc, #200]	; (800cbc4 <RegionUS915InitDefaults+0x134>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a33      	ldr	r2, [pc, #204]	; (800cbcc <RegionUS915InitDefaults+0x13c>)
 800cb00:	4933      	ldr	r1, [pc, #204]	; (800cbd0 <RegionUS915InitDefaults+0x140>)
 800cb02:	fb02 1204 	mla	r2, r2, r4, r1
 800cb06:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cb0a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800cb0e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800cb12:	2230      	movs	r2, #48	; 0x30
 800cb14:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cb16:	2200      	movs	r2, #0
 800cb18:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800cb1a:	3401      	adds	r4, #1
 800cb1c:	b2e4      	uxtb	r4, r4
 800cb1e:	2c3f      	cmp	r4, #63	; 0x3f
 800cb20:	d9eb      	bls.n	800cafa <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cb22:	2340      	movs	r3, #64	; 0x40
 800cb24:	e013      	b.n	800cb4e <RegionUS915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800cb26:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800cb2a:	4a26      	ldr	r2, [pc, #152]	; (800cbc4 <RegionUS915InitDefaults+0x134>)
 800cb2c:	6812      	ldr	r2, [r2, #0]
 800cb2e:	4c29      	ldr	r4, [pc, #164]	; (800cbd4 <RegionUS915InitDefaults+0x144>)
 800cb30:	4829      	ldr	r0, [pc, #164]	; (800cbd8 <RegionUS915InitDefaults+0x148>)
 800cb32:	fb04 0101 	mla	r1, r4, r1, r0
 800cb36:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800cb3a:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800cb3e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800cb42:	2144      	movs	r1, #68	; 0x44
 800cb44:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cb46:	2100      	movs	r1, #0
 800cb48:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b47      	cmp	r3, #71	; 0x47
 800cb50:	d9e9      	bls.n	800cb26 <RegionUS915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800cb52:	4c1c      	ldr	r4, [pc, #112]	; (800cbc4 <RegionUS915InitDefaults+0x134>)
 800cb54:	6820      	ldr	r0, [r4, #0]
 800cb56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb5a:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800cb5e:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800cb62:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800cb66:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800cb6a:	23ff      	movs	r3, #255	; 0xff
 800cb6c:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cb70:	2300      	movs	r3, #0
 800cb72:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cb76:	2206      	movs	r2, #6
 800cb78:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800cb7c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cb80:	f7fe fd4b 	bl	800b61a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800cb84:	4b10      	ldr	r3, [pc, #64]	; (800cbc8 <RegionUS915InitDefaults+0x138>)
 800cb86:	6818      	ldr	r0, [r3, #0]
 800cb88:	6821      	ldr	r1, [r4, #0]
 800cb8a:	2206      	movs	r2, #6
 800cb8c:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800cb90:	3090      	adds	r0, #144	; 0x90
 800cb92:	f7fe fd42 	bl	800b61a <RegionCommonChanMaskCopy>
            break;
 800cb96:	e012      	b.n	800cbbe <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cb98:	4a0b      	ldr	r2, [pc, #44]	; (800cbc8 <RegionUS915InitDefaults+0x138>)
 800cb9a:	6811      	ldr	r1, [r2, #0]
 800cb9c:	4a09      	ldr	r2, [pc, #36]	; (800cbc4 <RegionUS915InitDefaults+0x134>)
 800cb9e:	6812      	ldr	r2, [r2, #0]
 800cba0:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800cba4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800cba8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cbac:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800cbb0:	4022      	ands	r2, r4
 800cbb2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	d9ec      	bls.n	800cb98 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800cbbe:	b006      	add	sp, #24
 800cbc0:	bd10      	pop	{r4, pc}
 800cbc2:	bf00      	nop
 800cbc4:	2000103c 	.word	0x2000103c
 800cbc8:	20001038 	.word	0x20001038
 800cbcc:	00030d40 	.word	0x00030d40
 800cbd0:	35c80160 	.word	0x35c80160
 800cbd4:	00186a00 	.word	0x00186a00
 800cbd8:	35d2afc0 	.word	0x35d2afc0

0800cbdc <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cbdc:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800cbde:	290a      	cmp	r1, #10
 800cbe0:	d829      	bhi.n	800cc36 <RegionUS915Verify+0x5a>
 800cbe2:	e8df f001 	tbb	[pc, r1]
 800cbe6:	2806      	.short	0x2806
 800cbe8:	0a282828 	.word	0x0a282828
 800cbec:	1e28140a 	.word	0x1e28140a
 800cbf0:	1e          	.byte	0x1e
 800cbf1:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800cbf2:	6800      	ldr	r0, [r0, #0]
 800cbf4:	f7ff fdea 	bl	800c7cc <VerifyRfFreq>
 800cbf8:	e01e      	b.n	800cc38 <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800cbfa:	2204      	movs	r2, #4
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f990 0000 	ldrsb.w	r0, [r0]
 800cc02:	f7fe fc98 	bl	800b536 <RegionCommonValueInRange>
 800cc06:	3800      	subs	r0, #0
 800cc08:	bf18      	it	ne
 800cc0a:	2001      	movne	r0, #1
 800cc0c:	e014      	b.n	800cc38 <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800cc0e:	220d      	movs	r2, #13
 800cc10:	2108      	movs	r1, #8
 800cc12:	f990 0000 	ldrsb.w	r0, [r0]
 800cc16:	f7fe fc8e 	bl	800b536 <RegionCommonValueInRange>
 800cc1a:	3800      	subs	r0, #0
 800cc1c:	bf18      	it	ne
 800cc1e:	2001      	movne	r0, #1
 800cc20:	e00a      	b.n	800cc38 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800cc22:	220e      	movs	r2, #14
 800cc24:	2100      	movs	r1, #0
 800cc26:	f990 0000 	ldrsb.w	r0, [r0]
 800cc2a:	f7fe fc84 	bl	800b536 <RegionCommonValueInRange>
 800cc2e:	3800      	subs	r0, #0
 800cc30:	bf18      	it	ne
 800cc32:	2001      	movne	r0, #1
 800cc34:	e000      	b.n	800cc38 <RegionUS915Verify+0x5c>
{
 800cc36:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800cc38:	bd08      	pop	{r3, pc}
	...

0800cc3c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800cc3c:	7903      	ldrb	r3, [r0, #4]
 800cc3e:	2b10      	cmp	r3, #16
 800cc40:	d134      	bne.n	800ccac <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800cc42:	6803      	ldr	r3, [r0, #0]
 800cc44:	7bdb      	ldrb	r3, [r3, #15]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d130      	bne.n	800ccac <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	2a04      	cmp	r2, #4
 800cc50:	d82b      	bhi.n	800ccaa <RegionUS915ApplyCFList+0x6e>
{
 800cc52:	b4f0      	push	{r4, r5, r6, r7}
 800cc54:	e014      	b.n	800cc80 <RegionUS915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800cc56:	b2e4      	uxtb	r4, r4
 800cc58:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800cc5c:	4c14      	ldr	r4, [pc, #80]	; (800ccb0 <RegionUS915ApplyCFList+0x74>)
 800cc5e:	6826      	ldr	r6, [r4, #0]
 800cc60:	f501 74d8 	add.w	r4, r1, #432	; 0x1b0
 800cc64:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800cc68:	3148      	adds	r1, #72	; 0x48
 800cc6a:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 800cc6e:	402c      	ands	r4, r5
 800cc70:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800cc74:	3301      	adds	r3, #1
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	3202      	adds	r2, #2
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	2b04      	cmp	r3, #4
 800cc7e:	d812      	bhi.n	800cca6 <RegionUS915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800cc80:	6804      	ldr	r4, [r0, #0]
 800cc82:	490c      	ldr	r1, [pc, #48]	; (800ccb4 <RegionUS915ApplyCFList+0x78>)
 800cc84:	680d      	ldr	r5, [r1, #0]
 800cc86:	4619      	mov	r1, r3
 800cc88:	5ca4      	ldrb	r4, [r4, r2]
 800cc8a:	f503 77d8 	add.w	r7, r3, #432	; 0x1b0
 800cc8e:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800cc92:	6806      	ldr	r6, [r0, #0]
 800cc94:	4416      	add	r6, r2
 800cc96:	7876      	ldrb	r6, [r6, #1]
 800cc98:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800cc9c:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d1db      	bne.n	800cc5c <RegionUS915ApplyCFList+0x20>
 800cca4:	e7d7      	b.n	800cc56 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800cca6:	bcf0      	pop	{r4, r5, r6, r7}
 800cca8:	4770      	bx	lr
 800ccaa:	4770      	bx	lr
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	20001038 	.word	0x20001038
 800ccb4:	2000103c 	.word	0x2000103c

0800ccb8 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800ccbc:	2204      	movs	r2, #4
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	6800      	ldr	r0, [r0, #0]
 800ccc2:	f7fe fc94 	bl	800b5ee <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800ccc6:	2801      	cmp	r0, #1
 800ccc8:	d033      	beq.n	800cd32 <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800ccca:	792c      	ldrb	r4, [r5, #4]
 800cccc:	b11c      	cbz	r4, 800ccd6 <RegionUS915ChanMaskSet+0x1e>
 800ccce:	2c01      	cmp	r4, #1
 800ccd0:	d025      	beq.n	800cd1e <RegionUS915ChanMaskSet+0x66>
 800ccd2:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800ccd4:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ccd6:	4e18      	ldr	r6, [pc, #96]	; (800cd38 <RegionUS915ChanMaskSet+0x80>)
 800ccd8:	6830      	ldr	r0, [r6, #0]
 800ccda:	2206      	movs	r2, #6
 800ccdc:	6829      	ldr	r1, [r5, #0]
 800ccde:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cce2:	f7fe fc9a 	bl	800b61a <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800cce6:	6835      	ldr	r5, [r6, #0]
 800cce8:	f895 3374 	ldrb.w	r3, [r5, #884]	; 0x374
 800ccec:	f8a5 3374 	strh.w	r3, [r5, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f8a5 3376 	strh.w	r3, [r5, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ccf6:	2c05      	cmp	r4, #5
 800ccf8:	d80f      	bhi.n	800cd1a <RegionUS915ChanMaskSet+0x62>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800ccfa:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <RegionUS915ChanMaskSet+0x84>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800cd02:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800cd06:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800cd0a:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800cd0e:	4003      	ands	r3, r0
 800cd10:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cd14:	3401      	adds	r4, #1
 800cd16:	b2e4      	uxtb	r4, r4
 800cd18:	e7ed      	b.n	800ccf6 <RegionUS915ChanMaskSet+0x3e>
    return true;
 800cd1a:	2001      	movs	r0, #1
 800cd1c:	e7da      	b.n	800ccd4 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cd1e:	4b06      	ldr	r3, [pc, #24]	; (800cd38 <RegionUS915ChanMaskSet+0x80>)
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	2206      	movs	r2, #6
 800cd24:	6829      	ldr	r1, [r5, #0]
 800cd26:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800cd2a:	f7fe fc76 	bl	800b61a <RegionCommonChanMaskCopy>
    return true;
 800cd2e:	2001      	movs	r0, #1
            break;
 800cd30:	e7d0      	b.n	800ccd4 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800cd32:	2000      	movs	r0, #0
 800cd34:	e7ce      	b.n	800ccd4 <RegionUS915ChanMaskSet+0x1c>
 800cd36:	bf00      	nop
 800cd38:	2000103c 	.word	0x2000103c
 800cd3c:	20001038 	.word	0x20001038

0800cd40 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd42:	b083      	sub	sp, #12
 800cd44:	460e      	mov	r6, r1
 800cd46:	4617      	mov	r7, r2
 800cd48:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800cd4a:	280d      	cmp	r0, #13
 800cd4c:	bfa8      	it	ge
 800cd4e:	200d      	movge	r0, #13
 800cd50:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800cd52:	4d0f      	ldr	r5, [pc, #60]	; (800cd90 <RegionUS915ComputeRxWindowParameters+0x50>)
 800cd54:	4629      	mov	r1, r5
 800cd56:	f7fe fea9 	bl	800baac <RegionCommonGetBandwidth>
 800cd5a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800cd5c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800cd60:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800cd64:	4a0b      	ldr	r2, [pc, #44]	; (800cd94 <RegionUS915ComputeRxWindowParameters+0x54>)
 800cd66:	5cd0      	ldrb	r0, [r2, r3]
 800cd68:	f7fe fd70 	bl	800b84c <RegionCommonComputeSymbolTimeLoRa>
 800cd6c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800cd6e:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <RegionUS915ComputeRxWindowParameters+0x58>)
 800cd70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd72:	4798      	blx	r3
 800cd74:	4603      	mov	r3, r0
 800cd76:	f104 020c 	add.w	r2, r4, #12
 800cd7a:	9201      	str	r2, [sp, #4]
 800cd7c:	3408      	adds	r4, #8
 800cd7e:	9400      	str	r4, [sp, #0]
 800cd80:	463a      	mov	r2, r7
 800cd82:	4631      	mov	r1, r6
 800cd84:	4628      	mov	r0, r5
 800cd86:	f7fe fd6f 	bl	800b868 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800cd8a:	b003      	add	sp, #12
 800cd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	08011868 	.word	0x08011868
 800cd94:	080118bc 	.word	0x080118bc
 800cd98:	08011df8 	.word	0x08011df8

0800cd9c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cd9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cda0:	b08b      	sub	sp, #44	; 0x2c
 800cda2:	4604      	mov	r4, r0
 800cda4:	460e      	mov	r6, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800cda6:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800cdaa:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800cdac:	4b22      	ldr	r3, [pc, #136]	; (800ce38 <RegionUS915RxConfig+0x9c>)
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4798      	blx	r3
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d13d      	bne.n	800ce32 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800cdb6:	7ce3      	ldrb	r3, [r4, #19]
 800cdb8:	b933      	cbnz	r3, 800cdc8 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800cdba:	7825      	ldrb	r5, [r4, #0]
 800cdbc:	f005 0507 	and.w	r5, r5, #7
 800cdc0:	4a1e      	ldr	r2, [pc, #120]	; (800ce3c <RegionUS915RxConfig+0xa0>)
 800cdc2:	4b1f      	ldr	r3, [pc, #124]	; (800ce40 <RegionUS915RxConfig+0xa4>)
 800cdc4:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800cdc8:	4b1e      	ldr	r3, [pc, #120]	; (800ce44 <RegionUS915RxConfig+0xa8>)
 800cdca:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 800cdce:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800ce38 <RegionUS915RxConfig+0x9c>
 800cdd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800cdda:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800cdde:	7ca3      	ldrb	r3, [r4, #18]
 800cde0:	9309      	str	r3, [sp, #36]	; 0x24
 800cde2:	2001      	movs	r0, #1
 800cde4:	9008      	str	r0, [sp, #32]
 800cde6:	2200      	movs	r2, #0
 800cde8:	9207      	str	r2, [sp, #28]
 800cdea:	9206      	str	r2, [sp, #24]
 800cdec:	9205      	str	r2, [sp, #20]
 800cdee:	9204      	str	r2, [sp, #16]
 800cdf0:	9203      	str	r2, [sp, #12]
 800cdf2:	8923      	ldrh	r3, [r4, #8]
 800cdf4:	9302      	str	r3, [sp, #8]
 800cdf6:	2308      	movs	r3, #8
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	9200      	str	r2, [sp, #0]
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	464a      	mov	r2, r9
 800ce00:	78a1      	ldrb	r1, [r4, #2]
 800ce02:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ce04:	7c63      	ldrb	r3, [r4, #17]
 800ce06:	b18b      	cbz	r3, 800ce2c <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800ce08:	4b0f      	ldr	r3, [pc, #60]	; (800ce48 <RegionUS915RxConfig+0xac>)
 800ce0a:	5dd9      	ldrb	r1, [r3, r7]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ce0c:	4b0a      	ldr	r3, [pc, #40]	; (800ce38 <RegionUS915RxConfig+0x9c>)
 800ce0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce10:	310d      	adds	r1, #13
 800ce12:	b2c9      	uxtb	r1, r1
 800ce14:	2001      	movs	r0, #1
 800ce16:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ce18:	463a      	mov	r2, r7
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	7ce0      	ldrb	r0, [r4, #19]
 800ce1e:	f7fe fe57 	bl	800bad0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ce22:	7037      	strb	r7, [r6, #0]
    return true;
 800ce24:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800ce26:	b00b      	add	sp, #44	; 0x2c
 800ce28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800ce2c:	4b07      	ldr	r3, [pc, #28]	; (800ce4c <RegionUS915RxConfig+0xb0>)
 800ce2e:	5dd9      	ldrb	r1, [r3, r7]
 800ce30:	e7ec      	b.n	800ce0c <RegionUS915RxConfig+0x70>
        return false;
 800ce32:	2000      	movs	r0, #0
 800ce34:	e7f7      	b.n	800ce26 <RegionUS915RxConfig+0x8a>
 800ce36:	bf00      	nop
 800ce38:	08011df8 	.word	0x08011df8
 800ce3c:	000927c0 	.word	0x000927c0
 800ce40:	370870a0 	.word	0x370870a0
 800ce44:	080118bc 	.word	0x080118bc
 800ce48:	080118cc 	.word	0x080118cc
 800ce4c:	080118dc 	.word	0x080118dc

0800ce50 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	b08d      	sub	sp, #52	; 0x34
 800ce56:	4604      	mov	r4, r0
 800ce58:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce5a:	4690      	mov	r8, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800ce5c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800ce60:	4b32      	ldr	r3, [pc, #200]	; (800cf2c <RegionUS915TxConfig+0xdc>)
 800ce62:	f913 b002 	ldrsb.w	fp, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800ce66:	4b32      	ldr	r3, [pc, #200]	; (800cf30 <RegionUS915TxConfig+0xe0>)
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800cf3c <RegionUS915TxConfig+0xec>
 800ce6e:	f8da 3000 	ldr.w	r3, [sl]
 800ce72:	7821      	ldrb	r1, [r4, #0]
 800ce74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ce78:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ce7c:	7a49      	ldrb	r1, [r1, #9]
 800ce7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ce82:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ce86:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ce8a:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800ce8e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800ce92:	f7ff fce9 	bl	800c868 <LimitTxPower>
 800ce96:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800ce98:	4926      	ldr	r1, [pc, #152]	; (800cf34 <RegionUS915TxConfig+0xe4>)
 800ce9a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ce9e:	f7fe fe05 	bl	800baac <RegionCommonGetBandwidth>
 800cea2:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800cea4:	2200      	movs	r2, #0
 800cea6:	4924      	ldr	r1, [pc, #144]	; (800cf38 <RegionUS915TxConfig+0xe8>)
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f7fe fd17 	bl	800b8dc <RegionCommonComputeTxPower>
 800ceae:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ceb0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800cf40 <RegionUS915TxConfig+0xf0>
 800ceb4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800ceb8:	f8da 1000 	ldr.w	r1, [sl]
 800cebc:	7823      	ldrb	r3, [r4, #0]
 800cebe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cec2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800cec6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800cec8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cecc:	9308      	str	r3, [sp, #32]
 800cece:	2200      	movs	r2, #0
 800ced0:	9207      	str	r2, [sp, #28]
 800ced2:	9206      	str	r2, [sp, #24]
 800ced4:	9205      	str	r2, [sp, #20]
 800ced6:	2501      	movs	r5, #1
 800ced8:	9504      	str	r5, [sp, #16]
 800ceda:	9203      	str	r2, [sp, #12]
 800cedc:	2308      	movs	r3, #8
 800cede:	9302      	str	r3, [sp, #8]
 800cee0:	9501      	str	r5, [sp, #4]
 800cee2:	f8cd b000 	str.w	fp, [sp]
 800cee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee8:	4639      	mov	r1, r7
 800ceea:	4628      	mov	r0, r5
 800ceec:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cef0:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800cef2:	f8da 2000 	ldr.w	r2, [sl]
 800cef6:	7823      	ldrb	r3, [r4, #0]
 800cef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cefc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800cf00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cf04:	f7fe fe14 	bl	800bb30 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800cf08:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800cf0c:	7b21      	ldrb	r1, [r4, #12]
 800cf0e:	4628      	mov	r0, r5
 800cf10:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800cf12:	89a1      	ldrh	r1, [r4, #12]
 800cf14:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cf18:	f7ff fc88 	bl	800c82c <GetTimeOnAir>
 800cf1c:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800cf20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf22:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800cf24:	4628      	mov	r0, r5
 800cf26:	b00d      	add	sp, #52	; 0x34
 800cf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2c:	080118bc 	.word	0x080118bc
 800cf30:	20001038 	.word	0x20001038
 800cf34:	08011868 	.word	0x08011868
 800cf38:	41f00000 	.word	0x41f00000
 800cf3c:	2000103c 	.word	0x2000103c
 800cf40:	08011df8 	.word	0x08011df8

0800cf44 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cf44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf48:	b091      	sub	sp, #68	; 0x44
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	4689      	mov	r9, r1
 800cf4e:	4690      	mov	r8, r2
 800cf50:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cf52:	2400      	movs	r4, #0
 800cf54:	940e      	str	r4, [sp, #56]	; 0x38
 800cf56:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800cf5a:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf5c:	940c      	str	r4, [sp, #48]	; 0x30
 800cf5e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800cf60:	4b95      	ldr	r3, [pc, #596]	; (800d1b8 <RegionUS915LinkAdrReq+0x274>)
 800cf62:	6819      	ldr	r1, [r3, #0]
 800cf64:	2206      	movs	r2, #6
 800cf66:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800cf6a:	a80b      	add	r0, sp, #44	; 0x2c
 800cf6c:	f7fe fb55 	bl	800b61a <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cf70:	e00d      	b.n	800cf8e <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800cf72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf76:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800cf7a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800cf7e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800cf82:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800cf86:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800cf8a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cf8e:	7a33      	ldrb	r3, [r6, #8]
 800cf90:	42a3      	cmp	r3, r4
 800cf92:	d978      	bls.n	800d086 <RegionUS915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800cf94:	6870      	ldr	r0, [r6, #4]
 800cf96:	a90e      	add	r1, sp, #56	; 0x38
 800cf98:	4420      	add	r0, r4
 800cf9a:	f7fe fbef 	bl	800b77c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d071      	beq.n	800d086 <RegionUS915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 800cfa2:	4404      	add	r4, r0
 800cfa4:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800cfa6:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 800cfaa:	2d06      	cmp	r5, #6
 800cfac:	d0e1      	beq.n	800cf72 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800cfae:	2d07      	cmp	r5, #7
 800cfb0:	d009      	beq.n	800cfc6 <RegionUS915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800cfb2:	2d05      	cmp	r5, #5
 800cfb4:	d064      	beq.n	800d080 <RegionUS915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800cfb6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800cfba:	aa10      	add	r2, sp, #64	; 0x40
 800cfbc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800cfc0:	f825 3c14 	strh.w	r3, [r5, #-20]
 800cfc4:	e7e3      	b.n	800cf8e <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800cfcc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800cfd0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800cfd4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800cfd8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800cfdc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800cfe0:	e7d5      	b.n	800cf8e <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800cfe2:	aa10      	add	r2, sp, #64	; 0x40
 800cfe4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800cfe8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800cfec:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800cff0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800cff4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800cff8:	4313      	orrs	r3, r2
 800cffa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800cffe:	3101      	adds	r1, #1
 800d000:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800d002:	3501      	adds	r5, #1
 800d004:	b2ed      	uxtb	r5, r5
 800d006:	2d07      	cmp	r5, #7
 800d008:	d8c1      	bhi.n	800cf8e <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800d00a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d00e:	2301      	movs	r3, #1
 800d010:	40ab      	lsls	r3, r5
 800d012:	421a      	tst	r2, r3
 800d014:	d011      	beq.n	800d03a <RegionUS915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 800d016:	f015 0f01 	tst.w	r5, #1
 800d01a:	d1e2      	bne.n	800cfe2 <RegionUS915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800d01c:	aa10      	add	r2, sp, #64	; 0x40
 800d01e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d022:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d026:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800d02a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d02e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d032:	4313      	orrs	r3, r2
 800d034:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d038:	e7e3      	b.n	800d002 <RegionUS915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 800d03a:	f015 0f01 	tst.w	r5, #1
 800d03e:	d10f      	bne.n	800d060 <RegionUS915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800d040:	aa10      	add	r2, sp, #64	; 0x40
 800d042:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d046:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d04a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d04e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d052:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d056:	ea22 0303 	bic.w	r3, r2, r3
 800d05a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d05e:	e7d0      	b.n	800d002 <RegionUS915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800d060:	aa10      	add	r2, sp, #64	; 0x40
 800d062:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800d066:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800d06a:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d06e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d072:	ea22 0303 	bic.w	r3, r2, r3
 800d076:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d07a:	3101      	adds	r1, #1
 800d07c:	b2c9      	uxtb	r1, r1
 800d07e:	e7c0      	b.n	800d002 <RegionUS915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 800d080:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 800d082:	4629      	mov	r1, r5
 800d084:	e7bf      	b.n	800d006 <RegionUS915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d086:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	dd58      	ble.n	800d140 <RegionUS915LinkAdrReq+0x1fc>
 800d08e:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d090:	2302      	movs	r3, #2
 800d092:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d096:	7a73      	ldrb	r3, [r6, #9]
 800d098:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800d09c:	a809      	add	r0, sp, #36	; 0x24
 800d09e:	f7ff fbff 	bl	800c8a0 <RegionUS915GetPhyParam>
 800d0a2:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800d0a4:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d0a8:	7ab3      	ldrb	r3, [r6, #10]
 800d0aa:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d0ae:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d0b2:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d0b6:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d0ba:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d0be:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d0c2:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d0c6:	f996 300b 	ldrsb.w	r3, [r6, #11]
 800d0ca:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d0ce:	f996 300c 	ldrsb.w	r3, [r6, #12]
 800d0d2:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d0d6:	f996 300d 	ldrsb.w	r3, [r6, #13]
 800d0da:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800d0de:	2348      	movs	r3, #72	; 0x48
 800d0e0:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800d0e4:	ab0b      	add	r3, sp, #44	; 0x2c
 800d0e6:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d0e8:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800d0ec:	2304      	movs	r3, #4
 800d0ee:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d0f2:	4b31      	ldr	r3, [pc, #196]	; (800d1b8 <RegionUS915LinkAdrReq+0x274>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800d0f8:	230e      	movs	r3, #14
 800d0fa:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800d0fe:	2300      	movs	r3, #0
 800d100:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d104:	6833      	ldr	r3, [r6, #0]
 800d106:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d108:	ab0e      	add	r3, sp, #56	; 0x38
 800d10a:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800d10e:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800d112:	4668      	mov	r0, sp
 800d114:	f7fe fb4e 	bl	800b7b4 <RegionCommonLinkAdrReqVerifyParams>
 800d118:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d11a:	2807      	cmp	r0, #7
 800d11c:	d01b      	beq.n	800d156 <RegionUS915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d11e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d122:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d126:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d12a:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d12e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d132:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d134:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d136:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800d138:	4628      	mov	r0, r5
 800d13a:	b011      	add	sp, #68	; 0x44
 800d13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d140:	2204      	movs	r2, #4
 800d142:	2100      	movs	r1, #0
 800d144:	a80b      	add	r0, sp, #44	; 0x2c
 800d146:	f7fe fa52 	bl	800b5ee <RegionCommonCountChannels>
 800d14a:	2801      	cmp	r0, #1
 800d14c:	d901      	bls.n	800d152 <RegionUS915LinkAdrReq+0x20e>
 800d14e:	2507      	movs	r5, #7
 800d150:	e79e      	b.n	800d090 <RegionUS915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 800d152:	2506      	movs	r5, #6
 800d154:	e79c      	b.n	800d090 <RegionUS915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800d156:	4e18      	ldr	r6, [pc, #96]	; (800d1b8 <RegionUS915LinkAdrReq+0x274>)
 800d158:	6830      	ldr	r0, [r6, #0]
 800d15a:	2206      	movs	r2, #6
 800d15c:	a90b      	add	r1, sp, #44	; 0x2c
 800d15e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d162:	f7fe fa5a 	bl	800b61a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800d166:	4b15      	ldr	r3, [pc, #84]	; (800d1bc <RegionUS915LinkAdrReq+0x278>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6832      	ldr	r2, [r6, #0]
 800d16c:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800d170:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800d174:	4001      	ands	r1, r0
 800d176:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800d17a:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800d17e:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800d182:	4001      	ands	r1, r0
 800d184:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800d188:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800d18c:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800d190:	4001      	ands	r1, r0
 800d192:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800d196:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800d19a:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800d19e:	4001      	ands	r1, r0
 800d1a0:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d1a4:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800d1a8:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800d1ac:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800d1b0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800d1b4:	e7b3      	b.n	800d11e <RegionUS915LinkAdrReq+0x1da>
 800d1b6:	bf00      	nop
 800d1b8:	2000103c 	.word	0x2000103c
 800d1bc:	20001038 	.word	0x20001038

0800d1c0 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800d1c4:	6840      	ldr	r0, [r0, #4]
 800d1c6:	f7ff fb01 	bl	800c7cc <VerifyRfFreq>
 800d1ca:	b310      	cbz	r0, 800d212 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800d1cc:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800d1ce:	220d      	movs	r2, #13
 800d1d0:	2108      	movs	r1, #8
 800d1d2:	f994 0000 	ldrsb.w	r0, [r4]
 800d1d6:	f7fe f9ae 	bl	800b536 <RegionCommonValueInRange>
 800d1da:	b908      	cbnz	r0, 800d1e0 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800d1dc:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d1e0:	2207      	movs	r2, #7
 800d1e2:	2105      	movs	r1, #5
 800d1e4:	f994 0000 	ldrsb.w	r0, [r4]
 800d1e8:	f7fe f9a5 	bl	800b536 <RegionCommonValueInRange>
 800d1ec:	2801      	cmp	r0, #1
 800d1ee:	d003      	beq.n	800d1f8 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800d1f0:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d1f4:	2b0d      	cmp	r3, #13
 800d1f6:	dd01      	ble.n	800d1fc <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800d1f8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800d1fc:	2203      	movs	r2, #3
 800d1fe:	2100      	movs	r1, #0
 800d200:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d204:	f7fe f997 	bl	800b536 <RegionCommonValueInRange>
 800d208:	b908      	cbnz	r0, 800d20e <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d20a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800d20e:	4628      	mov	r0, r5
 800d210:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d212:	2506      	movs	r5, #6
 800d214:	e7db      	b.n	800d1ce <RegionUS915RxParamSetupReq+0xe>

0800d216 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d216:	f04f 30ff 	mov.w	r0, #4294967295
 800d21a:	4770      	bx	lr

0800d21c <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	4770      	bx	lr

0800d222 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d222:	f04f 30ff 	mov.w	r0, #4294967295
 800d226:	4770      	bx	lr

0800d228 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800d228:	b9b1      	cbnz	r1, 800d258 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800d22a:	4b10      	ldr	r3, [pc, #64]	; (800d26c <RegionUS915AlternateDr+0x44>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800d232:	3301      	adds	r3, #1
 800d234:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800d238:	4b0c      	ldr	r3, [pc, #48]	; (800d26c <RegionUS915AlternateDr+0x44>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800d240:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <RegionUS915AlternateDr+0x48>)
 800d242:	fba3 1302 	umull	r1, r3, r3, r2
 800d246:	085b      	lsrs	r3, r3, #1
 800d248:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d252:	d009      	beq.n	800d268 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800d254:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800d256:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800d258:	4b04      	ldr	r3, [pc, #16]	; (800d26c <RegionUS915AlternateDr+0x44>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800d260:	3b01      	subs	r3, #1
 800d262:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800d266:	e7e7      	b.n	800d238 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800d268:	2004      	movs	r0, #4
 800d26a:	4770      	bx	lr
 800d26c:	20001038 	.word	0x20001038
 800d270:	38e38e39 	.word	0x38e38e39

0800d274 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	b0a4      	sub	sp, #144	; 0x90
 800d27a:	4604      	mov	r4, r0
 800d27c:	460e      	mov	r6, r1
 800d27e:	4690      	mov	r8, r2
 800d280:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800d282:	2500      	movs	r5, #0
 800d284:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800d288:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800d28c:	9511      	str	r5, [sp, #68]	; 0x44
 800d28e:	2244      	movs	r2, #68	; 0x44
 800d290:	4629      	mov	r1, r5
 800d292:	a812      	add	r0, sp, #72	; 0x48
 800d294:	f003 ff04 	bl	80110a0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800d298:	4b4c      	ldr	r3, [pc, #304]	; (800d3cc <RegionUS915NextChannel+0x158>)
 800d29a:	6818      	ldr	r0, [r3, #0]
 800d29c:	2204      	movs	r2, #4
 800d29e:	4629      	mov	r1, r5
 800d2a0:	3090      	adds	r0, #144	; 0x90
 800d2a2:	f7fe f9a4 	bl	800b5ee <RegionCommonCountChannels>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d05c      	beq.n	800d364 <RegionUS915NextChannel+0xf0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800d2aa:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	dd0a      	ble.n	800d2c8 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800d2b2:	4b46      	ldr	r3, [pc, #280]	; (800d3cc <RegionUS915NextChannel+0x158>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800d2ba:	b92a      	cbnz	r2, 800d2c8 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d2bc:	4a44      	ldr	r2, [pc, #272]	; (800d3d0 <RegionUS915NextChannel+0x15c>)
 800d2be:	6812      	ldr	r2, [r2, #0]
 800d2c0:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800d2c4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d2c8:	7a63      	ldrb	r3, [r4, #9]
 800d2ca:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d2ce:	7a23      	ldrb	r3, [r4, #8]
 800d2d0:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800d2d4:	4b3d      	ldr	r3, [pc, #244]	; (800d3cc <RegionUS915NextChannel+0x158>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800d2dc:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d2de:	4a3c      	ldr	r2, [pc, #240]	; (800d3d0 <RegionUS915NextChannel+0x15c>)
 800d2e0:	6812      	ldr	r2, [r2, #0]
 800d2e2:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d2e4:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800d2e6:	2348      	movs	r3, #72	; 0x48
 800d2e8:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d2f0:	6823      	ldr	r3, [r4, #0]
 800d2f2:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d2f4:	6863      	ldr	r3, [r4, #4]
 800d2f6:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d2f8:	7aa3      	ldrb	r3, [r4, #10]
 800d2fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800d2fe:	2301      	movs	r3, #1
 800d300:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d304:	ab0c      	add	r3, sp, #48	; 0x30
 800d306:	6921      	ldr	r1, [r4, #16]
 800d308:	68e0      	ldr	r0, [r4, #12]
 800d30a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d30e:	7d23      	ldrb	r3, [r4, #20]
 800d310:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d314:	8ae1      	ldrh	r1, [r4, #22]
 800d316:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d31a:	f7ff fa87 	bl	800c82c <GetTimeOnAir>
 800d31e:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d320:	ab03      	add	r3, sp, #12
 800d322:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d324:	f8cd 8004 	str.w	r8, [sp, #4]
 800d328:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800d332:	aa11      	add	r2, sp, #68	; 0x44
 800d334:	4639      	mov	r1, r7
 800d336:	a809      	add	r0, sp, #36	; 0x24
 800d338:	f7fe fb4c 	bl	800b9d4 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d33c:	4605      	mov	r5, r0
 800d33e:	2800      	cmp	r0, #0
 800d340:	d13f      	bne.n	800d3c2 <RegionUS915NextChannel+0x14e>
    {
        if( nextChanParams->Joined == true )
 800d342:	7a63      	ldrb	r3, [r4, #9]
 800d344:	b9eb      	cbnz	r3, 800d382 <RegionUS915NextChannel+0x10e>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800d346:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d34a:	b32b      	cbz	r3, 800d398 <RegionUS915NextChannel+0x124>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800d34c:	4603      	mov	r3, r0
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800d34e:	4a1f      	ldr	r2, [pc, #124]	; (800d3cc <RegionUS915NextChannel+0x158>)
 800d350:	6812      	ldr	r2, [r2, #0]
 800d352:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800d356:	411a      	asrs	r2, r3
 800d358:	f012 0f01 	tst.w	r2, #1
 800d35c:	d128      	bne.n	800d3b0 <RegionUS915NextChannel+0x13c>
                {
                    i++;
 800d35e:	3301      	adds	r3, #1
 800d360:	b2db      	uxtb	r3, r3
 800d362:	e7f4      	b.n	800d34e <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800d364:	4d19      	ldr	r5, [pc, #100]	; (800d3cc <RegionUS915NextChannel+0x158>)
 800d366:	6828      	ldr	r0, [r5, #0]
 800d368:	4b19      	ldr	r3, [pc, #100]	; (800d3d0 <RegionUS915NextChannel+0x15c>)
 800d36a:	6819      	ldr	r1, [r3, #0]
 800d36c:	2204      	movs	r2, #4
 800d36e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800d372:	3090      	adds	r0, #144	; 0x90
 800d374:	f7fe f951 	bl	800b61a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800d380:	e793      	b.n	800d2aa <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d382:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800d386:	3901      	subs	r1, #1
 800d388:	f000 ff30 	bl	800e1ec <randr>
 800d38c:	ab24      	add	r3, sp, #144	; 0x90
 800d38e:	4418      	add	r0, r3
 800d390:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800d394:	7033      	strb	r3, [r6, #0]
 800d396:	e00d      	b.n	800d3b4 <RegionUS915NextChannel+0x140>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800d398:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <RegionUS915NextChannel+0x158>)
 800d39a:	6818      	ldr	r0, [r3, #0]
 800d39c:	4632      	mov	r2, r6
 800d39e:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800d3a2:	3090      	adds	r0, #144	; 0x90
 800d3a4:	f7fd ffb3 	bl	800b30e <RegionBaseUSComputeNext125kHzJoinChannel>
 800d3a8:	2803      	cmp	r0, #3
 800d3aa:	d103      	bne.n	800d3b4 <RegionUS915NextChannel+0x140>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d3ac:	4605      	mov	r5, r0
 800d3ae:	e008      	b.n	800d3c2 <RegionUS915NextChannel+0x14e>
                }
                *channel = 64 + i;
 800d3b0:	3340      	adds	r3, #64	; 0x40
 800d3b2:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <RegionUS915NextChannel+0x158>)
 800d3b6:	6818      	ldr	r0, [r3, #0]
 800d3b8:	2248      	movs	r2, #72	; 0x48
 800d3ba:	7831      	ldrb	r1, [r6, #0]
 800d3bc:	3090      	adds	r0, #144	; 0x90
 800d3be:	f7fe f8fc 	bl	800b5ba <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	b024      	add	sp, #144	; 0x90
 800d3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20001038 	.word	0x20001038
 800d3d0:	2000103c 	.word	0x2000103c

0800d3d4 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800d3d8:	4b14      	ldr	r3, [pc, #80]	; (800d42c <RegionUS915SetContinuousWave+0x58>)
 800d3da:	6819      	ldr	r1, [r3, #0]
 800d3dc:	4d14      	ldr	r5, [pc, #80]	; (800d430 <RegionUS915SetContinuousWave+0x5c>)
 800d3de:	682b      	ldr	r3, [r5, #0]
 800d3e0:	7802      	ldrb	r2, [r0, #0]
 800d3e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d3ea:	7a52      	ldrb	r2, [r2, #9]
 800d3ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3f0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d3f4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800d3f8:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d3fc:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800d400:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d404:	f7ff fa30 	bl	800c868 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d408:	682a      	ldr	r2, [r5, #0]
 800d40a:	7823      	ldrb	r3, [r4, #0]
 800d40c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d410:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800d414:	2200      	movs	r2, #0
 800d416:	4907      	ldr	r1, [pc, #28]	; (800d434 <RegionUS915SetContinuousWave+0x60>)
 800d418:	f7fe fa60 	bl	800b8dc <RegionCommonComputeTxPower>
 800d41c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d41e:	4b06      	ldr	r3, [pc, #24]	; (800d438 <RegionUS915SetContinuousWave+0x64>)
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	89a2      	ldrh	r2, [r4, #12]
 800d424:	4628      	mov	r0, r5
 800d426:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800d428:	bd38      	pop	{r3, r4, r5, pc}
 800d42a:	bf00      	nop
 800d42c:	20001038 	.word	0x20001038
 800d430:	2000103c 	.word	0x2000103c
 800d434:	41f00000 	.word	0x41f00000
 800d438:	08011df8 	.word	0x08011df8

0800d43c <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800d43c:	4b04      	ldr	r3, [pc, #16]	; (800d450 <RegionUS915ApplyDrOffset+0x14>)
 800d43e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d442:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800d444:	2800      	cmp	r0, #0
 800d446:	db01      	blt.n	800d44c <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800d448:	b2c0      	uxtb	r0, r0
 800d44a:	4770      	bx	lr
        datarate = DR_0;
 800d44c:	2000      	movs	r0, #0
 800d44e:	e7fb      	b.n	800d448 <RegionUS915ApplyDrOffset+0xc>
 800d450:	080118a8 	.word	0x080118a8

0800d454 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d454:	b510      	push	{r4, lr}
 800d456:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800d458:	2210      	movs	r2, #16
 800d45a:	2100      	movs	r1, #0
 800d45c:	30f1      	adds	r0, #241	; 0xf1
 800d45e:	f000 fee8 	bl	800e232 <memset1>
    ctx->M_n = 0;
 800d462:	2100      	movs	r1, #0
 800d464:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d468:	22f0      	movs	r2, #240	; 0xf0
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 fee1 	bl	800e232 <memset1>
}
 800d470:	bd10      	pop	{r4, pc}

0800d472 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d472:	b508      	push	{r3, lr}
 800d474:	4602      	mov	r2, r0
 800d476:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d478:	2110      	movs	r1, #16
 800d47a:	f000 fb05 	bl	800da88 <lorawan_aes_set_key>
}
 800d47e:	bd08      	pop	{r3, pc}

0800d480 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d484:	b085      	sub	sp, #20
 800d486:	4607      	mov	r7, r0
 800d488:	4688      	mov	r8, r1
 800d48a:	4691      	mov	r9, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d48c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800d490:	2b00      	cmp	r3, #0
 800d492:	d04b      	beq.n	800d52c <AES_CMAC_Update+0xac>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d494:	f1c3 0510 	rsb	r5, r3, #16
 800d498:	462c      	mov	r4, r5
 800d49a:	4295      	cmp	r5, r2
 800d49c:	bf28      	it	cs
 800d49e:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d4a0:	f200 1001 	addw	r0, r0, #257	; 0x101
 800d4a4:	b2a2      	uxth	r2, r4
 800d4a6:	4418      	add	r0, r3
 800d4a8:	f000 fead 	bl	800e206 <memcpy1>
        ctx->M_n += mlen;
 800d4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4b0:	4423      	add	r3, r4
 800d4b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d4b6:	2b0f      	cmp	r3, #15
 800d4b8:	d951      	bls.n	800d55e <AES_CMAC_Update+0xde>
 800d4ba:	454d      	cmp	r5, r9
 800d4bc:	d24f      	bcs.n	800d55e <AES_CMAC_Update+0xde>
            return;
        XOR( ctx->M_last, ctx->X );
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e008      	b.n	800d4d4 <AES_CMAC_Update+0x54>
 800d4c2:	18fa      	adds	r2, r7, r3
 800d4c4:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800d4c8:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800d4cc:	4041      	eors	r1, r0
 800d4ce:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	2b0f      	cmp	r3, #15
 800d4d6:	ddf4      	ble.n	800d4c2 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d4d8:	f107 05f1 	add.w	r5, r7, #241	; 0xf1
 800d4dc:	2210      	movs	r2, #16
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4668      	mov	r0, sp
 800d4e2:	f000 fe90 	bl	800e206 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d4e6:	463a      	mov	r2, r7
 800d4e8:	4669      	mov	r1, sp
 800d4ea:	4668      	mov	r0, sp
 800d4ec:	f000 fb56 	bl	800db9c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d4f0:	2210      	movs	r2, #16
 800d4f2:	4669      	mov	r1, sp
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f000 fe86 	bl	800e206 <memcpy1>

        data += mlen;
 800d4fa:	44a0      	add	r8, r4
        len -= mlen;
 800d4fc:	eba9 0904 	sub.w	r9, r9, r4
 800d500:	e014      	b.n	800d52c <AES_CMAC_Update+0xac>
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d502:	f107 04f1 	add.w	r4, r7, #241	; 0xf1
 800d506:	2210      	movs	r2, #16
 800d508:	4621      	mov	r1, r4
 800d50a:	4668      	mov	r0, sp
 800d50c:	f000 fe7b 	bl	800e206 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d510:	463a      	mov	r2, r7
 800d512:	4669      	mov	r1, sp
 800d514:	4668      	mov	r0, sp
 800d516:	f000 fb41 	bl	800db9c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d51a:	2210      	movs	r2, #16
 800d51c:	4669      	mov	r1, sp
 800d51e:	4620      	mov	r0, r4
 800d520:	f000 fe71 	bl	800e206 <memcpy1>

        data += 16;
 800d524:	f108 0810 	add.w	r8, r8, #16
        len -= 16;
 800d528:	f1a9 0910 	sub.w	r9, r9, #16
    while( len > 16 )
 800d52c:	f1b9 0f10 	cmp.w	r9, #16
 800d530:	d90c      	bls.n	800d54c <AES_CMAC_Update+0xcc>
        XOR( data, ctx->X );
 800d532:	2300      	movs	r3, #0
 800d534:	2b0f      	cmp	r3, #15
 800d536:	dce4      	bgt.n	800d502 <AES_CMAC_Update+0x82>
 800d538:	18fd      	adds	r5, r7, r3
 800d53a:	f895 40f1 	ldrb.w	r4, [r5, #241]	; 0xf1
 800d53e:	f818 6003 	ldrb.w	r6, [r8, r3]
 800d542:	4074      	eors	r4, r6
 800d544:	f885 40f1 	strb.w	r4, [r5, #241]	; 0xf1
 800d548:	3301      	adds	r3, #1
 800d54a:	e7f3      	b.n	800d534 <AES_CMAC_Update+0xb4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d54c:	fa1f f289 	uxth.w	r2, r9
 800d550:	4641      	mov	r1, r8
 800d552:	f207 1001 	addw	r0, r7, #257	; 0x101
 800d556:	f000 fe56 	bl	800e206 <memcpy1>
    ctx->M_n = len;
 800d55a:	f8c7 9114 	str.w	r9, [r7, #276]	; 0x114
}
 800d55e:	b005      	add	sp, #20
 800d560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d564 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	4606      	mov	r6, r0
 800d56a:	460d      	mov	r5, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d56c:	2210      	movs	r2, #16
 800d56e:	2100      	movs	r1, #0
 800d570:	eb0d 0002 	add.w	r0, sp, r2
 800d574:	f000 fe5d 	bl	800e232 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d578:	462a      	mov	r2, r5
 800d57a:	a904      	add	r1, sp, #16
 800d57c:	4608      	mov	r0, r1
 800d57e:	f000 fb0d 	bl	800db9c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d582:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	db19      	blt.n	800d5be <AES_CMAC_Final+0x5a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800d58a:	2300      	movs	r3, #0
 800d58c:	e026      	b.n	800d5dc <AES_CMAC_Final+0x78>
        LSHIFT( K, K );
 800d58e:	aa08      	add	r2, sp, #32
 800d590:	18d1      	adds	r1, r2, r3
 800d592:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d596:	3301      	adds	r3, #1
 800d598:	441a      	add	r2, r3
 800d59a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d59e:	09d2      	lsrs	r2, r2, #7
 800d5a0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d5a4:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d5a8:	2b0e      	cmp	r3, #14
 800d5aa:	ddf0      	ble.n	800d58e <AES_CMAC_Final+0x2a>
 800d5ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d5b0:	005b      	lsls	r3, r3, #1
 800d5b2:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 800d5b4:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d5b8:	f88d 301f 	strb.w	r3, [sp, #31]
 800d5bc:	e015      	b.n	800d5ea <AES_CMAC_Final+0x86>
        LSHIFT( K, K );
 800d5be:	2300      	movs	r3, #0
 800d5c0:	e7f2      	b.n	800d5a8 <AES_CMAC_Final+0x44>
        LSHIFT( K, K );
 800d5c2:	aa08      	add	r2, sp, #32
 800d5c4:	18d1      	adds	r1, r2, r3
 800d5c6:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	441a      	add	r2, r3
 800d5ce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d5d2:	09d2      	lsrs	r2, r2, #7
 800d5d4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d5d8:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d5dc:	2b0e      	cmp	r3, #14
 800d5de:	ddf0      	ble.n	800d5c2 <AES_CMAC_Final+0x5e>
 800d5e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800d5ea:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 800d5ee:	2810      	cmp	r0, #16
 800d5f0:	d014      	beq.n	800d61c <AES_CMAC_Final+0xb8>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d5f2:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	db1f      	blt.n	800d63a <AES_CMAC_Final+0xd6>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	2b0e      	cmp	r3, #14
 800d5fe:	dc36      	bgt.n	800d66e <AES_CMAC_Final+0x10a>
 800d600:	aa08      	add	r2, sp, #32
 800d602:	18d1      	adds	r1, r2, r3
 800d604:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800d608:	3301      	adds	r3, #1
 800d60a:	441a      	add	r2, r3
 800d60c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d610:	09d2      	lsrs	r2, r2, #7
 800d612:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800d616:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d61a:	e7ef      	b.n	800d5fc <AES_CMAC_Final+0x98>
        XOR( K, ctx->M_last );
 800d61c:	2300      	movs	r3, #0
 800d61e:	2b0f      	cmp	r3, #15
 800d620:	dc49      	bgt.n	800d6b6 <AES_CMAC_Final+0x152>
 800d622:	18e9      	adds	r1, r5, r3
 800d624:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d628:	a808      	add	r0, sp, #32
 800d62a:	4418      	add	r0, r3
 800d62c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d630:	4042      	eors	r2, r0
 800d632:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800d636:	3301      	adds	r3, #1
 800d638:	e7f1      	b.n	800d61e <AES_CMAC_Final+0xba>
            LSHIFT( K, K );
 800d63a:	2300      	movs	r3, #0
 800d63c:	2b0e      	cmp	r3, #14
 800d63e:	dc0d      	bgt.n	800d65c <AES_CMAC_Final+0xf8>
 800d640:	aa08      	add	r2, sp, #32
 800d642:	18d1      	adds	r1, r2, r3
 800d644:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800d648:	3301      	adds	r3, #1
 800d64a:	441a      	add	r2, r3
 800d64c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d650:	09d2      	lsrs	r2, r2, #7
 800d652:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800d656:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d65a:	e7ef      	b.n	800d63c <AES_CMAC_Final+0xd8>
 800d65c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 800d664:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d668:	f88d 301f 	strb.w	r3, [sp, #31]
 800d66c:	e004      	b.n	800d678 <AES_CMAC_Final+0x114>
            LSHIFT( K, K );
 800d66e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d678:	4428      	add	r0, r5
 800d67a:	2380      	movs	r3, #128	; 0x80
 800d67c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d680:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800d684:	3301      	adds	r3, #1
 800d686:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	d804      	bhi.n	800d698 <AES_CMAC_Final+0x134>
            ctx->M_last[ctx->M_n] = 0;
 800d68e:	442b      	add	r3, r5
 800d690:	2200      	movs	r2, #0
 800d692:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800d696:	e7f3      	b.n	800d680 <AES_CMAC_Final+0x11c>

        XOR( K, ctx->M_last );
 800d698:	2300      	movs	r3, #0
 800d69a:	2b0f      	cmp	r3, #15
 800d69c:	dc0b      	bgt.n	800d6b6 <AES_CMAC_Final+0x152>
 800d69e:	18e9      	adds	r1, r5, r3
 800d6a0:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d6a4:	a808      	add	r0, sp, #32
 800d6a6:	4418      	add	r0, r3
 800d6a8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d6ac:	4042      	eors	r2, r0
 800d6ae:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	e7f1      	b.n	800d69a <AES_CMAC_Final+0x136>
 800d6b6:	2300      	movs	r3, #0
    }
    XOR( ctx->M_last, ctx->X );
 800d6b8:	2b0f      	cmp	r3, #15
 800d6ba:	dc09      	bgt.n	800d6d0 <AES_CMAC_Final+0x16c>
 800d6bc:	18ea      	adds	r2, r5, r3
 800d6be:	f892 40f1 	ldrb.w	r4, [r2, #241]	; 0xf1
 800d6c2:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800d6c6:	404c      	eors	r4, r1
 800d6c8:	f882 40f1 	strb.w	r4, [r2, #241]	; 0xf1
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	e7f3      	b.n	800d6b8 <AES_CMAC_Final+0x154>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d6d0:	2210      	movs	r2, #16
 800d6d2:	f105 01f1 	add.w	r1, r5, #241	; 0xf1
 800d6d6:	4668      	mov	r0, sp
 800d6d8:	f000 fd95 	bl	800e206 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d6dc:	462a      	mov	r2, r5
 800d6de:	4631      	mov	r1, r6
 800d6e0:	4668      	mov	r0, sp
 800d6e2:	f000 fa5b 	bl	800db9c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d6e6:	2210      	movs	r2, #16
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	eb0d 0002 	add.w	r0, sp, r2
 800d6ee:	f000 fda0 	bl	800e232 <memset1>
}
 800d6f2:	b008      	add	sp, #32
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}

0800d6f6 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d6f6:	780b      	ldrb	r3, [r1, #0]
 800d6f8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d6fa:	784b      	ldrb	r3, [r1, #1]
 800d6fc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d6fe:	788b      	ldrb	r3, [r1, #2]
 800d700:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d702:	78cb      	ldrb	r3, [r1, #3]
 800d704:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d706:	790b      	ldrb	r3, [r1, #4]
 800d708:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d70a:	794b      	ldrb	r3, [r1, #5]
 800d70c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d70e:	798b      	ldrb	r3, [r1, #6]
 800d710:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d712:	79cb      	ldrb	r3, [r1, #7]
 800d714:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d716:	7a0b      	ldrb	r3, [r1, #8]
 800d718:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d71a:	7a4b      	ldrb	r3, [r1, #9]
 800d71c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d71e:	7a8b      	ldrb	r3, [r1, #10]
 800d720:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d722:	7acb      	ldrb	r3, [r1, #11]
 800d724:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d726:	7b0b      	ldrb	r3, [r1, #12]
 800d728:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d72a:	7b4b      	ldrb	r3, [r1, #13]
 800d72c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d72e:	7b8b      	ldrb	r3, [r1, #14]
 800d730:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d732:	7bcb      	ldrb	r3, [r1, #15]
 800d734:	73c3      	strb	r3, [r0, #15]
#endif
}
 800d736:	4770      	bx	lr

0800d738 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800d738:	1e53      	subs	r3, r2, #1
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	b12a      	cbz	r2, 800d74a <copy_block_nn+0x12>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d742:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800d746:	461a      	mov	r2, r3
 800d748:	e7f6      	b.n	800d738 <copy_block_nn>
}
 800d74a:	4770      	bx	lr

0800d74c <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d74c:	780b      	ldrb	r3, [r1, #0]
 800d74e:	7802      	ldrb	r2, [r0, #0]
 800d750:	4053      	eors	r3, r2
 800d752:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d754:	784b      	ldrb	r3, [r1, #1]
 800d756:	7842      	ldrb	r2, [r0, #1]
 800d758:	4053      	eors	r3, r2
 800d75a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d75c:	788b      	ldrb	r3, [r1, #2]
 800d75e:	7882      	ldrb	r2, [r0, #2]
 800d760:	4053      	eors	r3, r2
 800d762:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d764:	78cb      	ldrb	r3, [r1, #3]
 800d766:	78c2      	ldrb	r2, [r0, #3]
 800d768:	4053      	eors	r3, r2
 800d76a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d76c:	790b      	ldrb	r3, [r1, #4]
 800d76e:	7902      	ldrb	r2, [r0, #4]
 800d770:	4053      	eors	r3, r2
 800d772:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d774:	794b      	ldrb	r3, [r1, #5]
 800d776:	7942      	ldrb	r2, [r0, #5]
 800d778:	4053      	eors	r3, r2
 800d77a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d77c:	798b      	ldrb	r3, [r1, #6]
 800d77e:	7982      	ldrb	r2, [r0, #6]
 800d780:	4053      	eors	r3, r2
 800d782:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d784:	79cb      	ldrb	r3, [r1, #7]
 800d786:	79c2      	ldrb	r2, [r0, #7]
 800d788:	4053      	eors	r3, r2
 800d78a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d78c:	7a0b      	ldrb	r3, [r1, #8]
 800d78e:	7a02      	ldrb	r2, [r0, #8]
 800d790:	4053      	eors	r3, r2
 800d792:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d794:	7a4b      	ldrb	r3, [r1, #9]
 800d796:	7a42      	ldrb	r2, [r0, #9]
 800d798:	4053      	eors	r3, r2
 800d79a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d79c:	7a8b      	ldrb	r3, [r1, #10]
 800d79e:	7a82      	ldrb	r2, [r0, #10]
 800d7a0:	4053      	eors	r3, r2
 800d7a2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d7a4:	7acb      	ldrb	r3, [r1, #11]
 800d7a6:	7ac2      	ldrb	r2, [r0, #11]
 800d7a8:	4053      	eors	r3, r2
 800d7aa:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d7ac:	7b0b      	ldrb	r3, [r1, #12]
 800d7ae:	7b02      	ldrb	r2, [r0, #12]
 800d7b0:	4053      	eors	r3, r2
 800d7b2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d7b4:	7b4b      	ldrb	r3, [r1, #13]
 800d7b6:	7b42      	ldrb	r2, [r0, #13]
 800d7b8:	4053      	eors	r3, r2
 800d7ba:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d7bc:	7b8b      	ldrb	r3, [r1, #14]
 800d7be:	7b82      	ldrb	r2, [r0, #14]
 800d7c0:	4053      	eors	r3, r2
 800d7c2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d7c4:	7bcb      	ldrb	r3, [r1, #15]
 800d7c6:	7bc2      	ldrb	r2, [r0, #15]
 800d7c8:	4053      	eors	r3, r2
 800d7ca:	73c3      	strb	r3, [r0, #15]
#endif
}
 800d7cc:	4770      	bx	lr

0800d7ce <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d7ce:	b410      	push	{r4}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d7d0:	780b      	ldrb	r3, [r1, #0]
 800d7d2:	7814      	ldrb	r4, [r2, #0]
 800d7d4:	4063      	eors	r3, r4
 800d7d6:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d7d8:	784b      	ldrb	r3, [r1, #1]
 800d7da:	7854      	ldrb	r4, [r2, #1]
 800d7dc:	4063      	eors	r3, r4
 800d7de:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d7e0:	788b      	ldrb	r3, [r1, #2]
 800d7e2:	7894      	ldrb	r4, [r2, #2]
 800d7e4:	4063      	eors	r3, r4
 800d7e6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d7e8:	78cb      	ldrb	r3, [r1, #3]
 800d7ea:	78d4      	ldrb	r4, [r2, #3]
 800d7ec:	4063      	eors	r3, r4
 800d7ee:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d7f0:	790b      	ldrb	r3, [r1, #4]
 800d7f2:	7914      	ldrb	r4, [r2, #4]
 800d7f4:	4063      	eors	r3, r4
 800d7f6:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d7f8:	794b      	ldrb	r3, [r1, #5]
 800d7fa:	7954      	ldrb	r4, [r2, #5]
 800d7fc:	4063      	eors	r3, r4
 800d7fe:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d800:	798b      	ldrb	r3, [r1, #6]
 800d802:	7994      	ldrb	r4, [r2, #6]
 800d804:	4063      	eors	r3, r4
 800d806:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d808:	79cb      	ldrb	r3, [r1, #7]
 800d80a:	79d4      	ldrb	r4, [r2, #7]
 800d80c:	4063      	eors	r3, r4
 800d80e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d810:	7a0b      	ldrb	r3, [r1, #8]
 800d812:	7a14      	ldrb	r4, [r2, #8]
 800d814:	4063      	eors	r3, r4
 800d816:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d818:	7a4b      	ldrb	r3, [r1, #9]
 800d81a:	7a54      	ldrb	r4, [r2, #9]
 800d81c:	4063      	eors	r3, r4
 800d81e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d820:	7a8b      	ldrb	r3, [r1, #10]
 800d822:	7a94      	ldrb	r4, [r2, #10]
 800d824:	4063      	eors	r3, r4
 800d826:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d828:	7acb      	ldrb	r3, [r1, #11]
 800d82a:	7ad4      	ldrb	r4, [r2, #11]
 800d82c:	4063      	eors	r3, r4
 800d82e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d830:	7b0b      	ldrb	r3, [r1, #12]
 800d832:	7b14      	ldrb	r4, [r2, #12]
 800d834:	4063      	eors	r3, r4
 800d836:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d838:	7b4b      	ldrb	r3, [r1, #13]
 800d83a:	7b54      	ldrb	r4, [r2, #13]
 800d83c:	4063      	eors	r3, r4
 800d83e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d840:	7b8b      	ldrb	r3, [r1, #14]
 800d842:	7b94      	ldrb	r4, [r2, #14]
 800d844:	4063      	eors	r3, r4
 800d846:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d848:	7bcb      	ldrb	r3, [r1, #15]
 800d84a:	7bd2      	ldrb	r2, [r2, #15]
 800d84c:	4053      	eors	r3, r2
 800d84e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d850:	bc10      	pop	{r4}
 800d852:	4770      	bx	lr

0800d854 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d854:	b508      	push	{r3, lr}
    xor_block(d, k);
 800d856:	f7ff ff79 	bl	800d74c <xor_block>
}
 800d85a:	bd08      	pop	{r3, pc}

0800d85c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d85c:	7802      	ldrb	r2, [r0, #0]
 800d85e:	4b18      	ldr	r3, [pc, #96]	; (800d8c0 <shift_sub_rows+0x64>)
 800d860:	5c9a      	ldrb	r2, [r3, r2]
 800d862:	7002      	strb	r2, [r0, #0]
 800d864:	7902      	ldrb	r2, [r0, #4]
 800d866:	5c9a      	ldrb	r2, [r3, r2]
 800d868:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d86a:	7a02      	ldrb	r2, [r0, #8]
 800d86c:	5c9a      	ldrb	r2, [r3, r2]
 800d86e:	7202      	strb	r2, [r0, #8]
 800d870:	7b02      	ldrb	r2, [r0, #12]
 800d872:	5c9a      	ldrb	r2, [r3, r2]
 800d874:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d876:	7842      	ldrb	r2, [r0, #1]
 800d878:	7941      	ldrb	r1, [r0, #5]
 800d87a:	5c59      	ldrb	r1, [r3, r1]
 800d87c:	7041      	strb	r1, [r0, #1]
 800d87e:	7a41      	ldrb	r1, [r0, #9]
 800d880:	5c59      	ldrb	r1, [r3, r1]
 800d882:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d884:	7b41      	ldrb	r1, [r0, #13]
 800d886:	5c59      	ldrb	r1, [r3, r1]
 800d888:	7241      	strb	r1, [r0, #9]
 800d88a:	5c9a      	ldrb	r2, [r3, r2]
 800d88c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d88e:	7882      	ldrb	r2, [r0, #2]
 800d890:	7a81      	ldrb	r1, [r0, #10]
 800d892:	5c59      	ldrb	r1, [r3, r1]
 800d894:	7081      	strb	r1, [r0, #2]
 800d896:	5c9a      	ldrb	r2, [r3, r2]
 800d898:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d89a:	7982      	ldrb	r2, [r0, #6]
 800d89c:	7b81      	ldrb	r1, [r0, #14]
 800d89e:	5c59      	ldrb	r1, [r3, r1]
 800d8a0:	7181      	strb	r1, [r0, #6]
 800d8a2:	5c9a      	ldrb	r2, [r3, r2]
 800d8a4:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d8a6:	7bc2      	ldrb	r2, [r0, #15]
 800d8a8:	7ac1      	ldrb	r1, [r0, #11]
 800d8aa:	5c59      	ldrb	r1, [r3, r1]
 800d8ac:	73c1      	strb	r1, [r0, #15]
 800d8ae:	79c1      	ldrb	r1, [r0, #7]
 800d8b0:	5c59      	ldrb	r1, [r3, r1]
 800d8b2:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d8b4:	78c1      	ldrb	r1, [r0, #3]
 800d8b6:	5c59      	ldrb	r1, [r3, r1]
 800d8b8:	71c1      	strb	r1, [r0, #7]
 800d8ba:	5c9b      	ldrb	r3, [r3, r2]
 800d8bc:	70c3      	strb	r3, [r0, #3]
}
 800d8be:	4770      	bx	lr
 800d8c0:	08011aec 	.word	0x08011aec

0800d8c4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	4604      	mov	r4, r0
    block_copy(st, dt);
 800d8cc:	4601      	mov	r1, r0
 800d8ce:	4668      	mov	r0, sp
 800d8d0:	f7ff ff11 	bl	800d6f6 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d8d4:	f89d c000 	ldrb.w	ip, [sp]
 800d8d8:	4b68      	ldr	r3, [pc, #416]	; (800da7c <mix_sub_columns+0x1b8>)
 800d8da:	f813 000c 	ldrb.w	r0, [r3, ip]
 800d8de:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d8e2:	4a67      	ldr	r2, [pc, #412]	; (800da80 <mix_sub_columns+0x1bc>)
 800d8e4:	f812 9008 	ldrb.w	r9, [r2, r8]
 800d8e8:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800d8ec:	4965      	ldr	r1, [pc, #404]	; (800da84 <mix_sub_columns+0x1c0>)
 800d8ee:	f811 500e 	ldrb.w	r5, [r1, lr]
 800d8f2:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800d8f6:	5dce      	ldrb	r6, [r1, r7]
 800d8f8:	ea80 0009 	eor.w	r0, r0, r9
 800d8fc:	4068      	eors	r0, r5
 800d8fe:	4070      	eors	r0, r6
 800d900:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d902:	f811 000c 	ldrb.w	r0, [r1, ip]
 800d906:	f813 a008 	ldrb.w	sl, [r3, r8]
 800d90a:	f812 900e 	ldrb.w	r9, [r2, lr]
 800d90e:	ea80 0a0a 	eor.w	sl, r0, sl
 800d912:	ea89 090a 	eor.w	r9, r9, sl
 800d916:	ea86 0609 	eor.w	r6, r6, r9
 800d91a:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d91c:	f811 8008 	ldrb.w	r8, [r1, r8]
 800d920:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800d924:	5dd6      	ldrb	r6, [r2, r7]
 800d926:	ea80 0008 	eor.w	r0, r0, r8
 800d92a:	ea8e 0000 	eor.w	r0, lr, r0
 800d92e:	4070      	eors	r0, r6
 800d930:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d932:	f812 600c 	ldrb.w	r6, [r2, ip]
 800d936:	5dd8      	ldrb	r0, [r3, r7]
 800d938:	ea86 0608 	eor.w	r6, r6, r8
 800d93c:	4075      	eors	r5, r6
 800d93e:	4045      	eors	r5, r0
 800d940:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d942:	f89d c004 	ldrb.w	ip, [sp, #4]
 800d946:	f813 000c 	ldrb.w	r0, [r3, ip]
 800d94a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800d94e:	f812 9008 	ldrb.w	r9, [r2, r8]
 800d952:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800d956:	f811 500e 	ldrb.w	r5, [r1, lr]
 800d95a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800d95e:	5dce      	ldrb	r6, [r1, r7]
 800d960:	ea80 0009 	eor.w	r0, r0, r9
 800d964:	4068      	eors	r0, r5
 800d966:	4070      	eors	r0, r6
 800d968:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d96a:	f811 000c 	ldrb.w	r0, [r1, ip]
 800d96e:	f813 a008 	ldrb.w	sl, [r3, r8]
 800d972:	f812 900e 	ldrb.w	r9, [r2, lr]
 800d976:	ea80 0a0a 	eor.w	sl, r0, sl
 800d97a:	ea89 090a 	eor.w	r9, r9, sl
 800d97e:	ea86 0609 	eor.w	r6, r6, r9
 800d982:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d984:	f811 8008 	ldrb.w	r8, [r1, r8]
 800d988:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800d98c:	5dd6      	ldrb	r6, [r2, r7]
 800d98e:	ea80 0008 	eor.w	r0, r0, r8
 800d992:	ea8e 0000 	eor.w	r0, lr, r0
 800d996:	4070      	eors	r0, r6
 800d998:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d99a:	f812 600c 	ldrb.w	r6, [r2, ip]
 800d99e:	5dd8      	ldrb	r0, [r3, r7]
 800d9a0:	ea86 0608 	eor.w	r6, r6, r8
 800d9a4:	4075      	eors	r5, r6
 800d9a6:	4045      	eors	r5, r0
 800d9a8:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d9aa:	f89d c008 	ldrb.w	ip, [sp, #8]
 800d9ae:	f813 000c 	ldrb.w	r0, [r3, ip]
 800d9b2:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800d9b6:	f812 9008 	ldrb.w	r9, [r2, r8]
 800d9ba:	f89d e002 	ldrb.w	lr, [sp, #2]
 800d9be:	f811 500e 	ldrb.w	r5, [r1, lr]
 800d9c2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800d9c6:	5dce      	ldrb	r6, [r1, r7]
 800d9c8:	ea80 0009 	eor.w	r0, r0, r9
 800d9cc:	4068      	eors	r0, r5
 800d9ce:	4070      	eors	r0, r6
 800d9d0:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d9d2:	f811 000c 	ldrb.w	r0, [r1, ip]
 800d9d6:	f813 a008 	ldrb.w	sl, [r3, r8]
 800d9da:	f812 900e 	ldrb.w	r9, [r2, lr]
 800d9de:	ea80 0a0a 	eor.w	sl, r0, sl
 800d9e2:	ea89 090a 	eor.w	r9, r9, sl
 800d9e6:	ea86 0609 	eor.w	r6, r6, r9
 800d9ea:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d9ec:	f811 8008 	ldrb.w	r8, [r1, r8]
 800d9f0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800d9f4:	5dd6      	ldrb	r6, [r2, r7]
 800d9f6:	ea80 0008 	eor.w	r0, r0, r8
 800d9fa:	ea8e 0000 	eor.w	r0, lr, r0
 800d9fe:	4070      	eors	r0, r6
 800da00:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800da02:	f812 600c 	ldrb.w	r6, [r2, ip]
 800da06:	5dd8      	ldrb	r0, [r3, r7]
 800da08:	ea86 0608 	eor.w	r6, r6, r8
 800da0c:	4075      	eors	r5, r6
 800da0e:	4045      	eors	r5, r0
 800da10:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800da12:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800da16:	f813 000c 	ldrb.w	r0, [r3, ip]
 800da1a:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800da1e:	f812 9008 	ldrb.w	r9, [r2, r8]
 800da22:	f89d e006 	ldrb.w	lr, [sp, #6]
 800da26:	f811 500e 	ldrb.w	r5, [r1, lr]
 800da2a:	f89d 700b 	ldrb.w	r7, [sp, #11]
 800da2e:	5dce      	ldrb	r6, [r1, r7]
 800da30:	ea80 0009 	eor.w	r0, r0, r9
 800da34:	4068      	eors	r0, r5
 800da36:	4070      	eors	r0, r6
 800da38:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800da3a:	f811 000c 	ldrb.w	r0, [r1, ip]
 800da3e:	f813 a008 	ldrb.w	sl, [r3, r8]
 800da42:	f812 900e 	ldrb.w	r9, [r2, lr]
 800da46:	ea80 0a0a 	eor.w	sl, r0, sl
 800da4a:	ea89 090a 	eor.w	r9, r9, sl
 800da4e:	ea86 0609 	eor.w	r6, r6, r9
 800da52:	7366      	strb	r6, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800da54:	f811 1008 	ldrb.w	r1, [r1, r8]
 800da58:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800da5c:	5dd6      	ldrb	r6, [r2, r7]
 800da5e:	4048      	eors	r0, r1
 800da60:	ea8e 0000 	eor.w	r0, lr, r0
 800da64:	4070      	eors	r0, r6
 800da66:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800da68:	f812 200c 	ldrb.w	r2, [r2, ip]
 800da6c:	5ddb      	ldrb	r3, [r3, r7]
 800da6e:	4051      	eors	r1, r2
 800da70:	404d      	eors	r5, r1
 800da72:	405d      	eors	r5, r3
 800da74:	73e5      	strb	r5, [r4, #15]
  }
 800da76:	b004      	add	sp, #16
 800da78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da7c:	080118ec 	.word	0x080118ec
 800da80:	080119ec 	.word	0x080119ec
 800da84:	08011aec 	.word	0x08011aec

0800da88 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800da88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da8c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800da8e:	f1a1 0310 	sub.w	r3, r1, #16
 800da92:	b2da      	uxtb	r2, r3
 800da94:	2a10      	cmp	r2, #16
 800da96:	d807      	bhi.n	800daa8 <lorawan_aes_set_key+0x20>
 800da98:	460d      	mov	r5, r1
 800da9a:	2301      	movs	r3, #1
 800da9c:	4093      	lsls	r3, r2
 800da9e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800daa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800daa6:	b92b      	cbnz	r3, 800dab4 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800daae:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800dab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800dab4:	460a      	mov	r2, r1
 800dab6:	4601      	mov	r1, r0
 800dab8:	4620      	mov	r0, r4
 800daba:	f7ff fe3d 	bl	800d738 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800dabe:	f105 031c 	add.w	r3, r5, #28
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	b2df      	uxtb	r7, r3
    ctx->rnd = (hi >> 4) - 1;
 800dac8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800dacc:	3b01      	subs	r3, #1
 800dace:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dad2:	462b      	mov	r3, r5
 800dad4:	2601      	movs	r6, #1
 800dad6:	e028      	b.n	800db2a <lorawan_aes_set_key+0xa2>
        else if( keylen > 24 && cc % keylen == 16 )
 800dad8:	2d18      	cmp	r5, #24
 800dada:	d901      	bls.n	800dae0 <lorawan_aes_set_key+0x58>
 800dadc:	2a10      	cmp	r2, #16
 800dade:	d04f      	beq.n	800db80 <lorawan_aes_set_key+0xf8>
        tt = cc - keylen;
 800dae0:	1b5a      	subs	r2, r3, r5
 800dae2:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800dae4:	f814 9002 	ldrb.w	r9, [r4, r2]
 800dae8:	ea89 0808 	eor.w	r8, r9, r8
 800daec:	f804 8001 	strb.w	r8, [r4, r1]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800daf0:	f102 0801 	add.w	r8, r2, #1
 800daf4:	f814 8008 	ldrb.w	r8, [r4, r8]
 800daf8:	f101 0901 	add.w	r9, r1, #1
 800dafc:	ea88 0e0e 	eor.w	lr, r8, lr
 800db00:	f804 e009 	strb.w	lr, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800db04:	f102 0e02 	add.w	lr, r2, #2
 800db08:	f814 e00e 	ldrb.w	lr, [r4, lr]
 800db0c:	f101 0802 	add.w	r8, r1, #2
 800db10:	ea8e 0c0c 	eor.w	ip, lr, ip
 800db14:	f804 c008 	strb.w	ip, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800db18:	3203      	adds	r2, #3
 800db1a:	f814 c002 	ldrb.w	ip, [r4, r2]
 800db1e:	1cca      	adds	r2, r1, #3
 800db20:	ea8c 0000 	eor.w	r0, ip, r0
 800db24:	54a0      	strb	r0, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800db26:	3304      	adds	r3, #4
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	42bb      	cmp	r3, r7
 800db2c:	d231      	bcs.n	800db92 <lorawan_aes_set_key+0x10a>
        t0 = ctx->ksch[cc - 4];
 800db2e:	4619      	mov	r1, r3
 800db30:	1f1a      	subs	r2, r3, #4
 800db32:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800db36:	1eda      	subs	r2, r3, #3
 800db38:	f814 e002 	ldrb.w	lr, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800db3c:	1e9a      	subs	r2, r3, #2
 800db3e:	f814 c002 	ldrb.w	ip, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800db42:	1e5a      	subs	r2, r3, #1
 800db44:	5ca0      	ldrb	r0, [r4, r2]
        if( cc % keylen == 0 )
 800db46:	fbb3 f2f5 	udiv	r2, r3, r5
 800db4a:	fb05 3212 	mls	r2, r5, r2, r3
 800db4e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800db52:	d1c1      	bne.n	800dad8 <lorawan_aes_set_key+0x50>
            t0 = s_box(t1) ^ rc;
 800db54:	4a10      	ldr	r2, [pc, #64]	; (800db98 <lorawan_aes_set_key+0x110>)
 800db56:	f812 900e 	ldrb.w	r9, [r2, lr]
 800db5a:	ea89 0906 	eor.w	r9, r9, r6
            t1 = s_box(t2);
 800db5e:	f812 e00c 	ldrb.w	lr, [r2, ip]
            t2 = s_box(t3);
 800db62:	f812 c000 	ldrb.w	ip, [r2, r0]
            t3 = s_box(tt);
 800db66:	f812 0008 	ldrb.w	r0, [r2, r8]
            rc = f2(rc);
 800db6a:	09f2      	lsrs	r2, r6, #7
 800db6c:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800db70:	4442      	add	r2, r8
 800db72:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800db76:	ea82 0646 	eor.w	r6, r2, r6, lsl #1
 800db7a:	b2f6      	uxtb	r6, r6
            t0 = s_box(t1) ^ rc;
 800db7c:	46c8      	mov	r8, r9
 800db7e:	e7af      	b.n	800dae0 <lorawan_aes_set_key+0x58>
            t0 = s_box(t0);
 800db80:	4a05      	ldr	r2, [pc, #20]	; (800db98 <lorawan_aes_set_key+0x110>)
 800db82:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800db86:	f812 e00e 	ldrb.w	lr, [r2, lr]
            t2 = s_box(t2);
 800db8a:	f812 c00c 	ldrb.w	ip, [r2, ip]
            t3 = s_box(t3);
 800db8e:	5c10      	ldrb	r0, [r2, r0]
 800db90:	e7a6      	b.n	800dae0 <lorawan_aes_set_key+0x58>
    return 0;
 800db92:	2000      	movs	r0, #0
 800db94:	e78c      	b.n	800dab0 <lorawan_aes_set_key+0x28>
 800db96:	bf00      	nop
 800db98:	08011aec 	.word	0x08011aec

0800db9c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800db9c:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800dba0:	b323      	cbz	r3, 800dbec <lorawan_aes_encrypt+0x50>
{
 800dba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba4:	b085      	sub	sp, #20
 800dba6:	460f      	mov	r7, r1
 800dba8:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800dbaa:	4616      	mov	r6, r2
 800dbac:	4601      	mov	r1, r0
 800dbae:	4668      	mov	r0, sp
 800dbb0:	f7ff fe0d 	bl	800d7ce <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800dbb4:	2401      	movs	r4, #1
 800dbb6:	e009      	b.n	800dbcc <lorawan_aes_encrypt+0x30>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800dbb8:	4668      	mov	r0, sp
 800dbba:	f7ff fe83 	bl	800d8c4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800dbbe:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 800dbc2:	4668      	mov	r0, sp
 800dbc4:	f7ff fe46 	bl	800d854 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800dbc8:	3401      	adds	r4, #1
 800dbca:	b2e4      	uxtb	r4, r4
 800dbcc:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800dbd0:	42a3      	cmp	r3, r4
 800dbd2:	d8f1      	bhi.n	800dbb8 <lorawan_aes_encrypt+0x1c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800dbd4:	4668      	mov	r0, sp
 800dbd6:	f7ff fe41 	bl	800d85c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800dbda:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800dbde:	4669      	mov	r1, sp
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f7ff fdf4 	bl	800d7ce <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800dbe6:	2000      	movs	r0, #0
}
 800dbe8:	b005      	add	sp, #20
 800dbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( uint8_t )-1;
 800dbec:	20ff      	movs	r0, #255	; 0xff
}
 800dbee:	4770      	bx	lr

0800dbf0 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	2b09      	cmp	r3, #9
 800dbf4:	d816      	bhi.n	800dc24 <GetKeyByID+0x34>
{
 800dbf6:	b430      	push	{r4, r5}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dbf8:	4a0b      	ldr	r2, [pc, #44]	; (800dc28 <GetKeyByID+0x38>)
 800dbfa:	6814      	ldr	r4, [r2, #0]
 800dbfc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800dc00:	4422      	add	r2, r4
 800dc02:	7c12      	ldrb	r2, [r2, #16]
 800dc04:	4282      	cmp	r2, r0
 800dc06:	d006      	beq.n	800dc16 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dc08:	3301      	adds	r3, #1
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d9f3      	bls.n	800dbf8 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc10:	2003      	movs	r0, #3
}
 800dc12:	bc30      	pop	{r4, r5}
 800dc14:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800dc16:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 800dc1a:	3510      	adds	r5, #16
 800dc1c:	442c      	add	r4, r5
 800dc1e:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dc20:	2000      	movs	r0, #0
 800dc22:	e7f6      	b.n	800dc12 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc24:	2003      	movs	r0, #3
}
 800dc26:	4770      	bx	lr
 800dc28:	20001040 	.word	0x20001040

0800dc2c <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc30:	b0cc      	sub	sp, #304	; 0x130
 800dc32:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800dc34:	b3a9      	cbz	r1, 800dca2 <ComputeCmac+0x76>
 800dc36:	4605      	mov	r5, r0
 800dc38:	4617      	mov	r7, r2
 800dc3a:	461c      	mov	r4, r3
 800dc3c:	4688      	mov	r8, r1
 800dc3e:	b396      	cbz	r6, 800dca6 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800dc40:	a802      	add	r0, sp, #8
 800dc42:	f7ff fc07 	bl	800d454 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800dc46:	a901      	add	r1, sp, #4
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7ff ffd1 	bl	800dbf0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800dc4e:	4604      	mov	r4, r0
 800dc50:	b118      	cbz	r0, 800dc5a <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800dc52:	4620      	mov	r0, r4
 800dc54:	b04c      	add	sp, #304	; 0x130
 800dc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800dc5a:	9901      	ldr	r1, [sp, #4]
 800dc5c:	3101      	adds	r1, #1
 800dc5e:	a802      	add	r0, sp, #8
 800dc60:	f7ff fc07 	bl	800d472 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800dc64:	b125      	cbz	r5, 800dc70 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800dc66:	2210      	movs	r2, #16
 800dc68:	4629      	mov	r1, r5
 800dc6a:	a802      	add	r0, sp, #8
 800dc6c:	f7ff fc08 	bl	800d480 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800dc70:	463a      	mov	r2, r7
 800dc72:	4641      	mov	r1, r8
 800dc74:	a802      	add	r0, sp, #8
 800dc76:	f7ff fc03 	bl	800d480 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800dc7a:	a902      	add	r1, sp, #8
 800dc7c:	a848      	add	r0, sp, #288	; 0x120
 800dc7e:	f7ff fc71 	bl	800d564 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dc82:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800dc86:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800dc8a:	041b      	lsls	r3, r3, #16
 800dc8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc90:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800dc94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800dc98:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	6033      	str	r3, [r6, #0]
 800dca0:	e7d7      	b.n	800dc52 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800dca2:	2402      	movs	r4, #2
 800dca4:	e7d5      	b.n	800dc52 <ComputeCmac+0x26>
 800dca6:	2402      	movs	r4, #2
 800dca8:	e7d3      	b.n	800dc52 <ComputeCmac+0x26>
	...

0800dcac <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dcac:	2300      	movs	r3, #0
 800dcae:	2b09      	cmp	r3, #9
 800dcb0:	d816      	bhi.n	800dce0 <SecureElementGetKeyByID+0x34>
{
 800dcb2:	b430      	push	{r4, r5}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800dcb4:	4a0b      	ldr	r2, [pc, #44]	; (800dce4 <SecureElementGetKeyByID+0x38>)
 800dcb6:	6814      	ldr	r4, [r2, #0]
 800dcb8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800dcbc:	4422      	add	r2, r4
 800dcbe:	7c12      	ldrb	r2, [r2, #16]
 800dcc0:	4282      	cmp	r2, r0
 800dcc2:	d006      	beq.n	800dcd2 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	2b09      	cmp	r3, #9
 800dcca:	d9f3      	bls.n	800dcb4 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dccc:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800dcce:	bc30      	pop	{r4, r5}
 800dcd0:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800dcd2:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 800dcd6:	3510      	adds	r5, #16
 800dcd8:	442c      	add	r4, r5
 800dcda:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dcdc:	2000      	movs	r0, #0
 800dcde:	e7f6      	b.n	800dcce <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dce0:	2003      	movs	r0, #3
}
 800dce2:	4770      	bx	lr
 800dce4:	20001040 	.word	0x20001040

0800dce8 <PrintKey>:
{
 800dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcec:	b095      	sub	sp, #84	; 0x54
 800dcee:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800dcf0:	a913      	add	r1, sp, #76	; 0x4c
 800dcf2:	f7ff ffdb 	bl	800dcac <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d154      	bne.n	800dda4 <PrintKey+0xbc>
        if (key == APP_KEY)
 800dcfa:	b1b4      	cbz	r4, 800dd2a <PrintKey+0x42>
        else if (key == NWK_KEY)
 800dcfc:	2c01      	cmp	r4, #1
 800dcfe:	d054      	beq.n	800ddaa <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800dd00:	2c03      	cmp	r4, #3
 800dd02:	d059      	beq.n	800ddb8 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800dd04:	2c02      	cmp	r4, #2
 800dd06:	d05e      	beq.n	800ddc6 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800dd08:	2c04      	cmp	r4, #4
 800dd0a:	d063      	beq.n	800ddd4 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800dd0c:	2c7f      	cmp	r4, #127	; 0x7f
 800dd0e:	d068      	beq.n	800dde2 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800dd10:	2c80      	cmp	r4, #128	; 0x80
 800dd12:	d06d      	beq.n	800ddf0 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800dd14:	2c81      	cmp	r4, #129	; 0x81
 800dd16:	d072      	beq.n	800ddfe <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800dd18:	2c82      	cmp	r4, #130	; 0x82
 800dd1a:	d10c      	bne.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800dd1c:	4b3b      	ldr	r3, [pc, #236]	; (800de0c <PrintKey+0x124>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	4611      	mov	r1, r2
 800dd22:	2002      	movs	r0, #2
 800dd24:	f002 fbf8 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800dd28:	e005      	b.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800dd2a:	4b39      	ldr	r3, [pc, #228]	; (800de10 <PrintKey+0x128>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	4611      	mov	r1, r2
 800dd30:	2002      	movs	r0, #2
 800dd32:	f002 fbf1 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800dd36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd38:	785a      	ldrb	r2, [r3, #1]
 800dd3a:	9210      	str	r2, [sp, #64]	; 0x40
 800dd3c:	7899      	ldrb	r1, [r3, #2]
 800dd3e:	9111      	str	r1, [sp, #68]	; 0x44
 800dd40:	78da      	ldrb	r2, [r3, #3]
 800dd42:	7919      	ldrb	r1, [r3, #4]
 800dd44:	7958      	ldrb	r0, [r3, #5]
 800dd46:	799c      	ldrb	r4, [r3, #6]
 800dd48:	79dd      	ldrb	r5, [r3, #7]
 800dd4a:	7a1e      	ldrb	r6, [r3, #8]
 800dd4c:	7a5f      	ldrb	r7, [r3, #9]
 800dd4e:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800dd52:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800dd56:	f893 800c 	ldrb.w	r8, [r3, #12]
 800dd5a:	f893 900d 	ldrb.w	r9, [r3, #13]
 800dd5e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800dd62:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800dd66:	7c1b      	ldrb	r3, [r3, #16]
 800dd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd6a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800dd6e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dd72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dd76:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800dd7a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800dd7e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800dd82:	9708      	str	r7, [sp, #32]
 800dd84:	9607      	str	r6, [sp, #28]
 800dd86:	9506      	str	r5, [sp, #24]
 800dd88:	9405      	str	r4, [sp, #20]
 800dd8a:	9004      	str	r0, [sp, #16]
 800dd8c:	9103      	str	r1, [sp, #12]
 800dd8e:	9202      	str	r2, [sp, #8]
 800dd90:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dd92:	9101      	str	r1, [sp, #4]
 800dd94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dd96:	9200      	str	r2, [sp, #0]
 800dd98:	4b1e      	ldr	r3, [pc, #120]	; (800de14 <PrintKey+0x12c>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	2002      	movs	r0, #2
 800dda0:	f002 fbba 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 800dda4:	b015      	add	sp, #84	; 0x54
 800dda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800ddaa:	4b1b      	ldr	r3, [pc, #108]	; (800de18 <PrintKey+0x130>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	4611      	mov	r1, r2
 800ddb0:	2002      	movs	r0, #2
 800ddb2:	f002 fbb1 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800ddb6:	e7be      	b.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ddb8:	4b18      	ldr	r3, [pc, #96]	; (800de1c <PrintKey+0x134>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	2002      	movs	r0, #2
 800ddc0:	f002 fbaa 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800ddc4:	e7b7      	b.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ddc6:	4b16      	ldr	r3, [pc, #88]	; (800de20 <PrintKey+0x138>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	4611      	mov	r1, r2
 800ddcc:	2002      	movs	r0, #2
 800ddce:	f002 fba3 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800ddd2:	e7b0      	b.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ddd4:	4b13      	ldr	r3, [pc, #76]	; (800de24 <PrintKey+0x13c>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	4611      	mov	r1, r2
 800ddda:	2002      	movs	r0, #2
 800dddc:	f002 fb9c 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800dde0:	e7a9      	b.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800dde2:	4b11      	ldr	r3, [pc, #68]	; (800de28 <PrintKey+0x140>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	4611      	mov	r1, r2
 800dde8:	2002      	movs	r0, #2
 800ddea:	f002 fb95 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800ddee:	e7a2      	b.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ddf0:	4b0e      	ldr	r3, [pc, #56]	; (800de2c <PrintKey+0x144>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	2002      	movs	r0, #2
 800ddf8:	f002 fb8e 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800ddfc:	e79b      	b.n	800dd36 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ddfe:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <PrintKey+0x148>)
 800de00:	2200      	movs	r2, #0
 800de02:	4611      	mov	r1, r2
 800de04:	2002      	movs	r0, #2
 800de06:	f002 fb87 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800de0a:	e794      	b.n	800dd36 <PrintKey+0x4e>
 800de0c:	08011cac 	.word	0x08011cac
 800de10:	08011bec 	.word	0x08011bec
 800de14:	08011cc4 	.word	0x08011cc4
 800de18:	08011c04 	.word	0x08011c04
 800de1c:	08011c1c 	.word	0x08011c1c
 800de20:	08011c34 	.word	0x08011c34
 800de24:	08011c4c 	.word	0x08011c4c
 800de28:	08011c64 	.word	0x08011c64
 800de2c:	08011c7c 	.word	0x08011c7c
 800de30:	08011c94 	.word	0x08011c94

0800de34 <SecureElementInit>:
{
 800de34:	b570      	push	{r4, r5, r6, lr}
 800de36:	b0b0      	sub	sp, #192	; 0xc0
 800de38:	4606      	mov	r6, r0
    SecureElementNvmData_t seNvmInit =
 800de3a:	22b0      	movs	r2, #176	; 0xb0
 800de3c:	2100      	movs	r1, #0
 800de3e:	a804      	add	r0, sp, #16
 800de40:	f003 f92e 	bl	80110a0 <memset>
 800de44:	4a37      	ldr	r2, [pc, #220]	; (800df24 <SecureElementInit+0xf0>)
 800de46:	466b      	mov	r3, sp
 800de48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de4c:	e883 0003 	stmia.w	r3, {r0, r1}
 800de50:	4a35      	ldr	r2, [pc, #212]	; (800df28 <SecureElementInit+0xf4>)
 800de52:	ab02      	add	r3, sp, #8
 800de54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de58:	e883 0003 	stmia.w	r3, {r0, r1}
 800de5c:	4c33      	ldr	r4, [pc, #204]	; (800df2c <SecureElementInit+0xf8>)
 800de5e:	4625      	mov	r5, r4
 800de60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de62:	f8cd 0011 	str.w	r0, [sp, #17]
 800de66:	f8cd 1015 	str.w	r1, [sp, #21]
 800de6a:	f8cd 2019 	str.w	r2, [sp, #25]
 800de6e:	f8cd 301d 	str.w	r3, [sp, #29]
 800de72:	2301      	movs	r3, #1
 800de74:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800de78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de7a:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 800de7e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 800de82:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800de86:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 800de8a:	2302      	movs	r3, #2
 800de8c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 800de90:	4d27      	ldr	r5, [pc, #156]	; (800df30 <SecureElementInit+0xfc>)
 800de92:	462c      	mov	r4, r5
 800de94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de96:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 800de9a:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 800de9e:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 800dea2:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 800dea6:	2303      	movs	r3, #3
 800dea8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 800deac:	ac11      	add	r4, sp, #68	; 0x44
 800deae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800deb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800deb6:	2304      	movs	r3, #4
 800deb8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800debc:	237f      	movs	r3, #127	; 0x7f
 800debe:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 800dec2:	2380      	movs	r3, #128	; 0x80
 800dec4:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 800dec8:	2381      	movs	r3, #129	; 0x81
 800deca:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800dece:	2382      	movs	r3, #130	; 0x82
 800ded0:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800ded4:	2383      	movs	r3, #131	; 0x83
 800ded6:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    if( nvm == NULL )
 800deda:	b30e      	cbz	r6, 800df20 <SecureElementInit+0xec>
    SeNvm = nvm;
 800dedc:	4b15      	ldr	r3, [pc, #84]	; (800df34 <SecureElementInit+0x100>)
 800dede:	601e      	str	r6, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800dee0:	22c0      	movs	r2, #192	; 0xc0
 800dee2:	4669      	mov	r1, sp
 800dee4:	4630      	mov	r0, r6
 800dee6:	f000 f98e 	bl	800e206 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800deea:	4b13      	ldr	r3, [pc, #76]	; (800df38 <SecureElementInit+0x104>)
 800deec:	2200      	movs	r2, #0
 800deee:	4611      	mov	r1, r2
 800def0:	2002      	movs	r0, #2
 800def2:	f002 fb11 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800def6:	2000      	movs	r0, #0
 800def8:	f7ff fef6 	bl	800dce8 <PrintKey>
    PrintKey(NWK_KEY);
 800defc:	2001      	movs	r0, #1
 800defe:	f7ff fef3 	bl	800dce8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800df02:	4b0e      	ldr	r3, [pc, #56]	; (800df3c <SecureElementInit+0x108>)
 800df04:	2200      	movs	r2, #0
 800df06:	4611      	mov	r1, r2
 800df08:	2002      	movs	r0, #2
 800df0a:	f002 fb05 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800df0e:	2003      	movs	r0, #3
 800df10:	f7ff feea 	bl	800dce8 <PrintKey>
    PrintKey(NWK_S_KEY);
 800df14:	2002      	movs	r0, #2
 800df16:	f7ff fee7 	bl	800dce8 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 800df1a:	2000      	movs	r0, #0
}
 800df1c:	b030      	add	sp, #192	; 0xc0
 800df1e:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800df20:	2002      	movs	r0, #2
 800df22:	e7fb      	b.n	800df1c <SecureElementInit+0xe8>
 800df24:	08011d48 	.word	0x08011d48
 800df28:	08011d54 	.word	0x08011d54
 800df2c:	08011d60 	.word	0x08011d60
 800df30:	08011d74 	.word	0x08011d74
 800df34:	20001040 	.word	0x20001040
 800df38:	08011d18 	.word	0x08011d18
 800df3c:	08011d30 	.word	0x08011d30

0800df40 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800df40:	2b7e      	cmp	r3, #126	; 0x7e
 800df42:	d807      	bhi.n	800df54 <SecureElementComputeAesCmac+0x14>
{
 800df44:	b510      	push	{r4, lr}
 800df46:	b082      	sub	sp, #8
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800df48:	9c04      	ldr	r4, [sp, #16]
 800df4a:	9400      	str	r4, [sp, #0]
 800df4c:	f7ff fe6e 	bl	800dc2c <ComputeCmac>
}
 800df50:	b002      	add	sp, #8
 800df52:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800df54:	2003      	movs	r0, #3
}
 800df56:	4770      	bx	lr

0800df58 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800df58:	b190      	cbz	r0, 800df80 <SecureElementVerifyAesCmac+0x28>
{
 800df5a:	b530      	push	{r4, r5, lr}
 800df5c:	b085      	sub	sp, #20
 800df5e:	460c      	mov	r4, r1
 800df60:	4615      	mov	r5, r2
 800df62:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800df64:	2000      	movs	r0, #0
 800df66:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800df68:	aa03      	add	r2, sp, #12
 800df6a:	9200      	str	r2, [sp, #0]
 800df6c:	4622      	mov	r2, r4
 800df6e:	f7ff fe5d 	bl	800dc2c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800df72:	b918      	cbnz	r0, 800df7c <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800df74:	9b03      	ldr	r3, [sp, #12]
 800df76:	42ab      	cmp	r3, r5
 800df78:	d000      	beq.n	800df7c <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800df7a:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800df7c:	b005      	add	sp, #20
 800df7e:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800df80:	2002      	movs	r0, #2
}
 800df82:	4770      	bx	lr

0800df84 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800df8a:	b350      	cbz	r0, 800dfe2 <SecureElementAesEncrypt+0x5e>
 800df8c:	460c      	mov	r4, r1
 800df8e:	4615      	mov	r5, r2
 800df90:	461e      	mov	r6, r3
 800df92:	4607      	mov	r7, r0
 800df94:	b343      	cbz	r3, 800dfe8 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800df96:	f011 0f0f 	tst.w	r1, #15
 800df9a:	d128      	bne.n	800dfee <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800df9c:	22f0      	movs	r2, #240	; 0xf0
 800df9e:	2100      	movs	r1, #0
 800dfa0:	a801      	add	r0, sp, #4
 800dfa2:	f000 f946 	bl	800e232 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800dfa6:	4669      	mov	r1, sp
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	f7ff fe21 	bl	800dbf0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800dfae:	4680      	mov	r8, r0
 800dfb0:	b118      	cbz	r0, 800dfba <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	b03e      	add	sp, #248	; 0xf8
 800dfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800dfba:	aa01      	add	r2, sp, #4
 800dfbc:	2110      	movs	r1, #16
 800dfbe:	9800      	ldr	r0, [sp, #0]
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	f7ff fd61 	bl	800da88 <lorawan_aes_set_key>
        uint8_t block = 0;
 800dfc6:	4645      	mov	r5, r8
        while( size != 0 )
 800dfc8:	e008      	b.n	800dfdc <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800dfca:	aa01      	add	r2, sp, #4
 800dfcc:	1971      	adds	r1, r6, r5
 800dfce:	1978      	adds	r0, r7, r5
 800dfd0:	f7ff fde4 	bl	800db9c <lorawan_aes_encrypt>
            block = block + 16;
 800dfd4:	3510      	adds	r5, #16
 800dfd6:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800dfd8:	3c10      	subs	r4, #16
 800dfda:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800dfdc:	2c00      	cmp	r4, #0
 800dfde:	d1f4      	bne.n	800dfca <SecureElementAesEncrypt+0x46>
 800dfe0:	e7e7      	b.n	800dfb2 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800dfe2:	f04f 0802 	mov.w	r8, #2
 800dfe6:	e7e4      	b.n	800dfb2 <SecureElementAesEncrypt+0x2e>
 800dfe8:	f04f 0802 	mov.w	r8, #2
 800dfec:	e7e1      	b.n	800dfb2 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dfee:	f04f 0805 	mov.w	r8, #5
 800dff2:	e7de      	b.n	800dfb2 <SecureElementAesEncrypt+0x2e>

0800dff4 <SecureElementSetKey>:
{
 800dff4:	b530      	push	{r4, r5, lr}
 800dff6:	b085      	sub	sp, #20
    if( key == NULL )
 800dff8:	2900      	cmp	r1, #0
 800dffa:	d038      	beq.n	800e06e <SecureElementSetKey+0x7a>
 800dffc:	460d      	mov	r5, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dffe:	2300      	movs	r3, #0
 800e000:	2b09      	cmp	r3, #9
 800e002:	d830      	bhi.n	800e066 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e004:	4a1b      	ldr	r2, [pc, #108]	; (800e074 <SecureElementSetKey+0x80>)
 800e006:	6811      	ldr	r1, [r2, #0]
 800e008:	461c      	mov	r4, r3
 800e00a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e00e:	440a      	add	r2, r1
 800e010:	7c12      	ldrb	r2, [r2, #16]
 800e012:	4282      	cmp	r2, r0
 800e014:	d002      	beq.n	800e01c <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e016:	3301      	adds	r3, #1
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	e7f1      	b.n	800e000 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800e01c:	2880      	cmp	r0, #128	; 0x80
 800e01e:	d00a      	beq.n	800e036 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e020:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e024:	3310      	adds	r3, #16
 800e026:	440b      	add	r3, r1
 800e028:	2210      	movs	r2, #16
 800e02a:	4629      	mov	r1, r5
 800e02c:	1c58      	adds	r0, r3, #1
 800e02e:	f000 f8ea 	bl	800e206 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e032:	2500      	movs	r5, #0
 800e034:	e018      	b.n	800e068 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800e036:	2300      	movs	r3, #0
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	9301      	str	r3, [sp, #4]
 800e03c:	9302      	str	r3, [sp, #8]
 800e03e:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800e040:	466b      	mov	r3, sp
 800e042:	227f      	movs	r2, #127	; 0x7f
 800e044:	2110      	movs	r1, #16
 800e046:	4628      	mov	r0, r5
 800e048:	f7ff ff9c 	bl	800df84 <SecureElementAesEncrypt>
 800e04c:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e04e:	4b09      	ldr	r3, [pc, #36]	; (800e074 <SecureElementSetKey+0x80>)
 800e050:	6818      	ldr	r0, [r3, #0]
 800e052:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800e056:	3410      	adds	r4, #16
 800e058:	4420      	add	r0, r4
 800e05a:	2210      	movs	r2, #16
 800e05c:	4669      	mov	r1, sp
 800e05e:	3001      	adds	r0, #1
 800e060:	f000 f8d1 	bl	800e206 <memcpy1>
                return retval;
 800e064:	e000      	b.n	800e068 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e066:	2503      	movs	r5, #3
}
 800e068:	4628      	mov	r0, r5
 800e06a:	b005      	add	sp, #20
 800e06c:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e06e:	2502      	movs	r5, #2
 800e070:	e7fa      	b.n	800e068 <SecureElementSetKey+0x74>
 800e072:	bf00      	nop
 800e074:	20001040 	.word	0x20001040

0800e078 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800e078:	b1d0      	cbz	r0, 800e0b0 <SecureElementDeriveAndStoreKey+0x38>
{
 800e07a:	b530      	push	{r4, r5, lr}
 800e07c:	b085      	sub	sp, #20
 800e07e:	4614      	mov	r4, r2
 800e080:	4605      	mov	r5, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800e082:	2a7f      	cmp	r2, #127	; 0x7f
 800e084:	d101      	bne.n	800e08a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e086:	2904      	cmp	r1, #4
 800e088:	d114      	bne.n	800e0b4 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800e08a:	2300      	movs	r3, #0
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	9302      	str	r3, [sp, #8]
 800e092:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800e094:	466b      	mov	r3, sp
 800e096:	460a      	mov	r2, r1
 800e098:	2110      	movs	r1, #16
 800e09a:	4628      	mov	r0, r5
 800e09c:	f7ff ff72 	bl	800df84 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e0a0:	b108      	cbz	r0, 800e0a6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e0a2:	b005      	add	sp, #20
 800e0a4:	bd30      	pop	{r4, r5, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800e0a6:	4669      	mov	r1, sp
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f7ff ffa3 	bl	800dff4 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e0ae:	e7f8      	b.n	800e0a2 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800e0b0:	2002      	movs	r0, #2
}
 800e0b2:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e0b4:	2003      	movs	r0, #3
 800e0b6:	e7f4      	b.n	800e0a2 <SecureElementDeriveAndStoreKey+0x2a>

0800e0b8 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800e0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e0c0:	9d07      	ldr	r5, [sp, #28]
 800e0c2:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e0c4:	b37b      	cbz	r3, 800e126 <SecureElementProcessJoinAccept+0x6e>
 800e0c6:	4698      	mov	r8, r3
 800e0c8:	b37d      	cbz	r5, 800e12a <SecureElementProcessJoinAccept+0x72>
 800e0ca:	b386      	cbz	r6, 800e12e <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e0cc:	2c21      	cmp	r4, #33	; 0x21
 800e0ce:	d830      	bhi.n	800e132 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e0d0:	b2a7      	uxth	r7, r4
 800e0d2:	463a      	mov	r2, r7
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f000 f895 	bl	800e206 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e0dc:	1e79      	subs	r1, r7, #1
 800e0de:	1c6b      	adds	r3, r5, #1
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	b289      	uxth	r1, r1
 800e0e4:	eb08 0002 	add.w	r0, r8, r2
 800e0e8:	f7ff ff4c 	bl	800df84 <SecureElementAesEncrypt>
 800e0ec:	bb20      	cbnz	r0, 800e138 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e0ee:	7aeb      	ldrb	r3, [r5, #11]
 800e0f0:	09db      	lsrs	r3, r3, #7
 800e0f2:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800e0f4:	442c      	add	r4, r5
 800e0f6:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800e0fa:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e0fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800e102:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e106:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800e10a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e10e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800e112:	b99b      	cbnz	r3, 800e13c <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e114:	1f39      	subs	r1, r7, #4
 800e116:	2301      	movs	r3, #1
 800e118:	b289      	uxth	r1, r1
 800e11a:	4628      	mov	r0, r5
 800e11c:	f7ff ff1c 	bl	800df58 <SecureElementVerifyAesCmac>
 800e120:	b140      	cbz	r0, 800e134 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e122:	2001      	movs	r0, #1
 800e124:	e006      	b.n	800e134 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800e126:	2002      	movs	r0, #2
 800e128:	e004      	b.n	800e134 <SecureElementProcessJoinAccept+0x7c>
 800e12a:	2002      	movs	r0, #2
 800e12c:	e002      	b.n	800e134 <SecureElementProcessJoinAccept+0x7c>
 800e12e:	2002      	movs	r0, #2
 800e130:	e000      	b.n	800e134 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e132:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800e134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e138:	2007      	movs	r0, #7
 800e13a:	e7fb      	b.n	800e134 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e13c:	2004      	movs	r0, #4
 800e13e:	e7f9      	b.n	800e134 <SecureElementProcessJoinAccept+0x7c>

0800e140 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 800e140:	b138      	cbz	r0, 800e152 <SecureElementRandomNumber+0x12>
{
 800e142:	b510      	push	{r4, lr}
 800e144:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800e146:	4b04      	ldr	r3, [pc, #16]	; (800e158 <SecureElementRandomNumber+0x18>)
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	4798      	blx	r3
 800e14c:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e14e:	2000      	movs	r0, #0
}
 800e150:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e152:	2002      	movs	r0, #2
}
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	08011df8 	.word	0x08011df8

0800e15c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800e15c:	b140      	cbz	r0, 800e170 <SecureElementSetDevEui+0x14>
{
 800e15e:	b508      	push	{r3, lr}
 800e160:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800e162:	2208      	movs	r2, #8
 800e164:	4b03      	ldr	r3, [pc, #12]	; (800e174 <SecureElementSetDevEui+0x18>)
 800e166:	6818      	ldr	r0, [r3, #0]
 800e168:	f000 f84d 	bl	800e206 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e16c:	2000      	movs	r0, #0
}
 800e16e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e170:	2002      	movs	r0, #2
}
 800e172:	4770      	bx	lr
 800e174:	20001040 	.word	0x20001040

0800e178 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800e178:	4b01      	ldr	r3, [pc, #4]	; (800e180 <SecureElementGetDevEui+0x8>)
 800e17a:	6818      	ldr	r0, [r3, #0]
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	20001040 	.word	0x20001040

0800e184 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800e184:	b148      	cbz	r0, 800e19a <SecureElementSetJoinEui+0x16>
{
 800e186:	b508      	push	{r3, lr}
 800e188:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <SecureElementSetJoinEui+0x1c>)
 800e18c:	6818      	ldr	r0, [r3, #0]
 800e18e:	2208      	movs	r2, #8
 800e190:	4410      	add	r0, r2
 800e192:	f000 f838 	bl	800e206 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e196:	2000      	movs	r0, #0
}
 800e198:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e19a:	2002      	movs	r0, #2
}
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20001040 	.word	0x20001040

0800e1a4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800e1a4:	4b01      	ldr	r3, [pc, #4]	; (800e1ac <SecureElementGetJoinEui+0x8>)
 800e1a6:	6818      	ldr	r0, [r3, #0]
}
 800e1a8:	3008      	adds	r0, #8
 800e1aa:	4770      	bx	lr
 800e1ac:	20001040 	.word	0x20001040

0800e1b0 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e1b0:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <rand1+0x28>)
 800e1b2:	6818      	ldr	r0, [r3, #0]
 800e1b4:	4909      	ldr	r1, [pc, #36]	; (800e1dc <rand1+0x2c>)
 800e1b6:	f243 0239 	movw	r2, #12345	; 0x3039
 800e1ba:	fb01 2000 	mla	r0, r1, r0, r2
 800e1be:	6018      	str	r0, [r3, #0]
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	fba3 2300 	umull	r2, r3, r3, r0
 800e1c6:	1ac2      	subs	r2, r0, r3
 800e1c8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e1cc:	0f9b      	lsrs	r3, r3, #30
 800e1ce:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800e1d2:	1ac0      	subs	r0, r0, r3
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	200000c8 	.word	0x200000c8
 800e1dc:	41c64e6d 	.word	0x41c64e6d

0800e1e0 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800e1e0:	4b01      	ldr	r3, [pc, #4]	; (800e1e8 <srand1+0x8>)
 800e1e2:	6018      	str	r0, [r3, #0]
}
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	200000c8 	.word	0x200000c8

0800e1ec <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e1f2:	f7ff ffdd 	bl	800e1b0 <rand1>
 800e1f6:	1b61      	subs	r1, r4, r5
 800e1f8:	3101      	adds	r1, #1
 800e1fa:	fb90 f3f1 	sdiv	r3, r0, r1
 800e1fe:	fb01 0013 	mls	r0, r1, r3, r0
}
 800e202:	4428      	add	r0, r5
 800e204:	bd38      	pop	{r3, r4, r5, pc}

0800e206 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e206:	1e53      	subs	r3, r2, #1
 800e208:	b29b      	uxth	r3, r3
 800e20a:	b12a      	cbz	r2, 800e218 <memcpy1+0x12>
    {
        *dst++ = *src++;
 800e20c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e210:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800e214:	461a      	mov	r2, r3
 800e216:	e7f6      	b.n	800e206 <memcpy1>
    }
}
 800e218:	4770      	bx	lr

0800e21a <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e21a:	1e53      	subs	r3, r2, #1
 800e21c:	4418      	add	r0, r3
    while( size-- )
 800e21e:	1e53      	subs	r3, r2, #1
 800e220:	b29b      	uxth	r3, r3
 800e222:	b12a      	cbz	r2, 800e230 <memcpyr+0x16>
    {
        *dst-- = *src++;
 800e224:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e228:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800e22c:	461a      	mov	r2, r3
 800e22e:	e7f6      	b.n	800e21e <memcpyr+0x4>
    }
}
 800e230:	4770      	bx	lr

0800e232 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e232:	1e53      	subs	r3, r2, #1
 800e234:	b29b      	uxth	r3, r3
 800e236:	b11a      	cbz	r2, 800e240 <memset1+0xe>
    {
        *dst++ = value;
 800e238:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800e23c:	461a      	mov	r2, r3
 800e23e:	e7f8      	b.n	800e232 <memset1>
    }
}
 800e240:	4770      	bx	lr
	...

0800e244 <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800e244:	b1d0      	cbz	r0, 800e27c <Crc32+0x38>
{
 800e246:	b470      	push	{r4, r5, r6}
 800e248:	4606      	mov	r6, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800e24a:	2500      	movs	r5, #0
    uint32_t crc = 0xFFFFFFFF;
 800e24c:	f04f 30ff 	mov.w	r0, #4294967295
 800e250:	e00b      	b.n	800e26a <Crc32+0x26>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800e252:	f340 0400 	sbfx	r4, r0, #0, #1
 800e256:	4a0a      	ldr	r2, [pc, #40]	; (800e280 <Crc32+0x3c>)
 800e258:	4022      	ands	r2, r4
 800e25a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800e25e:	3301      	adds	r3, #1
 800e260:	b29b      	uxth	r3, r3
 800e262:	2b07      	cmp	r3, #7
 800e264:	d9f5      	bls.n	800e252 <Crc32+0xe>
    for( uint16_t i = 0; i < length; ++i )
 800e266:	3501      	adds	r5, #1
 800e268:	b2ad      	uxth	r5, r5
 800e26a:	428d      	cmp	r5, r1
 800e26c:	d203      	bcs.n	800e276 <Crc32+0x32>
        crc ^= ( uint32_t )buffer[i];
 800e26e:	5d73      	ldrb	r3, [r6, r5]
 800e270:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800e272:	2300      	movs	r3, #0
 800e274:	e7f5      	b.n	800e262 <Crc32+0x1e>
        }
    }

    return ~crc;
 800e276:	43c0      	mvns	r0, r0
}
 800e278:	bc70      	pop	{r4, r5, r6}
 800e27a:	4770      	bx	lr
        return 0;
 800e27c:	2000      	movs	r0, #0
}
 800e27e:	4770      	bx	lr
 800e280:	edb88320 	.word	0xedb88320

0800e284 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800e284:	2001      	movs	r0, #1
 800e286:	4770      	bx	lr

0800e288 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800e288:	280a      	cmp	r0, #10
 800e28a:	d807      	bhi.n	800e29c <RadioGetLoRaBandwidthInHz+0x14>
 800e28c:	e8df f000 	tbb	[pc, r0]
 800e290:	17110b20 	.word	0x17110b20
 800e294:	061e1c1a 	.word	0x061e1c1a
 800e298:	0e08      	.short	0x0e08
 800e29a:	14          	.byte	0x14
 800e29b:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e29c:	2000      	movs	r0, #0
 800e29e:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 800e2a0:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800e2a4:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 800e2a6:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800e2aa:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 800e2ac:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800e2b0:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 800e2b2:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800e2b6:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 800e2b8:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800e2bc:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 800e2be:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800e2c2:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 800e2c4:	4804      	ldr	r0, [pc, #16]	; (800e2d8 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800e2c6:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800e2c8:	4804      	ldr	r0, [pc, #16]	; (800e2dc <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800e2ca:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e2cc:	4804      	ldr	r0, [pc, #16]	; (800e2e0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800e2ce:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800e2d0:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	0001e848 	.word	0x0001e848
 800e2dc:	0003d090 	.word	0x0003d090
 800e2e0:	0007a120 	.word	0x0007a120

0800e2e4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e2e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800e2e8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e2ea:	b953      	cbnz	r3, 800e302 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800e2ec:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800e2ee:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e2f0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e2f2:	b141      	cbz	r1, 800e306 <RadioGetGfskTimeOnAirNumerator+0x22>
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	f89d 0000 	ldrb.w	r0, [sp]
 800e2fa:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800e2fc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e300:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e302:	2000      	movs	r0, #0
 800e304:	e7f3      	b.n	800e2ee <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e306:	2300      	movs	r3, #0
 800e308:	e7f5      	b.n	800e2f6 <RadioGetGfskTimeOnAirNumerator+0x12>

0800e30a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e30a:	b4f0      	push	{r4, r5, r6, r7}
 800e30c:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800e310:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800e314:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e316:	1f4d      	subs	r5, r1, #5
 800e318:	2d01      	cmp	r5, #1
 800e31a:	d92d      	bls.n	800e378 <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e31c:	b918      	cbnz	r0, 800e326 <RadioGetLoRaTimeOnAirNumerator+0x1c>
 800e31e:	f1a1 050b 	sub.w	r5, r1, #11
 800e322:	2d01      	cmp	r5, #1
 800e324:	d930      	bls.n	800e388 <RadioGetLoRaTimeOnAirNumerator+0x7e>
 800e326:	2801      	cmp	r0, #1
 800e328:	d02a      	beq.n	800e380 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 800e32a:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e32c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800e330:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 800e332:	b36c      	cbz	r4, 800e390 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800e334:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e336:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 800e338:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800e33a:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800e33e:	b34e      	cbz	r6, 800e394 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800e340:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 800e342:	442c      	add	r4, r5

    if( datarate <= 6 )
 800e344:	2906      	cmp	r1, #6
 800e346:	d903      	bls.n	800e350 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800e348:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 800e34a:	b10f      	cbz	r7, 800e350 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800e34c:	1e88      	subs	r0, r1, #2
 800e34e:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800e350:	2c00      	cmp	r4, #0
 800e352:	db21      	blt.n	800e398 <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e354:	4404      	add	r4, r0
 800e356:	3c01      	subs	r4, #1
 800e358:	fb94 f4f0 	sdiv	r4, r4, r0
 800e35c:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 800e360:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800e364:	2906      	cmp	r1, #6
 800e366:	d801      	bhi.n	800e36c <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 800e368:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e36c:	0080      	lsls	r0, r0, #2
 800e36e:	3001      	adds	r0, #1
 800e370:	3902      	subs	r1, #2
}
 800e372:	4088      	lsls	r0, r1
 800e374:	bcf0      	pop	{r4, r5, r6, r7}
 800e376:	4770      	bx	lr
        if( preambleLen < 12 )
 800e378:	2b0b      	cmp	r3, #11
 800e37a:	d8cf      	bhi.n	800e31c <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 800e37c:	230c      	movs	r3, #12
 800e37e:	e7cd      	b.n	800e31c <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e380:	290c      	cmp	r1, #12
 800e382:	d003      	beq.n	800e38c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800e384:	2700      	movs	r7, #0
 800e386:	e7d1      	b.n	800e32c <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 800e388:	2701      	movs	r7, #1
 800e38a:	e7cf      	b.n	800e32c <RadioGetLoRaTimeOnAirNumerator+0x22>
 800e38c:	2701      	movs	r7, #1
 800e38e:	e7cd      	b.n	800e32c <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 800e390:	2400      	movs	r4, #0
 800e392:	e7d0      	b.n	800e336 <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 800e394:	2414      	movs	r4, #20
 800e396:	e7d4      	b.n	800e342 <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 800e398:	2400      	movs	r4, #0
 800e39a:	e7db      	b.n	800e354 <RadioGetLoRaTimeOnAirNumerator+0x4a>

0800e39c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800e39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	460e      	mov	r6, r1
 800e3a2:	4615      	mov	r5, r2
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800e3aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800e3ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800e3b2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800e3b6:	b148      	cbz	r0, 800e3cc <RadioTimeOnAir+0x30>
 800e3b8:	2801      	cmp	r0, #1
 800e3ba:	d012      	beq.n	800e3e2 <RadioTimeOnAir+0x46>
 800e3bc:	2501      	movs	r5, #1
 800e3be:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800e3c0:	1960      	adds	r0, r4, r5
 800e3c2:	3801      	subs	r0, #1
}
 800e3c4:	fbb0 f0f5 	udiv	r0, r0, r5
 800e3c8:	b005      	add	sp, #20
 800e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e3cc:	f8cd c004 	str.w	ip, [sp, #4]
 800e3d0:	9700      	str	r7, [sp, #0]
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f7ff ff86 	bl	800e2e4 <RadioGetGfskTimeOnAirNumerator>
 800e3d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e3dc:	fb04 f400 	mul.w	r4, r4, r0
        break;
 800e3e0:	e7ee      	b.n	800e3c0 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e3e2:	f8cd c008 	str.w	ip, [sp, #8]
 800e3e6:	9701      	str	r7, [sp, #4]
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	460a      	mov	r2, r1
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7ff ff8a 	bl	800e30a <RadioGetLoRaTimeOnAirNumerator>
 800e3f6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e3fa:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e3fe:	4b03      	ldr	r3, [pc, #12]	; (800e40c <RadioTimeOnAir+0x70>)
 800e400:	5d98      	ldrb	r0, [r3, r6]
 800e402:	f7ff ff41 	bl	800e288 <RadioGetLoRaBandwidthInHz>
 800e406:	4605      	mov	r5, r0
        break;
 800e408:	e7da      	b.n	800e3c0 <RadioTimeOnAir+0x24>
 800e40a:	bf00      	nop
 800e40c:	08011df4 	.word	0x08011df4

0800e410 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800e410:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e412:	4b03      	ldr	r3, [pc, #12]	; (800e420 <RadioOnTxTimeoutProcess+0x10>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	b113      	cbz	r3, 800e41e <RadioOnTxTimeoutProcess+0xe>
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	b103      	cbz	r3, 800e41e <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 800e41c:	4798      	blx	r3
    }
}
 800e41e:	bd08      	pop	{r3, pc}
 800e420:	20001144 	.word	0x20001144

0800e424 <RadioOnTxTimeoutIrq>:
{
 800e424:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800e426:	f7ff fff3 	bl	800e410 <RadioOnTxTimeoutProcess>
}
 800e42a:	bd08      	pop	{r3, pc}

0800e42c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800e42c:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e42e:	4b03      	ldr	r3, [pc, #12]	; (800e43c <RadioOnRxTimeoutProcess+0x10>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	b113      	cbz	r3, 800e43a <RadioOnRxTimeoutProcess+0xe>
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	b103      	cbz	r3, 800e43a <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 800e438:	4798      	blx	r3
    }
}
 800e43a:	bd08      	pop	{r3, pc}
 800e43c:	20001144 	.word	0x20001144

0800e440 <RadioOnRxTimeoutIrq>:
{
 800e440:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800e442:	f7ff fff3 	bl	800e42c <RadioOnRxTimeoutProcess>
}
 800e446:	bd08      	pop	{r3, pc}

0800e448 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800e448:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 800e44a:	2300      	movs	r3, #0
 800e44c:	4616      	mov	r6, r2
 800e44e:	429a      	cmp	r2, r3
 800e450:	dd06      	ble.n	800e460 <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800e452:	5ccc      	ldrb	r4, [r1, r3]
 800e454:	43e4      	mvns	r4, r4
 800e456:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800e458:	2400      	movs	r4, #0
 800e45a:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 800e45c:	3301      	adds	r3, #1
 800e45e:	e7f5      	b.n	800e44c <payload_integration+0x4>
    }

    for (i = 0; i < (size * 8); i++)
 800e460:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800e462:	461f      	mov	r7, r3
 800e464:	e013      	b.n	800e48e <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800e466:	f103 0c07 	add.w	ip, r3, #7
 800e46a:	e021      	b.n	800e4b0 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800e46c:	fa5f fc8c 	uxtb.w	ip, ip
 800e470:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800e474:	fa4c f505 	asr.w	r5, ip, r5
 800e478:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 800e47c:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800e47e:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 800e482:	fa07 fc04 	lsl.w	ip, r7, r4
 800e486:	5d44      	ldrb	r4, [r0, r5]
 800e488:	ea44 040c 	orr.w	r4, r4, ip
 800e48c:	5544      	strb	r4, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 800e48e:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 800e492:	da23      	bge.n	800e4dc <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 800e494:	425d      	negs	r5, r3
 800e496:	f003 0407 	and.w	r4, r3, #7
 800e49a:	f005 0507 	and.w	r5, r5, #7
 800e49e:	bf58      	it	pl
 800e4a0:	426c      	negpl	r4, r5
 800e4a2:	b2e5      	uxtb	r5, r4
 800e4a4:	f1c5 0507 	rsb	r5, r5, #7
 800e4a8:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 800e4aa:	469c      	mov	ip, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	dbda      	blt.n	800e466 <payload_integration+0x1e>
 800e4b0:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	f1d3 0e00 	rsbs	lr, r3, #0
 800e4ba:	f003 0407 	and.w	r4, r3, #7
 800e4be:	f00e 0e07 	and.w	lr, lr, #7
 800e4c2:	bf58      	it	pl
 800e4c4:	f1ce 0400 	rsbpl	r4, lr, #0
 800e4c8:	b2e4      	uxtb	r4, r4
 800e4ca:	f1c4 0407 	rsb	r4, r4, #7
 800e4ce:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 800e4d0:	469e      	mov	lr, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	daca      	bge.n	800e46c <payload_integration+0x24>
 800e4d6:	f103 0e07 	add.w	lr, r3, #7
 800e4da:	e7c7      	b.n	800e46c <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e4dc:	01bb      	lsls	r3, r7, #6
 800e4de:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 800e4e2:	b25b      	sxtb	r3, r3
 800e4e4:	b91f      	cbnz	r7, 800e4ee <payload_integration+0xa6>
 800e4e6:	2120      	movs	r1, #32
 800e4e8:	430b      	orrs	r3, r1
 800e4ea:	5483      	strb	r3, [r0, r2]
}
 800e4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	e7fa      	b.n	800e4e8 <payload_integration+0xa0>
	...

0800e4f4 <RadioSetMaxPayloadLength>:
{
 800e4f4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800e4f6:	2801      	cmp	r0, #1
 800e4f8:	d004      	beq.n	800e504 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800e4fa:	4b0a      	ldr	r3, [pc, #40]	; (800e524 <RadioSetMaxPayloadLength+0x30>)
 800e4fc:	7d5b      	ldrb	r3, [r3, #21]
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d008      	beq.n	800e514 <RadioSetMaxPayloadLength+0x20>
}
 800e502:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800e504:	4b08      	ldr	r3, [pc, #32]	; (800e528 <RadioSetMaxPayloadLength+0x34>)
 800e506:	7019      	strb	r1, [r3, #0]
 800e508:	4806      	ldr	r0, [pc, #24]	; (800e524 <RadioSetMaxPayloadLength+0x30>)
 800e50a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e50c:	300e      	adds	r0, #14
 800e50e:	f001 fd37 	bl	800ff80 <SUBGRF_SetPacketParams>
 800e512:	e7f6      	b.n	800e502 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800e514:	4b04      	ldr	r3, [pc, #16]	; (800e528 <RadioSetMaxPayloadLength+0x34>)
 800e516:	7019      	strb	r1, [r3, #0]
 800e518:	4802      	ldr	r0, [pc, #8]	; (800e524 <RadioSetMaxPayloadLength+0x30>)
 800e51a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e51c:	300e      	adds	r0, #14
 800e51e:	f001 fd2f 	bl	800ff80 <SUBGRF_SetPacketParams>
}
 800e522:	e7ee      	b.n	800e502 <RadioSetMaxPayloadLength+0xe>
 800e524:	200019e0 	.word	0x200019e0
 800e528:	200000cc 	.word	0x200000cc

0800e52c <RadioRead>:
{
 800e52c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 800e52e:	f001 fbdf 	bl	800fcf0 <SUBGRF_ReadRegister>
}
 800e532:	bd08      	pop	{r3, pc}

0800e534 <RadioWrite>:
{
 800e534:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 800e536:	f001 faeb 	bl	800fb10 <SUBGRF_WriteRegister>
}
 800e53a:	bd08      	pop	{r3, pc}

0800e53c <RadioTxCw>:
{
 800e53c:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800e53e:	f001 fe35 	bl	80101ac <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800e542:	2101      	movs	r1, #1
 800e544:	f001 fe1e 	bl	8010184 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800e548:	f001 f970 	bl	800f82c <SUBGRF_SetTxContinuousWave>
}
 800e54c:	bd08      	pop	{r3, pc}
	...

0800e550 <RadioTxPrbs>:
{
 800e550:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800e552:	2101      	movs	r1, #1
 800e554:	4b07      	ldr	r3, [pc, #28]	; (800e574 <RadioTxPrbs+0x24>)
 800e556:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e55a:	f001 fe13 	bl	8010184 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800e55e:	212d      	movs	r1, #45	; 0x2d
 800e560:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e564:	f7ff ffe6 	bl	800e534 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800e568:	f001 f967 	bl	800f83a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800e56c:	4802      	ldr	r0, [pc, #8]	; (800e578 <RadioTxPrbs+0x28>)
 800e56e:	f001 f8f9 	bl	800f764 <SUBGRF_SetTx>
}
 800e572:	bd08      	pop	{r3, pc}
 800e574:	200019e0 	.word	0x200019e0
 800e578:	000fffff 	.word	0x000fffff

0800e57c <RadioSetRxDutyCycle>:
{
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4604      	mov	r4, r0
 800e580:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e582:	2100      	movs	r1, #0
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <RadioSetRxDutyCycle+0x1c>)
 800e586:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e58a:	f001 fdfb 	bl	8010184 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800e58e:	4629      	mov	r1, r5
 800e590:	4620      	mov	r0, r4
 800e592:	f001 f91b 	bl	800f7cc <SUBGRF_SetRxDutyCycle>
}
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	200019e0 	.word	0x200019e0

0800e59c <RadioRxBoosted>:
{
 800e59c:	b538      	push	{r3, r4, r5, lr}
 800e59e:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 800e5a0:	f001 feda 	bl	8010358 <RFW_Is_Init>
 800e5a4:	2801      	cmp	r0, #1
 800e5a6:	d014      	beq.n	800e5d2 <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	f240 2162 	movw	r1, #610	; 0x262
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	f001 f9ec 	bl	800f98e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800e5b6:	b97c      	cbnz	r4, 800e5d8 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e5b8:	4c0f      	ldr	r4, [pc, #60]	; (800e5f8 <RadioRxBoosted+0x5c>)
 800e5ba:	2100      	movs	r1, #0
 800e5bc:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800e5c0:	f001 fde0 	bl	8010184 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800e5c4:	7863      	ldrb	r3, [r4, #1]
 800e5c6:	b183      	cbz	r3, 800e5ea <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e5c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e5cc:	f001 fab0 	bl	800fb30 <SUBGRF_SetRxBoosted>
}
 800e5d0:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 800e5d2:	f001 fec9 	bl	8010368 <RFW_ReceiveInit>
 800e5d6:	e7ee      	b.n	800e5b6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e5d8:	4d08      	ldr	r5, [pc, #32]	; (800e5fc <RadioRxBoosted+0x60>)
 800e5da:	4621      	mov	r1, r4
 800e5dc:	4628      	mov	r0, r5
 800e5de:	f002 fb7d 	bl	8010cdc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	f002 fb34 	bl	8010c50 <UTIL_TIMER_Start>
 800e5e8:	e7e6      	b.n	800e5b8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800e5ea:	4b03      	ldr	r3, [pc, #12]	; (800e5f8 <RadioRxBoosted+0x5c>)
 800e5ec:	6898      	ldr	r0, [r3, #8]
 800e5ee:	0180      	lsls	r0, r0, #6
 800e5f0:	f001 fa9e 	bl	800fb30 <SUBGRF_SetRxBoosted>
}
 800e5f4:	e7ec      	b.n	800e5d0 <RadioRxBoosted+0x34>
 800e5f6:	bf00      	nop
 800e5f8:	200019e0 	.word	0x200019e0
 800e5fc:	20001a50 	.word	0x20001a50

0800e600 <RadioStandby>:
{
 800e600:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800e602:	2000      	movs	r0, #0
 800e604:	f001 f894 	bl	800f730 <SUBGRF_SetStandby>
}
 800e608:	bd08      	pop	{r3, pc}

0800e60a <RadioGetStatus>:
{
 800e60a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800e60c:	f001 f88a 	bl	800f724 <SUBGRF_GetOperatingMode>
 800e610:	2805      	cmp	r0, #5
 800e612:	d007      	beq.n	800e624 <RadioGetStatus+0x1a>
 800e614:	2807      	cmp	r0, #7
 800e616:	d007      	beq.n	800e628 <RadioGetStatus+0x1e>
 800e618:	2804      	cmp	r0, #4
 800e61a:	d001      	beq.n	800e620 <RadioGetStatus+0x16>
            return RF_IDLE;
 800e61c:	2000      	movs	r0, #0
}
 800e61e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800e620:	2002      	movs	r0, #2
 800e622:	e7fc      	b.n	800e61e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800e624:	2001      	movs	r0, #1
 800e626:	e7fa      	b.n	800e61e <RadioGetStatus+0x14>
            return RF_CAD;
 800e628:	2003      	movs	r0, #3
 800e62a:	e7f8      	b.n	800e61e <RadioGetStatus+0x14>

0800e62c <RadioIrqProcess>:
{
 800e62c:	b530      	push	{r4, r5, lr}
 800e62e:	b083      	sub	sp, #12
    uint8_t size = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800e636:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 800e638:	4b9c      	ldr	r3, [pc, #624]	; (800e8ac <RadioIrqProcess+0x280>)
 800e63a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e63e:	2b20      	cmp	r3, #32
 800e640:	d829      	bhi.n	800e696 <RadioIrqProcess+0x6a>
 800e642:	b21a      	sxth	r2, r3
 800e644:	2a00      	cmp	r2, #0
 800e646:	f000 80eb 	beq.w	800e820 <RadioIrqProcess+0x1f4>
 800e64a:	3b01      	subs	r3, #1
 800e64c:	2b1f      	cmp	r3, #31
 800e64e:	f200 80e7 	bhi.w	800e820 <RadioIrqProcess+0x1f4>
 800e652:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e656:	005f      	.short	0x005f
 800e658:	00e50075 	.word	0x00e50075
 800e65c:	00e500df 	.word	0x00e500df
 800e660:	00e500e5 	.word	0x00e500e5
 800e664:	00e500e7 	.word	0x00e500e7
 800e668:	00e500e5 	.word	0x00e500e5
 800e66c:	00e500e5 	.word	0x00e500e5
 800e670:	00e500e5 	.word	0x00e500e5
 800e674:	00e500f4 	.word	0x00e500f4
 800e678:	00e500e5 	.word	0x00e500e5
 800e67c:	00e500e5 	.word	0x00e500e5
 800e680:	00e500e5 	.word	0x00e500e5
 800e684:	00e500e5 	.word	0x00e500e5
 800e688:	00e500e5 	.word	0x00e500e5
 800e68c:	00e500e5 	.word	0x00e500e5
 800e690:	00e500e5 	.word	0x00e500e5
 800e694:	00fb      	.short	0x00fb
 800e696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e69a:	f000 80a3 	beq.w	800e7e4 <RadioIrqProcess+0x1b8>
 800e69e:	d924      	bls.n	800e6ea <RadioIrqProcess+0xbe>
 800e6a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6a4:	f040 80bc 	bne.w	800e820 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800e6a8:	4b81      	ldr	r3, [pc, #516]	; (800e8b0 <RadioIrqProcess+0x284>)
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	2002      	movs	r0, #2
 800e6b0:	f001 ff32 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800e6b4:	f001 f836 	bl	800f724 <SUBGRF_GetOperatingMode>
 800e6b8:	2804      	cmp	r0, #4
 800e6ba:	f000 809e 	beq.w	800e7fa <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800e6be:	f001 f831 	bl	800f724 <SUBGRF_GetOperatingMode>
 800e6c2:	2805      	cmp	r0, #5
 800e6c4:	f040 80ac 	bne.w	800e820 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 800e6c8:	487a      	ldr	r0, [pc, #488]	; (800e8b4 <RadioIrqProcess+0x288>)
 800e6ca:	f002 fa5f 	bl	8010b8c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	f001 f82e 	bl	800f730 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e6d4:	4b78      	ldr	r3, [pc, #480]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f000 80a1 	beq.w	800e820 <RadioIrqProcess+0x1f4>
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f000 809d 	beq.w	800e820 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 800e6e6:	4798      	blx	r3
 800e6e8:	e09a      	b.n	800e820 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 800e6ea:	2b40      	cmp	r3, #64	; 0x40
 800e6ec:	f000 80c7 	beq.w	800e87e <RadioIrqProcess+0x252>
 800e6f0:	2b80      	cmp	r3, #128	; 0x80
 800e6f2:	f040 8095 	bne.w	800e820 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	f001 f81a 	bl	800f730 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e6fc:	4b6e      	ldr	r3, [pc, #440]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 808d 	beq.w	800e820 <RadioIrqProcess+0x1f4>
 800e706:	699b      	ldr	r3, [r3, #24]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 8089 	beq.w	800e820 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 800e70e:	2000      	movs	r0, #0
 800e710:	4798      	blx	r3
 800e712:	e085      	b.n	800e820 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 800e714:	4869      	ldr	r0, [pc, #420]	; (800e8bc <RadioIrqProcess+0x290>)
 800e716:	f002 fa39 	bl	8010b8c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800e71a:	2000      	movs	r0, #0
 800e71c:	f001 f808 	bl	800f730 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800e720:	f001 fe1c 	bl	801035c <RFW_Is_LongPacketModeEnabled>
 800e724:	2801      	cmp	r0, #1
 800e726:	d008      	beq.n	800e73a <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800e728:	4b63      	ldr	r3, [pc, #396]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d077      	beq.n	800e820 <RadioIrqProcess+0x1f4>
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d074      	beq.n	800e820 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 800e736:	4798      	blx	r3
 800e738:	e072      	b.n	800e820 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 800e73a:	f001 fe18 	bl	801036e <RFW_DeInit_TxLongPacket>
 800e73e:	e7f3      	b.n	800e728 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 800e740:	485c      	ldr	r0, [pc, #368]	; (800e8b4 <RadioIrqProcess+0x288>)
 800e742:	f002 fa23 	bl	8010b8c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800e746:	4b59      	ldr	r3, [pc, #356]	; (800e8ac <RadioIrqProcess+0x280>)
 800e748:	785b      	ldrb	r3, [r3, #1]
 800e74a:	b1f3      	cbz	r3, 800e78a <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800e74c:	22ff      	movs	r2, #255	; 0xff
 800e74e:	f10d 0107 	add.w	r1, sp, #7
 800e752:	485b      	ldr	r0, [pc, #364]	; (800e8c0 <RadioIrqProcess+0x294>)
 800e754:	f001 fcfc 	bl	8010150 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800e758:	485a      	ldr	r0, [pc, #360]	; (800e8c4 <RadioIrqProcess+0x298>)
 800e75a:	f001 f99d 	bl	800fa98 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e75e:	4b56      	ldr	r3, [pc, #344]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d05c      	beq.n	800e820 <RadioIrqProcess+0x1f4>
 800e766:	689c      	ldr	r4, [r3, #8]
 800e768:	2c00      	cmp	r4, #0
 800e76a:	d059      	beq.n	800e820 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 800e76c:	4b4f      	ldr	r3, [pc, #316]	; (800e8ac <RadioIrqProcess+0x280>)
 800e76e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e772:	2b01      	cmp	r3, #1
 800e774:	d11d      	bne.n	800e7b2 <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800e776:	4a4d      	ldr	r2, [pc, #308]	; (800e8ac <RadioIrqProcess+0x280>)
 800e778:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800e77c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800e780:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e784:	484e      	ldr	r0, [pc, #312]	; (800e8c0 <RadioIrqProcess+0x294>)
 800e786:	47a0      	blx	r4
                break;
 800e788:	e04a      	b.n	800e820 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e78a:	2000      	movs	r0, #0
 800e78c:	f000 ffd0 	bl	800f730 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800e790:	2100      	movs	r1, #0
 800e792:	f640 1002 	movw	r0, #2306	; 0x902
 800e796:	f001 f9bb 	bl	800fb10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800e79a:	f640 1044 	movw	r0, #2372	; 0x944
 800e79e:	f001 faa7 	bl	800fcf0 <SUBGRF_ReadRegister>
 800e7a2:	f040 0102 	orr.w	r1, r0, #2
 800e7a6:	b2c9      	uxtb	r1, r1
 800e7a8:	f640 1044 	movw	r0, #2372	; 0x944
 800e7ac:	f001 f9b0 	bl	800fb10 <SUBGRF_WriteRegister>
 800e7b0:	e7cc      	b.n	800e74c <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800e7b2:	4c3e      	ldr	r4, [pc, #248]	; (800e8ac <RadioIrqProcess+0x280>)
 800e7b4:	4669      	mov	r1, sp
 800e7b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e7b8:	f001 fd80 	bl	80102bc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800e7bc:	4b3e      	ldr	r3, [pc, #248]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	689d      	ldr	r5, [r3, #8]
 800e7c2:	9b00      	ldr	r3, [sp, #0]
 800e7c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e7c8:	4a3f      	ldr	r2, [pc, #252]	; (800e8c8 <RadioIrqProcess+0x29c>)
 800e7ca:	fb82 1203 	smull	r1, r2, r2, r3
 800e7ce:	17db      	asrs	r3, r3, #31
 800e7d0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e7d4:	b25b      	sxtb	r3, r3
 800e7d6:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800e7da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e7de:	4838      	ldr	r0, [pc, #224]	; (800e8c0 <RadioIrqProcess+0x294>)
 800e7e0:	47a8      	blx	r5
                break;
 800e7e2:	e01d      	b.n	800e820 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	f000 ffa3 	bl	800f730 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e7ea:	4b33      	ldr	r3, [pc, #204]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	b1bb      	cbz	r3, 800e820 <RadioIrqProcess+0x1f4>
 800e7f0:	699b      	ldr	r3, [r3, #24]
 800e7f2:	b1ab      	cbz	r3, 800e820 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 800e7f4:	2001      	movs	r0, #1
 800e7f6:	4798      	blx	r3
 800e7f8:	e012      	b.n	800e820 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 800e7fa:	4830      	ldr	r0, [pc, #192]	; (800e8bc <RadioIrqProcess+0x290>)
 800e7fc:	f002 f9c6 	bl	8010b8c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800e800:	2000      	movs	r0, #0
 800e802:	f000 ff95 	bl	800f730 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e806:	4b2c      	ldr	r3, [pc, #176]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	b14b      	cbz	r3, 800e820 <RadioIrqProcess+0x1f4>
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	b13b      	cbz	r3, 800e820 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 800e810:	4798      	blx	r3
 800e812:	e005      	b.n	800e820 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800e814:	4b2d      	ldr	r3, [pc, #180]	; (800e8cc <RadioIrqProcess+0x2a0>)
 800e816:	2201      	movs	r2, #1
 800e818:	2100      	movs	r1, #0
 800e81a:	2002      	movs	r0, #2
 800e81c:	f001 fe7c 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
}
 800e820:	b003      	add	sp, #12
 800e822:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800e824:	4b2a      	ldr	r3, [pc, #168]	; (800e8d0 <RadioIrqProcess+0x2a4>)
 800e826:	2201      	movs	r2, #1
 800e828:	2100      	movs	r1, #0
 800e82a:	2002      	movs	r0, #2
 800e82c:	f001 fe74 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800e830:	f001 fd92 	bl	8010358 <RFW_Is_Init>
 800e834:	2801      	cmp	r0, #1
 800e836:	d1f3      	bne.n	800e820 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 800e838:	f001 fd9a 	bl	8010370 <RFW_ReceivePayload>
 800e83c:	e7f0      	b.n	800e820 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800e83e:	4b25      	ldr	r3, [pc, #148]	; (800e8d4 <RadioIrqProcess+0x2a8>)
 800e840:	2201      	movs	r2, #1
 800e842:	2100      	movs	r1, #0
 800e844:	2002      	movs	r0, #2
 800e846:	f001 fe67 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e84a:	e7e9      	b.n	800e820 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 800e84c:	4819      	ldr	r0, [pc, #100]	; (800e8b4 <RadioIrqProcess+0x288>)
 800e84e:	f002 f99d 	bl	8010b8c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800e852:	4b16      	ldr	r3, [pc, #88]	; (800e8ac <RadioIrqProcess+0x280>)
 800e854:	785b      	ldrb	r3, [r3, #1]
 800e856:	b173      	cbz	r3, 800e876 <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e858:	4b17      	ldr	r3, [pc, #92]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d0df      	beq.n	800e820 <RadioIrqProcess+0x1f4>
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d0dc      	beq.n	800e820 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 800e866:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800e868:	4b1b      	ldr	r3, [pc, #108]	; (800e8d8 <RadioIrqProcess+0x2ac>)
 800e86a:	2201      	movs	r2, #1
 800e86c:	2100      	movs	r1, #0
 800e86e:	2002      	movs	r0, #2
 800e870:	f001 fe52 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
 800e874:	e7d4      	b.n	800e820 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e876:	2000      	movs	r0, #0
 800e878:	f000 ff5a 	bl	800f730 <SUBGRF_SetStandby>
 800e87c:	e7ec      	b.n	800e858 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800e87e:	4b17      	ldr	r3, [pc, #92]	; (800e8dc <RadioIrqProcess+0x2b0>)
 800e880:	2201      	movs	r2, #1
 800e882:	2100      	movs	r1, #0
 800e884:	2002      	movs	r0, #2
 800e886:	f001 fe47 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800e88a:	4b08      	ldr	r3, [pc, #32]	; (800e8ac <RadioIrqProcess+0x280>)
 800e88c:	785b      	ldrb	r3, [r3, #1]
 800e88e:	b143      	cbz	r3, 800e8a2 <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800e890:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <RadioIrqProcess+0x28c>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d0c3      	beq.n	800e820 <RadioIrqProcess+0x1f4>
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d0c0      	beq.n	800e820 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 800e89e:	4798      	blx	r3
}
 800e8a0:	e7be      	b.n	800e820 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	f000 ff44 	bl	800f730 <SUBGRF_SetStandby>
 800e8a8:	e7f2      	b.n	800e890 <RadioIrqProcess+0x264>
 800e8aa:	bf00      	nop
 800e8ac:	200019e0 	.word	0x200019e0
 800e8b0:	08011d88 	.word	0x08011d88
 800e8b4:	20001a50 	.word	0x20001a50
 800e8b8:	20001144 	.word	0x20001144
 800e8bc:	20001a38 	.word	0x20001a38
 800e8c0:	20001044 	.word	0x20001044
 800e8c4:	20001a04 	.word	0x20001a04
 800e8c8:	10624dd3 	.word	0x10624dd3
 800e8cc:	08011d9c 	.word	0x08011d9c
 800e8d0:	08011da8 	.word	0x08011da8
 800e8d4:	08011db4 	.word	0x08011db4
 800e8d8:	08011dc0 	.word	0x08011dc0
 800e8dc:	08011dcc 	.word	0x08011dcc

0800e8e0 <RadioOnDioIrq>:
{
 800e8e0:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800e8e2:	4b03      	ldr	r3, [pc, #12]	; (800e8f0 <RadioOnDioIrq+0x10>)
 800e8e4:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800e8e8:	f7ff fea0 	bl	800e62c <RadioIrqProcess>
}
 800e8ec:	bd08      	pop	{r3, pc}
 800e8ee:	bf00      	nop
 800e8f0:	200019e0 	.word	0x200019e0

0800e8f4 <RadioGetWakeupTime>:
{
 800e8f4:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800e8f6:	f001 fc70 	bl	80101da <SUBGRF_GetRadioWakeUpTime>
}
 800e8fa:	3003      	adds	r0, #3
 800e8fc:	bd08      	pop	{r3, pc}

0800e8fe <RadioReadRegisters>:
{
 800e8fe:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800e900:	f001 fbb0 	bl	8010064 <SUBGRF_ReadRegisters>
}
 800e904:	bd08      	pop	{r3, pc}

0800e906 <RadioWriteRegisters>:
{
 800e906:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800e908:	f001 faf8 	bl	800fefc <SUBGRF_WriteRegisters>
}
 800e90c:	bd08      	pop	{r3, pc}

0800e90e <RadioRssi>:
{
 800e90e:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800e910:	f001 f8b4 	bl	800fa7c <SUBGRF_GetRssiInst>
}
 800e914:	b200      	sxth	r0, r0
 800e916:	bd08      	pop	{r3, pc}

0800e918 <RadioSetTxContinuousWave>:
{
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800e91c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e920:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 800e924:	f001 f86a 	bl	800f9fc <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800e928:	4628      	mov	r0, r5
 800e92a:	f001 fc3f 	bl	80101ac <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800e92e:	2101      	movs	r1, #1
 800e930:	f001 fc28 	bl	8010184 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800e934:	f000 ff7a 	bl	800f82c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800e938:	4d04      	ldr	r5, [pc, #16]	; (800e94c <RadioSetTxContinuousWave+0x34>)
 800e93a:	4621      	mov	r1, r4
 800e93c:	4628      	mov	r0, r5
 800e93e:	f002 f9cd 	bl	8010cdc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800e942:	4628      	mov	r0, r5
 800e944:	f002 f984 	bl	8010c50 <UTIL_TIMER_Start>
}
 800e948:	bd38      	pop	{r3, r4, r5, pc}
 800e94a:	bf00      	nop
 800e94c:	20001a38 	.word	0x20001a38

0800e950 <RadioSetChannel>:
{
 800e950:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800e952:	f001 f853 	bl	800f9fc <SUBGRF_SetRfFrequency>
}
 800e956:	bd08      	pop	{r3, pc}

0800e958 <RadioStartCad>:
{
 800e958:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e95a:	2100      	movs	r1, #0
 800e95c:	4b07      	ldr	r3, [pc, #28]	; (800e97c <RadioStartCad+0x24>)
 800e95e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e962:	f001 fc0f 	bl	8010184 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800e966:	2300      	movs	r3, #0
 800e968:	461a      	mov	r2, r3
 800e96a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800e96e:	4608      	mov	r0, r1
 800e970:	f001 f80d 	bl	800f98e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800e974:	f000 ff4e 	bl	800f814 <SUBGRF_SetCad>
}
 800e978:	bd08      	pop	{r3, pc}
 800e97a:	bf00      	nop
 800e97c:	200019e0 	.word	0x200019e0

0800e980 <RadioRx>:
{
 800e980:	b538      	push	{r3, r4, r5, lr}
 800e982:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 800e984:	f001 fce8 	bl	8010358 <RFW_Is_Init>
 800e988:	2801      	cmp	r0, #1
 800e98a:	d014      	beq.n	800e9b6 <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e98c:	2300      	movs	r3, #0
 800e98e:	461a      	mov	r2, r3
 800e990:	f240 2162 	movw	r1, #610	; 0x262
 800e994:	4608      	mov	r0, r1
 800e996:	f000 fffa 	bl	800f98e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800e99a:	b97c      	cbnz	r4, 800e9bc <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e99c:	4c0f      	ldr	r4, [pc, #60]	; (800e9dc <RadioRx+0x5c>)
 800e99e:	2100      	movs	r1, #0
 800e9a0:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800e9a4:	f001 fbee 	bl	8010184 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800e9a8:	7863      	ldrb	r3, [r4, #1]
 800e9aa:	b183      	cbz	r3, 800e9ce <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800e9ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e9b0:	f000 fef2 	bl	800f798 <SUBGRF_SetRx>
}
 800e9b4:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 800e9b6:	f001 fcd7 	bl	8010368 <RFW_ReceiveInit>
 800e9ba:	e7ee      	b.n	800e99a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e9bc:	4d08      	ldr	r5, [pc, #32]	; (800e9e0 <RadioRx+0x60>)
 800e9be:	4621      	mov	r1, r4
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	f002 f98b 	bl	8010cdc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f002 f942 	bl	8010c50 <UTIL_TIMER_Start>
 800e9cc:	e7e6      	b.n	800e99c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800e9ce:	4b03      	ldr	r3, [pc, #12]	; (800e9dc <RadioRx+0x5c>)
 800e9d0:	6898      	ldr	r0, [r3, #8]
 800e9d2:	0180      	lsls	r0, r0, #6
 800e9d4:	f000 fee0 	bl	800f798 <SUBGRF_SetRx>
}
 800e9d8:	e7ec      	b.n	800e9b4 <RadioRx+0x34>
 800e9da:	bf00      	nop
 800e9dc:	200019e0 	.word	0x200019e0
 800e9e0:	20001a50 	.word	0x20001a50

0800e9e4 <RadioSleep>:
{
 800e9e4:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800e9e6:	f04f 0004 	mov.w	r0, #4
 800e9ea:	f001 f9db 	bl	800fda4 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800e9ee:	2002      	movs	r0, #2
 800e9f0:	f7f2 fd80 	bl	80014f4 <HAL_Delay>
}
 800e9f4:	bd08      	pop	{r3, pc}
	...

0800e9f8 <RadioSend>:
{
 800e9f8:	b570      	push	{r4, r5, r6, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800ea00:	2300      	movs	r3, #0
 800ea02:	461a      	mov	r2, r3
 800ea04:	f240 2101 	movw	r1, #513	; 0x201
 800ea08:	4608      	mov	r0, r1
 800ea0a:	f000 ffc0 	bl	800f98e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800ea0e:	4e5a      	ldr	r6, [pc, #360]	; (800eb78 <RadioSend+0x180>)
 800ea10:	2101      	movs	r1, #1
 800ea12:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800ea16:	f001 fbb5 	bl	8010184 <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800ea1a:	7833      	ldrb	r3, [r6, #0]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d103      	bne.n	800ea28 <RadioSend+0x30>
 800ea20:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800ea24:	2b06      	cmp	r3, #6
 800ea26:	d012      	beq.n	800ea4e <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800ea28:	f640 0089 	movw	r0, #2185	; 0x889
 800ea2c:	f001 f960 	bl	800fcf0 <SUBGRF_ReadRegister>
 800ea30:	f040 0104 	orr.w	r1, r0, #4
 800ea34:	b2c9      	uxtb	r1, r1
 800ea36:	f640 0089 	movw	r0, #2185	; 0x889
 800ea3a:	f001 f869 	bl	800fb10 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 800ea3e:	4b4e      	ldr	r3, [pc, #312]	; (800eb78 <RadioSend+0x180>)
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b03      	cmp	r3, #3
 800ea44:	d818      	bhi.n	800ea78 <RadioSend+0x80>
 800ea46:	e8df f003 	tbb	[pc, r3]
 800ea4a:	0d22      	.short	0x0d22
 800ea4c:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800ea4e:	f640 0089 	movw	r0, #2185	; 0x889
 800ea52:	f001 f94d 	bl	800fcf0 <SUBGRF_ReadRegister>
 800ea56:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800ea5a:	f640 0089 	movw	r0, #2185	; 0x889
 800ea5e:	f001 f857 	bl	800fb10 <SUBGRF_WriteRegister>
 800ea62:	e7ec      	b.n	800ea3e <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800ea64:	4844      	ldr	r0, [pc, #272]	; (800eb78 <RadioSend+0x180>)
 800ea66:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ea68:	300e      	adds	r0, #14
 800ea6a:	f001 fa89 	bl	800ff80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ea6e:	2200      	movs	r2, #0
 800ea70:	4621      	mov	r1, r4
 800ea72:	4628      	mov	r0, r5
 800ea74:	f001 fb53 	bl	801011e <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ea78:	4c40      	ldr	r4, [pc, #256]	; (800eb7c <RadioSend+0x184>)
 800ea7a:	4b3f      	ldr	r3, [pc, #252]	; (800eb78 <RadioSend+0x180>)
 800ea7c:	6859      	ldr	r1, [r3, #4]
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f002 f92c 	bl	8010cdc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ea84:	4620      	mov	r0, r4
 800ea86:	f002 f8e3 	bl	8010c50 <UTIL_TIMER_Start>
}
 800ea8a:	b002      	add	sp, #8
 800ea8c:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800ea8e:	f001 fc63 	bl	8010358 <RFW_Is_Init>
 800ea92:	2801      	cmp	r0, #1
 800ea94:	d00a      	beq.n	800eaac <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ea96:	4838      	ldr	r0, [pc, #224]	; (800eb78 <RadioSend+0x180>)
 800ea98:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ea9a:	300e      	adds	r0, #14
 800ea9c:	f001 fa70 	bl	800ff80 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	f001 fb3a 	bl	801011e <SUBGRF_SendPayload>
 800eaaa:	e7e5      	b.n	800ea78 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800eaac:	f10d 0207 	add.w	r2, sp, #7
 800eab0:	4621      	mov	r1, r4
 800eab2:	4628      	mov	r0, r5
 800eab4:	f001 fc55 	bl	8010362 <RFW_TransmitInit>
 800eab8:	b968      	cbnz	r0, 800ead6 <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800eaba:	482f      	ldr	r0, [pc, #188]	; (800eb78 <RadioSend+0x180>)
 800eabc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eac0:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eac2:	300e      	adds	r0, #14
 800eac4:	f001 fa5c 	bl	800ff80 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800eac8:	2200      	movs	r2, #0
 800eaca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eace:	4628      	mov	r0, r5
 800ead0:	f001 fb25 	bl	801011e <SUBGRF_SendPayload>
 800ead4:	e7d0      	b.n	800ea78 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800ead6:	4b2a      	ldr	r3, [pc, #168]	; (800eb80 <RadioSend+0x188>)
 800ead8:	2201      	movs	r2, #1
 800eada:	2100      	movs	r1, #0
 800eadc:	2002      	movs	r0, #2
 800eade:	f001 fd1b 	bl	8010518 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800eae2:	e7d2      	b.n	800ea8a <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800eae4:	4824      	ldr	r0, [pc, #144]	; (800eb78 <RadioSend+0x180>)
 800eae6:	2302      	movs	r3, #2
 800eae8:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800eaea:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eaec:	300e      	adds	r0, #14
 800eaee:	f001 fa47 	bl	800ff80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f001 fb11 	bl	801011e <SUBGRF_SendPayload>
            break;
 800eafc:	e7bc      	b.n	800ea78 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 800eafe:	4622      	mov	r2, r4
 800eb00:	4629      	mov	r1, r5
 800eb02:	4820      	ldr	r0, [pc, #128]	; (800eb84 <RadioSend+0x18c>)
 800eb04:	f7ff fca0 	bl	800e448 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800eb08:	4e1b      	ldr	r6, [pc, #108]	; (800eb78 <RadioSend+0x180>)
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800eb0e:	1c65      	adds	r5, r4, #1
 800eb10:	b2ed      	uxtb	r5, r5
 800eb12:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eb14:	f106 000e 	add.w	r0, r6, #14
 800eb18:	f001 fa32 	bl	800ff80 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	20f1      	movs	r0, #241	; 0xf1
 800eb20:	f7ff fd08 	bl	800e534 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800eb24:	2100      	movs	r1, #0
 800eb26:	20f0      	movs	r0, #240	; 0xf0
 800eb28:	f7ff fd04 	bl	800e534 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800eb2c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800eb2e:	2b64      	cmp	r3, #100	; 0x64
 800eb30:	d019      	beq.n	800eb66 <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800eb32:	21e1      	movs	r1, #225	; 0xe1
 800eb34:	20f3      	movs	r0, #243	; 0xf3
 800eb36:	f7ff fcfd 	bl	800e534 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800eb3a:	2104      	movs	r1, #4
 800eb3c:	20f2      	movs	r0, #242	; 0xf2
 800eb3e:	f7ff fcf9 	bl	800e534 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800eb42:	00e1      	lsls	r1, r4, #3
 800eb44:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800eb46:	0a09      	lsrs	r1, r1, #8
 800eb48:	20f4      	movs	r0, #244	; 0xf4
 800eb4a:	f7ff fcf3 	bl	800e534 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800eb4e:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800eb52:	20f5      	movs	r0, #245	; 0xf5
 800eb54:	f7ff fcee 	bl	800e534 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800eb58:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4809      	ldr	r0, [pc, #36]	; (800eb84 <RadioSend+0x18c>)
 800eb60:	f001 fadd 	bl	801011e <SUBGRF_SendPayload>
            break;
 800eb64:	e788      	b.n	800ea78 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800eb66:	2170      	movs	r1, #112	; 0x70
 800eb68:	20f3      	movs	r0, #243	; 0xf3
 800eb6a:	f7ff fce3 	bl	800e534 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800eb6e:	211d      	movs	r1, #29
 800eb70:	20f2      	movs	r0, #242	; 0xf2
 800eb72:	f7ff fcdf 	bl	800e534 <RadioWrite>
 800eb76:	e7e4      	b.n	800eb42 <RadioSend+0x14a>
 800eb78:	200019e0 	.word	0x200019e0
 800eb7c:	20001a38 	.word	0x20001a38
 800eb80:	08011ddc 	.word	0x08011ddc
 800eb84:	20001044 	.word	0x20001044

0800eb88 <RadioSetModem>:
{
 800eb88:	b510      	push	{r4, lr}
 800eb8a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800eb8c:	4b19      	ldr	r3, [pc, #100]	; (800ebf4 <RadioSetModem+0x6c>)
 800eb8e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 800eb90:	f001 fbef 	bl	8010372 <RFW_SetRadioModem>
    switch( modem )
 800eb94:	3c01      	subs	r4, #1
 800eb96:	2c03      	cmp	r4, #3
 800eb98:	d803      	bhi.n	800eba2 <RadioSetModem+0x1a>
 800eb9a:	e8df f004 	tbb	[pc, r4]
 800eb9e:	1509      	.short	0x1509
 800eba0:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800eba2:	2000      	movs	r0, #0
 800eba4:	f001 f804 	bl	800fbb0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800eba8:	4b12      	ldr	r3, [pc, #72]	; (800ebf4 <RadioSetModem+0x6c>)
 800ebaa:	2200      	movs	r2, #0
 800ebac:	735a      	strb	r2, [r3, #13]
        break;
 800ebae:	e011      	b.n	800ebd4 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800ebb0:	2001      	movs	r0, #1
 800ebb2:	f000 fffd 	bl	800fbb0 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800ebb6:	4b0f      	ldr	r3, [pc, #60]	; (800ebf4 <RadioSetModem+0x6c>)
 800ebb8:	7b5a      	ldrb	r2, [r3, #13]
 800ebba:	7b18      	ldrb	r0, [r3, #12]
 800ebbc:	4282      	cmp	r2, r0
 800ebbe:	d009      	beq.n	800ebd4 <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800ebc0:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ebc2:	f000 fa83 	bl	800f0cc <RadioSetPublicNetwork>
 800ebc6:	e005      	b.n	800ebd4 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ebc8:	2002      	movs	r0, #2
 800ebca:	f000 fff1 	bl	800fbb0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ebce:	4b09      	ldr	r3, [pc, #36]	; (800ebf4 <RadioSetModem+0x6c>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	735a      	strb	r2, [r3, #13]
}
 800ebd4:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ebd6:	2002      	movs	r0, #2
 800ebd8:	f000 ffea 	bl	800fbb0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ebdc:	4b05      	ldr	r3, [pc, #20]	; (800ebf4 <RadioSetModem+0x6c>)
 800ebde:	2200      	movs	r2, #0
 800ebe0:	735a      	strb	r2, [r3, #13]
        break;
 800ebe2:	e7f7      	b.n	800ebd4 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ebe4:	2000      	movs	r0, #0
 800ebe6:	f000 ffe3 	bl	800fbb0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ebea:	4b02      	ldr	r3, [pc, #8]	; (800ebf4 <RadioSetModem+0x6c>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	735a      	strb	r2, [r3, #13]
}
 800ebf0:	e7f0      	b.n	800ebd4 <RadioSetModem+0x4c>
 800ebf2:	bf00      	nop
 800ebf4:	200019e0 	.word	0x200019e0

0800ebf8 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800ebf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfc:	b086      	sub	sp, #24
 800ebfe:	4605      	mov	r5, r0
 800ec00:	460c      	mov	r4, r1
 800ec02:	4617      	mov	r7, r2
 800ec04:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800ec06:	2300      	movs	r3, #0
 800ec08:	9304      	str	r3, [sp, #16]
 800ec0a:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ec0c:	f001 fba3 	bl	8010356 <RFW_DeInit>
    switch( modem )
 800ec10:	2d01      	cmp	r5, #1
 800ec12:	f000 8085 	beq.w	800ed20 <RadioSetTxGenericConfig+0x128>
 800ec16:	2d02      	cmp	r5, #2
 800ec18:	f000 80ed 	beq.w	800edf6 <RadioSetTxGenericConfig+0x1fe>
 800ec1c:	b165      	cbz	r5, 800ec38 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ec1e:	4638      	mov	r0, r7
 800ec20:	f001 fac4 	bl	80101ac <SUBGRF_SetRfTxPower>
 800ec24:	4c84      	ldr	r4, [pc, #528]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800ec26:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ec2a:	f001 fb99 	bl	8010360 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ec2e:	6066      	str	r6, [r4, #4]
    return 0;
 800ec30:	2000      	movs	r0, #0
}
 800ec32:	b006      	add	sp, #24
 800ec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f000 80f0 	beq.w	800ee20 <RadioSetTxGenericConfig+0x228>
 800ec40:	6923      	ldr	r3, [r4, #16]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 80ef 	beq.w	800ee26 <RadioSetTxGenericConfig+0x22e>
        if( config->fsk.SyncWordLength > 8 )
 800ec48:	7d20      	ldrb	r0, [r4, #20]
 800ec4a:	2808      	cmp	r0, #8
 800ec4c:	f200 80ee 	bhi.w	800ee2c <RadioSetTxGenericConfig+0x234>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ec50:	2100      	movs	r1, #0
 800ec52:	e006      	b.n	800ec62 <RadioSetTxGenericConfig+0x6a>
                syncword[i] = config->fsk.SyncWord[i];
 800ec54:	69a3      	ldr	r3, [r4, #24]
 800ec56:	5c5a      	ldrb	r2, [r3, r1]
 800ec58:	ab06      	add	r3, sp, #24
 800ec5a:	440b      	add	r3, r1
 800ec5c:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ec60:	3101      	adds	r1, #1
 800ec62:	4288      	cmp	r0, r1
 800ec64:	dcf6      	bgt.n	800ec54 <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ec66:	4d74      	ldr	r5, [pc, #464]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800ec68:	f04f 0800 	mov.w	r8, #0
 800ec6c:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800ec70:	68a3      	ldr	r3, [r4, #8]
 800ec72:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800ec74:	7823      	ldrb	r3, [r4, #0]
 800ec76:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ec7a:	6860      	ldr	r0, [r4, #4]
 800ec7c:	f001 fb04 	bl	8010288 <SUBGRF_GetFskBandwidthRegValue>
 800ec80:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800ec84:	68e3      	ldr	r3, [r4, #12]
 800ec86:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ec88:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800ec8c:	6923      	ldr	r3, [r4, #16]
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800ec92:	2304      	movs	r3, #4
 800ec94:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800ec96:	7d23      	ldrb	r3, [r4, #20]
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800ec9c:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800eca0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800eca4:	2b02      	cmp	r3, #2
 800eca6:	d008      	beq.n	800ecba <RadioSetTxGenericConfig+0xc2>
 800eca8:	7fa2      	ldrb	r2, [r4, #30]
 800ecaa:	2a02      	cmp	r2, #2
 800ecac:	d005      	beq.n	800ecba <RadioSetTxGenericConfig+0xc2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800ecae:	7fe0      	ldrb	r0, [r4, #31]
 800ecb0:	4961      	ldr	r1, [pc, #388]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800ecb2:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ecb4:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800ecb6:	754a      	strb	r2, [r1, #21]
 800ecb8:	e018      	b.n	800ecec <RadioSetTxGenericConfig+0xf4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ecba:	7fe2      	ldrb	r2, [r4, #31]
 800ecbc:	f102 030f 	add.w	r3, r2, #15
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d901      	bls.n	800ecca <RadioSetTxGenericConfig+0xd2>
 800ecc6:	2a01      	cmp	r2, #1
 800ecc8:	d127      	bne.n	800ed1a <RadioSetTxGenericConfig+0x122>
            ConfigGeneric.rtx = CONFIG_TX;
 800ecca:	2301      	movs	r3, #1
 800eccc:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800ecd0:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800ecd2:	4a5a      	ldr	r2, [pc, #360]	; (800ee3c <RadioSetTxGenericConfig+0x244>)
 800ecd4:	4b5a      	ldr	r3, [pc, #360]	; (800ee40 <RadioSetTxGenericConfig+0x248>)
 800ecd6:	6819      	ldr	r1, [r3, #0]
 800ecd8:	a801      	add	r0, sp, #4
 800ecda:	f001 fb39 	bl	8010350 <RFW_Init>
 800ecde:	b9e0      	cbnz	r0, 800ed1a <RadioSetTxGenericConfig+0x122>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ece0:	4b55      	ldr	r3, [pc, #340]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800ece6:	2101      	movs	r1, #1
 800ece8:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ecea:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800ecec:	f7ff fc88 	bl	800e600 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	f7ff ff49 	bl	800eb88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ecf6:	4d53      	ldr	r5, [pc, #332]	; (800ee44 <RadioSetTxGenericConfig+0x24c>)
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f000 ff71 	bl	800fbe0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ecfe:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800ed02:	f001 f93d 	bl	800ff80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ed06:	a804      	add	r0, sp, #16
 800ed08:	f001 f908 	bl	800ff1c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800ed0c:	8ba0      	ldrh	r0, [r4, #28]
 800ed0e:	f001 f86b 	bl	800fde8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800ed12:	8c20      	ldrh	r0, [r4, #32]
 800ed14:	f001 f91f 	bl	800ff56 <SUBGRF_SetCrcPolynomial>
        break;
 800ed18:	e781      	b.n	800ec1e <RadioSetTxGenericConfig+0x26>
                return -1;
 800ed1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1e:	e788      	b.n	800ec32 <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ed20:	4b45      	ldr	r3, [pc, #276]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800ed22:	2201      	movs	r2, #1
 800ed24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ed28:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ed2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ed30:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800ed34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800ed38:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800ed3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800ed40:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d036      	beq.n	800edb6 <RadioSetTxGenericConfig+0x1be>
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d039      	beq.n	800edc0 <RadioSetTxGenericConfig+0x1c8>
 800ed4c:	b373      	cbz	r3, 800edac <RadioSetTxGenericConfig+0x1b4>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ed4e:	4d3a      	ldr	r5, [pc, #232]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800ed50:	f04f 0801 	mov.w	r8, #1
 800ed54:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ed58:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800ed5a:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ed5c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800ed60:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ed62:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ed66:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ed6a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ed6e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800ed72:	f7ff fc45 	bl	800e600 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800ed76:	4640      	mov	r0, r8
 800ed78:	f7ff ff06 	bl	800eb88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ed7c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800ed80:	f000 ff2e 	bl	800fbe0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed84:	f105 000e 	add.w	r0, r5, #14
 800ed88:	f001 f8fa 	bl	800ff80 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800ed8c:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800ed90:	2b06      	cmp	r3, #6
 800ed92:	d025      	beq.n	800ede0 <RadioSetTxGenericConfig+0x1e8>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800ed94:	f640 0089 	movw	r0, #2185	; 0x889
 800ed98:	f000 ffaa 	bl	800fcf0 <SUBGRF_ReadRegister>
 800ed9c:	f040 0104 	orr.w	r1, r0, #4
 800eda0:	b2c9      	uxtb	r1, r1
 800eda2:	f640 0089 	movw	r0, #2185	; 0x889
 800eda6:	f000 feb3 	bl	800fb10 <SUBGRF_WriteRegister>
 800edaa:	e738      	b.n	800ec1e <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800edac:	4b22      	ldr	r3, [pc, #136]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800edb4:	e7cb      	b.n	800ed4e <RadioSetTxGenericConfig+0x156>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800edb6:	4b20      	ldr	r3, [pc, #128]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800edb8:	2201      	movs	r2, #1
 800edba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800edbe:	e7c6      	b.n	800ed4e <RadioSetTxGenericConfig+0x156>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800edc0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800edc4:	3b0b      	subs	r3, #11
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d904      	bls.n	800edd6 <RadioSetTxGenericConfig+0x1de>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800edcc:	4b1a      	ldr	r3, [pc, #104]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800edd4:	e7bb      	b.n	800ed4e <RadioSetTxGenericConfig+0x156>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800edd6:	4b18      	ldr	r3, [pc, #96]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800edde:	e7b6      	b.n	800ed4e <RadioSetTxGenericConfig+0x156>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800ede0:	f640 0089 	movw	r0, #2185	; 0x889
 800ede4:	f000 ff84 	bl	800fcf0 <SUBGRF_ReadRegister>
 800ede8:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800edec:	f640 0089 	movw	r0, #2185	; 0x889
 800edf0:	f000 fe8e 	bl	800fb10 <SUBGRF_WriteRegister>
 800edf4:	e713      	b.n	800ec1e <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800edf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edf8:	3b01      	subs	r3, #1
 800edfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800edfe:	d218      	bcs.n	800ee32 <RadioSetTxGenericConfig+0x23a>
        RadioSetModem( MODEM_BPSK );
 800ee00:	2002      	movs	r0, #2
 800ee02:	f7ff fec1 	bl	800eb88 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800ee06:	480c      	ldr	r0, [pc, #48]	; (800ee38 <RadioSetTxGenericConfig+0x240>)
 800ee08:	2302      	movs	r3, #2
 800ee0a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800ee0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee10:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800ee12:	2316      	movs	r3, #22
 800ee14:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ee18:	3038      	adds	r0, #56	; 0x38
 800ee1a:	f000 fee1 	bl	800fbe0 <SUBGRF_SetModulationParams>
        break;
 800ee1e:	e6fe      	b.n	800ec1e <RadioSetTxGenericConfig+0x26>
            return -1;
 800ee20:	f04f 30ff 	mov.w	r0, #4294967295
 800ee24:	e705      	b.n	800ec32 <RadioSetTxGenericConfig+0x3a>
 800ee26:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2a:	e702      	b.n	800ec32 <RadioSetTxGenericConfig+0x3a>
            return -1;
 800ee2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee30:	e6ff      	b.n	800ec32 <RadioSetTxGenericConfig+0x3a>
            return -1;
 800ee32:	f04f 30ff 	mov.w	r0, #4294967295
 800ee36:	e6fc      	b.n	800ec32 <RadioSetTxGenericConfig+0x3a>
 800ee38:	200019e0 	.word	0x200019e0
 800ee3c:	20001a38 	.word	0x20001a38
 800ee40:	20001144 	.word	0x20001144
 800ee44:	20001a18 	.word	0x20001a18

0800ee48 <RadioSetRxGenericConfig>:
{
 800ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	4607      	mov	r7, r0
 800ee4e:	460c      	mov	r4, r1
 800ee50:	4615      	mov	r5, r2
 800ee52:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800ee54:	2300      	movs	r3, #0
 800ee56:	9304      	str	r3, [sp, #16]
 800ee58:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ee5a:	f001 fa7c 	bl	8010356 <RFW_DeInit>
    if( rxContinuous != 0 )
 800ee5e:	b105      	cbz	r5, 800ee62 <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 800ee60:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800ee62:	3d00      	subs	r5, #0
 800ee64:	bf18      	it	ne
 800ee66:	2501      	movne	r5, #1
 800ee68:	4b94      	ldr	r3, [pc, #592]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800ee6a:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800ee6c:	b12f      	cbz	r7, 800ee7a <RadioSetRxGenericConfig+0x32>
 800ee6e:	2f01      	cmp	r7, #1
 800ee70:	f000 8094 	beq.w	800ef9c <RadioSetRxGenericConfig+0x154>
 800ee74:	2000      	movs	r0, #0
}
 800ee76:	b007      	add	sp, #28
 800ee78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ee7a:	68e3      	ldr	r3, [r4, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f000 8110 	beq.w	800f0a2 <RadioSetRxGenericConfig+0x25a>
 800ee82:	6923      	ldr	r3, [r4, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f000 810f 	beq.w	800f0a8 <RadioSetRxGenericConfig+0x260>
        if( config->fsk.SyncWordLength > 8 )
 800ee8a:	7d63      	ldrb	r3, [r4, #21]
 800ee8c:	2b08      	cmp	r3, #8
 800ee8e:	f200 810e 	bhi.w	800f0ae <RadioSetRxGenericConfig+0x266>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ee92:	2200      	movs	r2, #0
 800ee94:	e006      	b.n	800eea4 <RadioSetRxGenericConfig+0x5c>
                syncword[i] = config->fsk.SyncWord[i];
 800ee96:	69a1      	ldr	r1, [r4, #24]
 800ee98:	5c88      	ldrb	r0, [r1, r2]
 800ee9a:	a906      	add	r1, sp, #24
 800ee9c:	4411      	add	r1, r2
 800ee9e:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800eea2:	3201      	adds	r2, #1
 800eea4:	4293      	cmp	r3, r2
 800eea6:	dcf6      	bgt.n	800ee96 <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800eea8:	6820      	ldr	r0, [r4, #0]
 800eeaa:	3800      	subs	r0, #0
 800eeac:	bf18      	it	ne
 800eeae:	2001      	movne	r0, #1
 800eeb0:	f000 fcca 	bl	800f848 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800eeb4:	4d81      	ldr	r5, [pc, #516]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800eeb6:	2700      	movs	r7, #0
 800eeb8:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800eebc:	68e3      	ldr	r3, [r4, #12]
 800eebe:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800eec0:	7923      	ldrb	r3, [r4, #4]
 800eec2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800eec6:	68a0      	ldr	r0, [r4, #8]
 800eec8:	f001 f9de 	bl	8010288 <SUBGRF_GetFskBandwidthRegValue>
 800eecc:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800eed0:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800eed2:	6923      	ldr	r3, [r4, #16]
 800eed4:	00db      	lsls	r3, r3, #3
 800eed6:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800eed8:	7d23      	ldrb	r3, [r4, #20]
 800eeda:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800eedc:	7d63      	ldrb	r3, [r4, #21]
 800eede:	00db      	lsls	r3, r3, #3
 800eee0:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800eee2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800eee6:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800eee8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800eeec:	b973      	cbnz	r3, 800ef0c <RadioSetRxGenericConfig+0xc4>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800eeee:	69e1      	ldr	r1, [r4, #28]
 800eef0:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800eef2:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800eef6:	2a02      	cmp	r2, #2
 800eef8:	d012      	beq.n	800ef20 <RadioSetRxGenericConfig+0xd8>
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d010      	beq.n	800ef20 <RadioSetRxGenericConfig+0xd8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800eefe:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800ef02:	496e      	ldr	r1, [pc, #440]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800ef04:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ef06:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800ef08:	754b      	strb	r3, [r1, #21]
 800ef0a:	e023      	b.n	800ef54 <RadioSetRxGenericConfig+0x10c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	d003      	beq.n	800ef18 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800ef10:	4a6a      	ldr	r2, [pc, #424]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800ef12:	21ff      	movs	r1, #255	; 0xff
 800ef14:	7591      	strb	r1, [r2, #22]
 800ef16:	e7ec      	b.n	800eef2 <RadioSetRxGenericConfig+0xaa>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800ef18:	4a68      	ldr	r2, [pc, #416]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800ef1a:	21ff      	movs	r1, #255	; 0xff
 800ef1c:	7591      	strb	r1, [r2, #22]
 800ef1e:	e7e8      	b.n	800eef2 <RadioSetRxGenericConfig+0xaa>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ef20:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800ef24:	f102 030f 	add.w	r3, r2, #15
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d901      	bls.n	800ef32 <RadioSetRxGenericConfig+0xea>
 800ef2e:	2a01      	cmp	r2, #1
 800ef30:	d131      	bne.n	800ef96 <RadioSetRxGenericConfig+0x14e>
          ConfigGeneric.rtx = CONFIG_RX;
 800ef32:	2300      	movs	r3, #0
 800ef34:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800ef38:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800ef3a:	4a61      	ldr	r2, [pc, #388]	; (800f0c0 <RadioSetRxGenericConfig+0x278>)
 800ef3c:	4b61      	ldr	r3, [pc, #388]	; (800f0c4 <RadioSetRxGenericConfig+0x27c>)
 800ef3e:	6819      	ldr	r1, [r3, #0]
 800ef40:	a801      	add	r0, sp, #4
 800ef42:	f001 fa05 	bl	8010350 <RFW_Init>
 800ef46:	bb30      	cbnz	r0, 800ef96 <RadioSetRxGenericConfig+0x14e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ef48:	4b5c      	ldr	r3, [pc, #368]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800ef4e:	2101      	movs	r1, #1
 800ef50:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ef52:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800ef54:	f7ff fb54 	bl	800e600 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800ef58:	2000      	movs	r0, #0
 800ef5a:	f7ff fe15 	bl	800eb88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ef5e:	4d5a      	ldr	r5, [pc, #360]	; (800f0c8 <RadioSetRxGenericConfig+0x280>)
 800ef60:	4628      	mov	r0, r5
 800ef62:	f000 fe3d 	bl	800fbe0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef66:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800ef6a:	f001 f809 	bl	800ff80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ef6e:	a804      	add	r0, sp, #16
 800ef70:	f000 ffd4 	bl	800ff1c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800ef74:	8c20      	ldrh	r0, [r4, #32]
 800ef76:	f000 ff37 	bl	800fde8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800ef7a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800ef7c:	f000 ffeb 	bl	800ff56 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800ef80:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800ef84:	fb03 f606 	mul.w	r6, r3, r6
 800ef88:	68e3      	ldr	r3, [r4, #12]
 800ef8a:	fbb6 f6f3 	udiv	r6, r6, r3
 800ef8e:	f845 6c30 	str.w	r6, [r5, #-48]
    return status;
 800ef92:	2000      	movs	r0, #0
        break;
 800ef94:	e76f      	b.n	800ee76 <RadioSetRxGenericConfig+0x2e>
            return -1;
 800ef96:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9a:	e76c      	b.n	800ee76 <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 800ef9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 8088 	beq.w	800f0b4 <RadioSetRxGenericConfig+0x26c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800efa4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d053      	beq.n	800f054 <RadioSetRxGenericConfig+0x20c>
            MaxPayloadLength = 0xFF;
 800efac:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800efae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800efb0:	3800      	subs	r0, #0
 800efb2:	bf18      	it	ne
 800efb4:	2001      	movne	r0, #1
 800efb6:	f000 fc47 	bl	800f848 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800efba:	b2f0      	uxtb	r0, r6
 800efbc:	f000 fdd6 	bl	800fb6c <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800efc0:	4b3e      	ldr	r3, [pc, #248]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800efc2:	2201      	movs	r2, #1
 800efc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800efc8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800efcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800efd0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800efd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800efd8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800efdc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800efe0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d03c      	beq.n	800f062 <RadioSetRxGenericConfig+0x21a>
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d03f      	beq.n	800f06c <RadioSetRxGenericConfig+0x224>
 800efec:	b3a3      	cbz	r3, 800f058 <RadioSetRxGenericConfig+0x210>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800efee:	4d33      	ldr	r5, [pc, #204]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800eff0:	2601      	movs	r6, #1
 800eff2:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800eff4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800eff6:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800eff8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800effc:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800effe:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800f000:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f004:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800f008:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f00c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800f010:	f7ff faf6 	bl	800e600 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800f014:	4630      	mov	r0, r6
 800f016:	f7ff fdb7 	bl	800eb88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f01a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800f01e:	f000 fddf 	bl	800fbe0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f022:	f105 000e 	add.w	r0, r5, #14
 800f026:	f000 ffab 	bl	800ff80 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f02a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800f02e:	42b3      	cmp	r3, r6
 800f030:	d02c      	beq.n	800f08c <RadioSetRxGenericConfig+0x244>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f032:	f240 7036 	movw	r0, #1846	; 0x736
 800f036:	f000 fe5b 	bl	800fcf0 <SUBGRF_ReadRegister>
 800f03a:	f040 0104 	orr.w	r1, r0, #4
 800f03e:	b2c9      	uxtb	r1, r1
 800f040:	f240 7036 	movw	r0, #1846	; 0x736
 800f044:	f000 fd64 	bl	800fb10 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800f048:	4b1c      	ldr	r3, [pc, #112]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800f04a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f04e:	609a      	str	r2, [r3, #8]
    return status;
 800f050:	2000      	movs	r0, #0
        break;
 800f052:	e710      	b.n	800ee76 <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800f054:	7f27      	ldrb	r7, [r4, #28]
 800f056:	e7aa      	b.n	800efae <RadioSetRxGenericConfig+0x166>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f058:	4b18      	ldr	r3, [pc, #96]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f060:	e7c5      	b.n	800efee <RadioSetRxGenericConfig+0x1a6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f062:	4b16      	ldr	r3, [pc, #88]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800f064:	2201      	movs	r2, #1
 800f066:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f06a:	e7c0      	b.n	800efee <RadioSetRxGenericConfig+0x1a6>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f06c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f070:	3b0b      	subs	r3, #11
 800f072:	b2db      	uxtb	r3, r3
 800f074:	2b01      	cmp	r3, #1
 800f076:	d904      	bls.n	800f082 <RadioSetRxGenericConfig+0x23a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f078:	4b10      	ldr	r3, [pc, #64]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f080:	e7b5      	b.n	800efee <RadioSetRxGenericConfig+0x1a6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f082:	4b0e      	ldr	r3, [pc, #56]	; (800f0bc <RadioSetRxGenericConfig+0x274>)
 800f084:	2201      	movs	r2, #1
 800f086:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f08a:	e7b0      	b.n	800efee <RadioSetRxGenericConfig+0x1a6>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f08c:	f240 7036 	movw	r0, #1846	; 0x736
 800f090:	f000 fe2e 	bl	800fcf0 <SUBGRF_ReadRegister>
 800f094:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f098:	f240 7036 	movw	r0, #1846	; 0x736
 800f09c:	f000 fd38 	bl	800fb10 <SUBGRF_WriteRegister>
 800f0a0:	e7d2      	b.n	800f048 <RadioSetRxGenericConfig+0x200>
            return -1;
 800f0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a6:	e6e6      	b.n	800ee76 <RadioSetRxGenericConfig+0x2e>
 800f0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ac:	e6e3      	b.n	800ee76 <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b2:	e6e0      	b.n	800ee76 <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b8:	e6dd      	b.n	800ee76 <RadioSetRxGenericConfig+0x2e>
 800f0ba:	bf00      	nop
 800f0bc:	200019e0 	.word	0x200019e0
 800f0c0:	20001a50 	.word	0x20001a50
 800f0c4:	20001144 	.word	0x20001144
 800f0c8:	20001a18 	.word	0x20001a18

0800f0cc <RadioSetPublicNetwork>:
{
 800f0cc:	b510      	push	{r4, lr}
 800f0ce:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f0d0:	4b0e      	ldr	r3, [pc, #56]	; (800f10c <RadioSetPublicNetwork+0x40>)
 800f0d2:	7318      	strb	r0, [r3, #12]
 800f0d4:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800f0d6:	2001      	movs	r0, #1
 800f0d8:	f7ff fd56 	bl	800eb88 <RadioSetModem>
    if( enable == true )
 800f0dc:	b154      	cbz	r4, 800f0f4 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f0de:	2134      	movs	r1, #52	; 0x34
 800f0e0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f0e4:	f000 fd14 	bl	800fb10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f0e8:	2144      	movs	r1, #68	; 0x44
 800f0ea:	f240 7041 	movw	r0, #1857	; 0x741
 800f0ee:	f000 fd0f 	bl	800fb10 <SUBGRF_WriteRegister>
}
 800f0f2:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f0f4:	2114      	movs	r1, #20
 800f0f6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f0fa:	f000 fd09 	bl	800fb10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f0fe:	2124      	movs	r1, #36	; 0x24
 800f100:	f240 7041 	movw	r0, #1857	; 0x741
 800f104:	f000 fd04 	bl	800fb10 <SUBGRF_WriteRegister>
}
 800f108:	e7f3      	b.n	800f0f2 <RadioSetPublicNetwork+0x26>
 800f10a:	bf00      	nop
 800f10c:	200019e0 	.word	0x200019e0

0800f110 <RadioSetTxConfig>:
{
 800f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f114:	b083      	sub	sp, #12
 800f116:	4604      	mov	r4, r0
 800f118:	460d      	mov	r5, r1
 800f11a:	4691      	mov	r9, r2
 800f11c:	461f      	mov	r7, r3
 800f11e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800f122:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800f126:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f12a:	f001 f914 	bl	8010356 <RFW_DeInit>
    switch( modem )
 800f12e:	2c01      	cmp	r4, #1
 800f130:	d05a      	beq.n	800f1e8 <RadioSetTxConfig+0xd8>
 800f132:	2c03      	cmp	r4, #3
 800f134:	f000 80ab 	beq.w	800f28e <RadioSetTxConfig+0x17e>
 800f138:	b164      	cbz	r4, 800f154 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f13a:	4628      	mov	r0, r5
 800f13c:	f001 f836 	bl	80101ac <SUBGRF_SetRfTxPower>
 800f140:	4c5b      	ldr	r4, [pc, #364]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f142:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800f146:	f001 f90b 	bl	8010360 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f14a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f14c:	6063      	str	r3, [r4, #4]
}
 800f14e:	b003      	add	sp, #12
 800f150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f154:	4c56      	ldr	r4, [pc, #344]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f156:	f04f 0b00 	mov.w	fp, #0
 800f15a:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f15e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f160:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f162:	230b      	movs	r3, #11
 800f164:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f168:	4638      	mov	r0, r7
 800f16a:	f001 f88d 	bl	8010288 <SUBGRF_GetFskBandwidthRegValue>
 800f16e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f172:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f176:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f17a:	00f6      	lsls	r6, r6, #3
 800f17c:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f17e:	2304      	movs	r3, #4
 800f180:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f182:	2318      	movs	r3, #24
 800f184:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f186:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f18a:	f088 0801 	eor.w	r8, r8, #1
 800f18e:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 800f192:	f1ba 0f00 	cmp.w	sl, #0
 800f196:	d023      	beq.n	800f1e0 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f198:	22f2      	movs	r2, #242	; 0xf2
 800f19a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f19c:	4c44      	ldr	r4, [pc, #272]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f19e:	2301      	movs	r3, #1
 800f1a0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f1a2:	f7ff fa2d 	bl	800e600 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f1a6:	4626      	mov	r6, r4
 800f1a8:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f1ac:	3800      	subs	r0, #0
 800f1ae:	bf18      	it	ne
 800f1b0:	2001      	movne	r0, #1
 800f1b2:	f7ff fce9 	bl	800eb88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f000 fd12 	bl	800fbe0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f1bc:	f104 000e 	add.w	r0, r4, #14
 800f1c0:	f000 fede 	bl	800ff80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f1c4:	4a3b      	ldr	r2, [pc, #236]	; (800f2b4 <RadioSetTxConfig+0x1a4>)
 800f1c6:	466b      	mov	r3, sp
 800f1c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f000 fea3 	bl	800ff1c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f1d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f1da:	f000 fe05 	bl	800fde8 <SUBGRF_SetWhiteningSeed>
            break;
 800f1de:	e7ac      	b.n	800f13a <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f1e0:	4b33      	ldr	r3, [pc, #204]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	75da      	strb	r2, [r3, #23]
 800f1e6:	e7d9      	b.n	800f19c <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f1e8:	4a31      	ldr	r2, [pc, #196]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f1f8:	492f      	ldr	r1, [pc, #188]	; (800f2b8 <RadioSetTxConfig+0x1a8>)
 800f1fa:	5dc9      	ldrb	r1, [r1, r7]
 800f1fc:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f200:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800f204:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f208:	b91f      	cbnz	r7, 800f212 <RadioSetTxConfig+0x102>
 800f20a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f20c:	3a0b      	subs	r2, #11
 800f20e:	2a01      	cmp	r2, #1
 800f210:	d92f      	bls.n	800f272 <RadioSetTxConfig+0x162>
 800f212:	2f01      	cmp	r7, #1
 800f214:	d02a      	beq.n	800f26c <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f216:	4a26      	ldr	r2, [pc, #152]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f218:	2100      	movs	r1, #0
 800f21a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f21e:	4a24      	ldr	r2, [pc, #144]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f220:	2101      	movs	r1, #1
 800f222:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f224:	3b05      	subs	r3, #5
 800f226:	b2db      	uxtb	r3, r3
 800f228:	428b      	cmp	r3, r1
 800f22a:	d927      	bls.n	800f27c <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f22c:	4b20      	ldr	r3, [pc, #128]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f22e:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f230:	4c1f      	ldr	r4, [pc, #124]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f232:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f236:	4b21      	ldr	r3, [pc, #132]	; (800f2bc <RadioSetTxConfig+0x1ac>)
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f23c:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f240:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f244:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f248:	f7ff f9da 	bl	800e600 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f24c:	4626      	mov	r6, r4
 800f24e:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f252:	3800      	subs	r0, #0
 800f254:	bf18      	it	ne
 800f256:	2001      	movne	r0, #1
 800f258:	f7ff fc96 	bl	800eb88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f25c:	4630      	mov	r0, r6
 800f25e:	f000 fcbf 	bl	800fbe0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f262:	f104 000e 	add.w	r0, r4, #14
 800f266:	f000 fe8b 	bl	800ff80 <SUBGRF_SetPacketParams>
            break;
 800f26a:	e766      	b.n	800f13a <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f26e:	2a0c      	cmp	r2, #12
 800f270:	d1d1      	bne.n	800f216 <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f272:	4a0f      	ldr	r2, [pc, #60]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f274:	2101      	movs	r1, #1
 800f276:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f27a:	e7d0      	b.n	800f21e <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 800f27c:	2e0b      	cmp	r6, #11
 800f27e:	d803      	bhi.n	800f288 <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f280:	4613      	mov	r3, r2
 800f282:	220c      	movs	r2, #12
 800f284:	839a      	strh	r2, [r3, #28]
 800f286:	e7d3      	b.n	800f230 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f288:	4b09      	ldr	r3, [pc, #36]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f28a:	839e      	strh	r6, [r3, #28]
 800f28c:	e7d0      	b.n	800f230 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 800f28e:	2003      	movs	r0, #3
 800f290:	f7ff fc7a 	bl	800eb88 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800f294:	4806      	ldr	r0, [pc, #24]	; (800f2b0 <RadioSetTxConfig+0x1a0>)
 800f296:	2302      	movs	r3, #2
 800f298:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800f29c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f29e:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800f2a0:	2316      	movs	r3, #22
 800f2a2:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f2a6:	3038      	adds	r0, #56	; 0x38
 800f2a8:	f000 fc9a 	bl	800fbe0 <SUBGRF_SetModulationParams>
            break;
 800f2ac:	e745      	b.n	800f13a <RadioSetTxConfig+0x2a>
 800f2ae:	bf00      	nop
 800f2b0:	200019e0 	.word	0x200019e0
 800f2b4:	08011220 	.word	0x08011220
 800f2b8:	08011df4 	.word	0x08011df4
 800f2bc:	200000cc 	.word	0x200000cc

0800f2c0 <RadioSetRxConfig>:
{
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	b087      	sub	sp, #28
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	460e      	mov	r6, r1
 800f2ca:	4615      	mov	r5, r2
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 800f2d2:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 800f2d6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800f2da:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 800f2de:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 800f2e2:	4baf      	ldr	r3, [pc, #700]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f2e4:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f2e8:	f001 f835 	bl	8010356 <RFW_DeInit>
    if( rxContinuous == true )
 800f2ec:	f1b8 0f00 	cmp.w	r8, #0
 800f2f0:	d001      	beq.n	800f2f6 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800f2f2:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800f2f6:	b16f      	cbz	r7, 800f314 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 800f2f8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800f2fc:	4ba9      	ldr	r3, [pc, #676]	; (800f5a4 <RadioSetRxConfig+0x2e4>)
 800f2fe:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800f300:	2c01      	cmp	r4, #1
 800f302:	f000 80d6 	beq.w	800f4b2 <RadioSetRxConfig+0x1f2>
 800f306:	2c04      	cmp	r4, #4
 800f308:	d008      	beq.n	800f31c <RadioSetRxConfig+0x5c>
 800f30a:	2c00      	cmp	r4, #0
 800f30c:	d07c      	beq.n	800f408 <RadioSetRxConfig+0x148>
}
 800f30e:	b007      	add	sp, #28
 800f310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800f314:	4ba3      	ldr	r3, [pc, #652]	; (800f5a4 <RadioSetRxConfig+0x2e4>)
 800f316:	22ff      	movs	r2, #255	; 0xff
 800f318:	701a      	strb	r2, [r3, #0]
 800f31a:	e7f1      	b.n	800f300 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800f31c:	2001      	movs	r0, #1
 800f31e:	f000 fa93 	bl	800f848 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f322:	4c9f      	ldr	r4, [pc, #636]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f324:	2700      	movs	r7, #0
 800f326:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f32a:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800f32c:	2309      	movs	r3, #9
 800f32e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800f332:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f336:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f338:	4630      	mov	r0, r6
 800f33a:	f000 ffa5 	bl	8010288 <SUBGRF_GetFskBandwidthRegValue>
 800f33e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f342:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f344:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f348:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800f34c:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800f34e:	2310      	movs	r3, #16
 800f350:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f352:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800f354:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f356:	4b93      	ldr	r3, [pc, #588]	; (800f5a4 <RadioSetRxConfig+0x2e4>)
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f35c:	2301      	movs	r3, #1
 800f35e:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800f360:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800f362:	2004      	movs	r0, #4
 800f364:	f7ff fc10 	bl	800eb88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f368:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f36c:	f000 fc38 	bl	800fbe0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f370:	f104 000e 	add.w	r0, r4, #14
 800f374:	f000 fe04 	bl	800ff80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f378:	ab02      	add	r3, sp, #8
 800f37a:	4a8b      	ldr	r2, [pc, #556]	; (800f5a8 <RadioSetRxConfig+0x2e8>)
 800f37c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f380:	e883 0003 	stmia.w	r3, {r0, r1}
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fdc9 	bl	800ff1c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f38a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f38e:	f000 fd2b 	bl	800fde8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800f392:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800f396:	f7ff f8c9 	bl	800e52c <RadioRead>
            RadioWrite(0x8b8, modReg);
 800f39a:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 800f39e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800f3a2:	f7ff f8c7 	bl	800e534 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800f3a6:	2104      	movs	r1, #4
 800f3a8:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800f3ac:	f7ff f8c2 	bl	800e534 <RadioWrite>
            modReg= RadioRead(0x89b);
 800f3b0:	f640 009b 	movw	r0, #2203	; 0x89b
 800f3b4:	f7ff f8ba 	bl	800e52c <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f3b8:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800f3bc:	f041 0108 	orr.w	r1, r1, #8
 800f3c0:	f640 009b 	movw	r0, #2203	; 0x89b
 800f3c4:	f7ff f8b6 	bl	800e534 <RadioWrite>
            modReg= RadioRead(0x6d1);
 800f3c8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800f3cc:	f7ff f8ae 	bl	800e52c <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f3d0:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800f3d4:	f041 0118 	orr.w	r1, r1, #24
 800f3d8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800f3dc:	f7ff f8aa 	bl	800e534 <RadioWrite>
            modReg= RadioRead(0x6ac);
 800f3e0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f3e4:	f7ff f8a2 	bl	800e52c <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800f3e8:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800f3ec:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 800f3f0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f3f4:	f7ff f89e 	bl	800e534 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f3f8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f3fc:	fb03 fa0a 	mul.w	sl, r3, sl
 800f400:	fbba f5f5 	udiv	r5, sl, r5
 800f404:	60a5      	str	r5, [r4, #8]
            break;
 800f406:	e782      	b.n	800f30e <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f408:	2000      	movs	r0, #0
 800f40a:	f000 fa1d 	bl	800f848 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f40e:	4c64      	ldr	r4, [pc, #400]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f410:	f04f 0800 	mov.w	r8, #0
 800f414:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f418:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f41a:	230b      	movs	r3, #11
 800f41c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f420:	4630      	mov	r0, r6
 800f422:	f000 ff31 	bl	8010288 <SUBGRF_GetFskBandwidthRegValue>
 800f426:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f42a:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f42e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f432:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f436:	2304      	movs	r3, #4
 800f438:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800f43a:	2318      	movs	r3, #24
 800f43c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f43e:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f442:	f087 0701 	eor.w	r7, r7, #1
 800f446:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f448:	4b56      	ldr	r3, [pc, #344]	; (800f5a4 <RadioSetRxConfig+0x2e4>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800f44e:	f1bb 0f00 	cmp.w	fp, #0
 800f452:	d02a      	beq.n	800f4aa <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f454:	22f2      	movs	r2, #242	; 0xf2
 800f456:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f458:	4c51      	ldr	r4, [pc, #324]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f45a:	2301      	movs	r3, #1
 800f45c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f45e:	f7ff f8cf 	bl	800e600 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f462:	4626      	mov	r6, r4
 800f464:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f468:	3800      	subs	r0, #0
 800f46a:	bf18      	it	ne
 800f46c:	2001      	movne	r0, #1
 800f46e:	f7ff fb8b 	bl	800eb88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f472:	4630      	mov	r0, r6
 800f474:	f000 fbb4 	bl	800fbe0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f478:	f104 000e 	add.w	r0, r4, #14
 800f47c:	f000 fd80 	bl	800ff80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f480:	4a4a      	ldr	r2, [pc, #296]	; (800f5ac <RadioSetRxConfig+0x2ec>)
 800f482:	ab04      	add	r3, sp, #16
 800f484:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f488:	e883 0003 	stmia.w	r3, {r0, r1}
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fd45 	bl	800ff1c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f492:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f496:	f000 fca7 	bl	800fde8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f49a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f49e:	fb03 fa0a 	mul.w	sl, r3, sl
 800f4a2:	fbba f5f5 	udiv	r5, sl, r5
 800f4a6:	60a5      	str	r5, [r4, #8]
            break;
 800f4a8:	e731      	b.n	800f30e <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f4aa:	4b3d      	ldr	r3, [pc, #244]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	75da      	strb	r2, [r3, #23]
 800f4b0:	e7d2      	b.n	800f458 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	f000 f9c8 	bl	800f848 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f4b8:	4a39      	ldr	r2, [pc, #228]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800f4c0:	b2eb      	uxtb	r3, r5
 800f4c2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800f4c6:	493a      	ldr	r1, [pc, #232]	; (800f5b0 <RadioSetRxConfig+0x2f0>)
 800f4c8:	5d89      	ldrb	r1, [r1, r6]
 800f4ca:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800f4ce:	9901      	ldr	r1, [sp, #4]
 800f4d0:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f4d4:	b91e      	cbnz	r6, 800f4de <RadioSetRxConfig+0x21e>
 800f4d6:	f1a5 020b 	sub.w	r2, r5, #11
 800f4da:	2a01      	cmp	r2, #1
 800f4dc:	d945      	bls.n	800f56a <RadioSetRxConfig+0x2aa>
 800f4de:	2e01      	cmp	r6, #1
 800f4e0:	d041      	beq.n	800f566 <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f4e2:	4a2f      	ldr	r2, [pc, #188]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f4ea:	4a2d      	ldr	r2, [pc, #180]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f4ec:	2101      	movs	r1, #1
 800f4ee:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f4f0:	3b05      	subs	r3, #5
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	428b      	cmp	r3, r1
 800f4f6:	d93d      	bls.n	800f574 <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f4f8:	4b29      	ldr	r3, [pc, #164]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f4fa:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f4fe:	4c28      	ldr	r4, [pc, #160]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f500:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f502:	4b28      	ldr	r3, [pc, #160]	; (800f5a4 <RadioSetRxConfig+0x2e4>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f508:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f50c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800f510:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f514:	f7ff f874 	bl	800e600 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f518:	4625      	mov	r5, r4
 800f51a:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 800f51e:	3800      	subs	r0, #0
 800f520:	bf18      	it	ne
 800f522:	2001      	movne	r0, #1
 800f524:	f7ff fb30 	bl	800eb88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f528:	4628      	mov	r0, r5
 800f52a:	f000 fb59 	bl	800fbe0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f52e:	f104 000e 	add.w	r0, r4, #14
 800f532:	f000 fd25 	bl	800ff80 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f536:	fa5f f08a 	uxtb.w	r0, sl
 800f53a:	f000 fb17 	bl	800fb6c <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f53e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f542:	2b01      	cmp	r3, #1
 800f544:	d021      	beq.n	800f58a <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f546:	f240 7036 	movw	r0, #1846	; 0x736
 800f54a:	f000 fbd1 	bl	800fcf0 <SUBGRF_ReadRegister>
 800f54e:	f040 0104 	orr.w	r1, r0, #4
 800f552:	b2c9      	uxtb	r1, r1
 800f554:	f240 7036 	movw	r0, #1846	; 0x736
 800f558:	f000 fada 	bl	800fb10 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800f55c:	4b10      	ldr	r3, [pc, #64]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f55e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f562:	609a      	str	r2, [r3, #8]
}
 800f564:	e6d3      	b.n	800f30e <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f566:	2d0c      	cmp	r5, #12
 800f568:	d1bb      	bne.n	800f4e2 <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f56a:	4a0d      	ldr	r2, [pc, #52]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f56c:	2101      	movs	r1, #1
 800f56e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f572:	e7ba      	b.n	800f4ea <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 800f574:	f1b9 0f0b 	cmp.w	r9, #11
 800f578:	d803      	bhi.n	800f582 <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f57a:	4613      	mov	r3, r2
 800f57c:	220c      	movs	r2, #12
 800f57e:	839a      	strh	r2, [r3, #28]
 800f580:	e7bd      	b.n	800f4fe <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f582:	4b07      	ldr	r3, [pc, #28]	; (800f5a0 <RadioSetRxConfig+0x2e0>)
 800f584:	f8a3 901c 	strh.w	r9, [r3, #28]
 800f588:	e7b9      	b.n	800f4fe <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f58a:	f240 7036 	movw	r0, #1846	; 0x736
 800f58e:	f000 fbaf 	bl	800fcf0 <SUBGRF_ReadRegister>
 800f592:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f596:	f240 7036 	movw	r0, #1846	; 0x736
 800f59a:	f000 fab9 	bl	800fb10 <SUBGRF_WriteRegister>
 800f59e:	e7dd      	b.n	800f55c <RadioSetRxConfig+0x29c>
 800f5a0:	200019e0 	.word	0x200019e0
 800f5a4:	200000cc 	.word	0x200000cc
 800f5a8:	08011228 	.word	0x08011228
 800f5ac:	08011220 	.word	0x08011220
 800f5b0:	08011df4 	.word	0x08011df4

0800f5b4 <RadioRandom>:
{
 800f5b4:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	f7ff fae6 	bl	800eb88 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f5bc:	2300      	movs	r3, #0
 800f5be:	461a      	mov	r2, r3
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f000 f9e3 	bl	800f98e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800f5c8:	f000 fd5c 	bl	8010084 <SUBGRF_GetRandom>
}
 800f5cc:	bd08      	pop	{r3, pc}

0800f5ce <RadioIsChannelFree>:
{
 800f5ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5d0:	b08b      	sub	sp, #44	; 0x2c
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	460f      	mov	r7, r1
 800f5d6:	4616      	mov	r6, r2
 800f5d8:	461d      	mov	r5, r3
    RadioStandby( );
 800f5da:	f7ff f811 	bl	800e600 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800f5de:	2000      	movs	r0, #0
 800f5e0:	f7ff fad2 	bl	800eb88 <RadioSetModem>
    RadioSetChannel( freq );
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff f9b3 	bl	800e950 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ee:	2400      	movs	r4, #0
 800f5f0:	9408      	str	r4, [sp, #32]
 800f5f2:	9407      	str	r4, [sp, #28]
 800f5f4:	9406      	str	r4, [sp, #24]
 800f5f6:	9405      	str	r4, [sp, #20]
 800f5f8:	9404      	str	r4, [sp, #16]
 800f5fa:	9403      	str	r4, [sp, #12]
 800f5fc:	9402      	str	r4, [sp, #8]
 800f5fe:	2303      	movs	r3, #3
 800f600:	9301      	str	r3, [sp, #4]
 800f602:	9700      	str	r7, [sp, #0]
 800f604:	4623      	mov	r3, r4
 800f606:	f44f 7216 	mov.w	r2, #600	; 0x258
 800f60a:	4639      	mov	r1, r7
 800f60c:	4620      	mov	r0, r4
 800f60e:	f7ff fe57 	bl	800f2c0 <RadioSetRxConfig>
    RadioRx( 0 );
 800f612:	4620      	mov	r0, r4
 800f614:	f7ff f9b4 	bl	800e980 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f618:	f7ff f96c 	bl	800e8f4 <RadioGetWakeupTime>
 800f61c:	f7f1 ff6a 	bl	80014f4 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f620:	f001 fa74 	bl	8010b0c <UTIL_TIMER_GetCurrentTime>
 800f624:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f626:	4620      	mov	r0, r4
 800f628:	f001 fa7a 	bl	8010b20 <UTIL_TIMER_GetElapsedTime>
 800f62c:	42a8      	cmp	r0, r5
 800f62e:	d206      	bcs.n	800f63e <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800f630:	2000      	movs	r0, #0
 800f632:	f7ff f96c 	bl	800e90e <RadioRssi>
        if( rssi > rssiThresh )
 800f636:	42b0      	cmp	r0, r6
 800f638:	ddf5      	ble.n	800f626 <RadioIsChannelFree+0x58>
            status = false;
 800f63a:	2400      	movs	r4, #0
 800f63c:	e000      	b.n	800f640 <RadioIsChannelFree+0x72>
    bool status = true;
 800f63e:	2401      	movs	r4, #1
    RadioStandby( );
 800f640:	f7fe ffde 	bl	800e600 <RadioStandby>
}
 800f644:	4620      	mov	r0, r4
 800f646:	b00b      	add	sp, #44	; 0x2c
 800f648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f64c <RadioInit>:
{
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	b082      	sub	sp, #8
    RadioEvents = events;
 800f650:	4b1d      	ldr	r3, [pc, #116]	; (800f6c8 <RadioInit+0x7c>)
 800f652:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800f654:	4b1d      	ldr	r3, [pc, #116]	; (800f6cc <RadioInit+0x80>)
 800f656:	2400      	movs	r4, #0
 800f658:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 800f65a:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 800f65c:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 800f65e:	481c      	ldr	r0, [pc, #112]	; (800f6d0 <RadioInit+0x84>)
 800f660:	f000 fb6a 	bl	800fd38 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 800f664:	4620      	mov	r0, r4
 800f666:	f7ff fd31 	bl	800f0cc <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 800f66a:	f000 f8fa 	bl	800f862 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800f66e:	4621      	mov	r1, r4
 800f670:	4620      	mov	r0, r4
 800f672:	f000 f9f5 	bl	800fa60 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800f676:	2204      	movs	r2, #4
 800f678:	4621      	mov	r1, r4
 800f67a:	2001      	movs	r0, #1
 800f67c:	f000 fbcd 	bl	800fe1a <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f680:	4623      	mov	r3, r4
 800f682:	4622      	mov	r2, r4
 800f684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f688:	4608      	mov	r0, r1
 800f68a:	f000 f980 	bl	800f98e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800f68e:	f7ff f9a9 	bl	800e9e4 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800f692:	4e10      	ldr	r6, [pc, #64]	; (800f6d4 <RadioInit+0x88>)
 800f694:	9400      	str	r4, [sp, #0]
 800f696:	4b10      	ldr	r3, [pc, #64]	; (800f6d8 <RadioInit+0x8c>)
 800f698:	4622      	mov	r2, r4
 800f69a:	f04f 31ff 	mov.w	r1, #4294967295
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f001 fa16 	bl	8010ad0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800f6a4:	4d0d      	ldr	r5, [pc, #52]	; (800f6dc <RadioInit+0x90>)
 800f6a6:	9400      	str	r4, [sp, #0]
 800f6a8:	4b0d      	ldr	r3, [pc, #52]	; (800f6e0 <RadioInit+0x94>)
 800f6aa:	4622      	mov	r2, r4
 800f6ac:	f04f 31ff 	mov.w	r1, #4294967295
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	f001 fa0d 	bl	8010ad0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f001 fa68 	bl	8010b8c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800f6bc:	4628      	mov	r0, r5
 800f6be:	f001 fa65 	bl	8010b8c <UTIL_TIMER_Stop>
}
 800f6c2:	b002      	add	sp, #8
 800f6c4:	bd70      	pop	{r4, r5, r6, pc}
 800f6c6:	bf00      	nop
 800f6c8:	20001144 	.word	0x20001144
 800f6cc:	200019e0 	.word	0x200019e0
 800f6d0:	0800e8e1 	.word	0x0800e8e1
 800f6d4:	20001a38 	.word	0x20001a38
 800f6d8:	0800e425 	.word	0x0800e425
 800f6dc:	20001a50 	.word	0x20001a50
 800f6e0:	0800e441 	.word	0x0800e441

0800f6e4 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f6e4:	b510      	push	{r4, lr}
 800f6e6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f6ec:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f6ee:	460a      	mov	r2, r1
 800f6f0:	4601      	mov	r1, r0
 800f6f2:	4803      	ldr	r0, [pc, #12]	; (800f700 <SUBGRF_WriteCommand+0x1c>)
 800f6f4:	f7f5 fa24 	bl	8004b40 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6f8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f6fc:	bd10      	pop	{r4, pc}
 800f6fe:	bf00      	nop
 800f700:	200018b4 	.word	0x200018b4

0800f704 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f704:	b510      	push	{r4, lr}
 800f706:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f708:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f70c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f70e:	460a      	mov	r2, r1
 800f710:	4601      	mov	r1, r0
 800f712:	4803      	ldr	r0, [pc, #12]	; (800f720 <SUBGRF_ReadCommand+0x1c>)
 800f714:	f7f5 fa6a 	bl	8004bec <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f718:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f71c:	bd10      	pop	{r4, pc}
 800f71e:	bf00      	nop
 800f720:	200018b4 	.word	0x200018b4

0800f724 <SUBGRF_GetOperatingMode>:
}
 800f724:	4b01      	ldr	r3, [pc, #4]	; (800f72c <SUBGRF_GetOperatingMode+0x8>)
 800f726:	7818      	ldrb	r0, [r3, #0]
 800f728:	4770      	bx	lr
 800f72a:	bf00      	nop
 800f72c:	2000114e 	.word	0x2000114e

0800f730 <SUBGRF_SetStandby>:
{
 800f730:	b500      	push	{lr}
 800f732:	b083      	sub	sp, #12
 800f734:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800f738:	2201      	movs	r2, #1
 800f73a:	f10d 0107 	add.w	r1, sp, #7
 800f73e:	2080      	movs	r0, #128	; 0x80
 800f740:	f7ff ffd0 	bl	800f6e4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800f744:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f748:	b92b      	cbnz	r3, 800f756 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800f74a:	4b05      	ldr	r3, [pc, #20]	; (800f760 <SUBGRF_SetStandby+0x30>)
 800f74c:	2201      	movs	r2, #1
 800f74e:	701a      	strb	r2, [r3, #0]
}
 800f750:	b003      	add	sp, #12
 800f752:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800f756:	4b02      	ldr	r3, [pc, #8]	; (800f760 <SUBGRF_SetStandby+0x30>)
 800f758:	2202      	movs	r2, #2
 800f75a:	701a      	strb	r2, [r3, #0]
}
 800f75c:	e7f8      	b.n	800f750 <SUBGRF_SetStandby+0x20>
 800f75e:	bf00      	nop
 800f760:	2000114e 	.word	0x2000114e

0800f764 <SUBGRF_SetTx>:
{
 800f764:	b500      	push	{lr}
 800f766:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800f768:	4b0a      	ldr	r3, [pc, #40]	; (800f794 <SUBGRF_SetTx+0x30>)
 800f76a:	2204      	movs	r2, #4
 800f76c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f76e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f772:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f776:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f77a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f77e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800f782:	2203      	movs	r2, #3
 800f784:	a901      	add	r1, sp, #4
 800f786:	2083      	movs	r0, #131	; 0x83
 800f788:	f7ff ffac 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f78c:	b003      	add	sp, #12
 800f78e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f792:	bf00      	nop
 800f794:	2000114e 	.word	0x2000114e

0800f798 <SUBGRF_SetRx>:
{
 800f798:	b500      	push	{lr}
 800f79a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800f79c:	4b0a      	ldr	r3, [pc, #40]	; (800f7c8 <SUBGRF_SetRx+0x30>)
 800f79e:	2205      	movs	r2, #5
 800f7a0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f7a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f7a6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f7aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f7ae:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f7b2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f7b6:	2203      	movs	r2, #3
 800f7b8:	a901      	add	r1, sp, #4
 800f7ba:	2082      	movs	r0, #130	; 0x82
 800f7bc:	f7ff ff92 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f7c0:	b003      	add	sp, #12
 800f7c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7c6:	bf00      	nop
 800f7c8:	2000114e 	.word	0x2000114e

0800f7cc <SUBGRF_SetRxDutyCycle>:
{
 800f7cc:	b500      	push	{lr}
 800f7ce:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800f7d0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f7d4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800f7d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f7dc:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800f7e0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800f7e4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f7e8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800f7ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f7f0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800f7f4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800f7f8:	2206      	movs	r2, #6
 800f7fa:	4669      	mov	r1, sp
 800f7fc:	2094      	movs	r0, #148	; 0x94
 800f7fe:	f7ff ff71 	bl	800f6e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800f802:	4b03      	ldr	r3, [pc, #12]	; (800f810 <SUBGRF_SetRxDutyCycle+0x44>)
 800f804:	2206      	movs	r2, #6
 800f806:	701a      	strb	r2, [r3, #0]
}
 800f808:	b003      	add	sp, #12
 800f80a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f80e:	bf00      	nop
 800f810:	2000114e 	.word	0x2000114e

0800f814 <SUBGRF_SetCad>:
{
 800f814:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800f816:	2200      	movs	r2, #0
 800f818:	4611      	mov	r1, r2
 800f81a:	20c5      	movs	r0, #197	; 0xc5
 800f81c:	f7ff ff62 	bl	800f6e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800f820:	4b01      	ldr	r3, [pc, #4]	; (800f828 <SUBGRF_SetCad+0x14>)
 800f822:	2207      	movs	r2, #7
 800f824:	701a      	strb	r2, [r3, #0]
}
 800f826:	bd08      	pop	{r3, pc}
 800f828:	2000114e 	.word	0x2000114e

0800f82c <SUBGRF_SetTxContinuousWave>:
{
 800f82c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800f82e:	2200      	movs	r2, #0
 800f830:	4611      	mov	r1, r2
 800f832:	20d1      	movs	r0, #209	; 0xd1
 800f834:	f7ff ff56 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f838:	bd08      	pop	{r3, pc}

0800f83a <SUBGRF_SetTxInfinitePreamble>:
{
 800f83a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800f83c:	2200      	movs	r2, #0
 800f83e:	4611      	mov	r1, r2
 800f840:	20d2      	movs	r0, #210	; 0xd2
 800f842:	f7ff ff4f 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f846:	bd08      	pop	{r3, pc}

0800f848 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800f848:	b500      	push	{lr}
 800f84a:	b083      	sub	sp, #12
 800f84c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800f850:	2201      	movs	r2, #1
 800f852:	f10d 0107 	add.w	r1, sp, #7
 800f856:	209f      	movs	r0, #159	; 0x9f
 800f858:	f7ff ff44 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f85c:	b003      	add	sp, #12
 800f85e:	f85d fb04 	ldr.w	pc, [sp], #4

0800f862 <SUBGRF_SetRegulatorMode>:
{
 800f862:	b500      	push	{lr}
 800f864:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800f866:	f7f2 fb59 	bl	8001f1c <RBI_IsDCDC>
 800f86a:	2801      	cmp	r0, #1
 800f86c:	d00b      	beq.n	800f886 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800f86e:	2300      	movs	r3, #0
 800f870:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800f874:	2201      	movs	r2, #1
 800f876:	f10d 0107 	add.w	r1, sp, #7
 800f87a:	2096      	movs	r0, #150	; 0x96
 800f87c:	f7ff ff32 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f880:	b003      	add	sp, #12
 800f882:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800f886:	2301      	movs	r3, #1
 800f888:	f88d 3007 	strb.w	r3, [sp, #7]
 800f88c:	e7f2      	b.n	800f874 <SUBGRF_SetRegulatorMode+0x12>

0800f88e <SUBGRF_Calibrate>:
{
 800f88e:	b500      	push	{lr}
 800f890:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f892:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f896:	f3c0 1340 	ubfx	r3, r0, #5, #1
 800f89a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f89c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f8a0:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f8a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f8a8:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f8ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f8b0:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f8b4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f8b8:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f8bc:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800f8c0:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f8c4:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f8c6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	f10d 0107 	add.w	r1, sp, #7
 800f8d0:	2089      	movs	r0, #137	; 0x89
 800f8d2:	f7ff ff07 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f8d6:	b003      	add	sp, #12
 800f8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0800f8dc <SUBGRF_CalibrateImage>:
{
 800f8dc:	b500      	push	{lr}
 800f8de:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800f8e0:	4b1c      	ldr	r3, [pc, #112]	; (800f954 <SUBGRF_CalibrateImage+0x78>)
 800f8e2:	4298      	cmp	r0, r3
 800f8e4:	d90d      	bls.n	800f902 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800f8e6:	23e1      	movs	r3, #225	; 0xe1
 800f8e8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800f8ec:	23e9      	movs	r3, #233	; 0xe9
 800f8ee:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800f8f2:	2202      	movs	r2, #2
 800f8f4:	a901      	add	r1, sp, #4
 800f8f6:	2098      	movs	r0, #152	; 0x98
 800f8f8:	f7ff fef4 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f8fc:	b003      	add	sp, #12
 800f8fe:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800f902:	4b15      	ldr	r3, [pc, #84]	; (800f958 <SUBGRF_CalibrateImage+0x7c>)
 800f904:	4298      	cmp	r0, r3
 800f906:	d906      	bls.n	800f916 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800f908:	23d7      	movs	r3, #215	; 0xd7
 800f90a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800f90e:	23db      	movs	r3, #219	; 0xdb
 800f910:	f88d 3005 	strb.w	r3, [sp, #5]
 800f914:	e7ed      	b.n	800f8f2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800f916:	4b11      	ldr	r3, [pc, #68]	; (800f95c <SUBGRF_CalibrateImage+0x80>)
 800f918:	4298      	cmp	r0, r3
 800f91a:	d906      	bls.n	800f92a <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800f91c:	23c1      	movs	r3, #193	; 0xc1
 800f91e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800f922:	23c5      	movs	r3, #197	; 0xc5
 800f924:	f88d 3005 	strb.w	r3, [sp, #5]
 800f928:	e7e3      	b.n	800f8f2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800f92a:	4b0d      	ldr	r3, [pc, #52]	; (800f960 <SUBGRF_CalibrateImage+0x84>)
 800f92c:	4298      	cmp	r0, r3
 800f92e:	d906      	bls.n	800f93e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800f930:	2375      	movs	r3, #117	; 0x75
 800f932:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800f936:	2381      	movs	r3, #129	; 0x81
 800f938:	f88d 3005 	strb.w	r3, [sp, #5]
 800f93c:	e7d9      	b.n	800f8f2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800f93e:	4b09      	ldr	r3, [pc, #36]	; (800f964 <SUBGRF_CalibrateImage+0x88>)
 800f940:	4298      	cmp	r0, r3
 800f942:	d9d6      	bls.n	800f8f2 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800f944:	236b      	movs	r3, #107	; 0x6b
 800f946:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800f94a:	236f      	movs	r3, #111	; 0x6f
 800f94c:	f88d 3005 	strb.w	r3, [sp, #5]
 800f950:	e7cf      	b.n	800f8f2 <SUBGRF_CalibrateImage+0x16>
 800f952:	bf00      	nop
 800f954:	35a4e900 	.word	0x35a4e900
 800f958:	32a9f880 	.word	0x32a9f880
 800f95c:	2de54480 	.word	0x2de54480
 800f960:	1b6b0b00 	.word	0x1b6b0b00
 800f964:	1954fc40 	.word	0x1954fc40

0800f968 <SUBGRF_SetPaConfig>:
{
 800f968:	b500      	push	{lr}
 800f96a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800f96c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800f970:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800f974:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800f978:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800f97c:	2204      	movs	r2, #4
 800f97e:	eb0d 0102 	add.w	r1, sp, r2
 800f982:	2095      	movs	r0, #149	; 0x95
 800f984:	f7ff feae 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f988:	b003      	add	sp, #12
 800f98a:	f85d fb04 	ldr.w	pc, [sp], #4

0800f98e <SUBGRF_SetDioIrqParams>:
{
 800f98e:	b510      	push	{r4, lr}
 800f990:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800f992:	0a04      	lsrs	r4, r0, #8
 800f994:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800f998:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800f99c:	0a08      	lsrs	r0, r1, #8
 800f99e:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800f9a2:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800f9a6:	0a11      	lsrs	r1, r2, #8
 800f9a8:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800f9ac:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800f9b0:	0a1a      	lsrs	r2, r3, #8
 800f9b2:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800f9b6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800f9ba:	2208      	movs	r2, #8
 800f9bc:	4669      	mov	r1, sp
 800f9be:	4610      	mov	r0, r2
 800f9c0:	f7ff fe90 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f9c4:	b002      	add	sp, #8
 800f9c6:	bd10      	pop	{r4, pc}

0800f9c8 <SUBGRF_SetTcxoMode>:
{
 800f9c8:	b500      	push	{lr}
 800f9ca:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800f9cc:	f000 0007 	and.w	r0, r0, #7
 800f9d0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f9d4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f9d8:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f9dc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f9e0:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800f9e4:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800f9e8:	2204      	movs	r2, #4
 800f9ea:	eb0d 0102 	add.w	r1, sp, r2
 800f9ee:	2097      	movs	r0, #151	; 0x97
 800f9f0:	f7ff fe78 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800f9f4:	b003      	add	sp, #12
 800f9f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f9fc <SUBGRF_SetRfFrequency>:
{
 800f9fc:	b510      	push	{r4, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800fa02:	4b12      	ldr	r3, [pc, #72]	; (800fa4c <SUBGRF_SetRfFrequency+0x50>)
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	b1d3      	cbz	r3, 800fa3e <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800fa08:	4a11      	ldr	r2, [pc, #68]	; (800fa50 <SUBGRF_SetRfFrequency+0x54>)
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	0660      	lsls	r0, r4, #25
 800fa0e:	09e1      	lsrs	r1, r4, #7
 800fa10:	f7f1 f8a4 	bl	8000b5c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800fa14:	0e03      	lsrs	r3, r0, #24
 800fa16:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800fa1a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fa1e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800fa22:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fa26:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800fa2a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800fa2e:	2204      	movs	r2, #4
 800fa30:	eb0d 0102 	add.w	r1, sp, r2
 800fa34:	2086      	movs	r0, #134	; 0x86
 800fa36:	f7ff fe55 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fa3a:	b002      	add	sp, #8
 800fa3c:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800fa3e:	f7ff ff4d 	bl	800f8dc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800fa42:	4b02      	ldr	r3, [pc, #8]	; (800fa4c <SUBGRF_SetRfFrequency+0x50>)
 800fa44:	2201      	movs	r2, #1
 800fa46:	701a      	strb	r2, [r3, #0]
 800fa48:	e7de      	b.n	800fa08 <SUBGRF_SetRfFrequency+0xc>
 800fa4a:	bf00      	nop
 800fa4c:	2000114c 	.word	0x2000114c
 800fa50:	01e84800 	.word	0x01e84800

0800fa54 <SUBGRF_GetPacketType>:
}
 800fa54:	4b01      	ldr	r3, [pc, #4]	; (800fa5c <SUBGRF_GetPacketType+0x8>)
 800fa56:	7818      	ldrb	r0, [r3, #0]
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	2000114f 	.word	0x2000114f

0800fa60 <SUBGRF_SetBufferBaseAddress>:
{
 800fa60:	b500      	push	{lr}
 800fa62:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800fa64:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800fa68:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800fa6c:	2202      	movs	r2, #2
 800fa6e:	a901      	add	r1, sp, #4
 800fa70:	208f      	movs	r0, #143	; 0x8f
 800fa72:	f7ff fe37 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fa76:	b003      	add	sp, #12
 800fa78:	f85d fb04 	ldr.w	pc, [sp], #4

0800fa7c <SUBGRF_GetRssiInst>:
{
 800fa7c:	b500      	push	{lr}
 800fa7e:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800fa80:	2201      	movs	r2, #1
 800fa82:	a901      	add	r1, sp, #4
 800fa84:	2015      	movs	r0, #21
 800fa86:	f7ff fe3d 	bl	800f704 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800fa8a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800fa8e:	4240      	negs	r0, r0
}
 800fa90:	1040      	asrs	r0, r0, #1
 800fa92:	b003      	add	sp, #12
 800fa94:	f85d fb04 	ldr.w	pc, [sp], #4

0800fa98 <SUBGRF_GetPacketStatus>:
{
 800fa98:	b510      	push	{r4, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800fa9e:	2203      	movs	r2, #3
 800faa0:	a901      	add	r1, sp, #4
 800faa2:	2014      	movs	r0, #20
 800faa4:	f7ff fe2e 	bl	800f704 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800faa8:	f7ff ffd4 	bl	800fa54 <SUBGRF_GetPacketType>
 800faac:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800faae:	b148      	cbz	r0, 800fac4 <SUBGRF_GetPacketStatus+0x2c>
 800fab0:	2801      	cmp	r0, #1
 800fab2:	d018      	beq.n	800fae6 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800fab4:	2214      	movs	r2, #20
 800fab6:	2100      	movs	r1, #0
 800fab8:	4620      	mov	r0, r4
 800faba:	f000 fe4b 	bl	8010754 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800fabe:	230f      	movs	r3, #15
 800fac0:	7023      	strb	r3, [r4, #0]
}
 800fac2:	e00e      	b.n	800fae2 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800fac4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fac8:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800faca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800face:	425b      	negs	r3, r3
 800fad0:	105b      	asrs	r3, r3, #1
 800fad2:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800fad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fad8:	425b      	negs	r3, r3
 800fada:	105b      	asrs	r3, r3, #1
 800fadc:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	60a3      	str	r3, [r4, #8]
}
 800fae2:	b002      	add	sp, #8
 800fae4:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800fae6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800faea:	425b      	negs	r3, r3
 800faec:	105b      	asrs	r3, r3, #1
 800faee:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800faf0:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800faf4:	3302      	adds	r3, #2
 800faf6:	109b      	asrs	r3, r3, #2
 800faf8:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800fafa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fafe:	425b      	negs	r3, r3
 800fb00:	105b      	asrs	r3, r3, #1
 800fb02:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800fb04:	4b01      	ldr	r3, [pc, #4]	; (800fb0c <SUBGRF_GetPacketStatus+0x74>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	6123      	str	r3, [r4, #16]
            break;
 800fb0a:	e7ea      	b.n	800fae2 <SUBGRF_GetPacketStatus+0x4a>
 800fb0c:	20001148 	.word	0x20001148

0800fb10 <SUBGRF_WriteRegister>:
{
 800fb10:	b500      	push	{lr}
 800fb12:	b083      	sub	sp, #12
 800fb14:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f10d 0207 	add.w	r2, sp, #7
 800fb1e:	4601      	mov	r1, r0
 800fb20:	4802      	ldr	r0, [pc, #8]	; (800fb2c <SUBGRF_WriteRegister+0x1c>)
 800fb22:	f7f4 ff69 	bl	80049f8 <HAL_SUBGHZ_WriteRegisters>
}
 800fb26:	b003      	add	sp, #12
 800fb28:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb2c:	200018b4 	.word	0x200018b4

0800fb30 <SUBGRF_SetRxBoosted>:
{
 800fb30:	b510      	push	{r4, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800fb36:	4b0c      	ldr	r3, [pc, #48]	; (800fb68 <SUBGRF_SetRxBoosted+0x38>)
 800fb38:	2205      	movs	r2, #5
 800fb3a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800fb3c:	2197      	movs	r1, #151	; 0x97
 800fb3e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800fb42:	f7ff ffe5 	bl	800fb10 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fb46:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fb4a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fb4e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800fb52:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fb56:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fb5a:	2203      	movs	r2, #3
 800fb5c:	a901      	add	r1, sp, #4
 800fb5e:	2082      	movs	r0, #130	; 0x82
 800fb60:	f7ff fdc0 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fb64:	b002      	add	sp, #8
 800fb66:	bd10      	pop	{r4, pc}
 800fb68:	2000114e 	.word	0x2000114e

0800fb6c <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800fb6c:	b500      	push	{lr}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800fb74:	2201      	movs	r2, #1
 800fb76:	f10d 0107 	add.w	r1, sp, #7
 800fb7a:	20a0      	movs	r0, #160	; 0xa0
 800fb7c:	f7ff fdb2 	bl	800f6e4 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800fb80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb84:	2b3f      	cmp	r3, #63	; 0x3f
 800fb86:	d90f      	bls.n	800fba8 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800fb88:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800fb8a:	2200      	movs	r2, #0
        while( mant > 31 )
 800fb8c:	2b1f      	cmp	r3, #31
 800fb8e:	d903      	bls.n	800fb98 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 800fb90:	089b      	lsrs	r3, r3, #2
            exp++;
 800fb92:	1c51      	adds	r1, r2, #1
 800fb94:	b2ca      	uxtb	r2, r1
 800fb96:	e7f9      	b.n	800fb8c <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 800fb98:	00d9      	lsls	r1, r3, #3
 800fb9a:	b2c9      	uxtb	r1, r1
 800fb9c:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800fb9e:	b2c9      	uxtb	r1, r1
 800fba0:	f240 7006 	movw	r0, #1798	; 0x706
 800fba4:	f7ff ffb4 	bl	800fb10 <SUBGRF_WriteRegister>
}
 800fba8:	b003      	add	sp, #12
 800fbaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fbb0 <SUBGRF_SetPacketType>:
{
 800fbb0:	b500      	push	{lr}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800fbb8:	4b08      	ldr	r3, [pc, #32]	; (800fbdc <SUBGRF_SetPacketType+0x2c>)
 800fbba:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800fbbc:	b140      	cbz	r0, 800fbd0 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f10d 0107 	add.w	r1, sp, #7
 800fbc4:	208a      	movs	r0, #138	; 0x8a
 800fbc6:	f7ff fd8d 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fbca:	b003      	add	sp, #12
 800fbcc:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800fbd6:	f7ff ff9b 	bl	800fb10 <SUBGRF_WriteRegister>
 800fbda:	e7f0      	b.n	800fbbe <SUBGRF_SetPacketType+0xe>
 800fbdc:	2000114f 	.word	0x2000114f

0800fbe0 <SUBGRF_SetModulationParams>:
{
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800fbe6:	4b3e      	ldr	r3, [pc, #248]	; (800fce0 <SUBGRF_SetModulationParams+0x100>)
 800fbe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fbec:	ab02      	add	r3, sp, #8
 800fbee:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800fbf2:	7820      	ldrb	r0, [r4, #0]
 800fbf4:	4b3b      	ldr	r3, [pc, #236]	; (800fce4 <SUBGRF_SetModulationParams+0x104>)
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	4298      	cmp	r0, r3
 800fbfa:	d106      	bne.n	800fc0a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800fbfc:	7823      	ldrb	r3, [r4, #0]
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	d82c      	bhi.n	800fc5c <SUBGRF_SetModulationParams+0x7c>
 800fc02:	e8df f003 	tbb	[pc, r3]
 800fc06:	4205      	.short	0x4205
 800fc08:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800fc0a:	f7ff ffd1 	bl	800fbb0 <SUBGRF_SetPacketType>
 800fc0e:	e7f5      	b.n	800fbfc <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800fc10:	6862      	ldr	r2, [r4, #4]
 800fc12:	4b35      	ldr	r3, [pc, #212]	; (800fce8 <SUBGRF_SetModulationParams+0x108>)
 800fc14:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fc18:	0c1a      	lsrs	r2, r3, #16
 800fc1a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fc1e:	0a1a      	lsrs	r2, r3, #8
 800fc20:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fc24:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fc28:	7b23      	ldrb	r3, [r4, #12]
 800fc2a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fc2e:	7b63      	ldrb	r3, [r4, #13]
 800fc30:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800fc34:	68a1      	ldr	r1, [r4, #8]
 800fc36:	4a2d      	ldr	r2, [pc, #180]	; (800fcec <SUBGRF_SetModulationParams+0x10c>)
 800fc38:	2300      	movs	r3, #0
 800fc3a:	0648      	lsls	r0, r1, #25
 800fc3c:	09c9      	lsrs	r1, r1, #7
 800fc3e:	f7f0 ff8d 	bl	8000b5c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800fc42:	0c03      	lsrs	r3, r0, #16
 800fc44:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800fc48:	0a03      	lsrs	r3, r0, #8
 800fc4a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800fc4e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fc52:	2208      	movs	r2, #8
 800fc54:	4669      	mov	r1, sp
 800fc56:	208b      	movs	r0, #139	; 0x8b
 800fc58:	f7ff fd44 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fc5c:	b002      	add	sp, #8
 800fc5e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800fc60:	6922      	ldr	r2, [r4, #16]
 800fc62:	4b21      	ldr	r3, [pc, #132]	; (800fce8 <SUBGRF_SetModulationParams+0x108>)
 800fc64:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fc68:	0c1a      	lsrs	r2, r3, #16
 800fc6a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fc6e:	0a1a      	lsrs	r2, r3, #8
 800fc70:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fc74:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800fc78:	7d23      	ldrb	r3, [r4, #20]
 800fc7a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fc7e:	2204      	movs	r2, #4
 800fc80:	4669      	mov	r1, sp
 800fc82:	208b      	movs	r0, #139	; 0x8b
 800fc84:	f7ff fd2e 	bl	800f6e4 <SUBGRF_WriteCommand>
        break;
 800fc88:	e7e8      	b.n	800fc5c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800fc8a:	7e23      	ldrb	r3, [r4, #24]
 800fc8c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800fc90:	7e63      	ldrb	r3, [r4, #25]
 800fc92:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800fc96:	7ea3      	ldrb	r3, [r4, #26]
 800fc98:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800fc9c:	7ee3      	ldrb	r3, [r4, #27]
 800fc9e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fca2:	2204      	movs	r2, #4
 800fca4:	4669      	mov	r1, sp
 800fca6:	208b      	movs	r0, #139	; 0x8b
 800fca8:	f7ff fd1c 	bl	800f6e4 <SUBGRF_WriteCommand>
        break;
 800fcac:	e7d6      	b.n	800fc5c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800fcae:	6862      	ldr	r2, [r4, #4]
 800fcb0:	4b0d      	ldr	r3, [pc, #52]	; (800fce8 <SUBGRF_SetModulationParams+0x108>)
 800fcb2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fcb6:	0c1a      	lsrs	r2, r3, #16
 800fcb8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fcbc:	0a1a      	lsrs	r2, r3, #8
 800fcbe:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fcc2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fcc6:	7b23      	ldrb	r3, [r4, #12]
 800fcc8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fccc:	7b63      	ldrb	r3, [r4, #13]
 800fcce:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fcd2:	2205      	movs	r2, #5
 800fcd4:	4669      	mov	r1, sp
 800fcd6:	208b      	movs	r0, #139	; 0x8b
 800fcd8:	f7ff fd04 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fcdc:	e7be      	b.n	800fc5c <SUBGRF_SetModulationParams+0x7c>
 800fcde:	bf00      	nop
 800fce0:	08011230 	.word	0x08011230
 800fce4:	2000114f 	.word	0x2000114f
 800fce8:	3d090000 	.word	0x3d090000
 800fcec:	01e84800 	.word	0x01e84800

0800fcf0 <SUBGRF_ReadRegister>:
{
 800fcf0:	b500      	push	{lr}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	f10d 0207 	add.w	r2, sp, #7
 800fcfc:	4803      	ldr	r0, [pc, #12]	; (800fd0c <SUBGRF_ReadRegister+0x1c>)
 800fcfe:	f7f4 fecb 	bl	8004a98 <HAL_SUBGHZ_ReadRegisters>
}
 800fd02:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fd06:	b003      	add	sp, #12
 800fd08:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd0c:	200018b4 	.word	0x200018b4

0800fd10 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800fd10:	b510      	push	{r4, lr}
 800fd12:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800fd14:	f7f2 f902 	bl	8001f1c <RBI_IsDCDC>
 800fd18:	2801      	cmp	r0, #1
 800fd1a:	d000      	beq.n	800fd1e <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800fd1c:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800fd1e:	f640 1023 	movw	r0, #2339	; 0x923
 800fd22:	f7ff ffe5 	bl	800fcf0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800fd26:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800fd2a:	4321      	orrs	r1, r4
 800fd2c:	f640 1023 	movw	r0, #2339	; 0x923
 800fd30:	f7ff feee 	bl	800fb10 <SUBGRF_WriteRegister>
}
 800fd34:	e7f2      	b.n	800fd1c <Radio_SMPS_Set+0xc>
	...

0800fd38 <SUBGRF_Init>:
{
 800fd38:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800fd3a:	b108      	cbz	r0, 800fd40 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800fd3c:	4a16      	ldr	r2, [pc, #88]	; (800fd98 <SUBGRF_Init+0x60>)
 800fd3e:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800fd40:	f7f1 fad8 	bl	80012f4 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fd44:	2002      	movs	r0, #2
 800fd46:	f7ff ffe3 	bl	800fd10 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	4b13      	ldr	r3, [pc, #76]	; (800fd9c <SUBGRF_Init+0x64>)
 800fd4e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800fd50:	f7ff fcee 	bl	800f730 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800fd54:	f7f2 f8de 	bl	8001f14 <RBI_IsTCXO>
 800fd58:	2801      	cmp	r0, #1
 800fd5a:	d00f      	beq.n	800fd7c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fd5c:	2120      	movs	r1, #32
 800fd5e:	f640 1011 	movw	r0, #2321	; 0x911
 800fd62:	f7ff fed5 	bl	800fb10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fd66:	2120      	movs	r1, #32
 800fd68:	f640 1012 	movw	r0, #2322	; 0x912
 800fd6c:	f7ff fed0 	bl	800fb10 <SUBGRF_WriteRegister>
    RBI_Init();
 800fd70:	f7f2 f8c4 	bl	8001efc <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800fd74:	4b0a      	ldr	r3, [pc, #40]	; (800fda0 <SUBGRF_Init+0x68>)
 800fd76:	2201      	movs	r2, #1
 800fd78:	701a      	strb	r2, [r3, #0]
}
 800fd7a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800fd7c:	2140      	movs	r1, #64	; 0x40
 800fd7e:	f7ff fe23 	bl	800f9c8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800fd82:	2100      	movs	r1, #0
 800fd84:	f640 1011 	movw	r0, #2321	; 0x911
 800fd88:	f7ff fec2 	bl	800fb10 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800fd8c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800fd90:	f7ff fd7d 	bl	800f88e <SUBGRF_Calibrate>
 800fd94:	e7ec      	b.n	800fd70 <SUBGRF_Init+0x38>
 800fd96:	bf00      	nop
 800fd98:	20001150 	.word	0x20001150
 800fd9c:	2000114c 	.word	0x2000114c
 800fda0:	2000114e 	.word	0x2000114e

0800fda4 <SUBGRF_SetSleep>:
{
 800fda4:	b510      	push	{r4, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800fdaa:	2000      	movs	r0, #0
 800fdac:	f7f2 f8aa 	bl	8001f04 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fdb0:	2002      	movs	r0, #2
 800fdb2:	f7ff ffad 	bl	800fd10 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fdb6:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fdba:	f3c4 0340 	ubfx	r3, r4, #1, #1
 800fdbe:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fdc0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800fdc4:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fdc8:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fdca:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800fdce:	2201      	movs	r2, #1
 800fdd0:	f10d 0107 	add.w	r1, sp, #7
 800fdd4:	2084      	movs	r0, #132	; 0x84
 800fdd6:	f7ff fc85 	bl	800f6e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800fdda:	4b02      	ldr	r3, [pc, #8]	; (800fde4 <SUBGRF_SetSleep+0x40>)
 800fddc:	2200      	movs	r2, #0
 800fdde:	701a      	strb	r2, [r3, #0]
}
 800fde0:	b002      	add	sp, #8
 800fde2:	bd10      	pop	{r4, pc}
 800fde4:	2000114e 	.word	0x2000114e

0800fde8 <SUBGRF_SetWhiteningSeed>:
{
 800fde8:	b510      	push	{r4, lr}
 800fdea:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800fdec:	f7ff fe32 	bl	800fa54 <SUBGRF_GetPacketType>
 800fdf0:	b100      	cbz	r0, 800fdf4 <SUBGRF_SetWhiteningSeed+0xc>
}
 800fdf2:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800fdf4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fdf8:	f7ff ff7a 	bl	800fcf0 <SUBGRF_ReadRegister>
 800fdfc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800fe00:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800fe04:	4301      	orrs	r1, r0
 800fe06:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fe0a:	f7ff fe81 	bl	800fb10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800fe0e:	b2e1      	uxtb	r1, r4
 800fe10:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800fe14:	f7ff fe7c 	bl	800fb10 <SUBGRF_WriteRegister>
}
 800fe18:	e7eb      	b.n	800fdf2 <SUBGRF_SetWhiteningSeed+0xa>

0800fe1a <SUBGRF_SetTxParams>:
{
 800fe1a:	b530      	push	{r4, r5, lr}
 800fe1c:	b083      	sub	sp, #12
 800fe1e:	460c      	mov	r4, r1
 800fe20:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 800fe22:	2801      	cmp	r0, #1
 800fe24:	d127      	bne.n	800fe76 <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 800fe26:	290f      	cmp	r1, #15
 800fe28:	d00d      	beq.n	800fe46 <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	2100      	movs	r1, #0
 800fe30:	2004      	movs	r0, #4
 800fe32:	f7ff fd99 	bl	800f968 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 800fe36:	2c0d      	cmp	r4, #13
 800fe38:	dc0c      	bgt.n	800fe54 <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 800fe3a:	f114 0f11 	cmn.w	r4, #17
 800fe3e:	da0a      	bge.n	800fe56 <SUBGRF_SetTxParams+0x3c>
            power = -17;
 800fe40:	f06f 0410 	mvn.w	r4, #16
 800fe44:	e007      	b.n	800fe56 <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800fe46:	2301      	movs	r3, #1
 800fe48:	461a      	mov	r2, r3
 800fe4a:	2100      	movs	r1, #0
 800fe4c:	2006      	movs	r0, #6
 800fe4e:	f7ff fd8b 	bl	800f968 <SUBGRF_SetPaConfig>
 800fe52:	e7f0      	b.n	800fe36 <SUBGRF_SetTxParams+0x1c>
            power = 14;
 800fe54:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800fe56:	2118      	movs	r1, #24
 800fe58:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fe5c:	f7ff fe58 	bl	800fb10 <SUBGRF_WriteRegister>
    buf[0] = power;
 800fe60:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 800fe64:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800fe68:	2202      	movs	r2, #2
 800fe6a:	a901      	add	r1, sp, #4
 800fe6c:	208e      	movs	r0, #142	; 0x8e
 800fe6e:	f7ff fc39 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fe72:	b003      	add	sp, #12
 800fe74:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800fe76:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800fe7a:	f7ff ff39 	bl	800fcf0 <SUBGRF_ReadRegister>
 800fe7e:	f040 011e 	orr.w	r1, r0, #30
 800fe82:	b2c9      	uxtb	r1, r1
 800fe84:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800fe88:	f7ff fe42 	bl	800fb10 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	2200      	movs	r2, #0
 800fe90:	2107      	movs	r1, #7
 800fe92:	2004      	movs	r0, #4
 800fe94:	f7ff fd68 	bl	800f968 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800fe98:	2c16      	cmp	r4, #22
 800fe9a:	dc05      	bgt.n	800fea8 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 800fe9c:	f114 0f09 	cmn.w	r4, #9
 800fea0:	da03      	bge.n	800feaa <SUBGRF_SetTxParams+0x90>
            power = -9;
 800fea2:	f06f 0408 	mvn.w	r4, #8
 800fea6:	e000      	b.n	800feaa <SUBGRF_SetTxParams+0x90>
            power = 22;
 800fea8:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800feaa:	2138      	movs	r1, #56	; 0x38
 800feac:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800feb0:	f7ff fe2e 	bl	800fb10 <SUBGRF_WriteRegister>
 800feb4:	e7d4      	b.n	800fe60 <SUBGRF_SetTxParams+0x46>
	...

0800feb8 <SUBGRF_GetRxBufferStatus>:
{
 800feb8:	b530      	push	{r4, r5, lr}
 800feba:	b083      	sub	sp, #12
 800febc:	4605      	mov	r5, r0
 800febe:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800fec0:	2202      	movs	r2, #2
 800fec2:	a901      	add	r1, sp, #4
 800fec4:	2013      	movs	r0, #19
 800fec6:	f7ff fc1d 	bl	800f704 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800feca:	f7ff fdc3 	bl	800fa54 <SUBGRF_GetPacketType>
 800fece:	2801      	cmp	r0, #1
 800fed0:	d007      	beq.n	800fee2 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800fed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fed6:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800fed8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fedc:	7023      	strb	r3, [r4, #0]
}
 800fede:	b003      	add	sp, #12
 800fee0:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800fee2:	4b05      	ldr	r3, [pc, #20]	; (800fef8 <SUBGRF_GetRxBufferStatus+0x40>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d1f2      	bne.n	800fed2 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800feec:	f240 7002 	movw	r0, #1794	; 0x702
 800fef0:	f7ff fefe 	bl	800fcf0 <SUBGRF_ReadRegister>
 800fef4:	7028      	strb	r0, [r5, #0]
 800fef6:	e7ef      	b.n	800fed8 <SUBGRF_GetRxBufferStatus+0x20>
 800fef8:	2000114d 	.word	0x2000114d

0800fefc <SUBGRF_WriteRegisters>:
{
 800fefc:	b510      	push	{r4, lr}
 800fefe:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff00:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ff04:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ff06:	460a      	mov	r2, r1
 800ff08:	4601      	mov	r1, r0
 800ff0a:	4803      	ldr	r0, [pc, #12]	; (800ff18 <SUBGRF_WriteRegisters+0x1c>)
 800ff0c:	f7f4 fd74 	bl	80049f8 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff10:	f384 8810 	msr	PRIMASK, r4
}
 800ff14:	bd10      	pop	{r4, pc}
 800ff16:	bf00      	nop
 800ff18:	200018b4 	.word	0x200018b4

0800ff1c <SUBGRF_SetSyncWord>:
{
 800ff1c:	b508      	push	{r3, lr}
 800ff1e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800ff20:	2208      	movs	r2, #8
 800ff22:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800ff26:	f7ff ffe9 	bl	800fefc <SUBGRF_WriteRegisters>
}
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	bd08      	pop	{r3, pc}

0800ff2e <SUBGRF_SetCrcSeed>:
{
 800ff2e:	b500      	push	{lr}
 800ff30:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800ff32:	0a03      	lsrs	r3, r0, #8
 800ff34:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800ff38:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800ff3c:	f7ff fd8a 	bl	800fa54 <SUBGRF_GetPacketType>
 800ff40:	b110      	cbz	r0, 800ff48 <SUBGRF_SetCrcSeed+0x1a>
}
 800ff42:	b003      	add	sp, #12
 800ff44:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800ff48:	2202      	movs	r2, #2
 800ff4a:	a901      	add	r1, sp, #4
 800ff4c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800ff50:	f7ff ffd4 	bl	800fefc <SUBGRF_WriteRegisters>
}
 800ff54:	e7f5      	b.n	800ff42 <SUBGRF_SetCrcSeed+0x14>

0800ff56 <SUBGRF_SetCrcPolynomial>:
{
 800ff56:	b500      	push	{lr}
 800ff58:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800ff5a:	0a03      	lsrs	r3, r0, #8
 800ff5c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800ff60:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800ff64:	f7ff fd76 	bl	800fa54 <SUBGRF_GetPacketType>
 800ff68:	b110      	cbz	r0, 800ff70 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800ff6a:	b003      	add	sp, #12
 800ff6c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800ff70:	2202      	movs	r2, #2
 800ff72:	a901      	add	r1, sp, #4
 800ff74:	f240 60be 	movw	r0, #1726	; 0x6be
 800ff78:	f7ff ffc0 	bl	800fefc <SUBGRF_WriteRegisters>
}
 800ff7c:	e7f5      	b.n	800ff6a <SUBGRF_SetCrcPolynomial+0x14>
	...

0800ff80 <SUBGRF_SetPacketParams>:
{
 800ff80:	b510      	push	{r4, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ff86:	ab01      	add	r3, sp, #4
 800ff88:	4a33      	ldr	r2, [pc, #204]	; (8010058 <SUBGRF_SetPacketParams+0xd8>)
 800ff8a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff8c:	c303      	stmia	r3!, {r0, r1}
 800ff8e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800ff90:	7820      	ldrb	r0, [r4, #0]
 800ff92:	4b32      	ldr	r3, [pc, #200]	; (801005c <SUBGRF_SetPacketParams+0xdc>)
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	4298      	cmp	r0, r3
 800ff98:	d106      	bne.n	800ffa8 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800ff9a:	7823      	ldrb	r3, [r4, #0]
 800ff9c:	2b03      	cmp	r3, #3
 800ff9e:	d82a      	bhi.n	800fff6 <SUBGRF_SetPacketParams+0x76>
 800ffa0:	e8df f003 	tbb	[pc, r3]
 800ffa4:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800ffa8:	f7ff fe02 	bl	800fbb0 <SUBGRF_SetPacketType>
 800ffac:	e7f5      	b.n	800ff9a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800ffae:	7a63      	ldrb	r3, [r4, #9]
 800ffb0:	2bf1      	cmp	r3, #241	; 0xf1
 800ffb2:	d022      	beq.n	800fffa <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800ffb4:	2bf2      	cmp	r3, #242	; 0xf2
 800ffb6:	d02a      	beq.n	801000e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800ffb8:	8862      	ldrh	r2, [r4, #2]
 800ffba:	0a11      	lsrs	r1, r2, #8
 800ffbc:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ffc0:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ffc4:	7922      	ldrb	r2, [r4, #4]
 800ffc6:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ffca:	7962      	ldrb	r2, [r4, #5]
 800ffcc:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ffd0:	79a2      	ldrb	r2, [r4, #6]
 800ffd2:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ffd6:	79e2      	ldrb	r2, [r4, #7]
 800ffd8:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ffdc:	7a22      	ldrb	r2, [r4, #8]
 800ffde:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800ffe2:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ffe6:	7aa3      	ldrb	r3, [r4, #10]
 800ffe8:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800ffec:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800ffee:	a901      	add	r1, sp, #4
 800fff0:	208c      	movs	r0, #140	; 0x8c
 800fff2:	f7ff fb77 	bl	800f6e4 <SUBGRF_WriteCommand>
}
 800fff6:	b004      	add	sp, #16
 800fff8:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800fffa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800fffe:	f7ff ff96 	bl	800ff2e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8010002:	f248 0005 	movw	r0, #32773	; 0x8005
 8010006:	f7ff ffa6 	bl	800ff56 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801000a:	2302      	movs	r3, #2
 801000c:	e7d4      	b.n	800ffb8 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801000e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8010012:	f7ff ff8c 	bl	800ff2e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8010016:	f241 0021 	movw	r0, #4129	; 0x1021
 801001a:	f7ff ff9c 	bl	800ff56 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801001e:	2306      	movs	r3, #6
 8010020:	e7ca      	b.n	800ffb8 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8010022:	7b23      	ldrb	r3, [r4, #12]
 8010024:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8010028:	2201      	movs	r2, #1
        break;
 801002a:	e7e0      	b.n	800ffee <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801002c:	89e3      	ldrh	r3, [r4, #14]
 801002e:	0a1a      	lsrs	r2, r3, #8
 8010030:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8010034:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8010038:	7c23      	ldrb	r3, [r4, #16]
 801003a:	4a09      	ldr	r2, [pc, #36]	; (8010060 <SUBGRF_SetPacketParams+0xe0>)
 801003c:	7013      	strb	r3, [r2, #0]
 801003e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8010042:	7c63      	ldrb	r3, [r4, #17]
 8010044:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010048:	7ca3      	ldrb	r3, [r4, #18]
 801004a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801004e:	7ce3      	ldrb	r3, [r4, #19]
 8010050:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8010054:	2206      	movs	r2, #6
        break;
 8010056:	e7ca      	b.n	800ffee <SUBGRF_SetPacketParams+0x6e>
 8010058:	08011238 	.word	0x08011238
 801005c:	2000114f 	.word	0x2000114f
 8010060:	2000114d 	.word	0x2000114d

08010064 <SUBGRF_ReadRegisters>:
{
 8010064:	b510      	push	{r4, lr}
 8010066:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010068:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801006c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801006e:	460a      	mov	r2, r1
 8010070:	4601      	mov	r1, r0
 8010072:	4803      	ldr	r0, [pc, #12]	; (8010080 <SUBGRF_ReadRegisters+0x1c>)
 8010074:	f7f4 fd10 	bl	8004a98 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010078:	f384 8810 	msr	PRIMASK, r4
}
 801007c:	bd10      	pop	{r4, pc}
 801007e:	bf00      	nop
 8010080:	200018b4 	.word	0x200018b4

08010084 <SUBGRF_GetRandom>:
{
 8010084:	b570      	push	{r4, r5, r6, lr}
 8010086:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010088:	2600      	movs	r6, #0
 801008a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801008c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010090:	f7ff fe2e 	bl	800fcf0 <SUBGRF_ReadRegister>
 8010094:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010096:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801009a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801009e:	f7ff fd37 	bl	800fb10 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80100a2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80100a6:	f7ff fe23 	bl	800fcf0 <SUBGRF_ReadRegister>
 80100aa:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80100ac:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80100b0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80100b4:	f7ff fd2c 	bl	800fb10 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80100b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80100bc:	f7ff fb6c 	bl	800f798 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80100c0:	2204      	movs	r2, #4
 80100c2:	eb0d 0102 	add.w	r1, sp, r2
 80100c6:	f640 0019 	movw	r0, #2073	; 0x819
 80100ca:	f7ff ffcb 	bl	8010064 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80100ce:	4630      	mov	r0, r6
 80100d0:	f7ff fb2e 	bl	800f730 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80100d4:	4629      	mov	r1, r5
 80100d6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80100da:	f7ff fd19 	bl	800fb10 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80100de:	4621      	mov	r1, r4
 80100e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80100e4:	f7ff fd14 	bl	800fb10 <SUBGRF_WriteRegister>
}
 80100e8:	9801      	ldr	r0, [sp, #4]
 80100ea:	b002      	add	sp, #8
 80100ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080100f0 <SUBGRF_WriteBuffer>:
{
 80100f0:	b510      	push	{r4, lr}
 80100f2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100f4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80100f8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80100fa:	460a      	mov	r2, r1
 80100fc:	4601      	mov	r1, r0
 80100fe:	4803      	ldr	r0, [pc, #12]	; (801010c <SUBGRF_WriteBuffer+0x1c>)
 8010100:	f7f4 fe20 	bl	8004d44 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010104:	f384 8810 	msr	PRIMASK, r4
}
 8010108:	bd10      	pop	{r4, pc}
 801010a:	bf00      	nop
 801010c:	200018b4 	.word	0x200018b4

08010110 <SUBGRF_SetPayload>:
{
 8010110:	b508      	push	{r3, lr}
 8010112:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8010114:	4601      	mov	r1, r0
 8010116:	2000      	movs	r0, #0
 8010118:	f7ff ffea 	bl	80100f0 <SUBGRF_WriteBuffer>
}
 801011c:	bd08      	pop	{r3, pc}

0801011e <SUBGRF_SendPayload>:
{
 801011e:	b510      	push	{r4, lr}
 8010120:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010122:	f7ff fff5 	bl	8010110 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010126:	4620      	mov	r0, r4
 8010128:	f7ff fb1c 	bl	800f764 <SUBGRF_SetTx>
}
 801012c:	bd10      	pop	{r4, pc}
	...

08010130 <SUBGRF_ReadBuffer>:
{
 8010130:	b510      	push	{r4, lr}
 8010132:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010134:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010138:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801013a:	460a      	mov	r2, r1
 801013c:	4601      	mov	r1, r0
 801013e:	4803      	ldr	r0, [pc, #12]	; (801014c <SUBGRF_ReadBuffer+0x1c>)
 8010140:	f7f4 fe4a 	bl	8004dd8 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010144:	f384 8810 	msr	PRIMASK, r4
}
 8010148:	bd10      	pop	{r4, pc}
 801014a:	bf00      	nop
 801014c:	200018b4 	.word	0x200018b4

08010150 <SUBGRF_GetPayload>:
{
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	4606      	mov	r6, r0
 8010156:	460c      	mov	r4, r1
 8010158:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8010160:	f10d 0107 	add.w	r1, sp, #7
 8010164:	4620      	mov	r0, r4
 8010166:	f7ff fea7 	bl	800feb8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801016a:	7822      	ldrb	r2, [r4, #0]
 801016c:	42aa      	cmp	r2, r5
 801016e:	d902      	bls.n	8010176 <SUBGRF_GetPayload+0x26>
        return 1;
 8010170:	2001      	movs	r0, #1
}
 8010172:	b002      	add	sp, #8
 8010174:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8010176:	4631      	mov	r1, r6
 8010178:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801017c:	f7ff ffd8 	bl	8010130 <SUBGRF_ReadBuffer>
    return 0;
 8010180:	2000      	movs	r0, #0
 8010182:	e7f6      	b.n	8010172 <SUBGRF_GetPayload+0x22>

08010184 <SUBGRF_SetSwitch>:
{
 8010184:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8010186:	2901      	cmp	r1, #1
 8010188:	d003      	beq.n	8010192 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801018a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 801018c:	f7f1 feba 	bl	8001f04 <RBI_ConfigRFSwitch>
}
 8010190:	bd10      	pop	{r4, pc}
 8010192:	4604      	mov	r4, r0
 8010194:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8010196:	2c01      	cmp	r4, #1
 8010198:	d003      	beq.n	80101a2 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801019a:	2c02      	cmp	r4, #2
 801019c:	d1f6      	bne.n	801018c <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801019e:	2003      	movs	r0, #3
 80101a0:	e7f4      	b.n	801018c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80101a2:	2004      	movs	r0, #4
 80101a4:	f7ff fdb4 	bl	800fd10 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80101a8:	2002      	movs	r0, #2
 80101aa:	e7f6      	b.n	801019a <SUBGRF_SetSwitch+0x16>

080101ac <SUBGRF_SetRfTxPower>:
{
 80101ac:	b538      	push	{r3, r4, r5, lr}
 80101ae:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80101b0:	f7f1 feac 	bl	8001f0c <RBI_GetTxConfig>
    switch (TxConfig)
 80101b4:	b148      	cbz	r0, 80101ca <SUBGRF_SetRfTxPower+0x1e>
 80101b6:	2802      	cmp	r0, #2
 80101b8:	d10d      	bne.n	80101d6 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80101ba:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80101bc:	2202      	movs	r2, #2
 80101be:	4621      	mov	r1, r4
 80101c0:	4628      	mov	r0, r5
 80101c2:	f7ff fe2a 	bl	800fe1a <SUBGRF_SetTxParams>
}
 80101c6:	4628      	mov	r0, r5
 80101c8:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80101ca:	2c0f      	cmp	r4, #15
 80101cc:	dc01      	bgt.n	80101d2 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80101ce:	2501      	movs	r5, #1
 80101d0:	e7f4      	b.n	80101bc <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80101d2:	2502      	movs	r5, #2
 80101d4:	e7f2      	b.n	80101bc <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80101d6:	2501      	movs	r5, #1
 80101d8:	e7f0      	b.n	80101bc <SUBGRF_SetRfTxPower+0x10>

080101da <SUBGRF_GetRadioWakeUpTime>:
}
 80101da:	2001      	movs	r0, #1
 80101dc:	4770      	bx	lr
	...

080101e0 <HAL_SUBGHZ_TxCpltCallback>:
{
 80101e0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80101e2:	4b02      	ldr	r3, [pc, #8]	; (80101ec <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2001      	movs	r0, #1
 80101e8:	4798      	blx	r3
}
 80101ea:	bd08      	pop	{r3, pc}
 80101ec:	20001150 	.word	0x20001150

080101f0 <HAL_SUBGHZ_RxCpltCallback>:
{
 80101f0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80101f2:	4b02      	ldr	r3, [pc, #8]	; (80101fc <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2002      	movs	r0, #2
 80101f8:	4798      	blx	r3
}
 80101fa:	bd08      	pop	{r3, pc}
 80101fc:	20001150 	.word	0x20001150

08010200 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8010200:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8010202:	4b02      	ldr	r3, [pc, #8]	; (801020c <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2040      	movs	r0, #64	; 0x40
 8010208:	4798      	blx	r3
}
 801020a:	bd08      	pop	{r3, pc}
 801020c:	20001150 	.word	0x20001150

08010210 <HAL_SUBGHZ_CADStatusCallback>:
{
 8010210:	b508      	push	{r3, lr}
    switch (cadstatus)
 8010212:	b111      	cbz	r1, 801021a <HAL_SUBGHZ_CADStatusCallback+0xa>
 8010214:	2901      	cmp	r1, #1
 8010216:	d005      	beq.n	8010224 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8010218:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801021a:	4b05      	ldr	r3, [pc, #20]	; (8010230 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2080      	movs	r0, #128	; 0x80
 8010220:	4798      	blx	r3
            break;
 8010222:	e7f9      	b.n	8010218 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8010224:	4b02      	ldr	r3, [pc, #8]	; (8010230 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f44f 7080 	mov.w	r0, #256	; 0x100
 801022c:	4798      	blx	r3
}
 801022e:	e7f3      	b.n	8010218 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8010230:	20001150 	.word	0x20001150

08010234 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8010234:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8010236:	4b03      	ldr	r3, [pc, #12]	; (8010244 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801023e:	4798      	blx	r3
}
 8010240:	bd08      	pop	{r3, pc}
 8010242:	bf00      	nop
 8010244:	20001150 	.word	0x20001150

08010248 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8010248:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801024a:	4b02      	ldr	r3, [pc, #8]	; (8010254 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2020      	movs	r0, #32
 8010250:	4798      	blx	r3
}
 8010252:	bd08      	pop	{r3, pc}
 8010254:	20001150 	.word	0x20001150

08010258 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8010258:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801025a:	4b02      	ldr	r3, [pc, #8]	; (8010264 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2004      	movs	r0, #4
 8010260:	4798      	blx	r3
}
 8010262:	bd08      	pop	{r3, pc}
 8010264:	20001150 	.word	0x20001150

08010268 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8010268:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801026a:	4b02      	ldr	r3, [pc, #8]	; (8010274 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2008      	movs	r0, #8
 8010270:	4798      	blx	r3
}
 8010272:	bd08      	pop	{r3, pc}
 8010274:	20001150 	.word	0x20001150

08010278 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8010278:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801027a:	4b02      	ldr	r3, [pc, #8]	; (8010284 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2010      	movs	r0, #16
 8010280:	4798      	blx	r3
}
 8010282:	bd08      	pop	{r3, pc}
 8010284:	20001150 	.word	0x20001150

08010288 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8010288:	b1a0      	cbz	r0, 80102b4 <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 801028a:	b410      	push	{r4}
 801028c:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801028e:	2300      	movs	r3, #0
 8010290:	2b15      	cmp	r3, #21
 8010292:	d80e      	bhi.n	80102b2 <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8010294:	4619      	mov	r1, r3
 8010296:	4a08      	ldr	r2, [pc, #32]	; (80102b8 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8010298:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801029c:	42a2      	cmp	r2, r4
 801029e:	d802      	bhi.n	80102a6 <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80102a0:	3301      	adds	r3, #1
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	e7f4      	b.n	8010290 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 80102a6:	4b04      	ldr	r3, [pc, #16]	; (80102b8 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 80102a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80102ac:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 80102ae:	bc10      	pop	{r4}
 80102b0:	4770      	bx	lr
    while( 1 );
 80102b2:	e7fe      	b.n	80102b2 <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 80102b4:	201f      	movs	r0, #31
}
 80102b6:	4770      	bx	lr
 80102b8:	08011e7c 	.word	0x08011e7c

080102bc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80102bc:	b570      	push	{r4, r5, r6, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	4604      	mov	r4, r0
 80102c2:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80102c4:	4b1d      	ldr	r3, [pc, #116]	; (801033c <SUBGRF_GetCFO+0x80>)
 80102c6:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80102c8:	f640 0007 	movw	r0, #2055	; 0x807
 80102cc:	f7ff fd10 	bl	800fcf0 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80102d0:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80102d4:	aa02      	add	r2, sp, #8
 80102d6:	4413      	add	r3, r2
 80102d8:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80102dc:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80102e0:	3b01      	subs	r3, #1
 80102e2:	fa02 f003 	lsl.w	r0, r2, r3
 80102e6:	4b16      	ldr	r3, [pc, #88]	; (8010340 <SUBGRF_GetCFO+0x84>)
 80102e8:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 80102ec:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80102f0:	2807      	cmp	r0, #7
 80102f2:	d921      	bls.n	8010338 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80102f4:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80102f6:	fb00 f004 	mul.w	r0, r0, r4
 80102fa:	2803      	cmp	r0, #3
 80102fc:	d800      	bhi.n	8010300 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80102fe:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010300:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8010304:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8010308:	f7ff fcf2 	bl	800fcf0 <SUBGRF_ReadRegister>
 801030c:	0200      	lsls	r0, r0, #8
 801030e:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8010312:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8010316:	f7ff fceb 	bl	800fcf0 <SUBGRF_ReadRegister>
 801031a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801031c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010320:	d003      	beq.n	801032a <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8010322:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010326:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801032a:	0963      	lsrs	r3, r4, #5
 801032c:	fb03 f300 	mul.w	r3, r3, r0
 8010330:	11db      	asrs	r3, r3, #7
 8010332:	602b      	str	r3, [r5, #0]
}
 8010334:	b002      	add	sp, #8
 8010336:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8010338:	2402      	movs	r4, #2
 801033a:	e7dc      	b.n	80102f6 <SUBGRF_GetCFO+0x3a>
 801033c:	0c0a0804 	.word	0x0c0a0804
 8010340:	01e84800 	.word	0x01e84800

08010344 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8010344:	f04f 30ff 	mov.w	r0, #4294967295
 8010348:	4770      	bx	lr

0801034a <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801034a:	f04f 30ff 	mov.w	r0, #4294967295
 801034e:	4770      	bx	lr

08010350 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8010350:	f04f 30ff 	mov.w	r0, #4294967295
 8010354:	4770      	bx	lr

08010356 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8010356:	4770      	bx	lr

08010358 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8010358:	2000      	movs	r0, #0
 801035a:	4770      	bx	lr

0801035c <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 801035c:	2000      	movs	r0, #0
 801035e:	4770      	bx	lr

08010360 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8010360:	4770      	bx	lr

08010362 <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 8010362:	f04f 30ff 	mov.w	r0, #4294967295
 8010366:	4770      	bx	lr

08010368 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8010368:	f04f 30ff 	mov.w	r0, #4294967295
 801036c:	4770      	bx	lr

0801036e <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801036e:	4770      	bx	lr

08010370 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8010370:	4770      	bx	lr

08010372 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8010372:	4770      	bx	lr

08010374 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8010374:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010376:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801037a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801037c:	4b1b      	ldr	r3, [pc, #108]	; (80103ec <TRACE_AllocateBufer+0x78>)
 801037e:	8a5c      	ldrh	r4, [r3, #18]
 8010380:	8a1a      	ldrh	r2, [r3, #16]
 8010382:	4294      	cmp	r4, r2
 8010384:	d010      	beq.n	80103a8 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010386:	4294      	cmp	r4, r2
 8010388:	d91d      	bls.n	80103c6 <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801038a:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 801038e:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8010390:	4283      	cmp	r3, r0
 8010392:	d81a      	bhi.n	80103ca <TRACE_AllocateBufer+0x56>
 8010394:	4282      	cmp	r2, r0
 8010396:	d918      	bls.n	80103ca <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010398:	4b14      	ldr	r3, [pc, #80]	; (80103ec <TRACE_AllocateBufer+0x78>)
 801039a:	2601      	movs	r6, #1
 801039c:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801039e:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80103a0:	2400      	movs	r4, #0
 80103a2:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80103a4:	4613      	mov	r3, r2
 80103a6:	e010      	b.n	80103ca <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80103a8:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 80103ac:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80103ae:	4298      	cmp	r0, r3
 80103b0:	d30b      	bcc.n	80103ca <TRACE_AllocateBufer+0x56>
 80103b2:	4282      	cmp	r2, r0
 80103b4:	d909      	bls.n	80103ca <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80103b6:	4b0d      	ldr	r3, [pc, #52]	; (80103ec <TRACE_AllocateBufer+0x78>)
 80103b8:	2601      	movs	r6, #1
 80103ba:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80103bc:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80103be:	2400      	movs	r4, #0
 80103c0:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80103c2:	4613      	mov	r3, r2
 80103c4:	e001      	b.n	80103ca <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80103c6:	1b13      	subs	r3, r2, r4
 80103c8:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80103ca:	4283      	cmp	r3, r0
 80103cc:	d90b      	bls.n	80103e6 <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80103ce:	4a07      	ldr	r2, [pc, #28]	; (80103ec <TRACE_AllocateBufer+0x78>)
 80103d0:	8a53      	ldrh	r3, [r2, #18]
 80103d2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80103d4:	4403      	add	r3, r0
 80103d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103da:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80103dc:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103de:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80103e2:	bc70      	pop	{r4, r5, r6}
 80103e4:	4770      	bx	lr
  int16_t ret = -1;
 80103e6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ea:	e7f8      	b.n	80103de <TRACE_AllocateBufer+0x6a>
 80103ec:	20001554 	.word	0x20001554

080103f0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80103f4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80103f6:	4a03      	ldr	r2, [pc, #12]	; (8010404 <TRACE_Lock+0x14>)
 80103f8:	8ad3      	ldrh	r3, [r2, #22]
 80103fa:	3301      	adds	r3, #1
 80103fc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103fe:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010402:	4770      	bx	lr
 8010404:	20001554 	.word	0x20001554

08010408 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010408:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801040c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801040e:	4a03      	ldr	r2, [pc, #12]	; (801041c <TRACE_UnLock+0x14>)
 8010410:	8ad3      	ldrh	r3, [r2, #22]
 8010412:	3b01      	subs	r3, #1
 8010414:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010416:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801041a:	4770      	bx	lr
 801041c:	20001554 	.word	0x20001554

08010420 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8010420:	4b02      	ldr	r3, [pc, #8]	; (801042c <TRACE_IsLocked+0xc>)
 8010422:	8ad8      	ldrh	r0, [r3, #22]
}
 8010424:	3800      	subs	r0, #0
 8010426:	bf18      	it	ne
 8010428:	2001      	movne	r0, #1
 801042a:	4770      	bx	lr
 801042c:	20001554 	.word	0x20001554

08010430 <UTIL_ADV_TRACE_Init>:
{
 8010430:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8010432:	2218      	movs	r2, #24
 8010434:	2100      	movs	r1, #0
 8010436:	4807      	ldr	r0, [pc, #28]	; (8010454 <UTIL_ADV_TRACE_Init+0x24>)
 8010438:	f000 f98c 	bl	8010754 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801043c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010440:	2100      	movs	r1, #0
 8010442:	4805      	ldr	r0, [pc, #20]	; (8010458 <UTIL_ADV_TRACE_Init+0x28>)
 8010444:	f000 f986 	bl	8010754 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010448:	4b04      	ldr	r3, [pc, #16]	; (801045c <UTIL_ADV_TRACE_Init+0x2c>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4804      	ldr	r0, [pc, #16]	; (8010460 <UTIL_ADV_TRACE_Init+0x30>)
 801044e:	4798      	blx	r3
}
 8010450:	bd08      	pop	{r3, pc}
 8010452:	bf00      	nop
 8010454:	20001554 	.word	0x20001554
 8010458:	20001154 	.word	0x20001154
 801045c:	080112c0 	.word	0x080112c0
 8010460:	080105e1 	.word	0x080105e1

08010464 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8010464:	4b01      	ldr	r3, [pc, #4]	; (801046c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8010466:	6058      	str	r0, [r3, #4]
}
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	20001554 	.word	0x20001554

08010470 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010470:	4b01      	ldr	r3, [pc, #4]	; (8010478 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8010472:	7218      	strb	r0, [r3, #8]
}
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	20001554 	.word	0x20001554

0801047c <TRACE_Send>:
{
 801047c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801047e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010482:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8010484:	f7ff ffcc 	bl	8010420 <TRACE_IsLocked>
 8010488:	b118      	cbz	r0, 8010492 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801048a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801048e:	2000      	movs	r0, #0
}
 8010490:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8010492:	f7ff ffad 	bl	80103f0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8010496:	4b1d      	ldr	r3, [pc, #116]	; (801050c <TRACE_Send+0x90>)
 8010498:	8a1a      	ldrh	r2, [r3, #16]
 801049a:	8a5b      	ldrh	r3, [r3, #18]
 801049c:	429a      	cmp	r2, r3
 801049e:	d02e      	beq.n	80104fe <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80104a0:	491a      	ldr	r1, [pc, #104]	; (801050c <TRACE_Send+0x90>)
 80104a2:	7889      	ldrb	r1, [r1, #2]
 80104a4:	2901      	cmp	r1, #1
 80104a6:	d017      	beq.n	80104d8 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80104a8:	4a18      	ldr	r2, [pc, #96]	; (801050c <TRACE_Send+0x90>)
 80104aa:	7892      	ldrb	r2, [r2, #2]
 80104ac:	b932      	cbnz	r2, 80104bc <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80104ae:	4a17      	ldr	r2, [pc, #92]	; (801050c <TRACE_Send+0x90>)
 80104b0:	8a12      	ldrh	r2, [r2, #16]
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d91e      	bls.n	80104f4 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80104b6:	1a9b      	subs	r3, r3, r2
 80104b8:	4a14      	ldr	r2, [pc, #80]	; (801050c <TRACE_Send+0x90>)
 80104ba:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80104bc:	4e13      	ldr	r6, [pc, #76]	; (801050c <TRACE_Send+0x90>)
 80104be:	8a33      	ldrh	r3, [r6, #16]
 80104c0:	4d13      	ldr	r5, [pc, #76]	; (8010510 <TRACE_Send+0x94>)
 80104c2:	441d      	add	r5, r3
 80104c4:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80104c8:	f7f1 f802 	bl	80014d0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80104cc:	4b11      	ldr	r3, [pc, #68]	; (8010514 <TRACE_Send+0x98>)
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	8ab1      	ldrh	r1, [r6, #20]
 80104d2:	4628      	mov	r0, r5
 80104d4:	4798      	blx	r3
 80104d6:	e7db      	b.n	8010490 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80104d8:	480c      	ldr	r0, [pc, #48]	; (801050c <TRACE_Send+0x90>)
 80104da:	8801      	ldrh	r1, [r0, #0]
 80104dc:	1a8a      	subs	r2, r1, r2
 80104de:	b292      	uxth	r2, r2
 80104e0:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80104e2:	2102      	movs	r1, #2
 80104e4:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80104e6:	2100      	movs	r1, #0
 80104e8:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80104ea:	2a00      	cmp	r2, #0
 80104ec:	d1dc      	bne.n	80104a8 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80104ee:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80104f0:	8201      	strh	r1, [r0, #16]
 80104f2:	e7d9      	b.n	80104a8 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80104f4:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80104f8:	4a04      	ldr	r2, [pc, #16]	; (801050c <TRACE_Send+0x90>)
 80104fa:	8293      	strh	r3, [r2, #20]
 80104fc:	e7de      	b.n	80104bc <TRACE_Send+0x40>
      TRACE_UnLock();
 80104fe:	f7ff ff83 	bl	8010408 <TRACE_UnLock>
 8010502:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010506:	2000      	movs	r0, #0
}
 8010508:	e7c2      	b.n	8010490 <TRACE_Send+0x14>
 801050a:	bf00      	nop
 801050c:	20001554 	.word	0x20001554
 8010510:	20001154 	.word	0x20001154
 8010514:	080112c0 	.word	0x080112c0

08010518 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010518:	b408      	push	{r3}
 801051a:	b530      	push	{r4, r5, lr}
 801051c:	b086      	sub	sp, #24
 801051e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8010520:	2300      	movs	r3, #0
 8010522:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8010526:	4b2b      	ldr	r3, [pc, #172]	; (80105d4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010528:	7a1b      	ldrb	r3, [r3, #8]
 801052a:	4283      	cmp	r3, r0
 801052c:	d34c      	bcc.n	80105c8 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801052e:	4b29      	ldr	r3, [pc, #164]	; (80105d4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	ea31 0303 	bics.w	r3, r1, r3
 8010536:	d14a      	bne.n	80105ce <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8010538:	4b26      	ldr	r3, [pc, #152]	; (80105d4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	b123      	cbz	r3, 8010548 <UTIL_ADV_TRACE_COND_FSend+0x30>
 801053e:	b11a      	cbz	r2, 8010548 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8010540:	f10d 0102 	add.w	r1, sp, #2
 8010544:	a801      	add	r0, sp, #4
 8010546:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8010548:	ab0a      	add	r3, sp, #40	; 0x28
 801054a:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801054c:	4622      	mov	r2, r4
 801054e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010552:	4821      	ldr	r0, [pc, #132]	; (80105d8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8010554:	f000 fcba 	bl	8010ecc <tiny_vsnprintf_like>
 8010558:	b285      	uxth	r5, r0
  TRACE_Lock();
 801055a:	f7ff ff49 	bl	80103f0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801055e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8010562:	4428      	add	r0, r5
 8010564:	4669      	mov	r1, sp
 8010566:	b280      	uxth	r0, r0
 8010568:	f7ff ff04 	bl	8010374 <TRACE_AllocateBufer>
 801056c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010570:	d025      	beq.n	80105be <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8010572:	2300      	movs	r3, #0
 8010574:	e00c      	b.n	8010590 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8010576:	f8bd 2000 	ldrh.w	r2, [sp]
 801057a:	a906      	add	r1, sp, #24
 801057c:	4419      	add	r1, r3
 801057e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8010582:	4916      	ldr	r1, [pc, #88]	; (80105dc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010584:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8010586:	3201      	adds	r2, #1
 8010588:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 801058c:	3301      	adds	r3, #1
 801058e:	b29b      	uxth	r3, r3
 8010590:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010594:	429a      	cmp	r2, r3
 8010596:	d8ee      	bhi.n	8010576 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010598:	f8bd 0000 	ldrh.w	r0, [sp]
 801059c:	9b05      	ldr	r3, [sp, #20]
 801059e:	4622      	mov	r2, r4
 80105a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80105a4:	4c0d      	ldr	r4, [pc, #52]	; (80105dc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80105a6:	4420      	add	r0, r4
 80105a8:	f000 fc90 	bl	8010ecc <tiny_vsnprintf_like>
    TRACE_UnLock();
 80105ac:	f7ff ff2c 	bl	8010408 <TRACE_UnLock>
    return TRACE_Send();
 80105b0:	f7ff ff64 	bl	801047c <TRACE_Send>
}
 80105b4:	b006      	add	sp, #24
 80105b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105ba:	b001      	add	sp, #4
 80105bc:	4770      	bx	lr
  TRACE_UnLock();
 80105be:	f7ff ff23 	bl	8010408 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80105c2:	f06f 0002 	mvn.w	r0, #2
 80105c6:	e7f5      	b.n	80105b4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80105c8:	f06f 0004 	mvn.w	r0, #4
 80105cc:	e7f2      	b.n	80105b4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80105ce:	f06f 0005 	mvn.w	r0, #5
 80105d2:	e7ef      	b.n	80105b4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80105d4:	20001554 	.word	0x20001554
 80105d8:	2000156c 	.word	0x2000156c
 80105dc:	20001154 	.word	0x20001154

080105e0 <TRACE_TxCpltCallback>:
{
 80105e0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105e2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80105e6:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80105e8:	4b25      	ldr	r3, [pc, #148]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 80105ea:	789b      	ldrb	r3, [r3, #2]
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d016      	beq.n	801061e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80105f0:	4a23      	ldr	r2, [pc, #140]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 80105f2:	8a13      	ldrh	r3, [r2, #16]
 80105f4:	8a90      	ldrh	r0, [r2, #20]
 80105f6:	4403      	add	r3, r0
 80105f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105fc:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80105fe:	4b20      	ldr	r3, [pc, #128]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 8010600:	8a1a      	ldrh	r2, [r3, #16]
 8010602:	8a5b      	ldrh	r3, [r3, #18]
 8010604:	429a      	cmp	r2, r3
 8010606:	d003      	beq.n	8010610 <TRACE_TxCpltCallback+0x30>
 8010608:	481d      	ldr	r0, [pc, #116]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 801060a:	8ac0      	ldrh	r0, [r0, #22]
 801060c:	2801      	cmp	r0, #1
 801060e:	d00b      	beq.n	8010628 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010610:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8010614:	f7f0 ff62 	bl	80014dc <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010618:	f7ff fef6 	bl	8010408 <TRACE_UnLock>
}
 801061c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801061e:	4b18      	ldr	r3, [pc, #96]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 8010620:	2200      	movs	r2, #0
 8010622:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010624:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8010626:	e7ea      	b.n	80105fe <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010628:	4815      	ldr	r0, [pc, #84]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 801062a:	7880      	ldrb	r0, [r0, #2]
 801062c:	2801      	cmp	r0, #1
 801062e:	d014      	beq.n	801065a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010630:	4a13      	ldr	r2, [pc, #76]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 8010632:	7892      	ldrb	r2, [r2, #2]
 8010634:	b932      	cbnz	r2, 8010644 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010636:	4a12      	ldr	r2, [pc, #72]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 8010638:	8a12      	ldrh	r2, [r2, #16]
 801063a:	4293      	cmp	r3, r2
 801063c:	d91b      	bls.n	8010676 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801063e:	1a9b      	subs	r3, r3, r2
 8010640:	4a0f      	ldr	r2, [pc, #60]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 8010642:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010644:	4b0e      	ldr	r3, [pc, #56]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 8010646:	8a1a      	ldrh	r2, [r3, #16]
 8010648:	480e      	ldr	r0, [pc, #56]	; (8010684 <TRACE_TxCpltCallback+0xa4>)
 801064a:	4410      	add	r0, r2
 801064c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010650:	4a0d      	ldr	r2, [pc, #52]	; (8010688 <TRACE_TxCpltCallback+0xa8>)
 8010652:	68d2      	ldr	r2, [r2, #12]
 8010654:	8a99      	ldrh	r1, [r3, #20]
 8010656:	4790      	blx	r2
 8010658:	e7e0      	b.n	801061c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801065a:	4c09      	ldr	r4, [pc, #36]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 801065c:	8820      	ldrh	r0, [r4, #0]
 801065e:	1a82      	subs	r2, r0, r2
 8010660:	b292      	uxth	r2, r2
 8010662:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010664:	2002      	movs	r0, #2
 8010666:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010668:	2000      	movs	r0, #0
 801066a:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801066c:	2a00      	cmp	r2, #0
 801066e:	d1df      	bne.n	8010630 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010670:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010672:	8220      	strh	r0, [r4, #16]
 8010674:	e7dc      	b.n	8010630 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010676:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 801067a:	4a01      	ldr	r2, [pc, #4]	; (8010680 <TRACE_TxCpltCallback+0xa0>)
 801067c:	8293      	strh	r3, [r2, #20]
 801067e:	e7e1      	b.n	8010644 <TRACE_TxCpltCallback+0x64>
 8010680:	20001554 	.word	0x20001554
 8010684:	20001154 	.word	0x20001154
 8010688:	080112c0 	.word	0x080112c0

0801068c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801068c:	2300      	movs	r3, #0
 801068e:	4a02      	ldr	r2, [pc, #8]	; (8010698 <UTIL_LPM_Init+0xc>)
 8010690:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010692:	4a02      	ldr	r2, [pc, #8]	; (801069c <UTIL_LPM_Init+0x10>)
 8010694:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010696:	4770      	bx	lr
 8010698:	20001770 	.word	0x20001770
 801069c:	2000176c 	.word	0x2000176c

080106a0 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106a0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106a4:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80106a6:	b141      	cbz	r1, 80106ba <UTIL_LPM_SetStopMode+0x1a>
 80106a8:	2901      	cmp	r1, #1
 80106aa:	d103      	bne.n	80106b4 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80106ac:	4906      	ldr	r1, [pc, #24]	; (80106c8 <UTIL_LPM_SetStopMode+0x28>)
 80106ae:	680a      	ldr	r2, [r1, #0]
 80106b0:	4310      	orrs	r0, r2
 80106b2:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106b4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80106b8:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80106ba:	4903      	ldr	r1, [pc, #12]	; (80106c8 <UTIL_LPM_SetStopMode+0x28>)
 80106bc:	680a      	ldr	r2, [r1, #0]
 80106be:	ea22 0000 	bic.w	r0, r2, r0
 80106c2:	6008      	str	r0, [r1, #0]
      break;
 80106c4:	e7f6      	b.n	80106b4 <UTIL_LPM_SetStopMode+0x14>
 80106c6:	bf00      	nop
 80106c8:	20001770 	.word	0x20001770

080106cc <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106d0:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80106d2:	b141      	cbz	r1, 80106e6 <UTIL_LPM_SetOffMode+0x1a>
 80106d4:	2901      	cmp	r1, #1
 80106d6:	d103      	bne.n	80106e0 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80106d8:	4906      	ldr	r1, [pc, #24]	; (80106f4 <UTIL_LPM_SetOffMode+0x28>)
 80106da:	680a      	ldr	r2, [r1, #0]
 80106dc:	4310      	orrs	r0, r2
 80106de:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106e0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80106e4:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80106e6:	4903      	ldr	r1, [pc, #12]	; (80106f4 <UTIL_LPM_SetOffMode+0x28>)
 80106e8:	680a      	ldr	r2, [r1, #0]
 80106ea:	ea22 0000 	bic.w	r0, r2, r0
 80106ee:	6008      	str	r0, [r1, #0]
      break;
 80106f0:	e7f6      	b.n	80106e0 <UTIL_LPM_SetOffMode+0x14>
 80106f2:	bf00      	nop
 80106f4:	2000176c 	.word	0x2000176c

080106f8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80106f8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106fe:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

   if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8010700:	4b0c      	ldr	r3, [pc, #48]	; (8010734 <UTIL_LPM_EnterLowPower+0x3c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	b13b      	cbz	r3, 8010716 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010706:	4d0c      	ldr	r5, [pc, #48]	; (8010738 <UTIL_LPM_EnterLowPower+0x40>)
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801070c:	686b      	ldr	r3, [r5, #4]
 801070e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010710:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8010714:	bd38      	pop	{r3, r4, r5, pc}
     if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010716:	4b09      	ldr	r3, [pc, #36]	; (801073c <UTIL_LPM_EnterLowPower+0x44>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	b12b      	cbz	r3, 8010728 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801071c:	4d06      	ldr	r5, [pc, #24]	; (8010738 <UTIL_LPM_EnterLowPower+0x40>)
 801071e:	68ab      	ldr	r3, [r5, #8]
 8010720:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8010722:	68eb      	ldr	r3, [r5, #12]
 8010724:	4798      	blx	r3
 8010726:	e7f3      	b.n	8010710 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8010728:	4d03      	ldr	r5, [pc, #12]	; (8010738 <UTIL_LPM_EnterLowPower+0x40>)
 801072a:	692b      	ldr	r3, [r5, #16]
 801072c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801072e:	696b      	ldr	r3, [r5, #20]
 8010730:	4798      	blx	r3
 8010732:	e7ed      	b.n	8010710 <UTIL_LPM_EnterLowPower+0x18>
 8010734:	20001770 	.word	0x20001770
 8010738:	08011250 	.word	0x08011250
 801073c:	2000176c 	.word	0x2000176c

08010740 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8010740:	1e53      	subs	r3, r2, #1
 8010742:	b29b      	uxth	r3, r3
 8010744:	b12a      	cbz	r2, 8010752 <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 8010746:	f811 2b01 	ldrb.w	r2, [r1], #1
 801074a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 801074e:	461a      	mov	r2, r3
 8010750:	e7f6      	b.n	8010740 <UTIL_MEM_cpy_8>
    }
}
 8010752:	4770      	bx	lr

08010754 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8010754:	1e53      	subs	r3, r2, #1
 8010756:	b29b      	uxth	r3, r3
 8010758:	b11a      	cbz	r2, 8010762 <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 801075a:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 801075e:	461a      	mov	r2, r3
 8010760:	e7f8      	b.n	8010754 <UTIL_MEM_set_8>
  }
}
 8010762:	4770      	bx	lr

08010764 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010764:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010766:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801076a:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801076c:	4a06      	ldr	r2, [pc, #24]	; (8010788 <UTIL_SEQ_SetTask+0x24>)
 801076e:	6813      	ldr	r3, [r2, #0]
 8010770:	4303      	orrs	r3, r0
 8010772:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010774:	4a05      	ldr	r2, [pc, #20]	; (801078c <UTIL_SEQ_SetTask+0x28>)
 8010776:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 801077a:	4318      	orrs	r0, r3
 801077c:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010780:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8010784:	bc10      	pop	{r4}
 8010786:	4770      	bx	lr
 8010788:	20001810 	.word	0x20001810
 801078c:	20001800 	.word	0x20001800

08010790 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010790:	4770      	bx	lr

08010792 <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010792:	4770      	bx	lr

08010794 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8010794:	0c03      	lsrs	r3, r0, #16
 8010796:	041b      	lsls	r3, r3, #16
 8010798:	b9b3      	cbnz	r3, 80107c8 <SEQ_BitPosition+0x34>
 801079a:	0400      	lsls	r0, r0, #16
 801079c:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801079e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80107a2:	d102      	bne.n	80107aa <SEQ_BitPosition+0x16>
 80107a4:	3308      	adds	r3, #8
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80107aa:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80107ae:	d102      	bne.n	80107b6 <SEQ_BitPosition+0x22>
 80107b0:	3304      	adds	r3, #4
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80107b6:	0f00      	lsrs	r0, r0, #28
 80107b8:	4a04      	ldr	r2, [pc, #16]	; (80107cc <SEQ_BitPosition+0x38>)
 80107ba:	5c10      	ldrb	r0, [r2, r0]
 80107bc:	4418      	add	r0, r3
 80107be:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80107c0:	f1c0 001f 	rsb	r0, r0, #31
}
 80107c4:	b2c0      	uxtb	r0, r0
 80107c6:	4770      	bx	lr
  uint8_t n = 0U;
 80107c8:	2300      	movs	r3, #0
 80107ca:	e7e8      	b.n	801079e <SEQ_BitPosition+0xa>
 80107cc:	08011f2c 	.word	0x08011f2c

080107d0 <UTIL_SEQ_Run>:
{
 80107d0:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 80107d2:	4b3b      	ldr	r3, [pc, #236]	; (80108c0 <UTIL_SEQ_Run+0xf0>)
 80107d4:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 80107d6:	4020      	ands	r0, r4
 80107d8:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80107da:	e012      	b.n	8010802 <UTIL_SEQ_Run+0x32>
      counter++;
 80107dc:	3301      	adds	r3, #1
 80107de:	e01f      	b.n	8010820 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80107e0:	3b01      	subs	r3, #1
 80107e2:	4938      	ldr	r1, [pc, #224]	; (80108c4 <UTIL_SEQ_Run+0xf4>)
 80107e4:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80107e8:	4002      	ands	r2, r0
 80107ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1f6      	bne.n	80107e0 <UTIL_SEQ_Run+0x10>
 80107f2:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80107f6:	4b34      	ldr	r3, [pc, #208]	; (80108c8 <UTIL_SEQ_Run+0xf8>)
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	4b34      	ldr	r3, [pc, #208]	; (80108cc <UTIL_SEQ_Run+0xfc>)
 80107fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010800:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8010802:	4b33      	ldr	r3, [pc, #204]	; (80108d0 <UTIL_SEQ_Run+0x100>)
 8010804:	6819      	ldr	r1, [r3, #0]
 8010806:	4b33      	ldr	r3, [pc, #204]	; (80108d4 <UTIL_SEQ_Run+0x104>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	400b      	ands	r3, r1
 801080c:	4a2c      	ldr	r2, [pc, #176]	; (80108c0 <UTIL_SEQ_Run+0xf0>)
 801080e:	6812      	ldr	r2, [r2, #0]
 8010810:	4213      	tst	r3, r2
 8010812:	d033      	beq.n	801087c <UTIL_SEQ_Run+0xac>
 8010814:	4b30      	ldr	r3, [pc, #192]	; (80108d8 <UTIL_SEQ_Run+0x108>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4830      	ldr	r0, [pc, #192]	; (80108dc <UTIL_SEQ_Run+0x10c>)
 801081a:	6800      	ldr	r0, [r0, #0]
 801081c:	4003      	ands	r3, r0
 801081e:	d12d      	bne.n	801087c <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8010820:	4828      	ldr	r0, [pc, #160]	; (80108c4 <UTIL_SEQ_Run+0xf4>)
 8010822:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8010826:	4008      	ands	r0, r1
 8010828:	4010      	ands	r0, r2
 801082a:	d0d7      	beq.n	80107dc <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801082c:	4a25      	ldr	r2, [pc, #148]	; (80108c4 <UTIL_SEQ_Run+0xf4>)
 801082e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010832:	6852      	ldr	r2, [r2, #4]
 8010834:	4210      	tst	r0, r2
 8010836:	d105      	bne.n	8010844 <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010838:	4a22      	ldr	r2, [pc, #136]	; (80108c4 <UTIL_SEQ_Run+0xf4>)
 801083a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801083e:	f04f 31ff 	mov.w	r1, #4294967295
 8010842:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010844:	4d1f      	ldr	r5, [pc, #124]	; (80108c4 <UTIL_SEQ_Run+0xf4>)
 8010846:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801084a:	686e      	ldr	r6, [r5, #4]
 801084c:	4030      	ands	r0, r6
 801084e:	f7ff ffa1 	bl	8010794 <SEQ_BitPosition>
 8010852:	4a1d      	ldr	r2, [pc, #116]	; (80108c8 <UTIL_SEQ_Run+0xf8>)
 8010854:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010856:	2301      	movs	r3, #1
 8010858:	fa03 f000 	lsl.w	r0, r3, r0
 801085c:	ea26 0000 	bic.w	r0, r6, r0
 8010860:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010862:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010866:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010868:	6812      	ldr	r2, [r2, #0]
 801086a:	4093      	lsls	r3, r2
 801086c:	43d8      	mvns	r0, r3
 801086e:	4919      	ldr	r1, [pc, #100]	; (80108d4 <UTIL_SEQ_Run+0x104>)
 8010870:	680a      	ldr	r2, [r1, #0]
 8010872:	ea22 0303 	bic.w	r3, r2, r3
 8010876:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010878:	2302      	movs	r3, #2
 801087a:	e7b8      	b.n	80107ee <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801087c:	4b12      	ldr	r3, [pc, #72]	; (80108c8 <UTIL_SEQ_Run+0xf8>)
 801087e:	f04f 32ff 	mov.w	r2, #4294967295
 8010882:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010884:	f7ff ff84 	bl	8010790 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010888:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801088c:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801088e:	4b11      	ldr	r3, [pc, #68]	; (80108d4 <UTIL_SEQ_Run+0x104>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a0f      	ldr	r2, [pc, #60]	; (80108d0 <UTIL_SEQ_Run+0x100>)
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	4013      	ands	r3, r2
 8010898:	4a09      	ldr	r2, [pc, #36]	; (80108c0 <UTIL_SEQ_Run+0xf0>)
 801089a:	6812      	ldr	r2, [r2, #0]
 801089c:	4213      	tst	r3, r2
 801089e:	d105      	bne.n	80108ac <UTIL_SEQ_Run+0xdc>
 80108a0:	4b0d      	ldr	r3, [pc, #52]	; (80108d8 <UTIL_SEQ_Run+0x108>)
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	4b0d      	ldr	r3, [pc, #52]	; (80108dc <UTIL_SEQ_Run+0x10c>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	421a      	tst	r2, r3
 80108aa:	d006      	beq.n	80108ba <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108ac:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80108b0:	f7ff ff6f 	bl	8010792 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80108b4:	4b02      	ldr	r3, [pc, #8]	; (80108c0 <UTIL_SEQ_Run+0xf0>)
 80108b6:	601c      	str	r4, [r3, #0]
}
 80108b8:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 80108ba:	f7f0 fd89 	bl	80013d0 <UTIL_SEQ_Idle>
 80108be:	e7f5      	b.n	80108ac <UTIL_SEQ_Run+0xdc>
 80108c0:	200000d0 	.word	0x200000d0
 80108c4:	20001800 	.word	0x20001800
 80108c8:	20001774 	.word	0x20001774
 80108cc:	20001780 	.word	0x20001780
 80108d0:	200000d4 	.word	0x200000d4
 80108d4:	20001810 	.word	0x20001810
 80108d8:	20001778 	.word	0x20001778
 80108dc:	2000177c 	.word	0x2000177c

080108e0 <UTIL_SEQ_RegTask>:
{
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108e4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80108e8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80108ea:	f7ff ff53 	bl	8010794 <SEQ_BitPosition>
 80108ee:	4b03      	ldr	r3, [pc, #12]	; (80108fc <UTIL_SEQ_RegTask+0x1c>)
 80108f0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108f4:	f385 8810 	msr	PRIMASK, r5
}
 80108f8:	bd38      	pop	{r3, r4, r5, pc}
 80108fa:	bf00      	nop
 80108fc:	20001780 	.word	0x20001780

08010900 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8010900:	b082      	sub	sp, #8
 8010902:	b082      	sub	sp, #8
 8010904:	f10d 0c08 	add.w	ip, sp, #8
 8010908:	e90c 0006 	stmdb	ip, {r1, r2}
 801090c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 801090e:	9a00      	ldr	r2, [sp, #0]
 8010910:	4413      	add	r3, r2
 8010912:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010914:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010918:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801091c:	440a      	add	r2, r1
 801091e:	b291      	uxth	r1, r2
 8010920:	b212      	sxth	r2, r2
 8010922:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8010924:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010928:	db04      	blt.n	8010934 <SysTimeAdd+0x34>
  {
    c.Seconds++;
 801092a:	3301      	adds	r3, #1
 801092c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 801092e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8010932:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8010934:	b002      	add	sp, #8
 8010936:	b002      	add	sp, #8
 8010938:	4770      	bx	lr

0801093a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801093a:	b082      	sub	sp, #8
 801093c:	b082      	sub	sp, #8
 801093e:	f10d 0c08 	add.w	ip, sp, #8
 8010942:	e90c 0006 	stmdb	ip, {r1, r2}
 8010946:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 8010948:	9a00      	ldr	r2, [sp, #0]
 801094a:	1ad3      	subs	r3, r2, r3
 801094c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801094e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010952:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010956:	1a52      	subs	r2, r2, r1
 8010958:	b291      	uxth	r1, r2
 801095a:	b212      	sxth	r2, r2
 801095c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801095e:	2a00      	cmp	r2, #0
 8010960:	db02      	blt.n	8010968 <SysTimeSub+0x2e>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8010962:	b002      	add	sp, #8
 8010964:	b002      	add	sp, #8
 8010966:	4770      	bx	lr
    c.Seconds--;
 8010968:	3b01      	subs	r3, #1
 801096a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 801096c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8010970:	8081      	strh	r1, [r0, #4]
  return c;
 8010972:	e7f6      	b.n	8010962 <SysTimeSub+0x28>

08010974 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8010974:	b530      	push	{r4, r5, lr}
 8010976:	b089      	sub	sp, #36	; 0x24
 8010978:	ac02      	add	r4, sp, #8
 801097a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801097e:	2300      	movs	r3, #0
 8010980:	9304      	str	r3, [sp, #16]
 8010982:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010986:	4d0b      	ldr	r5, [pc, #44]	; (80109b4 <SysTimeSet+0x40>)
 8010988:	692b      	ldr	r3, [r5, #16]
 801098a:	a805      	add	r0, sp, #20
 801098c:	4798      	blx	r3
 801098e:	4603      	mov	r3, r0
 8010990:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8010992:	9a05      	ldr	r2, [sp, #20]
 8010994:	9200      	str	r2, [sp, #0]
 8010996:	e894 0006 	ldmia.w	r4, {r1, r2}
 801099a:	a806      	add	r0, sp, #24
 801099c:	f7ff ffcd 	bl	801093a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80109a0:	682b      	ldr	r3, [r5, #0]
 80109a2:	9806      	ldr	r0, [sp, #24]
 80109a4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80109a6:	68ab      	ldr	r3, [r5, #8]
 80109a8:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80109ac:	4798      	blx	r3
}
 80109ae:	b009      	add	sp, #36	; 0x24
 80109b0:	bd30      	pop	{r4, r5, pc}
 80109b2:	bf00      	nop
 80109b4:	08011280 	.word	0x08011280

080109b8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80109b8:	b530      	push	{r4, r5, lr}
 80109ba:	b087      	sub	sp, #28
 80109bc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80109be:	2300      	movs	r3, #0
 80109c0:	9304      	str	r3, [sp, #16]
 80109c2:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80109c6:	4d0b      	ldr	r5, [pc, #44]	; (80109f4 <SysTimeGet+0x3c>)
 80109c8:	692b      	ldr	r3, [r5, #16]
 80109ca:	a805      	add	r0, sp, #20
 80109cc:	4798      	blx	r3
 80109ce:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80109d0:	68eb      	ldr	r3, [r5, #12]
 80109d2:	4798      	blx	r3
 80109d4:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80109d8:	686b      	ldr	r3, [r5, #4]
 80109da:	4798      	blx	r3
 80109dc:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80109de:	9b05      	ldr	r3, [sp, #20]
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	9b04      	ldr	r3, [sp, #16]
 80109e4:	9a03      	ldr	r2, [sp, #12]
 80109e6:	4601      	mov	r1, r0
 80109e8:	4620      	mov	r0, r4
 80109ea:	f7ff ff89 	bl	8010900 <SysTimeAdd>

  return sysTime;
}
 80109ee:	4620      	mov	r0, r4
 80109f0:	b007      	add	sp, #28
 80109f2:	bd30      	pop	{r4, r5, pc}
 80109f4:	08011280 	.word	0x08011280

080109f8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80109f8:	b530      	push	{r4, r5, lr}
 80109fa:	b083      	sub	sp, #12
 80109fc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80109fe:	2300      	movs	r3, #0
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010a06:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <SysTimeGetMcuTime+0x28>)
 8010a08:	691b      	ldr	r3, [r3, #16]
 8010a0a:	466d      	mov	r5, sp
 8010a0c:	a801      	add	r0, sp, #4
 8010a0e:	4798      	blx	r3
 8010a10:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8010a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a16:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	b003      	add	sp, #12
 8010a1e:	bd30      	pop	{r4, r5, pc}
 8010a20:	08011280 	.word	0x08011280

08010a24 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8010a24:	b530      	push	{r4, r5, lr}
 8010a26:	b089      	sub	sp, #36	; 0x24
 8010a28:	ac02      	add	r4, sp, #8
 8010a2a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a2e:	4d0c      	ldr	r5, [pc, #48]	; (8010a60 <SysTimeToMs+0x3c>)
 8010a30:	68eb      	ldr	r3, [r5, #12]
 8010a32:	4798      	blx	r3
 8010a34:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010a38:	686b      	ldr	r3, [r5, #4]
 8010a3a:	4798      	blx	r3
 8010a3c:	4603      	mov	r3, r0
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8010a3e:	9a07      	ldr	r2, [sp, #28]
 8010a40:	9200      	str	r2, [sp, #0]
 8010a42:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010a46:	a804      	add	r0, sp, #16
 8010a48:	f7ff ff77 	bl	801093a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8010a4c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8010a50:	9a04      	ldr	r2, [sp, #16]
 8010a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010a56:	fb00 3002 	mla	r0, r0, r2, r3
 8010a5a:	b009      	add	sp, #36	; 0x24
 8010a5c:	bd30      	pop	{r4, r5, pc}
 8010a5e:	bf00      	nop
 8010a60:	08011280 	.word	0x08011280

08010a64 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8010a64:	b530      	push	{r4, r5, lr}
 8010a66:	b087      	sub	sp, #28
 8010a68:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8010a6a:	4b11      	ldr	r3, [pc, #68]	; (8010ab0 <SysTimeFromMs+0x4c>)
 8010a6c:	fba3 2301 	umull	r2, r3, r3, r1
 8010a70:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010a72:	9304      	str	r3, [sp, #16]
 8010a74:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8010a78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010a7c:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8010a80:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8010a84:	2300      	movs	r3, #0
 8010a86:	f8ad 300e 	strh.w	r3, [sp, #14]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010a8a:	4d0a      	ldr	r5, [pc, #40]	; (8010ab4 <SysTimeFromMs+0x50>)
 8010a8c:	68eb      	ldr	r3, [r5, #12]
 8010a8e:	4798      	blx	r3
 8010a90:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010a94:	686b      	ldr	r3, [r5, #4]
 8010a96:	4798      	blx	r3
 8010a98:	4603      	mov	r3, r0
  return SysTimeAdd( sysTime, DeltaTime );
 8010a9a:	9a03      	ldr	r2, [sp, #12]
 8010a9c:	9200      	str	r2, [sp, #0]
 8010a9e:	aa06      	add	r2, sp, #24
 8010aa0:	e912 0006 	ldmdb	r2, {r1, r2}
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	f7ff ff2b 	bl	8010900 <SysTimeAdd>
}
 8010aaa:	4620      	mov	r0, r4
 8010aac:	b007      	add	sp, #28
 8010aae:	bd30      	pop	{r4, r5, pc}
 8010ab0:	10624dd3 	.word	0x10624dd3
 8010ab4:	08011280 	.word	0x08011280

08010ab8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8010ab8:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010aba:	4b03      	ldr	r3, [pc, #12]	; (8010ac8 <UTIL_TIMER_Init+0x10>)
 8010abc:	2200      	movs	r2, #0
 8010abe:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8010ac0:	4b02      	ldr	r3, [pc, #8]	; (8010acc <UTIL_TIMER_Init+0x14>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4798      	blx	r3
}
 8010ac6:	bd08      	pop	{r3, pc}
 8010ac8:	20001814 	.word	0x20001814
 8010acc:	08011294 	.word	0x08011294

08010ad0 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8010ad0:	b1a8      	cbz	r0, 8010afe <UTIL_TIMER_Create+0x2e>
{
 8010ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad4:	4617      	mov	r7, r2
 8010ad6:	461e      	mov	r6, r3
 8010ad8:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8010ada:	b193      	cbz	r3, 8010b02 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8010adc:	2500      	movs	r5, #0
 8010ade:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010ae0:	4b09      	ldr	r3, [pc, #36]	; (8010b08 <UTIL_TIMER_Create+0x38>)
 8010ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae4:	4608      	mov	r0, r1
 8010ae6:	4798      	blx	r3
 8010ae8:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010aea:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8010aec:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010aee:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8010af0:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8010af2:	9b06      	ldr	r3, [sp, #24]
 8010af4:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8010af6:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8010af8:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8010afa:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8010afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8010afe:	2001      	movs	r0, #1
}
 8010b00:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8010b02:	2001      	movs	r0, #1
 8010b04:	e7fa      	b.n	8010afc <UTIL_TIMER_Create+0x2c>
 8010b06:	bf00      	nop
 8010b08:	08011294 	.word	0x08011294

08010b0c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010b0c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8010b0e:	4c03      	ldr	r4, [pc, #12]	; (8010b1c <UTIL_TIMER_GetCurrentTime+0x10>)
 8010b10:	69e3      	ldr	r3, [r4, #28]
 8010b12:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010b16:	4798      	blx	r3
}
 8010b18:	bd10      	pop	{r4, pc}
 8010b1a:	bf00      	nop
 8010b1c:	08011294 	.word	0x08011294

08010b20 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010b20:	b570      	push	{r4, r5, r6, lr}
 8010b22:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010b24:	4d05      	ldr	r5, [pc, #20]	; (8010b3c <UTIL_TIMER_GetElapsedTime+0x1c>)
 8010b26:	69eb      	ldr	r3, [r5, #28]
 8010b28:	4798      	blx	r3
 8010b2a:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010b2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b2e:	4630      	mov	r0, r6
 8010b30:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8010b32:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010b34:	1a20      	subs	r0, r4, r0
 8010b36:	4798      	blx	r3
}
 8010b38:	bd70      	pop	{r4, r5, r6, pc}
 8010b3a:	bf00      	nop
 8010b3c:	08011294 	.word	0x08011294

08010b40 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010b40:	4b05      	ldr	r3, [pc, #20]	; (8010b58 <TimerExists+0x18>)
 8010b42:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8010b44:	b11b      	cbz	r3, 8010b4e <TimerExists+0xe>
  {
    if( cur == TimerObject )
 8010b46:	4283      	cmp	r3, r0
 8010b48:	d003      	beq.n	8010b52 <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8010b4a:	695b      	ldr	r3, [r3, #20]
 8010b4c:	e7fa      	b.n	8010b44 <TimerExists+0x4>
  }
  return false;
 8010b4e:	2000      	movs	r0, #0
 8010b50:	4770      	bx	lr
      return true;
 8010b52:	2001      	movs	r0, #1
}
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	20001814 	.word	0x20001814

08010b5c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5e:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010b60:	4e09      	ldr	r6, [pc, #36]	; (8010b88 <TimerSetTimeout+0x2c>)
 8010b62:	6a33      	ldr	r3, [r6, #32]
 8010b64:	4798      	blx	r3
 8010b66:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010b6c:	6827      	ldr	r7, [r4, #0]
 8010b6e:	69b6      	ldr	r6, [r6, #24]
 8010b70:	47b0      	blx	r6
 8010b72:	4428      	add	r0, r5
 8010b74:	4287      	cmp	r7, r0
 8010b76:	d202      	bcs.n	8010b7e <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010b78:	47b0      	blx	r6
 8010b7a:	4405      	add	r5, r0
 8010b7c:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010b7e:	4b02      	ldr	r3, [pc, #8]	; (8010b88 <TimerSetTimeout+0x2c>)
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	6820      	ldr	r0, [r4, #0]
 8010b84:	4798      	blx	r3
}
 8010b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b88:	08011294 	.word	0x08011294

08010b8c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8010b8c:	b368      	cbz	r0, 8010bea <UTIL_TIMER_Stop+0x5e>
{
 8010b8e:	b510      	push	{r4, lr}
 8010b90:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b92:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b96:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010b98:	4b15      	ldr	r3, [pc, #84]	; (8010bf0 <UTIL_TIMER_Stop+0x64>)
 8010b9a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8010ba0:	b1e1      	cbz	r1, 8010bdc <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010ba6:	4288      	cmp	r0, r1
 8010ba8:	d006      	beq.n	8010bb8 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010baa:	460b      	mov	r3, r1
        while( cur != NULL )
 8010bac:	b1b3      	cbz	r3, 8010bdc <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d011      	beq.n	8010bd6 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8010bb2:	4619      	mov	r1, r3
            cur = cur->Next;
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	e7f9      	b.n	8010bac <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8010bb8:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8010bba:	6948      	ldr	r0, [r1, #20]
 8010bbc:	b120      	cbz	r0, 8010bc8 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8010bbe:	4b0c      	ldr	r3, [pc, #48]	; (8010bf0 <UTIL_TIMER_Stop+0x64>)
 8010bc0:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8010bc2:	f7ff ffcb 	bl	8010b5c <TimerSetTimeout>
 8010bc6:	e009      	b.n	8010bdc <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8010bc8:	4b0a      	ldr	r3, [pc, #40]	; (8010bf4 <UTIL_TIMER_Stop+0x68>)
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	4798      	blx	r3
            TimerListHead = NULL;
 8010bce:	4b08      	ldr	r3, [pc, #32]	; (8010bf0 <UTIL_TIMER_Stop+0x64>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	e002      	b.n	8010bdc <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8010bd6:	695b      	ldr	r3, [r3, #20]
 8010bd8:	b123      	cbz	r3, 8010be4 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8010bda:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bdc:	f384 8810 	msr	PRIMASK, r4
}
 8010be0:	2000      	movs	r0, #0
}
 8010be2:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8010be4:	2300      	movs	r3, #0
 8010be6:	614b      	str	r3, [r1, #20]
 8010be8:	e7f8      	b.n	8010bdc <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8010bea:	2001      	movs	r0, #1
}
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	20001814 	.word	0x20001814
 8010bf4:	08011294 	.word	0x08011294

08010bf8 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010bf8:	4b0d      	ldr	r3, [pc, #52]	; (8010c30 <TimerInsertTimer+0x38>)
 8010bfa:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010bfc:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8010bfe:	6951      	ldr	r1, [r2, #20]
 8010c00:	b189      	cbz	r1, 8010c26 <TimerInsertTimer+0x2e>
{
 8010c02:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8010c04:	6804      	ldr	r4, [r0, #0]
 8010c06:	6819      	ldr	r1, [r3, #0]
 8010c08:	428c      	cmp	r4, r1
 8010c0a:	d908      	bls.n	8010c1e <TimerInsertTimer+0x26>
    {
        cur = next;
 8010c0c:	461a      	mov	r2, r3
        next = next->Next;
 8010c0e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8010c10:	6951      	ldr	r1, [r2, #20]
 8010c12:	2900      	cmp	r1, #0
 8010c14:	d1f6      	bne.n	8010c04 <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8010c16:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	6143      	str	r3, [r0, #20]
 8010c1c:	e001      	b.n	8010c22 <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8010c1e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8010c20:	6143      	str	r3, [r0, #20]
}
 8010c22:	bc10      	pop	{r4}
 8010c24:	4770      	bx	lr
  cur->Next = TimerObject;
 8010c26:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	6143      	str	r3, [r0, #20]
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop
 8010c30:	20001814 	.word	0x20001814

08010c34 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8010c34:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c36:	4b05      	ldr	r3, [pc, #20]	; (8010c4c <TimerInsertNewHeadTimer+0x18>)
 8010c38:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8010c3a:	b10b      	cbz	r3, 8010c40 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010c40:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8010c42:	4b02      	ldr	r3, [pc, #8]	; (8010c4c <TimerInsertNewHeadTimer+0x18>)
 8010c44:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8010c46:	f7ff ff89 	bl	8010b5c <TimerSetTimeout>
}
 8010c4a:	bd08      	pop	{r3, pc}
 8010c4c:	20001814 	.word	0x20001814

08010c50 <UTIL_TIMER_Start>:
{
 8010c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d036      	beq.n	8010cc4 <UTIL_TIMER_Start+0x74>
 8010c56:	4604      	mov	r4, r0
 8010c58:	f7ff ff72 	bl	8010b40 <TimerExists>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d134      	bne.n	8010cca <UTIL_TIMER_Start+0x7a>
 8010c60:	7a65      	ldrb	r5, [r4, #9]
 8010c62:	2d00      	cmp	r5, #0
 8010c64:	d133      	bne.n	8010cce <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c66:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010c6a:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8010c6c:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010c6e:	4b19      	ldr	r3, [pc, #100]	; (8010cd4 <UTIL_TIMER_Start+0x84>)
 8010c70:	6a1b      	ldr	r3, [r3, #32]
 8010c72:	4798      	blx	r3
    if( ticks < minValue )
 8010c74:	4287      	cmp	r7, r0
 8010c76:	d300      	bcc.n	8010c7a <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8010c78:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8010c7a:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8010c80:	2201      	movs	r2, #1
 8010c82:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010c84:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8010c86:	4b14      	ldr	r3, [pc, #80]	; (8010cd8 <UTIL_TIMER_Start+0x88>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	b183      	cbz	r3, 8010cae <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010c8c:	4b11      	ldr	r3, [pc, #68]	; (8010cd4 <UTIL_TIMER_Start+0x84>)
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8010c92:	6823      	ldr	r3, [r4, #0]
 8010c94:	4418      	add	r0, r3
 8010c96:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010c98:	4b0f      	ldr	r3, [pc, #60]	; (8010cd8 <UTIL_TIMER_Start+0x88>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4298      	cmp	r0, r3
 8010ca0:	d20c      	bcs.n	8010cbc <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f7ff ffc6 	bl	8010c34 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ca8:	f386 8810 	msr	PRIMASK, r6
}
 8010cac:	e00b      	b.n	8010cc6 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8010cae:	4b09      	ldr	r3, [pc, #36]	; (8010cd4 <UTIL_TIMER_Start+0x84>)
 8010cb0:	691b      	ldr	r3, [r3, #16]
 8010cb2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f7ff ffbd 	bl	8010c34 <TimerInsertNewHeadTimer>
 8010cba:	e7f5      	b.n	8010ca8 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f7ff ff9b 	bl	8010bf8 <TimerInsertTimer>
 8010cc2:	e7f1      	b.n	8010ca8 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010cc4:	2501      	movs	r5, #1
}
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010cca:	2501      	movs	r5, #1
 8010ccc:	e7fb      	b.n	8010cc6 <UTIL_TIMER_Start+0x76>
 8010cce:	2501      	movs	r5, #1
 8010cd0:	e7f9      	b.n	8010cc6 <UTIL_TIMER_Start+0x76>
 8010cd2:	bf00      	nop
 8010cd4:	08011294 	.word	0x08011294
 8010cd8:	20001814 	.word	0x20001814

08010cdc <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8010cdc:	b198      	cbz	r0, 8010d06 <UTIL_TIMER_SetPeriod+0x2a>
{
 8010cde:	b510      	push	{r4, lr}
 8010ce0:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010ce2:	4b0a      	ldr	r3, [pc, #40]	; (8010d0c <UTIL_TIMER_SetPeriod+0x30>)
 8010ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce6:	4608      	mov	r0, r1
 8010ce8:	4798      	blx	r3
 8010cea:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8010cec:	4620      	mov	r0, r4
 8010cee:	f7ff ff27 	bl	8010b40 <TimerExists>
 8010cf2:	b908      	cbnz	r0, 8010cf8 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010cf4:	2000      	movs	r0, #0
}
 8010cf6:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f7ff ff47 	bl	8010b8c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7ff ffa6 	bl	8010c50 <UTIL_TIMER_Start>
 8010d04:	e7f7      	b.n	8010cf6 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010d06:	2001      	movs	r0, #1
}
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	08011294 	.word	0x08011294

08010d10 <UTIL_TIMER_IRQ_Handler>:
{
 8010d10:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d12:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d16:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010d18:	4c1e      	ldr	r4, [pc, #120]	; (8010d94 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010d1a:	6963      	ldr	r3, [r4, #20]
 8010d1c:	4798      	blx	r3
 8010d1e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010d20:	6923      	ldr	r3, [r4, #16]
 8010d22:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8010d24:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8010d26:	4b1c      	ldr	r3, [pc, #112]	; (8010d98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	b923      	cbnz	r3, 8010d36 <UTIL_TIMER_IRQ_Handler+0x26>
 8010d2c:	e018      	b.n	8010d60 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8010d2e:	2200      	movs	r2, #0
 8010d30:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010d32:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010d34:	b1a3      	cbz	r3, 8010d60 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	42a2      	cmp	r2, r4
 8010d3a:	d9f8      	bls.n	8010d2e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8010d3c:	1a31      	subs	r1, r6, r0
 8010d3e:	440a      	add	r2, r1
 8010d40:	601a      	str	r2, [r3, #0]
 8010d42:	e7f6      	b.n	8010d32 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8010d44:	4b14      	ldr	r3, [pc, #80]	; (8010d98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010d46:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8010d48:	6962      	ldr	r2, [r4, #20]
 8010d4a:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8010d50:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8010d52:	68e3      	ldr	r3, [r4, #12]
 8010d54:	6920      	ldr	r0, [r4, #16]
 8010d56:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010d58:	8963      	ldrh	r3, [r4, #10]
 8010d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d5e:	d012      	beq.n	8010d86 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010d60:	4b0d      	ldr	r3, [pc, #52]	; (8010d98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	b13b      	cbz	r3, 8010d76 <UTIL_TIMER_IRQ_Handler+0x66>
 8010d66:	681c      	ldr	r4, [r3, #0]
 8010d68:	2c00      	cmp	r4, #0
 8010d6a:	d0eb      	beq.n	8010d44 <UTIL_TIMER_IRQ_Handler+0x34>
 8010d6c:	4b09      	ldr	r3, [pc, #36]	; (8010d94 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010d6e:	699b      	ldr	r3, [r3, #24]
 8010d70:	4798      	blx	r3
 8010d72:	4284      	cmp	r4, r0
 8010d74:	d3e6      	bcc.n	8010d44 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010d76:	4b08      	ldr	r3, [pc, #32]	; (8010d98 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010d78:	6818      	ldr	r0, [r3, #0]
 8010d7a:	b108      	cbz	r0, 8010d80 <UTIL_TIMER_IRQ_Handler+0x70>
 8010d7c:	7a03      	ldrb	r3, [r0, #8]
 8010d7e:	b133      	cbz	r3, 8010d8e <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d80:	f385 8810 	msr	PRIMASK, r5
}
 8010d84:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8010d86:	4620      	mov	r0, r4
 8010d88:	f7ff ff62 	bl	8010c50 <UTIL_TIMER_Start>
 8010d8c:	e7e8      	b.n	8010d60 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8010d8e:	f7ff fee5 	bl	8010b5c <TimerSetTimeout>
 8010d92:	e7f5      	b.n	8010d80 <UTIL_TIMER_IRQ_Handler+0x70>
 8010d94:	08011294 	.word	0x08011294
 8010d98:	20001814 	.word	0x20001814

08010d9c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8010d9c:	4601      	mov	r1, r0
  int i = 0;
 8010d9e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8010da0:	680a      	ldr	r2, [r1, #0]
 8010da2:	7813      	ldrb	r3, [r2, #0]
 8010da4:	3b30      	subs	r3, #48	; 0x30
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	2b09      	cmp	r3, #9
 8010daa:	d808      	bhi.n	8010dbe <ee_skip_atoi+0x22>
 8010dac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010db0:	1c53      	adds	r3, r2, #1
 8010db2:	600b      	str	r3, [r1, #0]
 8010db4:	7813      	ldrb	r3, [r2, #0]
 8010db6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010dba:	3830      	subs	r0, #48	; 0x30
 8010dbc:	e7f0      	b.n	8010da0 <ee_skip_atoi+0x4>
  return i;
}
 8010dbe:	4770      	bx	lr

08010dc0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8010dc0:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8010dc4:	b093      	sub	sp, #76	; 0x4c
 8010dc6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010dc8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8010dca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010dce:	d111      	bne.n	8010df4 <ee_number+0x34>
  char *dig = lower_digits;
 8010dd0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8010ec4 <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8010dd4:	469c      	mov	ip, r3
 8010dd6:	3b02      	subs	r3, #2
 8010dd8:	2b22      	cmp	r3, #34	; 0x22
 8010dda:	d871      	bhi.n	8010ec0 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8010ddc:	f015 0401 	ands.w	r4, r5, #1
 8010de0:	d00b      	beq.n	8010dfa <ee_number+0x3a>
 8010de2:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8010de4:	f015 0f02 	tst.w	r5, #2
 8010de8:	d010      	beq.n	8010e0c <ee_number+0x4c>
  {
    if (num < 0)
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	db07      	blt.n	8010dfe <ee_number+0x3e>
  sign = 0;
 8010dee:	f04f 0e00 	mov.w	lr, #0
 8010df2:	e00d      	b.n	8010e10 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 8010df4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010ec8 <ee_number+0x108>
 8010df8:	e7ec      	b.n	8010dd4 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8010dfa:	2720      	movs	r7, #32
 8010dfc:	e7f2      	b.n	8010de4 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8010dfe:	4252      	negs	r2, r2
      size--;
 8010e00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010e02:	3b01      	subs	r3, #1
 8010e04:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 8010e06:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8010e0a:	e001      	b.n	8010e10 <ee_number+0x50>
  sign = 0;
 8010e0c:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8010e10:	b9da      	cbnz	r2, 8010e4a <ee_number+0x8a>
    tmp[i++] = '0';
 8010e12:	2330      	movs	r3, #48	; 0x30
 8010e14:	f88d 3004 	strb.w	r3, [sp, #4]
 8010e18:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8010e1a:	42b5      	cmp	r5, r6
 8010e1c:	dd00      	ble.n	8010e20 <ee_number+0x60>
 8010e1e:	462e      	mov	r6, r5
  size -= precision;
 8010e20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010e22:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010e24:	b30c      	cbz	r4, 8010e6a <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 8010e26:	f1be 0f00 	cmp.w	lr, #0
 8010e2a:	d003      	beq.n	8010e34 <ee_number+0x74>
 8010e2c:	f800 eb01 	strb.w	lr, [r0], #1
 8010e30:	3901      	subs	r1, #1
 8010e32:	d007      	beq.n	8010e44 <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e3a:	dd20      	ble.n	8010e7e <ee_number+0xbe>
 8010e3c:	f800 7b01 	strb.w	r7, [r0], #1
 8010e40:	3901      	subs	r1, #1
 8010e42:	d1f7      	bne.n	8010e34 <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8010e44:	b013      	add	sp, #76	; 0x4c
 8010e46:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 8010e4a:	2500      	movs	r5, #0
    while (num != 0)
 8010e4c:	2a00      	cmp	r2, #0
 8010e4e:	d0e4      	beq.n	8010e1a <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010e50:	fbb2 f3fc 	udiv	r3, r2, ip
 8010e54:	fb0c 2213 	mls	r2, ip, r3, r2
 8010e58:	f818 a002 	ldrb.w	sl, [r8, r2]
 8010e5c:	aa12      	add	r2, sp, #72	; 0x48
 8010e5e:	442a      	add	r2, r5
 8010e60:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8010e64:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010e66:	3501      	adds	r5, #1
 8010e68:	e7f0      	b.n	8010e4c <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e70:	ddd9      	ble.n	8010e26 <ee_number+0x66>
 8010e72:	2220      	movs	r2, #32
 8010e74:	f800 2b01 	strb.w	r2, [r0], #1
 8010e78:	3901      	subs	r1, #1
 8010e7a:	d1f6      	bne.n	8010e6a <ee_number+0xaa>
 8010e7c:	e7e2      	b.n	8010e44 <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 8010e7e:	42ae      	cmp	r6, r5
 8010e80:	f106 36ff 	add.w	r6, r6, #4294967295
 8010e84:	dd05      	ble.n	8010e92 <ee_number+0xd2>
 8010e86:	2230      	movs	r2, #48	; 0x30
 8010e88:	f800 2b01 	strb.w	r2, [r0], #1
 8010e8c:	3901      	subs	r1, #1
 8010e8e:	d1f6      	bne.n	8010e7e <ee_number+0xbe>
 8010e90:	e7d8      	b.n	8010e44 <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010e92:	2d00      	cmp	r5, #0
 8010e94:	f105 35ff 	add.w	r5, r5, #4294967295
 8010e98:	dd08      	ble.n	8010eac <ee_number+0xec>
 8010e9a:	aa12      	add	r2, sp, #72	; 0x48
 8010e9c:	442a      	add	r2, r5
 8010e9e:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8010ea2:	f800 2b01 	strb.w	r2, [r0], #1
 8010ea6:	3901      	subs	r1, #1
 8010ea8:	d1f3      	bne.n	8010e92 <ee_number+0xd2>
 8010eaa:	e7cb      	b.n	8010e44 <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f103 33ff 	add.w	r3, r3, #4294967295
 8010eb2:	ddc7      	ble.n	8010e44 <ee_number+0x84>
 8010eb4:	2220      	movs	r2, #32
 8010eb6:	f800 2b01 	strb.w	r2, [r0], #1
 8010eba:	3901      	subs	r1, #1
 8010ebc:	d1f6      	bne.n	8010eac <ee_number+0xec>
 8010ebe:	e7c1      	b.n	8010e44 <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	e7bf      	b.n	8010e44 <ee_number+0x84>
 8010ec4:	08011f64 	.word	0x08011f64
 8010ec8:	08011f3c 	.word	0x08011f3c

08010ecc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ed0:	b087      	sub	sp, #28
 8010ed2:	9205      	str	r2, [sp, #20]
 8010ed4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8010ed6:	1e0f      	subs	r7, r1, #0
 8010ed8:	f340 80b9 	ble.w	801104e <tiny_vsnprintf_like+0x182>
 8010edc:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010ede:	4604      	mov	r4, r0
 8010ee0:	e004      	b.n	8010eec <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8010ee2:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010ee6:	9b05      	ldr	r3, [sp, #20]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	9305      	str	r3, [sp, #20]
 8010eec:	9905      	ldr	r1, [sp, #20]
 8010eee:	780a      	ldrb	r2, [r1, #0]
 8010ef0:	b922      	cbnz	r2, 8010efc <tiny_vsnprintf_like+0x30>
 8010ef2:	1ba3      	subs	r3, r4, r6
 8010ef4:	1e78      	subs	r0, r7, #1
 8010ef6:	4283      	cmp	r3, r0
 8010ef8:	f2c0 80a3 	blt.w	8011042 <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 8010efc:	1ba3      	subs	r3, r4, r6
 8010efe:	f107 38ff 	add.w	r8, r7, #4294967295
 8010f02:	4543      	cmp	r3, r8
 8010f04:	f280 809d 	bge.w	8011042 <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 8010f08:	2a25      	cmp	r2, #37	; 0x25
 8010f0a:	d1ea      	bne.n	8010ee2 <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8010f0c:	1c4b      	adds	r3, r1, #1
 8010f0e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8010f10:	784b      	ldrb	r3, [r1, #1]
 8010f12:	2b30      	cmp	r3, #48	; 0x30
 8010f14:	d020      	beq.n	8010f58 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8010f16:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8010f1a:	3b30      	subs	r3, #48	; 0x30
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	2b09      	cmp	r3, #9
 8010f20:	d91d      	bls.n	8010f5e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8010f22:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 8010f26:	9b05      	ldr	r3, [sp, #20]
 8010f28:	781a      	ldrb	r2, [r3, #0]
 8010f2a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8010f2e:	2b20      	cmp	r3, #32
 8010f30:	d868      	bhi.n	8011004 <tiny_vsnprintf_like+0x138>
 8010f32:	e8df f003 	tbb	[pc, r3]
 8010f36:	674b      	.short	0x674b
 8010f38:	67676767 	.word	0x67676767
 8010f3c:	67676767 	.word	0x67676767
 8010f40:	67631b67 	.word	0x67631b67
 8010f44:	63676767 	.word	0x63676767
 8010f48:	67676767 	.word	0x67676767
 8010f4c:	67676767 	.word	0x67676767
 8010f50:	19672967 	.word	0x19672967
 8010f54:	6767      	.short	0x6767
 8010f56:	7d          	.byte	0x7d
 8010f57:	00          	.byte	0x00
      flags |= ZEROPAD;
 8010f58:	f04f 0901 	mov.w	r9, #1
 8010f5c:	e7dd      	b.n	8010f1a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8010f5e:	a805      	add	r0, sp, #20
 8010f60:	f7ff ff1c 	bl	8010d9c <ee_skip_atoi>
 8010f64:	4605      	mov	r5, r0
 8010f66:	e7de      	b.n	8010f26 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8010f68:	230a      	movs	r3, #10
 8010f6a:	e032      	b.n	8010fd2 <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8010f6c:	3d01      	subs	r5, #1
 8010f6e:	2d00      	cmp	r5, #0
 8010f70:	dd03      	ble.n	8010f7a <tiny_vsnprintf_like+0xae>
 8010f72:	2320      	movs	r3, #32
 8010f74:	f804 3b01 	strb.w	r3, [r4], #1
 8010f78:	e7f8      	b.n	8010f6c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8010f7a:	9b04      	ldr	r3, [sp, #16]
 8010f7c:	1d1a      	adds	r2, r3, #4
 8010f7e:	9204      	str	r2, [sp, #16]
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8010f86:	e7ae      	b.n	8010ee6 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8010f88:	9b04      	ldr	r3, [sp, #16]
 8010f8a:	1d1a      	adds	r2, r3, #4
 8010f8c:	9204      	str	r2, [sp, #16]
 8010f8e:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8010f92:	f1b8 0f00 	cmp.w	r8, #0
 8010f96:	d00a      	beq.n	8010fae <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8010f98:	4640      	mov	r0, r8
 8010f9a:	f7ef f8ed 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8010f9e:	1e6b      	subs	r3, r5, #1
 8010fa0:	4285      	cmp	r5, r0
 8010fa2:	dd07      	ble.n	8010fb4 <tiny_vsnprintf_like+0xe8>
 8010fa4:	2220      	movs	r2, #32
 8010fa6:	f804 2b01 	strb.w	r2, [r4], #1
 8010faa:	461d      	mov	r5, r3
 8010fac:	e7f7      	b.n	8010f9e <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8010fae:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8011054 <tiny_vsnprintf_like+0x188>
 8010fb2:	e7f1      	b.n	8010f98 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	e006      	b.n	8010fc6 <tiny_vsnprintf_like+0xfa>
 8010fb8:	4643      	mov	r3, r8
 8010fba:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010fbe:	f804 1b01 	strb.w	r1, [r4], #1
 8010fc2:	3201      	adds	r2, #1
 8010fc4:	4698      	mov	r8, r3
 8010fc6:	4282      	cmp	r2, r0
 8010fc8:	dbf6      	blt.n	8010fb8 <tiny_vsnprintf_like+0xec>
 8010fca:	e78c      	b.n	8010ee6 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8010fcc:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8010fd0:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8010fd2:	f019 0f02 	tst.w	r9, #2
 8010fd6:	d02f      	beq.n	8011038 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 8010fd8:	9a04      	ldr	r2, [sp, #16]
 8010fda:	1d11      	adds	r1, r2, #4
 8010fdc:	9104      	str	r1, [sp, #16]
 8010fde:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010fe0:	1ba1      	subs	r1, r4, r6
 8010fe2:	f8cd 9008 	str.w	r9, [sp, #8]
 8010fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8010fea:	9001      	str	r0, [sp, #4]
 8010fec:	9500      	str	r5, [sp, #0]
 8010fee:	eba8 0101 	sub.w	r1, r8, r1
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f7ff fee4 	bl	8010dc0 <ee_number>
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	e774      	b.n	8010ee6 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8010ffc:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8011000:	230a      	movs	r3, #10
 8011002:	e7e6      	b.n	8010fd2 <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 8011004:	2a25      	cmp	r2, #37	; 0x25
 8011006:	d002      	beq.n	801100e <tiny_vsnprintf_like+0x142>
 8011008:	2325      	movs	r3, #37	; 0x25
 801100a:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801100e:	1ba3      	subs	r3, r4, r6
 8011010:	4598      	cmp	r8, r3
 8011012:	dd0f      	ble.n	8011034 <tiny_vsnprintf_like+0x168>
        if (*fmt)
 8011014:	9b05      	ldr	r3, [sp, #20]
 8011016:	781a      	ldrb	r2, [r3, #0]
 8011018:	b13a      	cbz	r2, 801102a <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 801101a:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801101e:	1ba3      	subs	r3, r4, r6
 8011020:	4598      	cmp	r8, r3
 8011022:	f73f af60 	bgt.w	8010ee6 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8011026:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8011028:	e7d3      	b.n	8010fd2 <tiny_vsnprintf_like+0x106>
          --fmt;
 801102a:	3b01      	subs	r3, #1
 801102c:	9305      	str	r3, [sp, #20]
 801102e:	e7f6      	b.n	801101e <tiny_vsnprintf_like+0x152>
        base = 16;
 8011030:	2310      	movs	r3, #16
 8011032:	e7ce      	b.n	8010fd2 <tiny_vsnprintf_like+0x106>
    base = 10;
 8011034:	230a      	movs	r3, #10
 8011036:	e7cc      	b.n	8010fd2 <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 8011038:	9a04      	ldr	r2, [sp, #16]
 801103a:	1d11      	adds	r1, r2, #4
 801103c:	9104      	str	r1, [sp, #16]
 801103e:	6812      	ldr	r2, [r2, #0]
 8011040:	e7ce      	b.n	8010fe0 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 8011042:	2300      	movs	r3, #0
 8011044:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8011046:	1ba0      	subs	r0, r4, r6
}
 8011048:	b007      	add	sp, #28
 801104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 801104e:	2000      	movs	r0, #0
 8011050:	e7fa      	b.n	8011048 <tiny_vsnprintf_like+0x17c>
 8011052:	bf00      	nop
 8011054:	08011f8c 	.word	0x08011f8c

08011058 <__libc_init_array>:
 8011058:	b570      	push	{r4, r5, r6, lr}
 801105a:	4d0d      	ldr	r5, [pc, #52]	; (8011090 <__libc_init_array+0x38>)
 801105c:	4c0d      	ldr	r4, [pc, #52]	; (8011094 <__libc_init_array+0x3c>)
 801105e:	1b64      	subs	r4, r4, r5
 8011060:	10a4      	asrs	r4, r4, #2
 8011062:	2600      	movs	r6, #0
 8011064:	42a6      	cmp	r6, r4
 8011066:	d109      	bne.n	801107c <__libc_init_array+0x24>
 8011068:	4d0b      	ldr	r5, [pc, #44]	; (8011098 <__libc_init_array+0x40>)
 801106a:	4c0c      	ldr	r4, [pc, #48]	; (801109c <__libc_init_array+0x44>)
 801106c:	f000 f8a0 	bl	80111b0 <_init>
 8011070:	1b64      	subs	r4, r4, r5
 8011072:	10a4      	asrs	r4, r4, #2
 8011074:	2600      	movs	r6, #0
 8011076:	42a6      	cmp	r6, r4
 8011078:	d105      	bne.n	8011086 <__libc_init_array+0x2e>
 801107a:	bd70      	pop	{r4, r5, r6, pc}
 801107c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011080:	4798      	blx	r3
 8011082:	3601      	adds	r6, #1
 8011084:	e7ee      	b.n	8011064 <__libc_init_array+0xc>
 8011086:	f855 3b04 	ldr.w	r3, [r5], #4
 801108a:	4798      	blx	r3
 801108c:	3601      	adds	r6, #1
 801108e:	e7f2      	b.n	8011076 <__libc_init_array+0x1e>
 8011090:	08011f9c 	.word	0x08011f9c
 8011094:	08011f9c 	.word	0x08011f9c
 8011098:	08011f9c 	.word	0x08011f9c
 801109c:	08011fa0 	.word	0x08011fa0

080110a0 <memset>:
 80110a0:	4402      	add	r2, r0
 80110a2:	4603      	mov	r3, r0
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d100      	bne.n	80110aa <memset+0xa>
 80110a8:	4770      	bx	lr
 80110aa:	f803 1b01 	strb.w	r1, [r3], #1
 80110ae:	e7f9      	b.n	80110a4 <memset+0x4>

080110b0 <floor>:
 80110b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80110b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80110bc:	2e13      	cmp	r6, #19
 80110be:	4602      	mov	r2, r0
 80110c0:	460b      	mov	r3, r1
 80110c2:	4607      	mov	r7, r0
 80110c4:	460c      	mov	r4, r1
 80110c6:	4605      	mov	r5, r0
 80110c8:	dc34      	bgt.n	8011134 <floor+0x84>
 80110ca:	2e00      	cmp	r6, #0
 80110cc:	da15      	bge.n	80110fa <floor+0x4a>
 80110ce:	a334      	add	r3, pc, #208	; (adr r3, 80111a0 <floor+0xf0>)
 80110d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d4:	f7ef f85e 	bl	8000194 <__adddf3>
 80110d8:	2200      	movs	r2, #0
 80110da:	2300      	movs	r3, #0
 80110dc:	f7ef fa8e 	bl	80005fc <__aeabi_dcmpgt>
 80110e0:	b140      	cbz	r0, 80110f4 <floor+0x44>
 80110e2:	2c00      	cmp	r4, #0
 80110e4:	da59      	bge.n	801119a <floor+0xea>
 80110e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80110ea:	ea57 0503 	orrs.w	r5, r7, r3
 80110ee:	d001      	beq.n	80110f4 <floor+0x44>
 80110f0:	4c2d      	ldr	r4, [pc, #180]	; (80111a8 <floor+0xf8>)
 80110f2:	2500      	movs	r5, #0
 80110f4:	4623      	mov	r3, r4
 80110f6:	462f      	mov	r7, r5
 80110f8:	e025      	b.n	8011146 <floor+0x96>
 80110fa:	4a2c      	ldr	r2, [pc, #176]	; (80111ac <floor+0xfc>)
 80110fc:	fa42 f806 	asr.w	r8, r2, r6
 8011100:	ea01 0208 	and.w	r2, r1, r8
 8011104:	4302      	orrs	r2, r0
 8011106:	d01e      	beq.n	8011146 <floor+0x96>
 8011108:	a325      	add	r3, pc, #148	; (adr r3, 80111a0 <floor+0xf0>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef f841 	bl	8000194 <__adddf3>
 8011112:	2200      	movs	r2, #0
 8011114:	2300      	movs	r3, #0
 8011116:	f7ef fa71 	bl	80005fc <__aeabi_dcmpgt>
 801111a:	2800      	cmp	r0, #0
 801111c:	d0ea      	beq.n	80110f4 <floor+0x44>
 801111e:	2c00      	cmp	r4, #0
 8011120:	bfbe      	ittt	lt
 8011122:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011126:	fa43 f606 	asrlt.w	r6, r3, r6
 801112a:	19a4      	addlt	r4, r4, r6
 801112c:	ea24 0408 	bic.w	r4, r4, r8
 8011130:	2500      	movs	r5, #0
 8011132:	e7df      	b.n	80110f4 <floor+0x44>
 8011134:	2e33      	cmp	r6, #51	; 0x33
 8011136:	dd0a      	ble.n	801114e <floor+0x9e>
 8011138:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801113c:	d103      	bne.n	8011146 <floor+0x96>
 801113e:	f7ef f829 	bl	8000194 <__adddf3>
 8011142:	4607      	mov	r7, r0
 8011144:	460b      	mov	r3, r1
 8011146:	4638      	mov	r0, r7
 8011148:	4619      	mov	r1, r3
 801114a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801114e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8011152:	f04f 32ff 	mov.w	r2, #4294967295
 8011156:	fa22 f808 	lsr.w	r8, r2, r8
 801115a:	ea18 0f00 	tst.w	r8, r0
 801115e:	d0f2      	beq.n	8011146 <floor+0x96>
 8011160:	a30f      	add	r3, pc, #60	; (adr r3, 80111a0 <floor+0xf0>)
 8011162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011166:	f7ef f815 	bl	8000194 <__adddf3>
 801116a:	2200      	movs	r2, #0
 801116c:	2300      	movs	r3, #0
 801116e:	f7ef fa45 	bl	80005fc <__aeabi_dcmpgt>
 8011172:	2800      	cmp	r0, #0
 8011174:	d0be      	beq.n	80110f4 <floor+0x44>
 8011176:	2c00      	cmp	r4, #0
 8011178:	da02      	bge.n	8011180 <floor+0xd0>
 801117a:	2e14      	cmp	r6, #20
 801117c:	d103      	bne.n	8011186 <floor+0xd6>
 801117e:	3401      	adds	r4, #1
 8011180:	ea25 0508 	bic.w	r5, r5, r8
 8011184:	e7b6      	b.n	80110f4 <floor+0x44>
 8011186:	2301      	movs	r3, #1
 8011188:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801118c:	fa03 f606 	lsl.w	r6, r3, r6
 8011190:	4435      	add	r5, r6
 8011192:	42bd      	cmp	r5, r7
 8011194:	bf38      	it	cc
 8011196:	18e4      	addcc	r4, r4, r3
 8011198:	e7f2      	b.n	8011180 <floor+0xd0>
 801119a:	2500      	movs	r5, #0
 801119c:	462c      	mov	r4, r5
 801119e:	e7a9      	b.n	80110f4 <floor+0x44>
 80111a0:	8800759c 	.word	0x8800759c
 80111a4:	7e37e43c 	.word	0x7e37e43c
 80111a8:	bff00000 	.word	0xbff00000
 80111ac:	000fffff 	.word	0x000fffff

080111b0 <_init>:
 80111b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111b2:	bf00      	nop
 80111b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111b6:	bc08      	pop	{r3}
 80111b8:	469e      	mov	lr, r3
 80111ba:	4770      	bx	lr

080111bc <_fini>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	bf00      	nop
 80111c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111c2:	bc08      	pop	{r3}
 80111c4:	469e      	mov	lr, r3
 80111c6:	4770      	bx	lr
