
LoRaWAN_End_Node_DualCore_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007890  08007890  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007898  08007898  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080078a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 MAPPING_TABLE 0000013c  20008000  20008000  00028000  2**4
                  ALLOC
 10 MB_MEM1       000001c0  2000813c  2000813c  00028000  2**2
                  ALLOC
 11 .bss          00000ae8  20000060  20000060  00020060  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  20000b48  20000b48  00020060  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003f8bd  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008a03  00000000  00000000  0005f947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000177b7  00000000  00000000  0006834a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001c18  00000000  00000000  0007fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001ad0  00000000  00000000  00081720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025c72  00000000  00000000  000831f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033b9b  00000000  00000000  000a8e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cdcae  00000000  00000000  000dc9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  001aa6ab  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00004888  00000000  00000000  001aa700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000060 	.word	0x20000060
 8000154:	00000000 	.word	0x00000000
 8000158:	080070f0 	.word	0x080070f0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000064 	.word	0x20000064
 8000174:	080070f0 	.word	0x080070f0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_fmul>:
 8000188:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800018c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000190:	bf1e      	ittt	ne
 8000192:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000196:	ea92 0f0c 	teqne	r2, ip
 800019a:	ea93 0f0c 	teqne	r3, ip
 800019e:	d06f      	beq.n	8000280 <__aeabi_fmul+0xf8>
 80001a0:	441a      	add	r2, r3
 80001a2:	ea80 0c01 	eor.w	ip, r0, r1
 80001a6:	0240      	lsls	r0, r0, #9
 80001a8:	bf18      	it	ne
 80001aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ae:	d01e      	beq.n	80001ee <__aeabi_fmul+0x66>
 80001b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001bc:	fba0 3101 	umull	r3, r1, r0, r1
 80001c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001c8:	bf3e      	ittt	cc
 80001ca:	0049      	lslcc	r1, r1, #1
 80001cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d0:	005b      	lslcc	r3, r3, #1
 80001d2:	ea40 0001 	orr.w	r0, r0, r1
 80001d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001da:	2afd      	cmp	r2, #253	; 0xfd
 80001dc:	d81d      	bhi.n	800021a <__aeabi_fmul+0x92>
 80001de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001e6:	bf08      	it	eq
 80001e8:	f020 0001 	biceq.w	r0, r0, #1
 80001ec:	4770      	bx	lr
 80001ee:	f090 0f00 	teq	r0, #0
 80001f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001f6:	bf08      	it	eq
 80001f8:	0249      	lsleq	r1, r1, #9
 80001fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000202:	3a7f      	subs	r2, #127	; 0x7f
 8000204:	bfc2      	ittt	gt
 8000206:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800020a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800020e:	4770      	bxgt	lr
 8000210:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000214:	f04f 0300 	mov.w	r3, #0
 8000218:	3a01      	subs	r2, #1
 800021a:	dc5d      	bgt.n	80002d8 <__aeabi_fmul+0x150>
 800021c:	f112 0f19 	cmn.w	r2, #25
 8000220:	bfdc      	itt	le
 8000222:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000226:	4770      	bxle	lr
 8000228:	f1c2 0200 	rsb	r2, r2, #0
 800022c:	0041      	lsls	r1, r0, #1
 800022e:	fa21 f102 	lsr.w	r1, r1, r2
 8000232:	f1c2 0220 	rsb	r2, r2, #32
 8000236:	fa00 fc02 	lsl.w	ip, r0, r2
 800023a:	ea5f 0031 	movs.w	r0, r1, rrx
 800023e:	f140 0000 	adc.w	r0, r0, #0
 8000242:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000246:	bf08      	it	eq
 8000248:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800024c:	4770      	bx	lr
 800024e:	f092 0f00 	teq	r2, #0
 8000252:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0040      	lsleq	r0, r0, #1
 800025a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800025e:	3a01      	subeq	r2, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xce>
 8000262:	ea40 000c 	orr.w	r0, r0, ip
 8000266:	f093 0f00 	teq	r3, #0
 800026a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800026e:	bf02      	ittt	eq
 8000270:	0049      	lsleq	r1, r1, #1
 8000272:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000276:	3b01      	subeq	r3, #1
 8000278:	d0f9      	beq.n	800026e <__aeabi_fmul+0xe6>
 800027a:	ea41 010c 	orr.w	r1, r1, ip
 800027e:	e78f      	b.n	80001a0 <__aeabi_fmul+0x18>
 8000280:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	bf18      	it	ne
 800028a:	ea93 0f0c 	teqne	r3, ip
 800028e:	d00a      	beq.n	80002a6 <__aeabi_fmul+0x11e>
 8000290:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000294:	bf18      	it	ne
 8000296:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800029a:	d1d8      	bne.n	800024e <__aeabi_fmul+0xc6>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	bf17      	itett	ne
 80002ac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002b0:	4608      	moveq	r0, r1
 80002b2:	f091 0f00 	teqne	r1, #0
 80002b6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ba:	d014      	beq.n	80002e6 <__aeabi_fmul+0x15e>
 80002bc:	ea92 0f0c 	teq	r2, ip
 80002c0:	d101      	bne.n	80002c6 <__aeabi_fmul+0x13e>
 80002c2:	0242      	lsls	r2, r0, #9
 80002c4:	d10f      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002c6:	ea93 0f0c 	teq	r3, ip
 80002ca:	d103      	bne.n	80002d4 <__aeabi_fmul+0x14c>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	bf18      	it	ne
 80002d0:	4608      	movne	r0, r1
 80002d2:	d108      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002d4:	ea80 0001 	eor.w	r0, r0, r1
 80002d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002e4:	4770      	bx	lr
 80002e6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_fdiv>:
 80002f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80002f8:	bf1e      	ittt	ne
 80002fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80002fe:	ea92 0f0c 	teqne	r2, ip
 8000302:	ea93 0f0c 	teqne	r3, ip
 8000306:	d069      	beq.n	80003dc <__aeabi_fdiv+0xec>
 8000308:	eba2 0203 	sub.w	r2, r2, r3
 800030c:	ea80 0c01 	eor.w	ip, r0, r1
 8000310:	0249      	lsls	r1, r1, #9
 8000312:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000316:	d037      	beq.n	8000388 <__aeabi_fdiv+0x98>
 8000318:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800031c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000320:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000324:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000328:	428b      	cmp	r3, r1
 800032a:	bf38      	it	cc
 800032c:	005b      	lslcc	r3, r3, #1
 800032e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000332:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000336:	428b      	cmp	r3, r1
 8000338:	bf24      	itt	cs
 800033a:	1a5b      	subcs	r3, r3, r1
 800033c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000340:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000344:	bf24      	itt	cs
 8000346:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800034a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800034e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000352:	bf24      	itt	cs
 8000354:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000358:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800035c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000360:	bf24      	itt	cs
 8000362:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000366:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800036a:	011b      	lsls	r3, r3, #4
 800036c:	bf18      	it	ne
 800036e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000372:	d1e0      	bne.n	8000336 <__aeabi_fdiv+0x46>
 8000374:	2afd      	cmp	r2, #253	; 0xfd
 8000376:	f63f af50 	bhi.w	800021a <__aeabi_fmul+0x92>
 800037a:	428b      	cmp	r3, r1
 800037c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000380:	bf08      	it	eq
 8000382:	f020 0001 	biceq.w	r0, r0, #1
 8000386:	4770      	bx	lr
 8000388:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800038c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000390:	327f      	adds	r2, #127	; 0x7f
 8000392:	bfc2      	ittt	gt
 8000394:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000398:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800039c:	4770      	bxgt	lr
 800039e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a2:	f04f 0300 	mov.w	r3, #0
 80003a6:	3a01      	subs	r2, #1
 80003a8:	e737      	b.n	800021a <__aeabi_fmul+0x92>
 80003aa:	f092 0f00 	teq	r2, #0
 80003ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80003b2:	bf02      	ittt	eq
 80003b4:	0040      	lsleq	r0, r0, #1
 80003b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80003ba:	3a01      	subeq	r2, #1
 80003bc:	d0f9      	beq.n	80003b2 <__aeabi_fdiv+0xc2>
 80003be:	ea40 000c 	orr.w	r0, r0, ip
 80003c2:	f093 0f00 	teq	r3, #0
 80003c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80003ca:	bf02      	ittt	eq
 80003cc:	0049      	lsleq	r1, r1, #1
 80003ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80003d2:	3b01      	subeq	r3, #1
 80003d4:	d0f9      	beq.n	80003ca <__aeabi_fdiv+0xda>
 80003d6:	ea41 010c 	orr.w	r1, r1, ip
 80003da:	e795      	b.n	8000308 <__aeabi_fdiv+0x18>
 80003dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80003e0:	ea92 0f0c 	teq	r2, ip
 80003e4:	d108      	bne.n	80003f8 <__aeabi_fdiv+0x108>
 80003e6:	0242      	lsls	r2, r0, #9
 80003e8:	f47f af7d 	bne.w	80002e6 <__aeabi_fmul+0x15e>
 80003ec:	ea93 0f0c 	teq	r3, ip
 80003f0:	f47f af70 	bne.w	80002d4 <__aeabi_fmul+0x14c>
 80003f4:	4608      	mov	r0, r1
 80003f6:	e776      	b.n	80002e6 <__aeabi_fmul+0x15e>
 80003f8:	ea93 0f0c 	teq	r3, ip
 80003fc:	d104      	bne.n	8000408 <__aeabi_fdiv+0x118>
 80003fe:	024b      	lsls	r3, r1, #9
 8000400:	f43f af4c 	beq.w	800029c <__aeabi_fmul+0x114>
 8000404:	4608      	mov	r0, r1
 8000406:	e76e      	b.n	80002e6 <__aeabi_fmul+0x15e>
 8000408:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800040c:	bf18      	it	ne
 800040e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000412:	d1ca      	bne.n	80003aa <__aeabi_fdiv+0xba>
 8000414:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000418:	f47f af5c 	bne.w	80002d4 <__aeabi_fmul+0x14c>
 800041c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000420:	f47f af3c 	bne.w	800029c <__aeabi_fmul+0x114>
 8000424:	e75f      	b.n	80002e6 <__aeabi_fmul+0x15e>
 8000426:	bf00      	nop

08000428 <__aeabi_f2uiz>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	d20e      	bcs.n	800044a <__aeabi_f2uiz+0x22>
 800042c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000430:	d30b      	bcc.n	800044a <__aeabi_f2uiz+0x22>
 8000432:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000436:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800043a:	d409      	bmi.n	8000450 <__aeabi_f2uiz+0x28>
 800043c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000444:	fa23 f002 	lsr.w	r0, r3, r2
 8000448:	4770      	bx	lr
 800044a:	f04f 0000 	mov.w	r0, #0
 800044e:	4770      	bx	lr
 8000450:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000454:	d101      	bne.n	800045a <__aeabi_f2uiz+0x32>
 8000456:	0242      	lsls	r2, r0, #9
 8000458:	d102      	bne.n	8000460 <__aeabi_f2uiz+0x38>
 800045a:	f04f 30ff 	mov.w	r0, #4294967295
 800045e:	4770      	bx	lr
 8000460:	f04f 0000 	mov.w	r0, #0
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <__aeabi_uldivmod>:
 8000468:	b953      	cbnz	r3, 8000480 <__aeabi_uldivmod+0x18>
 800046a:	b94a      	cbnz	r2, 8000480 <__aeabi_uldivmod+0x18>
 800046c:	2900      	cmp	r1, #0
 800046e:	bf08      	it	eq
 8000470:	2800      	cmpeq	r0, #0
 8000472:	bf1c      	itt	ne
 8000474:	f04f 31ff 	movne.w	r1, #4294967295
 8000478:	f04f 30ff 	movne.w	r0, #4294967295
 800047c:	f000 b96c 	b.w	8000758 <__aeabi_idiv0>
 8000480:	f1ad 0c08 	sub.w	ip, sp, #8
 8000484:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000488:	f000 f806 	bl	8000498 <__udivmoddi4>
 800048c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000494:	b004      	add	sp, #16
 8000496:	4770      	bx	lr

08000498 <__udivmoddi4>:
 8000498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800049c:	9e08      	ldr	r6, [sp, #32]
 800049e:	460d      	mov	r5, r1
 80004a0:	4604      	mov	r4, r0
 80004a2:	468e      	mov	lr, r1
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	f040 8082 	bne.w	80005ae <__udivmoddi4+0x116>
 80004aa:	428a      	cmp	r2, r1
 80004ac:	4617      	mov	r7, r2
 80004ae:	d946      	bls.n	800053e <__udivmoddi4+0xa6>
 80004b0:	fab2 f282 	clz	r2, r2
 80004b4:	b14a      	cbz	r2, 80004ca <__udivmoddi4+0x32>
 80004b6:	f1c2 0120 	rsb	r1, r2, #32
 80004ba:	fa05 f302 	lsl.w	r3, r5, r2
 80004be:	fa20 f101 	lsr.w	r1, r0, r1
 80004c2:	4097      	lsls	r7, r2
 80004c4:	ea41 0e03 	orr.w	lr, r1, r3
 80004c8:	4094      	lsls	r4, r2
 80004ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004ce:	0c23      	lsrs	r3, r4, #16
 80004d0:	fbbe fcf8 	udiv	ip, lr, r8
 80004d4:	b2b9      	uxth	r1, r7
 80004d6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80004da:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004de:	fb0c f001 	mul.w	r0, ip, r1
 80004e2:	4298      	cmp	r0, r3
 80004e4:	d90a      	bls.n	80004fc <__udivmoddi4+0x64>
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	f10c 35ff 	add.w	r5, ip, #4294967295
 80004ec:	f080 8116 	bcs.w	800071c <__udivmoddi4+0x284>
 80004f0:	4298      	cmp	r0, r3
 80004f2:	f240 8113 	bls.w	800071c <__udivmoddi4+0x284>
 80004f6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fa:	443b      	add	r3, r7
 80004fc:	1a1b      	subs	r3, r3, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f0f8 	udiv	r0, r3, r8
 8000504:	fb08 3310 	mls	r3, r8, r0, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb00 f101 	mul.w	r1, r0, r1
 8000510:	42a1      	cmp	r1, r4
 8000512:	d909      	bls.n	8000528 <__udivmoddi4+0x90>
 8000514:	193c      	adds	r4, r7, r4
 8000516:	f100 33ff 	add.w	r3, r0, #4294967295
 800051a:	f080 8101 	bcs.w	8000720 <__udivmoddi4+0x288>
 800051e:	42a1      	cmp	r1, r4
 8000520:	f240 80fe 	bls.w	8000720 <__udivmoddi4+0x288>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	1a64      	subs	r4, r4, r1
 800052a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800052e:	2100      	movs	r1, #0
 8000530:	b11e      	cbz	r6, 800053a <__udivmoddi4+0xa2>
 8000532:	40d4      	lsrs	r4, r2
 8000534:	2300      	movs	r3, #0
 8000536:	e9c6 4300 	strd	r4, r3, [r6]
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	b902      	cbnz	r2, 8000542 <__udivmoddi4+0xaa>
 8000540:	deff      	udf	#255	; 0xff
 8000542:	fab2 f282 	clz	r2, r2
 8000546:	2a00      	cmp	r2, #0
 8000548:	d14f      	bne.n	80005ea <__udivmoddi4+0x152>
 800054a:	1bcb      	subs	r3, r1, r7
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	2101      	movs	r1, #1
 8000556:	fbb3 fcfe 	udiv	ip, r3, lr
 800055a:	0c25      	lsrs	r5, r4, #16
 800055c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000560:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000564:	fb08 f30c 	mul.w	r3, r8, ip
 8000568:	42ab      	cmp	r3, r5
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0xe4>
 800056c:	197d      	adds	r5, r7, r5
 800056e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000572:	d202      	bcs.n	800057a <__udivmoddi4+0xe2>
 8000574:	42ab      	cmp	r3, r5
 8000576:	f200 80e7 	bhi.w	8000748 <__udivmoddi4+0x2b0>
 800057a:	4684      	mov	ip, r0
 800057c:	1aed      	subs	r5, r5, r3
 800057e:	b2a3      	uxth	r3, r4
 8000580:	fbb5 f0fe 	udiv	r0, r5, lr
 8000584:	fb0e 5510 	mls	r5, lr, r0, r5
 8000588:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800058c:	fb08 f800 	mul.w	r8, r8, r0
 8000590:	45a0      	cmp	r8, r4
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x10c>
 8000594:	193c      	adds	r4, r7, r4
 8000596:	f100 33ff 	add.w	r3, r0, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x10a>
 800059c:	45a0      	cmp	r8, r4
 800059e:	f200 80d7 	bhi.w	8000750 <__udivmoddi4+0x2b8>
 80005a2:	4618      	mov	r0, r3
 80005a4:	eba4 0408 	sub.w	r4, r4, r8
 80005a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ac:	e7c0      	b.n	8000530 <__udivmoddi4+0x98>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d908      	bls.n	80005c4 <__udivmoddi4+0x12c>
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	f000 80af 	beq.w	8000716 <__udivmoddi4+0x27e>
 80005b8:	2100      	movs	r1, #0
 80005ba:	e9c6 0500 	strd	r0, r5, [r6]
 80005be:	4608      	mov	r0, r1
 80005c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c4:	fab3 f183 	clz	r1, r3
 80005c8:	2900      	cmp	r1, #0
 80005ca:	d14b      	bne.n	8000664 <__udivmoddi4+0x1cc>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d302      	bcc.n	80005d6 <__udivmoddi4+0x13e>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	f200 80b7 	bhi.w	8000744 <__udivmoddi4+0x2ac>
 80005d6:	1a84      	subs	r4, r0, r2
 80005d8:	eb65 0303 	sbc.w	r3, r5, r3
 80005dc:	2001      	movs	r0, #1
 80005de:	469e      	mov	lr, r3
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d0aa      	beq.n	800053a <__udivmoddi4+0xa2>
 80005e4:	e9c6 4e00 	strd	r4, lr, [r6]
 80005e8:	e7a7      	b.n	800053a <__udivmoddi4+0xa2>
 80005ea:	f1c2 0c20 	rsb	ip, r2, #32
 80005ee:	fa01 f302 	lsl.w	r3, r1, r2
 80005f2:	4097      	lsls	r7, r2
 80005f4:	fa20 f00c 	lsr.w	r0, r0, ip
 80005f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005fc:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000600:	4318      	orrs	r0, r3
 8000602:	fbbc f1fe 	udiv	r1, ip, lr
 8000606:	0c05      	lsrs	r5, r0, #16
 8000608:	fb0e cc11 	mls	ip, lr, r1, ip
 800060c:	fa1f f887 	uxth.w	r8, r7
 8000610:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000614:	fb01 f308 	mul.w	r3, r1, r8
 8000618:	42ab      	cmp	r3, r5
 800061a:	fa04 f402 	lsl.w	r4, r4, r2
 800061e:	d909      	bls.n	8000634 <__udivmoddi4+0x19c>
 8000620:	197d      	adds	r5, r7, r5
 8000622:	f101 3cff 	add.w	ip, r1, #4294967295
 8000626:	f080 808b 	bcs.w	8000740 <__udivmoddi4+0x2a8>
 800062a:	42ab      	cmp	r3, r5
 800062c:	f240 8088 	bls.w	8000740 <__udivmoddi4+0x2a8>
 8000630:	3902      	subs	r1, #2
 8000632:	443d      	add	r5, r7
 8000634:	1aeb      	subs	r3, r5, r3
 8000636:	b285      	uxth	r5, r0
 8000638:	fbb3 f0fe 	udiv	r0, r3, lr
 800063c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000640:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000644:	fb00 f308 	mul.w	r3, r0, r8
 8000648:	42ab      	cmp	r3, r5
 800064a:	d907      	bls.n	800065c <__udivmoddi4+0x1c4>
 800064c:	197d      	adds	r5, r7, r5
 800064e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000652:	d271      	bcs.n	8000738 <__udivmoddi4+0x2a0>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d96f      	bls.n	8000738 <__udivmoddi4+0x2a0>
 8000658:	3802      	subs	r0, #2
 800065a:	443d      	add	r5, r7
 800065c:	1aeb      	subs	r3, r5, r3
 800065e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000662:	e778      	b.n	8000556 <__udivmoddi4+0xbe>
 8000664:	f1c1 0c20 	rsb	ip, r1, #32
 8000668:	408b      	lsls	r3, r1
 800066a:	fa22 f70c 	lsr.w	r7, r2, ip
 800066e:	431f      	orrs	r7, r3
 8000670:	fa20 f40c 	lsr.w	r4, r0, ip
 8000674:	fa05 f301 	lsl.w	r3, r5, r1
 8000678:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800067c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000680:	431c      	orrs	r4, r3
 8000682:	0c23      	lsrs	r3, r4, #16
 8000684:	fbb5 f9fe 	udiv	r9, r5, lr
 8000688:	fa1f f887 	uxth.w	r8, r7
 800068c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000690:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000694:	fb09 fa08 	mul.w	sl, r9, r8
 8000698:	45aa      	cmp	sl, r5
 800069a:	fa02 f201 	lsl.w	r2, r2, r1
 800069e:	fa00 f301 	lsl.w	r3, r0, r1
 80006a2:	d908      	bls.n	80006b6 <__udivmoddi4+0x21e>
 80006a4:	197d      	adds	r5, r7, r5
 80006a6:	f109 30ff 	add.w	r0, r9, #4294967295
 80006aa:	d247      	bcs.n	800073c <__udivmoddi4+0x2a4>
 80006ac:	45aa      	cmp	sl, r5
 80006ae:	d945      	bls.n	800073c <__udivmoddi4+0x2a4>
 80006b0:	f1a9 0902 	sub.w	r9, r9, #2
 80006b4:	443d      	add	r5, r7
 80006b6:	eba5 050a 	sub.w	r5, r5, sl
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb5 f0fe 	udiv	r0, r5, lr
 80006c0:	fb0e 5510 	mls	r5, lr, r0, r5
 80006c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006c8:	fb00 f808 	mul.w	r8, r0, r8
 80006cc:	45a0      	cmp	r8, r4
 80006ce:	d907      	bls.n	80006e0 <__udivmoddi4+0x248>
 80006d0:	193c      	adds	r4, r7, r4
 80006d2:	f100 35ff 	add.w	r5, r0, #4294967295
 80006d6:	d22d      	bcs.n	8000734 <__udivmoddi4+0x29c>
 80006d8:	45a0      	cmp	r8, r4
 80006da:	d92b      	bls.n	8000734 <__udivmoddi4+0x29c>
 80006dc:	3802      	subs	r0, #2
 80006de:	443c      	add	r4, r7
 80006e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006e4:	eba4 0408 	sub.w	r4, r4, r8
 80006e8:	fba0 8902 	umull	r8, r9, r0, r2
 80006ec:	454c      	cmp	r4, r9
 80006ee:	46c6      	mov	lr, r8
 80006f0:	464d      	mov	r5, r9
 80006f2:	d319      	bcc.n	8000728 <__udivmoddi4+0x290>
 80006f4:	d016      	beq.n	8000724 <__udivmoddi4+0x28c>
 80006f6:	b15e      	cbz	r6, 8000710 <__udivmoddi4+0x278>
 80006f8:	ebb3 020e 	subs.w	r2, r3, lr
 80006fc:	eb64 0405 	sbc.w	r4, r4, r5
 8000700:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000704:	40ca      	lsrs	r2, r1
 8000706:	ea4c 0202 	orr.w	r2, ip, r2
 800070a:	40cc      	lsrs	r4, r1
 800070c:	e9c6 2400 	strd	r2, r4, [r6]
 8000710:	2100      	movs	r1, #0
 8000712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000716:	4631      	mov	r1, r6
 8000718:	4630      	mov	r0, r6
 800071a:	e70e      	b.n	800053a <__udivmoddi4+0xa2>
 800071c:	46ac      	mov	ip, r5
 800071e:	e6ed      	b.n	80004fc <__udivmoddi4+0x64>
 8000720:	4618      	mov	r0, r3
 8000722:	e701      	b.n	8000528 <__udivmoddi4+0x90>
 8000724:	4543      	cmp	r3, r8
 8000726:	d2e6      	bcs.n	80006f6 <__udivmoddi4+0x25e>
 8000728:	ebb8 0e02 	subs.w	lr, r8, r2
 800072c:	eb69 0507 	sbc.w	r5, r9, r7
 8000730:	3801      	subs	r0, #1
 8000732:	e7e0      	b.n	80006f6 <__udivmoddi4+0x25e>
 8000734:	4628      	mov	r0, r5
 8000736:	e7d3      	b.n	80006e0 <__udivmoddi4+0x248>
 8000738:	4660      	mov	r0, ip
 800073a:	e78f      	b.n	800065c <__udivmoddi4+0x1c4>
 800073c:	4681      	mov	r9, r0
 800073e:	e7ba      	b.n	80006b6 <__udivmoddi4+0x21e>
 8000740:	4661      	mov	r1, ip
 8000742:	e777      	b.n	8000634 <__udivmoddi4+0x19c>
 8000744:	4608      	mov	r0, r1
 8000746:	e74b      	b.n	80005e0 <__udivmoddi4+0x148>
 8000748:	f1ac 0c02 	sub.w	ip, ip, #2
 800074c:	443d      	add	r5, r7
 800074e:	e715      	b.n	800057c <__udivmoddi4+0xe4>
 8000750:	3802      	subs	r0, #2
 8000752:	443c      	add	r4, r7
 8000754:	e726      	b.n	80005a4 <__udivmoddi4+0x10c>
 8000756:	bf00      	nop

08000758 <__aeabi_idiv0>:
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 800075c:	b508      	push	{r3, lr}
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 800075e:	f001 febb 	bl	80024d8 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8000762:	f001 fec1 	bl	80024e8 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8000766:	f001 fec7 	bl	80024f8 <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 800076a:	bd08      	pop	{r3, pc}

0800076c <DBG_Disable>:
{
 800076c:	b510      	push	{r4, lr}
 800076e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	2400      	movs	r4, #0
 8000772:	9404      	str	r4, [sp, #16]
 8000774:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800077a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800077c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000780:	9301      	str	r3, [sp, #4]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000796:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	a901      	add	r1, sp, #4
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f003 f95d 	bl	8003a5c <HAL_GPIO_Init>
  DBG_ConfigForLpm(0);
 80007a2:	4620      	mov	r0, r4
 80007a4:	f7ff ffda 	bl	800075c <DBG_ConfigForLpm>
}
 80007a8:	b006      	add	sp, #24
 80007aa:	bd10      	pop	{r4, pc}

080007ac <DBG_ProbesInit>:
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80007ac:	4770      	bx	lr
	...

080007b0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80007b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80007b2:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_ADC_Init+0x50>)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC_Init+0x54>)
 80007b6:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80007bc:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007be:	2300      	movs	r3, #0
 80007c0:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c2:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c4:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	2204      	movs	r2, #4
 80007c8:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007ca:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007cc:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007ce:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80007d0:	2201      	movs	r2, #1
 80007d2:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007d4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007dc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e4:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80007e6:	2207      	movs	r2, #7
 80007e8:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80007ea:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80007ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007f0:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007f2:	f001 fe89 	bl	8002508 <HAL_ADC_Init>
 80007f6:	b900      	cbnz	r0, 80007fa <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007f8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007fa:	f000 f997 	bl	8000b2c <Error_Handler>
}
 80007fe:	e7fb      	b.n	80007f8 <MX_ADC_Init+0x48>
 8000800:	20000960 	.word	0x20000960
 8000804:	40012400 	.word	0x40012400

08000808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000808:	6802      	ldr	r2, [r0, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_ADC_MspInit+0x28>)
 800080c:	429a      	cmp	r2, r3
 800080e:	d000      	beq.n	8000812 <HAL_ADC_MspInit+0xa>
 8000810:	4770      	bx	lr
{
 8000812:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800081a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800081e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000826:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000828:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800082a:	b002      	add	sp, #8
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40012400 	.word	0x40012400

08000834 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000834:	6802      	ldr	r2, [r0, #0]
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_ADC_MspDeInit+0x18>)
 8000838:	429a      	cmp	r2, r3
 800083a:	d000      	beq.n	800083e <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800083c:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800083e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000842:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000848:	6613      	str	r3, [r2, #96]	; 0x60
 800084a:	e7f7      	b.n	800083c <HAL_ADC_MspDeInit+0x8>
 800084c:	40012400 	.word	0x40012400

08000850 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000850:	b530      	push	{r4, r5, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	2300      	movs	r3, #0
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	9302      	str	r3, [sp, #8]
 800085c:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800085e:	f7ff ffa7 	bl	80007b0 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000862:	4816      	ldr	r0, [pc, #88]	; (80008bc <ADC_ReadChannels+0x6c>)
 8000864:	f002 fa82 	bl	8002d6c <HAL_ADCEx_Calibration_Start>
 8000868:	b9f8      	cbnz	r0, 80008aa <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800086a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086c:	2300      	movs	r3, #0
 800086e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000870:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000872:	a901      	add	r1, sp, #4
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <ADC_ReadChannels+0x6c>)
 8000876:	f001 ffdf 	bl	8002838 <HAL_ADC_ConfigChannel>
 800087a:	b9c8      	cbnz	r0, 80008b0 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800087c:	480f      	ldr	r0, [pc, #60]	; (80008bc <ADC_ReadChannels+0x6c>)
 800087e:	f002 f985 	bl	8002b8c <HAL_ADC_Start>
 8000882:	b9c0      	cbnz	r0, 80008b6 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000884:	4c0d      	ldr	r4, [pc, #52]	; (80008bc <ADC_ReadChannels+0x6c>)
 8000886:	f04f 31ff 	mov.w	r1, #4294967295
 800088a:	4620      	mov	r0, r4
 800088c:	f001 ff72 	bl	8002774 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000890:	4620      	mov	r0, r4
 8000892:	f002 fa4b 	bl	8002d2c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000896:	4620      	mov	r0, r4
 8000898:	f001 ffcb 	bl	8002832 <HAL_ADC_GetValue>
 800089c:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800089e:	4620      	mov	r0, r4
 80008a0:	f002 f9f0 	bl	8002c84 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80008a4:	4628      	mov	r0, r5
 80008a6:	b005      	add	sp, #20
 80008a8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80008aa:	f000 f93f 	bl	8000b2c <Error_Handler>
 80008ae:	e7dc      	b.n	800086a <ADC_ReadChannels+0x1a>
    Error_Handler();
 80008b0:	f000 f93c 	bl	8000b2c <Error_Handler>
 80008b4:	e7e2      	b.n	800087c <ADC_ReadChannels+0x2c>
    Error_Handler();
 80008b6:	f000 f939 	bl	8000b2c <Error_Handler>
 80008ba:	e7e3      	b.n	8000884 <ADC_ReadChannels+0x34>
 80008bc:	20000960 	.word	0x20000960

080008c0 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80008c0:	4b01      	ldr	r3, [pc, #4]	; (80008c8 <SYS_InitMeasurement+0x8>)
 80008c2:	4a02      	ldr	r2, [pc, #8]	; (80008cc <SYS_InitMeasurement+0xc>)
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	4770      	bx	lr
 80008c8:	20000960 	.word	0x20000960
 80008cc:	40012400 	.word	0x40012400

080008d0 <SYS_GetBatteryLevel>:
{
 80008d0:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <SYS_GetBatteryLevel+0x38>)
 80008d4:	f7ff ffbc 	bl	8000850 <ADC_ReadChannels>
  if (measuredLevel == 0)
 80008d8:	b198      	cbz	r0, 8000902 <SYS_GetBatteryLevel+0x32>
 80008da:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <SYS_GetBatteryLevel+0x3c>)
 80008de:	8812      	ldrh	r2, [r2, #0]
 80008e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008e4:	428a      	cmp	r2, r1
 80008e6:	d007      	beq.n	80008f8 <SYS_GetBatteryLevel+0x28>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80008e8:	f640 40e4 	movw	r0, #3300	; 0xce4
 80008ec:	fb00 f002 	mul.w	r0, r0, r2
 80008f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80008f4:	b280      	uxth	r0, r0
 80008f6:	e005      	b.n	8000904 <SYS_GetBatteryLevel+0x34>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <SYS_GetBatteryLevel+0x40>)
 80008fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80008fe:	b280      	uxth	r0, r0
 8000900:	e000      	b.n	8000904 <SYS_GetBatteryLevel+0x34>
    batteryLevelmV = 0;
 8000902:	2000      	movs	r0, #0
}
 8000904:	bd08      	pop	{r3, pc}
 8000906:	bf00      	nop
 8000908:	b4002000 	.word	0xb4002000
 800090c:	1fff75aa 	.word	0x1fff75aa
 8000910:	004c08d8 	.word	0x004c08d8

08000914 <SYS_GetTemperatureLevel>:
{
 8000914:	b530      	push	{r4, r5, lr}
 8000916:	b083      	sub	sp, #12
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000918:	f7ff ffda 	bl	80008d0 <SYS_GetBatteryLevel>
 800091c:	4605      	mov	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800091e:	481f      	ldr	r0, [pc, #124]	; (800099c <SYS_GetTemperatureLevel+0x88>)
 8000920:	f7ff ff96 	bl	8000850 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <SYS_GetTemperatureLevel+0x8c>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <SYS_GetTemperatureLevel+0x90>)
 800092a:	8812      	ldrh	r2, [r2, #0]
 800092c:	4293      	cmp	r3, r2
 800092e:	d01a      	beq.n	8000966 <SYS_GetTemperatureLevel+0x52>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000930:	fb00 f005 	mul.w	r0, r0, r5
 8000934:	0880      	lsrs	r0, r0, #2
 8000936:	4c1c      	ldr	r4, [pc, #112]	; (80009a8 <SYS_GetTemperatureLevel+0x94>)
 8000938:	fba4 1400 	umull	r1, r4, r4, r0
 800093c:	ebc2 1054 	rsb	r0, r2, r4, lsr #5
 8000940:	2464      	movs	r4, #100	; 0x64
 8000942:	fb04 f400 	mul.w	r4, r4, r0
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	fb94 f4f3 	sdiv	r4, r4, r3
 800094c:	341e      	adds	r4, #30
 800094e:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000950:	9400      	str	r4, [sp, #0]
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <SYS_GetTemperatureLevel+0x98>)
 8000954:	2201      	movs	r2, #1
 8000956:	2100      	movs	r1, #0
 8000958:	4610      	mov	r0, r2
 800095a:	f005 fe59 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 800095e:	0220      	lsls	r0, r4, #8
}
 8000960:	b200      	sxth	r0, r0
 8000962:	b003      	add	sp, #12
 8000964:	bd30      	pop	{r4, r5, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000966:	fb00 f005 	mul.w	r0, r0, r5
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <SYS_GetTemperatureLevel+0x9c>)
 800096c:	fba3 2300 	umull	r2, r3, r3, r0
 8000970:	1ac0      	subs	r0, r0, r3
 8000972:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8000976:	0ac0      	lsrs	r0, r0, #11
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	fb03 f300 	mul.w	r3, r3, r0
 8000980:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000984:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <SYS_GetTemperatureLevel+0xa0>)
 800098a:	fb80 2003 	smull	r2, r0, r0, r3
 800098e:	17dc      	asrs	r4, r3, #31
 8000990:	ebc4 24a0 	rsb	r4, r4, r0, asr #10
 8000994:	341e      	adds	r4, #30
 8000996:	b224      	sxth	r4, r4
 8000998:	e7da      	b.n	8000950 <SYS_GetTemperatureLevel+0x3c>
 800099a:	bf00      	nop
 800099c:	b0001000 	.word	0xb0001000
 80009a0:	1fff75c8 	.word	0x1fff75c8
 80009a4:	1fff75a8 	.word	0x1fff75a8
 80009a8:	09ee009f 	.word	0x09ee009f
 80009ac:	08007124 	.word	0x08007124
 80009b0:	00100101 	.word	0x00100101
 80009b4:	68db8bad 	.word	0x68db8bad

080009b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009b8:	b500      	push	{lr}
 80009ba:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009c2:	f042 0204 	orr.w	r2, r2, #4
 80009c6:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009ca:	f002 0204 	and.w	r2, r2, #4
 80009ce:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80009d0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009d4:	f042 0201 	orr.w	r2, r2, #1
 80009d8:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80009e2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2102      	movs	r1, #2
 80009e8:	200f      	movs	r0, #15
 80009ea:	f002 fa21 	bl	8002e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009ee:	200f      	movs	r0, #15
 80009f0:	f002 fa52 	bl	8002e98 <HAL_NVIC_EnableIRQ>

}
 80009f4:	b003      	add	sp, #12
 80009f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080009fc <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80009fc:	b508      	push	{r3, lr}
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_IPCC_Init+0x18>)
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_IPCC_Init+0x1c>)
 8000a02:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000a04:	f003 fa5a 	bl	8003ebc <HAL_IPCC_Init>
 8000a08:	b900      	cbnz	r0, 8000a0c <MX_IPCC_Init+0x10>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000a0a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a0c:	f000 f88e 	bl	8000b2c <Error_Handler>
}
 8000a10:	e7fb      	b.n	8000a0a <MX_IPCC_Init+0xe>
 8000a12:	bf00      	nop
 8000a14:	200009c4 	.word	0x200009c4
 8000a18:	58000c00 	.word	0x58000c00

08000a1c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{

  if(ipccHandle->Instance==IPCC)
 8000a1c:	6802      	ldr	r2, [r0, #0]
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_IPCC_MspInit+0x4c>)
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d000      	beq.n	8000a26 <HAL_IPCC_MspInit+0xa>
 8000a24:	4770      	bx	lr
{
 8000a26:	b500      	push	{lr}
 8000a28:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a34:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a3e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 1, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	202d      	movs	r0, #45	; 0x2d
 8000a46:	f002 f9f3 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000a4a:	202d      	movs	r0, #45	; 0x2d
 8000a4c:	f002 fa24 	bl	8002e98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 1, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	202e      	movs	r0, #46	; 0x2e
 8000a56:	f002 f9eb 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000a5a:	202e      	movs	r0, #46	; 0x2e
 8000a5c:	f002 fa1c 	bl	8002e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000a60:	b003      	add	sp, #12
 8000a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a66:	bf00      	nop
 8000a68:	58000c00 	.word	0x58000c00

08000a6c <IpccIfIsrTxCb>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/

static void IpccIfIsrTxCb(IPCC_HandleTypeDef *hIpcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8000a6c:	b508      	push	{r3, lr}

  /* USER CODE END IpccIfIsrTxCb_1 */
  UNUSED(hIpcc);
  UNUSED(ChannelDir);

  IpccResponseRcv(ChannelIndex);
 8000a6e:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <IpccIfIsrTxCb+0xc>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4608      	mov	r0, r1
 8000a74:	4798      	blx	r3
  return;
  /* USER CODE BEGIN IpccIfIsrTxCb_2 */

  /* USER CODE END IpccIfIsrTxCb_2 */
}
 8000a76:	bd08      	pop	{r3, pc}
 8000a78:	20000080 	.word	0x20000080

08000a7c <IpccIfIsrRxCb>:

static void IpccIfIsrRxCb(IPCC_HandleTypeDef *hIpcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8000a7c:	b508      	push	{r3, lr}

  /* USER CODE END IpccIfIsrRxCb_1 */
  UNUSED(hIpcc);
  UNUSED(ChannelDir);

  IpccNotificationRcv(ChannelIndex);
 8000a7e:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <IpccIfIsrRxCb+0xc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4608      	mov	r0, r1
 8000a84:	4798      	blx	r3
  return;
  /* USER CODE BEGIN IpccIfIsrRxCb_2 */

  /* USER CODE END IpccIfIsrRxCb_2 */
}
 8000a86:	bd08      	pop	{r3, pc}
 8000a88:	2000007c 	.word	0x2000007c

08000a8c <IPCC_IF_Init>:
{
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	4607      	mov	r7, r0
 8000a90:	460e      	mov	r6, r1
  MX_IPCC_Init();
 8000a92:	f7ff ffb3 	bl	80009fc <MX_IPCC_Init>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <IPCC_IF_Init+0x50>)
 8000a98:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000a9c:	f042 0210 	orr.w	r2, r2, #16
 8000aa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         @arg @ref LL_EXTI_LINE_45
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000aa4:	6a1a      	ldr	r2, [r3, #32]
 8000aa6:	f042 0210 	orr.w	r2, r2, #16
 8000aaa:	621a      	str	r2, [r3, #32]
  for (int32_t i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8000aac:	2400      	movs	r4, #0
 8000aae:	2c05      	cmp	r4, #5
 8000ab0:	d80e      	bhi.n	8000ad0 <IPCC_IF_Init+0x44>
    HAL_IPCC_ActivateNotification(&hipcc, i, IPCC_CHANNEL_DIR_TX, IpccIfIsrTxCb);
 8000ab2:	4d0b      	ldr	r5, [pc, #44]	; (8000ae0 <IPCC_IF_Init+0x54>)
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <IPCC_IF_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4621      	mov	r1, r4
 8000aba:	4628      	mov	r0, r5
 8000abc:	f003 f98e 	bl	8003ddc <HAL_IPCC_ActivateNotification>
    HAL_IPCC_ActivateNotification(&hipcc, i, IPCC_CHANNEL_DIR_RX, IpccIfIsrRxCb);
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <IPCC_IF_Init+0x5c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4621      	mov	r1, r4
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	f003 f988 	bl	8003ddc <HAL_IPCC_ActivateNotification>
  for (int32_t i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8000acc:	3401      	adds	r4, #1
 8000ace:	e7ee      	b.n	8000aae <IPCC_IF_Init+0x22>
  IpccResponseRcv = IPCC_IF_ResponseRcv_cb;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <IPCC_IF_Init+0x60>)
 8000ad2:	601f      	str	r7, [r3, #0]
  IpccNotificationRcv = IPCC_IF_NotificationRcv_cb;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <IPCC_IF_Init+0x64>)
 8000ad6:	601e      	str	r6, [r3, #0]
}
 8000ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	58000800 	.word	0x58000800
 8000ae0:	200009c4 	.word	0x200009c4
 8000ae4:	08000a6d 	.word	0x08000a6d
 8000ae8:	08000a7d 	.word	0x08000a7d
 8000aec:	20000080 	.word	0x20000080
 8000af0:	2000007c 	.word	0x2000007c

08000af4 <IPCC_IF_CommandSnd>:
{
 8000af4:	b508      	push	{r3, lr}
 8000af6:	4601      	mov	r1, r0
  if (HAL_OK != HAL_IPCC_NotifyCPU(&hipcc, channelIdx, IPCC_CHANNEL_DIR_TX))
 8000af8:	2200      	movs	r2, #0
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <IPCC_IF_CommandSnd+0x18>)
 8000afc:	f003 f99e 	bl	8003e3c <HAL_IPCC_NotifyCPU>
 8000b00:	b908      	cbnz	r0, 8000b06 <IPCC_IF_CommandSnd+0x12>
    return 0;
 8000b02:	2000      	movs	r0, #0
}
 8000b04:	bd08      	pop	{r3, pc}
    return -1;
 8000b06:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0a:	e7fb      	b.n	8000b04 <IPCC_IF_CommandSnd+0x10>
 8000b0c:	200009c4 	.word	0x200009c4

08000b10 <IPCC_IF_AcknowledgeSnd>:
{
 8000b10:	b508      	push	{r3, lr}
 8000b12:	4601      	mov	r1, r0
  if (HAL_OK != HAL_IPCC_NotifyCPU(&hipcc, channelIdx, IPCC_CHANNEL_DIR_RX))
 8000b14:	2201      	movs	r2, #1
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <IPCC_IF_AcknowledgeSnd+0x18>)
 8000b18:	f003 f990 	bl	8003e3c <HAL_IPCC_NotifyCPU>
 8000b1c:	b908      	cbnz	r0, 8000b22 <IPCC_IF_AcknowledgeSnd+0x12>
    return 0;
 8000b1e:	2000      	movs	r0, #0
}
 8000b20:	bd08      	pop	{r3, pc}
    return -1;
 8000b22:	f04f 30ff 	mov.w	r0, #4294967295
 8000b26:	e7fb      	b.n	8000b20 <IPCC_IF_AcknowledgeSnd+0x10>
 8000b28:	200009c4 	.word	0x200009c4

08000b2c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <Error_Handler+0x2>

08000b30 <SystemClock_Config>:
{
 8000b30:	b510      	push	{r4, lr}
 8000b32:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b34:	2248      	movs	r2, #72	; 0x48
 8000b36:	2100      	movs	r1, #0
 8000b38:	a808      	add	r0, sp, #32
 8000b3a:	f006 fad1 	bl	80070e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3e:	2400      	movs	r4, #0
 8000b40:	9401      	str	r4, [sp, #4]
 8000b42:	9402      	str	r4, [sp, #8]
 8000b44:	9403      	str	r4, [sp, #12]
 8000b46:	9404      	str	r4, [sp, #16]
 8000b48:	9405      	str	r4, [sp, #20]
 8000b4a:	9406      	str	r4, [sp, #24]
 8000b4c:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8000b4e:	f003 f9d3 	bl	8003ef8 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000b5a:	f023 0318 	bic.w	r3, r3, #24
 8000b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b66:	6813      	ldr	r3, [r2, #0]
 8000b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b7c:	2324      	movs	r3, #36	; 0x24
 8000b7e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b80:	2381      	movs	r3, #129	; 0x81
 8000b82:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b88:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000b8a:	23b0      	movs	r3, #176	; 0xb0
 8000b8c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	a808      	add	r0, sp, #32
 8000b92:	f003 fb51 	bl	8004238 <HAL_RCC_OscConfig>
 8000b96:	b978      	cbnz	r0, 8000bb8 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000b98:	236f      	movs	r3, #111	; 0x6f
 8000b9a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000ba6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000ba8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000baa:	2102      	movs	r1, #2
 8000bac:	a801      	add	r0, sp, #4
 8000bae:	f003 fe7f 	bl	80048b0 <HAL_RCC_ClockConfig>
 8000bb2:	b918      	cbnz	r0, 8000bbc <SystemClock_Config+0x8c>
}
 8000bb4:	b01a      	add	sp, #104	; 0x68
 8000bb6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000bb8:	f7ff ffb8 	bl	8000b2c <Error_Handler>
    Error_Handler();
 8000bbc:	f7ff ffb6 	bl	8000b2c <Error_Handler>

08000bc0 <main>:
{
 8000bc0:	b508      	push	{r3, lr}
  HAL_Init();
 8000bc2:	f001 fc63 	bl	800248c <HAL_Init>
  SystemClock_Config();
 8000bc6:	f7ff ffb3 	bl	8000b30 <SystemClock_Config>
  MX_LoRaWAN_Init();
 8000bca:	f000 fbc3 	bl	8001354 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8000bce:	f000 fbc7 	bl	8001360 <MX_LoRaWAN_Process>
  while (1)
 8000bd2:	e7fc      	b.n	8000bce <main+0xe>

08000bd4 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000bd4:	4770      	bx	lr

08000bd6 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000bd6:	4770      	bx	lr

08000bd8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000bd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000bda:	f001 fc6d 	bl	80024b8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000bde:	2001      	movs	r0, #1
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <PWR_EnterStopMode+0x14>)
 8000be2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000be6:	f003 f9f3 	bl	8003fd0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000bea:	bd08      	pop	{r3, pc}
 8000bec:	58000400 	.word	0x58000400

08000bf0 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8000bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8000bf2:	f001 fc69 	bl	80024c8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000bf6:	bd08      	pop	{r3, pc}

08000bf8 <PWR_ExitStopMode>:
{
 8000bf8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000bfa:	f001 fc65 	bl	80024c8 <HAL_ResumeTick>
  vcom_Resume();
 8000bfe:	f000 fb77 	bl	80012f0 <vcom_Resume>
}
 8000c02:	bd08      	pop	{r3, pc}

08000c04 <PWR_EnterSleepMode>:
{
 8000c04:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8000c06:	f001 fc57 	bl	80024b8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f003 f97b 	bl	8003f08 <HAL_PWR_EnterSLEEPMode>
}
 8000c12:	bd08      	pop	{r3, pc}

08000c14 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	4770      	bx	lr

08000c16 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <NMI_Handler>

08000c18 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <HardFault_Handler>

08000c1a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <MemManage_Handler>

08000c1c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <BusFault_Handler>

08000c1e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <UsageFault_Handler>

08000c20 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c20:	4770      	bx	lr

08000c22 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	4770      	bx	lr

08000c28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f003 f858 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c30:	bd08      	pop	{r3, pc}

08000c32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c32:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c34:	2002      	movs	r0, #2
 8000c36:	f003 f853 	bl	8003ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c3a:	bd08      	pop	{r3, pc}

08000c3c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <DMA1_Channel5_IRQHandler+0xc>)
 8000c40:	f002 fb40 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c44:	bd08      	pop	{r3, pc}
 8000c46:	bf00      	nop
 8000c48:	20000a38 	.word	0x20000a38

08000c4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c4e:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USART2_IRQHandler+0xc>)
 8000c50:	f004 fba2 	bl	8005398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c54:	bd08      	pop	{r3, pc}
 8000c56:	bf00      	nop
 8000c58:	20000a98 	.word	0x20000a98

08000c5c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX Occupied Interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8000c5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8000c5e:	4802      	ldr	r0, [pc, #8]	; (8000c68 <IPCC_C1_RX_IRQHandler+0xc>)
 8000c60:	f003 f878 	bl	8003d54 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8000c64:	bd08      	pop	{r3, pc}
 8000c66:	bf00      	nop
 8000c68:	200009c4 	.word	0x200009c4

08000c6c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX Free Interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8000c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8000c6e:	4802      	ldr	r0, [pc, #8]	; (8000c78 <IPCC_C1_TX_IRQHandler+0xc>)
 8000c70:	f003 f846 	bl	8003d00 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8000c74:	bd08      	pop	{r3, pc}
 8000c76:	bf00      	nop
 8000c78:	200009c4 	.word	0x200009c4

08000c7c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000c7c:	b40c      	push	{r2, r3}
 8000c7e:	b500      	push	{lr}
 8000c80:	b083      	sub	sp, #12
 8000c82:	ab04      	add	r3, sp, #16
 8000c84:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000c88:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000c8a:	f006 f93f 	bl	8006f0c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000c8e:	b003      	add	sp, #12
 8000c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c94:	b002      	add	sp, #8
 8000c96:	4770      	bx	lr

08000c98 <TimestampNow>:
{
 8000c98:	b530      	push	{r4, r5, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000ca0:	a802      	add	r0, sp, #8
 8000ca2:	f005 ff23 	bl	8006aec <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000ca6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	9b02      	ldr	r3, [sp, #8]
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <TimestampNow+0x2c>)
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f7ff ffe2 	bl	8000c7c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f7ff fa5d 	bl	8000178 <strlen>
 8000cbe:	8028      	strh	r0, [r5, #0]
}
 8000cc0:	b005      	add	sp, #20
 8000cc2:	bd30      	pop	{r4, r5, pc}
 8000cc4:	08007148 	.word	0x08007148

08000cc8 <MBMUXIF_Init>:
{
 8000cc8:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_H, "\r\nCM4: System Initialization started \r\n");
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MBMUXIF_Init+0xb4>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f005 fc9d 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_SystemInit();
 8000cd6:	f001 f8f9 	bl	8001ecc <MBMUXIF_SystemInit>
  if (init_status < 0)
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	db42      	blt.n	8000d64 <MBMUXIF_Init+0x9c>
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f003 f940 	bl	8003f64 <HAL_PWREx_ReleaseCore>
  MBMUXIF_SetCpusSynchroFlag(CPUS_BOOT_SYNC_ALLOW_CPU2_TO_START);
 8000ce4:	f245 5055 	movw	r0, #21845	; 0x5555
 8000ce8:	f001 f8e8 	bl	8001ebc <MBMUXIF_SetCpusSynchroFlag>
  APP_LOG(TS_ON, VLEVEL_H, "CM4: System Initialization done: Wait for CM0PLUS \r\n");
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MBMUXIF_Init+0xb8>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f005 fc8c 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  MBMUXIF_WaitCm0MbmuxIsInitialized();
 8000cf8:	f001 f99e 	bl	8002038 <MBMUXIF_WaitCm0MbmuxIsInitialized>
  APP_LOG(TS_ON, VLEVEL_H, "CM0PLUS: System Initialization started \r\n");
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MBMUXIF_Init+0xbc>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2100      	movs	r1, #0
 8000d02:	2003      	movs	r0, #3
 8000d04:	f005 fc84 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_supported_features_list = MBMUXIF_SystemSendCm0plusInfoListReq();
 8000d08:	f001 f9d9 	bl	80020be <MBMUXIF_SystemSendCm0plusInfoListReq>
  MBMUX_SetCm0plusFeatureListPtr(p_cm0plus_supported_features_list);
 8000d0c:	f000 ffaa 	bl	8001c64 <MBMUX_SetCm0plusFeatureListPtr>
  APP_LOG(TS_ON, VLEVEL_H, "System Initialization CM4-CM0PLUS completed \r\n");
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MBMUXIF_Init+0xc0>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	2100      	movs	r1, #0
 8000d16:	2003      	movs	r0, #3
 8000d18:	f005 fc7a 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_SystemPrio_Add(FEAT_INFO_SYSTEM_NOTIF_PRIO_A_ID);
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f001 fa11 	bl	8002144 <MBMUXIF_SystemPrio_Add>
  if (init_status < 0)
 8000d22:	2800      	cmp	r0, #0
 8000d24:	db21      	blt.n	8000d6a <MBMUXIF_Init+0xa2>
  MBMUXIF_SetCpusSynchroFlag(CPUS_BOOT_SYNC_RTC_REGISTERED);
 8000d26:	f649 1099 	movw	r0, #39321	; 0x9999
 8000d2a:	f001 f8c7 	bl	8001ebc <MBMUXIF_SetCpusSynchroFlag>
  APP_LOG(TS_ON, VLEVEL_H, "System_Priority_A Registration for RTC Alarm handling completed \r\n");
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MBMUXIF_Init+0xc4>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	2100      	movs	r1, #0
 8000d34:	2003      	movs	r0, #3
 8000d36:	f005 fc6b 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_TraceInit();
 8000d3a:	f001 fa49 	bl	80021d0 <MBMUXIF_TraceInit>
  if (init_status < 0)
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	db16      	blt.n	8000d70 <MBMUXIF_Init+0xa8>
  APP_LOG(TS_ON, VLEVEL_H, "Trace registration CM4-CM0PLUS completed \r\n");
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MBMUXIF_Init+0xc8>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	2100      	movs	r1, #0
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f005 fc61 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_LoraInit();
 8000d4e:	f001 f835 	bl	8001dbc <MBMUXIF_LoraInit>
  if (init_status < 0)
 8000d52:	2800      	cmp	r0, #0
 8000d54:	db0f      	blt.n	8000d76 <MBMUXIF_Init+0xae>
  APP_LOG(TS_ON, VLEVEL_H, "Radio registration CM4-CM0PLUS completed \r\n");
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MBMUXIF_Init+0xcc>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f005 fc57 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
}
 8000d62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d64:	f7ff fee2 	bl	8000b2c <Error_Handler>
 8000d68:	e7b9      	b.n	8000cde <MBMUXIF_Init+0x16>
    Error_Handler();
 8000d6a:	f7ff fedf 	bl	8000b2c <Error_Handler>
 8000d6e:	e7da      	b.n	8000d26 <MBMUXIF_Init+0x5e>
    Error_Handler();
 8000d70:	f7ff fedc 	bl	8000b2c <Error_Handler>
 8000d74:	e7e5      	b.n	8000d42 <MBMUXIF_Init+0x7a>
    Error_Handler();
 8000d76:	f7ff fed9 	bl	8000b2c <Error_Handler>
 8000d7a:	e7ec      	b.n	8000d56 <MBMUXIF_Init+0x8e>
 8000d7c:	08007154 	.word	0x08007154
 8000d80:	0800717c 	.word	0x0800717c
 8000d84:	080071b4 	.word	0x080071b4
 8000d88:	080071e0 	.word	0x080071e0
 8000d8c:	08007210 	.word	0x08007210
 8000d90:	08007254 	.word	0x08007254
 8000d94:	08007280 	.word	0x08007280

08000d98 <SystemApp_Init>:
{
 8000d98:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d9e:	6893      	ldr	r3, [r2, #8]
 8000da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000da4:	6093      	str	r3, [r2, #8]
  DBG_ProbesInit();
 8000da6:	f7ff fd01 	bl	80007ac <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8000daa:	f005 fbb1 	bl	8006510 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000dae:	480b      	ldr	r0, [pc, #44]	; (8000ddc <SystemApp_Init+0x44>)
 8000db0:	f005 fbd4 	bl	800655c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f005 fbd7 	bl	8006568 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8000dba:	f7ff fd81 	bl	80008c0 <SYS_InitMeasurement>
  EnvSensors_Init();
 8000dbe:	f000 f893 	bl	8000ee8 <EnvSensors_Init>
  UTIL_LPM_Init();
 8000dc2:	f005 fd09 	bl	80067d8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f005 fd25 	bl	8006818 <UTIL_LPM_SetOffMode>
  MBMUXIF_Init();
 8000dce:	f7ff ff7b 	bl	8000cc8 <MBMUXIF_Init>
  UTIL_TIMER_Init();
 8000dd2:	f005 feab 	bl	8006b2c <UTIL_TIMER_Init>
  DBG_Disable();
 8000dd6:	f7ff fcc9 	bl	800076c <DBG_Disable>
}
 8000dda:	bd08      	pop	{r3, pc}
 8000ddc:	08000c99 	.word	0x08000c99

08000de0 <Process_Sys_Notif>:
{
 8000de0:	b510      	push	{r4, lr}
  notif_ack_id = ComObj->MsgId;
 8000de2:	6803      	ldr	r3, [r0, #0]
  switch (notif_ack_id)
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d009      	beq.n	8000dfc <Process_Sys_Notif+0x1c>
  APP_LOG(TS_ON, VLEVEL_H, "CM4>(System)\r\n");
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <Process_Sys_Notif+0x34>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	2100      	movs	r1, #0
 8000dee:	2003      	movs	r0, #3
 8000df0:	f005 fc0e 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  MBMUXIF_SystemSendAck(FEAT_INFO_SYSTEM_ID);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f001 f953 	bl	80020a0 <MBMUXIF_SystemSendAck>
}
 8000dfa:	bd10      	pop	{r4, pc}
 8000dfc:	4604      	mov	r4, r0
      APP_LOG(TS_ON, VLEVEL_H, "CM4<(System)\r\n");
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <Process_Sys_Notif+0x38>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	2100      	movs	r1, #0
 8000e04:	2003      	movs	r0, #3
 8000e06:	f005 fc03 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
      ComObj->ParamCnt = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal = 0; /* dummy value  */
 8000e0e:	6163      	str	r3, [r4, #20]
      break;
 8000e10:	e7ea      	b.n	8000de8 <Process_Sys_Notif+0x8>
 8000e12:	bf00      	nop
 8000e14:	080072bc 	.word	0x080072bc
 8000e18:	080072ac 	.word	0x080072ac

08000e1c <UTIL_SEQ_EvtIdle>:
{
 8000e1c:	b508      	push	{r3, lr}
  UTIL_SEQ_Run(~TaskId_bm);
 8000e1e:	43c0      	mvns	r0, r0
 8000e20:	f005 fd88 	bl	8006934 <UTIL_SEQ_Run>
}
 8000e24:	bd08      	pop	{r3, pc}

08000e26 <UTIL_SEQ_Idle>:
{
 8000e26:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8000e28:	f005 fd0c 	bl	8006844 <UTIL_LPM_EnterLowPower>
}
 8000e2c:	bd08      	pop	{r3, pc}
	...

08000e30 <GetBatteryLevel>:
{
 8000e30:	b510      	push	{r4, lr}
 8000e32:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8000e34:	f7ff fd4c 	bl	80008d0 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8000e38:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d80d      	bhi.n	8000e5c <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 8000e40:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8000e44:	d315      	bcc.n	8000e72 <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8000e46:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8000e4a:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8000e4e:	0044      	lsls	r4, r0, #1
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <GetBatteryLevel+0x48>)
 8000e52:	fba0 3404 	umull	r3, r4, r0, r4
 8000e56:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8000e5a:	e000      	b.n	8000e5e <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 8000e5c:	24fe      	movs	r4, #254	; 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8000e5e:	9400      	str	r4, [sp, #0]
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <GetBatteryLevel+0x4c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	2100      	movs	r1, #0
 8000e66:	2002      	movs	r0, #2
 8000e68:	f005 fbd2 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
}
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 8000e72:	2400      	movs	r4, #0
 8000e74:	e7f3      	b.n	8000e5e <GetBatteryLevel+0x2e>
 8000e76:	bf00      	nop
 8000e78:	1b4e81b5 	.word	0x1b4e81b5
 8000e7c:	080072cc 	.word	0x080072cc

08000e80 <GetTemperatureLevel>:
{
 8000e80:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8000e82:	f7ff fd47 	bl	8000914 <SYS_GetTemperatureLevel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	db02      	blt.n	8000e92 <GetTemperatureLevel+0x12>
}
 8000e8c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8000e90:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8000e92:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 8000e96:	e7f9      	b.n	8000e8c <GetTemperatureLevel+0xc>

08000e98 <UTIL_ADV_TRACE_PreSendHook>:
{
 8000e98:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f005 fca5 	bl	80067ec <UTIL_LPM_SetStopMode>
}
 8000ea2:	bd08      	pop	{r3, pc}

08000ea4 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000ea4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f005 fc9f 	bl	80067ec <UTIL_LPM_SetStopMode>
}
 8000eae:	bd08      	pop	{r3, pc}

08000eb0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000eb4:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8000eb6:	f000 f835 	bl	8000f24 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8000eba:	bd08      	pop	{r3, pc}

08000ebc <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <EnvSensors_Read+0x18>)
 8000ebe:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <EnvSensors_Read+0x1c>)
 8000ec2:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <EnvSensors_Read+0x20>)
 8000ec6:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <EnvSensors_Read+0x24>)
 8000eca:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <EnvSensors_Read+0x28>)
 8000ece:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	4770      	bx	lr
 8000ed4:	42480000 	.word	0x42480000
 8000ed8:	41900000 	.word	0x41900000
 8000edc:	447a0000 	.word	0x447a0000
 8000ee0:	003e090d 	.word	0x003e090d
 8000ee4:	000503ab 	.word	0x000503ab

08000ee8 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8000ee8:	2000      	movs	r0, #0
 8000eea:	4770      	bx	lr

08000eec <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <TIMER_IF_SetTimerContext+0xc>)
 8000eee:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8000ef0:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8000ef2:	4b02      	ldr	r3, [pc, #8]	; (8000efc <TIMER_IF_SetTimerContext+0x10>)
 8000ef4:	6018      	str	r0, [r3, #0]
}
 8000ef6:	4770      	bx	lr
 8000ef8:	40002800 	.word	0x40002800
 8000efc:	20000088 	.word	0x20000088

08000f00 <TIMER_IF_GetTimerContext>:
}
 8000f00:	4b01      	ldr	r3, [pc, #4]	; (8000f08 <TIMER_IF_GetTimerContext+0x8>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000088 	.word	0x20000088

08000f0c <TIMER_IF_GetTimerElapsedTime>:
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <TIMER_IF_GetTimerElapsedTime+0x10>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8000f10:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000f12:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <TIMER_IF_GetTimerElapsedTime+0x14>)
 8000f14:	6810      	ldr	r0, [r2, #0]
}
 8000f16:	1a18      	subs	r0, r3, r0
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40002800 	.word	0x40002800
 8000f20:	20000088 	.word	0x20000088

08000f24 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <TIMER_IF_GetTimerValue+0x14>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b11b      	cbz	r3, 8000f32 <TIMER_IF_GetTimerValue+0xe>
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <TIMER_IF_GetTimerValue+0x18>)
 8000f2c:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8000f2e:	43c0      	mvns	r0, r0
 8000f30:	4770      	bx	lr
  uint32_t ret = 0;
 8000f32:	2000      	movs	r0, #0
}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000084 	.word	0x20000084
 8000f3c:	40002800 	.word	0x40002800

08000f40 <TIMER_IF_GetMinimumTimeout>:
}
 8000f40:	2003      	movs	r0, #3
 8000f42:	4770      	bx	lr

08000f44 <TIMER_IF_Convert_ms2Tick>:
{
 8000f44:	b508      	push	{r3, lr}
 8000f46:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	0280      	lsls	r0, r0, #10
 8000f50:	0d89      	lsrs	r1, r1, #22
 8000f52:	f7ff fa89 	bl	8000468 <__aeabi_uldivmod>
}
 8000f56:	bd08      	pop	{r3, pc}

08000f58 <TIMER_IF_Convert_Tick2ms>:
{
 8000f58:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000f5a:	0142      	lsls	r2, r0, #5
 8000f5c:	0ec3      	lsrs	r3, r0, #27
 8000f5e:	1a12      	subs	r2, r2, r0
 8000f60:	f163 0300 	sbc.w	r3, r3, #0
 8000f64:	0099      	lsls	r1, r3, #2
 8000f66:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000f6a:	0094      	lsls	r4, r2, #2
 8000f6c:	1822      	adds	r2, r4, r0
 8000f6e:	f141 0300 	adc.w	r3, r1, #0
 8000f72:	00d8      	lsls	r0, r3, #3
 8000f74:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8000f78:	00d1      	lsls	r1, r2, #3
 8000f7a:	0a8a      	lsrs	r2, r1, #10
}
 8000f7c:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 8000f80:	bc10      	pop	{r4}
 8000f82:	4770      	bx	lr

08000f84 <TIMER_IF_Init>:
{
 8000f84:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <TIMER_IF_Init+0x20>)
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <TIMER_IF_Init+0x24>)
 8000f8a:	6003      	str	r3, [r0, #0]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f90:	f003 ffd4 	bl	8004f3c <HAL_RTC_DeactivateAlarm>
  TIMER_IF_SetTimerContext();
 8000f94:	f7ff ffaa 	bl	8000eec <TIMER_IF_SetTimerContext>
  RTC_Initialized = true;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <TIMER_IF_Init+0x28>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	bd08      	pop	{r3, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000a00 	.word	0x20000a00
 8000fa8:	40002800 	.word	0x40002800
 8000fac:	20000084 	.word	0x20000084

08000fb0 <TIMER_IF_StopTimer>:
{
 8000fb0:	b508      	push	{r3, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <TIMER_IF_StopTimer+0x18>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <TIMER_IF_StopTimer+0x1c>)
 8000fbe:	f003 ffbd 	bl	8004f3c <HAL_RTC_DeactivateAlarm>
}
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	bd08      	pop	{r3, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40002800 	.word	0x40002800
 8000fcc:	20000a00 	.word	0x20000a00

08000fd0 <TIMER_IF_StartTimer>:
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8000fd6:	222c      	movs	r2, #44	; 0x2c
 8000fd8:	2100      	movs	r1, #0
 8000fda:	a801      	add	r0, sp, #4
 8000fdc:	f006 f880 	bl	80070e0 <memset>
  TIMER_IF_StopTimer();
 8000fe0:	f7ff ffe6 	bl	8000fb0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <TIMER_IF_StartTimer+0x48>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000fea:	2300      	movs	r3, #0
 8000fec:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000fee:	43e4      	mvns	r4, r4
 8000ff0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ff2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ff8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffe:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001000:	2201      	movs	r2, #1
 8001002:	a901      	add	r1, sp, #4
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <TIMER_IF_StartTimer+0x4c>)
 8001006:	f003 ffe5 	bl	8004fd4 <HAL_RTC_SetAlarm_IT>
 800100a:	b910      	cbnz	r0, 8001012 <TIMER_IF_StartTimer+0x42>
}
 800100c:	2000      	movs	r0, #0
 800100e:	b00c      	add	sp, #48	; 0x30
 8001010:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001012:	f7ff fd8b 	bl	8000b2c <Error_Handler>
 8001016:	e7f9      	b.n	800100c <TIMER_IF_StartTimer+0x3c>
 8001018:	20000088 	.word	0x20000088
 800101c:	20000a00 	.word	0x20000a00

08001020 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001020:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001022:	2102      	movs	r1, #2
 8001024:	4801      	ldr	r0, [pc, #4]	; (800102c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001026:	f004 f898 	bl	800515a <HAL_RTCEx_BKUPRead>
}
 800102a:	bd08      	pop	{r3, pc}
 800102c:	20000a00 	.word	0x20000a00

08001030 <TIMER_IF_GetTime>:
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4605      	mov	r5, r0
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <TIMER_IF_GetTime+0x2c>)
 8001036:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001038:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800103a:	f7ff fff1 	bl	8001020 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800103e:	2200      	movs	r2, #0
 8001040:	1912      	adds	r2, r2, r4
 8001042:	f140 0300 	adc.w	r3, r0, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001046:	0a94      	lsrs	r4, r2, #10
 8001048:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800104c:	f3c2 0009 	ubfx	r0, r2, #0, #10
 8001050:	f7ff ff82 	bl	8000f58 <TIMER_IF_Convert_Tick2ms>
 8001054:	8028      	strh	r0, [r5, #0]
}
 8001056:	4620      	mov	r0, r4
 8001058:	bd38      	pop	{r3, r4, r5, pc}
 800105a:	bf00      	nop
 800105c:	40002800 	.word	0x40002800

08001060 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001060:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001062:	2100      	movs	r1, #0
 8001064:	4801      	ldr	r0, [pc, #4]	; (800106c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001066:	f004 f878 	bl	800515a <HAL_RTCEx_BKUPRead>
}
 800106a:	bd08      	pop	{r3, pc}
 800106c:	20000a00 	.word	0x20000a00

08001070 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001070:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001072:	2101      	movs	r1, #1
 8001074:	4801      	ldr	r0, [pc, #4]	; (800107c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001076:	f004 f870 	bl	800515a <HAL_RTCEx_BKUPRead>
}
 800107a:	bd08      	pop	{r3, pc}
 800107c:	20000a00 	.word	0x20000a00

08001080 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001080:	b508      	push	{r3, lr}
 8001082:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001084:	2100      	movs	r1, #0
 8001086:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001088:	f004 f860 	bl	800514c <HAL_RTCEx_BKUPWrite>
}
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop
 8001090:	20000a00 	.word	0x20000a00

08001094 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001094:	b508      	push	{r3, lr}
 8001096:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001098:	2101      	movs	r1, #1
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 800109c:	f004 f856 	bl	800514c <HAL_RTCEx_BKUPWrite>
}
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop
 80010a4:	20000a00 	.word	0x20000a00

080010a8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010a8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <MX_USART2_UART_Init+0x60>)
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_USART2_UART_Init+0x64>)
 80010ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80010b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010b4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	2300      	movs	r3, #0
 80010b8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010bc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010be:	220c      	movs	r2, #12
 80010c0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010cc:	f004 ffc5 	bl	800605a <HAL_UART_Init>
 80010d0:	b970      	cbnz	r0, 80010f0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_USART2_UART_Init+0x60>)
 80010d6:	f005 f972 	bl	80063be <HAL_UARTEx_SetTxFifoThreshold>
 80010da:	b960      	cbnz	r0, 80010f6 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <MX_USART2_UART_Init+0x60>)
 80010e0:	f005 f992 	bl	8006408 <HAL_UARTEx_SetRxFifoThreshold>
 80010e4:	b950      	cbnz	r0, 80010fc <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80010e6:	4808      	ldr	r0, [pc, #32]	; (8001108 <MX_USART2_UART_Init+0x60>)
 80010e8:	f005 f945 	bl	8006376 <HAL_UARTEx_EnableFifoMode>
 80010ec:	b948      	cbnz	r0, 8001102 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010f0:	f7ff fd1c 	bl	8000b2c <Error_Handler>
 80010f4:	e7ed      	b.n	80010d2 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80010f6:	f7ff fd19 	bl	8000b2c <Error_Handler>
 80010fa:	e7ef      	b.n	80010dc <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80010fc:	f7ff fd16 	bl	8000b2c <Error_Handler>
 8001100:	e7f1      	b.n	80010e6 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001102:	f7ff fd13 	bl	8000b2c <Error_Handler>
}
 8001106:	e7f2      	b.n	80010ee <MX_USART2_UART_Init+0x46>
 8001108:	20000a98 	.word	0x20000a98
 800110c:	40004400 	.word	0x40004400

08001110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001110:	b530      	push	{r4, r5, lr}
 8001112:	b097      	sub	sp, #92	; 0x5c
 8001114:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	2100      	movs	r1, #0
 8001118:	9111      	str	r1, [sp, #68]	; 0x44
 800111a:	9112      	str	r1, [sp, #72]	; 0x48
 800111c:	9113      	str	r1, [sp, #76]	; 0x4c
 800111e:	9114      	str	r1, [sp, #80]	; 0x50
 8001120:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001122:	2238      	movs	r2, #56	; 0x38
 8001124:	a803      	add	r0, sp, #12
 8001126:	f005 ffdb 	bl	80070e0 <memset>
  if(uartHandle->Instance==USART2)
 800112a:	6822      	ldr	r2, [r4, #0]
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_UART_MspInit+0xd4>)
 800112e:	429a      	cmp	r2, r3
 8001130:	d001      	beq.n	8001136 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001132:	b017      	add	sp, #92	; 0x5c
 8001134:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001136:	2302      	movs	r3, #2
 8001138:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_UART_MspInit+0xd8>)
 800113c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113e:	a803      	add	r0, sp, #12
 8001140:	f003 fdba 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	2800      	cmp	r0, #0
 8001146:	d144      	bne.n	80011d2 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800114e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001152:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001156:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800115a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800115c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800115e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800116e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001170:	230c      	movs	r3, #12
 8001172:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2500      	movs	r5, #0
 800117a:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001180:	2307      	movs	r3, #7
 8001182:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	a911      	add	r1, sp, #68	; 0x44
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f002 fc67 	bl	8003a5c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800118e:	4817      	ldr	r0, [pc, #92]	; (80011ec <HAL_UART_MspInit+0xdc>)
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0xe0>)
 8001192:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001194:	2314      	movs	r3, #20
 8001196:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001198:	2310      	movs	r3, #16
 800119a:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011a6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011aa:	f001 fefd 	bl	8002fa8 <HAL_DMA_Init>
 80011ae:	b998      	cbnz	r0, 80011d8 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80011b0:	2110      	movs	r1, #16
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <HAL_UART_MspInit+0xdc>)
 80011b4:	f002 f8fa 	bl	80033ac <HAL_DMA_ConfigChannelAttributes>
 80011b8:	b988      	cbnz	r0, 80011de <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_UART_MspInit+0xdc>)
 80011bc:	67a3      	str	r3, [r4, #120]	; 0x78
 80011be:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2102      	movs	r1, #2
 80011c4:	2025      	movs	r0, #37	; 0x25
 80011c6:	f001 fe33 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ca:	2025      	movs	r0, #37	; 0x25
 80011cc:	f001 fe64 	bl	8002e98 <HAL_NVIC_EnableIRQ>
}
 80011d0:	e7af      	b.n	8001132 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80011d2:	f7ff fcab 	bl	8000b2c <Error_Handler>
 80011d6:	e7b7      	b.n	8001148 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80011d8:	f7ff fca8 	bl	8000b2c <Error_Handler>
 80011dc:	e7e8      	b.n	80011b0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80011de:	f7ff fca5 	bl	8000b2c <Error_Handler>
 80011e2:	e7ea      	b.n	80011ba <HAL_UART_MspInit+0xaa>
 80011e4:	40004400 	.word	0x40004400
 80011e8:	000c0004 	.word	0x000c0004
 80011ec:	20000a38 	.word	0x20000a38
 80011f0:	40020058 	.word	0x40020058

080011f4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_UART_MspDeInit+0x34>)
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d000      	beq.n	80011fe <HAL_UART_MspDeInit+0xa>
 80011fc:	4770      	bx	lr
{
 80011fe:	b510      	push	{r4, lr}
 8001200:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001206:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001208:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800120c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800120e:	210c      	movs	r1, #12
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f002 fcda 	bl	8003bcc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001218:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800121a:	f001 ff37 	bl	800308c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800121e:	2025      	movs	r0, #37	; 0x25
 8001220:	f001 fe48 	bl	8002eb4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001224:	bd10      	pop	{r4, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400

0800122c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800122c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <vcom_Init+0x20>)
 8001230:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001232:	f7ff fbc1 	bl	80009b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001236:	f7ff ff37 	bl	80010a8 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <vcom_Init+0x24>)
 800123c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001248:	2000      	movs	r0, #0
 800124a:	bd08      	pop	{r3, pc}
 800124c:	20000090 	.word	0x20000090
 8001250:	58000800 	.word	0x58000800

08001254 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001254:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800125c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001260:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001264:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <vcom_DeInit+0x28>)
 800126c:	f7ff ffc2 	bl	80011f4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001270:	200f      	movs	r0, #15
 8001272:	f001 fe1f 	bl	8002eb4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001276:	2000      	movs	r0, #0
 8001278:	bd08      	pop	{r3, pc}
 800127a:	bf00      	nop
 800127c:	20000a98 	.word	0x20000a98

08001280 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001280:	b508      	push	{r3, lr}
 8001282:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001284:	4601      	mov	r1, r0
 8001286:	4802      	ldr	r0, [pc, #8]	; (8001290 <vcom_Trace_DMA+0x10>)
 8001288:	f003 ffb2 	bl	80051f0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800128c:	2000      	movs	r0, #0
 800128e:	bd08      	pop	{r3, pc}
 8001290:	20000a98 	.word	0x20000a98

08001294 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001294:	b510      	push	{r4, lr}
 8001296:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <vcom_ReceiveInit+0x50>)
 800129a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800129c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012a0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80012a2:	ab02      	add	r3, sp, #8
 80012a4:	e913 0006 	ldmdb	r3, {r1, r2}
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <vcom_ReceiveInit+0x54>)
 80012aa:	f005 f80c 	bl	80062c6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <vcom_ReceiveInit+0x54>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	69da      	ldr	r2, [r3, #28]
 80012b4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80012b8:	d1f9      	bne.n	80012ae <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80012c0:	d0fb      	beq.n	80012ba <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012c8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80012ca:	4c07      	ldr	r4, [pc, #28]	; (80012e8 <vcom_ReceiveInit+0x54>)
 80012cc:	4620      	mov	r0, r4
 80012ce:	f005 f83b 	bl	8006348 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80012d2:	2201      	movs	r2, #1
 80012d4:	4905      	ldr	r1, [pc, #20]	; (80012ec <vcom_ReceiveInit+0x58>)
 80012d6:	4620      	mov	r0, r4
 80012d8:	f004 ff86 	bl	80061e8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80012dc:	2000      	movs	r0, #0
 80012de:	b002      	add	sp, #8
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop
 80012e4:	2000008c 	.word	0x2000008c
 80012e8:	20000a98 	.word	0x20000a98
 80012ec:	20000b28 	.word	0x20000b28

080012f0 <vcom_Resume>:

void vcom_Resume(void)
{
 80012f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <vcom_Resume+0x20>)
 80012f4:	f004 feb1 	bl	800605a <HAL_UART_Init>
 80012f8:	b920      	cbnz	r0, 8001304 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <vcom_Resume+0x24>)
 80012fc:	f001 fe54 	bl	8002fa8 <HAL_DMA_Init>
 8001300:	b918      	cbnz	r0, 800130a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001302:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001304:	f7ff fc12 	bl	8000b2c <Error_Handler>
 8001308:	e7f7      	b.n	80012fa <vcom_Resume+0xa>
    Error_Handler();
 800130a:	f7ff fc0f 	bl	8000b2c <Error_Handler>
}
 800130e:	e7f8      	b.n	8001302 <vcom_Resume+0x12>
 8001310:	20000a98 	.word	0x20000a98
 8001314:	20000a38 	.word	0x20000a38

08001318 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001318:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800131a:	4b02      	ldr	r3, [pc, #8]	; (8001324 <HAL_UART_TxCpltCallback+0xc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2000      	movs	r0, #0
 8001320:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001322:	bd08      	pop	{r3, pc}
 8001324:	20000090 	.word	0x20000090

08001328 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001328:	b510      	push	{r4, lr}
 800132a:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_UART_RxCpltCallback+0x24>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b12b      	cbz	r3, 800133e <HAL_UART_RxCpltCallback+0x16>
 8001332:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001336:	b912      	cbnz	r2, 800133e <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001338:	2101      	movs	r1, #1
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_UART_RxCpltCallback+0x28>)
 800133c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_UART_RxCpltCallback+0x28>)
 8001342:	4620      	mov	r0, r4
 8001344:	f004 ff50 	bl	80061e8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001348:	bd10      	pop	{r4, pc}
 800134a:	bf00      	nop
 800134c:	2000008c 	.word	0x2000008c
 8001350:	20000b28 	.word	0x20000b28

08001354 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001354:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001356:	f7ff fd1f 	bl	8000d98 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800135a:	f000 f9b3 	bl	80016c4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800135e:	bd08      	pop	{r3, pc}

08001360 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001360:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001362:	f04f 30ff 	mov.w	r0, #4294967295
 8001366:	f005 fae5 	bl	8006934 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800136a:	bd08      	pop	{r3, pc}

0800136c <OnMacProcessNotify>:
static void OnMacProcessNotify(void)
{
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
}
 800136c:	4770      	bx	lr
	...

08001370 <OnTxTimerEvent>:
{
 8001370:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MbLoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001372:	2100      	movs	r1, #0
 8001374:	2008      	movs	r0, #8
 8001376:	f005 fa9b 	bl	80068b0 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 800137a:	4802      	ldr	r0, [pc, #8]	; (8001384 <OnTxTimerEvent+0x14>)
 800137c:	f005 fc88 	bl	8006c90 <UTIL_TIMER_Start>
}
 8001380:	bd08      	pop	{r3, pc}
 8001382:	bf00      	nop
 8001384:	200001d0 	.word	0x200001d0

08001388 <OnTxData>:
  if ((params != NULL))
 8001388:	2800      	cmp	r0, #0
 800138a:	d03f      	beq.n	800140c <OnTxData+0x84>
{
 800138c:	b510      	push	{r4, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8001392:	7803      	ldrb	r3, [r0, #0]
 8001394:	b90b      	cbnz	r3, 800139a <OnTxData+0x12>
}
 8001396:	b004      	add	sp, #16
 8001398:	bd10      	pop	{r4, pc}
      BSP_LED_On(LED_GREEN) ;
 800139a:	2001      	movs	r0, #1
 800139c:	f000 ffba 	bl	8002314 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 80013a0:	481b      	ldr	r0, [pc, #108]	; (8001410 <OnTxData+0x88>)
 80013a2:	f005 fc75 	bl	8006c90 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <OnTxData+0x8c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	4611      	mov	r1, r2
 80013ac:	2002      	movs	r0, #2
 80013ae:	f005 f92f 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80013b2:	7b23      	ldrb	r3, [r4, #12]
 80013b4:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80013b8:	f994 1014 	ldrsb.w	r1, [r4, #20]
 80013bc:	9103      	str	r1, [sp, #12]
 80013be:	9202      	str	r2, [sp, #8]
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	68a3      	ldr	r3, [r4, #8]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <OnTxData+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	4611      	mov	r1, r2
 80013cc:	2003      	movs	r0, #3
 80013ce:	f005 f91f 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <OnTxData+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	4611      	mov	r1, r2
 80013d8:	2003      	movs	r0, #3
 80013da:	f005 f919 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80013de:	78a3      	ldrb	r3, [r4, #2]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10c      	bne.n	80013fe <OnTxData+0x76>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80013e4:	78e3      	ldrb	r3, [r4, #3]
 80013e6:	b143      	cbz	r3, 80013fa <OnTxData+0x72>
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <OnTxData+0x98>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <OnTxData+0x9c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	4611      	mov	r1, r2
 80013f2:	2003      	movs	r0, #3
 80013f4:	f005 f90c 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 80013f8:	e7cd      	b.n	8001396 <OnTxData+0xe>
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <OnTxData+0xa0>)
 80013fc:	e7f5      	b.n	80013ea <OnTxData+0x62>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <OnTxData+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	4611      	mov	r1, r2
 8001404:	2003      	movs	r0, #3
 8001406:	f005 f903 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
}
 800140a:	e7c4      	b.n	8001396 <OnTxData+0xe>
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200001b8 	.word	0x200001b8
 8001414:	08007334 	.word	0x08007334
 8001418:	08007368 	.word	0x08007368
 800141c:	0800739c 	.word	0x0800739c
 8001420:	08007330 	.word	0x08007330
 8001424:	080073ac 	.word	0x080073ac
 8001428:	08007328 	.word	0x08007328
 800142c:	080073c0 	.word	0x080073c0

08001430 <OnRxData>:
{
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	460c      	mov	r4, r1
  if ((appData != NULL) || (params != NULL))
 8001436:	4605      	mov	r5, r0
 8001438:	b370      	cbz	r0, 8001498 <OnRxData+0x68>
    BSP_LED_On(LED_BLUE) ;
 800143a:	2000      	movs	r0, #0
 800143c:	f000 ff6a 	bl	8002314 <BSP_LED_On>
    UTIL_TIMER_Start(&RxLedTimer);
 8001440:	4830      	ldr	r0, [pc, #192]	; (8001504 <OnRxData+0xd4>)
 8001442:	f005 fc25 	bl	8006c90 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <OnRxData+0xd8>)
 8001448:	2200      	movs	r2, #0
 800144a:	4611      	mov	r1, r2
 800144c:	2002      	movs	r0, #2
 800144e:	f005 f8df 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8001452:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8001456:	782b      	ldrb	r3, [r5, #0]
 8001458:	f994 1002 	ldrsb.w	r1, [r4, #2]
 800145c:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8001460:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8001464:	9605      	str	r6, [sp, #20]
 8001466:	9004      	str	r0, [sp, #16]
 8001468:	9103      	str	r1, [sp, #12]
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <OnRxData+0xdc>)
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	68a3      	ldr	r3, [r4, #8]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <OnRxData+0xe0>)
 800147a:	2200      	movs	r2, #0
 800147c:	4611      	mov	r1, r2
 800147e:	2003      	movs	r0, #3
 8001480:	f005 f8c6 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8001484:	782b      	ldrb	r3, [r5, #0]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d01d      	beq.n	80014c6 <OnRxData+0x96>
 800148a:	2b03      	cmp	r3, #3
 800148c:	d102      	bne.n	8001494 <OnRxData+0x64>
        if (appData->BufferSize == 1)
 800148e:	786b      	ldrb	r3, [r5, #1]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d004      	beq.n	800149e <OnRxData+0x6e>
}
 8001494:	b006      	add	sp, #24
 8001496:	bd70      	pop	{r4, r5, r6, pc}
  if ((appData != NULL) || (params != NULL))
 8001498:	2900      	cmp	r1, #0
 800149a:	d1ce      	bne.n	800143a <OnRxData+0xa>
  }
 800149c:	e7fa      	b.n	8001494 <OnRxData+0x64>
          switch (appData->Buffer[0])
 800149e:	686b      	ldr	r3, [r5, #4]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d007      	beq.n	80014b6 <OnRxData+0x86>
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d009      	beq.n	80014be <OnRxData+0x8e>
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f2      	bne.n	8001494 <OnRxData+0x64>
              LmHandlerRequestClass(CLASS_A);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 fa74 	bl	800199c <LmHandlerRequestClass>
              break;
 80014b4:	e7ee      	b.n	8001494 <OnRxData+0x64>
              LmHandlerRequestClass(CLASS_B);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fa70 	bl	800199c <LmHandlerRequestClass>
              break;
 80014bc:	e7ea      	b.n	8001494 <OnRxData+0x64>
              LmHandlerRequestClass(CLASS_C);
 80014be:	2002      	movs	r0, #2
 80014c0:	f000 fa6c 	bl	800199c <LmHandlerRequestClass>
              break;
 80014c4:	e7e6      	b.n	8001494 <OnRxData+0x64>
        if (appData->BufferSize == 1)
 80014c6:	786b      	ldrb	r3, [r5, #1]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d1e3      	bne.n	8001494 <OnRxData+0x64>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 80014cc:	686b      	ldr	r3, [r5, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <OnRxData+0xe4>)
 80014d6:	7013      	strb	r3, [r2, #0]
          if (AppLedStateOn == RESET)
 80014d8:	b94b      	cbnz	r3, 80014ee <OnRxData+0xbe>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <OnRxData+0xe8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	4611      	mov	r1, r2
 80014e0:	2003      	movs	r0, #3
 80014e2:	f005 f895 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 80014e6:	2002      	movs	r0, #2
 80014e8:	f000 ff24 	bl	8002334 <BSP_LED_Off>
 80014ec:	e7d2      	b.n	8001494 <OnRxData+0x64>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <OnRxData+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	4611      	mov	r1, r2
 80014f4:	2003      	movs	r0, #3
 80014f6:	f005 f88b 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 80014fa:	2002      	movs	r0, #2
 80014fc:	f000 ff0a 	bl	8002314 <BSP_LED_On>
}
 8001500:	e7c8      	b.n	8001494 <OnRxData+0x64>
 8001502:	bf00      	nop
 8001504:	200001a0 	.word	0x200001a0
 8001508:	080073d0 	.word	0x080073d0
 800150c:	080075c4 	.word	0x080075c4
 8001510:	08007404 	.word	0x08007404
 8001514:	20000186 	.word	0x20000186
 8001518:	0800744c 	.word	0x0800744c
 800151c:	08007458 	.word	0x08007458

08001520 <OnRxTimerLedEvent>:
{
 8001520:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_BLUE) ;
 8001522:	2000      	movs	r0, #0
 8001524:	f000 ff06 	bl	8002334 <BSP_LED_Off>
}
 8001528:	bd08      	pop	{r3, pc}

0800152a <OnTxTimerLedEvent>:
{
 800152a:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN) ;
 800152c:	2001      	movs	r0, #1
 800152e:	f000 ff01 	bl	8002334 <BSP_LED_Off>
}
 8001532:	bd08      	pop	{r3, pc}

08001534 <OnJoinRequest>:
  if (joinParams != NULL)
 8001534:	b340      	cbz	r0, 8001588 <OnJoinRequest+0x54>
{
 8001536:	b510      	push	{r4, lr}
 8001538:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800153a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800153e:	b9e3      	cbnz	r3, 800157a <OnJoinRequest+0x46>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <OnJoinRequest+0x58>)
 8001542:	f005 fb43 	bl	8006bcc <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 8001546:	2002      	movs	r0, #2
 8001548:	f000 fef4 	bl	8002334 <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <OnJoinRequest+0x5c>)
 800154e:	2200      	movs	r2, #0
 8001550:	4611      	mov	r1, r2
 8001552:	2002      	movs	r0, #2
 8001554:	f005 f85c 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001558:	78a3      	ldrb	r3, [r4, #2]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d006      	beq.n	800156c <OnJoinRequest+0x38>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <OnJoinRequest+0x60>)
 8001560:	2200      	movs	r2, #0
 8001562:	4611      	mov	r1, r2
 8001564:	2002      	movs	r0, #2
 8001566:	f005 f853 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 800156a:	e00c      	b.n	8001586 <OnJoinRequest+0x52>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <OnJoinRequest+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	4611      	mov	r1, r2
 8001572:	2002      	movs	r0, #2
 8001574:	f005 f84c 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 8001578:	e005      	b.n	8001586 <OnJoinRequest+0x52>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <OnJoinRequest+0x68>)
 800157c:	2200      	movs	r2, #0
 800157e:	4611      	mov	r1, r2
 8001580:	2002      	movs	r0, #2
 8001582:	f005 f845 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
}
 8001586:	bd10      	pop	{r4, pc}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000188 	.word	0x20000188
 8001590:	08007464 	.word	0x08007464
 8001594:	0800749c 	.word	0x0800749c
 8001598:	0800747c 	.word	0x0800747c
 800159c:	080074bc 	.word	0x080074bc

080015a0 <SendTxData>:
{
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Time_t nextTxIn = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	9303      	str	r3, [sp, #12]
  EnvSensors_Read(&sensor_data);
 80015a8:	a804      	add	r0, sp, #16
 80015aa:	f7ff fc87 	bl	8000ebc <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 80015ae:	f7ff f9b1 	bl	8000914 <SYS_GetTemperatureLevel>
 80015b2:	f340 260f 	sbfx	r6, r0, #8, #16
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 80015b6:	4938      	ldr	r1, [pc, #224]	; (8001698 <SendTxData+0xf8>)
 80015b8:	9804      	ldr	r0, [sp, #16]
 80015ba:	f7fe fde5 	bl	8000188 <__aeabi_fmul>
 80015be:	4937      	ldr	r1, [pc, #220]	; (800169c <SendTxData+0xfc>)
 80015c0:	f7fe fe96 	bl	80002f0 <__aeabi_fdiv>
 80015c4:	f7fe ff30 	bl	8000428 <__aeabi_f2uiz>
 80015c8:	b285      	uxth	r5, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 80015ca:	4c35      	ldr	r4, [pc, #212]	; (80016a0 <SendTxData+0x100>)
 80015cc:	2302      	movs	r3, #2
 80015ce:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80015d0:	4932      	ldr	r1, [pc, #200]	; (800169c <SendTxData+0xfc>)
 80015d2:	9806      	ldr	r0, [sp, #24]
 80015d4:	f7fe fdd8 	bl	8000188 <__aeabi_fmul>
 80015d8:	f7fe ff26 	bl	8000428 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 80015dc:	6863      	ldr	r3, [r4, #4]
 80015de:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <SendTxData+0x104>)
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80015e4:	6863      	ldr	r3, [r4, #4]
 80015e6:	0a2a      	lsrs	r2, r5, #8
 80015e8:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	709d      	strb	r5, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80015f2:	6863      	ldr	r3, [r4, #4]
 80015f4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80015f8:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	7158      	strb	r0, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <SendTxData+0x108>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b08      	cmp	r3, #8
 8001604:	d002      	beq.n	800160c <SendTxData+0x6c>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d000      	beq.n	800160c <SendTxData+0x6c>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800160a:	b9ab      	cbnz	r3, 8001638 <SendTxData+0x98>
    AppData.Buffer[i++] = 0;
 800160c:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <SendTxData+0x100>)
 800160e:	6851      	ldr	r1, [r2, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8001614:	6851      	ldr	r1, [r2, #4]
 8001616:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8001618:	6852      	ldr	r2, [r2, #4]
 800161a:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 800161c:	7253      	strb	r3, [r2, #9]
 800161e:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <SendTxData+0x100>)
 8001622:	7043      	strb	r3, [r0, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8001624:	2300      	movs	r3, #0
 8001626:	aa03      	add	r2, sp, #12
 8001628:	4619      	mov	r1, r3
 800162a:	f000 f96b 	bl	8001904 <LmHandlerSend>
 800162e:	b1f8      	cbz	r0, 8001670 <SendTxData+0xd0>
  else if (nextTxIn > 0)
 8001630:	9b03      	ldr	r3, [sp, #12]
 8001632:	bb23      	cbnz	r3, 800167e <SendTxData+0xde>
}
 8001634:	b00b      	add	sp, #44	; 0x2c
 8001636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8001638:	9d07      	ldr	r5, [sp, #28]
    longitude = sensor_data.longitude;
 800163a:	9c08      	ldr	r4, [sp, #32]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800163c:	4e18      	ldr	r6, [pc, #96]	; (80016a0 <SendTxData+0x100>)
 800163e:	6877      	ldr	r7, [r6, #4]
 8001640:	f7ff fbf6 	bl	8000e30 <GetBatteryLevel>
 8001644:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8001646:	6873      	ldr	r3, [r6, #4]
 8001648:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800164c:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800164e:	6873      	ldr	r3, [r6, #4]
 8001650:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8001654:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8001656:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8001658:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800165c:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800165e:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8001662:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8001664:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8001666:	2200      	movs	r2, #0
 8001668:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800166a:	739a      	strb	r2, [r3, #14]
 800166c:	230f      	movs	r3, #15
 800166e:	e7d7      	b.n	8001620 <SendTxData+0x80>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <SendTxData+0x10c>)
 8001672:	2201      	movs	r2, #1
 8001674:	2100      	movs	r1, #0
 8001676:	4610      	mov	r0, r2
 8001678:	f004 ffca 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 800167c:	e7da      	b.n	8001634 <SendTxData+0x94>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <SendTxData+0x110>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	099b      	lsrs	r3, r3, #6
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <SendTxData+0x114>)
 800168a:	2201      	movs	r2, #1
 800168c:	2100      	movs	r1, #0
 800168e:	4610      	mov	r0, r2
 8001690:	f004 ffbe 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
}
 8001694:	e7ce      	b.n	8001634 <SendTxData+0x94>
 8001696:	bf00      	nop
 8001698:	42c80000 	.word	0x42c80000
 800169c:	41200000 	.word	0x41200000
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000186 	.word	0x20000186
 80016a8:	2000003c 	.word	0x2000003c
 80016ac:	080074d8 	.word	0x080074d8
 80016b0:	10624dd3 	.word	0x10624dd3
 80016b4:	080074e8 	.word	0x080074e8

080016b8 <OnJoinTimerLedEvent>:
{
 80016b8:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED_RED) ;
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 fe4a 	bl	8002354 <BSP_LED_Toggle>
}
 80016c0:	bd08      	pop	{r3, pc}
	...

080016c4 <LoRaWAN_Init>:
{
 80016c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c8:	b084      	sub	sp, #16
  BSP_LED_Init(LED_BLUE);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 fdf6 	bl	80022bc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 fdf3 	bl	80022bc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80016d6:	2002      	movs	r0, #2
 80016d8:	f000 fdf0 	bl	80022bc <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80016dc:	2101      	movs	r1, #1
 80016de:	4608      	mov	r0, r1
 80016e0:	f000 fe48 	bl	8002374 <BSP_PB_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "M4 APP_VERSION:     V%X.%X.%X\r\n",
 80016e4:	2400      	movs	r4, #0
 80016e6:	9402      	str	r4, [sp, #8]
 80016e8:	2501      	movs	r5, #1
 80016ea:	9501      	str	r5, [sp, #4]
 80016ec:	9500      	str	r5, [sp, #0]
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <LoRaWAN_Init+0x144>)
 80016f0:	4622      	mov	r2, r4
 80016f2:	4621      	mov	r1, r4
 80016f4:	2002      	movs	r0, #2
 80016f6:	f004 ff8b 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_specific_features_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_SYSTEM_ID);
 80016fa:	4620      	mov	r0, r4
 80016fc:	f000 fcee 	bl	80020dc <MBMUXIF_SystemGetFeatCapabInfoPtr>
  lora_cm0plus_app = p_cm0plus_specific_features_info->Feat_Info_Feature_Version ;
 8001700:	6843      	ldr	r3, [r0, #4]
  APP_LOG(TS_OFF, VLEVEL_M, "M0PLUS_APP_VERSION: V%X.%X.%X\r\n",
 8001702:	0e1a      	lsrs	r2, r3, #24
 8001704:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8001708:	9102      	str	r1, [sp, #8]
 800170a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <LoRaWAN_Init+0x148>)
 8001714:	4622      	mov	r2, r4
 8001716:	4621      	mov	r1, r4
 8001718:	2002      	movs	r0, #2
 800171a:	f004 ff79 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_specific_features_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_LORAWAN_ID);
 800171e:	2008      	movs	r0, #8
 8001720:	f000 fcdc 	bl	80020dc <MBMUXIF_SystemGetFeatCapabInfoPtr>
  lora_cm0plus_app = p_cm0plus_specific_features_info->Feat_Info_Feature_Version ;
 8001724:	6843      	ldr	r3, [r0, #4]
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001726:	0e1a      	lsrs	r2, r3, #24
 8001728:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800172c:	9102      	str	r1, [sp, #8]
 800172e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9200      	str	r2, [sp, #0]
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <LoRaWAN_Init+0x14c>)
 8001738:	4622      	mov	r2, r4
 800173a:	4621      	mov	r1, r4
 800173c:	2002      	movs	r0, #2
 800173e:	f004 ff67 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_specific_features_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_RADIO_ID);
 8001742:	2007      	movs	r0, #7
 8001744:	f000 fcca 	bl	80020dc <MBMUXIF_SystemGetFeatCapabInfoPtr>
  lora_cm0plus_app = p_cm0plus_specific_features_info->Feat_Info_Feature_Version ;
 8001748:	6843      	ldr	r3, [r0, #4]
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800174a:	0e1a      	lsrs	r2, r3, #24
 800174c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8001750:	9102      	str	r1, [sp, #8]
 8001752:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	9200      	str	r2, [sp, #0]
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <LoRaWAN_Init+0x150>)
 800175c:	4622      	mov	r2, r4
 800175e:	4621      	mov	r1, r4
 8001760:	2002      	movs	r0, #2
 8001762:	f004 ff55 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001766:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001840 <LoRaWAN_Init+0x17c>
 800176a:	9400      	str	r4, [sp, #0]
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <LoRaWAN_Init+0x154>)
 800176e:	4622      	mov	r2, r4
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	4640      	mov	r0, r8
 8001776:	f005 f9e5 	bl	8006b44 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800177a:	4f28      	ldr	r7, [pc, #160]	; (800181c <LoRaWAN_Init+0x158>)
 800177c:	9400      	str	r4, [sp, #0]
 800177e:	4b28      	ldr	r3, [pc, #160]	; (8001820 <LoRaWAN_Init+0x15c>)
 8001780:	4622      	mov	r2, r4
 8001782:	f04f 31ff 	mov.w	r1, #4294967295
 8001786:	4638      	mov	r0, r7
 8001788:	f005 f9dc 	bl	8006b44 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800178c:	4e25      	ldr	r6, [pc, #148]	; (8001824 <LoRaWAN_Init+0x160>)
 800178e:	9400      	str	r4, [sp, #0]
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <LoRaWAN_Init+0x164>)
 8001792:	462a      	mov	r2, r5
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	4630      	mov	r0, r6
 800179a:	f005 f9d3 	bl	8006b44 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800179e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017a2:	4640      	mov	r0, r8
 80017a4:	f005 faba 	bl	8006d1c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80017a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017ac:	4638      	mov	r0, r7
 80017ae:	f005 fab5 	bl	8006d1c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 80017b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017b6:	4630      	mov	r0, r6
 80017b8:	f005 fab0 	bl	8006d1c <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_MbLoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <LoRaWAN_Init+0x168>)
 80017be:	4621      	mov	r1, r4
 80017c0:	2008      	movs	r0, #8
 80017c2:	f005 f965 	bl	8006a90 <UTIL_SEQ_RegTask>
  LmHandlerInit(&LmHandlerCallbacks);
 80017c6:	481a      	ldr	r0, [pc, #104]	; (8001830 <LoRaWAN_Init+0x16c>)
 80017c8:	f000 f846 	bl	8001858 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80017cc:	4819      	ldr	r0, [pc, #100]	; (8001834 <LoRaWAN_Init+0x170>)
 80017ce:	f000 f871 	bl	80018b4 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80017d2:	4630      	mov	r0, r6
 80017d4:	f005 fa5c 	bl	8006c90 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 80017d8:	2002      	movs	r0, #2
 80017da:	f000 f885 	bl	80018e8 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80017de:	4d16      	ldr	r5, [pc, #88]	; (8001838 <LoRaWAN_Init+0x174>)
 80017e0:	9400      	str	r4, [sp, #0]
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <LoRaWAN_Init+0x178>)
 80017e4:	4622      	mov	r2, r4
 80017e6:	f04f 31ff 	mov.w	r1, #4294967295
 80017ea:	4628      	mov	r0, r5
 80017ec:	f005 f9aa 	bl	8006b44 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 80017f0:	f242 7110 	movw	r1, #10000	; 0x2710
 80017f4:	4628      	mov	r0, r5
 80017f6:	f005 fa91 	bl	8006d1c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80017fa:	4628      	mov	r0, r5
 80017fc:	f005 fa48 	bl	8006c90 <UTIL_TIMER_Start>
}
 8001800:	b004      	add	sp, #16
 8001802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001806:	bf00      	nop
 8001808:	08007508 	.word	0x08007508
 800180c:	08007528 	.word	0x08007528
 8001810:	08007548 	.word	0x08007548
 8001814:	08007568 	.word	0x08007568
 8001818:	0800152b 	.word	0x0800152b
 800181c:	200001a0 	.word	0x200001a0
 8001820:	08001521 	.word	0x08001521
 8001824:	20000188 	.word	0x20000188
 8001828:	080016b9 	.word	0x080016b9
 800182c:	080015a1 	.word	0x080015a1
 8001830:	20000008 	.word	0x20000008
 8001834:	2000003c 	.word	0x2000003c
 8001838:	200001d0 	.word	0x200001d0
 800183c:	08001371 	.word	0x08001371
 8001840:	200001b8 	.word	0x200001b8

08001844 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8001844:	2801      	cmp	r0, #1
 8001846:	d000      	beq.n	800184a <HAL_GPIO_EXTI_Callback+0x6>
 8001848:	4770      	bx	lr
{
 800184a:	b508      	push	{r3, lr}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MbLoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800184c:	2100      	movs	r1, #0
 800184e:	2008      	movs	r0, #8
 8001850:	f005 f82e 	bl	80068b0 <UTIL_SEQ_SetTask>
}
 8001854:	bd08      	pop	{r3, pc}
	...

08001858 <LmHandlerInit>:
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer ;
  uint16_t i = 0;
  uint32_t ret;

  if (handlerCallbacks == NULL)
 8001858:	b320      	cbz	r0, 80018a4 <LmHandlerInit+0x4c>
{
 800185a:	b510      	push	{r4, lr}
  {
    return LORAMAC_HANDLER_ERROR;
  }

  callback_mbwrapper.GetBatteryLevel = handlerCallbacks->GetBatteryLevel;
 800185c:	6801      	ldr	r1, [r0, #0]
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <LmHandlerInit+0x54>)
 8001860:	6011      	str	r1, [r2, #0]
  callback_mbwrapper.GetTemperature = handlerCallbacks->GetTemperature;
 8001862:	6841      	ldr	r1, [r0, #4]
 8001864:	6051      	str	r1, [r2, #4]
  callback_mbwrapper.OnNvmDataChange = handlerCallbacks->OnNvmDataChange;
 8001866:	6941      	ldr	r1, [r0, #20]
 8001868:	6151      	str	r1, [r2, #20]
  callback_mbwrapper.OnNetworkParametersChange = handlerCallbacks->OnNetworkParametersChange;
 800186a:	6981      	ldr	r1, [r0, #24]
 800186c:	6191      	str	r1, [r2, #24]
  callback_mbwrapper.OnJoinRequest = handlerCallbacks->OnJoinRequest;
 800186e:	69c1      	ldr	r1, [r0, #28]
 8001870:	61d1      	str	r1, [r2, #28]
  callback_mbwrapper.OnTxData = handlerCallbacks->OnTxData;
 8001872:	6a01      	ldr	r1, [r0, #32]
 8001874:	6211      	str	r1, [r2, #32]
  callback_mbwrapper.OnRxData = handlerCallbacks->OnRxData;
 8001876:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001878:	6251      	str	r1, [r2, #36]	; 0x24
  callback_mbwrapper.OnClassChange = handlerCallbacks->OnClassChange;
 800187a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800187c:	6291      	str	r1, [r2, #40]	; 0x28
  callback_mbwrapper.OnBeaconStatusChange = handlerCallbacks->OnBeaconStatusChange;
 800187e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001880:	62d1      	str	r1, [r2, #44]	; 0x2c
  callback_mbwrapper.OnSysTimeUpdate = handlerCallbacks->OnSysTimeUpdate;
 8001882:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001884:	6313      	str	r3, [r2, #48]	; 0x30

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 8001886:	f000 fadb 	bl	8001e40 <MBMUXIF_GetLoraFeatureCmdComPtr>
 800188a:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_INITIALIZATION_ID;
 800188c:	2300      	movs	r3, #0
 800188e:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 8001890:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) aLoraMbWrapShareBuffer;
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <LmHandlerInit+0x58>)
 8001894:	601a      	str	r2, [r3, #0]
  com_obj->ParamCnt = i;
 8001896:	2301      	movs	r3, #1
 8001898:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 800189a:	f000 fadd 	bl	8001e58 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
 800189e:	f994 0014 	ldrsb.w	r0, [r4, #20]
  /* USER CODE BEGIN LmHandlerInit_2 */

  /* USER CODE END LmHandlerInit_2 */
}
 80018a2:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200001e8 	.word	0x200001e8
 80018b0:	2000813c 	.word	0x2000813c

080018b4 <LmHandlerConfigure>:
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer ;
  uint16_t i = 0;
  uint32_t ret;

  if (handlerParams == NULL)
 80018b4:	b198      	cbz	r0, 80018de <LmHandlerConfigure+0x2a>
{
 80018b6:	b538      	push	{r3, r4, r5, lr}
 80018b8:	4601      	mov	r1, r0
  {
    return LORAMAC_HANDLER_ERROR;
  }

  /* copy data from Cm4 stack memory to shared memory */
  UTIL_MEM_cpy_8(aLoraMbWrapShareBuffer, handlerParams, sizeof(LmHandlerParams_t));
 80018ba:	4d0a      	ldr	r5, [pc, #40]	; (80018e4 <LmHandlerConfigure+0x30>)
 80018bc:	2210      	movs	r2, #16
 80018be:	4628      	mov	r0, r5
 80018c0:	f004 ffe4 	bl	800688c <UTIL_MEM_cpy_8>

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80018c4:	f000 fabc 	bl	8001e40 <MBMUXIF_GetLoraFeatureCmdComPtr>
 80018c8:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_CONFIGURE_ID;
 80018ca:	2301      	movs	r3, #1
 80018cc:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 80018ce:	6902      	ldr	r2, [r0, #16]
  com_buffer[i++] = (uint32_t) aLoraMbWrapShareBuffer;
 80018d0:	6015      	str	r5, [r2, #0]
  com_obj->ParamCnt = i;
 80018d2:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80018d4:	f000 fac0 	bl	8001e58 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
 80018d8:	f994 0014 	ldrsb.w	r0, [r4, #20]
  /* USER CODE BEGIN LmHandlerConfigure_2 */

  /* USER CODE END LmHandlerConfigure_2 */
}
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
    return LORAMAC_HANDLER_ERROR;
 80018de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018e2:	4770      	bx	lr
 80018e4:	2000813c 	.word	0x2000813c

080018e8 <LmHandlerJoin>:

  /* USER CODE END LmHandlerJoinStatus_2 */
}

void LmHandlerJoin(ActivationType_t mode)
{
 80018e8:	b510      	push	{r4, lr}
 80018ea:	4604      	mov	r4, r0
  /* USER CODE END LmHandlerJoin_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer ;
  uint16_t i = 0;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80018ec:	f000 faa8 	bl	8001e40 <MBMUXIF_GetLoraFeatureCmdComPtr>
  com_obj->MsgId = LMHANDLER_JOIN_ID;
 80018f0:	2303      	movs	r3, #3
 80018f2:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 80018f4:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) mode;
 80018f6:	601c      	str	r4, [r3, #0]
  com_obj->ParamCnt = i;
 80018f8:	2301      	movs	r3, #1
 80018fa:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80018fc:	f000 faac 	bl	8001e58 <MBMUXIF_LoraSendCmd>
  /* once event is received and semaphore released: */
  return;
  /* USER CODE BEGIN LmHandlerJoin_2 */

  /* USER CODE END LmHandlerJoin_2 */
}
 8001900:	bd10      	pop	{r4, pc}
	...

08001904 <LmHandlerSend>:
  uint32_t *com_buffer ;
  uint16_t i = 0;
  uint32_t ret;
  uint8_t next_addr = 0;

  if ((appData == NULL) || (appData->Buffer == NULL))
 8001904:	2800      	cmp	r0, #0
 8001906:	d040      	beq.n	800198a <LmHandlerSend+0x86>
{
 8001908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800190c:	4689      	mov	r9, r1
 800190e:	4614      	mov	r4, r2
 8001910:	4698      	mov	r8, r3
 8001912:	4607      	mov	r7, r0
  if ((appData == NULL) || (appData->Buffer == NULL))
 8001914:	6841      	ldr	r1, [r0, #4]
 8001916:	2900      	cmp	r1, #0
 8001918:	d03a      	beq.n	8001990 <LmHandlerSend+0x8c>
  {
    return LORAMAC_HANDLER_ERROR;
  }

  /* copy data from Cm4 stack memory to shared memory */
  if (appData->BufferSize > 0)
 800191a:	7846      	ldrb	r6, [r0, #1]
 800191c:	bb4e      	cbnz	r6, 8001972 <LmHandlerSend+0x6e>
    UTIL_MEM_cpy_8(aLoraMbWrapShareBuffer, appData->Buffer, appData->BufferSize);
    /* need to 8-align the next address */
    next_addr = (appData->BufferSize + 7) & ~7;
  }

  if (nextTxIn != NULL)
 800191e:	b12c      	cbz	r4, 800192c <LmHandlerSend+0x28>
  {
    UTIL_MEM_cpy_8(&aLoraMbWrapShareBuffer[next_addr], nextTxIn, sizeof(UTIL_TIMER_Time_t));
 8001920:	2204      	movs	r2, #4
 8001922:	4621      	mov	r1, r4
 8001924:	481c      	ldr	r0, [pc, #112]	; (8001998 <LmHandlerSend+0x94>)
 8001926:	4430      	add	r0, r6
 8001928:	f004 ffb0 	bl	800688c <UTIL_MEM_cpy_8>
  }

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 800192c:	f000 fa88 	bl	8001e40 <MBMUXIF_GetLoraFeatureCmdComPtr>
 8001930:	4605      	mov	r5, r0
  com_obj->MsgId = LMHANDLER_SEND_ID;
 8001932:	2305      	movs	r3, #5
 8001934:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 8001936:	6902      	ldr	r2, [r0, #16]
  com_buffer[i++] = (uint32_t) appData->Port;
 8001938:	783b      	ldrb	r3, [r7, #0]
 800193a:	6013      	str	r3, [r2, #0]
  com_buffer[i++] = (uint32_t) appData->BufferSize;
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	6053      	str	r3, [r2, #4]
  com_buffer[i++] = (uint32_t) aLoraMbWrapShareBuffer;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <LmHandlerSend+0x94>)
 8001942:	6093      	str	r3, [r2, #8]
  com_buffer[i++] = (uint32_t) isTxConfirmed;
 8001944:	f8c2 900c 	str.w	r9, [r2, #12]
  if (nextTxIn == NULL)
 8001948:	b1e4      	cbz	r4, 8001984 <LmHandlerSend+0x80>
  {
    com_buffer[i++] = (uint32_t)NULL;
  }
  else
  {
    com_buffer[i++] = (uint32_t) &aLoraMbWrapShareBuffer[next_addr];
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <LmHandlerSend+0x94>)
 800194c:	4433      	add	r3, r6
 800194e:	6113      	str	r3, [r2, #16]
  }
  com_buffer[i++] = (uint32_t) allowDelayedTx;
 8001950:	f8c2 8014 	str.w	r8, [r2, #20]
  com_obj->ParamCnt = i;
 8001954:	2306      	movs	r3, #6
 8001956:	81eb      	strh	r3, [r5, #14]

  MBMUXIF_LoraSendCmd();
 8001958:	f000 fa7e 	bl	8001e58 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */
  if (nextTxIn != NULL)
 800195c:	b12c      	cbz	r4, 800196a <LmHandlerSend+0x66>
  {
    UTIL_MEM_cpy_8(nextTxIn, &aLoraMbWrapShareBuffer[next_addr], sizeof(UTIL_TIMER_Time_t));
 800195e:	2204      	movs	r2, #4
 8001960:	490d      	ldr	r1, [pc, #52]	; (8001998 <LmHandlerSend+0x94>)
 8001962:	4431      	add	r1, r6
 8001964:	4620      	mov	r0, r4
 8001966:	f004 ff91 	bl	800688c <UTIL_MEM_cpy_8>
  }

  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
 800196a:	f995 0014 	ldrsb.w	r0, [r5, #20]
  /* USER CODE BEGIN LmHandlerSend_2 */

  /* USER CODE END LmHandlerSend_2 */
}
 800196e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UTIL_MEM_cpy_8(aLoraMbWrapShareBuffer, appData->Buffer, appData->BufferSize);
 8001972:	4632      	mov	r2, r6
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <LmHandlerSend+0x94>)
 8001976:	f004 ff89 	bl	800688c <UTIL_MEM_cpy_8>
    next_addr = (appData->BufferSize + 7) & ~7;
 800197a:	787e      	ldrb	r6, [r7, #1]
 800197c:	3607      	adds	r6, #7
 800197e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8001982:	e7cc      	b.n	800191e <LmHandlerSend+0x1a>
    com_buffer[i++] = (uint32_t)NULL;
 8001984:	2300      	movs	r3, #0
 8001986:	6113      	str	r3, [r2, #16]
 8001988:	e7e2      	b.n	8001950 <LmHandlerSend+0x4c>
    return LORAMAC_HANDLER_ERROR;
 800198a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800198e:	4770      	bx	lr
    return LORAMAC_HANDLER_ERROR;
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	e7eb      	b.n	800196e <LmHandlerSend+0x6a>
 8001996:	bf00      	nop
 8001998:	2000813c 	.word	0x2000813c

0800199c <LmHandlerRequestClass>:

  /* USER CODE END LmHandlerProcess_2 */
}

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800199c:	b538      	push	{r3, r4, r5, lr}
 800199e:	4605      	mov	r5, r0
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer ;
  uint16_t i = 0;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80019a0:	f000 fa4e 	bl	8001e40 <MBMUXIF_GetLoraFeatureCmdComPtr>
 80019a4:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_REQUEST_CLASS_ID;
 80019a6:	2307      	movs	r3, #7
 80019a8:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 80019aa:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) newClass;
 80019ac:	601d      	str	r5, [r3, #0]
  com_obj->ParamCnt = i;
 80019ae:	2301      	movs	r3, #1
 80019b0:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80019b2:	f000 fa51 	bl	8001e58 <MBMUXIF_LoraSendCmd>
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
  /* USER CODE BEGIN LmHandlerRequestClass_2 */

  /* USER CODE END LmHandlerRequestClass_2 */
}
 80019b6:	f994 0014 	ldrsb.w	r0, [r4, #20]
 80019ba:	bd38      	pop	{r3, r4, r5, pc}

080019bc <Process_Lora_Notif>:

  /* USER CODE END LoraInfo_GetPtr_2 */
}

void Process_Lora_Notif(MBMUX_ComParam_t *ComObj)
{
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4604      	mov	r4, r0
  /* USER CODE BEGIN Process_Lora_Notif_1 */

  /* USER CODE END Process_Lora_Notif_1 */
  uint32_t *com_buffer = ComObj->ParamBuf;
 80019c0:	6905      	ldr	r5, [r0, #16]
  uint32_t cb_ret = 0;

  /* Lora Notif received */
  APP_LOG(TS_ON, VLEVEL_H, "CM4<(LoRa)\r\n");
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <Process_Lora_Notif+0xfc>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	2100      	movs	r1, #0
 80019c8:	2003      	movs	r0, #3
 80019ca:	f004 fe21 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>

  /* process Command */
  switch (ComObj->MsgId)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	3b33      	subs	r3, #51	; 0x33
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	d80d      	bhi.n	80019f2 <Process_Lora_Notif+0x36>
 80019d6:	e8df f003 	tbb	[pc, r3]
 80019da:	1a05      	.short	0x1a05
 80019dc:	42393026 	.word	0x42393026
 80019e0:	675e554b 	.word	0x675e554b
  {
    /* callbacks */
    case LMHANDLER_GET_BATTERY_LEVEL_CB_ID:
      if (callback_mbwrapper.GetBatteryLevel != NULL)
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <Process_Lora_Notif+0x100>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b16b      	cbz	r3, 8001a06 <Process_Lora_Notif+0x4a>
      {
        cb_ret = (uint32_t) callback_mbwrapper.GetBatteryLevel();
 80019ea:	4798      	blx	r3
      else
      {
        Error_Handler();
      }
      /* prepare response buffer */
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 80019ec:	2300      	movs	r3, #0
 80019ee:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  cb_ret; /* */
 80019f0:	6160      	str	r0, [r4, #20]
    default:
      break;
  }

  /* Lora sending ack */
  APP_LOG(TS_ON, VLEVEL_H, "CM4>(LoRa)\r\n");
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <Process_Lora_Notif+0x104>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	2100      	movs	r1, #0
 80019f8:	2003      	movs	r0, #3
 80019fa:	f004 fe09 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
  MBMUX_AcknowledgeSnd(FEAT_INFO_LORAWAN_ID);
 80019fe:	2008      	movs	r0, #8
 8001a00:	f000 f9bc 	bl	8001d7c <MBMUX_AcknowledgeSnd>
  /* USER CODE BEGIN Process_Lora_Notif_2 */

  /* USER CODE END Process_Lora_Notif_2 */
}
 8001a04:	bd38      	pop	{r3, r4, r5, pc}
        Error_Handler();
 8001a06:	f7ff f891 	bl	8000b2c <Error_Handler>
  uint32_t cb_ret = 0;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e7ee      	b.n	80019ec <Process_Lora_Notif+0x30>
      if (callback_mbwrapper.GetTemperature != NULL)
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	b123      	cbz	r3, 8001a1e <Process_Lora_Notif+0x62>
        cb_ret = (uint32_t) callback_mbwrapper.GetTemperature();
 8001a14:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001a16:	2300      	movs	r3, #0
 8001a18:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  cb_ret; /* */
 8001a1a:	6160      	str	r0, [r4, #20]
      break;
 8001a1c:	e7e9      	b.n	80019f2 <Process_Lora_Notif+0x36>
        Error_Handler();
 8001a1e:	f7ff f885 	bl	8000b2c <Error_Handler>
  uint32_t cb_ret = 0;
 8001a22:	2000      	movs	r0, #0
 8001a24:	e7f7      	b.n	8001a16 <Process_Lora_Notif+0x5a>
      if (callback_mbwrapper.OnNvmDataChange != NULL)
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	b113      	cbz	r3, 8001a32 <Process_Lora_Notif+0x76>
        callback_mbwrapper.OnNvmDataChange((LmHandlerNvmContextStates_t) com_buffer[0], (uint16_t) com_buffer[1]);
 8001a2c:	88a9      	ldrh	r1, [r5, #4]
 8001a2e:	7828      	ldrb	r0, [r5, #0]
 8001a30:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001a32:	2300      	movs	r3, #0
 8001a34:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001a36:	6163      	str	r3, [r4, #20]
      break;
 8001a38:	e7db      	b.n	80019f2 <Process_Lora_Notif+0x36>
      if (callback_mbwrapper.OnNetworkParametersChange != NULL)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	b10b      	cbz	r3, 8001a44 <Process_Lora_Notif+0x88>
        callback_mbwrapper.OnNetworkParametersChange((CommissioningParams_t *) com_buffer[0]);
 8001a40:	6828      	ldr	r0, [r5, #0]
 8001a42:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001a44:	2300      	movs	r3, #0
 8001a46:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001a48:	6163      	str	r3, [r4, #20]
      break;
 8001a4a:	e7d2      	b.n	80019f2 <Process_Lora_Notif+0x36>
      if (callback_mbwrapper.OnJoinRequest != NULL)
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	b10b      	cbz	r3, 8001a56 <Process_Lora_Notif+0x9a>
        callback_mbwrapper.OnJoinRequest((LmHandlerJoinParams_t *) com_buffer[0]);
 8001a52:	6828      	ldr	r0, [r5, #0]
 8001a54:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001a56:	2300      	movs	r3, #0
 8001a58:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001a5a:	6163      	str	r3, [r4, #20]
      break;
 8001a5c:	e7c9      	b.n	80019f2 <Process_Lora_Notif+0x36>
      if (callback_mbwrapper.OnTxData != NULL)
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	b10b      	cbz	r3, 8001a68 <Process_Lora_Notif+0xac>
        callback_mbwrapper.OnTxData((LmHandlerTxParams_t *) com_buffer[0]);
 8001a64:	6828      	ldr	r0, [r5, #0]
 8001a66:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001a68:	2300      	movs	r3, #0
 8001a6a:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001a6c:	6163      	str	r3, [r4, #20]
      break;
 8001a6e:	e7c0      	b.n	80019f2 <Process_Lora_Notif+0x36>
      if (callback_mbwrapper.OnRxData != NULL)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	b113      	cbz	r3, 8001a7c <Process_Lora_Notif+0xc0>
        callback_mbwrapper.OnRxData((LmHandlerAppData_t *) com_buffer[0], (LmHandlerRxParams_t *) com_buffer[1]);
 8001a76:	6869      	ldr	r1, [r5, #4]
 8001a78:	6828      	ldr	r0, [r5, #0]
 8001a7a:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001a80:	6163      	str	r3, [r4, #20]
      break;
 8001a82:	e7b6      	b.n	80019f2 <Process_Lora_Notif+0x36>
      if (callback_mbwrapper.OnClassChange != NULL)
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	b10b      	cbz	r3, 8001a8e <Process_Lora_Notif+0xd2>
        callback_mbwrapper.OnClassChange((DeviceClass_t) com_buffer[0]);
 8001a8a:	7828      	ldrb	r0, [r5, #0]
 8001a8c:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001a8e:	2300      	movs	r3, #0
 8001a90:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001a92:	6163      	str	r3, [r4, #20]
      break;
 8001a94:	e7ad      	b.n	80019f2 <Process_Lora_Notif+0x36>
      if (callback_mbwrapper.OnBeaconStatusChange != NULL)
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <Process_Lora_Notif+0x100>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	b10b      	cbz	r3, 8001aa0 <Process_Lora_Notif+0xe4>
        callback_mbwrapper.OnBeaconStatusChange((LmHandlerBeaconParams_t *) com_buffer[0]);
 8001a9c:	6828      	ldr	r0, [r5, #0]
 8001a9e:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001aa4:	6163      	str	r3, [r4, #20]
      break;
 8001aa6:	e7a4      	b.n	80019f2 <Process_Lora_Notif+0x36>
      if (callback_mbwrapper.OnSysTimeUpdate != NULL)
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <Process_Lora_Notif+0x100>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	b103      	cbz	r3, 8001ab0 <Process_Lora_Notif+0xf4>
        callback_mbwrapper.OnSysTimeUpdate();
 8001aae:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8001ab4:	6163      	str	r3, [r4, #20]
      break;
 8001ab6:	e79c      	b.n	80019f2 <Process_Lora_Notif+0x36>
 8001ab8:	080075dc 	.word	0x080075dc
 8001abc:	200001e8 	.word	0x200001e8
 8001ac0:	080075ec 	.word	0x080075ec

08001ac4 <MBMUX_CheckIfFeatureSupportedByCm0plus>:

/* USER CODE END EFD */

/* Private functions ---------------------------------------------------------*/
static uint8_t MBMUX_CheckIfFeatureSupportedByCm0plus(FEAT_INFO_IdTypeDef e_featID)
{
 8001ac4:	b4f0      	push	{r4, r5, r6, r7}
 8001ac6:	b084      	sub	sp, #16
  FEAT_INFO_Param_t  i_feature;
  /* USER CODE BEGIN MBMUX_CheckIfFeatureSupportedByCm0plus_1 */

  /* USER CODE END MBMUX_CheckIfFeatureSupportedByCm0plus_1 */

  if (p_MBMUX_Cm0plusFeatureList != NULL)
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x44>)
 8001aca:	681e      	ldr	r6, [r3, #0]
 8001acc:	b1ce      	cbz	r6, 8001b02 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x3e>
 8001ace:	4605      	mov	r5, r0
  {
    cm0plus_nr_of_supported_features = p_MBMUX_Cm0plusFeatureList->Feat_Info_Cnt;
 8001ad0:	7837      	ldrb	r7, [r6, #0]

    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 8001ad2:	2400      	movs	r4, #0
 8001ad4:	e001      	b.n	8001ada <MBMUX_CheckIfFeatureSupportedByCm0plus+0x16>
 8001ad6:	3401      	adds	r4, #1
 8001ad8:	b2e4      	uxtb	r4, r4
 8001ada:	42bc      	cmp	r4, r7
 8001adc:	d20d      	bcs.n	8001afa <MBMUX_CheckIfFeatureSupportedByCm0plus+0x36>
    {
      i_feature = *(i + p_MBMUX_Cm0plusFeatureList->Feat_Info_TableAddress);
 8001ade:	6873      	ldr	r3, [r6, #4]
 8001ae0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001ae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae6:	f10d 0c10 	add.w	ip, sp, #16
 8001aea:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
      if (i_feature.Feat_Info_Feature_Id == e_featID)
 8001aee:	f89d 3000 	ldrb.w	r3, [sp]
 8001af2:	42ab      	cmp	r3, r5
 8001af4:	d1ef      	bne.n	8001ad6 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x12>
      {
        ret = 1;
 8001af6:	2001      	movs	r0, #1
 8001af8:	e000      	b.n	8001afc <MBMUX_CheckIfFeatureSupportedByCm0plus+0x38>
  int8_t ret = 0;
 8001afa:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN MBMUX_CheckIfFeatureSupportedByCm0plus_Last */

  /* USER CODE END MBMUX_CheckIfFeatureSupportedByCm0plus_Last */
  return ret;
}
 8001afc:	b004      	add	sp, #16
 8001afe:	bcf0      	pop	{r4, r5, r6, r7}
 8001b00:	4770      	bx	lr
  int8_t ret = 0;
 8001b02:	2000      	movs	r0, #0
 8001b04:	e7fa      	b.n	8001afc <MBMUX_CheckIfFeatureSupportedByCm0plus+0x38>
 8001b06:	bf00      	nop
 8001b08:	2000021c 	.word	0x2000021c

08001b0c <MBMUX_IsrResponseRcvCb>:

static void MBMUX_IsrResponseRcvCb(uint32_t channelIdx)
{
 8001b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUX_IsrResponseRcvCb_1 */

  /* USER CODE END MBMUX_IsrResponseRcvCb_1 */
  /* retrieve pointer to com params */
  void *com_obj = (void *) &p_MBMUX_ComTable->MBCmdRespParam[channelIdx];
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <MBMUX_IsrResponseRcvCb+0x18>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	eb00 0140 	add.w	r1, r0, r0, lsl #1
  /* call registered callback */
  p_MBMUX_ComTable->MBCmdRespParam[channelIdx].MsgCm4Cb(com_obj);
 8001b16:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8001b20:	4798      	blx	r3
  /* USER CODE BEGIN MBMUX_IsrResponseRcvCb_Last */

  /* USER CODE END MBMUX_IsrResponseRcvCb_Last */
  return;
}
 8001b22:	bd08      	pop	{r3, pc}
 8001b24:	20000220 	.word	0x20000220

08001b28 <MBMUX_IsrNotificationRcvCb>:

static void MBMUX_IsrNotificationRcvCb(uint32_t channelIdx)
{
 8001b28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUX_IsrNotificationRcvCb_1 */

  /* USER CODE END MBMUX_IsrNotificationRcvCb_1 */
  /* retrieve pointer to com params */
  void *com_obj = (void *) &p_MBMUX_ComTable->MBNotifAckParam[channelIdx];
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MBMUX_IsrNotificationRcvCb+0x20>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001b32:	00d2      	lsls	r2, r2, #3
 8001b34:	3290      	adds	r2, #144	; 0x90
  /* call registered callback */
  p_MBMUX_ComTable->MBNotifAckParam[channelIdx].MsgCm4Cb(com_obj);
 8001b36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001b3a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b42:	1888      	adds	r0, r1, r2
 8001b44:	4798      	blx	r3
  /* USER CODE BEGIN MBMUX_IsrNotificationRcvCb_Last */

  /* USER CODE END MBMUX_IsrNotificationRcvCb_Last */
  return;
}
 8001b46:	bd08      	pop	{r3, pc}
 8001b48:	20000220 	.word	0x20000220

08001b4c <MBMUX_FindChStillUnregistered>:
  uint8_t feat_id;
  uint8_t ch;
  uint8_t already_used;

  /* First two channels are reserved to SYSTEM, TRACE and SKS */
  if (ComType == MBMUX_CMD_RESP)
 8001b4c:	b1d8      	cbz	r0, 8001b86 <MBMUX_FindChStillUnregistered+0x3a>
      }
    }
  }
  else  /* RX */
  {
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8001b4e:	2001      	movs	r0, #1
 8001b50:	2805      	cmp	r0, #5
 8001b52:	d82f      	bhi.n	8001bb4 <MBMUX_FindChStillUnregistered+0x68>
    {
      already_used = 0;
 8001b54:	2100      	movs	r1, #0
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8001b56:	460b      	mov	r3, r1
 8001b58:	e01f      	b.n	8001b9a <MBMUX_FindChStillUnregistered+0x4e>
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b0a      	cmp	r3, #10
 8001b60:	d809      	bhi.n	8001b76 <MBMUX_FindChStillUnregistered+0x2a>
        if (p_MBMUX_ComTable->MBMUXMapping[feat_id][MBMUX_CMD_RESP] == ch)
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <MBMUX_FindChStillUnregistered+0x7c>)
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8001b6a:	f812 2011 	ldrb.w	r2, [r2, r1, lsl #1]
 8001b6e:	4282      	cmp	r2, r0
 8001b70:	d1f3      	bne.n	8001b5a <MBMUX_FindChStillUnregistered+0xe>
          already_used = 1;
 8001b72:	2401      	movs	r4, #1
 8001b74:	e7f1      	b.n	8001b5a <MBMUX_FindChStillUnregistered+0xe>
      if (already_used == 0)
 8001b76:	b91c      	cbnz	r4, 8001b80 <MBMUX_FindChStillUnregistered+0x34>
        break;
      }
    }
  }

  if (ch == MBMUX_CHANNEL_NUMBER)
 8001b78:	2806      	cmp	r0, #6
 8001b7a:	d021      	beq.n	8001bc0 <MBMUX_FindChStillUnregistered+0x74>
    return (ch);
  }
  /* USER CODE BEGIN MBMUX_FindChStillUnregistered_Last */

  /* USER CODE END MBMUX_FindChStillUnregistered_Last */
}
 8001b7c:	bc30      	pop	{r4, r5}
 8001b7e:	4770      	bx	lr
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8001b80:	3001      	adds	r0, #1
 8001b82:	b2c0      	uxtb	r0, r0
 8001b84:	e002      	b.n	8001b8c <MBMUX_FindChStillUnregistered+0x40>
{
 8001b86:	b430      	push	{r4, r5}
 8001b88:	4605      	mov	r5, r0
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	2805      	cmp	r0, #5
 8001b8e:	d8f3      	bhi.n	8001b78 <MBMUX_FindChStillUnregistered+0x2c>
      already_used = 0;
 8001b90:	462c      	mov	r4, r5
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8001b92:	462b      	mov	r3, r5
 8001b94:	e7e3      	b.n	8001b5e <MBMUX_FindChStillUnregistered+0x12>
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b0a      	cmp	r3, #10
 8001b9c:	d809      	bhi.n	8001bb2 <MBMUX_FindChStillUnregistered+0x66>
        if (p_MBMUX_ComTable->MBMUXMapping[feat_id][MBMUX_NOTIF_ACK] == ch)
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <MBMUX_FindChStillUnregistered+0x7c>)
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001ba6:	f892 2121 	ldrb.w	r2, [r2, #289]	; 0x121
 8001baa:	4282      	cmp	r2, r0
 8001bac:	d1f3      	bne.n	8001b96 <MBMUX_FindChStillUnregistered+0x4a>
          already_used = 1;
 8001bae:	2101      	movs	r1, #1
 8001bb0:	e7f1      	b.n	8001b96 <MBMUX_FindChStillUnregistered+0x4a>
      if (already_used == 0)
 8001bb2:	b911      	cbnz	r1, 8001bba <MBMUX_FindChStillUnregistered+0x6e>
  if (ch == MBMUX_CHANNEL_NUMBER)
 8001bb4:	2806      	cmp	r0, #6
 8001bb6:	d005      	beq.n	8001bc4 <MBMUX_FindChStillUnregistered+0x78>
}
 8001bb8:	4770      	bx	lr
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8001bba:	3001      	adds	r0, #1
 8001bbc:	b2c0      	uxtb	r0, r0
 8001bbe:	e7c7      	b.n	8001b50 <MBMUX_FindChStillUnregistered+0x4>
    return MB_CHANNEL_NOT_REGISTERED;
 8001bc0:	20ff      	movs	r0, #255	; 0xff
 8001bc2:	e7db      	b.n	8001b7c <MBMUX_FindChStillUnregistered+0x30>
 8001bc4:	20ff      	movs	r0, #255	; 0xff
 8001bc6:	4770      	bx	lr
 8001bc8:	20000220 	.word	0x20000220

08001bcc <MBMUX_GetFeatureChIdx>:
static uint8_t MBMUX_GetFeatureChIdx(FEAT_INFO_IdTypeDef e_featID, MBMUX_ComType_t ComType)
{
  /* USER CODE BEGIN MBMUX_GetFeatureChIdx_1 */

  /* USER CODE END MBMUX_GetFeatureChIdx_1 */
  return p_MBMUX_ComTable->MBMUXMapping[e_featID][ComType];
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <MBMUX_GetFeatureChIdx+0x10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001bd4:	440b      	add	r3, r1
  /* USER CODE BEGIN MBMUX_GetFeatureChIdx_Last */

  /* USER CODE END MBMUX_GetFeatureChIdx_Last */
}
 8001bd6:	f893 0120 	ldrb.w	r0, [r3, #288]	; 0x120
 8001bda:	4770      	bx	lr
 8001bdc:	20000220 	.word	0x20000220

08001be0 <MBMUX_IsrNotRegistered>:

static void MBMUX_IsrNotRegistered(void *ComObj)
{
 8001be0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUX_IsrNotRegistered_1 */

  /* USER CODE END MBMUX_IsrNotRegistered_1 */
  Error_Handler();
 8001be2:	f7fe ffa3 	bl	8000b2c <Error_Handler>
  /* USER CODE BEGIN MBMUX_IsrNotRegistered_Last */

  /* USER CODE END MBMUX_IsrNotRegistered_Last */
}
 8001be6:	bd08      	pop	{r3, pc}

08001be8 <MBMUX_Init>:
{
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4604      	mov	r4, r0
  IPCC_IF_Init(MBMUX_IsrResponseRcvCb, MBMUX_IsrNotificationRcvCb);
 8001bec:	4919      	ldr	r1, [pc, #100]	; (8001c54 <MBMUX_Init+0x6c>)
 8001bee:	481a      	ldr	r0, [pc, #104]	; (8001c58 <MBMUX_Init+0x70>)
 8001bf0:	f7fe ff4c 	bl	8000a8c <IPCC_IF_Init>
  p_MBMUX_ComTable = pMBMUX_ComTable;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <MBMUX_Init+0x74>)
 8001bf6:	601c      	str	r4, [r3, #0]
  for (i = 0; i < FEAT_INFO_CNT; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e00a      	b.n	8001c12 <MBMUX_Init+0x2a>
    p_MBMUX_ComTable->MBMUXMapping[i][MBMUX_CMD_RESP] = MB_CHANNEL_NOT_REGISTERED;
 8001bfc:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8001c00:	22ff      	movs	r2, #255	; 0xff
 8001c02:	f804 2011 	strb.w	r2, [r4, r1, lsl #1]
    p_MBMUX_ComTable->MBMUXMapping[i][MBMUX_NOTIF_ACK] = MB_CHANNEL_NOT_REGISTERED;
 8001c06:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8001c0a:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
  for (i = 0; i < FEAT_INFO_CNT; i++)
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d9f2      	bls.n	8001bfc <MBMUX_Init+0x14>
  for (i = 0; i < MBMUX_CHANNEL_NUMBER; i++)
 8001c16:	2200      	movs	r2, #0
 8001c18:	2a05      	cmp	r2, #5
 8001c1a:	d819      	bhi.n	8001c50 <MBMUX_Init+0x68>
    p_MBMUX_ComTable->MBCmdRespParam[i].MsgId = 0;
 8001c1c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001c20:	00d8      	lsls	r0, r3, #3
 8001c22:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001c26:	2100      	movs	r1, #0
 8001c28:	5021      	str	r1, [r4, r0]
    p_MBMUX_ComTable->MBCmdRespParam[i].MsgCm4Cb = MBMUX_IsrNotRegistered;
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MBMUX_Init+0x78>)
 8001c2c:	6058      	str	r0, [r3, #4]
    p_MBMUX_ComTable->MBCmdRespParam[i].ParamCnt = 0;
 8001c2e:	81d9      	strh	r1, [r3, #14]
    p_MBMUX_ComTable->MBCmdRespParam[i].ParamBuf = NULL;
 8001c30:	6119      	str	r1, [r3, #16]
    p_MBMUX_ComTable->MBNotifAckParam[i].MsgId = 0;
 8001c32:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    p_MBMUX_ComTable->MBNotifAckParam[i].MsgCm4Cb = MBMUX_IsrNotRegistered;
 8001c36:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    p_MBMUX_ComTable->MBNotifAckParam[i].ParamCnt = 0;
 8001c3a:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
    p_MBMUX_ComTable->MBNotifAckParam[i].ParamBuf = NULL;
 8001c3e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001c42:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001c46:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  for (i = 0; i < MBMUX_CHANNEL_NUMBER; i++)
 8001c4a:	3201      	adds	r2, #1
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	e7e3      	b.n	8001c18 <MBMUX_Init+0x30>
}
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	bf00      	nop
 8001c54:	08001b29 	.word	0x08001b29
 8001c58:	08001b0d 	.word	0x08001b0d
 8001c5c:	20000220 	.word	0x20000220
 8001c60:	08001be1 	.word	0x08001be1

08001c64 <MBMUX_SetCm0plusFeatureListPtr>:
  p_MBMUX_Cm0plusFeatureList = pCM0PLUS_FeatureList;
 8001c64:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <MBMUX_SetCm0plusFeatureListPtr+0x8>)
 8001c66:	6018      	str	r0, [r3, #0]
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000021c 	.word	0x2000021c

08001c70 <MBMUX_RegisterFeature>:
{
 8001c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c74:	460d      	mov	r5, r1
 8001c76:	4617      	mov	r7, r2
 8001c78:	461e      	mov	r6, r3
 8001c7a:	f8bd 8018 	ldrh.w	r8, [sp, #24]
  if (e_featID == FEAT_INFO_SYSTEM_ID)
 8001c7e:	4604      	mov	r4, r0
 8001c80:	b120      	cbz	r0, 8001c8c <MBMUX_RegisterFeature+0x1c>
    check_if_feature_provided_by_cm0plus = MBMUX_CheckIfFeatureSupportedByCm0plus(e_featID);
 8001c82:	f7ff ff1f 	bl	8001ac4 <MBMUX_CheckIfFeatureSupportedByCm0plus>
 8001c86:	b240      	sxtb	r0, r0
  if (check_if_feature_provided_by_cm0plus == 1)
 8001c88:	2801      	cmp	r0, #1
 8001c8a:	d13d      	bne.n	8001d08 <MBMUX_RegisterFeature+0x98>
    check_existing_feature_registration = MBMUX_GetFeatureChIdx(e_featID, ComType);
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff ff9c 	bl	8001bcc <MBMUX_GetFeatureChIdx>
    if (check_existing_feature_registration == MB_CHANNEL_NOT_REGISTERED)
 8001c94:	28ff      	cmp	r0, #255	; 0xff
 8001c96:	d018      	beq.n	8001cca <MBMUX_RegisterFeature+0x5a>
  if (channel_idx != MB_CHANNEL_NOT_REGISTERED)
 8001c98:	28ff      	cmp	r0, #255	; 0xff
 8001c9a:	d038      	beq.n	8001d0e <MBMUX_RegisterFeature+0x9e>
    if (ComType == MBMUX_CMD_RESP)
 8001c9c:	b9e5      	cbnz	r5, 8001cd8 <MBMUX_RegisterFeature+0x68>
      p_MBMUX_ComTable->MBMUXMapping[e_featID][MBMUX_CMD_RESP] = channel_idx;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MBMUX_RegisterFeature+0xa4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3490      	adds	r4, #144	; 0x90
 8001ca4:	f803 0014 	strb.w	r0, [r3, r4, lsl #1]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].MsgCm4Cb = MsgCb;
 8001ca8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001cac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001cb0:	6057      	str	r7, [r2, #4]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].BufSize = ComBufSize;
 8001cb2:	f8a2 800c 	strh.w	r8, [r2, #12]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].ParamBuf = ComBuffer;
 8001cb6:	6116      	str	r6, [r2, #16]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].ReturnVal = 0;
 8001cb8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
    ret = channel_idx;
 8001cc4:	b240      	sxtb	r0, r0
}
 8001cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (e_featID == FEAT_INFO_SYSTEM_ID)
 8001cca:	b11c      	cbz	r4, 8001cd4 <MBMUX_RegisterFeature+0x64>
        channel_idx = MBMUX_FindChStillUnregistered(ComType);
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f7ff ff3d 	bl	8001b4c <MBMUX_FindChStillUnregistered>
 8001cd2:	e7e1      	b.n	8001c98 <MBMUX_RegisterFeature+0x28>
        channel_idx = 0;
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	e7e1      	b.n	8001c9c <MBMUX_RegisterFeature+0x2c>
      p_MBMUX_ComTable->MBMUXMapping[e_featID][MBMUX_NOTIF_ACK] = channel_idx;
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MBMUX_RegisterFeature+0xa4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8001ce0:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].MsgCm4Cb = MsgCb;
 8001ce4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001ce8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001cec:	f8c2 7094 	str.w	r7, [r2, #148]	; 0x94
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].BufSize = ComBufSize;
 8001cf0:	f8a2 809c 	strh.w	r8, [r2, #156]	; 0x9c
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].ParamBuf = ComBuffer;
 8001cf4:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].ReturnVal = 0;
 8001cf8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d00:	2200      	movs	r2, #0
 8001d02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8001d06:	e7dd      	b.n	8001cc4 <MBMUX_RegisterFeature+0x54>
    ret = -2; /* feature not provided by CM0PLUS */
 8001d08:	f06f 0001 	mvn.w	r0, #1
 8001d0c:	e7db      	b.n	8001cc6 <MBMUX_RegisterFeature+0x56>
 8001d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d12:	e7d8      	b.n	8001cc6 <MBMUX_RegisterFeature+0x56>
 8001d14:	20000220 	.word	0x20000220

08001d18 <MBMUX_GetFeatureComPtr>:
{
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	460c      	mov	r4, r1
  channel_idx = MBMUX_GetFeatureChIdx(e_featID, ComType);
 8001d1c:	f7ff ff56 	bl	8001bcc <MBMUX_GetFeatureChIdx>
  if (channel_idx < MBMUX_CHANNEL_NUMBER)
 8001d20:	2805      	cmp	r0, #5
 8001d22:	d80f      	bhi.n	8001d44 <MBMUX_GetFeatureComPtr+0x2c>
    if (ComType == MBMUX_CMD_RESP)  /* TX */
 8001d24:	b934      	cbnz	r4, 8001d34 <MBMUX_GetFeatureComPtr+0x1c>
      com_param_ptr = (MBMUX_ComParam_t *) &p_MBMUX_ComTable->MBCmdRespParam[channel_idx];
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MBMUX_GetFeatureComPtr+0x30>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001d2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8001d32:	bd10      	pop	{r4, pc}
      com_param_ptr = (MBMUX_ComParam_t *) &p_MBMUX_ComTable->MBNotifAckParam[channel_idx];
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <MBMUX_GetFeatureComPtr+0x30>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001d3c:	00c0      	lsls	r0, r0, #3
 8001d3e:	3090      	adds	r0, #144	; 0x90
 8001d40:	4418      	add	r0, r3
 8001d42:	e7f6      	b.n	8001d32 <MBMUX_GetFeatureComPtr+0x1a>
  MBMUX_ComParam_t *com_param_ptr = NULL;
 8001d44:	2000      	movs	r0, #0
  return com_param_ptr;
 8001d46:	e7f4      	b.n	8001d32 <MBMUX_GetFeatureComPtr+0x1a>
 8001d48:	20000220 	.word	0x20000220

08001d4c <MBMUX_CommandSnd>:
{
 8001d4c:	b510      	push	{r4, lr}
  mb_ch = MBMUX_GetFeatureChIdx(e_featID, MBMUX_CMD_RESP);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f7ff ff3c 	bl	8001bcc <MBMUX_GetFeatureChIdx>
 8001d54:	4604      	mov	r4, r0
  if (p_MBMUX_ComTable->MBCmdRespParam[mb_ch].ParamCnt > p_MBMUX_ComTable->MBCmdRespParam[mb_ch].BufSize)
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <MBMUX_CommandSnd+0x2c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001d5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d62:	89da      	ldrh	r2, [r3, #14]
 8001d64:	899b      	ldrh	r3, [r3, #12]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d803      	bhi.n	8001d72 <MBMUX_CommandSnd+0x26>
  return IPCC_IF_CommandSnd(mb_ch);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7fe fec2 	bl	8000af4 <IPCC_IF_CommandSnd>
}
 8001d70:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001d72:	f7fe fedb 	bl	8000b2c <Error_Handler>
 8001d76:	e7f8      	b.n	8001d6a <MBMUX_CommandSnd+0x1e>
 8001d78:	20000220 	.word	0x20000220

08001d7c <MBMUX_AcknowledgeSnd>:
{
 8001d7c:	b508      	push	{r3, lr}
  mb_ch = MBMUX_GetFeatureChIdx(e_featID, MBMUX_NOTIF_ACK);
 8001d7e:	2101      	movs	r1, #1
 8001d80:	f7ff ff24 	bl	8001bcc <MBMUX_GetFeatureChIdx>
  return IPCC_IF_AcknowledgeSnd(mb_ch);
 8001d84:	f7fe fec4 	bl	8000b10 <IPCC_IF_AcknowledgeSnd>
}
 8001d88:	bd08      	pop	{r3, pc}
	...

08001d8c <MBMUXIF_TaskLoraNotifRcv>:

  /* USER CODE END MBMUXIF_IsrLoraNotifRcvCb_Last */
}

static void MBMUXIF_TaskLoraNotifRcv(void)
{
 8001d8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUXIF_TaskLoraNotifRcv_1 */

  /* USER CODE END MBMUXIF_TaskLoraNotifRcv_1 */
  Process_Lora_Notif(LoraComObj);
 8001d8e:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <MBMUXIF_TaskLoraNotifRcv+0xc>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	f7ff fe13 	bl	80019bc <Process_Lora_Notif>
  /* USER CODE BEGIN MBMUXIF_TaskLoraNotifRcv_Last */

  /* USER CODE END MBMUXIF_TaskLoraNotifRcv_Last */
}
 8001d96:	bd08      	pop	{r3, pc}
 8001d98:	20000224 	.word	0x20000224

08001d9c <MBMUXIF_IsrLoraNotifRcvCb>:
{
 8001d9c:	b508      	push	{r3, lr}
  LoraComObj = (MBMUX_ComParam_t *) ComObj;
 8001d9e:	4b03      	ldr	r3, [pc, #12]	; (8001dac <MBMUXIF_IsrLoraNotifRcvCb+0x10>)
 8001da0:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MbLoRaNotifRcv), CFG_SEQ_Prio_0);
 8001da2:	2100      	movs	r1, #0
 8001da4:	2002      	movs	r0, #2
 8001da6:	f004 fd83 	bl	80068b0 <UTIL_SEQ_SetTask>
}
 8001daa:	bd08      	pop	{r3, pc}
 8001dac:	20000224 	.word	0x20000224

08001db0 <MBMUXIF_IsrLoraRespRcvCb>:
{
 8001db0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_MbLoRaRespRcv);
 8001db2:	2004      	movs	r0, #4
 8001db4:	f004 fd92 	bl	80068dc <UTIL_SEQ_SetEvt>
}
 8001db8:	bd08      	pop	{r3, pc}
	...

08001dbc <MBMUXIF_LoraInit>:
{
 8001dbc:	b500      	push	{lr}
 8001dbe:	b083      	sub	sp, #12
  p_cm0plus_system_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_SYSTEM_ID);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 f98b 	bl	80020dc <MBMUXIF_SystemGetFeatCapabInfoPtr>
  cm0_vers = p_cm0plus_system_info->Feat_Info_Feature_Version >> __APP_VERSION_SUB2_SHIFT;
 8001dc6:	6842      	ldr	r2, [r0, #4]
  if (cm0_vers < (__LAST_COMPATIBLE_CM0_RELEASE >> __APP_VERSION_SUB2_SHIFT))
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MBMUXIF_LoraInit+0x6c>)
 8001dca:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8001dce:	d30b      	bcc.n	8001de8 <MBMUXIF_LoraInit+0x2c>
    ret = -4; /* version incompatibility */
 8001dd0:	f06f 0003 	mvn.w	r0, #3
  if (ret >= 0)
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	da10      	bge.n	8001dfa <MBMUXIF_LoraInit+0x3e>
  if (ret >= 0)
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	da17      	bge.n	8001e0c <MBMUXIF_LoraInit+0x50>
  if (ret >= 0)
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	db00      	blt.n	8001de2 <MBMUXIF_LoraInit+0x26>
    ret = 0;
 8001de0:	2000      	movs	r0, #0
}
 8001de2:	b003      	add	sp, #12
 8001de4:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = MBMUX_RegisterFeature(FEAT_INFO_LORAWAN_ID, MBMUX_CMD_RESP, MBMUXIF_IsrLoraRespRcvCb, aLoraCmdRespBuff, sizeof(aLoraCmdRespBuff));
 8001de8:	233c      	movs	r3, #60	; 0x3c
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MBMUXIF_LoraInit+0x70>)
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <MBMUXIF_LoraInit+0x74>)
 8001df0:	2100      	movs	r1, #0
 8001df2:	2008      	movs	r0, #8
 8001df4:	f7ff ff3c 	bl	8001c70 <MBMUX_RegisterFeature>
 8001df8:	e7ec      	b.n	8001dd4 <MBMUXIF_LoraInit+0x18>
    ret = MBMUX_RegisterFeature(FEAT_INFO_LORAWAN_ID, MBMUX_NOTIF_ACK, MBMUXIF_IsrLoraNotifRcvCb, aLoraNotifAckBuff, sizeof(aLoraNotifAckBuff));
 8001dfa:	2314      	movs	r3, #20
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <MBMUXIF_LoraInit+0x78>)
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <MBMUXIF_LoraInit+0x7c>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2008      	movs	r0, #8
 8001e06:	f7ff ff33 	bl	8001c70 <MBMUX_RegisterFeature>
 8001e0a:	e7e5      	b.n	8001dd8 <MBMUXIF_LoraInit+0x1c>
    UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_MbLoRaNotifRcv), UTIL_SEQ_RFU, MBMUXIF_TaskLoraNotifRcv);
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <MBMUXIF_LoraInit+0x80>)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2002      	movs	r0, #2
 8001e12:	f004 fe3d 	bl	8006a90 <UTIL_SEQ_RegTask>
    ret = MBMUXIF_SystemSendCm0plusRegistrationCmd(FEAT_INFO_LORAWAN_ID);
 8001e16:	2008      	movs	r0, #8
 8001e18:	f000 f97f 	bl	800211a <MBMUXIF_SystemSendCm0plusRegistrationCmd>
    if (ret < 0)
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	dadd      	bge.n	8001ddc <MBMUXIF_LoraInit+0x20>
      ret = -3;
 8001e20:	f06f 0002 	mvn.w	r0, #2
 8001e24:	e7dd      	b.n	8001de2 <MBMUXIF_LoraInit+0x26>
 8001e26:	bf00      	nop
 8001e28:	000100ff 	.word	0x000100ff
 8001e2c:	20008240 	.word	0x20008240
 8001e30:	08001db1 	.word	0x08001db1
 8001e34:	2000827c 	.word	0x2000827c
 8001e38:	08001d9d 	.word	0x08001d9d
 8001e3c:	08001d8d 	.word	0x08001d8d

08001e40 <MBMUXIF_GetLoraFeatureCmdComPtr>:
{
 8001e40:	b510      	push	{r4, lr}
  MBMUX_ComParam_t *com_param_ptr = MBMUX_GetFeatureComPtr(FEAT_INFO_LORAWAN_ID, MBMUX_CMD_RESP);
 8001e42:	2100      	movs	r1, #0
 8001e44:	2008      	movs	r0, #8
 8001e46:	f7ff ff67 	bl	8001d18 <MBMUX_GetFeatureComPtr>
  if (com_param_ptr == NULL)
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b108      	cbz	r0, 8001e52 <MBMUXIF_GetLoraFeatureCmdComPtr+0x12>
}
 8001e4e:	4620      	mov	r0, r4
 8001e50:	bd10      	pop	{r4, pc}
    Error_Handler(); /* feature isn't registered */
 8001e52:	f7fe fe6b 	bl	8000b2c <Error_Handler>
  return com_param_ptr;
 8001e56:	e7fa      	b.n	8001e4e <MBMUXIF_GetLoraFeatureCmdComPtr+0xe>

08001e58 <MBMUXIF_LoraSendCmd>:
{
 8001e58:	b508      	push	{r3, lr}
  if (MBMUX_CommandSnd(FEAT_INFO_LORAWAN_ID) == 0)
 8001e5a:	2008      	movs	r0, #8
 8001e5c:	f7ff ff76 	bl	8001d4c <MBMUX_CommandSnd>
 8001e60:	b918      	cbnz	r0, 8001e6a <MBMUXIF_LoraSendCmd+0x12>
    UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_MbLoRaRespRcv);
 8001e62:	2004      	movs	r0, #4
 8001e64:	f004 fdee 	bl	8006a44 <UTIL_SEQ_WaitEvt>
}
 8001e68:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e6a:	f7fe fe5f 	bl	8000b2c <Error_Handler>
}
 8001e6e:	e7fb      	b.n	8001e68 <MBMUXIF_LoraSendCmd+0x10>

08001e70 <MBMUXIF_IsrSystemPrioARespRcvCb>:
static void MBMUXIF_IsrSystemPrioARespRcvCb(void *ComObj)
{
  /* USER CODE BEGIN MBMUXIF_IsrSystemPrioARespRcvCb */

  /* USER CODE END MBMUXIF_IsrSystemPrioARespRcvCb */
}
 8001e70:	4770      	bx	lr

08001e72 <MBMUXIF_IsrSystemPrioBRespRcvCb>:
static void MBMUXIF_IsrSystemPrioBRespRcvCb(void *ComObj)
{
  /* USER CODE BEGIN MBMUXIF_IsrSystemPrioBRespRcvCb */

  /* USER CODE END MBMUXIF_IsrSystemPrioBRespRcvCb */
}
 8001e72:	4770      	bx	lr

08001e74 <MBMUXIF_IsrSystemPrioBNotifRcvCb>:
static void MBMUXIF_IsrSystemPrioBNotifRcvCb(void *ComObj)
{
  /* USER CODE BEGIN MBMUXIF_IsrSystemPrioBNotifRcvCb */

  /* USER CODE END MBMUXIF_IsrSystemPrioBNotifRcvCb */
}
 8001e74:	4770      	bx	lr
	...

08001e78 <MBMUXIF_TaskSystemNotifRcv>:
{
 8001e78:	b508      	push	{r3, lr}
  Process_Sys_Notif(SystemComObj);
 8001e7a:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <MBMUXIF_TaskSystemNotifRcv+0xc>)
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f7fe ffaf 	bl	8000de0 <Process_Sys_Notif>
}
 8001e82:	bd08      	pop	{r3, pc}
 8001e84:	20000b2c 	.word	0x20000b2c

08001e88 <MBMUXIF_IsrSystemNotifRcvCb>:
{
 8001e88:	b508      	push	{r3, lr}
  SystemComObj = (MBMUX_ComParam_t *) ComObj;
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <MBMUXIF_IsrSystemNotifRcvCb+0x10>)
 8001e8c:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_MbSystemNotifRcv), CFG_SEQ_Prio_0);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2001      	movs	r0, #1
 8001e92:	f004 fd0d 	bl	80068b0 <UTIL_SEQ_SetTask>
}
 8001e96:	bd08      	pop	{r3, pc}
 8001e98:	20000b2c 	.word	0x20000b2c

08001e9c <MBMUXIF_IsrSystemRespRcvCb>:
{
 8001e9c:	b508      	push	{r3, lr}
  MbSystemRespRcvFlag = 1;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <MBMUXIF_IsrSystemRespRcvCb+0x18>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
  if (AllowSequencerForSysCmd) /* To avoid using Sequencer during Init sequence */
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <MBMUXIF_IsrSystemRespRcvCb+0x1c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	b903      	cbnz	r3, 8001eac <MBMUXIF_IsrSystemRespRcvCb+0x10>
}
 8001eaa:	bd08      	pop	{r3, pc}
    UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_MbSystemRespRcv);
 8001eac:	4610      	mov	r0, r2
 8001eae:	f004 fd15 	bl	80068dc <UTIL_SEQ_SetEvt>
}
 8001eb2:	e7fa      	b.n	8001eaa <MBMUXIF_IsrSystemRespRcvCb+0xe>
 8001eb4:	20000229 	.word	0x20000229
 8001eb8:	20000228 	.word	0x20000228

08001ebc <MBMUXIF_SetCpusSynchroFlag>:
  pMb_RefTable->SynchronizeCpusAtBoot = flag;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <MBMUXIF_SetCpusSynchroFlag+0xc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8a3 0136 	strh.w	r0, [r3, #310]	; 0x136
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	2000004c 	.word	0x2000004c

08001ecc <MBMUXIF_SystemInit>:
{
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed0:	2248      	movs	r2, #72	; 0x48
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	a802      	add	r0, sp, #8
 8001ed6:	f005 f903 	bl	80070e0 <memset>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <MBMUXIF_SystemInit+0x134>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0c1b      	lsrs	r3, r3, #16
  MBSYS_RefTable.ChipRevId = LL_DBGMCU_GetRevisionID();
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <MBMUXIF_SystemInit+0x138>)
 8001ee2:	f8a2 3138 	strh.w	r3, [r2, #312]	; 0x138
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 8001ee6:	4c48      	ldr	r4, [pc, #288]	; (8002008 <MBMUXIF_SystemInit+0x13c>)
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f001 fd6d 	bl	80039c8 <HAL_FLASHEx_OBGetConfig>
  if (OptionsBytesStruct.IPCCdataBufAddr != (uint32_t) pMb_RefTable)
 8001eee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001ef0:	4b46      	ldr	r3, [pc, #280]	; (800200c <MBMUXIF_SystemInit+0x140>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d048      	beq.n	8001f8a <MBMUXIF_SystemInit+0xbe>
    APP_PPRINTF("There is a difference between the MAPPING_TABLE placement in memory: 0x%X \r\n", (uint32_t) pMb_RefTable);
 8001ef8:	4b44      	ldr	r3, [pc, #272]	; (800200c <MBMUXIF_SystemInit+0x140>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	4b44      	ldr	r3, [pc, #272]	; (8002010 <MBMUXIF_SystemInit+0x144>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	4611      	mov	r1, r2
 8001f04:	4610      	mov	r0, r2
 8001f06:	f004 fb83 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d1f4      	bne.n	8001ef8 <MBMUXIF_SystemInit+0x2c>
    APP_PPRINTF("and the address calculated according to the IPCCDBA option byte: 0x%X \r\n",
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <MBMUXIF_SystemInit+0x13c>)
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <MBMUXIF_SystemInit+0x148>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f004 fb78 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d1f4      	bne.n	8001f0e <MBMUXIF_SystemInit+0x42>
    APP_PPRINTF("IPCCDBA is automatically updated\n\rSystem restarting...\r\n\r\n");
 8001f24:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <MBMUXIF_SystemInit+0x14c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f004 fb70 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d1f7      	bne.n	8001f24 <MBMUXIF_SystemInit+0x58>
    APP_PPRINTF("Please check the CM4\\MbMux\\mbmuxif_sys.c for more info \r\n\r\n");
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <MBMUXIF_SystemInit+0x150>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f004 fb68 	bl	8006610 <UTIL_ADV_TRACE_COND_FSend>
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d1f7      	bne.n	8001f34 <MBMUXIF_SystemInit+0x68>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8001f44:	f004 fafe 	bl	8006544 <UTIL_ADV_TRACE_IsBufferEmpty>
 8001f48:	2801      	cmp	r0, #1
 8001f4a:	d1fb      	bne.n	8001f44 <MBMUXIF_SystemInit+0x78>
    if (MBSYS_RefTable.ChipRevId == 0x1001)
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <MBMUXIF_SystemInit+0x138>)
 8001f4e:	f8b3 2138 	ldrh.w	r2, [r3, #312]	; 0x138
 8001f52:	f241 0301 	movw	r3, #4097	; 0x1001
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d02e      	beq.n	8001fb8 <MBMUXIF_SystemInit+0xec>
    HAL_FLASH_Unlock();
 8001f5a:	f001 fa47 	bl	80033ec <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <MBMUXIF_SystemInit+0x154>)
 8001f60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f64:	611a      	str	r2, [r3, #16]
    HAL_FLASH_OB_Unlock();
 8001f66:	f001 fa67 	bl	8003438 <HAL_FLASH_OB_Unlock>
    OptionsBytesStruct.OptionType = OPTIONBYTE_IPCC_BUF_ADDR;
 8001f6a:	4827      	ldr	r0, [pc, #156]	; (8002008 <MBMUXIF_SystemInit+0x13c>)
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	6003      	str	r3, [r0, #0]
    OptionsBytesStruct.IPCCdataBufAddr = (uint32_t) pMb_RefTable;
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <MBMUXIF_SystemInit+0x140>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6543      	str	r3, [r0, #84]	; 0x54
    if (HAL_FLASHEx_OBProgram(&OptionsBytesStruct) != HAL_OK)
 8001f76:	f001 fcbd 	bl	80038f4 <HAL_FLASHEx_OBProgram>
 8001f7a:	bb50      	cbnz	r0, 8001fd2 <MBMUXIF_SystemInit+0x106>
    if (HAL_FLASH_OB_Launch() != HAL_OK)
 8001f7c:	f001 fa86 	bl	800348c <HAL_FLASH_OB_Launch>
 8001f80:	bb50      	cbnz	r0, 8001fd8 <MBMUXIF_SystemInit+0x10c>
    (void) HAL_FLASH_OB_Lock();
 8001f82:	f001 fa73 	bl	800346c <HAL_FLASH_OB_Lock>
    (void) HAL_FLASH_Lock();
 8001f86:	f001 fa49 	bl	800341c <HAL_FLASH_Lock>
  MBMUX_Init(pMb_RefTable);
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <MBMUXIF_SystemInit+0x140>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f7ff fe2b 	bl	8001be8 <MBMUX_Init>
  ret = MBMUX_RegisterFeature(FEAT_INFO_SYSTEM_ID, MBMUX_CMD_RESP, MBMUXIF_IsrSystemRespRcvCb, aSystemCmdRespBuff, sizeof(aSystemCmdRespBuff));
 8001f92:	231c      	movs	r3, #28
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <MBMUXIF_SystemInit+0x158>)
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <MBMUXIF_SystemInit+0x15c>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	f7ff fe67 	bl	8001c70 <MBMUX_RegisterFeature>
  if (ret >= 0)
 8001fa2:	1e04      	subs	r4, r0, #0
 8001fa4:	da1b      	bge.n	8001fde <MBMUXIF_SystemInit+0x112>
  if (ret >= 0)
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	da23      	bge.n	8001ff2 <MBMUXIF_SystemInit+0x126>
  MBMUXIF_SetCpusSynchroFlag(CPUS_BOOT_SYNC_PREVENT_CPU2_TO_START);
 8001faa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fae:	f7ff ff85 	bl	8001ebc <MBMUXIF_SetCpusSynchroFlag>
}
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	b014      	add	sp, #80	; 0x50
 8001fb6:	bd10      	pop	{r4, pc}
      HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 8001fb8:	a802      	add	r0, sp, #8
 8001fba:	f002 fdcd 	bl	8004b58 <HAL_RCC_GetOscConfig>
      RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	930c      	str	r3, [sp, #48]	; 0x30
      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc2:	a802      	add	r0, sp, #8
 8001fc4:	f002 f938 	bl	8004238 <HAL_RCC_OscConfig>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d0c6      	beq.n	8001f5a <MBMUXIF_SystemInit+0x8e>
        Error_Handler();
 8001fcc:	f7fe fdae 	bl	8000b2c <Error_Handler>
 8001fd0:	e7c3      	b.n	8001f5a <MBMUXIF_SystemInit+0x8e>
      Error_Handler();
 8001fd2:	f7fe fdab 	bl	8000b2c <Error_Handler>
 8001fd6:	e7d1      	b.n	8001f7c <MBMUXIF_SystemInit+0xb0>
      Error_Handler();
 8001fd8:	f7fe fda8 	bl	8000b2c <Error_Handler>
 8001fdc:	e7d1      	b.n	8001f82 <MBMUXIF_SystemInit+0xb6>
    ret = MBMUX_RegisterFeature(FEAT_INFO_SYSTEM_ID, MBMUX_NOTIF_ACK, MBMUXIF_IsrSystemNotifRcvCb, aSystemNotifAckBuff, sizeof(aSystemNotifAckBuff));
 8001fde:	2314      	movs	r3, #20
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <MBMUXIF_SystemInit+0x160>)
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <MBMUXIF_SystemInit+0x164>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fe41 	bl	8001c70 <MBMUX_RegisterFeature>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	e7d9      	b.n	8001fa6 <MBMUXIF_SystemInit+0xda>
    UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_MbSystemNotifRcv), UTIL_SEQ_RFU, MBMUXIF_TaskSystemNotifRcv);
 8001ff2:	4a10      	ldr	r2, [pc, #64]	; (8002034 <MBMUXIF_SystemInit+0x168>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f004 fd4a 	bl	8006a90 <UTIL_SEQ_RegTask>
    ret = 0;
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	e7d4      	b.n	8001faa <MBMUXIF_SystemInit+0xde>
 8002000:	e0042000 	.word	0xe0042000
 8002004:	20008000 	.word	0x20008000
 8002008:	2000022c 	.word	0x2000022c
 800200c:	2000004c 	.word	0x2000004c
 8002010:	080075fc 	.word	0x080075fc
 8002014:	0800764c 	.word	0x0800764c
 8002018:	08007698 	.word	0x08007698
 800201c:	080076d4 	.word	0x080076d4
 8002020:	58004000 	.word	0x58004000
 8002024:	20008290 	.word	0x20008290
 8002028:	08001e9d 	.word	0x08001e9d
 800202c:	200082ac 	.word	0x200082ac
 8002030:	08001e89 	.word	0x08001e89
 8002034:	08001e79 	.word	0x08001e79

08002038 <MBMUXIF_WaitCm0MbmuxIsInitialized>:
  while (pMb_RefTable->SynchronizeCpusAtBoot != CPUS_BOOT_SYNC_CPU2_INIT_COMPLETED)
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <MBMUXIF_WaitCm0MbmuxIsInitialized+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 8002040:	b29b      	uxth	r3, r3
 8002042:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002046:	4293      	cmp	r3, r2
 8002048:	d1f6      	bne.n	8002038 <MBMUXIF_WaitCm0MbmuxIsInitialized>
}
 800204a:	4770      	bx	lr
 800204c:	2000004c 	.word	0x2000004c

08002050 <MBMUXIF_GetSystemFeatureCmdComPtr>:
{
 8002050:	b510      	push	{r4, lr}
  MBMUX_ComParam_t *com_param_ptr = MBMUX_GetFeatureComPtr(SystemPrioFeat, MBMUX_CMD_RESP);
 8002052:	2100      	movs	r1, #0
 8002054:	f7ff fe60 	bl	8001d18 <MBMUX_GetFeatureComPtr>
  if (com_param_ptr == NULL)
 8002058:	4604      	mov	r4, r0
 800205a:	b108      	cbz	r0, 8002060 <MBMUXIF_GetSystemFeatureCmdComPtr+0x10>
}
 800205c:	4620      	mov	r0, r4
 800205e:	bd10      	pop	{r4, pc}
    Error_Handler(); /* feature isn't registered */
 8002060:	f7fe fd64 	bl	8000b2c <Error_Handler>
  return com_param_ptr;
 8002064:	e7fa      	b.n	800205c <MBMUXIF_GetSystemFeatureCmdComPtr+0xc>
	...

08002068 <MBMUXIF_SystemSendCmd>:
  if (SystemPrioFeat == FEAT_INFO_SYSTEM_ID)
 8002068:	b100      	cbz	r0, 800206c <MBMUXIF_SystemSendCmd+0x4>
 800206a:	4770      	bx	lr
{
 800206c:	b508      	push	{r3, lr}
    MbSystemRespRcvFlag = 0;  /* To avoid using Sequencer during Init sequence for SysCmd  */
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <MBMUXIF_SystemSendCmd+0x30>)
 8002070:	7018      	strb	r0, [r3, #0]
    if (MBMUX_CommandSnd(FEAT_INFO_SYSTEM_ID) == 0)
 8002072:	f7ff fe6b 	bl	8001d4c <MBMUX_CommandSnd>
 8002076:	b958      	cbnz	r0, 8002090 <MBMUXIF_SystemSendCmd+0x28>
      if (AllowSequencerForSysCmd)
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <MBMUXIF_SystemSendCmd+0x34>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b923      	cbnz	r3, 8002088 <MBMUXIF_SystemSendCmd+0x20>
        while (!MbSystemRespRcvFlag) {}
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MBMUXIF_SystemSendCmd+0x30>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0fb      	beq.n	800207e <MBMUXIF_SystemSendCmd+0x16>
}
 8002086:	bd08      	pop	{r3, pc}
        UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_MbSystemRespRcv);
 8002088:	2001      	movs	r0, #1
 800208a:	f004 fcdb 	bl	8006a44 <UTIL_SEQ_WaitEvt>
 800208e:	e7fa      	b.n	8002086 <MBMUXIF_SystemSendCmd+0x1e>
      Error_Handler();
 8002090:	f7fe fd4c 	bl	8000b2c <Error_Handler>
}
 8002094:	e7f7      	b.n	8002086 <MBMUXIF_SystemSendCmd+0x1e>
 8002096:	bf00      	nop
 8002098:	20000229 	.word	0x20000229
 800209c:	20000228 	.word	0x20000228

080020a0 <MBMUXIF_SystemSendAck>:
{
 80020a0:	b508      	push	{r3, lr}
  if (MBMUX_AcknowledgeSnd(SystemPrioFeat) != 0)
 80020a2:	f7ff fe6b 	bl	8001d7c <MBMUX_AcknowledgeSnd>
 80020a6:	b900      	cbnz	r0, 80020aa <MBMUXIF_SystemSendAck+0xa>
}
 80020a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020aa:	f7fe fd3f 	bl	8000b2c <Error_Handler>
}
 80020ae:	e7fb      	b.n	80020a8 <MBMUXIF_SystemSendAck+0x8>

080020b0 <MBMUXIF_IsrSystemPrioANotifRcvCb>:
{
 80020b0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_Handler();
 80020b2:	f004 fe4d 	bl	8006d50 <UTIL_TIMER_IRQ_Handler>
  MBMUXIF_SystemSendAck(FEAT_INFO_SYSTEM_NOTIF_PRIO_A_ID);
 80020b6:	2002      	movs	r0, #2
 80020b8:	f7ff fff2 	bl	80020a0 <MBMUXIF_SystemSendAck>
}
 80020bc:	bd08      	pop	{r3, pc}

080020be <MBMUXIF_SystemSendCm0plusInfoListReq>:
{
 80020be:	b510      	push	{r4, lr}
  com_obj = MBMUXIF_GetSystemFeatureCmdComPtr(FEAT_INFO_SYSTEM_ID);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7ff ffc5 	bl	8002050 <MBMUXIF_GetSystemFeatureCmdComPtr>
  if (com_obj != NULL)
 80020c6:	b138      	cbz	r0, 80020d8 <MBMUXIF_SystemSendCm0plusInfoListReq+0x1a>
 80020c8:	4604      	mov	r4, r0
    com_obj->MsgId = SYS_GET_INFO_LIST_MSG_ID;
 80020ca:	2000      	movs	r0, #0
 80020cc:	6020      	str	r0, [r4, #0]
    com_obj->ParamCnt = 0;
 80020ce:	81e0      	strh	r0, [r4, #14]
    MBMUXIF_SystemSendCmd(FEAT_INFO_SYSTEM_ID);
 80020d0:	f7ff ffca 	bl	8002068 <MBMUXIF_SystemSendCmd>
    ret = com_obj->ReturnVal;
 80020d4:	6960      	ldr	r0, [r4, #20]
}
 80020d6:	bd10      	pop	{r4, pc}
  uint32_t ret = 0;
 80020d8:	2000      	movs	r0, #0
 80020da:	e7fc      	b.n	80020d6 <MBMUXIF_SystemSendCm0plusInfoListReq+0x18>

080020dc <MBMUXIF_SystemGetFeatCapabInfoPtr>:
{
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	4604      	mov	r4, r0
  p_cm0plus_supported_features_list = MBMUXIF_SystemSendCm0plusInfoListReq();
 80020e0:	f7ff ffed 	bl	80020be <MBMUXIF_SystemSendCm0plusInfoListReq>
  if (p_cm0plus_supported_features_list != NULL)
 80020e4:	4606      	mov	r6, r0
 80020e6:	b1b0      	cbz	r0, 8002116 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x3a>
    cm0plus_nr_of_supported_features = p_cm0plus_supported_features_list->Feat_Info_Cnt;
 80020e8:	7800      	ldrb	r0, [r0, #0]
    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 80020ea:	2300      	movs	r3, #0
  FEAT_INFO_Param_t  *p_feature = NULL;
 80020ec:	461d      	mov	r5, r3
    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 80020ee:	4283      	cmp	r3, r0
 80020f0:	d209      	bcs.n	8002106 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x2a>
      p_feature = i + p_cm0plus_supported_features_list->Feat_Info_TableAddress;
 80020f2:	6871      	ldr	r1, [r6, #4]
 80020f4:	011a      	lsls	r2, r3, #4
 80020f6:	eb01 1503 	add.w	r5, r1, r3, lsl #4
      if (p_feature->Feat_Info_Feature_Id == e_featID)
 80020fa:	5c8a      	ldrb	r2, [r1, r2]
 80020fc:	42a2      	cmp	r2, r4
 80020fe:	d008      	beq.n	8002112 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x36>
    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 8002100:	3301      	adds	r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	e7f3      	b.n	80020ee <MBMUXIF_SystemGetFeatCapabInfoPtr+0x12>
  uint8_t found = 0;
 8002106:	2300      	movs	r3, #0
  if (!found)
 8002108:	b90b      	cbnz	r3, 800210e <MBMUXIF_SystemGetFeatCapabInfoPtr+0x32>
    Error_Handler();
 800210a:	f7fe fd0f 	bl	8000b2c <Error_Handler>
}
 800210e:	4628      	mov	r0, r5
 8002110:	bd70      	pop	{r4, r5, r6, pc}
        found = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	e7f8      	b.n	8002108 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x2c>
  FEAT_INFO_Param_t  *p_feature = NULL;
 8002116:	4605      	mov	r5, r0
 8002118:	e7f7      	b.n	800210a <MBMUXIF_SystemGetFeatCapabInfoPtr+0x2e>

0800211a <MBMUXIF_SystemSendCm0plusRegistrationCmd>:
{
 800211a:	b538      	push	{r3, r4, r5, lr}
 800211c:	4604      	mov	r4, r0
  com_obj = MBMUXIF_GetSystemFeatureCmdComPtr(FEAT_INFO_SYSTEM_ID);
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff ff96 	bl	8002050 <MBMUXIF_GetSystemFeatureCmdComPtr>
  if (com_obj != NULL)
 8002124:	b158      	cbz	r0, 800213e <MBMUXIF_SystemSendCm0plusRegistrationCmd+0x24>
 8002126:	4605      	mov	r5, r0
    com_obj->MsgId = SYS_REGISTER_FEATURE_MSG_ID;
 8002128:	2301      	movs	r3, #1
 800212a:	6003      	str	r3, [r0, #0]
    com_buffer = com_obj->ParamBuf;
 800212c:	6902      	ldr	r2, [r0, #16]
    com_buffer[i++] = (uint32_t) e_featID;
 800212e:	6014      	str	r4, [r2, #0]
    com_obj->ParamCnt = i;
 8002130:	81c3      	strh	r3, [r0, #14]
    MBMUXIF_SystemSendCmd(FEAT_INFO_SYSTEM_ID);
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff ff98 	bl	8002068 <MBMUXIF_SystemSendCmd>
    ret = com_obj->ReturnVal;
 8002138:	6968      	ldr	r0, [r5, #20]
}
 800213a:	b240      	sxtb	r0, r0
 800213c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 800213e:	2000      	movs	r0, #0
 8002140:	e7fb      	b.n	800213a <MBMUXIF_SystemSendCm0plusRegistrationCmd+0x20>
	...

08002144 <MBMUXIF_SystemPrio_Add>:
{
 8002144:	b510      	push	{r4, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	4604      	mov	r4, r0
  switch (SystemPrioFeat)
 800214a:	1e43      	subs	r3, r0, #1
 800214c:	2b03      	cmp	r3, #3
 800214e:	d80c      	bhi.n	800216a <MBMUXIF_SystemPrio_Add+0x26>
 8002150:	e8df f003 	tbb	[pc, r3]
 8002154:	221a1202 	.word	0x221a1202
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_CMD_RESP, MBMUXIF_IsrSystemPrioARespRcvCb, aSystemPrioACmdRespBuff, sizeof(aSystemPrioACmdRespBuff));
 8002158:	2304      	movs	r3, #4
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <MBMUXIF_SystemPrio_Add+0x6c>)
 800215e:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <MBMUXIF_SystemPrio_Add+0x70>)
 8002160:	2100      	movs	r1, #0
 8002162:	f7ff fd85 	bl	8001c70 <MBMUX_RegisterFeature>
  if (ret >= 0)
 8002166:	2800      	cmp	r0, #0
 8002168:	db04      	blt.n	8002174 <MBMUXIF_SystemPrio_Add+0x30>
    ret = MBMUXIF_SystemSendCm0plusRegistrationCmd(SystemPrioFeat);
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff ffd5 	bl	800211a <MBMUXIF_SystemSendCm0plusRegistrationCmd>
    if (ret < 0)
 8002170:	2800      	cmp	r0, #0
 8002172:	db19      	blt.n	80021a8 <MBMUXIF_SystemPrio_Add+0x64>
}
 8002174:	b002      	add	sp, #8
 8002176:	bd10      	pop	{r4, pc}
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_NOTIF_ACK, MBMUXIF_IsrSystemPrioANotifRcvCb, aSystemPrioANotifAckBuff, sizeof(aSystemPrioANotifAckBuff));
 8002178:	2304      	movs	r3, #4
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MBMUXIF_SystemPrio_Add+0x74>)
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <MBMUXIF_SystemPrio_Add+0x78>)
 8002180:	2101      	movs	r1, #1
 8002182:	f7ff fd75 	bl	8001c70 <MBMUX_RegisterFeature>
      break;
 8002186:	e7ee      	b.n	8002166 <MBMUXIF_SystemPrio_Add+0x22>
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_CMD_RESP, MBMUXIF_IsrSystemPrioBRespRcvCb, aSystemPrioBCmdRespBuff, sizeof(aSystemPrioBCmdRespBuff));
 8002188:	2304      	movs	r3, #4
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MBMUXIF_SystemPrio_Add+0x7c>)
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <MBMUXIF_SystemPrio_Add+0x80>)
 8002190:	2100      	movs	r1, #0
 8002192:	f7ff fd6d 	bl	8001c70 <MBMUX_RegisterFeature>
      break;
 8002196:	e7e6      	b.n	8002166 <MBMUXIF_SystemPrio_Add+0x22>
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_NOTIF_ACK, MBMUXIF_IsrSystemPrioBNotifRcvCb, aSystemPrioBNotifAckBuff, sizeof(aSystemPrioBNotifAckBuff));
 8002198:	2304      	movs	r3, #4
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <MBMUXIF_SystemPrio_Add+0x84>)
 800219e:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <MBMUXIF_SystemPrio_Add+0x88>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	f7ff fd65 	bl	8001c70 <MBMUX_RegisterFeature>
      break;
 80021a6:	e7de      	b.n	8002166 <MBMUXIF_SystemPrio_Add+0x22>
      ret = -3;
 80021a8:	f06f 0002 	mvn.w	r0, #2
 80021ac:	e7e2      	b.n	8002174 <MBMUXIF_SystemPrio_Add+0x30>
 80021ae:	bf00      	nop
 80021b0:	200082c0 	.word	0x200082c0
 80021b4:	08001e71 	.word	0x08001e71
 80021b8:	200082c4 	.word	0x200082c4
 80021bc:	080020b1 	.word	0x080020b1
 80021c0:	200082c8 	.word	0x200082c8
 80021c4:	08001e73 	.word	0x08001e73
 80021c8:	200082cc 	.word	0x200082cc
 80021cc:	08001e75 	.word	0x08001e75

080021d0 <MBMUXIF_TraceInit>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int8_t MBMUXIF_TraceInit(void)
{
 80021d0:	b500      	push	{lr}
 80021d2:	b083      	sub	sp, #12
  int8_t ret;
  /* USER CODE BEGIN MBMUXIF_TraceInit_1 */

  /* USER CODE END MBMUXIF_TraceInit_1 */

  ret = MBMUX_RegisterFeature(FEAT_INFO_TRACE_ID, MBMUX_NOTIF_ACK, MBMUXIF_IsrTraceNotifRcvCb, aTraceNotifAckBuff, sizeof(aTraceNotifAckBuff));
 80021d4:	232c      	movs	r3, #44	; 0x2c
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MBMUXIF_TraceInit+0x30>)
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <MBMUXIF_TraceInit+0x34>)
 80021dc:	2101      	movs	r1, #1
 80021de:	2006      	movs	r0, #6
 80021e0:	f7ff fd46 	bl	8001c70 <MBMUX_RegisterFeature>
  if (ret >= 0)
 80021e4:	2800      	cmp	r0, #0
 80021e6:	da02      	bge.n	80021ee <MBMUXIF_TraceInit+0x1e>

  /* USER CODE BEGIN MBMUXIF_TraceInit_Last */

  /* USER CODE END MBMUXIF_TraceInit_Last */
  return ret;
}
 80021e8:	b003      	add	sp, #12
 80021ea:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = MBMUXIF_SystemSendCm0plusRegistrationCmd(FEAT_INFO_TRACE_ID);
 80021ee:	2006      	movs	r0, #6
 80021f0:	f7ff ff93 	bl	800211a <MBMUXIF_SystemSendCm0plusRegistrationCmd>
    if (ret < 0)
 80021f4:	2800      	cmp	r0, #0
 80021f6:	daf7      	bge.n	80021e8 <MBMUXIF_TraceInit+0x18>
      ret = -3;
 80021f8:	f06f 0002 	mvn.w	r0, #2
 80021fc:	e7f4      	b.n	80021e8 <MBMUXIF_TraceInit+0x18>
 80021fe:	bf00      	nop
 8002200:	200082d0 	.word	0x200082d0
 8002204:	0800221b 	.word	0x0800221b

08002208 <MBMUXIF_TraceSendAck>:

void MBMUXIF_TraceSendAck(void)
{
 8002208:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUXIF_TraceSendAck_1 */

  /* USER CODE END MBMUXIF_TraceSendAck_1 */
  if (MBMUX_AcknowledgeSnd(FEAT_INFO_TRACE_ID) != 0)
 800220a:	2006      	movs	r0, #6
 800220c:	f7ff fdb6 	bl	8001d7c <MBMUX_AcknowledgeSnd>
 8002210:	b900      	cbnz	r0, 8002214 <MBMUXIF_TraceSendAck+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN MBMUXIF_TraceSendAck_Last */

  /* USER CODE END MBMUXIF_TraceSendAck_Last */
}
 8002212:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002214:	f7fe fc8a 	bl	8000b2c <Error_Handler>
}
 8002218:	e7fb      	b.n	8002212 <MBMUXIF_TraceSendAck+0xa>

0800221a <MBMUXIF_IsrTraceNotifRcvCb>:

/* USER CODE END EFD */

/* Private functions ---------------------------------------------------------*/
static void MBMUXIF_IsrTraceNotifRcvCb(void *ComObj)
{
 800221a:	b510      	push	{r4, lr}
  uint16_t bufsize;
  UTIL_ADV_TRACE_Status_t ret;

  TraceComObj = (MBMUX_ComParam_t *) ComObj;

  notif_ack_id = TraceComObj->MsgId;
 800221c:	6803      	ldr	r3, [r0, #0]

  switch (notif_ack_id)
 800221e:	b113      	cbz	r3, 8002226 <MBMUXIF_IsrTraceNotifRcvCb+0xc>
    default:
      break;
  }

  /* Send ack */
  MBMUXIF_TraceSendAck();
 8002220:	f7ff fff2 	bl	8002208 <MBMUXIF_TraceSendAck>
  /* USER CODE BEGIN MBMUXIF_IsrTraceNotifRcvCb_Last */

  /* USER CODE END MBMUXIF_IsrTraceNotifRcvCb_Last */
}
 8002224:	bd10      	pop	{r4, pc}
 8002226:	4604      	mov	r4, r0
      buffer = (uint8_t *) TraceComObj->ParamBuf[0];
 8002228:	6903      	ldr	r3, [r0, #16]
      ret = UTIL_ADV_TRACE_Send(buffer, bufsize);
 800222a:	8899      	ldrh	r1, [r3, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	f004 fa53 	bl	80066d8 <UTIL_ADV_TRACE_Send>
      TraceComObj->ParamCnt = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	81e3      	strh	r3, [r4, #14]
      TraceComObj->ReturnVal = (uint32_t)ret;
 8002236:	6160      	str	r0, [r4, #20]
      break;
 8002238:	e7f2      	b.n	8002220 <MBMUXIF_IsrTraceNotifRcvCb+0x6>

0800223a <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  bx lr
 8002246:	4770      	bx	lr

08002248 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002248:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800224a:	3004      	adds	r0, #4

0800224c <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800224c:	4288      	cmp	r0, r1
  bcc FillZerobss
 800224e:	d3fb      	bcc.n	8002248 <FillZerobss>
  bx lr
 8002250:	4770      	bx	lr
	...

08002254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002254:	480e      	ldr	r0, [pc, #56]	; (8002290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002256:	4685      	mov	sp, r0

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002258:	480e      	ldr	r0, [pc, #56]	; (8002294 <LoopForever+0x6>)
 800225a:	490f      	ldr	r1, [pc, #60]	; (8002298 <LoopForever+0xa>)
 800225c:	2300      	movs	r3, #0
 800225e:	f7ff fff5 	bl	800224c <LoopFillZerobss>

/* Zero fill the MB_MEM1 segments. */
  INIT_BSS _sMB_MEM1, _eMB_MEM1
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <LoopForever+0xe>)
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <LoopForever+0x12>)
 8002266:	2300      	movs	r3, #0
 8002268:	f7ff fff0 	bl	800224c <LoopFillZerobss>

/* Zero fill the MAPPING_TABLE segments. */
  INIT_BSS _sMAPPING_TABLE, _eMAPPING_TABLE
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <LoopForever+0x16>)
 800226e:	490e      	ldr	r1, [pc, #56]	; (80022a8 <LoopForever+0x1a>)
 8002270:	2300      	movs	r3, #0
 8002272:	f7ff ffeb 	bl	800224c <LoopFillZerobss>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002276:	480d      	ldr	r0, [pc, #52]	; (80022ac <LoopForever+0x1e>)
 8002278:	490d      	ldr	r1, [pc, #52]	; (80022b0 <LoopForever+0x22>)
 800227a:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <LoopForever+0x26>)
 800227c:	2300      	movs	r3, #0
 800227e:	f7ff ffdf 	bl	8002240 <LoopCopyDataInit>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002282:	f000 f901 	bl	8002488 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002286:	f004 ff07 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228a:	f7fe fc99 	bl	8000bc0 <main>

0800228e <LoopForever>:

LoopForever:
    b LoopForever
 800228e:	e7fe      	b.n	800228e <LoopForever>
  ldr   r0, =_estack
 8002290:	20008000 	.word	0x20008000
  INIT_BSS _sbss, _ebss
 8002294:	20000060 	.word	0x20000060
 8002298:	20000b48 	.word	0x20000b48
  INIT_BSS _sMB_MEM1, _eMB_MEM1
 800229c:	2000813c 	.word	0x2000813c
 80022a0:	200082fc 	.word	0x200082fc
  INIT_BSS _sMAPPING_TABLE, _eMAPPING_TABLE
 80022a4:	20008000 	.word	0x20008000
 80022a8:	2000813c 	.word	0x2000813c
  INIT_DATA _sdata, _edata, _sidata
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000060 	.word	0x20000060
 80022b4:	080078a0 	.word	0x080078a0

080022b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC_IRQHandler>
	...

080022bc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80022c0:	2400      	movs	r4, #0
 80022c2:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ca:	f042 0202 	orr.w	r2, r2, #2
 80022ce:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80022d8:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <BSP_LED_Init+0x50>)
 80022dc:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 80022e0:	9601      	str	r6, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80022e6:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e8:	2302      	movs	r3, #2
 80022ea:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <BSP_LED_Init+0x54>)
 80022ee:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80022f2:	a901      	add	r1, sp, #4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f001 fbb1 	bl	8003a5c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80022fa:	4622      	mov	r2, r4
 80022fc:	4631      	mov	r1, r6
 80022fe:	4628      	mov	r0, r5
 8002300:	f001 fce0 	bl	8003cc4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002304:	4620      	mov	r0, r4
 8002306:	b006      	add	sp, #24
 8002308:	bd70      	pop	{r4, r5, r6, pc}
 800230a:	bf00      	nop
 800230c:	08007728 	.word	0x08007728
 8002310:	08007730 	.word	0x08007730

08002314 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002314:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8002316:	2201      	movs	r2, #1
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <BSP_LED_On+0x18>)
 800231a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <BSP_LED_On+0x1c>)
 8002320:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002324:	f001 fcce 	bl	8003cc4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002328:	2000      	movs	r0, #0
 800232a:	bd08      	pop	{r3, pc}
 800232c:	08007728 	.word	0x08007728
 8002330:	08007730 	.word	0x08007730

08002334 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002334:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8002336:	2200      	movs	r2, #0
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <BSP_LED_Off+0x18>)
 800233a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <BSP_LED_Off+0x1c>)
 8002340:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002344:	f001 fcbe 	bl	8003cc4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002348:	2000      	movs	r0, #0
 800234a:	bd08      	pop	{r3, pc}
 800234c:	08007728 	.word	0x08007728
 8002350:	08007730 	.word	0x08007730

08002354 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002354:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <BSP_LED_Toggle+0x18>)
 8002358:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <BSP_LED_Toggle+0x1c>)
 800235e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002362:	f001 fcb4 	bl	8003cce <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8002366:	2000      	movs	r0, #0
 8002368:	bd08      	pop	{r3, pc}
 800236a:	bf00      	nop
 800236c:	08007728 	.word	0x08007728
 8002370:	08007730 	.word	0x08007730

08002374 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002374:	b530      	push	{r4, r5, lr}
 8002376:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002378:	2300      	movs	r3, #0
 800237a:	9303      	str	r3, [sp, #12]
 800237c:	9304      	str	r3, [sp, #16]
 800237e:	9305      	str	r3, [sp, #20]
 8002380:	9306      	str	r3, [sp, #24]
 8002382:	9307      	str	r3, [sp, #28]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002384:	4604      	mov	r4, r0
 8002386:	b9f0      	cbnz	r0, 80023c6 <BSP_PB_Init+0x52>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800239c:	9b00      	ldr	r3, [sp, #0]
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <BSP_PB_Init+0xd8>)
 80023a0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80023a4:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023aa:	2302      	movs	r3, #2
 80023ac:	9306      	str	r3, [sp, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80023ae:	bb31      	cbnz	r1, 80023fe <BSP_PB_Init+0x8a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80023b4:	a903      	add	r1, sp, #12
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <BSP_PB_Init+0xdc>)
 80023b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80023bc:	f001 fb4e 	bl	8003a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 80023c0:	2000      	movs	r0, #0
 80023c2:	b009      	add	sp, #36	; 0x24
 80023c4:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80023c6:	2801      	cmp	r0, #1
 80023c8:	d00d      	beq.n	80023e6 <BSP_PB_Init+0x72>
 80023ca:	2802      	cmp	r0, #2
 80023cc:	d1e7      	bne.n	800239e <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d4:	f042 0204 	orr.w	r2, r2, #4
 80023d8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80023e2:	9b02      	ldr	r3, [sp, #8]
}
 80023e4:	e7db      	b.n	800239e <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80023fa:	9b01      	ldr	r3, [sp, #4]
}
 80023fc:	e7cf      	b.n	800239e <BSP_PB_Init+0x2a>
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80023fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002402:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002404:	a903      	add	r1, sp, #12
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <BSP_PB_Init+0xdc>)
 8002408:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800240c:	f001 fb26 	bl	8003a5c <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002410:	4d10      	ldr	r5, [pc, #64]	; (8002454 <BSP_PB_Init+0xe0>)
 8002412:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <BSP_PB_Init+0xe4>)
 8002418:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800241c:	4628      	mov	r0, r5
 800241e:	f000 ffdf 	bl	80033e0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <BSP_PB_Init+0xe8>)
 8002424:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8002428:	2100      	movs	r1, #0
 800242a:	4628      	mov	r0, r5
 800242c:	f000 ffd1 	bl	80033d2 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <BSP_PB_Init+0xec>)
 8002432:	571d      	ldrsb	r5, [r3, r4]
 8002434:	2200      	movs	r2, #0
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <BSP_PB_Init+0xf0>)
 8002438:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800243c:	4628      	mov	r0, r5
 800243e:	f000 fcf7 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002442:	4628      	mov	r0, r5
 8002444:	f000 fd28 	bl	8002e98 <HAL_NVIC_EnableIRQ>
 8002448:	e7ba      	b.n	80023c0 <BSP_PB_Init+0x4c>
 800244a:	bf00      	nop
 800244c:	08007714 	.word	0x08007714
 8002450:	0800771c 	.word	0x0800771c
 8002454:	20000b30 	.word	0x20000b30
 8002458:	08007748 	.word	0x08007748
 800245c:	0800773c 	.word	0x0800773c
 8002460:	08007710 	.word	0x08007710
 8002464:	08007754 	.word	0x08007754

08002468 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002468:	4770      	bx	lr

0800246a <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 800246a:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW3);
 800246c:	2002      	movs	r0, #2
 800246e:	f7ff fffb 	bl	8002468 <BSP_PB_Callback>
}
 8002472:	bd08      	pop	{r3, pc}

08002474 <BUTTON_SW2_EXTI_Callback>:
{
 8002474:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW2);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff fff6 	bl	8002468 <BSP_PB_Callback>
}
 800247c:	bd08      	pop	{r3, pc}

0800247e <BUTTON_SW1_EXTI_Callback>:
{
 800247e:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW1);
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff fff1 	bl	8002468 <BSP_PB_Callback>
}
 8002486:	bd08      	pop	{r3, pc}

08002488 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002488:	4770      	bx	lr
	...

0800248c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248e:	2003      	movs	r0, #3
 8002490:	f000 fcbc 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002494:	f001 fec0 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_Init+0x28>)
 800249a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249c:	200f      	movs	r0, #15
 800249e:	f7fe fd07 	bl	8000eb0 <HAL_InitTick>
 80024a2:	b110      	cbz	r0, 80024aa <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80024a4:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80024a6:	4620      	mov	r0, r4
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	4604      	mov	r4, r0
    HAL_MspInit();
 80024ac:	f7fe fbb2 	bl	8000c14 <HAL_MspInit>
 80024b0:	e7f9      	b.n	80024a6 <HAL_Init+0x1a>
 80024b2:	bf00      	nop
 80024b4:	20000050 	.word	0x20000050

080024b8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024b8:	4a02      	ldr	r2, [pc, #8]	; (80024c4 <HAL_SuspendTick+0xc>)
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	f023 0302 	bic.w	r3, r3, #2
 80024c0:	6013      	str	r3, [r2, #0]
}
 80024c2:	4770      	bx	lr
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024c8:	4a02      	ldr	r2, [pc, #8]	; (80024d4 <HAL_ResumeTick+0xc>)
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	6013      	str	r3, [r2, #0]
}
 80024d2:	4770      	bx	lr
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80024d8:	4a02      	ldr	r2, [pc, #8]	; (80024e4 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80024da:	6853      	ldr	r3, [r2, #4]
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 80024e2:	4770      	bx	lr
 80024e4:	e0042000 	.word	0xe0042000

080024e8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80024e8:	4a02      	ldr	r2, [pc, #8]	; (80024f4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80024ea:	6853      	ldr	r3, [r2, #4]
 80024ec:	f023 0302 	bic.w	r3, r3, #2
 80024f0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 80024f2:	4770      	bx	lr
 80024f4:	e0042000 	.word	0xe0042000

080024f8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80024fa:	6853      	ldr	r3, [r2, #4]
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002502:	4770      	bx	lr
 8002504:	e0042000 	.word	0xe0042000

08002508 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002510:	2800      	cmp	r0, #0
 8002512:	f000 8121 	beq.w	8002758 <HAL_ADC_Init+0x250>
 8002516:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002518:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800251a:	b1bb      	cbz	r3, 800254c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800251e:	6893      	ldr	r3, [r2, #8]
 8002520:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002524:	d11f      	bne.n	8002566 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002526:	6893      	ldr	r3, [r2, #8]
 8002528:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800252c:	f023 0317 	bic.w	r3, r3, #23
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002536:	4b89      	ldr	r3, [pc, #548]	; (800275c <HAL_ADC_Init+0x254>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	4a88      	ldr	r2, [pc, #544]	; (8002760 <HAL_ADC_Init+0x258>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	3301      	adds	r3, #1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800254a:	e009      	b.n	8002560 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800254c:	f7fe f95c 	bl	8000808 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002550:	2300      	movs	r3, #0
 8002552:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002554:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002558:	e7e0      	b.n	800251c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	3b01      	subs	r3, #1
 800255e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f9      	bne.n	800255a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002566:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002568:	6893      	ldr	r3, [r2, #8]
 800256a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800256e:	d109      	bne.n	8002584 <HAL_ADC_Init+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002578:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002580:	2001      	movs	r0, #1
 8002582:	e000      	b.n	8002586 <HAL_ADC_Init+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002586:	6893      	ldr	r3, [r2, #8]
 8002588:	f013 0304 	ands.w	r3, r3, #4
 800258c:	d000      	beq.n	8002590 <HAL_ADC_Init+0x88>
 800258e:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002590:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002592:	f011 0f10 	tst.w	r1, #16
 8002596:	f040 80d8 	bne.w	800274a <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 80d5 	bne.w	800274a <HAL_ADC_Init+0x242>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80025a2:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80025a6:	f041 0102 	orr.w	r1, r1, #2
 80025aa:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ac:	6891      	ldr	r1, [r2, #8]
 80025ae:	f011 0f01 	tst.w	r1, #1
 80025b2:	d131      	bne.n	8002618 <HAL_ADC_Init+0x110>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025b4:	68d1      	ldr	r1, [r2, #12]
 80025b6:	f021 0118 	bic.w	r1, r1, #24
 80025ba:	68a5      	ldr	r5, [r4, #8]
 80025bc:	4329      	orrs	r1, r5
 80025be:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025c0:	6862      	ldr	r2, [r4, #4]
 80025c2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80025c6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025c8:	4315      	orrs	r5, r2
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ca:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80025ce:	2901      	cmp	r1, #1
 80025d0:	d018      	beq.n	8002604 <HAL_ADC_Init+0xfc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80025d2:	6821      	ldr	r1, [r4, #0]
 80025d4:	690e      	ldr	r6, [r1, #16]
 80025d6:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_ADC_Init+0x25c>)
 80025d8:	4032      	ands	r2, r6
 80025da:	432a      	orrs	r2, r5
 80025dc:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025de:	6862      	ldr	r2, [r4, #4]
 80025e0:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 80025e4:	d019      	beq.n	800261a <HAL_ADC_Init+0x112>
 80025e6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80025ea:	d016      	beq.n	800261a <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80025f0:	d013      	beq.n	800261a <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80025f2:	4e5d      	ldr	r6, [pc, #372]	; (8002768 <HAL_ADC_Init+0x260>)
 80025f4:	6831      	ldr	r1, [r6, #0]
 80025f6:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 80025fa:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80025fe:	430a      	orrs	r2, r1
 8002600:	6032      	str	r2, [r6, #0]
 8002602:	e00a      	b.n	800261a <HAL_ADC_Init+0x112>
                     hadc->Init.Oversampling.Ratio         |
 8002604:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002606:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002608:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800260a:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 800260c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800260e:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002610:	4315      	orrs	r5, r2
 8002612:	f045 0501 	orr.w	r5, r5, #1
 8002616:	e7dc      	b.n	80025d2 <HAL_ADC_Init+0xca>
  uint32_t tmpCFGR2 = 0UL;
 8002618:	461d      	mov	r5, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800261a:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800261c:	7e62      	ldrb	r2, [r4, #25]
 800261e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002620:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002624:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002626:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800262a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800262c:	b109      	cbz	r1, 8002632 <HAL_ADC_Init+0x12a>
 800262e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002632:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 8002634:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002636:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002638:	6921      	ldr	r1, [r4, #16]
 800263a:	2900      	cmp	r1, #0
 800263c:	db47      	blt.n	80026ce <HAL_ADC_Init+0x1c6>
 800263e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002642:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002644:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002648:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800264c:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002650:	2901      	cmp	r1, #1
 8002652:	d03f      	beq.n	80026d4 <HAL_ADC_Init+0x1cc>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002654:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002656:	b121      	cbz	r1, 8002662 <HAL_ADC_Init+0x15a>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002658:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800265c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800265e:	4331      	orrs	r1, r6
 8002660:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002662:	6826      	ldr	r6, [r4, #0]
 8002664:	68f1      	ldr	r1, [r6, #12]
 8002666:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 800266a:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 800266e:	4311      	orrs	r1, r2
 8002670:	60f1      	str	r1, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002672:	6826      	ldr	r6, [r4, #0]
 8002674:	6937      	ldr	r7, [r6, #16]
 8002676:	493d      	ldr	r1, [pc, #244]	; (800276c <HAL_ADC_Init+0x264>)
 8002678:	4039      	ands	r1, r7
 800267a:	430d      	orrs	r5, r1
 800267c:	6135      	str	r5, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800267e:	6826      	ldr	r6, [r4, #0]
 8002680:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002682:	6975      	ldr	r5, [r6, #20]
 8002684:	f025 0507 	bic.w	r5, r5, #7
 8002688:	4329      	orrs	r1, r5
 800268a:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800268c:	6825      	ldr	r5, [r4, #0]
 800268e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002690:	6969      	ldr	r1, [r5, #20]
 8002692:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002696:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800269a:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800269c:	6921      	ldr	r1, [r4, #16]
 800269e:	bb31      	cbnz	r1, 80026ee <HAL_ADC_Init+0x1e6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80026a0:	6821      	ldr	r1, [r4, #0]
 80026a2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80026a4:	f063 030f 	orn	r3, r3, #15
 80026a8:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	68d9      	ldr	r1, [r3, #12]
 80026ae:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_ADC_Init+0x268>)
 80026b0:	400b      	ands	r3, r1
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d040      	beq.n	8002738 <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026b8:	f023 0312 	bic.w	r3, r3, #18
 80026bc:	f043 0310 	orr.w	r3, r3, #16
 80026c0:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80026ca:	2001      	movs	r0, #1
 80026cc:	e042      	b.n	8002754 <HAL_ADC_Init+0x24c>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026ce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80026d2:	e7b6      	b.n	8002642 <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026d4:	b916      	cbnz	r6, 80026dc <HAL_ADC_Init+0x1d4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026da:	e7bb      	b.n	8002654 <HAL_ADC_Init+0x14c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80026de:	f041 0120 	orr.w	r1, r1, #32
 80026e2:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80026e6:	f041 0101 	orr.w	r1, r1, #1
 80026ea:	65e1      	str	r1, [r4, #92]	; 0x5c
 80026ec:	e7b2      	b.n	8002654 <HAL_ADC_Init+0x14c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ee:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80026f2:	d1da      	bne.n	80026aa <HAL_ADC_Init+0x1a2>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	d808      	bhi.n	800270a <HAL_ADC_Init+0x202>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80026f8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80026fa:	009d      	lsls	r5, r3, #2
 80026fc:	40e9      	lsrs	r1, r5
 80026fe:	f001 010f 	and.w	r1, r1, #15
 8002702:	290f      	cmp	r1, #15
 8002704:	d001      	beq.n	800270a <HAL_ADC_Init+0x202>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002706:	3301      	adds	r3, #1
 8002708:	e7f4      	b.n	80026f4 <HAL_ADC_Init+0x1ec>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800270a:	2b01      	cmp	r3, #1
 800270c:	d00e      	beq.n	800272c <HAL_ADC_Init+0x224>
        MODIFY_REG(hadc->Instance->CHSELR,
 800270e:	6825      	ldr	r5, [r4, #0]
 8002710:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002712:	69e3      	ldr	r3, [r4, #28]
 8002714:	3b01      	subs	r3, #1
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	f003 031c 	and.w	r3, r3, #28
 800271c:	f06f 010f 	mvn.w	r1, #15
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002726:	430b      	orrs	r3, r1
 8002728:	62ab      	str	r3, [r5, #40]	; 0x28
 800272a:	e7be      	b.n	80026aa <HAL_ADC_Init+0x1a2>
        SET_BIT(hadc->Instance->CHSELR,
 800272c:	6821      	ldr	r1, [r4, #0]
 800272e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002730:	f063 030f 	orn	r3, r3, #15
 8002734:	628b      	str	r3, [r1, #40]	; 0x28
 8002736:	e7b8      	b.n	80026aa <HAL_ADC_Init+0x1a2>
      ADC_CLEAR_ERRORCODE(hadc);
 8002738:	2300      	movs	r3, #0
 800273a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800273c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	65a3      	str	r3, [r4, #88]	; 0x58
 8002748:	e004      	b.n	8002754 <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800274c:	f043 0310 	orr.w	r3, r3, #16
 8002750:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002752:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002754:	b003      	add	sp, #12
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002758:	2001      	movs	r0, #1
 800275a:	e7fb      	b.n	8002754 <HAL_ADC_Init+0x24c>
 800275c:	20000050 	.word	0x20000050
 8002760:	053e2d63 	.word	0x053e2d63
 8002764:	1ffffc02 	.word	0x1ffffc02
 8002768:	40012708 	.word	0x40012708
 800276c:	dffffc02 	.word	0xdffffc02
 8002770:	833fffe7 	.word	0x833fffe7

08002774 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	4604      	mov	r4, r0
 8002778:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800277a:	6946      	ldr	r6, [r0, #20]
 800277c:	2e08      	cmp	r6, #8
 800277e:	d005      	beq.n	800278c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002780:	6803      	ldr	r3, [r0, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f013 0f01 	tst.w	r3, #1
 8002788:	d11e      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800278a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800278c:	f7fe fb92 	bl	8000eb4 <HAL_GetTick>
 8002790:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4232      	tst	r2, r6
 8002798:	d11c      	bne.n	80027d4 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800279e:	d0f8      	beq.n	8002792 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027a0:	f7fe fb88 	bl	8000eb4 <HAL_GetTick>
 80027a4:	1bc3      	subs	r3, r0, r7
 80027a6:	42ab      	cmp	r3, r5
 80027a8:	d801      	bhi.n	80027ae <HAL_ADC_PollForConversion+0x3a>
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d1f1      	bne.n	8002792 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4233      	tst	r3, r6
 80027b4:	d1ed      	bne.n	8002792 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80027be:	2300      	movs	r3, #0
 80027c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80027c4:	2003      	movs	r0, #3
 80027c6:	e028      	b.n	800281a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80027ca:	f043 0320 	orr.w	r3, r3, #32
 80027ce:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80027d0:	2001      	movs	r0, #1
 80027d2:	e022      	b.n	800281a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027d4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80027d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027da:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80027e2:	d115      	bne.n	8002810 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027e4:	7ea2      	ldrb	r2, [r4, #26]
 80027e6:	b99a      	cbnz	r2, 8002810 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f012 0f08 	tst.w	r2, #8
 80027ee:	d00f      	beq.n	8002810 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	f012 0f04 	tst.w	r2, #4
 80027f6:	d111      	bne.n	800281c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	f022 020c 	bic.w	r2, r2, #12
 80027fe:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002810:	7e20      	ldrb	r0, [r4, #24]
 8002812:	b960      	cbnz	r0, 800282e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800281e:	f043 0320 	orr.w	r3, r3, #32
 8002822:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002824:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800282c:	e7f0      	b.n	8002810 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800282e:	2000      	movs	r0, #0
 8002830:	e7f3      	b.n	800281a <HAL_ADC_PollForConversion+0xa6>

08002832 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002832:	6803      	ldr	r3, [r0, #0]
 8002834:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002836:	4770      	bx	lr

08002838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002838:	b470      	push	{r4, r5, r6}
 800283a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800283c:	2200      	movs	r2, #0
 800283e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002840:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002842:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002846:	2a01      	cmp	r2, #1
 8002848:	f000 80ee 	beq.w	8002a28 <HAL_ADC_ConfigChannel+0x1f0>
 800284c:	4603      	mov	r3, r0
 800284e:	2201      	movs	r2, #1
 8002850:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002854:	6802      	ldr	r2, [r0, #0]
 8002856:	6890      	ldr	r0, [r2, #8]
 8002858:	f010 0f04 	tst.w	r0, #4
 800285c:	d00a      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002860:	f042 0220 	orr.w	r2, r2, #32
 8002864:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002866:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800286e:	b003      	add	sp, #12
 8002870:	bc70      	pop	{r4, r5, r6}
 8002872:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002874:	6848      	ldr	r0, [r1, #4]
 8002876:	2802      	cmp	r0, #2
 8002878:	f000 8097 	beq.w	80029aa <HAL_ADC_ConfigChannel+0x172>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800287c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002880:	d029      	beq.n	80028d6 <HAL_ADC_ConfigChannel+0x9e>
 8002882:	4d6a      	ldr	r5, [pc, #424]	; (8002a2c <HAL_ADC_ConfigChannel+0x1f4>)
 8002884:	42ac      	cmp	r4, r5
 8002886:	d026      	beq.n	80028d6 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002888:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800288a:	f000 001f 	and.w	r0, r0, #31
 800288e:	250f      	movs	r5, #15
 8002890:	4085      	lsls	r5, r0
 8002892:	ea24 0505 	bic.w	r5, r4, r5
 8002896:	680c      	ldr	r4, [r1, #0]
 8002898:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800289c:	2e00      	cmp	r6, #0
 800289e:	d133      	bne.n	8002908 <HAL_ADC_ConfigChannel+0xd0>
 80028a0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80028a4:	fa04 f000 	lsl.w	r0, r4, r0
 80028a8:	4328      	orrs	r0, r5
 80028aa:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80028ac:	684c      	ldr	r4, [r1, #4]
 80028ae:	08a0      	lsrs	r0, r4, #2
 80028b0:	3001      	adds	r0, #1
 80028b2:	69dd      	ldr	r5, [r3, #28]
 80028b4:	42a8      	cmp	r0, r5
 80028b6:	d814      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028b8:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80028ba:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80028bc:	f004 041f 	and.w	r4, r4, #31
 80028c0:	260f      	movs	r6, #15
 80028c2:	40a6      	lsls	r6, r4
 80028c4:	ea20 0006 	bic.w	r0, r0, r6
 80028c8:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80028cc:	fa05 f404 	lsl.w	r4, r5, r4
 80028d0:	4304      	orrs	r4, r0
 80028d2:	6294      	str	r4, [r2, #40]	; 0x28
}
 80028d4:	e005      	b.n	80028e2 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80028d6:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80028d8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80028da:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80028de:	4320      	orrs	r0, r4
 80028e0:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028e2:	681d      	ldr	r5, [r3, #0]
 80028e4:	680e      	ldr	r6, [r1, #0]
 80028e6:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80028e8:	696c      	ldr	r4, [r5, #20]
 80028ea:	ea24 2406 	bic.w	r4, r4, r6, lsl #8
 80028ee:	ea00 2206 	and.w	r2, r0, r6, lsl #8
 80028f2:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80028f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028fa:	4322      	orrs	r2, r4
 80028fc:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028fe:	680a      	ldr	r2, [r1, #0]
 8002900:	2a00      	cmp	r2, #0
 8002902:	db09      	blt.n	8002918 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002904:	2000      	movs	r0, #0
 8002906:	e7af      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800290c:	b114      	cbz	r4, 8002914 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800290e:	fab4 f484 	clz	r4, r4
 8002912:	e7c7      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002914:	2420      	movs	r4, #32
 8002916:	e7c5      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002918:	4945      	ldr	r1, [pc, #276]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 800291a:	6808      	ldr	r0, [r1, #0]
 800291c:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002920:	4c44      	ldr	r4, [pc, #272]	; (8002a34 <HAL_ADC_ConfigChannel+0x1fc>)
 8002922:	42a2      	cmp	r2, r4
 8002924:	d007      	beq.n	8002936 <HAL_ADC_ConfigChannel+0xfe>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002926:	4c44      	ldr	r4, [pc, #272]	; (8002a38 <HAL_ADC_ConfigChannel+0x200>)
 8002928:	42a2      	cmp	r2, r4
 800292a:	d024      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x13e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800292c:	4c43      	ldr	r4, [pc, #268]	; (8002a3c <HAL_ADC_ConfigChannel+0x204>)
 800292e:	42a2      	cmp	r2, r4
 8002930:	d02e      	beq.n	8002990 <HAL_ADC_ConfigChannel+0x158>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002932:	2000      	movs	r0, #0
 8002934:	e798      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002936:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800293a:	d1f4      	bne.n	8002926 <HAL_ADC_ConfigChannel+0xee>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002940:	483b      	ldr	r0, [pc, #236]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 8002942:	6802      	ldr	r2, [r0, #0]
 8002944:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002948:	4311      	orrs	r1, r2
 800294a:	6001      	str	r1, [r0, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800294c:	4a3c      	ldr	r2, [pc, #240]	; (8002a40 <HAL_ADC_ConfigChannel+0x208>)
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	0992      	lsrs	r2, r2, #6
 8002952:	493c      	ldr	r1, [pc, #240]	; (8002a44 <HAL_ADC_ConfigChannel+0x20c>)
 8002954:	fba1 1202 	umull	r1, r2, r1, r2
 8002958:	0992      	lsrs	r2, r2, #6
 800295a:	3201      	adds	r2, #1
 800295c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002960:	0092      	lsls	r2, r2, #2
 8002962:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002964:	e002      	b.n	800296c <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 8002966:	9a01      	ldr	r2, [sp, #4]
 8002968:	3a01      	subs	r2, #1
 800296a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800296c:	9a01      	ldr	r2, [sp, #4]
 800296e:	2a00      	cmp	r2, #0
 8002970:	d1f9      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002972:	2000      	movs	r0, #0
 8002974:	e778      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002976:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800297a:	d1d7      	bne.n	800292c <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002980:	482b      	ldr	r0, [pc, #172]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 8002982:	6802      	ldr	r2, [r0, #0]
 8002984:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002988:	4311      	orrs	r1, r2
 800298a:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2000      	movs	r0, #0
}
 800298e:	e76b      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002990:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002994:	d146      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x1ec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002996:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800299a:	4825      	ldr	r0, [pc, #148]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 800299c:	6801      	ldr	r1, [r0, #0]
 800299e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80029a2:	430a      	orrs	r2, r1
 80029a4:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a6:	2000      	movs	r0, #0
}
 80029a8:	e75e      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029aa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80029ae:	d002      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x17e>
 80029b0:	481e      	ldr	r0, [pc, #120]	; (8002a2c <HAL_ADC_ConfigChannel+0x1f4>)
 80029b2:	4284      	cmp	r4, r0
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x18c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80029b6:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80029b8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80029ba:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80029be:	ea20 0004 	bic.w	r0, r0, r4
 80029c2:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029c4:	680a      	ldr	r2, [r1, #0]
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	db01      	blt.n	80029ce <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ca:	2000      	movs	r0, #0
 80029cc:	e74c      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029ce:	4918      	ldr	r1, [pc, #96]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 80029d0:	6809      	ldr	r1, [r1, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029d2:	4818      	ldr	r0, [pc, #96]	; (8002a34 <HAL_ADC_ConfigChannel+0x1fc>)
 80029d4:	4282      	cmp	r2, r0
 80029d6:	d007      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x1b0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80029d8:	4817      	ldr	r0, [pc, #92]	; (8002a38 <HAL_ADC_ConfigChannel+0x200>)
 80029da:	4282      	cmp	r2, r0
 80029dc:	d00e      	beq.n	80029fc <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029de:	4817      	ldr	r0, [pc, #92]	; (8002a3c <HAL_ADC_ConfigChannel+0x204>)
 80029e0:	4282      	cmp	r2, r0
 80029e2:	d015      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e4:	2000      	movs	r0, #0
 80029e6:	e73f      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e8:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029ec:	4810      	ldr	r0, [pc, #64]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 80029ee:	6802      	ldr	r2, [r0, #0]
 80029f0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80029f4:	4311      	orrs	r1, r2
 80029f6:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f8:	2000      	movs	r0, #0
}
 80029fa:	e735      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fc:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a00:	480b      	ldr	r0, [pc, #44]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 8002a02:	6801      	ldr	r1, [r0, #0]
 8002a04:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0c:	2000      	movs	r0, #0
}
 8002a0e:	e72b      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a10:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a14:	4806      	ldr	r0, [pc, #24]	; (8002a30 <HAL_ADC_ConfigChannel+0x1f8>)
 8002a16:	6801      	ldr	r1, [r0, #0]
 8002a18:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2000      	movs	r0, #0
}
 8002a22:	e721      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
 8002a24:	2000      	movs	r0, #0
 8002a26:	e71f      	b.n	8002868 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002a28:	2002      	movs	r0, #2
 8002a2a:	e720      	b.n	800286e <HAL_ADC_ConfigChannel+0x36>
 8002a2c:	80000004 	.word	0x80000004
 8002a30:	40012708 	.word	0x40012708
 8002a34:	b0001000 	.word	0xb0001000
 8002a38:	b8004000 	.word	0xb8004000
 8002a3c:	b4002000 	.word	0xb4002000
 8002a40:	20000050 	.word	0x20000050
 8002a44:	053e2d63 	.word	0x053e2d63

08002a48 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002a48:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a4a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	f012 0f04 	tst.w	r2, #4
 8002a52:	d02a      	beq.n	8002aaa <ADC_ConversionStop+0x62>
 8002a54:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	f012 0f02 	tst.w	r2, #2
 8002a5c:	d107      	bne.n	8002a6e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a64:	f022 0217 	bic.w	r2, r2, #23
 8002a68:	f042 0210 	orr.w	r2, r2, #16
 8002a6c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a6e:	f7fe fa21 	bl	8000eb4 <HAL_GetTick>
 8002a72:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f013 0f04 	tst.w	r3, #4
 8002a7c:	d013      	beq.n	8002aa6 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a7e:	f7fe fa19 	bl	8000eb4 <HAL_GetTick>
 8002a82:	1b43      	subs	r3, r0, r5
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d9f5      	bls.n	8002a74 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f013 0f04 	tst.w	r3, #4
 8002a90:	d0f0      	beq.n	8002a74 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a94:	f043 0310 	orr.w	r3, r3, #16
 8002a98:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	e002      	b.n	8002aac <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	e000      	b.n	8002aac <ADC_ConversionStop+0x64>
 8002aaa:	2000      	movs	r0, #0
}
 8002aac:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ab0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b530      	push	{r4, r5, lr}
 8002ab2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	f012 0f01 	tst.w	r2, #1
 8002ac0:	d159      	bne.n	8002b76 <ADC_Enable+0xc6>
 8002ac2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ac4:	6899      	ldr	r1, [r3, #8]
 8002ac6:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <ADC_Enable+0xcc>)
 8002ac8:	4211      	tst	r1, r2
 8002aca:	d11b      	bne.n	8002b04 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad2:	f022 0217 	bic.w	r2, r2, #23
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <ADC_Enable+0xd0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ae0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002ae4:	d018      	beq.n	8002b18 <ADC_Enable+0x68>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <ADC_Enable+0xd4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <ADC_Enable+0xd8>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	3301      	adds	r3, #1
 8002af6:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002af8:	9b01      	ldr	r3, [sp, #4]
 8002afa:	b16b      	cbz	r3, 8002b18 <ADC_Enable+0x68>
      {
        wait_loop_index--;
 8002afc:	9b01      	ldr	r3, [sp, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	e7f9      	b.n	8002af8 <ADC_Enable+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b04:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002b06:	f043 0310 	orr.w	r3, r3, #16
 8002b0a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
 8002b16:	e02f      	b.n	8002b78 <ADC_Enable+0xc8>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b18:	7e63      	ldrb	r3, [r4, #25]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <ADC_Enable+0x72>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b1e:	2000      	movs	r0, #0
 8002b20:	e02a      	b.n	8002b78 <ADC_Enable+0xc8>
      tickstart = HAL_GetTick();
 8002b22:	f7fe f9c7 	bl	8000eb4 <HAL_GetTick>
 8002b26:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f012 0f01 	tst.w	r2, #1
 8002b30:	d11f      	bne.n	8002b72 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	f012 0f01 	tst.w	r2, #1
 8002b38:	d107      	bne.n	8002b4a <ADC_Enable+0x9a>
  MODIFY_REG(ADCx->CR,
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b40:	f022 0217 	bic.w	r2, r2, #23
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b4a:	f7fe f9b3 	bl	8000eb4 <HAL_GetTick>
 8002b4e:	1b40      	subs	r0, r0, r5
 8002b50:	2802      	cmp	r0, #2
 8002b52:	d9e9      	bls.n	8002b28 <ADC_Enable+0x78>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f013 0f01 	tst.w	r3, #1
 8002b5c:	d1e4      	bne.n	8002b28 <ADC_Enable+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b60:	f043 0310 	orr.w	r3, r3, #16
 8002b64:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	e002      	b.n	8002b78 <ADC_Enable+0xc8>
  return HAL_OK;
 8002b72:	2000      	movs	r0, #0
 8002b74:	e000      	b.n	8002b78 <ADC_Enable+0xc8>
 8002b76:	2000      	movs	r0, #0
}
 8002b78:	b003      	add	sp, #12
 8002b7a:	bd30      	pop	{r4, r5, pc}
 8002b7c:	80000017 	.word	0x80000017
 8002b80:	40012708 	.word	0x40012708
 8002b84:	20000050 	.word	0x20000050
 8002b88:	053e2d63 	.word	0x053e2d63

08002b8c <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b8c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f013 0f04 	tst.w	r3, #4
 8002b94:	d128      	bne.n	8002be8 <HAL_ADC_Start+0x5c>
{
 8002b96:	b510      	push	{r4, lr}
 8002b98:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002b9a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d024      	beq.n	8002bec <HAL_ADC_Start+0x60>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002ba8:	f7ff ff82 	bl	8002ab0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002bac:	b9c0      	cbnz	r0, 8002be0 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bc2:	6822      	ldr	r2, [r4, #0]
 8002bc4:	211c      	movs	r1, #28
 8002bc6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002bc8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002bcc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002bce:	6893      	ldr	r3, [r2, #8]
 8002bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bd4:	f023 0317 	bic.w	r3, r3, #23
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6093      	str	r3, [r2, #8]
}
 8002bde:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002be0:	2300      	movs	r3, #0
 8002be2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002be6:	e7fa      	b.n	8002bde <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002be8:	2002      	movs	r0, #2
}
 8002bea:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002bec:	2002      	movs	r0, #2
 8002bee:	e7f6      	b.n	8002bde <HAL_ADC_Start+0x52>

08002bf0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bf4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bf6:	6893      	ldr	r3, [r2, #8]
 8002bf8:	f013 0302 	ands.w	r3, r3, #2
 8002bfc:	d000      	beq.n	8002c00 <ADC_Disable+0x10>
 8002bfe:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c00:	6891      	ldr	r1, [r2, #8]
 8002c02:	f011 0f01 	tst.w	r1, #1
 8002c06:	d039      	beq.n	8002c7c <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d139      	bne.n	8002c80 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c0c:	6893      	ldr	r3, [r2, #8]
 8002c0e:	f003 0305 	and.w	r3, r3, #5
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d009      	beq.n	8002c2a <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c18:	f043 0310 	orr.w	r3, r3, #16
 8002c1c:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
 8002c28:	e029      	b.n	8002c7e <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002c2a:	6893      	ldr	r3, [r2, #8]
 8002c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c30:	f023 0317 	bic.w	r3, r3, #23
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c40:	f7fe f938 	bl	8000eb4 <HAL_GetTick>
 8002c44:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f013 0f01 	tst.w	r3, #1
 8002c4e:	d013      	beq.n	8002c78 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c50:	f7fe f930 	bl	8000eb4 <HAL_GetTick>
 8002c54:	1b40      	subs	r0, r0, r5
 8002c56:	2802      	cmp	r0, #2
 8002c58:	d9f5      	bls.n	8002c46 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f013 0f01 	tst.w	r3, #1
 8002c62:	d0f0      	beq.n	8002c46 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c66:	f043 0310 	orr.w	r3, r3, #16
 8002c6a:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002c74:	2001      	movs	r0, #1
 8002c76:	e002      	b.n	8002c7e <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e000      	b.n	8002c7e <ADC_Disable+0x8e>
 8002c7c:	2000      	movs	r0, #0
}
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002c80:	2000      	movs	r0, #0
 8002c82:	e7fc      	b.n	8002c7e <ADC_Disable+0x8e>

08002c84 <HAL_ADC_DeInit>:
{
 8002c84:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d04a      	beq.n	8002d20 <HAL_ADC_DeInit+0x9c>
 8002c8a:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c8c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c94:	f7ff fed8 	bl	8002a48 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002c98:	4606      	mov	r6, r0
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d031      	beq.n	8002d02 <HAL_ADC_DeInit+0x7e>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	6853      	ldr	r3, [r2, #4]
 8002ca2:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	f240 329f 	movw	r2, #927	; 0x39f
 8002cb2:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	68d1      	ldr	r1, [r2, #12]
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_ADC_DeInit+0xa0>)
 8002cba:	400b      	ands	r3, r1
 8002cbc:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	6913      	ldr	r3, [r2, #16]
 8002cc2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002cc6:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002cc8:	6822      	ldr	r2, [r4, #0]
 8002cca:	6953      	ldr	r3, [r2, #20]
 8002ccc:	f023 0307 	bic.w	r3, r3, #7
 8002cd0:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	6a13      	ldr	r3, [r2, #32]
 8002cd6:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002cda:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce0:	2500      	movs	r5, #0
 8002ce2:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002ce4:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_ADC_DeInit+0xa4>)
 8002ce6:	6813      	ldr	r3, [r2, #0]
 8002ce8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002cec:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7fd fda0 	bl	8000834 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002cf4:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8002cf6:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8002cf8:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8002cfa:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8002cfe:	4630      	mov	r0, r6
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002d02:	4620      	mov	r0, r4
 8002d04:	f7ff ff74 	bl	8002bf0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002d08:	4606      	mov	r6, r0
 8002d0a:	b908      	cbnz	r0, 8002d10 <HAL_ADC_DeInit+0x8c>
      hadc->State = HAL_ADC_STATE_READY;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002d10:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002d12:	6893      	ldr	r3, [r2, #8]
 8002d14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d18:	f023 0317 	bic.w	r3, r3, #23
 8002d1c:	6093      	str	r3, [r2, #8]
}
 8002d1e:	e7be      	b.n	8002c9e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8002d20:	2601      	movs	r6, #1
 8002d22:	e7ec      	b.n	8002cfe <HAL_ADC_DeInit+0x7a>
 8002d24:	833e0200 	.word	0x833e0200
 8002d28:	40012708 	.word	0x40012708

08002d2c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002d2c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d019      	beq.n	8002d68 <HAL_ADC_Stop+0x3c>
{
 8002d34:	b510      	push	{r4, lr}
 8002d36:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002d3e:	f7ff fe83 	bl	8002a48 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002d42:	b118      	cbz	r0, 8002d4c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8002d44:	2300      	movs	r3, #0
 8002d46:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8002d4a:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f7ff ff4f 	bl	8002bf0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d1f6      	bne.n	8002d44 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8002d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d66:	e7ed      	b.n	8002d44 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8002d68:	2002      	movs	r0, #2
}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b530      	push	{r4, r5, lr}
 8002d6e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d74:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d045      	beq.n	8002e08 <HAL_ADCEx_Calibration_Start+0x9c>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d84:	f7ff ff34 	bl	8002bf0 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d88:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	f012 0f01 	tst.w	r2, #1
 8002d90:	d008      	beq.n	8002da4 <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d94:	f043 0310 	orr.w	r3, r3, #16
 8002d98:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8002da0:	b003      	add	sp, #12
 8002da2:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002da4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002da6:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002daa:	f042 0202 	orr.w	r2, r2, #2
 8002dae:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002db0:	68dd      	ldr	r5, [r3, #12]
 8002db2:	f005 0503 	and.w	r5, r5, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	f022 0203 	bic.w	r2, r2, #3
 8002dbc:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002dbe:	6821      	ldr	r1, [r4, #0]
 8002dc0:	688b      	ldr	r3, [r1, #8]
 8002dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dc6:	608b      	str	r3, [r1, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dc8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	db09      	blt.n	8002de4 <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	432a      	orrs	r2, r5
 8002dd4:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dd8:	f023 0303 	bic.w	r3, r3, #3
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002de2:	e7da      	b.n	8002d9a <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 8002de4:	9b01      	ldr	r3, [sp, #4]
 8002de6:	3301      	adds	r3, #1
 8002de8:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002dea:	9b01      	ldr	r3, [sp, #4]
 8002dec:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8002df0:	d3ea      	bcc.n	8002dc8 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8002df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002df4:	f023 0312 	bic.w	r3, r3, #18
 8002df8:	f043 0310 	orr.w	r3, r3, #16
 8002dfc:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002e04:	2001      	movs	r0, #1
 8002e06:	e7cb      	b.n	8002da0 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 8002e08:	2002      	movs	r0, #2
 8002e0a:	e7c9      	b.n	8002da0 <HAL_ADCEx_Calibration_Start+0x34>

08002e0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002e0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e18:	0200      	lsls	r0, r0, #8
 8002e1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e1e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002e28:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_NVIC_SetPriority+0x60>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3a:	f1c3 0407 	rsb	r4, r3, #7
 8002e3e:	2c04      	cmp	r4, #4
 8002e40:	bf28      	it	cs
 8002e42:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e44:	1d1d      	adds	r5, r3, #4
 8002e46:	2d06      	cmp	r5, #6
 8002e48:	d918      	bls.n	8002e7c <HAL_NVIC_SetPriority+0x4c>
 8002e4a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8002e50:	fa05 f404 	lsl.w	r4, r5, r4
 8002e54:	ea21 0104 	bic.w	r1, r1, r4
 8002e58:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5a:	fa05 f303 	lsl.w	r3, r5, r3
 8002e5e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e62:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002e64:	2800      	cmp	r0, #0
 8002e66:	db0b      	blt.n	8002e80 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	0109      	lsls	r1, r1, #4
 8002e6a:	b2c9      	uxtb	r1, r1
 8002e6c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002e70:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002e74:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002e78:	bc30      	pop	{r4, r5}
 8002e7a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e7e5      	b.n	8002e4c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	f000 000f 	and.w	r0, r0, #15
 8002e84:	0109      	lsls	r1, r1, #4
 8002e86:	b2c9      	uxtb	r1, r1
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <HAL_NVIC_SetPriority+0x64>)
 8002e8a:	5419      	strb	r1, [r3, r0]
 8002e8c:	e7f4      	b.n	8002e78 <HAL_NVIC_SetPriority+0x48>
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	e000ed14 	.word	0xe000ed14

08002e98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	db07      	blt.n	8002eac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9c:	f000 021f 	and.w	r2, r0, #31
 8002ea0:	0940      	lsrs	r0, r0, #5
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	4a02      	ldr	r2, [pc, #8]	; (8002eb0 <HAL_NVIC_EnableIRQ+0x18>)
 8002ea8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	db0c      	blt.n	8002ed2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb8:	f000 021f 	and.w	r2, r0, #31
 8002ebc:	0940      	lsrs	r0, r0, #5
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4093      	lsls	r3, r2
 8002ec2:	3020      	adds	r0, #32
 8002ec4:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_NVIC_DisableIRQ+0x20>)
 8002ec6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ece:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eda:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002edc:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002ede:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ee0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002ee2:	b114      	cbz	r4, 8002eea <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002ee6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002ee8:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002eec:	f004 051c 	and.w	r5, r4, #28
 8002ef0:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002ef2:	2401      	movs	r4, #1
 8002ef4:	40ac      	lsls	r4, r5
 8002ef6:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef8:	6804      	ldr	r4, [r0, #0]
 8002efa:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efc:	6883      	ldr	r3, [r0, #8]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d005      	beq.n	8002f0e <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002f02:	6803      	ldr	r3, [r0, #0]
 8002f04:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002f06:	6803      	ldr	r3, [r0, #0]
 8002f08:	60da      	str	r2, [r3, #12]
  }
}
 8002f0a:	bc70      	pop	{r4, r5, r6}
 8002f0c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002f0e:	6803      	ldr	r3, [r0, #0]
 8002f10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002f12:	6803      	ldr	r3, [r0, #0]
 8002f14:	60d9      	str	r1, [r3, #12]
 8002f16:	e7f8      	b.n	8002f0a <DMA_SetConfig+0x32>

08002f18 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f18:	6803      	ldr	r3, [r0, #0]
 8002f1a:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d816      	bhi.n	8002f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002f20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f22:	f022 0203 	bic.w	r2, r2, #3
 8002f26:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002f2a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002f2e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	3b08      	subs	r3, #8
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002f3e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2201      	movs	r2, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002f4c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002f4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f50:	f022 0103 	bic.w	r1, r2, #3
 8002f54:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8002f56:	440a      	add	r2, r1
 8002f58:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3b08      	subs	r3, #8
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	3307      	adds	r3, #7
 8002f68:	e7e8      	b.n	8002f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8002f6a:	bf00      	nop
 8002f6c:	40020407 	.word	0x40020407
 8002f70:	cccccccd 	.word	0xcccccccd
 8002f74:	40020880 	.word	0x40020880
 8002f78:	4002081c 	.word	0x4002081c

08002f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f7c:	6843      	ldr	r3, [r0, #4]
 8002f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f82:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002f84:	441a      	add	r2, r3
 8002f86:	0092      	lsls	r2, r2, #2
 8002f88:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f8a:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002f8c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2201      	movs	r2, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	1000823f 	.word	0x1000823f
 8002fa4:	40020940 	.word	0x40020940

08002fa8 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d060      	beq.n	800306e <HAL_DMA_Init+0xc6>
{
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fb0:	6802      	ldr	r2, [r0, #0]
 8002fb2:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_DMA_Init+0xcc>)
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d842      	bhi.n	800303e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fb8:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <HAL_DMA_Init+0xd0>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	492f      	ldr	r1, [pc, #188]	; (800307c <HAL_DMA_Init+0xd4>)
 8002fbe:	fba1 1303 	umull	r1, r3, r1, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fc8:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_DMA_Init+0xd8>)
 8002fca:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fdc:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	680a      	ldr	r2, [r1, #0]
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	68e0      	ldr	r0, [r4, #12]
 8002fe6:	4303      	orrs	r3, r0
 8002fe8:	6920      	ldr	r0, [r4, #16]
 8002fea:	4303      	orrs	r3, r0
 8002fec:	6960      	ldr	r0, [r4, #20]
 8002fee:	4303      	orrs	r3, r0
 8002ff0:	69a0      	ldr	r0, [r4, #24]
 8002ff2:	4303      	orrs	r3, r0
 8002ff4:	69e0      	ldr	r0, [r4, #28]
 8002ff6:	4303      	orrs	r3, r0
 8002ff8:	6a20      	ldr	r0, [r4, #32]
 8002ffa:	4303      	orrs	r3, r0
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff ff89 	bl	8002f18 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800300c:	d022      	beq.n	8003054 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800300e:	6863      	ldr	r3, [r4, #4]
 8003010:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003016:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003018:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800301a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800301c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800301e:	6863      	ldr	r3, [r4, #4]
 8003020:	3b01      	subs	r3, #1
 8003022:	2b03      	cmp	r3, #3
 8003024:	d919      	bls.n	800305a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800302a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800302c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302e:	2000      	movs	r0, #0
 8003030:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003032:	2301      	movs	r3, #1
 8003034:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003038:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800303c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_DMA_Init+0xdc>)
 8003040:	4413      	add	r3, r2
 8003042:	490e      	ldr	r1, [pc, #56]	; (800307c <HAL_DMA_Init+0xd4>)
 8003044:	fba1 1303 	umull	r1, r3, r1, r3
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_DMA_Init+0xe0>)
 8003050:	6403      	str	r3, [r0, #64]	; 0x40
 8003052:	e7bb      	b.n	8002fcc <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003054:	2300      	movs	r3, #0
 8003056:	6063      	str	r3, [r4, #4]
 8003058:	e7d9      	b.n	800300e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ff8e 	bl	8002f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003060:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003066:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003068:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	e7df      	b.n	800302e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40020407 	.word	0x40020407
 8003078:	bffdfff8 	.word	0xbffdfff8
 800307c:	cccccccd 	.word	0xcccccccd
 8003080:	40020000 	.word	0x40020000
 8003084:	bffdfbf8 	.word	0xbffdfbf8
 8003088:	40020400 	.word	0x40020400

0800308c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800308c:	2800      	cmp	r0, #0
 800308e:	d04b      	beq.n	8003128 <HAL_DMA_DeInit+0x9c>
{
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003094:	6802      	ldr	r2, [r0, #0]
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800309e:	6802      	ldr	r2, [r0, #0]
 80030a0:	4b22      	ldr	r3, [pc, #136]	; (800312c <HAL_DMA_DeInit+0xa0>)
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d82c      	bhi.n	8003100 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030a6:	4b22      	ldr	r3, [pc, #136]	; (8003130 <HAL_DMA_DeInit+0xa4>)
 80030a8:	4413      	add	r3, r2
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_DMA_DeInit+0xa8>)
 80030ac:	fba1 1303 	umull	r1, r3, r1, r3
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_DMA_DeInit+0xac>)
 80030b8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80030ba:	2500      	movs	r5, #0
 80030bc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030c0:	f003 021c 	and.w	r2, r3, #28
 80030c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80030c6:	2301      	movs	r3, #1
 80030c8:	4093      	lsls	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff ff23 	bl	8002f18 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80030d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030d4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80030d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80030da:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030dc:	6863      	ldr	r3, [r4, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d918      	bls.n	8003116 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80030e4:	2000      	movs	r0, #0
 80030e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80030e8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80030ea:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80030ec:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80030ee:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80030f0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80030f2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80030f6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80030fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_DMA_DeInit+0xb0>)
 8003102:	4413      	add	r3, r2
 8003104:	490b      	ldr	r1, [pc, #44]	; (8003134 <HAL_DMA_DeInit+0xa8>)
 8003106:	fba1 1303 	umull	r1, r3, r1, r3
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_DMA_DeInit+0xb4>)
 8003112:	6403      	str	r3, [r0, #64]	; 0x40
 8003114:	e7d1      	b.n	80030ba <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff ff30 	bl	8002f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800311c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800311e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003122:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	e7dd      	b.n	80030e4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003128:	2001      	movs	r0, #1
}
 800312a:	4770      	bx	lr
 800312c:	40020407 	.word	0x40020407
 8003130:	bffdfff8 	.word	0xbffdfff8
 8003134:	cccccccd 	.word	0xcccccccd
 8003138:	40020000 	.word	0x40020000
 800313c:	bffdfbf8 	.word	0xbffdfbf8
 8003140:	40020400 	.word	0x40020400

08003144 <HAL_DMA_Start_IT>:
{
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003148:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800314c:	2801      	cmp	r0, #1
 800314e:	d043      	beq.n	80031d8 <HAL_DMA_Start_IT+0x94>
 8003150:	2001      	movs	r0, #1
 8003152:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003156:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800315a:	b2c0      	uxtb	r0, r0
 800315c:	2801      	cmp	r0, #1
 800315e:	d006      	beq.n	800316e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003164:	2300      	movs	r3, #0
 8003166:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800316a:	2001      	movs	r0, #1
}
 800316c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800316e:	2002      	movs	r0, #2
 8003170:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003174:	2000      	movs	r0, #0
 8003176:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003178:	6825      	ldr	r5, [r4, #0]
 800317a:	6828      	ldr	r0, [r5, #0]
 800317c:	f020 0001 	bic.w	r0, r0, #1
 8003180:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff fea8 	bl	8002ed8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800318a:	b1d3      	cbz	r3, 80031c2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	f043 030e 	orr.w	r3, r3, #14
 8003194:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003196:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800319e:	d003      	beq.n	80031a8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80031a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031aa:	b11b      	cbz	r3, 80031b4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2000      	movs	r0, #0
 80031c0:	e7d4      	b.n	800316c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	f043 030a 	orr.w	r3, r3, #10
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e7de      	b.n	8003196 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80031d8:	2002      	movs	r0, #2
 80031da:	e7c7      	b.n	800316c <HAL_DMA_Start_IT+0x28>

080031dc <HAL_DMA_Abort>:
  if (NULL == hdma)
 80031dc:	4603      	mov	r3, r0
 80031de:	2800      	cmp	r0, #0
 80031e0:	d034      	beq.n	800324c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031e2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	2a02      	cmp	r2, #2
 80031ea:	d006      	beq.n	80031fa <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ec:	2204      	movs	r2, #4
 80031ee:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80031f0:	2200      	movs	r2, #0
 80031f2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80031f6:	2001      	movs	r0, #1
 80031f8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031fa:	6801      	ldr	r1, [r0, #0]
 80031fc:	680a      	ldr	r2, [r1, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003204:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003206:	680a      	ldr	r2, [r1, #0]
 8003208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800320c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800320e:	6801      	ldr	r1, [r0, #0]
 8003210:	680a      	ldr	r2, [r1, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800321a:	f002 011c 	and.w	r1, r2, #28
 800321e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003220:	2201      	movs	r2, #1
 8003222:	408a      	lsls	r2, r1
 8003224:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003228:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800322a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800322c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800322e:	b132      	cbz	r2, 800323e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003230:	6811      	ldr	r1, [r2, #0]
 8003232:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003236:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800323a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800323c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003244:	2000      	movs	r0, #0
 8003246:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800324a:	4770      	bx	lr
    return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
}
 800324e:	4770      	bx	lr

08003250 <HAL_DMA_Abort_IT>:
{
 8003250:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003252:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d003      	beq.n	8003264 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	2304      	movs	r3, #4
 800325e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003260:	2001      	movs	r0, #1
}
 8003262:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003264:	6802      	ldr	r2, [r0, #0]
 8003266:	6813      	ldr	r3, [r2, #0]
 8003268:	f023 030e 	bic.w	r3, r3, #14
 800326c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800326e:	6802      	ldr	r2, [r0, #0]
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003278:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003282:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003284:	f003 021c 	and.w	r2, r3, #28
 8003288:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800328a:	2301      	movs	r3, #1
 800328c:	4093      	lsls	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003290:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003292:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003294:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003296:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003298:	b133      	cbz	r3, 80032a8 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032a4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80032a6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80032ae:	2300      	movs	r3, #0
 80032b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80032b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80032b6:	b113      	cbz	r3, 80032be <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80032b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2000      	movs	r0, #0
 80032bc:	e7d1      	b.n	8003262 <HAL_DMA_Abort_IT+0x12>
 80032be:	2000      	movs	r0, #0
 80032c0:	e7cf      	b.n	8003262 <HAL_DMA_Abort_IT+0x12>
	...

080032c4 <HAL_DMA_IRQHandler>:
{
 80032c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032c8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80032ca:	6804      	ldr	r4, [r0, #0]
 80032cc:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032d0:	f003 031c 	and.w	r3, r3, #28
 80032d4:	2204      	movs	r2, #4
 80032d6:	409a      	lsls	r2, r3
 80032d8:	420a      	tst	r2, r1
 80032da:	d015      	beq.n	8003308 <HAL_DMA_IRQHandler+0x44>
 80032dc:	f015 0f04 	tst.w	r5, #4
 80032e0:	d012      	beq.n	8003308 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	f013 0f20 	tst.w	r3, #32
 80032e8:	d103      	bne.n	80032f2 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032f4:	f003 021c 	and.w	r2, r3, #28
 80032f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80032fa:	2304      	movs	r3, #4
 80032fc:	4093      	lsls	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003300:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003302:	b103      	cbz	r3, 8003306 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003304:	4798      	blx	r3
}
 8003306:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003308:	2202      	movs	r2, #2
 800330a:	409a      	lsls	r2, r3
 800330c:	420a      	tst	r2, r1
 800330e:	d028      	beq.n	8003362 <HAL_DMA_IRQHandler+0x9e>
 8003310:	f015 0f02 	tst.w	r5, #2
 8003314:	d025      	beq.n	8003362 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	f013 0f20 	tst.w	r3, #32
 800331c:	d106      	bne.n	800332c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	f023 030a 	bic.w	r3, r3, #10
 8003324:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003326:	2301      	movs	r3, #1
 8003328:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800332c:	6802      	ldr	r2, [r0, #0]
 800332e:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <HAL_DMA_IRQHandler+0xdc>)
 8003330:	429a      	cmp	r2, r3
 8003332:	d90e      	bls.n	8003352 <HAL_DMA_IRQHandler+0x8e>
 8003334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003336:	f003 021c 	and.w	r2, r3, #28
 800333a:	2302      	movs	r3, #2
 800333c:	4093      	lsls	r3, r2
 800333e:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_DMA_IRQHandler+0xe0>)
 8003340:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003342:	2300      	movs	r3, #0
 8003344:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003348:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0db      	beq.n	8003306 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800334e:	4798      	blx	r3
 8003350:	e7d9      	b.n	8003306 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003352:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003354:	f003 021c 	and.w	r2, r3, #28
 8003358:	2302      	movs	r3, #2
 800335a:	4093      	lsls	r3, r2
 800335c:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <HAL_DMA_IRQHandler+0xe4>)
 800335e:	6053      	str	r3, [r2, #4]
 8003360:	e7ef      	b.n	8003342 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003362:	2208      	movs	r2, #8
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	420b      	tst	r3, r1
 800336a:	d0cc      	beq.n	8003306 <HAL_DMA_IRQHandler+0x42>
 800336c:	f015 0f08 	tst.w	r5, #8
 8003370:	d0c9      	beq.n	8003306 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	f023 030e 	bic.w	r3, r3, #14
 8003378:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800337a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800337c:	f003 031c 	and.w	r3, r3, #28
 8003380:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003382:	2201      	movs	r2, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800338a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800338c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003390:	2300      	movs	r3, #0
 8003392:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003396:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0b4      	beq.n	8003306 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800339c:	4798      	blx	r3
  return;
 800339e:	e7b2      	b.n	8003306 <HAL_DMA_IRQHandler+0x42>
 80033a0:	40020080 	.word	0x40020080
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020000 	.word	0x40020000

080033ac <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80033ac:	b178      	cbz	r0, 80033ce <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80033ae:	6803      	ldr	r3, [r0, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80033b2:	f011 0f10 	tst.w	r1, #16
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80033b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80033be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80033c2:	601a      	str	r2, [r3, #0]
  return status;
 80033c4:	2000      	movs	r0, #0
 80033c6:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80033c8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80033cc:	e7f9      	b.n	80033c2 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80033ce:	2001      	movs	r0, #1
}
 80033d0:	4770      	bx	lr

080033d2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80033d2:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80033d4:	4608      	mov	r0, r1
 80033d6:	b909      	cbnz	r1, 80033dc <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80033d8:	605a      	str	r2, [r3, #4]
      break;
 80033da:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 80033dc:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80033de:	4770      	bx	lr

080033e0 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80033e0:	b110      	cbz	r0, 80033e8 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80033e2:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80033e4:	2000      	movs	r0, #0
 80033e6:	4770      	bx	lr
    return HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
  }
}
 80033ea:	4770      	bx	lr

080033ec <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_FLASH_Unlock+0x28>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db01      	blt.n	80033f8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80033f4:	2000      	movs	r0, #0
 80033f6:	4770      	bx	lr
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_FLASH_Unlock+0x28>)
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <HAL_FLASH_Unlock+0x2c>)
 80033fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80033fe:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003402:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db01      	blt.n	800340e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2000      	movs	r0, #0
 800340c:	4770      	bx	lr
    {
      status = HAL_ERROR;
 800340e:	2001      	movs	r0, #1
    }
  }

  return status;
}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	58004000 	.word	0x58004000
 8003418:	45670123 	.word	0x45670123

0800341c <HAL_FLASH_Lock>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_FLASH_Lock+0x18>)
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003424:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db01      	blt.n	8003430 <HAL_FLASH_Lock+0x14>
  {
    status = HAL_ERROR;
 800342c:	2001      	movs	r0, #1
  }

  return status;
}
 800342e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2000      	movs	r0, #0
 8003432:	4770      	bx	lr
 8003434:	58004000 	.word	0x58004000

08003438 <HAL_FLASH_OB_Unlock>:
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_FLASH_OB_Unlock+0x2c>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003440:	d00b      	beq.n	800345a <HAL_FLASH_OB_Unlock+0x22>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_FLASH_OB_Unlock+0x2c>)
 8003444:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_FLASH_OB_Unlock+0x30>)
 8003446:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8003448:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 800344c:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003454:	d003      	beq.n	800345e <HAL_FLASH_OB_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003456:	2001      	movs	r0, #1
 8003458:	4770      	bx	lr
 800345a:	2001      	movs	r0, #1
 800345c:	4770      	bx	lr
    {
      status = HAL_OK;
 800345e:	2000      	movs	r0, #0
    }
  }

  return status;
}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	58004000 	.word	0x58004000
 8003468:	08192a3b 	.word	0x08192a3b

0800346c <HAL_FLASH_OB_Lock>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_FLASH_OB_Lock+0x1c>)
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003474:	615a      	str	r2, [r3, #20]

  /* verify option bytes are lock */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800347c:	d001      	beq.n	8003482 <HAL_FLASH_OB_Lock+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2000      	movs	r0, #0
 8003480:	4770      	bx	lr
  {
    status = HAL_ERROR;
 8003482:	2001      	movs	r0, #1
  }

  return status;
}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	58004000 	.word	0x58004000

0800348c <HAL_FLASH_OB_Launch>:
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
  /* Set the bit to force the option byte reloading */
  /* The OB launch is done from the same register either from CPU1 or CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800348c:	4a03      	ldr	r2, [pc, #12]	; (800349c <HAL_FLASH_OB_Launch+0x10>)
 800348e:	6953      	ldr	r3, [r2, #20]
 8003490:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003494:	6153      	str	r3, [r2, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
}
 8003496:	2001      	movs	r0, #1
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	58004000 	.word	0x58004000

080034a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4605      	mov	r5, r0
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7fd fd06 	bl	8000eb4 <HAL_GetTick>
 80034a8:	4604      	mov	r4, r0

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80034aa:	4b16      	ldr	r3, [pc, #88]	; (8003504 <FLASH_WaitForLastOperation+0x64>)
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034b2:	d006      	beq.n	80034c2 <FLASH_WaitForLastOperation+0x22>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80034b4:	f7fd fcfe 	bl	8000eb4 <HAL_GetTick>
 80034b8:	1b00      	subs	r0, r0, r4
 80034ba:	42a8      	cmp	r0, r5
 80034bc:	d3f5      	bcc.n	80034aa <FLASH_WaitForLastOperation+0xa>
    {
      return HAL_TIMEOUT;
 80034be:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <FLASH_WaitForLastOperation+0x64>)
 80034c4:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 80034c6:	f013 0f01 	tst.w	r3, #1
 80034ca:	d002      	beq.n	80034d2 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80034cc:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <FLASH_WaitForLastOperation+0x64>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 80034d2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 80034d6:	4013      	ands	r3, r2
 80034d8:	d001      	beq.n	80034de <FLASH_WaitForLastOperation+0x3e>
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <FLASH_WaitForLastOperation+0x64>)
 80034dc:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 80034de:	b95b      	cbnz	r3, 80034f8 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <FLASH_WaitForLastOperation+0x64>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80034e8:	d00a      	beq.n	8003500 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80034ea:	f7fd fce3 	bl	8000eb4 <HAL_GetTick>
 80034ee:	1b00      	subs	r0, r0, r4
 80034f0:	42a8      	cmp	r0, r5
 80034f2:	d3f5      	bcc.n	80034e0 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 80034f4:	2003      	movs	r0, #3
 80034f6:	e7e3      	b.n	80034c0 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 80034f8:	4a03      	ldr	r2, [pc, #12]	; (8003508 <FLASH_WaitForLastOperation+0x68>)
 80034fa:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
 80034fe:	e7df      	b.n	80034c0 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003500:	2000      	movs	r0, #0
 8003502:	e7dd      	b.n	80034c0 <FLASH_WaitForLastOperation+0x20>
 8003504:	58004000 	.word	0x58004000
 8003508:	20000284 	.word	0x20000284

0800350c <FLASH_OB_WRPConfig>:
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800350c:	b940      	cbnz	r0, 8003520 <FLASH_OB_WRPConfig+0x14>
  {
    MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800350e:	4809      	ldr	r0, [pc, #36]	; (8003534 <FLASH_OB_WRPConfig+0x28>)
 8003510:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003512:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8003516:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800351a:	4319      	orrs	r1, r3
 800351c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800351e:	4770      	bx	lr
               (WRPStartOffset | (WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos)));
  }
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <FLASH_OB_WRPConfig+0x28>)
 8003522:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003524:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8003528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800352c:	4319      	orrs	r1, r3
 800352e:	6301      	str	r1, [r0, #48]	; 0x30
               (WRPStartOffset | (WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos)));
  }
}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	58004000 	.word	0x58004000

08003538 <FLASH_OB_OptrConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @retval None
  */
#endif
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8003538:	b410      	push	{r4}
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 800353a:	4c05      	ldr	r4, [pc, #20]	; (8003550 <FLASH_OB_OptrConfig+0x18>)
 800353c:	6a23      	ldr	r3, [r4, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800353e:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 8003542:	ea23 0300 	bic.w	r3, r3, r0
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8003546:	430b      	orrs	r3, r1
 8003548:	4313      	orrs	r3, r2
 800354a:	6223      	str	r3, [r4, #32]
}
 800354c:	bc10      	pop	{r4}
 800354e:	4770      	bx	lr
 8003550:	58004000 	.word	0x58004000

08003554 <FLASH_OB_PCROP1AConfig>:
  assert_param(IS_OB_PCROP_CONFIG(PCROPConfig));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AEndAddr));

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 8003554:	4b10      	ldr	r3, [pc, #64]	; (8003598 <FLASH_OB_PCROP1AConfig+0x44>)
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0U)
 8003558:	f010 0f01 	tst.w	r0, #1
 800355c:	d014      	beq.n	8003588 <FLASH_OB_PCROP1AConfig+0x34>
{
 800355e:	b410      	push	{r4}
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8003560:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8003564:	0a89      	lsrs	r1, r1, #10
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8003566:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000

    /* Set Zone A start offset */
    WRITE_REG(FLASH->PCROP1ASR, startoffset);
 800356a:	4c0b      	ldr	r4, [pc, #44]	; (8003598 <FLASH_OB_PCROP1AConfig+0x44>)
 800356c:	6261      	str	r1, [r4, #36]	; 0x24

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 800356e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    pcrop1aend |= endoffset;
 8003572:	ea43 2392 	orr.w	r3, r3, r2, lsr #10
  }

  /* Set RDP erase protection if needed. This bit is only set & will be reset by mass erase */
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0U)
 8003576:	2800      	cmp	r0, #0
 8003578:	db03      	blt.n	8003582 <FLASH_OB_PCROP1AConfig+0x2e>
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
  }

  /* set 1A End register */
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 800357a:	4a07      	ldr	r2, [pc, #28]	; (8003598 <FLASH_OB_PCROP1AConfig+0x44>)
 800357c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800357e:	bc10      	pop	{r4}
 8003580:	4770      	bx	lr
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 8003582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003586:	e7f8      	b.n	800357a <FLASH_OB_PCROP1AConfig+0x26>
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0U)
 8003588:	2800      	cmp	r0, #0
 800358a:	db02      	blt.n	8003592 <FLASH_OB_PCROP1AConfig+0x3e>
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 800358c:	4a02      	ldr	r2, [pc, #8]	; (8003598 <FLASH_OB_PCROP1AConfig+0x44>)
 800358e:	6293      	str	r3, [r2, #40]	; 0x28
 8003590:	4770      	bx	lr
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 8003592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003596:	e7f9      	b.n	800358c <FLASH_OB_PCROP1AConfig+0x38>
 8003598:	58004000 	.word	0x58004000

0800359c <FLASH_OB_PCROP1BConfig>:
  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BEndAddr));

  /* Compute offset depending on pcrop granularity */
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 800359c:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 80035a0:	0a80      	lsrs	r0, r0, #10
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 80035a2:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80035a6:	0a89      	lsrs	r1, r1, #10

  /* Configure the Proprietary code readout protection start address */
  WRITE_REG(FLASH->PCROP1BSR, startoffset);
 80035a8:	4b01      	ldr	r3, [pc, #4]	; (80035b0 <FLASH_OB_PCROP1BConfig+0x14>)
 80035aa:	6358      	str	r0, [r3, #52]	; 0x34

  /* Configure the Proprietary code readout protection end address */
  WRITE_REG(FLASH->PCROP1BER, endoffset);
 80035ac:	6399      	str	r1, [r3, #56]	; 0x38
}
 80035ae:	4770      	bx	lr
 80035b0:	58004000 	.word	0x58004000

080035b4 <FLASH_OB_IPCCBufferAddrConfig>:
static void FLASH_OB_IPCCBufferAddrConfig(uint32_t IPCCDataBufAddr)
{
  assert_param(IS_OB_IPCC_BUF_ADDR(IPCCDataBufAddr));

  /* Configure the option bytes register */
  WRITE_REG(FLASH->IPCCBR, (uint32_t)((IPCCDataBufAddr - SRAM1_BASE) >> 4));
 80035b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80035b8:	0900      	lsrs	r0, r0, #4
 80035ba:	4b01      	ldr	r3, [pc, #4]	; (80035c0 <FLASH_OB_IPCCBufferAddrConfig+0xc>)
 80035bc:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 80035be:	4770      	bx	lr
 80035c0:	58004000 	.word	0x58004000

080035c4 <FLASH_OB_GetWRP>:
{
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80035c4:	b948      	cbnz	r0, 80035da <FLASH_OB_GetWRP+0x16>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80035c6:	480a      	ldr	r0, [pc, #40]	; (80035f0 <FLASH_OB_GetWRP+0x2c>)
 80035c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ce:	600b      	str	r3, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 80035d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035d2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4770      	bx	lr
  }
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80035da:	4805      	ldr	r0, [pc, #20]	; (80035f0 <FLASH_OB_GetWRP+0x2c>)
 80035dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80035de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e2:	600b      	str	r3, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 80035e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80035e6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80035ea:	6013      	str	r3, [r2, #0]
  }
}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	58004000 	.word	0x58004000

080035f4 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <FLASH_OB_GetRDP+0x14>)
 80035f6:	6a18      	ldr	r0, [r3, #32]
 80035f8:	b2c0      	uxtb	r0, r0

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 80035fa:	28aa      	cmp	r0, #170	; 0xaa
 80035fc:	d002      	beq.n	8003604 <FLASH_OB_GetRDP+0x10>
 80035fe:	28cc      	cmp	r0, #204	; 0xcc
 8003600:	d000      	beq.n	8003604 <FLASH_OB_GetRDP+0x10>
  {
    return (OB_RDP_LEVEL_1);
 8003602:	20bb      	movs	r0, #187	; 0xbb
  }
  else
  {
    return rdplvl;
  }
}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	58004000 	.word	0x58004000

0800360c <FLASH_OB_GetUser>:
  *         @arg @ref OB_BOOT_LOCK_DISABLE or @ref OB_BOOT_LOCK_ENABLE
  */
#endif
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user_config = (READ_REG(FLASH->OPTR) & OB_USER_ALL);
 800360c:	4b02      	ldr	r3, [pc, #8]	; (8003618 <FLASH_OB_GetUser+0xc>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
  CLEAR_BIT(user_config, (FLASH_OPTR_RDP | FLASH_OPTR_ESE));

  return user_config;
}
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <FLASH_OB_GetUser+0x10>)
 8003612:	4018      	ands	r0, r3
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	58004000 	.word	0x58004000
 800361c:	cf8f7e00 	.word	0xcf8f7e00

08003620 <FLASH_OB_GetPCROP>:
  * @param PCROP1BEndAddr [out] Specifies the address where to copied the end address of
  *                       the Zone 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr, uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 8003620:	b430      	push	{r4, r5}
  uint32_t pcrop;

  pcrop             = (READ_BIT(FLASH->PCROP1BSR, FLASH_PCROP1BSR_PCROP1B_STRT));
 8003622:	4c12      	ldr	r4, [pc, #72]	; (800366c <FLASH_OB_GetPCROP+0x4c>)
 8003624:	6b65      	ldr	r5, [r4, #52]	; 0x34
  *PCROP1BStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8003626:	02ad      	lsls	r5, r5, #10
 8003628:	f405 357f 	and.w	r5, r5, #261120	; 0x3fc00
 800362c:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 8003630:	601d      	str	r5, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1BER, FLASH_PCROP1BER_PCROP1B_END));
 8003632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  *PCROP1BEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8003634:	029b      	lsls	r3, r3, #10
 8003636:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
 800363a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800363e:	9d02      	ldr	r5, [sp, #8]
 8003640:	602b      	str	r3, [r5, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1ASR, FLASH_PCROP1ASR_PCROP1A_STRT));
 8003642:	6a63      	ldr	r3, [r4, #36]	; 0x24
  *PCROP1AStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
 800364a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800364e:	600b      	str	r3, [r1, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1AER, FLASH_PCROP1AER_PCROP1A_END));
 8003650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  *PCROP1AEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 8003652:	029b      	lsls	r3, r3, #10
 8003654:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
 8003658:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800365c:	6013      	str	r3, [r2, #0]

  *PCROPConfig      = (READ_REG(FLASH->PCROP1AER) & FLASH_PCROP1AER_PCROP_RDP);
 800365e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003664:	6003      	str	r3, [r0, #0]
}
 8003666:	bc30      	pop	{r4, r5}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	58004000 	.word	0x58004000

08003670 <FLASH_OB_GetIPCCBufferAddr>:
  *           This value correspond to the first double-word of the IPCC mailbox data buffer area
  *           in SRAM starting from 0x20000000 (SRAM1 start address to SRAM2 end address).
  */
static uint32_t FLASH_OB_GetIPCCBufferAddr(void)
{
  return (uint32_t)((READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA) << 4) + SRAM1_BASE);
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <FLASH_OB_GetIPCCBufferAddr+0x10>)
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	4803      	ldr	r0, [pc, #12]	; (8003684 <FLASH_OB_GetIPCCBufferAddr+0x14>)
 8003676:	ea00 1003 	and.w	r0, r0, r3, lsl #4
}
 800367a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800367e:	4770      	bx	lr
 8003680:	58004000 	.word	0x58004000
 8003684:	0003fff0 	.word	0x0003fff0

08003688 <FLASH_OB_GetC2BootResetConfig>:
  * @param  C2BootResetRegion   Specifies the Secure Boot reset memory region
  * @retval None
  */
static void FLASH_OB_GetC2BootResetConfig(uint32_t *C2BootResetVectAddr, uint32_t *C2BootResetRegion)
{
  *C2BootResetRegion = (READ_BIT(FLASH->SRRVR, FLASH_SRRVR_C2OPT));
 8003688:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <FLASH_OB_GetC2BootResetConfig+0x38>)
 800368a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003692:	600b      	str	r3, [r1, #0]

  if (*C2BootResetRegion == OB_C2_BOOT_FROM_FLASH)
 8003694:	b94b      	cbnz	r3, 80036aa <FLASH_OB_GetC2BootResetConfig+0x22>
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + FLASH_BASE);
  }
  else
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + SRAM1_BASE);
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <FLASH_OB_GetC2BootResetConfig+0x38>)
 8003698:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <FLASH_OB_GetC2BootResetConfig+0x3c>)
 800369e:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80036a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80036a6:	6003      	str	r3, [r0, #0]
  }
}
 80036a8:	4770      	bx	lr
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + FLASH_BASE);
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <FLASH_OB_GetC2BootResetConfig+0x38>)
 80036ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <FLASH_OB_GetC2BootResetConfig+0x3c>)
 80036b2:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80036b6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80036ba:	6003      	str	r3, [r0, #0]
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	58004000 	.word	0x58004000
 80036c4:	0003fffc 	.word	0x0003fffc

080036c8 <FLASH_OB_GetSUBGHZSPISecureAccess>:
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_DISABLE : Sub-GHz radio SPI Secure access disabled
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_ENABLE : Sub-GHz radio SPI Secure access enabled
  */
static uint32_t FLASH_OB_GetSUBGHZSPISecureAccess(void)
{
  return (READ_BIT(FLASH->SFR, FLASH_SFR_SUBGHZSPISD));
 80036c8:	4b02      	ldr	r3, [pc, #8]	; (80036d4 <FLASH_OB_GetSUBGHZSPISecureAccess+0xc>)
 80036ca:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80036ce:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80036d2:	4770      	bx	lr
 80036d4:	58004000 	.word	0x58004000

080036d8 <FLASH_OB_GetC2DebugAccessMode>:
  *           @arg @ref OB_C2_DEBUG_ACCESS_DISABLE : CPU2 debug access disabled
  *           @arg @ref OB_C2_DEBUG_ACCESS_ENABLE : CPU2 debug access enabled
  */
static uint32_t FLASH_OB_GetC2DebugAccessMode(void)
{
  return (READ_BIT(FLASH->SFR, FLASH_SFR_DDS));
 80036d8:	4b02      	ldr	r3, [pc, #8]	; (80036e4 <FLASH_OB_GetC2DebugAccessMode+0xc>)
 80036da:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80036de:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 80036e2:	4770      	bx	lr
 80036e4:	58004000 	.word	0x58004000

080036e8 <FLASH_OB_ConfigSecureMode>:
  * @retval None
  */
static void FLASH_OB_ConfigSecureMode(uint32_t SecureMode, uint32_t *Reg, uint32_t Bit, uint32_t ValueEnable)
{
  /* Check if SecureMode is requested */
  if ((SecureMode & ValueEnable) == ValueEnable)
 80036e8:	4383      	bics	r3, r0
 80036ea:	d003      	beq.n	80036f4 <FLASH_OB_ConfigSecureMode+0xc>
  {
    CLEAR_BIT(*Reg, Bit);
  }
  else
  {
    SET_BIT(*Reg, Bit);
 80036ec:	680b      	ldr	r3, [r1, #0]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	600a      	str	r2, [r1, #0]
  }
}
 80036f2:	4770      	bx	lr
    CLEAR_BIT(*Reg, Bit);
 80036f4:	680b      	ldr	r3, [r1, #0]
 80036f6:	ea23 0202 	bic.w	r2, r3, r2
 80036fa:	600a      	str	r2, [r1, #0]
 80036fc:	4770      	bx	lr
	...

08003700 <FLASH_OB_SecureConfig>:
{
 8003700:	b510      	push	{r4, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	4604      	mov	r4, r0
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8003706:	4b49      	ldr	r3, [pc, #292]	; (800382c <FLASH_OB_SecureConfig+0x12c>)
 8003708:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800370c:	9201      	str	r2, [sp, #4]
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	9300      	str	r3, [sp, #0]
  if ((pOBParam->OptionType & OPTIONBYTE_SECURE_MODE) != 0U)
 8003714:	6801      	ldr	r1, [r0, #0]
 8003716:	f411 7f00 	tst.w	r1, #512	; 0x200
 800371a:	d032      	beq.n	8003782 <FLASH_OB_SecureConfig+0x82>
    MODIFY_REG(sfr_reg_val, (FLASH_SFR_SFSA | FLASH_SFR_HDPSA), \
 800371c:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8003720:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003722:	f101 4078 	add.w	r0, r1, #4160749568	; 0xf8000000
 8003726:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003728:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800372c:	0ac9      	lsrs	r1, r1, #11
 800372e:	0409      	lsls	r1, r1, #16
 8003730:	ea41 21d0 	orr.w	r1, r1, r0, lsr #11
 8003734:	430a      	orrs	r2, r1
 8003736:	9201      	str	r2, [sp, #4]
    MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRSA | FLASH_SRRVR_SNBRSA), \
 8003738:	f023 5379 	bic.w	r3, r3, #1044381696	; 0x3e400000
 800373c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8003740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003742:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 8003746:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800374a:	0a88      	lsrs	r0, r1, #10
 800374c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800374e:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 8003752:	0a89      	lsrs	r1, r1, #10
 8003754:	0649      	lsls	r1, r1, #25
 8003756:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800375a:	430b      	orrs	r3, r1
 800375c:	9300      	str	r3, [sp, #0]
    if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_ENABLE)
 800375e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003760:	280f      	cmp	r0, #15
 8003762:	d008      	beq.n	8003776 <FLASH_OB_SecureConfig+0x76>
    else if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_DISABLE)
 8003764:	28f0      	cmp	r0, #240	; 0xf0
 8003766:	d13b      	bne.n	80037e0 <FLASH_OB_SecureConfig+0xe0>
      SET_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 8003768:	f042 1280 	orr.w	r2, r2, #8388736	; 0x800080
 800376c:	9201      	str	r2, [sp, #4]
      SET_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 800376e:	f043 4381 	orr.w	r3, r3, #1082130432	; 0x40800000
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	e005      	b.n	8003782 <FLASH_OB_SecureConfig+0x82>
      CLEAR_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 8003776:	f022 1280 	bic.w	r2, r2, #8388736	; 0x800080
 800377a:	9201      	str	r2, [sp, #4]
      CLEAR_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 800377c:	f023 4381 	bic.w	r3, r3, #1082130432	; 0x40800000
 8003780:	9300      	str	r3, [sp, #0]
  if ((pOBParam->OptionType & OPTIONBYTE_C2_BOOT_VECT) != 0U)
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003788:	d00d      	beq.n	80037a6 <FLASH_OB_SecureConfig+0xa6>
    if (pOBParam->C2BootRegion == OB_C2_BOOT_FROM_FLASH)
 800378a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800378c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003790:	d041      	beq.n	8003816 <FLASH_OB_SecureConfig+0x116>
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - SRAM1_BASE) >> 2) | pOBParam->C2BootRegion));
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <FLASH_OB_SecureConfig+0x130>)
 8003794:	9900      	ldr	r1, [sp, #0]
 8003796:	400a      	ands	r2, r1
 8003798:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800379a:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 800379e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 80037a2:	4313      	orrs	r3, r2
 80037a4:	9300      	str	r3, [sp, #0]
  if ((pOBParam->OptionType & OPTIONBYTE_C2_DEBUG_ACCESS) != 0U)
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80037ac:	d005      	beq.n	80037ba <FLASH_OB_SecureConfig+0xba>
    MODIFY_REG(sfr_reg_val, FLASH_SFR_DDS, (uint32_t)pOBParam->C2DebugAccessMode);
 80037ae:	9b01      	ldr	r3, [sp, #4]
 80037b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80037b6:	4313      	orrs	r3, r2
 80037b8:	9301      	str	r3, [sp, #4]
  if ((pOBParam->OptionType & OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS) != 0U)
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80037c0:	d005      	beq.n	80037ce <FLASH_OB_SecureConfig+0xce>
    MODIFY_REG(sfr_reg_val, FLASH_SFR_SUBGHZSPISD, (uint32_t)pOBParam->SUBGHZSPISecureAccess);
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80037ca:	4313      	orrs	r3, r2
 80037cc:	9301      	str	r3, [sp, #4]
  WRITE_REG(FLASH->SFR, sfr_reg_val);
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <FLASH_OB_SecureConfig+0x12c>)
 80037d0:	9a01      	ldr	r2, [sp, #4]
 80037d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  WRITE_REG(FLASH->SRRVR, srrvr_reg_val);
 80037d6:	9a00      	ldr	r2, [sp, #0]
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80037dc:	b002      	add	sp, #8
 80037de:	bd10      	pop	{r4, pc}
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE);
 80037e0:	2301      	movs	r3, #1
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	a901      	add	r1, sp, #4
 80037e6:	f7ff ff7f 	bl	80036e8 <FLASH_OB_ConfigSecureMode>
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE);
 80037ea:	2302      	movs	r3, #2
 80037ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037f0:	a901      	add	r1, sp, #4
 80037f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80037f4:	f7ff ff78 	bl	80036e8 <FLASH_OB_ConfigSecureMode>
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE);
 80037f8:	2304      	movs	r3, #4
 80037fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037fe:	4669      	mov	r1, sp
 8003800:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003802:	f7ff ff71 	bl	80036e8 <FLASH_OB_ConfigSecureMode>
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE);
 8003806:	2308      	movs	r3, #8
 8003808:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800380c:	4669      	mov	r1, sp
 800380e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003810:	f7ff ff6a 	bl	80036e8 <FLASH_OB_ConfigSecureMode>
 8003814:	e7b5      	b.n	8003782 <FLASH_OB_SecureConfig+0x82>
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - FLASH_BASE) >> 2) | pOBParam->C2BootRegion));
 8003816:	4a06      	ldr	r2, [pc, #24]	; (8003830 <FLASH_OB_SecureConfig+0x130>)
 8003818:	9900      	ldr	r1, [sp, #0]
 800381a:	400a      	ands	r2, r1
 800381c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800381e:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8003822:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 8003826:	4313      	orrs	r3, r2
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	e7bc      	b.n	80037a6 <FLASH_OB_SecureConfig+0xa6>
 800382c:	58004000 	.word	0x58004000
 8003830:	7fff0000 	.word	0x7fff0000

08003834 <FLASH_OB_GetSecureMode>:
  *                               Null
  */
static uint32_t FLASH_OB_GetSecureMode(uint32_t Reg, uint32_t Bit, uint32_t ValueEnable, uint32_t ValueDisable)
{
  /* Return status of bit (set as enable, set as disable) */
  if (READ_BIT(Reg, Bit) == 0U)
 8003834:	4208      	tst	r0, r1
 8003836:	d100      	bne.n	800383a <FLASH_OB_GetSecureMode+0x6>
  {
    return ValueEnable;
 8003838:	4613      	mov	r3, r2
  }
  else
  {
    return ValueDisable;
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	4770      	bx	lr
	...

08003840 <FLASH_OB_GetSecureMemoryConfig>:
{
 8003840:	b570      	push	{r4, r5, r6, lr}
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 8003842:	4c21      	ldr	r4, [pc, #132]	; (80038c8 <FLASH_OB_GetSecureMemoryConfig+0x88>)
 8003844:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 8003848:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
  uint32_t user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 800384c:	f006 047f 	and.w	r4, r6, #127	; 0x7f
  *SecureFlashStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 8003850:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8003854:	02e4      	lsls	r4, r4, #11
 8003856:	6004      	str	r4, [r0, #0]
  user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_HDPSA) >> FLASH_SFR_HDPSA_Pos);
 8003858:	f3c6 4006 	ubfx	r0, r6, #16, #7
  *HideProtectionStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 800385c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003860:	02c0      	lsls	r0, r0, #11
 8003862:	6008      	str	r0, [r1, #0]
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SBRSA) >> FLASH_SRRVR_SBRSA_Pos);
 8003864:	0ca9      	lsrs	r1, r5, #18
  *SecureSRAM2StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2_BASE);
 8003866:	0289      	lsls	r1, r1, #10
 8003868:	f401 41f8 	and.w	r1, r1, #31744	; 0x7c00
 800386c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003870:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8003874:	6011      	str	r1, [r2, #0]
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SNBRSA) >> FLASH_SRRVR_SNBRSA_Pos);
 8003876:	0e6a      	lsrs	r2, r5, #25
  *SecureSRAM1StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM1_BASE);
 8003878:	0292      	lsls	r2, r2, #10
 800387a:	f402 42f8 	and.w	r2, r2, #31744	; 0x7c00
 800387e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8003882:	601a      	str	r2, [r3, #0]
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 8003884:	2310      	movs	r3, #16
 8003886:	2201      	movs	r2, #1
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	4630      	mov	r0, r6
 800388c:	f7ff ffd2 	bl	8003834 <FLASH_OB_GetSecureMode>
 8003890:	4604      	mov	r4, r0
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 8003892:	2320      	movs	r3, #32
 8003894:	2202      	movs	r2, #2
 8003896:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800389a:	4630      	mov	r0, r6
 800389c:	f7ff ffca 	bl	8003834 <FLASH_OB_GetSecureMode>
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 80038a0:	4304      	orrs	r4, r0
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 80038a2:	2340      	movs	r3, #64	; 0x40
 80038a4:	2204      	movs	r2, #4
 80038a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038aa:	4628      	mov	r0, r5
 80038ac:	f7ff ffc2 	bl	8003834 <FLASH_OB_GetSecureMode>
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 80038b0:	4304      	orrs	r4, r0
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE, OB_SECURE_SRAM2_DISABLE));
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	2208      	movs	r2, #8
 80038b6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80038ba:	4628      	mov	r0, r5
 80038bc:	f7ff ffba 	bl	8003834 <FLASH_OB_GetSecureMode>
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 80038c0:	4304      	orrs	r4, r0
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 80038c2:	9b04      	ldr	r3, [sp, #16]
 80038c4:	601c      	str	r4, [r3, #0]
}
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	58004000 	.word	0x58004000

080038cc <FLASH_OB_ProceedWriteOperation>:
{
 80038cc:	b508      	push	{r3, lr}
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038d2:	f7ff fde5 	bl	80034a0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80038d6:	b100      	cbz	r0, 80038da <FLASH_OB_ProceedWriteOperation+0xe>
}
 80038d8:	bd08      	pop	{r3, pc}
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <FLASH_OB_ProceedWriteOperation+0x24>)
 80038dc:	6953      	ldr	r3, [r2, #20]
 80038de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e2:	6153      	str	r3, [r2, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038e8:	f7ff fdda 	bl	80034a0 <FLASH_WaitForLastOperation>
 80038ec:	e7f4      	b.n	80038d8 <FLASH_OB_ProceedWriteOperation+0xc>
 80038ee:	bf00      	nop
 80038f0:	58004000 	.word	0x58004000

080038f4 <HAL_FLASHEx_OBProgram>:
  __HAL_LOCK(&pFlash);
 80038f4:	4b32      	ldr	r3, [pc, #200]	; (80039c0 <HAL_FLASHEx_OBProgram+0xcc>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d05e      	beq.n	80039ba <HAL_FLASHEx_OBProgram+0xc6>
{
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8003900:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <HAL_FLASHEx_OBProgram+0xcc>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800390a:	6803      	ldr	r3, [r0, #0]
 800390c:	f013 0f01 	tst.w	r3, #1
 8003910:	d124      	bne.n	800395c <HAL_FLASHEx_OBProgram+0x68>
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	f003 0206 	and.w	r2, r3, #6
 8003918:	2a06      	cmp	r2, #6
 800391a:	d025      	beq.n	8003968 <HAL_FLASHEx_OBProgram+0x74>
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800391c:	f013 0f02 	tst.w	r3, #2
 8003920:	d128      	bne.n	8003974 <HAL_FLASHEx_OBProgram+0x80>
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8003922:	f013 0f04 	tst.w	r3, #4
 8003926:	d12e      	bne.n	8003986 <HAL_FLASHEx_OBProgram+0x92>
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	f013 0f08 	tst.w	r3, #8
 800392e:	d007      	beq.n	8003940 <HAL_FLASHEx_OBProgram+0x4c>
    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0U)
 8003930:	69e0      	ldr	r0, [r4, #28]
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_FLASHEx_OBProgram+0xd0>)
 8003934:	4218      	tst	r0, r3
 8003936:	d12e      	bne.n	8003996 <HAL_FLASHEx_OBProgram+0xa2>
    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0U)
 8003938:	69e3      	ldr	r3, [r4, #28]
 800393a:	f013 0f02 	tst.w	r3, #2
 800393e:	d12f      	bne.n	80039a0 <HAL_FLASHEx_OBProgram+0xac>
  if ((pOBInit->OptionType & (OPTIONBYTE_SECURE_MODE | OPTIONBYTE_C2_BOOT_VECT | OPTIONBYTE_C2_DEBUG_ACCESS | OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS)) != 0U)
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	f413 6f70 	tst.w	r3, #3840	; 0xf00
 8003946:	d130      	bne.n	80039aa <HAL_FLASHEx_OBProgram+0xb6>
  if ((pOBInit->OptionType & OPTIONBYTE_IPCC_BUF_ADDR) != 0U)
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	f013 0f10 	tst.w	r3, #16
 800394e:	d130      	bne.n	80039b2 <HAL_FLASHEx_OBProgram+0xbe>
  status = FLASH_OB_ProceedWriteOperation();
 8003950:	f7ff ffbc 	bl	80038cc <FLASH_OB_ProceedWriteOperation>
  __HAL_UNLOCK(&pFlash);
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_FLASHEx_OBProgram+0xcc>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
}
 800395a:	bd10      	pop	{r4, pc}
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 800395c:	68c2      	ldr	r2, [r0, #12]
 800395e:	6881      	ldr	r1, [r0, #8]
 8003960:	6840      	ldr	r0, [r0, #4]
 8003962:	f7ff fdd3 	bl	800350c <FLASH_OB_WRPConfig>
 8003966:	e7d4      	b.n	8003912 <HAL_FLASHEx_OBProgram+0x1e>
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, pOBInit->RDPLevel);
 8003968:	6922      	ldr	r2, [r4, #16]
 800396a:	69a1      	ldr	r1, [r4, #24]
 800396c:	6960      	ldr	r0, [r4, #20]
 800396e:	f7ff fde3 	bl	8003538 <FLASH_OB_OptrConfig>
 8003972:	e7d9      	b.n	8003928 <HAL_FLASHEx_OBProgram+0x34>
    optr = FLASH_OB_GetUser();
 8003974:	f7ff fe4a 	bl	800360c <FLASH_OB_GetUser>
    optr &= ~OB_USER_BOR_LEV;
 8003978:	f420 6060 	bic.w	r0, r0, #3584	; 0xe00
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	4601      	mov	r1, r0
 8003980:	f7ff fdda 	bl	8003538 <FLASH_OB_OptrConfig>
 8003984:	e7d0      	b.n	8003928 <HAL_FLASHEx_OBProgram+0x34>
    optr = FLASH_OB_GetRDP();
 8003986:	f7ff fe35 	bl	80035f4 <FLASH_OB_GetRDP>
 800398a:	4602      	mov	r2, r0
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, optr);
 800398c:	69a1      	ldr	r1, [r4, #24]
 800398e:	6960      	ldr	r0, [r4, #20]
 8003990:	f7ff fdd2 	bl	8003538 <FLASH_OB_OptrConfig>
 8003994:	e7c8      	b.n	8003928 <HAL_FLASHEx_OBProgram+0x34>
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 8003996:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003998:	6a21      	ldr	r1, [r4, #32]
 800399a:	f7ff fddb 	bl	8003554 <FLASH_OB_PCROP1AConfig>
 800399e:	e7cb      	b.n	8003938 <HAL_FLASHEx_OBProgram+0x44>
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 80039a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80039a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80039a4:	f7ff fdfa 	bl	800359c <FLASH_OB_PCROP1BConfig>
 80039a8:	e7ca      	b.n	8003940 <HAL_FLASHEx_OBProgram+0x4c>
    FLASH_OB_SecureConfig(pOBInit);
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7ff fea8 	bl	8003700 <FLASH_OB_SecureConfig>
 80039b0:	e7ca      	b.n	8003948 <HAL_FLASHEx_OBProgram+0x54>
    FLASH_OB_IPCCBufferAddrConfig(pOBInit->IPCCdataBufAddr);
 80039b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039b4:	f7ff fdfe 	bl	80035b4 <FLASH_OB_IPCCBufferAddrConfig>
 80039b8:	e7ca      	b.n	8003950 <HAL_FLASHEx_OBProgram+0x5c>
  __HAL_LOCK(&pFlash);
 80039ba:	2002      	movs	r0, #2
}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000284 	.word	0x20000284
 80039c4:	80000001 	.word	0x80000001

080039c8 <HAL_FLASHEx_OBGetConfig>:
{
 80039c8:	b510      	push	{r4, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	4604      	mov	r4, r0
  pOBInit->OptionType = OPTIONBYTE_ALL;
 80039ce:	f640 731f 	movw	r3, #3871	; 0xf1f
 80039d2:	6003      	str	r3, [r0, #0]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 80039d4:	6840      	ldr	r0, [r0, #4]
 80039d6:	2801      	cmp	r0, #1
 80039d8:	d936      	bls.n	8003a48 <HAL_FLASHEx_OBGetConfig+0x80>
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80039da:	f7ff fe0b 	bl	80035f4 <FLASH_OB_GetRDP>
 80039de:	6120      	str	r0, [r4, #16]
  pOBInit->UserConfig = FLASH_OB_GetUser();
 80039e0:	f7ff fe14 	bl	800360c <FLASH_OB_GetUser>
 80039e4:	61a0      	str	r0, [r4, #24]
  pOBInit->UserType = OB_USER_ALL;
 80039e6:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <HAL_FLASHEx_OBGetConfig+0x90>)
 80039e8:	6163      	str	r3, [r4, #20]
  FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr), &(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 80039ea:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80039f4:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80039f8:	f104 0120 	add.w	r1, r4, #32
 80039fc:	f104 001c 	add.w	r0, r4, #28
 8003a00:	f7ff fe0e 	bl	8003620 <FLASH_OB_GetPCROP>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 8003a04:	69e3      	ldr	r3, [r4, #28]
 8003a06:	f043 0303 	orr.w	r3, r3, #3
 8003a0a:	61e3      	str	r3, [r4, #28]
  pOBInit->IPCCdataBufAddr = FLASH_OB_GetIPCCBufferAddr();
 8003a0c:	f7ff fe30 	bl	8003670 <FLASH_OB_GetIPCCBufferAddr>
 8003a10:	6560      	str	r0, [r4, #84]	; 0x54
  FLASH_OB_GetSecureMemoryConfig(&(pOBInit->SecureFlashStartAddr), &(pOBInit->HideProtectionStartAddr), &(pOBInit->SecureSRAM2StartAddr), &(pOBInit->SecureSRAM1StartAddr), &(pOBInit->SecureMode));
 8003a12:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003a1c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003a20:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8003a24:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003a28:	f7ff ff0a 	bl	8003840 <FLASH_OB_GetSecureMemoryConfig>
  FLASH_OB_GetC2BootResetConfig(&(pOBInit->C2SecureBootVectAddr), &(pOBInit->C2BootRegion));
 8003a2c:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8003a30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a34:	f7ff fe28 	bl	8003688 <FLASH_OB_GetC2BootResetConfig>
  pOBInit->SUBGHZSPISecureAccess = FLASH_OB_GetSUBGHZSPISecureAccess();
 8003a38:	f7ff fe46 	bl	80036c8 <FLASH_OB_GetSUBGHZSPISecureAccess>
 8003a3c:	6460      	str	r0, [r4, #68]	; 0x44
  pOBInit->C2DebugAccessMode = FLASH_OB_GetC2DebugAccessMode();
 8003a3e:	f7ff fe4b 	bl	80036d8 <FLASH_OB_GetC2DebugAccessMode>
 8003a42:	64a0      	str	r0, [r4, #72]	; 0x48
}
 8003a44:	b002      	add	sp, #8
 8003a46:	bd10      	pop	{r4, pc}
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8003a48:	f104 020c 	add.w	r2, r4, #12
 8003a4c:	f104 0108 	add.w	r1, r4, #8
 8003a50:	f7ff fdb8 	bl	80035c4 <FLASH_OB_GetWRP>
 8003a54:	e7c1      	b.n	80039da <HAL_FLASHEx_OBGetConfig+0x12>
 8003a56:	bf00      	nop
 8003a58:	cf8f7e00 	.word	0xcf8f7e00

08003a5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a5c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8003a5e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a60:	e05f      	b.n	8003b22 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a62:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a64:	005f      	lsls	r7, r3, #1
 8003a66:	2503      	movs	r5, #3
 8003a68:	40bd      	lsls	r5, r7
 8003a6a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	68cd      	ldr	r5, [r1, #12]
 8003a70:	40bd      	lsls	r5, r7
 8003a72:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003a74:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a76:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a78:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7c:	684d      	ldr	r5, [r1, #4]
 8003a7e:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8003a82:	409c      	lsls	r4, r3
 8003a84:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8003a86:	6044      	str	r4, [r0, #4]
 8003a88:	e059      	b.n	8003b3e <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a8a:	08dd      	lsrs	r5, r3, #3
 8003a8c:	3508      	adds	r5, #8
 8003a8e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a92:	f003 0407 	and.w	r4, r3, #7
 8003a96:	00a6      	lsls	r6, r4, #2
 8003a98:	240f      	movs	r4, #15
 8003a9a:	40b4      	lsls	r4, r6
 8003a9c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003aa0:	690c      	ldr	r4, [r1, #16]
 8003aa2:	40b4      	lsls	r4, r6
 8003aa4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8003aa6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003aaa:	e05c      	b.n	8003b66 <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aac:	2402      	movs	r4, #2
 8003aae:	e000      	b.n	8003ab2 <HAL_GPIO_Init+0x56>
 8003ab0:	2400      	movs	r4, #0
 8003ab2:	40b4      	lsls	r4, r6
 8003ab4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ab6:	3502      	adds	r5, #2
 8003ab8:	4e41      	ldr	r6, [pc, #260]	; (8003bc0 <HAL_GPIO_Init+0x164>)
 8003aba:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003abe:	4c41      	ldr	r4, [pc, #260]	; (8003bc4 <HAL_GPIO_Init+0x168>)
 8003ac0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003ac4:	43d4      	mvns	r4, r2
 8003ac6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aca:	684f      	ldr	r7, [r1, #4]
 8003acc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003ad0:	d001      	beq.n	8003ad6 <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 8003ad2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003ad6:	4d3b      	ldr	r5, [pc, #236]	; (8003bc4 <HAL_GPIO_Init+0x168>)
 8003ad8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003adc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003ae0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ae4:	684f      	ldr	r7, [r1, #4]
 8003ae6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003aea:	d001      	beq.n	8003af0 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 8003aec:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003af0:	4d34      	ldr	r5, [pc, #208]	; (8003bc4 <HAL_GPIO_Init+0x168>)
 8003af2:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003af6:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003af8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003afc:	684f      	ldr	r7, [r1, #4]
 8003afe:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003b02:	d001      	beq.n	8003b08 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8003b04:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003b08:	4d2e      	ldr	r5, [pc, #184]	; (8003bc4 <HAL_GPIO_Init+0x168>)
 8003b0a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003b0c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003b0e:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b10:	684e      	ldr	r6, [r1, #4]
 8003b12:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003b16:	d001      	beq.n	8003b1c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8003b18:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003b1c:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <HAL_GPIO_Init+0x168>)
 8003b1e:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8003b20:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b22:	680a      	ldr	r2, [r1, #0]
 8003b24:	fa32 f403 	lsrs.w	r4, r2, r3
 8003b28:	d048      	beq.n	8003bbc <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b2a:	2401      	movs	r4, #1
 8003b2c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003b2e:	4022      	ands	r2, r4
 8003b30:	d0f6      	beq.n	8003b20 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b32:	684d      	ldr	r5, [r1, #4]
 8003b34:	f005 0503 	and.w	r5, r5, #3
 8003b38:	3d01      	subs	r5, #1
 8003b3a:	2d01      	cmp	r5, #1
 8003b3c:	d991      	bls.n	8003a62 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3e:	684c      	ldr	r4, [r1, #4]
 8003b40:	f004 0403 	and.w	r4, r4, #3
 8003b44:	2c03      	cmp	r4, #3
 8003b46:	d009      	beq.n	8003b5c <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8003b48:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b4a:	005e      	lsls	r6, r3, #1
 8003b4c:	2403      	movs	r4, #3
 8003b4e:	40b4      	lsls	r4, r6
 8003b50:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b54:	688c      	ldr	r4, [r1, #8]
 8003b56:	40b4      	lsls	r4, r6
 8003b58:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003b5a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5c:	684c      	ldr	r4, [r1, #4]
 8003b5e:	f004 0403 	and.w	r4, r4, #3
 8003b62:	2c02      	cmp	r4, #2
 8003b64:	d091      	beq.n	8003a8a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003b66:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b68:	005e      	lsls	r6, r3, #1
 8003b6a:	2403      	movs	r4, #3
 8003b6c:	40b4      	lsls	r4, r6
 8003b6e:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b72:	684c      	ldr	r4, [r1, #4]
 8003b74:	f004 0403 	and.w	r4, r4, #3
 8003b78:	40b4      	lsls	r4, r6
 8003b7a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003b7c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b7e:	684c      	ldr	r4, [r1, #4]
 8003b80:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003b84:	d0cc      	beq.n	8003b20 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b86:	089d      	lsrs	r5, r3, #2
 8003b88:	1cae      	adds	r6, r5, #2
 8003b8a:	4c0d      	ldr	r4, [pc, #52]	; (8003bc0 <HAL_GPIO_Init+0x164>)
 8003b8c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003b90:	f003 0403 	and.w	r4, r3, #3
 8003b94:	00a6      	lsls	r6, r4, #2
 8003b96:	2407      	movs	r4, #7
 8003b98:	40b4      	lsls	r4, r6
 8003b9a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b9e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003ba2:	d085      	beq.n	8003ab0 <HAL_GPIO_Init+0x54>
 8003ba4:	4c08      	ldr	r4, [pc, #32]	; (8003bc8 <HAL_GPIO_Init+0x16c>)
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	d006      	beq.n	8003bb8 <HAL_GPIO_Init+0x15c>
 8003baa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003bae:	42a0      	cmp	r0, r4
 8003bb0:	f43f af7c 	beq.w	8003aac <HAL_GPIO_Init+0x50>
 8003bb4:	2407      	movs	r4, #7
 8003bb6:	e77c      	b.n	8003ab2 <HAL_GPIO_Init+0x56>
 8003bb8:	2401      	movs	r4, #1
 8003bba:	e77a      	b.n	8003ab2 <HAL_GPIO_Init+0x56>
  }
}
 8003bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	58000800 	.word	0x58000800
 8003bc8:	48000400 	.word	0x48000400

08003bcc <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003bcc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003bce:	fa31 f203 	lsrs.w	r2, r1, r3
 8003bd2:	d06f      	beq.n	8003cb4 <HAL_GPIO_DeInit+0xe8>
{
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	e02d      	b.n	8003c34 <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003bd8:	2702      	movs	r7, #2
 8003bda:	e000      	b.n	8003bde <HAL_GPIO_DeInit+0x12>
 8003bdc:	2700      	movs	r7, #0
 8003bde:	fa07 f404 	lsl.w	r4, r7, r4
 8003be2:	42b4      	cmp	r4, r6
 8003be4:	d046      	beq.n	8003c74 <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003be6:	6805      	ldr	r5, [r0, #0]
 8003be8:	005c      	lsls	r4, r3, #1
 8003bea:	2603      	movs	r6, #3
 8003bec:	fa06 f404 	lsl.w	r4, r6, r4
 8003bf0:	4325      	orrs	r5, r4
 8003bf2:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003bf4:	fa23 f506 	lsr.w	r5, r3, r6
 8003bf8:	3508      	adds	r5, #8
 8003bfa:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8003bfe:	f003 0707 	and.w	r7, r3, #7
 8003c02:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8003c06:	270f      	movs	r7, #15
 8003c08:	fa07 f70c 	lsl.w	r7, r7, ip
 8003c0c:	ea26 0607 	bic.w	r6, r6, r7
 8003c10:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c14:	6885      	ldr	r5, [r0, #8]
 8003c16:	ea25 0504 	bic.w	r5, r5, r4
 8003c1a:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c1c:	6845      	ldr	r5, [r0, #4]
 8003c1e:	ea25 0202 	bic.w	r2, r5, r2
 8003c22:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c24:	68c2      	ldr	r2, [r0, #12]
 8003c26:	ea22 0404 	bic.w	r4, r2, r4
 8003c2a:	60c4      	str	r4, [r0, #12]
    }

    position++;
 8003c2c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003c2e:	fa31 f203 	lsrs.w	r2, r1, r3
 8003c32:	d03e      	beq.n	8003cb2 <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c34:	2201      	movs	r2, #1
 8003c36:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003c38:	ea12 0e01 	ands.w	lr, r2, r1
 8003c3c:	d0f6      	beq.n	8003c2c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003c3e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003c42:	f10c 0502 	add.w	r5, ip, #2
 8003c46:	4c1c      	ldr	r4, [pc, #112]	; (8003cb8 <HAL_GPIO_DeInit+0xec>)
 8003c48:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003c4c:	f003 0403 	and.w	r4, r3, #3
 8003c50:	00a4      	lsls	r4, r4, #2
 8003c52:	2507      	movs	r5, #7
 8003c54:	40a5      	lsls	r5, r4
 8003c56:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003c58:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003c5c:	d0be      	beq.n	8003bdc <HAL_GPIO_DeInit+0x10>
 8003c5e:	4f17      	ldr	r7, [pc, #92]	; (8003cbc <HAL_GPIO_DeInit+0xf0>)
 8003c60:	42b8      	cmp	r0, r7
 8003c62:	d005      	beq.n	8003c70 <HAL_GPIO_DeInit+0xa4>
 8003c64:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003c68:	42b8      	cmp	r0, r7
 8003c6a:	d0b5      	beq.n	8003bd8 <HAL_GPIO_DeInit+0xc>
 8003c6c:	2707      	movs	r7, #7
 8003c6e:	e7b6      	b.n	8003bde <HAL_GPIO_DeInit+0x12>
 8003c70:	2701      	movs	r7, #1
 8003c72:	e7b4      	b.n	8003bde <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003c74:	4c12      	ldr	r4, [pc, #72]	; (8003cc0 <HAL_GPIO_DeInit+0xf4>)
 8003c76:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8003c7a:	ea26 060e 	bic.w	r6, r6, lr
 8003c7e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003c82:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8003c86:	ea26 060e 	bic.w	r6, r6, lr
 8003c8a:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003c8e:	6826      	ldr	r6, [r4, #0]
 8003c90:	ea26 060e 	bic.w	r6, r6, lr
 8003c94:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003c96:	6866      	ldr	r6, [r4, #4]
 8003c98:	ea26 060e 	bic.w	r6, r6, lr
 8003c9c:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c9e:	4e06      	ldr	r6, [pc, #24]	; (8003cb8 <HAL_GPIO_DeInit+0xec>)
 8003ca0:	f10c 0c02 	add.w	ip, ip, #2
 8003ca4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8003ca8:	ea24 0505 	bic.w	r5, r4, r5
 8003cac:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 8003cb0:	e799      	b.n	8003be6 <HAL_GPIO_DeInit+0x1a>
  }
}
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	48000400 	.word	0x48000400
 8003cc0:	58000800 	.word	0x58000800

08003cc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc4:	b10a      	cbz	r2, 8003cca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cc6:	6181      	str	r1, [r0, #24]
 8003cc8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cca:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003ccc:	4770      	bx	lr

08003cce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cd0:	ea01 0203 	and.w	r2, r1, r3
 8003cd4:	ea21 0103 	bic.w	r1, r1, r3
 8003cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003cdc:	6181      	str	r1, [r0, #24]
}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ce0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4203      	tst	r3, r0
 8003ce8:	d100      	bne.n	8003cec <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003cea:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003cee:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf0:	f7fd fda8 	bl	8001844 <HAL_GPIO_EXTI_Callback>
}
 8003cf4:	e7f9      	b.n	8003cea <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003cf6:	bf00      	nop
 8003cf8:	58000800 	.word	0x58000800

08003cfc <HAL_IPCC_RxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_IPCC_TX_IRQHandler>:
{
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	4607      	mov	r7, r0
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_IPCC_TX_IRQHandler+0x50>)
 8003d06:	685d      	ldr	r5, [r3, #4]
 8003d08:	43ed      	mvns	r5, r5
 8003d0a:	f405 157c 	and.w	r5, r5, #4128768	; 0x3f0000
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	ea25 4503 	bic.w	r5, r5, r3, lsl #16
  uint32_t ch_count = 0U;
 8003d14:	2600      	movs	r6, #0
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003d16:	e002      	b.n	8003d1e <HAL_IPCC_TX_IRQHandler+0x1e>
      irqmask =  irqmask & ~(bit_pos);
 8003d18:	ea25 0504 	bic.w	r5, r5, r4
    ch_count++;
 8003d1c:	3601      	adds	r6, #1
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003d1e:	b1b5      	cbz	r5, 8003d4e <HAL_IPCC_TX_IRQHandler+0x4e>
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8003d20:	f006 040f 	and.w	r4, r6, #15
 8003d24:	f104 0310 	add.w	r3, r4, #16
 8003d28:	2401      	movs	r4, #1
 8003d2a:	409c      	lsls	r4, r3
    if ((irqmask & bit_pos) != 0U)
 8003d2c:	4225      	tst	r5, r4
 8003d2e:	d0f5      	beq.n	8003d1c <HAL_IPCC_TX_IRQHandler+0x1c>
      currentInstance->MR |= bit_pos;
 8003d30:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <HAL_IPCC_TX_IRQHandler+0x50>)
 8003d32:	6853      	ldr	r3, [r2, #4]
 8003d34:	4323      	orrs	r3, r4
 8003d36:	6053      	str	r3, [r2, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8003d38:	1db3      	adds	r3, r6, #6
 8003d3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0e9      	beq.n	8003d18 <HAL_IPCC_TX_IRQHandler+0x18>
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8003d44:	2200      	movs	r2, #0
 8003d46:	4631      	mov	r1, r6
 8003d48:	4638      	mov	r0, r7
 8003d4a:	4798      	blx	r3
 8003d4c:	e7e4      	b.n	8003d18 <HAL_IPCC_TX_IRQHandler+0x18>
}
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d50:	58000c00 	.word	0x58000c00

08003d54 <HAL_IPCC_RX_IRQHandler>:
{
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	4607      	mov	r7, r0
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_IPCC_RX_IRQHandler+0x4c>)
 8003d5a:	685e      	ldr	r6, [r3, #4]
 8003d5c:	43f6      	mvns	r6, r6
 8003d5e:	f006 033f 	and.w	r3, r6, #63	; 0x3f
  irqmask = irqmask & otherInstance->SR;
 8003d62:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <HAL_IPCC_RX_IRQHandler+0x50>)
 8003d64:	68d6      	ldr	r6, [r2, #12]
 8003d66:	401e      	ands	r6, r3
  uint32_t ch_count = 0U;
 8003d68:	2500      	movs	r5, #0
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003d6a:	e002      	b.n	8003d72 <HAL_IPCC_RX_IRQHandler+0x1e>
      irqmask = irqmask & ~(bit_pos);
 8003d6c:	ea26 0604 	bic.w	r6, r6, r4
    ch_count++;
 8003d70:	3501      	adds	r5, #1
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003d72:	b19e      	cbz	r6, 8003d9c <HAL_IPCC_RX_IRQHandler+0x48>
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8003d74:	f005 030f 	and.w	r3, r5, #15
 8003d78:	2401      	movs	r4, #1
 8003d7a:	409c      	lsls	r4, r3
    if ((irqmask & bit_pos) != 0U)
 8003d7c:	4226      	tst	r6, r4
 8003d7e:	d0f7      	beq.n	8003d70 <HAL_IPCC_RX_IRQHandler+0x1c>
      currentInstance->MR |= bit_pos;
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_IPCC_RX_IRQHandler+0x4c>)
 8003d82:	6853      	ldr	r3, [r2, #4]
 8003d84:	4323      	orrs	r3, r4
 8003d86:	6053      	str	r3, [r2, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8003d88:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ec      	beq.n	8003d6c <HAL_IPCC_RX_IRQHandler+0x18>
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8003d92:	2201      	movs	r2, #1
 8003d94:	4629      	mov	r1, r5
 8003d96:	4638      	mov	r0, r7
 8003d98:	4798      	blx	r3
 8003d9a:	e7e7      	b.n	8003d6c <HAL_IPCC_RX_IRQHandler+0x18>
}
 8003d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	58000c00 	.word	0x58000c00
 8003da4:	58000c10 	.word	0x58000c10

08003da8 <IPCC_UnmaskInterrupt>:
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
 8003da8:	b959      	cbnz	r1, 8003dc2 <IPCC_UnmaskInterrupt+0x1a>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8003daa:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <IPCC_UnmaskInterrupt+0x30>)
 8003dac:	684b      	ldr	r3, [r1, #4]
 8003dae:	f000 000f 	and.w	r0, r0, #15
 8003db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003db6:	fa02 f000 	lsl.w	r0, r2, r0
 8003dba:	ea23 0000 	bic.w	r0, r3, r0
 8003dbe:	6048      	str	r0, [r1, #4]
 8003dc0:	4770      	bx	lr
  }
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8003dc2:	4905      	ldr	r1, [pc, #20]	; (8003dd8 <IPCC_UnmaskInterrupt+0x30>)
 8003dc4:	684b      	ldr	r3, [r1, #4]
 8003dc6:	f000 000f 	and.w	r0, r0, #15
 8003dca:	2201      	movs	r2, #1
 8003dcc:	fa02 f000 	lsl.w	r0, r2, r0
 8003dd0:	ea23 0000 	bic.w	r0, r3, r0
 8003dd4:	6048      	str	r0, [r1, #4]
  }
}
 8003dd6:	4770      	bx	lr
 8003dd8:	58000c00 	.word	0x58000c00

08003ddc <HAL_IPCC_ActivateNotification>:
  if (hipcc != NULL)
 8003ddc:	b360      	cbz	r0, 8003e38 <HAL_IPCC_ActivateNotification+0x5c>
{
 8003dde:	b570      	push	{r4, r5, r6, lr}
 8003de0:	460e      	mov	r6, r1
    if (hipcc->State == HAL_IPCC_STATE_READY)
 8003de2:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8003de6:	b2e4      	uxtb	r4, r4
 8003de8:	2c01      	cmp	r4, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_IPCC_ActivateNotification+0x14>
      err = HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
}
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
 8003df0:	b982      	cbnz	r2, 8003e14 <HAL_IPCC_ActivateNotification+0x38>
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
 8003df2:	3106      	adds	r1, #6
 8003df4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003df8:	604b      	str	r3, [r1, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8003dfa:	f006 010f 	and.w	r1, r6, #15
 8003dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e02:	fa03 f101 	lsl.w	r1, r3, r1
 8003e06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6343      	str	r3, [r0, #52]	; 0x34
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
 8003e0c:	2a01      	cmp	r2, #1
 8003e0e:	d00d      	beq.n	8003e2c <HAL_IPCC_ActivateNotification+0x50>
  HAL_StatusTypeDef err = HAL_OK;
 8003e10:	2000      	movs	r0, #0
 8003e12:	e7ec      	b.n	8003dee <HAL_IPCC_ActivateNotification+0x12>
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
 8003e14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003e18:	604b      	str	r3, [r1, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8003e1a:	f006 010f 	and.w	r1, r6, #15
 8003e1e:	2301      	movs	r3, #1
 8003e20:	fa03 f101 	lsl.w	r1, r3, r1
 8003e24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6343      	str	r3, [r0, #52]	; 0x34
 8003e2a:	e7ef      	b.n	8003e0c <HAL_IPCC_ActivateNotification+0x30>
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f7ff ffba 	bl	8003da8 <IPCC_UnmaskInterrupt>
  HAL_StatusTypeDef err = HAL_OK;
 8003e34:	2000      	movs	r0, #0
 8003e36:	e7da      	b.n	8003dee <HAL_IPCC_ActivateNotification+0x12>
    err = HAL_ERROR;
 8003e38:	2001      	movs	r0, #1
}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_IPCC_NotifyCPU>:
{
 8003e3c:	b538      	push	{r3, r4, r5, lr}
  if (hipcc->State == HAL_IPCC_STATE_READY)
 8003e3e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <HAL_IPCC_NotifyCPU+0x10>
    err = HAL_ERROR;
 8003e48:	2001      	movs	r0, #1
}
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	460c      	mov	r4, r1
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_IPCC_NotifyCPU+0x44>)
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	b962      	cbnz	r2, 8003e6e <HAL_IPCC_NotifyCPU+0x32>
 8003e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e58:	f004 050f 	and.w	r5, r4, #15
 8003e5c:	40ab      	lsls	r3, r5
 8003e5e:	4319      	orrs	r1, r3
 8003e60:	4d07      	ldr	r5, [pc, #28]	; (8003e80 <HAL_IPCC_NotifyCPU+0x44>)
 8003e62:	60a9      	str	r1, [r5, #8]
    if ((hipcc->callbackRequest & mask) == mask)
 8003e64:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003e66:	438b      	bics	r3, r1
 8003e68:	d003      	beq.n	8003e72 <HAL_IPCC_NotifyCPU+0x36>
  HAL_StatusTypeDef err = HAL_OK;
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	e7ed      	b.n	8003e4a <HAL_IPCC_NotifyCPU+0xe>
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e7f2      	b.n	8003e58 <HAL_IPCC_NotifyCPU+0x1c>
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
 8003e72:	4611      	mov	r1, r2
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff ff97 	bl	8003da8 <IPCC_UnmaskInterrupt>
  HAL_StatusTypeDef err = HAL_OK;
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e7e5      	b.n	8003e4a <HAL_IPCC_NotifyCPU+0xe>
 8003e7e:	bf00      	nop
 8003e80:	58000c00 	.word	0x58000c00

08003e84 <IPCC_SetDefaultCallbacks>:
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d80a      	bhi.n	8003ea0 <IPCC_SetDefaultCallbacks+0x1c>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003e8a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8003e8e:	4905      	ldr	r1, [pc, #20]	; (8003ea4 <IPCC_SetDefaultCallbacks+0x20>)
 8003e90:	6051      	str	r1, [r2, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003e92:	1d9a      	adds	r2, r3, #6
 8003e94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e98:	4903      	ldr	r1, [pc, #12]	; (8003ea8 <IPCC_SetDefaultCallbacks+0x24>)
 8003e9a:	6051      	str	r1, [r2, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	e7f2      	b.n	8003e86 <IPCC_SetDefaultCallbacks+0x2>
  }
}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	08003cfd 	.word	0x08003cfd
 8003ea8:	08003cff 	.word	0x08003cff

08003eac <IPCC_Reset_Register>:
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	6003      	str	r3, [r0, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003eb0:	f04f 133f 	mov.w	r3, #4128831	; 0x3f003f
 8003eb4:	6043      	str	r3, [r0, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003eb6:	233f      	movs	r3, #63	; 0x3f
 8003eb8:	6083      	str	r3, [r0, #8]
}
 8003eba:	4770      	bx	lr

08003ebc <HAL_IPCC_Init>:
  if (hipcc != NULL)
 8003ebc:	b1c0      	cbz	r0, 8003ef0 <HAL_IPCC_Init+0x34>
{
 8003ebe:	b538      	push	{r3, r4, r5, lr}
 8003ec0:	4604      	mov	r4, r0
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003ec2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003ec6:	b183      	cbz	r3, 8003eea <HAL_IPCC_Init+0x2e>
    IPCC_Reset_Register(currentInstance);
 8003ec8:	4d0a      	ldr	r5, [pc, #40]	; (8003ef4 <HAL_IPCC_Init+0x38>)
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f7ff ffee 	bl	8003eac <IPCC_Reset_Register>
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ed6:	602b      	str	r3, [r5, #0]
    IPCC_SetDefaultCallbacks(hipcc);
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f7ff ffd3 	bl	8003e84 <IPCC_SetDefaultCallbacks>
    hipcc->callbackRequest = 0;
 8003ede:	2000      	movs	r0, #0
 8003ee0:	6360      	str	r0, [r4, #52]	; 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
      HAL_IPCC_MspInit(hipcc);
 8003eea:	f7fc fd97 	bl	8000a1c <HAL_IPCC_MspInit>
 8003eee:	e7eb      	b.n	8003ec8 <HAL_IPCC_Init+0xc>
    err = HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
}
 8003ef2:	4770      	bx	lr
 8003ef4:	58000c00 	.word	0x58000c00

08003ef8 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef8:	4a02      	ldr	r2, [pc, #8]	; (8003f04 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003efa:	6813      	ldr	r3, [r2, #0]
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6013      	str	r3, [r2, #0]
}
 8003f02:	4770      	bx	lr
 8003f04:	58000400 	.word	0x58000400

08003f08 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003f0c:	b9a0      	cbnz	r0, 8003f38 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_PWR_EnterSLEEPMode+0x44>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f16:	d10a      	bne.n	8003f2e <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003f1a:	6913      	ldr	r3, [r2, #16]
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003f22:	2c01      	cmp	r4, #1
 8003f24:	d010      	beq.n	8003f48 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003f26:	bf40      	sev
    __WFE();
 8003f28:	bf20      	wfe
    __WFE();
 8003f2a:	bf20      	wfe
  }
}
 8003f2c:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003f2e:	f000 f829 	bl	8003f84 <HAL_PWREx_DisableLowPowerRunMode>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_PWR_EnterSLEEPMode+0x10>
 8003f36:	e7f9      	b.n	8003f2c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_PWR_EnterSLEEPMode+0x44>)
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f40:	d1ea      	bne.n	8003f18 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003f42:	f000 f817 	bl	8003f74 <HAL_PWREx_EnableLowPowerRunMode>
 8003f46:	e7e7      	b.n	8003f18 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003f48:	bf30      	wfi
 8003f4a:	e7ef      	b.n	8003f2c <HAL_PWR_EnterSLEEPMode+0x24>
 8003f4c:	58000400 	.word	0x58000400
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f54:	4b02      	ldr	r3, [pc, #8]	; (8003f60 <HAL_PWREx_GetVoltageRange+0xc>)
 8003f56:	6818      	ldr	r0, [r3, #0]
}
 8003f58:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	58000400 	.word	0x58000400

08003f64 <HAL_PWREx_ReleaseCore>:
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003f64:	4a02      	ldr	r2, [pc, #8]	; (8003f70 <HAL_PWREx_ReleaseCore+0xc>)
 8003f66:	68d3      	ldr	r3, [r2, #12]
 8003f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6c:	60d3      	str	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
}
 8003f6e:	4770      	bx	lr
 8003f70:	58000400 	.word	0x58000400

08003f74 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003f74:	4a02      	ldr	r2, [pc, #8]	; (8003f80 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7c:	6013      	str	r3, [r2, #0]
}
 8003f7e:	4770      	bx	lr
 8003f80:	58000400 	.word	0x58000400

08003f84 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003f84:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	2332      	movs	r3, #50	; 0x32
 8003f94:	fb03 f302 	mul.w	r3, r3, r2
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003fa2:	6952      	ldr	r2, [r2, #20]
 8003fa4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003fa8:	d002      	beq.n	8003fb0 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8003faa:	b10b      	cbz	r3, 8003fb0 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 8003fac:	3b01      	subs	r3, #1
 8003fae:	e7f7      	b.n	8003fa0 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fb8:	d101      	bne.n	8003fbe <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003fba:	2000      	movs	r0, #0
 8003fbc:	4770      	bx	lr
    return HAL_TIMEOUT;
 8003fbe:	2003      	movs	r0, #3
}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	58000400 	.word	0x58000400
 8003fc8:	20000050 	.word	0x20000050
 8003fcc:	431bde83 	.word	0x431bde83

08003fd0 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003fd0:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	f023 0307 	bic.w	r3, r3, #7
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003fe0:	6913      	ldr	r3, [r2, #16]
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003fe8:	2801      	cmp	r0, #1
 8003fea:	d008      	beq.n	8003ffe <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fec:	bf40      	sev
    __WFE();
 8003fee:	bf20      	wfe
    __WFE();
 8003ff0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ff2:	4a05      	ldr	r2, [pc, #20]	; (8004008 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003ff4:	6913      	ldr	r3, [r2, #16]
 8003ff6:	f023 0304 	bic.w	r3, r3, #4
 8003ffa:	6113      	str	r3, [r2, #16]
}
 8003ffc:	4770      	bx	lr
    __WFI();
 8003ffe:	bf30      	wfi
 8004000:	e7f7      	b.n	8003ff2 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8004002:	bf00      	nop
 8004004:	58000400 	.word	0x58000400
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	4604      	mov	r4, r0
 8004012:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004014:	4b29      	ldr	r3, [pc, #164]	; (80040bc <RCC_SetFlashLatency+0xb0>)
 8004016:	e893 0003 	ldmia.w	r3, {r0, r1}
 800401a:	9006      	str	r0, [sp, #24]
 800401c:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004020:	68d9      	ldr	r1, [r3, #12]
 8004022:	6898      	ldr	r0, [r3, #8]
 8004024:	9004      	str	r0, [sp, #16]
 8004026:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800402a:	ad01      	add	r5, sp, #4
 800402c:	3310      	adds	r3, #16
 800402e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004032:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004036:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800403a:	d01b      	beq.n	8004074 <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800403c:	2300      	movs	r3, #0
 800403e:	2b02      	cmp	r3, #2
 8004040:	d822      	bhi.n	8004088 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004042:	aa08      	add	r2, sp, #32
 8004044:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004048:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800404c:	42a2      	cmp	r2, r4
 800404e:	d215      	bcs.n	800407c <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004050:	3301      	adds	r3, #1
 8004052:	e7f4      	b.n	800403e <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004054:	3301      	adds	r3, #1
 8004056:	2b02      	cmp	r3, #2
 8004058:	d80e      	bhi.n	8004078 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800405a:	aa08      	add	r2, sp, #32
 800405c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004060:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004064:	42a2      	cmp	r2, r4
 8004066:	d3f5      	bcc.n	8004054 <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 8004068:	aa08      	add	r2, sp, #32
 800406a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800406e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004072:	e00a      	b.n	800408a <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004074:	2300      	movs	r3, #0
 8004076:	e7ee      	b.n	8004056 <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004078:	2500      	movs	r5, #0
 800407a:	e006      	b.n	800408a <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800407c:	aa08      	add	r2, sp, #32
 800407e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004082:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004086:	e000      	b.n	800408a <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004088:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800408a:	4a0d      	ldr	r2, [pc, #52]	; (80040c0 <RCC_SetFlashLatency+0xb4>)
 800408c:	6813      	ldr	r3, [r2, #0]
 800408e:	f023 0307 	bic.w	r3, r3, #7
 8004092:	432b      	orrs	r3, r5
 8004094:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004096:	f7fc ff0d 	bl	8000eb4 <HAL_GetTick>
 800409a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <RCC_SetFlashLatency+0xb4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	d006      	beq.n	80040b6 <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80040a8:	f7fc ff04 	bl	8000eb4 <HAL_GetTick>
 80040ac:	1b00      	subs	r0, r0, r4
 80040ae:	2802      	cmp	r0, #2
 80040b0:	d9f4      	bls.n	800409c <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 80040b2:	2003      	movs	r0, #3
 80040b4:	e000      	b.n	80040b8 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 80040b6:	2000      	movs	r0, #0
}
 80040b8:	b008      	add	sp, #32
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	08007108 	.word	0x08007108
 80040c0:	58004000 	.word	0x58004000

080040c4 <RCC_SetFlashLatencyFromMSIRange>:
{
 80040c4:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80040c6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80040ca:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80040cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80040de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040e2:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040e6:	f7ff ff35 	bl	8003f54 <HAL_PWREx_GetVoltageRange>
 80040ea:	4601      	mov	r1, r0
 80040ec:	4805      	ldr	r0, [pc, #20]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80040ee:	fba0 3004 	umull	r3, r0, r0, r4
 80040f2:	0c80      	lsrs	r0, r0, #18
 80040f4:	f7ff ff8a 	bl	800400c <RCC_SetFlashLatency>
}
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	bf00      	nop
 80040fc:	080077c0 	.word	0x080077c0
 8004100:	08007760 	.word	0x08007760
 8004104:	431bde83 	.word	0x431bde83

08004108 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410c:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004114:	f012 020c 	ands.w	r2, r2, #12
 8004118:	d00a      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x28>
 800411a:	2a0c      	cmp	r2, #12
 800411c:	d006      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800411e:	2a04      	cmp	r2, #4
 8004120:	d047      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004122:	2a08      	cmp	r2, #8
 8004124:	d03b      	beq.n	800419e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004126:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8004128:	4608      	mov	r0, r1
 800412a:	e026      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800412c:	2b01      	cmp	r3, #1
 800412e:	d1f6      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f013 0308 	ands.w	r3, r3, #8
 800413a:	d00d      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x50>
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f013 0308 	ands.w	r3, r3, #8
 8004146:	d124      	bne.n	8004192 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800414c:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004150:	492e      	ldr	r1, [pc, #184]	; (800420c <HAL_RCC_GetSysClockFreq+0x104>)
 8004152:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004156:	e00e      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415c:	6809      	ldr	r1, [r1, #0]
 800415e:	f011 0f08 	tst.w	r1, #8
 8004162:	d112      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004170:	4926      	ldr	r1, [pc, #152]	; (800420c <HAL_RCC_GetSysClockFreq+0x104>)
 8004172:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004176:	b1d2      	cbz	r2, 80041ae <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004178:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d01a      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004188:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800418a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800418e:	6809      	ldr	r1, [r1, #0]
 8004190:	e7ee      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x68>
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004196:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004198:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800419c:	e7d8      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 80041a8:	d106      	bne.n	80041b8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80041aa:	4819      	ldr	r0, [pc, #100]	; (8004210 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ac:	e7e5      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80041ae:	4608      	mov	r0, r1
 80041b0:	e7e3      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80041b2:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 80041b4:	4817      	ldr	r0, [pc, #92]	; (8004214 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041b6:	e7e0      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80041b8:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 80041ba:	4816      	ldr	r0, [pc, #88]	; (8004214 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041bc:	e7dd      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d009      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0xd8>
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d108      	bne.n	80041e2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80041da:	d115      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80041dc:	490c      	ldr	r1, [pc, #48]	; (8004210 <HAL_RCC_GetSysClockFreq+0x108>)
 80041de:	e000      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80041e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e6:	68d0      	ldr	r0, [r2, #12]
 80041e8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80041ec:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80041f0:	68d3      	ldr	r3, [r2, #12]
 80041f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80041fc:	68d3      	ldr	r3, [r2, #12]
 80041fe:	0f5b      	lsrs	r3, r3, #29
 8004200:	3301      	adds	r3, #1
 8004202:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004206:	e7bf      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004208:	4902      	ldr	r1, [pc, #8]	; (8004214 <HAL_RCC_GetSysClockFreq+0x10c>)
 800420a:	e7ea      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0xda>
 800420c:	080077c0 	.word	0x080077c0
 8004210:	01e84800 	.word	0x01e84800
 8004214:	00f42400 	.word	0x00f42400

08004218 <HAL_RCC_GetHCLKFreq>:
{
 8004218:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800421a:	f7ff ff75 	bl	8004108 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004228:	4a02      	ldr	r2, [pc, #8]	; (8004234 <HAL_RCC_GetHCLKFreq+0x1c>)
 800422a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800422e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004232:	bd08      	pop	{r3, pc}
 8004234:	08007760 	.word	0x08007760

08004238 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004238:	2800      	cmp	r0, #0
 800423a:	f000 8318 	beq.w	800486e <HAL_RCC_OscConfig+0x636>
{
 800423e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004240:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	689d      	ldr	r5, [r3, #8]
 8004248:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800424c:	68de      	ldr	r6, [r3, #12]
 800424e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004252:	6803      	ldr	r3, [r0, #0]
 8004254:	f013 0f20 	tst.w	r3, #32
 8004258:	f000 808f 	beq.w	800437a <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800425c:	b1ed      	cbz	r5, 800429a <HAL_RCC_OscConfig+0x62>
 800425e:	2d0c      	cmp	r5, #12
 8004260:	d019      	beq.n	8004296 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004262:	6a23      	ldr	r3, [r4, #32]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80bc 	beq.w	80043e2 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800426a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426e:	6813      	ldr	r3, [r2, #0]
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004276:	f7fc fe1d 	bl	8000eb4 <HAL_GetTick>
 800427a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f013 0f02 	tst.w	r3, #2
 8004286:	d165      	bne.n	8004354 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004288:	f7fc fe14 	bl	8000eb4 <HAL_GetTick>
 800428c:	1bc0      	subs	r0, r0, r7
 800428e:	2802      	cmp	r0, #2
 8004290:	d9f4      	bls.n	800427c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004292:	2003      	movs	r0, #3
 8004294:	e2f8      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004296:	2e01      	cmp	r6, #1
 8004298:	d1e3      	bne.n	8004262 <HAL_RCC_OscConfig+0x2a>
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f013 0f02 	tst.w	r3, #2
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a6:	6a23      	ldr	r3, [r4, #32]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 82e2 	beq.w	8004872 <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f013 0f08 	tst.w	r3, #8
 80042ba:	d029      	beq.n	8004310 <HAL_RCC_OscConfig+0xd8>
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c6:	4298      	cmp	r0, r3
 80042c8:	d92a      	bls.n	8004320 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ca:	f7ff fefb 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f040 82d1 	bne.w	8004876 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	f042 0208 	orr.w	r2, r2, #8
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80042e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80042f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80042f8:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042fa:	f7ff ff8d 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 80042fe:	4bbc      	ldr	r3, [pc, #752]	; (80045f0 <HAL_RCC_OscConfig+0x3b8>)
 8004300:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004302:	4bbc      	ldr	r3, [pc, #752]	; (80045f4 <HAL_RCC_OscConfig+0x3bc>)
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	f7fc fdd3 	bl	8000eb0 <HAL_InitTick>
        if (status != HAL_OK)
 800430a:	2800      	cmp	r0, #0
 800430c:	d035      	beq.n	800437a <HAL_RCC_OscConfig+0x142>
 800430e:	e2bb      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431e:	e7d2      	b.n	80042c6 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004332:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004338:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004344:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004346:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004348:	f7ff febc 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 800434c:	2800      	cmp	r0, #0
 800434e:	d0d4      	beq.n	80042fa <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8004350:	2001      	movs	r0, #1
 8004352:	e299      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	f042 0208 	orr.w	r2, r2, #8
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004366:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004374:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004378:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f013 0f01 	tst.w	r3, #1
 8004380:	d051      	beq.n	8004426 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004382:	2d08      	cmp	r5, #8
 8004384:	d045      	beq.n	8004412 <HAL_RCC_OscConfig+0x1da>
 8004386:	2d0c      	cmp	r5, #12
 8004388:	d041      	beq.n	800440e <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800438a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	430b      	orrs	r3, r1
 8004398:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439a:	6863      	ldr	r3, [r4, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a0:	d063      	beq.n	800446a <HAL_RCC_OscConfig+0x232>
 80043a2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80043a6:	d065      	beq.n	8004474 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80043ba:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d063      	beq.n	800448a <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 80043c2:	f7fc fd77 	bl	8000eb4 <HAL_GetTick>
 80043c6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043d2:	d128      	bne.n	8004426 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fc fd6e 	bl	8000eb4 <HAL_GetTick>
 80043d8:	1bc0      	subs	r0, r0, r7
 80043da:	2864      	cmp	r0, #100	; 0x64
 80043dc:	d9f4      	bls.n	80043c8 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80043de:	2003      	movs	r0, #3
 80043e0:	e252      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043ee:	f7fc fd61 	bl	8000eb4 <HAL_GetTick>
 80043f2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f013 0f02 	tst.w	r3, #2
 80043fe:	d0bc      	beq.n	800437a <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004400:	f7fc fd58 	bl	8000eb4 <HAL_GetTick>
 8004404:	1bc0      	subs	r0, r0, r7
 8004406:	2802      	cmp	r0, #2
 8004408:	d9f4      	bls.n	80043f4 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 800440a:	2003      	movs	r0, #3
 800440c:	e23c      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800440e:	2e03      	cmp	r6, #3
 8004410:	d1bb      	bne.n	800438a <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800441c:	d003      	beq.n	8004426 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441e:	6863      	ldr	r3, [r4, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 822a 	beq.w	800487a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f013 0f02 	tst.w	r3, #2
 800442c:	d052      	beq.n	80044d4 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800442e:	2d04      	cmp	r5, #4
 8004430:	d03d      	beq.n	80044ae <HAL_RCC_OscConfig+0x276>
 8004432:	2d0c      	cmp	r5, #12
 8004434:	d039      	beq.n	80044aa <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8091 	beq.w	8004560 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800443e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800444a:	f7fc fd33 	bl	8000eb4 <HAL_GetTick>
 800444e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800445a:	d177      	bne.n	800454c <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fc fd2a 	bl	8000eb4 <HAL_GetTick>
 8004460:	1b80      	subs	r0, r0, r6
 8004462:	2802      	cmp	r0, #2
 8004464:	d9f4      	bls.n	8004450 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004466:	2003      	movs	r0, #3
 8004468:	e20e      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
}
 8004472:	e7a3      	b.n	80043bc <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800447e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004486:	601a      	str	r2, [r3, #0]
}
 8004488:	e798      	b.n	80043bc <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800448a:	f7fc fd13 	bl	8000eb4 <HAL_GetTick>
 800448e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800449a:	d0c4      	beq.n	8004426 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fc fd0a 	bl	8000eb4 <HAL_GetTick>
 80044a0:	1bc0      	subs	r0, r0, r7
 80044a2:	2864      	cmp	r0, #100	; 0x64
 80044a4:	d9f4      	bls.n	8004490 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 80044a6:	2003      	movs	r0, #3
 80044a8:	e1ee      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044aa:	2e02      	cmp	r6, #2
 80044ac:	d1c3      	bne.n	8004436 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 81de 	beq.w	800487e <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80044c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c8:	6853      	ldr	r3, [r2, #4]
 80044ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80044d2:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f013 0f08 	tst.w	r3, #8
 80044da:	f000 808d 	beq.w	80045f8 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044de:	69a3      	ldr	r3, [r4, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d06c      	beq.n	80045be <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80044ec:	69e1      	ldr	r1, [r4, #28]
 80044ee:	f003 0210 	and.w	r2, r3, #16
 80044f2:	4291      	cmp	r1, r2
 80044f4:	d011      	beq.n	800451a <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80044f6:	f003 0203 	and.w	r2, r3, #3
 80044fa:	2a02      	cmp	r2, #2
 80044fc:	f000 81c1 	beq.w	8004882 <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004500:	f013 0f01 	tst.w	r3, #1
 8004504:	d142      	bne.n	800458c <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	69e1      	ldr	r1, [r4, #28]
 8004514:	430b      	orrs	r3, r1
 8004516:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800451a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800451e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800452a:	f7fc fcc3 	bl	8000eb4 <HAL_GetTick>
 800452e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004538:	f013 0f02 	tst.w	r3, #2
 800453c:	d15c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453e:	f7fc fcb9 	bl	8000eb4 <HAL_GetTick>
 8004542:	1b80      	subs	r0, r0, r6
 8004544:	2811      	cmp	r0, #17
 8004546:	d9f3      	bls.n	8004530 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004548:	2003      	movs	r0, #3
 800454a:	e19d      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800454e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004552:	6853      	ldr	r3, [r2, #4]
 8004554:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004558:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800455c:	6053      	str	r3, [r2, #4]
}
 800455e:	e7b9      	b.n	80044d4 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004564:	6813      	ldr	r3, [r2, #0]
 8004566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800456c:	f7fc fca2 	bl	8000eb4 <HAL_GetTick>
 8004570:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800457c:	d0aa      	beq.n	80044d4 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457e:	f7fc fc99 	bl	8000eb4 <HAL_GetTick>
 8004582:	1b80      	subs	r0, r0, r6
 8004584:	2802      	cmp	r0, #2
 8004586:	d9f4      	bls.n	8004572 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004588:	2003      	movs	r0, #3
 800458a:	e17d      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800458c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004590:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800459c:	f7fc fc8a 	bl	8000eb4 <HAL_GetTick>
 80045a0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045aa:	f013 0f02 	tst.w	r3, #2
 80045ae:	d0aa      	beq.n	8004506 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fc fc80 	bl	8000eb4 <HAL_GetTick>
 80045b4:	1b80      	subs	r0, r0, r6
 80045b6:	2811      	cmp	r0, #17
 80045b8:	d9f3      	bls.n	80045a2 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 80045ba:	2003      	movs	r0, #3
 80045bc:	e164      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80045be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80045ce:	f7fc fc71 	bl	8000eb4 <HAL_GetTick>
 80045d2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80045d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045dc:	f013 0f02 	tst.w	r3, #2
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e2:	f7fc fc67 	bl	8000eb4 <HAL_GetTick>
 80045e6:	1b80      	subs	r0, r0, r6
 80045e8:	2811      	cmp	r0, #17
 80045ea:	d9f3      	bls.n	80045d4 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 80045ec:	2003      	movs	r0, #3
 80045ee:	e14b      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
 80045f0:	20000050 	.word	0x20000050
 80045f4:	20000054 	.word	0x20000054
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	f013 0f04 	tst.w	r3, #4
 80045fe:	f000 80b1 	beq.w	8004764 <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004602:	4ba9      	ldr	r3, [pc, #676]	; (80048a8 <HAL_RCC_OscConfig+0x670>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800460a:	d110      	bne.n	800462e <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 800460c:	f7ff fc74 	bl	8003ef8 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004610:	f7fc fc50 	bl	8000eb4 <HAL_GetTick>
 8004614:	4606      	mov	r6, r0
 8004616:	4ba4      	ldr	r3, [pc, #656]	; (80048a8 <HAL_RCC_OscConfig+0x670>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004620:	f7fc fc48 	bl	8000eb4 <HAL_GetTick>
 8004624:	1b80      	subs	r0, r0, r6
 8004626:	2802      	cmp	r0, #2
 8004628:	d9f5      	bls.n	8004616 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 800462a:	2003      	movs	r0, #3
 800462c:	e12c      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d061      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004634:	2b85      	cmp	r3, #133	; 0x85
 8004636:	d001      	beq.n	800463c <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004638:	2b05      	cmp	r3, #5
 800463a:	d107      	bne.n	800464c <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800463c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004640:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800464c:	f7fc fc32 	bl	8000eb4 <HAL_GetTick>
 8004650:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004656:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f013 0f02 	tst.w	r3, #2
 800466e:	d108      	bne.n	8004682 <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fc fc20 	bl	8000eb4 <HAL_GetTick>
 8004674:	1b80      	subs	r0, r0, r6
 8004676:	f241 3388 	movw	r3, #5000	; 0x1388
 800467a:	4298      	cmp	r0, r3
 800467c:	d9f1      	bls.n	8004662 <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 800467e:	2003      	movs	r0, #3
 8004680:	e102      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004682:	68e3      	ldr	r3, [r4, #12]
 8004684:	2b81      	cmp	r3, #129	; 0x81
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004688:	2b85      	cmp	r3, #133	; 0x85
 800468a:	d11a      	bne.n	80046c2 <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 800468c:	f7fc fc12 	bl	8000eb4 <HAL_GetTick>
 8004690:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004696:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80046ae:	d159      	bne.n	8004764 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fc fc00 	bl	8000eb4 <HAL_GetTick>
 80046b4:	1b80      	subs	r0, r0, r6
 80046b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ba:	4298      	cmp	r0, r3
 80046bc:	d9f1      	bls.n	80046a2 <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 80046be:	2003      	movs	r0, #3
 80046c0:	e0e2      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 80046c2:	f7fc fbf7 	bl	8000eb4 <HAL_GetTick>
 80046c6:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80046e4:	d03e      	beq.n	8004764 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fc fbe5 	bl	8000eb4 <HAL_GetTick>
 80046ea:	1b80      	subs	r0, r0, r6
 80046ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80046f0:	4298      	cmp	r0, r3
 80046f2:	d9f1      	bls.n	80046d8 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 80046f4:	2003      	movs	r0, #3
 80046f6:	e0c7      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 80046f8:	f7fc fbdc 	bl	8000eb4 <HAL_GetTick>
 80046fc:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004702:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800471a:	d008      	beq.n	800472e <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fc fbca 	bl	8000eb4 <HAL_GetTick>
 8004720:	1b80      	subs	r0, r0, r6
 8004722:	f241 3388 	movw	r3, #5000	; 0x1388
 8004726:	4298      	cmp	r0, r3
 8004728:	d9f1      	bls.n	800470e <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 800472a:	2003      	movs	r0, #3
 800472c:	e0ac      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 800472e:	f7fc fbc1 	bl	8000eb4 <HAL_GetTick>
 8004732:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004738:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f013 0f02 	tst.w	r3, #2
 8004750:	d008      	beq.n	8004764 <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004752:	f7fc fbaf 	bl	8000eb4 <HAL_GetTick>
 8004756:	1b80      	subs	r0, r0, r6
 8004758:	f241 3388 	movw	r3, #5000	; 0x1388
 800475c:	4298      	cmp	r0, r3
 800475e:	d9f1      	bls.n	8004744 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8004760:	2003      	movs	r0, #3
 8004762:	e091      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 808d 	beq.w	8004886 <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476c:	2d0c      	cmp	r5, #12
 800476e:	d062      	beq.n	8004836 <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004770:	2b02      	cmp	r3, #2
 8004772:	d01f      	beq.n	80047b4 <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800477e:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	f022 0203 	bic.w	r2, r2, #3
 8004786:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800478e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004792:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004794:	f7fc fb8e 	bl	8000eb4 <HAL_GetTick>
 8004798:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047a4:	d073      	beq.n	800488e <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a6:	f7fc fb85 	bl	8000eb4 <HAL_GetTick>
 80047aa:	1b00      	subs	r0, r0, r4
 80047ac:	280a      	cmp	r0, #10
 80047ae:	d9f4      	bls.n	800479a <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 80047b0:	2003      	movs	r0, #3
 80047b2:	e069      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80047b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047be:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047c0:	f7fc fb78 	bl	8000eb4 <HAL_GetTick>
 80047c4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80047c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047d0:	d12a      	bne.n	8004828 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d6:	68d3      	ldr	r3, [r2, #12]
 80047d8:	4934      	ldr	r1, [pc, #208]	; (80048ac <HAL_RCC_OscConfig+0x674>)
 80047da:	4019      	ands	r1, r3
 80047dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047de:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80047e0:	4303      	orrs	r3, r0
 80047e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80047e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80047ea:	4303      	orrs	r3, r0
 80047ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047ee:	4303      	orrs	r3, r0
 80047f0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80047f2:	4303      	orrs	r3, r0
 80047f4:	430b      	orrs	r3, r1
 80047f6:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80047f8:	6813      	ldr	r3, [r2, #0]
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004800:	68d3      	ldr	r3, [r2, #12]
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004806:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004808:	f7fc fb54 	bl	8000eb4 <HAL_GetTick>
 800480c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004818:	d137      	bne.n	800488a <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481a:	f7fc fb4b 	bl	8000eb4 <HAL_GetTick>
 800481e:	1b00      	subs	r0, r0, r4
 8004820:	280a      	cmp	r0, #10
 8004822:	d9f4      	bls.n	800480e <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 8004824:	2003      	movs	r0, #3
 8004826:	e02f      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fc fb44 	bl	8000eb4 <HAL_GetTick>
 800482c:	1b40      	subs	r0, r0, r5
 800482e:	280a      	cmp	r0, #10
 8004830:	d9c9      	bls.n	80047c6 <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 8004832:	2003      	movs	r0, #3
 8004834:	e028      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004836:	2b01      	cmp	r3, #1
 8004838:	d02b      	beq.n	8004892 <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004840:	f003 0103 	and.w	r1, r3, #3
 8004844:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004846:	4291      	cmp	r1, r2
 8004848:	d125      	bne.n	8004896 <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800484a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800484e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004850:	428a      	cmp	r2, r1
 8004852:	d122      	bne.n	800489a <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004858:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800485a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800485e:	d11e      	bne.n	800489e <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004860:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004864:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004866:	4293      	cmp	r3, r2
 8004868:	d11b      	bne.n	80048a2 <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 800486a:	2000      	movs	r0, #0
 800486c:	e00c      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 800486e:	2001      	movs	r0, #1
}
 8004870:	4770      	bx	lr
        return HAL_ERROR;
 8004872:	2001      	movs	r0, #1
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8004876:	2001      	movs	r0, #1
 8004878:	e006      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 800487a:	2001      	movs	r0, #1
 800487c:	e004      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 800487e:	2001      	movs	r0, #1
 8004880:	e002      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8004882:	2001      	movs	r0, #1
 8004884:	e000      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8004886:	2000      	movs	r0, #0
}
 8004888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800488a:	2000      	movs	r0, #0
 800488c:	e7fc      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
 800488e:	2000      	movs	r0, #0
 8004890:	e7fa      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8004892:	2001      	movs	r0, #1
 8004894:	e7f8      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8004896:	2001      	movs	r0, #1
 8004898:	e7f6      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
 800489a:	2001      	movs	r0, #1
 800489c:	e7f4      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
 800489e:	2001      	movs	r0, #1
 80048a0:	e7f2      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
 80048a2:	2001      	movs	r0, #1
 80048a4:	e7f0      	b.n	8004888 <HAL_RCC_OscConfig+0x650>
 80048a6:	bf00      	nop
 80048a8:	58000400 	.word	0x58000400
 80048ac:	11c1808c 	.word	0x11c1808c

080048b0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80048b0:	2800      	cmp	r0, #0
 80048b2:	f000 8127 	beq.w	8004b04 <HAL_RCC_ClockConfig+0x254>
{
 80048b6:	b570      	push	{r4, r5, r6, lr}
 80048b8:	460c      	mov	r4, r1
 80048ba:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048bc:	4b93      	ldr	r3, [pc, #588]	; (8004b0c <HAL_RCC_ClockConfig+0x25c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	428b      	cmp	r3, r1
 80048c6:	d32d      	bcc.n	8004924 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	f013 0f02 	tst.w	r3, #2
 80048ce:	d13f      	bne.n	8004950 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	f013 0f20 	tst.w	r3, #32
 80048d6:	d153      	bne.n	8004980 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048de:	d16a      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	f013 0f04 	tst.w	r3, #4
 80048e6:	f040 8083 	bne.w	80049f0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ea:	682b      	ldr	r3, [r5, #0]
 80048ec:	f013 0f08 	tst.w	r3, #8
 80048f0:	f040 8097 	bne.w	8004a22 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	f013 0f01 	tst.w	r3, #1
 80048fa:	f000 80de 	beq.w	8004aba <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fe:	686b      	ldr	r3, [r5, #4]
 8004900:	2b02      	cmp	r3, #2
 8004902:	f000 80a8 	beq.w	8004a56 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004906:	2b03      	cmp	r3, #3
 8004908:	f000 80ad 	beq.w	8004a66 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 80b2 	bne.w	8004a76 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	f012 0f02 	tst.w	r2, #2
 800491c:	f040 80b1 	bne.w	8004a82 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
 8004922:	e0ee      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004924:	4a79      	ldr	r2, [pc, #484]	; (8004b0c <HAL_RCC_ClockConfig+0x25c>)
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	f023 0307 	bic.w	r3, r3, #7
 800492c:	430b      	orrs	r3, r1
 800492e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004930:	f7fc fac0 	bl	8000eb4 <HAL_GetTick>
 8004934:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b75      	ldr	r3, [pc, #468]	; (8004b0c <HAL_RCC_ClockConfig+0x25c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	42a3      	cmp	r3, r4
 8004940:	d0c2      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004942:	f7fc fab7 	bl	8000eb4 <HAL_GetTick>
 8004946:	1b80      	subs	r0, r0, r6
 8004948:	2802      	cmp	r0, #2
 800494a:	d9f4      	bls.n	8004936 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 800494c:	2003      	movs	r0, #3
 800494e:	e0d8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004956:	688a      	ldr	r2, [r1, #8]
 8004958:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004960:	f7fc faa8 	bl	8000eb4 <HAL_GetTick>
 8004964:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004970:	d1ae      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004972:	f7fc fa9f 	bl	8000eb4 <HAL_GetTick>
 8004976:	1b80      	subs	r0, r0, r6
 8004978:	2802      	cmp	r0, #2
 800497a:	d9f4      	bls.n	8004966 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 800497c:	2003      	movs	r0, #3
 800497e:	e0c0      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004980:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004986:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800498a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004994:	f7fc fa8e 	bl	8000eb4 <HAL_GetTick>
 8004998:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80049a6:	d197      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049a8:	f7fc fa84 	bl	8000eb4 <HAL_GetTick>
 80049ac:	1b80      	subs	r0, r0, r6
 80049ae:	2802      	cmp	r0, #2
 80049b0:	d9f3      	bls.n	800499a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80049b2:	2003      	movs	r0, #3
 80049b4:	e0a5      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80049b6:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80049b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049bc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80049c0:	f023 030f 	bic.w	r3, r3, #15
 80049c4:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80049c8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80049cc:	f7fc fa72 	bl	8000eb4 <HAL_GetTick>
 80049d0:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80049de:	f47f af7f 	bne.w	80048e0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049e2:	f7fc fa67 	bl	8000eb4 <HAL_GetTick>
 80049e6:	1b80      	subs	r0, r0, r6
 80049e8:	2802      	cmp	r0, #2
 80049ea:	d9f2      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80049ec:	2003      	movs	r0, #3
 80049ee:	e088      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80049f0:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f6:	688a      	ldr	r2, [r1, #8]
 80049f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049fc:	4313      	orrs	r3, r2
 80049fe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004a00:	f7fc fa58 	bl	8000eb4 <HAL_GetTick>
 8004a04:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a10:	f47f af6b 	bne.w	80048ea <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a14:	f7fc fa4e 	bl	8000eb4 <HAL_GetTick>
 8004a18:	1b80      	subs	r0, r0, r6
 8004a1a:	2802      	cmp	r0, #2
 8004a1c:	d9f3      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004a1e:	2003      	movs	r0, #3
 8004a20:	e06f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a22:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a28:	6893      	ldr	r3, [r2, #8]
 8004a2a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004a2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a32:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004a34:	f7fc fa3e 	bl	8000eb4 <HAL_GetTick>
 8004a38:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004a44:	f47f af56 	bne.w	80048f4 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a48:	f7fc fa34 	bl	8000eb4 <HAL_GetTick>
 8004a4c:	1b80      	subs	r0, r0, r6
 8004a4e:	2802      	cmp	r0, #2
 8004a50:	d9f3      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004a52:	2003      	movs	r0, #3
 8004a54:	e055      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004a60:	d10f      	bne.n	8004a82 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004a62:	2001      	movs	r0, #1
 8004a64:	e04d      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004a72:	2001      	movs	r0, #1
 8004a74:	e045      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004a80:	d042      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a86:	688a      	ldr	r2, [r1, #8]
 8004a88:	f022 0203 	bic.w	r2, r2, #3
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004a90:	f7fc fa10 	bl	8000eb4 <HAL_GetTick>
 8004a94:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa0:	686a      	ldr	r2, [r5, #4]
 8004aa2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fc fa04 	bl	8000eb4 <HAL_GetTick>
 8004aac:	1b80      	subs	r0, r0, r6
 8004aae:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ab2:	4298      	cmp	r0, r3
 8004ab4:	d9ef      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004ab6:	2003      	movs	r0, #3
 8004ab8:	e023      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <HAL_RCC_ClockConfig+0x25c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	42a3      	cmp	r3, r4
 8004ac4:	d915      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <HAL_RCC_ClockConfig+0x25c>)
 8004ac8:	6813      	ldr	r3, [r2, #0]
 8004aca:	f023 0307 	bic.w	r3, r3, #7
 8004ace:	4323      	orrs	r3, r4
 8004ad0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ad2:	f7fc f9ef 	bl	8000eb4 <HAL_GetTick>
 8004ad6:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_RCC_ClockConfig+0x25c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	d006      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ae4:	f7fc f9e6 	bl	8000eb4 <HAL_GetTick>
 8004ae8:	1b40      	subs	r0, r0, r5
 8004aea:	2802      	cmp	r0, #2
 8004aec:	d9f4      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004aee:	2003      	movs	r0, #3
 8004af0:	e007      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004af2:	f7ff fb91 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_ClockConfig+0x260>)
 8004af8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_ClockConfig+0x264>)
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	f7fc f9d7 	bl	8000eb0 <HAL_InitTick>
}
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004b04:	2001      	movs	r0, #1
}
 8004b06:	4770      	bx	lr
        return HAL_ERROR;
 8004b08:	2001      	movs	r0, #1
 8004b0a:	e7fa      	b.n	8004b02 <HAL_RCC_ClockConfig+0x252>
 8004b0c:	58004000 	.word	0x58004000
 8004b10:	20000050 	.word	0x20000050
 8004b14:	20000054 	.word	0x20000054

08004b18 <HAL_RCC_GetPCLK1Freq>:
{
 8004b18:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b1a:	f7ff fb7d 	bl	8004218 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b28:	4a02      	ldr	r2, [pc, #8]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004b2e:	40d8      	lsrs	r0, r3
 8004b30:	bd08      	pop	{r3, pc}
 8004b32:	bf00      	nop
 8004b34:	080077a0 	.word	0x080077a0

08004b38 <HAL_RCC_GetPCLK2Freq>:
{
 8004b38:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b3a:	f7ff fb6d 	bl	8004218 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b48:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004b4e:	40d8      	lsrs	r0, r3
 8004b50:	bd08      	pop	{r3, pc}
 8004b52:	bf00      	nop
 8004b54:	080077a0 	.word	0x080077a0

08004b58 <HAL_RCC_GetOscConfig>:
  if (RCC_OscInitStruct != NULL)
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	f000 80a1 	beq.w	8004ca2 <HAL_RCC_GetOscConfig+0x14a>
    RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8004b60:	222f      	movs	r2, #47	; 0x2f
 8004b62:	6002      	str	r2, [r0, #0]
    if ((RCC->CR & RCC_CR_HSEBYPPWR) == RCC_CR_HSEBYPPWR)
 8004b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8004b6e:	d03c      	beq.n	8004bea <HAL_RCC_GetOscConfig+0x92>
      RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS_PWR;
 8004b70:	f44f 1204 	mov.w	r2, #2162688	; 0x210000
 8004b74:	6042      	str	r2, [r0, #4]
    if ((RCC->CR & RCC_CR_HSEPRE) == RCC_CR_HSEPRE)
 8004b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8004b80:	d040      	beq.n	8004c04 <HAL_RCC_GetOscConfig+0xac>
      RCC_OscInitStruct->HSEDiv = RCC_HSE_DIV2;
 8004b82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b86:	609a      	str	r2, [r3, #8]
    if ((RCC->CR & RCC_CR_MSION) == RCC_CR_MSION)
 8004b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	f012 0f01 	tst.w	r2, #1
 8004b92:	d03a      	beq.n	8004c0a <HAL_RCC_GetOscConfig+0xb2>
      RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8004b94:	2201      	movs	r2, #1
 8004b96:	621a      	str	r2, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 8004b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9c:	6851      	ldr	r1, [r2, #4]
 8004b9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    RCC_OscInitStruct->MSICalibrationValue  = LL_RCC_MSI_GetCalibTrimming();
 8004ba2:	6259      	str	r1, [r3, #36]	; 0x24
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004ba4:	6811      	ldr	r1, [r2, #0]
 8004ba6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    RCC_OscInitStruct->MSIClockRange        = LL_RCC_MSI_GetRange();
 8004baa:	6299      	str	r1, [r3, #40]	; 0x28
    if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004bb2:	d02d      	beq.n	8004c10 <HAL_RCC_GetOscConfig+0xb8>
      RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8004bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bb8:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 8004bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bbe:	684a      	ldr	r2, [r1, #4]
 8004bc0:	f3c2 6206 	ubfx	r2, r2, #24, #7
    RCC_OscInitStruct->HSICalibrationValue = LL_RCC_HSI_GetCalibTrimming();
 8004bc4:	615a      	str	r2, [r3, #20]
    if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8004bc6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bca:	f012 0f01 	tst.w	r2, #1
 8004bce:	d032      	beq.n	8004c36 <HAL_RCC_GetOscConfig+0xde>
      if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8004bd0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bd4:	f012 0f04 	tst.w	r2, #4
 8004bd8:	d020      	beq.n	8004c1c <HAL_RCC_GetOscConfig+0xc4>
        if ((RCC->BDCR & RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN)
 8004bda:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bde:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004be2:	d018      	beq.n	8004c16 <HAL_RCC_GetOscConfig+0xbe>
          RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8004be4:	2285      	movs	r2, #133	; 0x85
 8004be6:	60da      	str	r2, [r3, #12]
 8004be8:	e027      	b.n	8004c3a <HAL_RCC_GetOscConfig+0xe2>
    else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8004bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetOscConfig+0xa6>
      RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8004bf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bfa:	6042      	str	r2, [r0, #4]
 8004bfc:	e7bb      	b.n	8004b76 <HAL_RCC_GetOscConfig+0x1e>
      RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8004bfe:	2200      	movs	r2, #0
 8004c00:	6042      	str	r2, [r0, #4]
 8004c02:	e7b8      	b.n	8004b76 <HAL_RCC_GetOscConfig+0x1e>
      RCC_OscInitStruct->HSEDiv = RCC_HSE_DIV1;
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	e7be      	b.n	8004b88 <HAL_RCC_GetOscConfig+0x30>
      RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	621a      	str	r2, [r3, #32]
 8004c0e:	e7c3      	b.n	8004b98 <HAL_RCC_GetOscConfig+0x40>
      RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8004c10:	2200      	movs	r2, #0
 8004c12:	611a      	str	r2, [r3, #16]
 8004c14:	e7d1      	b.n	8004bba <HAL_RCC_GetOscConfig+0x62>
          RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
 8004c16:	2205      	movs	r2, #5
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	e00e      	b.n	8004c3a <HAL_RCC_GetOscConfig+0xe2>
      else if ((RCC->BDCR & RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN)
 8004c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c20:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004c24:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004c28:	d002      	beq.n	8004c30 <HAL_RCC_GetOscConfig+0xd8>
        RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8004c2a:	2281      	movs	r2, #129	; 0x81
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	e004      	b.n	8004c3a <HAL_RCC_GetOscConfig+0xe2>
        RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
 8004c30:	2201      	movs	r2, #1
 8004c32:	60da      	str	r2, [r3, #12]
 8004c34:	e001      	b.n	8004c3a <HAL_RCC_GetOscConfig+0xe2>
      RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8004c36:	2200      	movs	r2, #0
 8004c38:	60da      	str	r2, [r3, #12]
    if (((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION))
 8004c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c3e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8004c42:	f012 0f01 	tst.w	r2, #1
 8004c46:	d02d      	beq.n	8004ca4 <HAL_RCC_GetOscConfig+0x14c>
      RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8004c48:	2201      	movs	r2, #1
 8004c4a:	619a      	str	r2, [r3, #24]
    if ((RCC->CSR & RCC_CSR_LSIPRE) == RCC_CSR_LSIPRE)
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c50:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8004c54:	f012 0f10 	tst.w	r2, #16
 8004c58:	d027      	beq.n	8004caa <HAL_RCC_GetOscConfig+0x152>
      RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV128;
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	61da      	str	r2, [r3, #28]
    if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8004c68:	d022      	beq.n	8004cb0 <HAL_RCC_GetOscConfig+0x158>
      RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c72:	68d1      	ldr	r1, [r2, #12]
 8004c74:	f001 0103 	and.w	r1, r1, #3
    RCC_OscInitStruct->PLL.PLLSource = LL_RCC_PLL_GetMainSource();
 8004c78:	6319      	str	r1, [r3, #48]	; 0x30
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c7a:	68d1      	ldr	r1, [r2, #12]
 8004c7c:	f001 0170 	and.w	r1, r1, #112	; 0x70
    RCC_OscInitStruct->PLL.PLLM      = LL_RCC_PLL_GetDivider();
 8004c80:	6359      	str	r1, [r3, #52]	; 0x34
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c82:	68d1      	ldr	r1, [r2, #12]
 8004c84:	f3c1 2106 	ubfx	r1, r1, #8, #7
    RCC_OscInitStruct->PLL.PLLN      = LL_RCC_PLL_GetN();
 8004c88:	6399      	str	r1, [r3, #56]	; 0x38
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004c8a:	68d1      	ldr	r1, [r2, #12]
 8004c8c:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
    RCC_OscInitStruct->PLL.PLLP      = LL_RCC_PLL_GetP();
 8004c90:	63d9      	str	r1, [r3, #60]	; 0x3c
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8004c92:	68d1      	ldr	r1, [r2, #12]
 8004c94:	f001 6160 	and.w	r1, r1, #234881024	; 0xe000000
    RCC_OscInitStruct->PLL.PLLQ      = LL_RCC_PLL_GetQ();
 8004c98:	6419      	str	r1, [r3, #64]	; 0x40
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c9a:	68d2      	ldr	r2, [r2, #12]
 8004c9c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    RCC_OscInitStruct->PLL.PLLR      = LL_RCC_PLL_GetR();
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004ca2:	4770      	bx	lr
      RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	619a      	str	r2, [r3, #24]
 8004ca8:	e7d0      	b.n	8004c4c <HAL_RCC_GetOscConfig+0xf4>
      RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV1;
 8004caa:	2200      	movs	r2, #0
 8004cac:	61da      	str	r2, [r3, #28]
 8004cae:	e7d6      	b.n	8004c5e <HAL_RCC_GetOscConfig+0x106>
      RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cb4:	e7db      	b.n	8004c6e <HAL_RCC_GetOscConfig+0x116>
	...

08004cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cbc:	6803      	ldr	r3, [r0, #0]
 8004cbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004cc2:	f040 80d6 	bne.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004cc6:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	f013 0f01 	tst.w	r3, #1
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cd0:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cda:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	f013 0f02 	tst.w	r3, #2
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cee:	68a2      	ldr	r2, [r4, #8]
 8004cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cf4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cf8:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	f013 0f20 	tst.w	r3, #32
 8004d0a:	d009      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d0c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d26:	d00c      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d28:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d32:	0c02      	lsrs	r2, r0, #16
 8004d34:	0412      	lsls	r2, r2, #16
 8004d36:	ea23 0302 	bic.w	r3, r3, r2
 8004d3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d48:	d00c      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d50:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d54:	0c02      	lsrs	r2, r0, #16
 8004d56:	0412      	lsls	r2, r2, #16
 8004d58:	ea23 0302 	bic.w	r3, r3, r2
 8004d5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d6a:	d00c      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004d6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d76:	0c02      	lsrs	r2, r0, #16
 8004d78:	0412      	lsls	r2, r2, #16
 8004d7a:	ea23 0302 	bic.w	r3, r3, r2
 8004d7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d8c:	d00f      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d8e:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d90:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004d94:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004d98:	0919      	lsrs	r1, r3, #4
 8004d9a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004d9e:	ea22 0201 	bic.w	r2, r2, r1
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004db4:	d00f      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004db6:	69a3      	ldr	r3, [r4, #24]
 8004db8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004dbc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004dc0:	0919      	lsrs	r1, r3, #4
 8004dc2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004dc6:	ea22 0201 	bic.w	r2, r2, r1
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ddc:	d00f      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dde:	69e3      	ldr	r3, [r4, #28]
 8004de0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004de4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004de8:	0919      	lsrs	r1, r3, #4
 8004dea:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004dee:	ea22 0201 	bic.w	r2, r2, r1
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	f013 0f10 	tst.w	r3, #16
 8004e04:	d00d      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004e06:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004e1a:	68e3      	ldr	r3, [r4, #12]
 8004e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e20:	d07f      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004e28:	d00f      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e30:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e34:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e40:	b91b      	cbnz	r3, 8004e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004e42:	68cb      	ldr	r3, [r1, #12]
 8004e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e48:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004e50:	d00d      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6c:	d05e      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004e6e:	4628      	mov	r0, r5
 8004e70:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004e72:	f7ff f841 	bl	8003ef8 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004e76:	f7fc f81d 	bl	8000eb4 <HAL_GetTick>
 8004e7a:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004e7c:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e84:	d106      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e86:	f7fc f815 	bl	8000eb4 <HAL_GetTick>
 8004e8a:	1b40      	subs	r0, r0, r5
 8004e8c:	2802      	cmp	r0, #2
 8004e8e:	d9f5      	bls.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8004e90:	2503      	movs	r5, #3
 8004e92:	e000      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004e94:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	f47f af16 	bne.w	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004ea8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d024      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004eb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004eba:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004ebe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004ec2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ec6:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004eca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004ece:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004ed6:	f012 0f02 	tst.w	r2, #2
 8004eda:	d10f      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8004edc:	2d00      	cmp	r5, #0
 8004ede:	f47f aef3 	bne.w	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004eec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ef6:	e6e7      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004ef8:	2200      	movs	r2, #0
 8004efa:	e7ec      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8004efc:	f7fb ffda 	bl	8000eb4 <HAL_GetTick>
 8004f00:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	f013 0f02 	tst.w	r3, #2
 8004f0e:	d1e5      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fb ffd0 	bl	8000eb4 <HAL_GetTick>
 8004f14:	1b80      	subs	r0, r0, r6
 8004f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f1a:	4298      	cmp	r0, r3
 8004f1c:	d9f1      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8004f1e:	2503      	movs	r5, #3
 8004f20:	e7dc      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004f22:	68cb      	ldr	r3, [r1, #12]
 8004f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f28:	60cb      	str	r3, [r1, #12]
 8004f2a:	e77a      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f2c:	68cb      	ldr	r3, [r1, #12]
 8004f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f32:	60cb      	str	r3, [r1, #12]
 8004f34:	e79b      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f36:	bf00      	nop
 8004f38:	58000400 	.word	0x58000400

08004f3c <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d036      	beq.n	8004fb2 <HAL_RTC_DeactivateAlarm+0x76>
 8004f44:	2301      	movs	r3, #1
 8004f46:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f52:	22ca      	movs	r2, #202	; 0xca
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
 8004f56:	2253      	movs	r2, #83	; 0x53
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004f5a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004f5e:	d019      	beq.n	8004f94 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004f60:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004f68:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004f72:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f74:	f022 0202 	bic.w	r2, r2, #2
 8004f78:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004f90:	4618      	mov	r0, r3
 8004f92:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004f9a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004fa4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004fac:	2201      	movs	r2, #1
 8004fae:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fb0:	e7e5      	b.n	8004f7e <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004fb2:	2002      	movs	r0, #2
}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40002800 	.word	0x40002800

08004fbc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004fbc:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004fbe:	2809      	cmp	r0, #9
 8004fc0:	d903      	bls.n	8004fca <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8004fc2:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004fc4:	380a      	subs	r0, #10
 8004fc6:	b2c0      	uxtb	r0, r0
 8004fc8:	e7f9      	b.n	8004fbe <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	b2db      	uxtb	r3, r3
}
 8004fce:	4318      	orrs	r0, r3
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004fd4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f000 80b0 	beq.w	800513e <HAL_RTC_SetAlarm_IT+0x16a>
{
 8004fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fec:	2302      	movs	r3, #2
 8004fee:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004ff2:	4b54      	ldr	r3, [pc, #336]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 8004ff4:	68de      	ldr	r6, [r3, #12]
 8004ff6:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8004ffa:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004ffe:	d043      	beq.n	8005088 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005000:	bb12      	cbnz	r2, 8005048 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005008:	d101      	bne.n	800500e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800500a:	2300      	movs	r3, #0
 800500c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800500e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005012:	7820      	ldrb	r0, [r4, #0]
 8005014:	f7ff ffd2 	bl	8004fbc <RTC_ByteToBcd2>
 8005018:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800501a:	7860      	ldrb	r0, [r4, #1]
 800501c:	f7ff ffce 	bl	8004fbc <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005020:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005024:	78a0      	ldrb	r0, [r4, #2]
 8005026:	f7ff ffc9 	bl	8004fbc <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800502a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800502c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800502e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005032:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8005036:	f7ff ffc1 	bl	8004fbc <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800503a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800503e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005040:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005042:	ea48 0000 	orr.w	r0, r8, r0
 8005046:	e020      	b.n	800508a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005048:	6948      	ldr	r0, [r1, #20]
 800504a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800504e:	d009      	beq.n	8005064 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005050:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005054:	d006      	beq.n	8005064 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005056:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800505e:	d101      	bne.n	8005064 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005060:	2300      	movs	r3, #0
 8005062:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005064:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005066:	7863      	ldrb	r3, [r4, #1]
 8005068:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800506a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800506e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005070:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005072:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005074:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005078:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800507c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005080:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005082:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005084:	4318      	orrs	r0, r3
 8005086:	e000      	b.n	800508a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8005088:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 800508c:	22ca      	movs	r2, #202	; 0xca
 800508e:	625a      	str	r2, [r3, #36]	; 0x24
 8005090:	2253      	movs	r2, #83	; 0x53
 8005092:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d02a      	beq.n	80050f2 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800509c:	4b29      	ldr	r3, [pc, #164]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80050a4:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80050a6:	2202      	movs	r2, #2
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80050aa:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80050ae:	d040      	beq.n	8005132 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80050b0:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 80050b2:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80050b4:	69a2      	ldr	r2, [r4, #24]
 80050b6:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80050b8:	6862      	ldr	r2, [r4, #4]
 80050ba:	4b22      	ldr	r3, [pc, #136]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 80050bc:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80050be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80050c0:	f042 0202 	orr.w	r2, r2, #2
 80050c4:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80050c6:	699a      	ldr	r2, [r3, #24]
 80050c8:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80050cc:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <HAL_RTC_SetAlarm_IT+0x174>)
 80050d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80050d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 80050de:	22ff      	movs	r2, #255	; 0xff
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80050ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80050fa:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80050fc:	2201      	movs	r2, #1
 80050fe:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005100:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005104:	d00f      	beq.n	8005126 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 8005108:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800510a:	69a2      	ldr	r2, [r4, #24]
 800510c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800510e:	6862      	ldr	r2, [r4, #4]
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 8005112:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005114:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005122:	619a      	str	r2, [r3, #24]
 8005124:	e7d3      	b.n	80050ce <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005126:	69a3      	ldr	r3, [r4, #24]
 8005128:	69e2      	ldr	r2, [r4, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	4a05      	ldr	r2, [pc, #20]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 800512e:	6453      	str	r3, [r2, #68]	; 0x44
 8005130:	e7ed      	b.n	800510e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005132:	69a3      	ldr	r3, [r4, #24]
 8005134:	69e2      	ldr	r2, [r4, #28]
 8005136:	4313      	orrs	r3, r2
 8005138:	4a02      	ldr	r2, [pc, #8]	; (8005144 <HAL_RTC_SetAlarm_IT+0x170>)
 800513a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800513c:	e7bc      	b.n	80050b8 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800513e:	2002      	movs	r0, #2
}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40002800 	.word	0x40002800
 8005148:	58000800 	.word	0x58000800

0800514c <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800514c:	0089      	lsls	r1, r1, #2
 800514e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005152:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005156:	600a      	str	r2, [r1, #0]
}
 8005158:	4770      	bx	lr

0800515a <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800515a:	0089      	lsls	r1, r1, #2
 800515c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005160:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005164:	6808      	ldr	r0, [r1, #0]
}
 8005166:	4770      	bx	lr

08005168 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005168:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	e852 3f00 	ldrex	r3, [r2]
 800516e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	e842 3100 	strex	r1, r3, [r2]
 8005176:	2900      	cmp	r1, #0
 8005178:	d1f6      	bne.n	8005168 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800517a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	f102 0308 	add.w	r3, r2, #8
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	3208      	adds	r2, #8
 800518a:	e842 3100 	strex	r1, r3, [r2]
 800518e:	2900      	cmp	r1, #0
 8005190:	d1f3      	bne.n	800517a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005192:	2320      	movs	r3, #32
 8005194:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005198:	4770      	bx	lr

0800519a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800519a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	e852 3f00 	ldrex	r3, [r2]
 80051a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	e842 3100 	strex	r1, r3, [r2]
 80051a8:	2900      	cmp	r1, #0
 80051aa:	d1f6      	bne.n	800519a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	f102 0308 	add.w	r3, r2, #8
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	3208      	adds	r2, #8
 80051c0:	e842 3100 	strex	r1, r3, [r2]
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d1f1      	bne.n	80051ac <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d006      	beq.n	80051dc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ce:	2320      	movs	r3, #32
 80051d0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d4:	2300      	movs	r3, #0
 80051d6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051d8:	6703      	str	r3, [r0, #112]	; 0x70
}
 80051da:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	e852 3f00 	ldrex	r3, [r2]
 80051e2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	e842 3100 	strex	r1, r3, [r2]
 80051ea:	2900      	cmp	r1, #0
 80051ec:	d1f6      	bne.n	80051dc <UART_EndRxTransfer+0x42>
 80051ee:	e7ee      	b.n	80051ce <UART_EndRxTransfer+0x34>

080051f0 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 80051f0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d14c      	bne.n	8005292 <HAL_UART_Transmit_DMA+0xa2>
{
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80051fc:	2900      	cmp	r1, #0
 80051fe:	d04a      	beq.n	8005296 <HAL_UART_Transmit_DMA+0xa6>
 8005200:	2a00      	cmp	r2, #0
 8005202:	d04a      	beq.n	800529a <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8005204:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005208:	2b01      	cmp	r3, #1
 800520a:	d048      	beq.n	800529e <HAL_UART_Transmit_DMA+0xae>
 800520c:	2301      	movs	r3, #1
 800520e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005212:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005214:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005218:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	2300      	movs	r3, #0
 800521e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005222:	2321      	movs	r3, #33	; 0x21
 8005224:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8005228:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800522a:	b1f3      	cbz	r3, 800526a <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800522c:	491d      	ldr	r1, [pc, #116]	; (80052a4 <HAL_UART_Transmit_DMA+0xb4>)
 800522e:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005230:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005232:	491d      	ldr	r1, [pc, #116]	; (80052a8 <HAL_UART_Transmit_DMA+0xb8>)
 8005234:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005236:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005238:	491c      	ldr	r1, [pc, #112]	; (80052ac <HAL_UART_Transmit_DMA+0xbc>)
 800523a:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800523c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800523e:	2100      	movs	r1, #0
 8005240:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005242:	6801      	ldr	r1, [r0, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	f101 0228 	add.w	r2, r1, #40	; 0x28
 800524a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800524c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800524e:	f7fd ff79 	bl	8003144 <HAL_DMA_Start_IT>
 8005252:	b150      	cbz	r0, 800526a <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005254:	2310      	movs	r3, #16
 8005256:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800525a:	2300      	movs	r3, #0
 800525c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005260:	2320      	movs	r3, #32
 8005262:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8005266:	2001      	movs	r0, #1
 8005268:	e012      	b.n	8005290 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	2240      	movs	r2, #64	; 0x40
 800526e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005270:	2300      	movs	r3, #0
 8005272:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005276:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	f102 0308 	add.w	r3, r2, #8
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	3208      	adds	r2, #8
 8005286:	e842 3100 	strex	r1, r3, [r2]
 800528a:	2900      	cmp	r1, #0
 800528c:	d1f3      	bne.n	8005276 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 800528e:	2000      	movs	r0, #0
}
 8005290:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005292:	2002      	movs	r0, #2
}
 8005294:	4770      	bx	lr
      return HAL_ERROR;
 8005296:	2001      	movs	r0, #1
 8005298:	e7fa      	b.n	8005290 <HAL_UART_Transmit_DMA+0xa0>
 800529a:	2001      	movs	r0, #1
 800529c:	e7f8      	b.n	8005290 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 800529e:	2002      	movs	r0, #2
 80052a0:	e7f6      	b.n	8005290 <HAL_UART_Transmit_DMA+0xa0>
 80052a2:	bf00      	nop
 80052a4:	080052b1 	.word	0x080052b1
 80052a8:	0800531f 	.word	0x0800531f
 80052ac:	0800532b 	.word	0x0800532b

080052b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052b0:	b508      	push	{r3, lr}
 80052b2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052b4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f013 0f20 	tst.w	r3, #32
 80052be:	d118      	bne.n	80052f2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	f102 0308 	add.w	r3, r2, #8
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	3208      	adds	r2, #8
 80052d6:	e842 3100 	strex	r1, r3, [r2]
 80052da:	2900      	cmp	r1, #0
 80052dc:	d1f3      	bne.n	80052c6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	e852 3f00 	ldrex	r3, [r2]
 80052e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	e842 3100 	strex	r1, r3, [r2]
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d1f6      	bne.n	80052de <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052f0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80052f2:	f7fc f811 	bl	8001318 <HAL_UART_TxCpltCallback>
}
 80052f6:	e7fb      	b.n	80052f0 <UART_DMATransmitCplt+0x40>

080052f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052f8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	e852 3f00 	ldrex	r3, [r2]
 8005300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	e842 3100 	strex	r1, r3, [r2]
 8005308:	2900      	cmp	r1, #0
 800530a:	d1f6      	bne.n	80052fa <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800530c:	2320      	movs	r3, #32
 800530e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005316:	f7fb ffff 	bl	8001318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800531a:	bd08      	pop	{r3, pc}

0800531c <HAL_UART_TxHalfCpltCallback>:
}
 800531c:	4770      	bx	lr

0800531e <UART_DMATxHalfCplt>:
{
 800531e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005320:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005322:	f7ff fffb 	bl	800531c <HAL_UART_TxHalfCpltCallback>
}
 8005326:	bd08      	pop	{r3, pc}

08005328 <HAL_UART_ErrorCallback>:
}
 8005328:	4770      	bx	lr

0800532a <UART_DMAError>:
{
 800532a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800532c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800532e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005332:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800533e:	d001      	beq.n	8005344 <UART_DMAError+0x1a>
 8005340:	2a21      	cmp	r2, #33	; 0x21
 8005342:	d010      	beq.n	8005366 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f013 0f40 	tst.w	r3, #64	; 0x40
 800534c:	d001      	beq.n	8005352 <UART_DMAError+0x28>
 800534e:	2d22      	cmp	r5, #34	; 0x22
 8005350:	d010      	beq.n	8005374 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005352:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005356:	f043 0310 	orr.w	r3, r3, #16
 800535a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff ffe2 	bl	8005328 <HAL_UART_ErrorCallback>
}
 8005364:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff fefb 	bl	8005168 <UART_EndTxTransfer>
 8005372:	e7e7      	b.n	8005344 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff ff0d 	bl	800519a <UART_EndRxTransfer>
 8005380:	e7e7      	b.n	8005352 <UART_DMAError+0x28>

08005382 <UART_DMAAbortOnError>:
{
 8005382:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005384:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800538c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005390:	f7ff ffca 	bl	8005328 <HAL_UART_ErrorCallback>
}
 8005394:	bd08      	pop	{r3, pc}

08005396 <HAL_UARTEx_RxEventCallback>:
}
 8005396:	4770      	bx	lr

08005398 <HAL_UART_IRQHandler>:
{
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800539c:	6801      	ldr	r1, [r0, #0]
 800539e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053a0:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a2:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053a4:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80053a8:	401a      	ands	r2, r3
 80053aa:	d108      	bne.n	80053be <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053ac:	f013 0f20 	tst.w	r3, #32
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053b2:	f010 0f20 	tst.w	r0, #32
 80053b6:	d134      	bne.n	8005422 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053b8:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80053bc:	d131      	bne.n	8005422 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80053be:	b12a      	cbz	r2, 80053cc <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80053c0:	4abd      	ldr	r2, [pc, #756]	; (80056b8 <HAL_UART_IRQHandler+0x320>)
 80053c2:	402a      	ands	r2, r5
 80053c4:	d133      	bne.n	800542e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80053c6:	4ebd      	ldr	r6, [pc, #756]	; (80056bc <HAL_UART_IRQHandler+0x324>)
 80053c8:	4230      	tst	r0, r6
 80053ca:	d130      	bne.n	800542e <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053cc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80053ce:	2a01      	cmp	r2, #1
 80053d0:	f000 80c3 	beq.w	800555a <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x4a>
 80053da:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80053de:	f040 8155 	bne.w	800568c <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053e6:	d007      	beq.n	80053f8 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053e8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80053ec:	f040 8155 	bne.w	800569a <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053f0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80053f4:	f040 8151 	bne.w	800569a <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x6e>
 80053fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005402:	f040 8151 	bne.w	80056a8 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005406:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800540a:	d003      	beq.n	8005414 <HAL_UART_IRQHandler+0x7c>
 800540c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005410:	f040 814e 	bne.w	80056b0 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005414:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005418:	d002      	beq.n	8005420 <HAL_UART_IRQHandler+0x88>
 800541a:	2800      	cmp	r0, #0
 800541c:	f2c0 8152 	blt.w	80056c4 <HAL_UART_IRQHandler+0x32c>
}
 8005420:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005422:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0fb      	beq.n	8005420 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005428:	4620      	mov	r0, r4
 800542a:	4798      	blx	r3
      return;
 800542c:	e7f8      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800542e:	f013 0f01 	tst.w	r3, #1
 8005432:	d009      	beq.n	8005448 <HAL_UART_IRQHandler+0xb0>
 8005434:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005438:	d006      	beq.n	8005448 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800543a:	2601      	movs	r6, #1
 800543c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800543e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005442:	4331      	orrs	r1, r6
 8005444:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005448:	f013 0f02 	tst.w	r3, #2
 800544c:	d00b      	beq.n	8005466 <HAL_UART_IRQHandler+0xce>
 800544e:	f015 0f01 	tst.w	r5, #1
 8005452:	d008      	beq.n	8005466 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005454:	6821      	ldr	r1, [r4, #0]
 8005456:	2602      	movs	r6, #2
 8005458:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800545a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800545e:	f041 0104 	orr.w	r1, r1, #4
 8005462:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005466:	f013 0f04 	tst.w	r3, #4
 800546a:	d00b      	beq.n	8005484 <HAL_UART_IRQHandler+0xec>
 800546c:	f015 0f01 	tst.w	r5, #1
 8005470:	d008      	beq.n	8005484 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	2604      	movs	r6, #4
 8005476:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005478:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800547c:	f041 0102 	orr.w	r1, r1, #2
 8005480:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005484:	f013 0f08 	tst.w	r3, #8
 8005488:	d00b      	beq.n	80054a2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800548a:	f010 0f20 	tst.w	r0, #32
 800548e:	d100      	bne.n	8005492 <HAL_UART_IRQHandler+0xfa>
 8005490:	b13a      	cbz	r2, 80054a2 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	2108      	movs	r1, #8
 8005496:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005498:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800549c:	430a      	orrs	r2, r1
 800549e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054a2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80054a6:	d00c      	beq.n	80054c2 <HAL_UART_IRQHandler+0x12a>
 80054a8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80054ac:	d009      	beq.n	80054c2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054b4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054b6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054ba:	f042 0220 	orr.w	r2, r2, #32
 80054be:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	d0aa      	beq.n	8005420 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054ca:	f013 0f20 	tst.w	r3, #32
 80054ce:	d009      	beq.n	80054e4 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054d0:	f010 0f20 	tst.w	r0, #32
 80054d4:	d102      	bne.n	80054dc <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054d6:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80054da:	d003      	beq.n	80054e4 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80054dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80054de:	b10b      	cbz	r3, 80054e4 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80054e0:	4620      	mov	r0, r4
 80054e2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80054e4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054f0:	d102      	bne.n	80054f8 <HAL_UART_IRQHandler+0x160>
 80054f2:	f012 0f28 	tst.w	r2, #40	; 0x28
 80054f6:	d029      	beq.n	800554c <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7ff fe4e 	bl	800519a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005506:	d01d      	beq.n	8005544 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005508:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	f102 0308 	add.w	r3, r2, #8
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	3208      	adds	r2, #8
 8005518:	e842 3100 	strex	r1, r3, [r2]
 800551c:	2900      	cmp	r1, #0
 800551e:	d1f3      	bne.n	8005508 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005520:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005522:	b15b      	cbz	r3, 800553c <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005524:	4a66      	ldr	r2, [pc, #408]	; (80056c0 <HAL_UART_IRQHandler+0x328>)
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005528:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800552a:	f7fd fe91 	bl	8003250 <HAL_DMA_Abort_IT>
 800552e:	2800      	cmp	r0, #0
 8005530:	f43f af76 	beq.w	8005420 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005534:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005536:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005538:	4798      	blx	r3
 800553a:	e771      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff fef3 	bl	8005328 <HAL_UART_ErrorCallback>
 8005542:	e76d      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff feef 	bl	8005328 <HAL_UART_ErrorCallback>
 800554a:	e769      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff feeb 	bl	8005328 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005558:	e762      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800555a:	f013 0f10 	tst.w	r3, #16
 800555e:	f43f af39 	beq.w	80053d4 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005562:	f010 0f10 	tst.w	r0, #16
 8005566:	f43f af35 	beq.w	80053d4 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800556a:	2310      	movs	r3, #16
 800556c:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005576:	d04f      	beq.n	8005618 <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005578:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800557a:	6813      	ldr	r3, [r2, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005580:	2b00      	cmp	r3, #0
 8005582:	f43f af4d 	beq.w	8005420 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005586:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800558a:	4299      	cmp	r1, r3
 800558c:	f67f af48 	bls.w	8005420 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005590:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005594:	6813      	ldr	r3, [r2, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f013 0f20 	tst.w	r3, #32
 800559c:	d131      	bne.n	8005602 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800559e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	e852 3f00 	ldrex	r3, [r2]
 80055a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	e842 3100 	strex	r1, r3, [r2]
 80055ac:	2900      	cmp	r1, #0
 80055ae:	d1f6      	bne.n	800559e <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	f102 0308 	add.w	r3, r2, #8
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	3208      	adds	r2, #8
 80055c0:	e842 3100 	strex	r1, r3, [r2]
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d1f3      	bne.n	80055b0 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	f102 0308 	add.w	r3, r2, #8
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	3208      	adds	r2, #8
 80055d8:	e842 3100 	strex	r1, r3, [r2]
 80055dc:	2900      	cmp	r1, #0
 80055de:	d1f3      	bne.n	80055c8 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80055e0:	2320      	movs	r3, #32
 80055e2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e6:	2300      	movs	r3, #0
 80055e8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	e852 3f00 	ldrex	r3, [r2]
 80055f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	e842 3100 	strex	r1, r3, [r2]
 80055f8:	2900      	cmp	r1, #0
 80055fa:	d1f6      	bne.n	80055ea <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80055fe:	f7fd fded 	bl	80031dc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005602:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005606:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800560a:	b29b      	uxth	r3, r3
 800560c:	1ac9      	subs	r1, r1, r3
 800560e:	b289      	uxth	r1, r1
 8005610:	4620      	mov	r0, r4
 8005612:	f7ff fec0 	bl	8005396 <HAL_UARTEx_RxEventCallback>
      return;
 8005616:	e703      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005618:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800561c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005620:	b29b      	uxth	r3, r3
 8005622:	1ac9      	subs	r1, r1, r3
 8005624:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8005626:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	f43f aef7 	beq.w	8005420 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8005632:	2900      	cmp	r1, #0
 8005634:	f43f aef4 	beq.w	8005420 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005638:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	e852 3f00 	ldrex	r3, [r2]
 800563e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	e842 3000 	strex	r0, r3, [r2]
 8005646:	2800      	cmp	r0, #0
 8005648:	d1f6      	bne.n	8005638 <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800564a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	f102 0308 	add.w	r3, r2, #8
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005658:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	3208      	adds	r2, #8
 800565e:	e842 3000 	strex	r0, r3, [r2]
 8005662:	2800      	cmp	r0, #0
 8005664:	d1f1      	bne.n	800564a <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 8005666:	2320      	movs	r3, #32
 8005668:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566c:	2300      	movs	r3, #0
 800566e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005670:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005672:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	e852 3f00 	ldrex	r3, [r2]
 8005678:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	e842 3000 	strex	r0, r3, [r2]
 8005680:	2800      	cmp	r0, #0
 8005682:	d1f6      	bne.n	8005672 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005684:	4620      	mov	r0, r4
 8005686:	f7ff fe86 	bl	8005396 <HAL_UARTEx_RxEventCallback>
      return;
 800568a:	e6c9      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800568c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005690:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005692:	4620      	mov	r0, r4
 8005694:	f000 fe14 	bl	80062c0 <HAL_UARTEx_WakeupCallback>
    return;
 8005698:	e6c2      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800569a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800569c:	2b00      	cmp	r3, #0
 800569e:	f43f aebf 	beq.w	8005420 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80056a2:	4620      	mov	r0, r4
 80056a4:	4798      	blx	r3
    return;
 80056a6:	e6bb      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff fe25 	bl	80052f8 <UART_EndTransmit_IT>
    return;
 80056ae:	e6b7      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 fe07 	bl	80062c4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80056b6:	e6b3      	b.n	8005420 <HAL_UART_IRQHandler+0x88>
 80056b8:	10000001 	.word	0x10000001
 80056bc:	04000120 	.word	0x04000120
 80056c0:	08005383 	.word	0x08005383
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 fdfc 	bl	80062c2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80056ca:	e6a9      	b.n	8005420 <HAL_UART_IRQHandler+0x88>

080056cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056cc:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80056ce:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056d2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80056d6:	2a22      	cmp	r2, #34	; 0x22
 80056d8:	d005      	beq.n	80056e6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056da:	6802      	ldr	r2, [r0, #0]
 80056dc:	6993      	ldr	r3, [r2, #24]
 80056de:	f043 0308 	orr.w	r3, r3, #8
 80056e2:	6193      	str	r3, [r2, #24]
  }
}
 80056e4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056e6:	6802      	ldr	r2, [r0, #0]
 80056e8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80056ee:	400b      	ands	r3, r1
 80056f0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80056f2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80056f4:	3301      	adds	r3, #1
 80056f6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80056f8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29b      	uxth	r3, r3
 8005702:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005706:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e9      	bne.n	80056e4 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005710:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	e852 3f00 	ldrex	r3, [r2]
 8005716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	e842 3100 	strex	r1, r3, [r2]
 800571e:	2900      	cmp	r1, #0
 8005720:	d1f6      	bne.n	8005710 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	f102 0308 	add.w	r3, r2, #8
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	3208      	adds	r2, #8
 8005732:	e842 3100 	strex	r1, r3, [r2]
 8005736:	2900      	cmp	r1, #0
 8005738:	d1f3      	bne.n	8005722 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800573a:	2320      	movs	r3, #32
 800573c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005744:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d116      	bne.n	8005778 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	2300      	movs	r3, #0
 800574c:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	e852 3f00 	ldrex	r3, [r2]
 8005754:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	e842 3100 	strex	r1, r3, [r2]
 800575c:	2900      	cmp	r1, #0
 800575e:	d1f6      	bne.n	800574e <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005760:	6803      	ldr	r3, [r0, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	f012 0f10 	tst.w	r2, #16
 8005768:	d001      	beq.n	800576e <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800576a:	2210      	movs	r2, #16
 800576c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800576e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005772:	f7ff fe10 	bl	8005396 <HAL_UARTEx_RxEventCallback>
 8005776:	e7b5      	b.n	80056e4 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005778:	f7fb fdd6 	bl	8001328 <HAL_UART_RxCpltCallback>
 800577c:	e7b2      	b.n	80056e4 <UART_RxISR_8BIT+0x18>

0800577e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800577e:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005780:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005784:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005788:	2b22      	cmp	r3, #34	; 0x22
 800578a:	d005      	beq.n	8005798 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800578c:	6802      	ldr	r2, [r0, #0]
 800578e:	6993      	ldr	r3, [r2, #24]
 8005790:	f043 0308 	orr.w	r3, r3, #8
 8005794:	6193      	str	r3, [r2, #24]
  }
}
 8005796:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005798:	6803      	ldr	r3, [r0, #0]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800579c:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800579e:	4013      	ands	r3, r2
 80057a0:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80057a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80057a4:	3302      	adds	r3, #2
 80057a6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80057a8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80057b6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ea      	bne.n	8005796 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	e852 3f00 	ldrex	r3, [r2]
 80057c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	e842 3100 	strex	r1, r3, [r2]
 80057ce:	2900      	cmp	r1, #0
 80057d0:	d1f6      	bne.n	80057c0 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	f102 0308 	add.w	r3, r2, #8
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	3208      	adds	r2, #8
 80057e2:	e842 3100 	strex	r1, r3, [r2]
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d1f3      	bne.n	80057d2 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80057ea:	2320      	movs	r3, #32
 80057ec:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d116      	bne.n	8005828 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fa:	2300      	movs	r3, #0
 80057fc:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	e852 3f00 	ldrex	r3, [r2]
 8005804:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	e842 3100 	strex	r1, r3, [r2]
 800580c:	2900      	cmp	r1, #0
 800580e:	d1f6      	bne.n	80057fe <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005810:	6803      	ldr	r3, [r0, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	f012 0f10 	tst.w	r2, #16
 8005818:	d001      	beq.n	800581e <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800581a:	2210      	movs	r2, #16
 800581c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800581e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005822:	f7ff fdb8 	bl	8005396 <HAL_UARTEx_RxEventCallback>
 8005826:	e7b6      	b.n	8005796 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005828:	f7fb fd7e 	bl	8001328 <HAL_UART_RxCpltCallback>
 800582c:	e7b3      	b.n	8005796 <UART_RxISR_16BIT+0x18>
	...

08005830 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8005834:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005838:	6803      	ldr	r3, [r0, #0]
 800583a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800583c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005840:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005844:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005848:	2a22      	cmp	r2, #34	; 0x22
 800584a:	d005      	beq.n	8005858 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	f042 0208 	orr.w	r2, r2, #8
 8005852:	619a      	str	r2, [r3, #24]
  }
}
 8005854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005858:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800585a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800585e:	e008      	b.n	8005872 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005860:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d14c      	bne.n	8005902 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005868:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d04e      	beq.n	8005910 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005872:	2f00      	cmp	r7, #0
 8005874:	f000 8087 	beq.w	8005986 <UART_RxISR_8BIT_FIFOEN+0x156>
 8005878:	f015 0f20 	tst.w	r5, #32
 800587c:	f000 8083 	beq.w	8005986 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005884:	b2f3      	uxtb	r3, r6
 8005886:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005888:	400b      	ands	r3, r1
 800588a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800588c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800588e:	3301      	adds	r3, #1
 8005890:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005892:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80058a4:	f015 0f07 	tst.w	r5, #7
 80058a8:	d0de      	beq.n	8005868 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058aa:	f015 0f01 	tst.w	r5, #1
 80058ae:	d009      	beq.n	80058c4 <UART_RxISR_8BIT_FIFOEN+0x94>
 80058b0:	f419 7f80 	tst.w	r9, #256	; 0x100
 80058b4:	d006      	beq.n	80058c4 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058b6:	2201      	movs	r2, #1
 80058b8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c4:	f015 0f02 	tst.w	r5, #2
 80058c8:	d00b      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80058ca:	f018 0f01 	tst.w	r8, #1
 80058ce:	d008      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	2202      	movs	r2, #2
 80058d4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058e2:	f015 0f04 	tst.w	r5, #4
 80058e6:	d0bb      	beq.n	8005860 <UART_RxISR_8BIT_FIFOEN+0x30>
 80058e8:	f018 0f01 	tst.w	r8, #1
 80058ec:	d0b8      	beq.n	8005860 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	2204      	movs	r2, #4
 80058f2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80058f8:	f043 0302 	orr.w	r3, r3, #2
 80058fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005900:	e7ae      	b.n	8005860 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005902:	4620      	mov	r0, r4
 8005904:	f7ff fd10 	bl	8005328 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	2300      	movs	r3, #0
 800590a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800590e:	e7ab      	b.n	8005868 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005910:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	e852 3f00 	ldrex	r3, [r2]
 8005916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	e842 3100 	strex	r1, r3, [r2]
 800591e:	2900      	cmp	r1, #0
 8005920:	d1f6      	bne.n	8005910 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005922:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	f102 0308 	add.w	r3, r2, #8
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005930:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	3208      	adds	r2, #8
 8005936:	e842 3100 	strex	r1, r3, [r2]
 800593a:	2900      	cmp	r1, #0
 800593c:	d1f1      	bne.n	8005922 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800593e:	2320      	movs	r3, #32
 8005940:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d003      	beq.n	8005956 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 800594e:	4620      	mov	r0, r4
 8005950:	f7fb fcea 	bl	8001328 <HAL_UART_RxCpltCallback>
 8005954:	e78d      	b.n	8005872 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	2300      	movs	r3, #0
 8005958:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	e852 3f00 	ldrex	r3, [r2]
 8005960:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	e842 3100 	strex	r1, r3, [r2]
 8005968:	2900      	cmp	r1, #0
 800596a:	d1f6      	bne.n	800595a <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	f012 0f10 	tst.w	r2, #16
 8005974:	d001      	beq.n	800597a <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005976:	2210      	movs	r2, #16
 8005978:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800597a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff fd09 	bl	8005396 <HAL_UARTEx_RxEventCallback>
 8005984:	e775      	b.n	8005872 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005986:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800598a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800598c:	2b00      	cmp	r3, #0
 800598e:	f43f af61 	beq.w	8005854 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005992:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005996:	429a      	cmp	r2, r3
 8005998:	f67f af5c 	bls.w	8005854 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800599c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	f102 0308 	add.w	r3, r2, #8
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	3208      	adds	r2, #8
 80059ac:	e842 3100 	strex	r1, r3, [r2]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d1f3      	bne.n	800599c <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80059b6:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	e852 3f00 	ldrex	r3, [r2]
 80059be:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	e842 3100 	strex	r1, r3, [r2]
 80059c6:	2900      	cmp	r1, #0
 80059c8:	d1f6      	bne.n	80059b8 <UART_RxISR_8BIT_FIFOEN+0x188>
 80059ca:	e743      	b.n	8005854 <UART_RxISR_8BIT_FIFOEN+0x24>
 80059cc:	080056cd 	.word	0x080056cd

080059d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80059d4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059d8:	6803      	ldr	r3, [r0, #0]
 80059da:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059dc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059e0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80059e8:	2a22      	cmp	r2, #34	; 0x22
 80059ea:	d005      	beq.n	80059f8 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	619a      	str	r2, [r3, #24]
  }
}
 80059f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80059fa:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059fe:	e008      	b.n	8005a12 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d14b      	bne.n	8005aa0 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8005a08:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d04d      	beq.n	8005aae <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a12:	2f00      	cmp	r7, #0
 8005a14:	f000 8086 	beq.w	8005b24 <UART_RxISR_16BIT_FIFOEN+0x154>
 8005a18:	f015 0f20 	tst.w	r5, #32
 8005a1c:	f000 8082 	beq.w	8005b24 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a24:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a26:	4033      	ands	r3, r6
 8005a28:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005a30:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a42:	f015 0f07 	tst.w	r5, #7
 8005a46:	d0df      	beq.n	8005a08 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a48:	f015 0f01 	tst.w	r5, #1
 8005a4c:	d009      	beq.n	8005a62 <UART_RxISR_16BIT_FIFOEN+0x92>
 8005a4e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005a52:	d006      	beq.n	8005a62 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a54:	2201      	movs	r2, #1
 8005a56:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a58:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a62:	f015 0f02 	tst.w	r5, #2
 8005a66:	d00b      	beq.n	8005a80 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8005a68:	f018 0f01 	tst.w	r8, #1
 8005a6c:	d008      	beq.n	8005a80 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	2202      	movs	r2, #2
 8005a72:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a74:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a78:	f043 0304 	orr.w	r3, r3, #4
 8005a7c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a80:	f015 0f04 	tst.w	r5, #4
 8005a84:	d0bc      	beq.n	8005a00 <UART_RxISR_16BIT_FIFOEN+0x30>
 8005a86:	f018 0f01 	tst.w	r8, #1
 8005a8a:	d0b9      	beq.n	8005a00 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a92:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a96:	f043 0302 	orr.w	r3, r3, #2
 8005a9a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005a9e:	e7af      	b.n	8005a00 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff fc41 	bl	8005328 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005aac:	e7ac      	b.n	8005a08 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	e852 3f00 	ldrex	r3, [r2]
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	e842 3100 	strex	r1, r3, [r2]
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d1f6      	bne.n	8005aae <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ac0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	f102 0308 	add.w	r3, r2, #8
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ace:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	3208      	adds	r2, #8
 8005ad4:	e842 3100 	strex	r1, r3, [r2]
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	d1f1      	bne.n	8005ac0 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8005adc:	2320      	movs	r3, #32
 8005ade:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d003      	beq.n	8005af4 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8005aec:	4620      	mov	r0, r4
 8005aee:	f7fb fc1b 	bl	8001328 <HAL_UART_RxCpltCallback>
 8005af2:	e78e      	b.n	8005a12 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	2300      	movs	r3, #0
 8005af6:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	e852 3f00 	ldrex	r3, [r2]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	e842 3100 	strex	r1, r3, [r2]
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d1f6      	bne.n	8005af8 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	69da      	ldr	r2, [r3, #28]
 8005b0e:	f012 0f10 	tst.w	r2, #16
 8005b12:	d001      	beq.n	8005b18 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b14:	2210      	movs	r2, #16
 8005b16:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b18:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff fc3a 	bl	8005396 <HAL_UARTEx_RxEventCallback>
 8005b22:	e776      	b.n	8005a12 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005b24:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005b28:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f43f af62 	beq.w	80059f4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8005b30:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005b34:	429a      	cmp	r2, r3
 8005b36:	f67f af5d 	bls.w	80059f4 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	f102 0308 	add.w	r3, r2, #8
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	3208      	adds	r2, #8
 8005b4a:	e842 3100 	strex	r1, r3, [r2]
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d1f3      	bne.n	8005b3a <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8005b54:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	e852 3f00 	ldrex	r3, [r2]
 8005b5c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	e842 3100 	strex	r1, r3, [r2]
 8005b64:	2900      	cmp	r1, #0
 8005b66:	d1f6      	bne.n	8005b56 <UART_RxISR_16BIT_FIFOEN+0x186>
 8005b68:	e744      	b.n	80059f4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8005b6a:	bf00      	nop
 8005b6c:	0800577f 	.word	0x0800577f

08005b70 <UART_SetConfig>:
{
 8005b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b74:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b76:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b78:	6883      	ldr	r3, [r0, #8]
 8005b7a:	6902      	ldr	r2, [r0, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	6942      	ldr	r2, [r0, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	69c2      	ldr	r2, [r0, #28]
 8005b84:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b86:	6808      	ldr	r0, [r1, #0]
 8005b88:	4aa1      	ldr	r2, [pc, #644]	; (8005e10 <UART_SetConfig+0x2a0>)
 8005b8a:	4002      	ands	r2, r0
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	6853      	ldr	r3, [r2, #4]
 8005b94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b98:	68e1      	ldr	r1, [r4, #12]
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b9e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	4b9c      	ldr	r3, [pc, #624]	; (8005e14 <UART_SetConfig+0x2a4>)
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d001      	beq.n	8005bac <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8005ba8:	6a23      	ldr	r3, [r4, #32]
 8005baa:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bac:	6893      	ldr	r3, [r2, #8]
 8005bae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bb2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bba:	6822      	ldr	r2, [r4, #0]
 8005bbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005bbe:	f023 030f 	bic.w	r3, r3, #15
 8005bc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	4b93      	ldr	r3, [pc, #588]	; (8005e18 <UART_SetConfig+0x2a8>)
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d01c      	beq.n	8005c0a <UART_SetConfig+0x9a>
 8005bd0:	4b92      	ldr	r3, [pc, #584]	; (8005e1c <UART_SetConfig+0x2ac>)
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d031      	beq.n	8005c3a <UART_SetConfig+0xca>
 8005bd6:	4b8f      	ldr	r3, [pc, #572]	; (8005e14 <UART_SetConfig+0x2a4>)
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d04b      	beq.n	8005c74 <UART_SetConfig+0x104>
 8005bdc:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bde:	498d      	ldr	r1, [pc, #564]	; (8005e14 <UART_SetConfig+0x2a4>)
 8005be0:	428a      	cmp	r2, r1
 8005be2:	d068      	beq.n	8005cb6 <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be4:	69e0      	ldr	r0, [r4, #28]
 8005be6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005bea:	f000 80a7 	beq.w	8005d3c <UART_SetConfig+0x1cc>
    switch (clocksource)
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	f200 8122 	bhi.w	8005e38 <UART_SetConfig+0x2c8>
 8005bf4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005bf8:	00f800d5 	.word	0x00f800d5
 8005bfc:	012000d3 	.word	0x012000d3
 8005c00:	012000fb 	.word	0x012000fb
 8005c04:	01200120 	.word	0x01200120
 8005c08:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8005c1a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d809      	bhi.n	8005c36 <UART_SetConfig+0xc6>
 8005c22:	e8df f003 	tbb	[pc, r3]
 8005c26:	0402      	.short	0x0402
 8005c28:	063c      	.short	0x063c
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e7d7      	b.n	8005bde <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e7d5      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c32:	2308      	movs	r3, #8
 8005c34:	e7d3      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c36:	2310      	movs	r3, #16
 8005c38:	e7d1      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005c4a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005c4e:	2b0c      	cmp	r3, #12
 8005c50:	d80e      	bhi.n	8005c70 <UART_SetConfig+0x100>
 8005c52:	e8df f003 	tbb	[pc, r3]
 8005c56:	0d07      	.short	0x0d07
 8005c58:	0d090d0d 	.word	0x0d090d0d
 8005c5c:	0d260d0d 	.word	0x0d260d0d
 8005c60:	0d0d      	.short	0x0d0d
 8005c62:	0b          	.byte	0x0b
 8005c63:	00          	.byte	0x00
 8005c64:	2300      	movs	r3, #0
 8005c66:	e7ba      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	e7b8      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c6c:	2308      	movs	r3, #8
 8005c6e:	e7b6      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c70:	2310      	movs	r3, #16
 8005c72:	e7b4      	b.n	8005bde <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c84:	d00f      	beq.n	8005ca6 <UART_SetConfig+0x136>
 8005c86:	d805      	bhi.n	8005c94 <UART_SetConfig+0x124>
 8005c88:	b17b      	cbz	r3, 8005caa <UART_SetConfig+0x13a>
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8e:	d10e      	bne.n	8005cae <UART_SetConfig+0x13e>
 8005c90:	2304      	movs	r3, #4
 8005c92:	e7a4      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c98:	d10b      	bne.n	8005cb2 <UART_SetConfig+0x142>
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	e79f      	b.n	8005bde <UART_SetConfig+0x6e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e79d      	b.n	8005bde <UART_SetConfig+0x6e>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e79b      	b.n	8005bde <UART_SetConfig+0x6e>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e799      	b.n	8005bde <UART_SetConfig+0x6e>
 8005caa:	2300      	movs	r3, #0
 8005cac:	e797      	b.n	8005bde <UART_SetConfig+0x6e>
 8005cae:	2310      	movs	r3, #16
 8005cb0:	e795      	b.n	8005bde <UART_SetConfig+0x6e>
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	e793      	b.n	8005bde <UART_SetConfig+0x6e>
    switch (clocksource)
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	f200 809f 	bhi.w	8005dfa <UART_SetConfig+0x28a>
 8005cbc:	e8df f003 	tbb	[pc, r3]
 8005cc0:	9d3c9d08 	.word	0x9d3c9d08
 8005cc4:	9d9d9d39 	.word	0x9d9d9d39
 8005cc8:	05          	.byte	0x05
 8005cc9:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005cce:	e004      	b.n	8005cda <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd0:	f7fe ff22 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f000 8092 	beq.w	8005dfe <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005cdc:	4b50      	ldr	r3, [pc, #320]	; (8005e20 <UART_SetConfig+0x2b0>)
 8005cde:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005ce2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ce6:	6865      	ldr	r5, [r4, #4]
 8005ce8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005cec:	4299      	cmp	r1, r3
 8005cee:	f200 8088 	bhi.w	8005e02 <UART_SetConfig+0x292>
 8005cf2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005cf6:	f200 8086 	bhi.w	8005e06 <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cfa:	f04f 0800 	mov.w	r8, #0
 8005cfe:	b292      	uxth	r2, r2
 8005d00:	2300      	movs	r3, #0
 8005d02:	4641      	mov	r1, r8
 8005d04:	f7fa fbb0 	bl	8000468 <__aeabi_uldivmod>
 8005d08:	020f      	lsls	r7, r1, #8
 8005d0a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005d0e:	0206      	lsls	r6, r0, #8
 8005d10:	0868      	lsrs	r0, r5, #1
 8005d12:	462a      	mov	r2, r5
 8005d14:	4643      	mov	r3, r8
 8005d16:	1830      	adds	r0, r6, r0
 8005d18:	f147 0100 	adc.w	r1, r7, #0
 8005d1c:	f7fa fba4 	bl	8000468 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d20:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005d24:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <UART_SetConfig+0x2b4>)
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d86f      	bhi.n	8005e0a <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	60d8      	str	r0, [r3, #12]
 8005d2e:	4640      	mov	r0, r8
 8005d30:	e050      	b.n	8005dd4 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d32:	f7fe f9e9 	bl	8004108 <HAL_RCC_GetSysClockFreq>
        break;
 8005d36:	e7cd      	b.n	8005cd4 <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 8005d38:	483b      	ldr	r0, [pc, #236]	; (8005e28 <UART_SetConfig+0x2b8>)
 8005d3a:	e7ce      	b.n	8005cda <UART_SetConfig+0x16a>
    switch (clocksource)
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d875      	bhi.n	8005e2c <UART_SetConfig+0x2bc>
 8005d40:	e8df f003 	tbb	[pc, r3]
 8005d44:	74052707 	.word	0x74052707
 8005d48:	7474742a 	.word	0x7474742a
 8005d4c:	0b          	.byte	0x0b
 8005d4d:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4e:	4836      	ldr	r0, [pc, #216]	; (8005e28 <UART_SetConfig+0x2b8>)
 8005d50:	e003      	b.n	8005d5a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d52:	f7fe fee1 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d06a      	beq.n	8005e30 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d5c:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <UART_SetConfig+0x2b0>)
 8005d5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005d62:	fbb0 f0f3 	udiv	r0, r0, r3
 8005d66:	6862      	ldr	r2, [r4, #4]
 8005d68:	0853      	lsrs	r3, r2, #1
 8005d6a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005d6e:	fbb0 f0f2 	udiv	r0, r0, r2
 8005d72:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d74:	f1a0 0210 	sub.w	r2, r0, #16
 8005d78:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d859      	bhi.n	8005e34 <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d80:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d84:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005d88:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	60d8      	str	r0, [r3, #12]
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e020      	b.n	8005dd4 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d92:	f7fe fed1 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
        break;
 8005d96:	e7de      	b.n	8005d56 <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d98:	f7fe f9b6 	bl	8004108 <HAL_RCC_GetSysClockFreq>
        break;
 8005d9c:	e7db      	b.n	8005d56 <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d9e:	4822      	ldr	r0, [pc, #136]	; (8005e28 <UART_SetConfig+0x2b8>)
 8005da0:	e003      	b.n	8005daa <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da2:	f7fe feb9 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d048      	beq.n	8005e3c <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005daa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005dac:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <UART_SetConfig+0x2b0>)
 8005dae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005db2:	fbb0 f0f3 	udiv	r0, r0, r3
 8005db6:	6863      	ldr	r3, [r4, #4]
 8005db8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005dbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005dc0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc2:	f1a0 0210 	sub.w	r2, r0, #16
 8005dc6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d838      	bhi.n	8005e40 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	60d8      	str	r0, [r3, #12]
 8005dd2:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dda:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005de2:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de8:	f7fe fea6 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
        break;
 8005dec:	e7db      	b.n	8005da6 <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8005dee:	f7fe f98b 	bl	8004108 <HAL_RCC_GetSysClockFreq>
        break;
 8005df2:	e7d8      	b.n	8005da6 <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 8005df4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005df8:	e7d7      	b.n	8005daa <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	e7ea      	b.n	8005dd4 <UART_SetConfig+0x264>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e7e8      	b.n	8005dd4 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005e02:	2001      	movs	r0, #1
 8005e04:	e7e6      	b.n	8005dd4 <UART_SetConfig+0x264>
 8005e06:	2001      	movs	r0, #1
 8005e08:	e7e4      	b.n	8005dd4 <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	e7e2      	b.n	8005dd4 <UART_SetConfig+0x264>
 8005e0e:	bf00      	nop
 8005e10:	cfff69f3 	.word	0xcfff69f3
 8005e14:	40008000 	.word	0x40008000
 8005e18:	40013800 	.word	0x40013800
 8005e1c:	40004400 	.word	0x40004400
 8005e20:	08007800 	.word	0x08007800
 8005e24:	000ffcff 	.word	0x000ffcff
 8005e28:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	e7d1      	b.n	8005dd4 <UART_SetConfig+0x264>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e7cf      	b.n	8005dd4 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005e34:	2001      	movs	r0, #1
 8005e36:	e7cd      	b.n	8005dd4 <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e38:	2001      	movs	r0, #1
 8005e3a:	e7cb      	b.n	8005dd4 <UART_SetConfig+0x264>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e7c9      	b.n	8005dd4 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005e40:	2001      	movs	r0, #1
 8005e42:	e7c7      	b.n	8005dd4 <UART_SetConfig+0x264>

08005e44 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e46:	f013 0f01 	tst.w	r3, #1
 8005e4a:	d006      	beq.n	8005e5a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e4c:	6802      	ldr	r2, [r0, #0]
 8005e4e:	6853      	ldr	r3, [r2, #4]
 8005e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e54:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005e56:	430b      	orrs	r3, r1
 8005e58:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e5c:	f013 0f02 	tst.w	r3, #2
 8005e60:	d006      	beq.n	8005e70 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e62:	6802      	ldr	r2, [r0, #0]
 8005e64:	6853      	ldr	r3, [r2, #4]
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e72:	f013 0f04 	tst.w	r3, #4
 8005e76:	d006      	beq.n	8005e86 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e78:	6802      	ldr	r2, [r0, #0]
 8005e7a:	6853      	ldr	r3, [r2, #4]
 8005e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e80:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005e82:	430b      	orrs	r3, r1
 8005e84:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e88:	f013 0f08 	tst.w	r3, #8
 8005e8c:	d006      	beq.n	8005e9c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e8e:	6802      	ldr	r2, [r0, #0]
 8005e90:	6853      	ldr	r3, [r2, #4]
 8005e92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e96:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e9e:	f013 0f10 	tst.w	r3, #16
 8005ea2:	d006      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea4:	6802      	ldr	r2, [r0, #0]
 8005ea6:	6893      	ldr	r3, [r2, #8]
 8005ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eac:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005eb4:	f013 0f20 	tst.w	r3, #32
 8005eb8:	d006      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eba:	6802      	ldr	r2, [r0, #0]
 8005ebc:	6893      	ldr	r3, [r2, #8]
 8005ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ec2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005eca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ece:	d00a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed0:	6802      	ldr	r2, [r0, #0]
 8005ed2:	6853      	ldr	r3, [r2, #4]
 8005ed4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ed8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ede:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee4:	d00b      	beq.n	8005efe <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ee8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005eec:	d006      	beq.n	8005efc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eee:	6802      	ldr	r2, [r0, #0]
 8005ef0:	6853      	ldr	r3, [r2, #4]
 8005ef2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ef6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6053      	str	r3, [r2, #4]
}
 8005efc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005efe:	6802      	ldr	r2, [r0, #0]
 8005f00:	6853      	ldr	r3, [r2, #4]
 8005f02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f06:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	6053      	str	r3, [r2, #4]
 8005f0c:	e7eb      	b.n	8005ee6 <UART_AdvFeatureConfig+0xa2>

08005f0e <UART_WaitOnFlagUntilTimeout>:
{
 8005f0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f12:	4605      	mov	r5, r0
 8005f14:	460f      	mov	r7, r1
 8005f16:	4616      	mov	r6, r2
 8005f18:	4699      	mov	r9, r3
 8005f1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1e:	682c      	ldr	r4, [r5, #0]
 8005f20:	69e4      	ldr	r4, [r4, #28]
 8005f22:	ea37 0304 	bics.w	r3, r7, r4
 8005f26:	bf0c      	ite	eq
 8005f28:	2401      	moveq	r4, #1
 8005f2a:	2400      	movne	r4, #0
 8005f2c:	42b4      	cmp	r4, r6
 8005f2e:	d157      	bne.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8005f30:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f34:	d0f3      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fa ffbd 	bl	8000eb4 <HAL_GetTick>
 8005f3a:	eba0 0009 	sub.w	r0, r0, r9
 8005f3e:	4540      	cmp	r0, r8
 8005f40:	d82f      	bhi.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x94>
 8005f42:	f1b8 0f00 	cmp.w	r8, #0
 8005f46:	d02c      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	f012 0f04 	tst.w	r2, #4
 8005f50:	d0e5      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005f58:	d0e1      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f60:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	e852 3f00 	ldrex	r3, [r2]
 8005f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	e842 3100 	strex	r1, r3, [r2]
 8005f6e:	2900      	cmp	r1, #0
 8005f70:	d1f6      	bne.n	8005f60 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	f102 0308 	add.w	r3, r2, #8
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	3208      	adds	r2, #8
 8005f82:	e842 3100 	strex	r1, r3, [r2]
 8005f86:	2900      	cmp	r1, #0
 8005f88:	d1f3      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005f8a:	2320      	movs	r3, #32
 8005f8c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f90:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f94:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005f9e:	2003      	movs	r0, #3
 8005fa0:	e01f      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fa2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	e852 3f00 	ldrex	r3, [r2]
 8005fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	e842 3100 	strex	r1, r3, [r2]
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	d1f6      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	f102 0308 	add.w	r3, r2, #8
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	3208      	adds	r2, #8
 8005fc4:	e842 3100 	strex	r1, r3, [r2]
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	d1f3      	bne.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005fcc:	2320      	movs	r3, #32
 8005fce:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005fdc:	2003      	movs	r0, #3
 8005fde:	e000      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005fe0:	2000      	movs	r0, #0
}
 8005fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005fe6 <UART_CheckIdleState>:
{
 8005fe6:	b530      	push	{r4, r5, lr}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005ff2:	f7fa ff5f 	bl	8000eb4 <HAL_GetTick>
 8005ff6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f013 0f08 	tst.w	r3, #8
 8006000:	d10f      	bne.n	8006022 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f013 0f04 	tst.w	r3, #4
 800600a:	d118      	bne.n	800603e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800600c:	2320      	movs	r3, #32
 800600e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006012:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	2000      	movs	r0, #0
 8006018:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800601a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800601e:	b003      	add	sp, #12
 8006020:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006022:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4603      	mov	r3, r0
 800602a:	2200      	movs	r2, #0
 800602c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff ff6c 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8006036:	2800      	cmp	r0, #0
 8006038:	d0e3      	beq.n	8006002 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800603a:	2003      	movs	r0, #3
 800603c:	e7ef      	b.n	800601e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800603e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	462b      	mov	r3, r5
 8006046:	2200      	movs	r2, #0
 8006048:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff ff5e 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8006052:	2800      	cmp	r0, #0
 8006054:	d0da      	beq.n	800600c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006056:	2003      	movs	r0, #3
 8006058:	e7e1      	b.n	800601e <UART_CheckIdleState+0x38>

0800605a <HAL_UART_Init>:
  if (huart == NULL)
 800605a:	b378      	cbz	r0, 80060bc <HAL_UART_Init+0x62>
{
 800605c:	b510      	push	{r4, lr}
 800605e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006060:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006064:	b30b      	cbz	r3, 80060aa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006066:	2324      	movs	r3, #36	; 0x24
 8006068:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800606c:	6822      	ldr	r2, [r4, #0]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006076:	4620      	mov	r0, r4
 8006078:	f7ff fd7a 	bl	8005b70 <UART_SetConfig>
 800607c:	2801      	cmp	r0, #1
 800607e:	d013      	beq.n	80060a8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006082:	b9bb      	cbnz	r3, 80060b4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	6853      	ldr	r3, [r2, #4]
 8006088:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800608c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	6893      	ldr	r3, [r2, #8]
 8006092:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006096:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff ff9f 	bl	8005fe6 <UART_CheckIdleState>
}
 80060a8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80060aa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80060ae:	f7fb f82f 	bl	8001110 <HAL_UART_MspInit>
 80060b2:	e7d8      	b.n	8006066 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff fec5 	bl	8005e44 <UART_AdvFeatureConfig>
 80060ba:	e7e3      	b.n	8006084 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80060bc:	2001      	movs	r0, #1
}
 80060be:	4770      	bx	lr

080060c0 <UART_Start_Receive_IT>:
{
 80060c0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80060c2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80060c4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80060c8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80060d0:	6883      	ldr	r3, [r0, #8]
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d6:	d006      	beq.n	80060e6 <UART_Start_Receive_IT+0x26>
 80060d8:	b9a3      	cbnz	r3, 8006104 <UART_Start_Receive_IT+0x44>
 80060da:	6903      	ldr	r3, [r0, #16]
 80060dc:	b973      	cbnz	r3, 80060fc <UART_Start_Receive_IT+0x3c>
 80060de:	23ff      	movs	r3, #255	; 0xff
 80060e0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060e4:	e014      	b.n	8006110 <UART_Start_Receive_IT+0x50>
 80060e6:	6903      	ldr	r3, [r0, #16]
 80060e8:	b923      	cbnz	r3, 80060f4 <UART_Start_Receive_IT+0x34>
 80060ea:	f240 13ff 	movw	r3, #511	; 0x1ff
 80060ee:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060f2:	e00d      	b.n	8006110 <UART_Start_Receive_IT+0x50>
 80060f4:	23ff      	movs	r3, #255	; 0xff
 80060f6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060fa:	e009      	b.n	8006110 <UART_Start_Receive_IT+0x50>
 80060fc:	237f      	movs	r3, #127	; 0x7f
 80060fe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006102:	e005      	b.n	8006110 <UART_Start_Receive_IT+0x50>
 8006104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006108:	d02d      	beq.n	8006166 <UART_Start_Receive_IT+0xa6>
 800610a:	2300      	movs	r3, #0
 800610c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	2300      	movs	r3, #0
 8006112:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006116:	2322      	movs	r3, #34	; 0x22
 8006118:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	f101 0308 	add.w	r3, r1, #8
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	3108      	adds	r1, #8
 800612c:	e841 3400 	strex	r4, r3, [r1]
 8006130:	2c00      	cmp	r4, #0
 8006132:	d1f3      	bne.n	800611c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006134:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613a:	d01e      	beq.n	800617a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800613c:	6883      	ldr	r3, [r0, #8]
 800613e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006142:	d043      	beq.n	80061cc <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8006144:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <UART_Start_Receive_IT+0x118>)
 8006146:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006148:	2300      	movs	r3, #0
 800614a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800614e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	e852 3f00 	ldrex	r3, [r2]
 8006154:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	e842 3100 	strex	r1, r3, [r2]
 800615c:	2900      	cmp	r1, #0
 800615e:	d1f6      	bne.n	800614e <UART_Start_Receive_IT+0x8e>
}
 8006160:	2000      	movs	r0, #0
 8006162:	bc10      	pop	{r4}
 8006164:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006166:	6903      	ldr	r3, [r0, #16]
 8006168:	b91b      	cbnz	r3, 8006172 <UART_Start_Receive_IT+0xb2>
 800616a:	237f      	movs	r3, #127	; 0x7f
 800616c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006170:	e7ce      	b.n	8006110 <UART_Start_Receive_IT+0x50>
 8006172:	233f      	movs	r3, #63	; 0x3f
 8006174:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006178:	e7ca      	b.n	8006110 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800617a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800617e:	4293      	cmp	r3, r2
 8006180:	d8dc      	bhi.n	800613c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006182:	6883      	ldr	r3, [r0, #8]
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006188:	d01a      	beq.n	80061c0 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <UART_Start_Receive_IT+0x11c>)
 800618c:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800618e:	2300      	movs	r3, #0
 8006190:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006194:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	e852 3f00 	ldrex	r3, [r2]
 800619a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	e842 3100 	strex	r1, r3, [r2]
 80061a2:	2900      	cmp	r1, #0
 80061a4:	d1f6      	bne.n	8006194 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	f102 0308 	add.w	r3, r2, #8
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	3208      	adds	r2, #8
 80061b6:	e842 3100 	strex	r1, r3, [r2]
 80061ba:	2900      	cmp	r1, #0
 80061bc:	d1f3      	bne.n	80061a6 <UART_Start_Receive_IT+0xe6>
 80061be:	e7cf      	b.n	8006160 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c0:	6903      	ldr	r3, [r0, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e1      	bne.n	800618a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <UART_Start_Receive_IT+0x120>)
 80061c8:	6703      	str	r3, [r0, #112]	; 0x70
 80061ca:	e7e0      	b.n	800618e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061cc:	6903      	ldr	r3, [r0, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1b8      	bne.n	8006144 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80061d2:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <UART_Start_Receive_IT+0x124>)
 80061d4:	6703      	str	r3, [r0, #112]	; 0x70
 80061d6:	e7b7      	b.n	8006148 <UART_Start_Receive_IT+0x88>
 80061d8:	080056cd 	.word	0x080056cd
 80061dc:	08005831 	.word	0x08005831
 80061e0:	080059d1 	.word	0x080059d1
 80061e4:	0800577f 	.word	0x0800577f

080061e8 <HAL_UART_Receive_IT>:
{
 80061e8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d11e      	bne.n	8006230 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80061f2:	b1f9      	cbz	r1, 8006234 <HAL_UART_Receive_IT+0x4c>
 80061f4:	b302      	cbz	r2, 8006238 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 80061f6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d01e      	beq.n	800623c <HAL_UART_Receive_IT+0x54>
 80061fe:	2301      	movs	r3, #1
 8006200:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006204:	2300      	movs	r3, #0
 8006206:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006208:	6803      	ldr	r3, [r0, #0]
 800620a:	4c0d      	ldr	r4, [pc, #52]	; (8006240 <HAL_UART_Receive_IT+0x58>)
 800620c:	42a3      	cmp	r3, r4
 800620e:	d00c      	beq.n	800622a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006216:	d008      	beq.n	800622a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006218:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	e854 3f00 	ldrex	r3, [r4]
 800621e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	e844 3500 	strex	r5, r3, [r4]
 8006226:	2d00      	cmp	r5, #0
 8006228:	d1f6      	bne.n	8006218 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 800622a:	f7ff ff49 	bl	80060c0 <UART_Start_Receive_IT>
 800622e:	e000      	b.n	8006232 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006230:	2002      	movs	r0, #2
}
 8006232:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006234:	2001      	movs	r0, #1
 8006236:	e7fc      	b.n	8006232 <HAL_UART_Receive_IT+0x4a>
 8006238:	2001      	movs	r0, #1
 800623a:	e7fa      	b.n	8006232 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 800623c:	2002      	movs	r0, #2
 800623e:	e7f8      	b.n	8006232 <HAL_UART_Receive_IT+0x4a>
 8006240:	40008000 	.word	0x40008000

08006244 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006244:	b082      	sub	sp, #8
 8006246:	ab02      	add	r3, sp, #8
 8006248:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800624c:	6802      	ldr	r2, [r0, #0]
 800624e:	6853      	ldr	r3, [r2, #4]
 8006250:	f023 0310 	bic.w	r3, r3, #16
 8006254:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006258:	430b      	orrs	r3, r1
 800625a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800625c:	6802      	ldr	r2, [r0, #0]
 800625e:	6853      	ldr	r3, [r2, #4]
 8006260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006268:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800626c:	6053      	str	r3, [r2, #4]
}
 800626e:	b002      	add	sp, #8
 8006270:	4770      	bx	lr
	...

08006274 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006274:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006276:	b92b      	cbnz	r3, 8006284 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006278:	2301      	movs	r3, #1
 800627a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800627e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006282:	4770      	bx	lr
{
 8006284:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006286:	6803      	ldr	r3, [r0, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800628e:	6899      	ldr	r1, [r3, #8]
 8006290:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006292:	4d09      	ldr	r5, [pc, #36]	; (80062b8 <UARTEx_SetNbDataToProcess+0x44>)
 8006294:	5c6b      	ldrb	r3, [r5, r1]
 8006296:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006298:	4c08      	ldr	r4, [pc, #32]	; (80062bc <UARTEx_SetNbDataToProcess+0x48>)
 800629a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800629c:	fb93 f3f1 	sdiv	r3, r3, r1
 80062a0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062a4:	5cab      	ldrb	r3, [r5, r2]
 80062a6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062a8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ae:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80062b2:	bc30      	pop	{r4, r5}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	08007820 	.word	0x08007820
 80062bc:	08007818 	.word	0x08007818

080062c0 <HAL_UARTEx_WakeupCallback>:
}
 80062c0:	4770      	bx	lr

080062c2 <HAL_UARTEx_RxFifoFullCallback>:
}
 80062c2:	4770      	bx	lr

080062c4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80062c4:	4770      	bx	lr

080062c6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80062c6:	b510      	push	{r4, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	ab04      	add	r3, sp, #16
 80062cc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80062d0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d035      	beq.n	8006344 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80062d8:	4604      	mov	r4, r0
 80062da:	2301      	movs	r3, #1
 80062dc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	2324      	movs	r3, #36	; 0x24
 80062e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80062e6:	6802      	ldr	r2, [r0, #0]
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	f023 0301 	bic.w	r3, r3, #1
 80062ee:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80062f0:	6801      	ldr	r1, [r0, #0]
 80062f2:	688b      	ldr	r3, [r1, #8]
 80062f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80062f8:	9a02      	ldr	r2, [sp, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80062fe:	b1aa      	cbz	r2, 800632c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006300:	6822      	ldr	r2, [r4, #0]
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800630a:	f7fa fdd3 	bl	8000eb4 <HAL_GetTick>
 800630e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006310:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006314:	9200      	str	r2, [sp, #0]
 8006316:	2200      	movs	r2, #0
 8006318:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800631c:	4620      	mov	r0, r4
 800631e:	f7ff fdf6 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8006322:	b948      	cbnz	r0, 8006338 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006324:	2320      	movs	r3, #32
 8006326:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800632a:	e006      	b.n	800633a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800632c:	ab04      	add	r3, sp, #16
 800632e:	e913 0006 	ldmdb	r3, {r1, r2}
 8006332:	f7ff ff87 	bl	8006244 <UARTEx_Wakeup_AddressConfig>
 8006336:	e7e3      	b.n	8006300 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006338:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800633a:	2300      	movs	r3, #0
 800633c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006340:	b004      	add	sp, #16
 8006342:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006344:	2002      	movs	r0, #2
 8006346:	e7fb      	b.n	8006340 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006348 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006348:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800634c:	2b01      	cmp	r3, #1
 800634e:	d010      	beq.n	8006372 <HAL_UARTEx_EnableStopMode+0x2a>
 8006350:	2301      	movs	r3, #1
 8006352:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006356:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	e852 3f00 	ldrex	r3, [r2]
 800635c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	e842 3100 	strex	r1, r3, [r2]
 8006364:	2900      	cmp	r1, #0
 8006366:	d1f6      	bne.n	8006356 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006368:	2300      	movs	r3, #0
 800636a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800636e:	4618      	mov	r0, r3
 8006370:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006372:	2002      	movs	r0, #2
}
 8006374:	4770      	bx	lr

08006376 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006376:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800637a:	2b01      	cmp	r3, #1
 800637c:	d01d      	beq.n	80063ba <HAL_UARTEx_EnableFifoMode+0x44>
{
 800637e:	b510      	push	{r4, lr}
 8006380:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006382:	2301      	movs	r3, #1
 8006384:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006388:	2324      	movs	r3, #36	; 0x24
 800638a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800638e:	6802      	ldr	r2, [r0, #0]
 8006390:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006392:	6811      	ldr	r1, [r2, #0]
 8006394:	f021 0101 	bic.w	r1, r1, #1
 8006398:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800639a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800639e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80063a2:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a4:	6802      	ldr	r2, [r0, #0]
 80063a6:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 80063a8:	f7ff ff64 	bl	8006274 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80063ac:	2320      	movs	r3, #32
 80063ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80063b2:	2000      	movs	r0, #0
 80063b4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80063b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80063ba:	2002      	movs	r0, #2
}
 80063bc:	4770      	bx	lr

080063be <HAL_UARTEx_SetTxFifoThreshold>:
{
 80063be:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80063c0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d01d      	beq.n	8006404 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80063c8:	4604      	mov	r4, r0
 80063ca:	2301      	movs	r3, #1
 80063cc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	2324      	movs	r3, #36	; 0x24
 80063d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d6:	6803      	ldr	r3, [r0, #0]
 80063d8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063e2:	6802      	ldr	r2, [r0, #0]
 80063e4:	6893      	ldr	r3, [r2, #8]
 80063e6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80063ea:	4319      	orrs	r1, r3
 80063ec:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80063ee:	f7ff ff41 	bl	8006274 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80063f6:	2320      	movs	r3, #32
 80063f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80063fc:	2000      	movs	r0, #0
 80063fe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006402:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006404:	2002      	movs	r0, #2
 8006406:	e7fc      	b.n	8006402 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006408 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006408:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800640a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800640e:	2b01      	cmp	r3, #1
 8006410:	d01d      	beq.n	800644e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006412:	4604      	mov	r4, r0
 8006414:	2301      	movs	r3, #1
 8006416:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800641a:	2324      	movs	r3, #36	; 0x24
 800641c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006420:	6803      	ldr	r3, [r0, #0]
 8006422:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800642c:	6802      	ldr	r2, [r0, #0]
 800642e:	6893      	ldr	r3, [r2, #8]
 8006430:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006434:	4319      	orrs	r1, r3
 8006436:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006438:	f7ff ff1c 	bl	8006274 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006440:	2320      	movs	r3, #32
 8006442:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006446:	2000      	movs	r0, #0
 8006448:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800644c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800644e:	2002      	movs	r0, #2
 8006450:	e7fc      	b.n	800644c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006454 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8006454:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006456:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800645a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800645c:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <TRACE_AllocateBufer+0x78>)
 800645e:	8a5c      	ldrh	r4, [r3, #18]
 8006460:	8a1a      	ldrh	r2, [r3, #16]
 8006462:	4294      	cmp	r4, r2
 8006464:	d010      	beq.n	8006488 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006466:	4294      	cmp	r4, r2
 8006468:	d91d      	bls.n	80064a6 <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800646a:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 800646e:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8006470:	4283      	cmp	r3, r0
 8006472:	d81a      	bhi.n	80064aa <TRACE_AllocateBufer+0x56>
 8006474:	4282      	cmp	r2, r0
 8006476:	d918      	bls.n	80064aa <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8006478:	4b14      	ldr	r3, [pc, #80]	; (80064cc <TRACE_AllocateBufer+0x78>)
 800647a:	2601      	movs	r6, #1
 800647c:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800647e:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8006480:	2400      	movs	r4, #0
 8006482:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8006484:	4613      	mov	r3, r2
 8006486:	e010      	b.n	80064aa <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8006488:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 800648c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800648e:	4298      	cmp	r0, r3
 8006490:	d30b      	bcc.n	80064aa <TRACE_AllocateBufer+0x56>
 8006492:	4282      	cmp	r2, r0
 8006494:	d909      	bls.n	80064aa <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <TRACE_AllocateBufer+0x78>)
 8006498:	2601      	movs	r6, #1
 800649a:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800649c:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800649e:	2400      	movs	r4, #0
 80064a0:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80064a2:	4613      	mov	r3, r2
 80064a4:	e001      	b.n	80064aa <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80064a6:	1b13      	subs	r3, r2, r4
 80064a8:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80064aa:	4283      	cmp	r3, r0
 80064ac:	d90b      	bls.n	80064c6 <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80064ae:	4a07      	ldr	r2, [pc, #28]	; (80064cc <TRACE_AllocateBufer+0x78>)
 80064b0:	8a53      	ldrh	r3, [r2, #18]
 80064b2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80064b4:	4403      	add	r3, r0
 80064b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ba:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80064bc:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80064c2:	bc70      	pop	{r4, r5, r6}
 80064c4:	4770      	bx	lr
  int16_t ret = -1;
 80064c6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ca:	e7f8      	b.n	80064be <TRACE_AllocateBufer+0x6a>
 80064cc:	2000069c 	.word	0x2000069c

080064d0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80064d4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80064d6:	4a03      	ldr	r2, [pc, #12]	; (80064e4 <TRACE_Lock+0x14>)
 80064d8:	8ad3      	ldrh	r3, [r2, #22]
 80064da:	3301      	adds	r3, #1
 80064dc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064de:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80064e2:	4770      	bx	lr
 80064e4:	2000069c 	.word	0x2000069c

080064e8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80064ec:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80064ee:	4a03      	ldr	r2, [pc, #12]	; (80064fc <TRACE_UnLock+0x14>)
 80064f0:	8ad3      	ldrh	r3, [r2, #22]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80064fa:	4770      	bx	lr
 80064fc:	2000069c 	.word	0x2000069c

08006500 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <TRACE_IsLocked+0xc>)
 8006502:	8ad8      	ldrh	r0, [r3, #22]
}
 8006504:	3800      	subs	r0, #0
 8006506:	bf18      	it	ne
 8006508:	2001      	movne	r0, #1
 800650a:	4770      	bx	lr
 800650c:	2000069c 	.word	0x2000069c

08006510 <UTIL_ADV_TRACE_Init>:
{
 8006510:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8006512:	2218      	movs	r2, #24
 8006514:	2100      	movs	r1, #0
 8006516:	4807      	ldr	r0, [pc, #28]	; (8006534 <UTIL_ADV_TRACE_Init+0x24>)
 8006518:	f000 f9c2 	bl	80068a0 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800651c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006520:	2100      	movs	r1, #0
 8006522:	4805      	ldr	r0, [pc, #20]	; (8006538 <UTIL_ADV_TRACE_Init+0x28>)
 8006524:	f000 f9bc 	bl	80068a0 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <UTIL_ADV_TRACE_Init+0x2c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4804      	ldr	r0, [pc, #16]	; (8006540 <UTIL_ADV_TRACE_Init+0x30>)
 800652e:	4798      	blx	r3
}
 8006530:	bd08      	pop	{r3, pc}
 8006532:	bf00      	nop
 8006534:	2000069c 	.word	0x2000069c
 8006538:	2000029c 	.word	0x2000029c
 800653c:	08007318 	.word	0x08007318
 8006540:	0800672d 	.word	0x0800672d

08006544 <UTIL_ADV_TRACE_IsBufferEmpty>:
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8006544:	4b04      	ldr	r3, [pc, #16]	; (8006558 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>)
 8006546:	8a5a      	ldrh	r2, [r3, #18]
 8006548:	8a1b      	ldrh	r3, [r3, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d001      	beq.n	8006552 <UTIL_ADV_TRACE_IsBufferEmpty+0xe>
  return 0;
 800654e:	2000      	movs	r0, #0
 8006550:	4770      	bx	lr
    return 1;
 8006552:	2001      	movs	r0, #1
}
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	2000069c 	.word	0x2000069c

0800655c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800655c:	4b01      	ldr	r3, [pc, #4]	; (8006564 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800655e:	6058      	str	r0, [r3, #4]
}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	2000069c 	.word	0x2000069c

08006568 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8006568:	4b01      	ldr	r3, [pc, #4]	; (8006570 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800656a:	7218      	strb	r0, [r3, #8]
}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	2000069c 	.word	0x2000069c

08006574 <TRACE_Send>:
{
 8006574:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006576:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800657a:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 800657c:	f7ff ffc0 	bl	8006500 <TRACE_IsLocked>
 8006580:	b118      	cbz	r0, 800658a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006582:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8006586:	2000      	movs	r0, #0
}
 8006588:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 800658a:	f7ff ffa1 	bl	80064d0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800658e:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <TRACE_Send+0x90>)
 8006590:	8a1a      	ldrh	r2, [r3, #16]
 8006592:	8a5b      	ldrh	r3, [r3, #18]
 8006594:	429a      	cmp	r2, r3
 8006596:	d02e      	beq.n	80065f6 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8006598:	491a      	ldr	r1, [pc, #104]	; (8006604 <TRACE_Send+0x90>)
 800659a:	7889      	ldrb	r1, [r1, #2]
 800659c:	2901      	cmp	r1, #1
 800659e:	d017      	beq.n	80065d0 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80065a0:	4a18      	ldr	r2, [pc, #96]	; (8006604 <TRACE_Send+0x90>)
 80065a2:	7892      	ldrb	r2, [r2, #2]
 80065a4:	b932      	cbnz	r2, 80065b4 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <TRACE_Send+0x90>)
 80065a8:	8a12      	ldrh	r2, [r2, #16]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d91e      	bls.n	80065ec <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80065ae:	1a9b      	subs	r3, r3, r2
 80065b0:	4a14      	ldr	r2, [pc, #80]	; (8006604 <TRACE_Send+0x90>)
 80065b2:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80065b4:	4e13      	ldr	r6, [pc, #76]	; (8006604 <TRACE_Send+0x90>)
 80065b6:	8a33      	ldrh	r3, [r6, #16]
 80065b8:	4d13      	ldr	r5, [pc, #76]	; (8006608 <TRACE_Send+0x94>)
 80065ba:	441d      	add	r5, r3
 80065bc:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80065c0:	f7fa fc6a 	bl	8000e98 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <TRACE_Send+0x98>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	8ab1      	ldrh	r1, [r6, #20]
 80065ca:	4628      	mov	r0, r5
 80065cc:	4798      	blx	r3
 80065ce:	e7db      	b.n	8006588 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80065d0:	480c      	ldr	r0, [pc, #48]	; (8006604 <TRACE_Send+0x90>)
 80065d2:	8801      	ldrh	r1, [r0, #0]
 80065d4:	1a8a      	subs	r2, r1, r2
 80065d6:	b292      	uxth	r2, r2
 80065d8:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80065da:	2102      	movs	r1, #2
 80065dc:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80065de:	2100      	movs	r1, #0
 80065e0:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	d1dc      	bne.n	80065a0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80065e6:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80065e8:	8201      	strh	r1, [r0, #16]
 80065ea:	e7d9      	b.n	80065a0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80065ec:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80065f0:	4a04      	ldr	r2, [pc, #16]	; (8006604 <TRACE_Send+0x90>)
 80065f2:	8293      	strh	r3, [r2, #20]
 80065f4:	e7de      	b.n	80065b4 <TRACE_Send+0x40>
      TRACE_UnLock();
 80065f6:	f7ff ff77 	bl	80064e8 <TRACE_UnLock>
 80065fa:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80065fe:	2000      	movs	r0, #0
}
 8006600:	e7c2      	b.n	8006588 <TRACE_Send+0x14>
 8006602:	bf00      	nop
 8006604:	2000069c 	.word	0x2000069c
 8006608:	2000029c 	.word	0x2000029c
 800660c:	08007318 	.word	0x08007318

08006610 <UTIL_ADV_TRACE_COND_FSend>:
{
 8006610:	b408      	push	{r3}
 8006612:	b530      	push	{r4, r5, lr}
 8006614:	b086      	sub	sp, #24
 8006616:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8006618:	2300      	movs	r3, #0
 800661a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800661e:	4b2b      	ldr	r3, [pc, #172]	; (80066cc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8006620:	7a1b      	ldrb	r3, [r3, #8]
 8006622:	4283      	cmp	r3, r0
 8006624:	d34c      	bcc.n	80066c0 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8006626:	4b29      	ldr	r3, [pc, #164]	; (80066cc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	ea31 0303 	bics.w	r3, r1, r3
 800662e:	d14a      	bne.n	80066c6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8006630:	4b26      	ldr	r3, [pc, #152]	; (80066cc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	b123      	cbz	r3, 8006640 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8006636:	b11a      	cbz	r2, 8006640 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8006638:	f10d 0102 	add.w	r1, sp, #2
 800663c:	a801      	add	r0, sp, #4
 800663e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8006640:	ab0a      	add	r3, sp, #40	; 0x28
 8006642:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006644:	4622      	mov	r2, r4
 8006646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800664a:	4821      	ldr	r0, [pc, #132]	; (80066d0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800664c:	f000 fc5e 	bl	8006f0c <tiny_vsnprintf_like>
 8006650:	b285      	uxth	r5, r0
  TRACE_Lock();
 8006652:	f7ff ff3d 	bl	80064d0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8006656:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800665a:	4428      	add	r0, r5
 800665c:	4669      	mov	r1, sp
 800665e:	b280      	uxth	r0, r0
 8006660:	f7ff fef8 	bl	8006454 <TRACE_AllocateBufer>
 8006664:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006668:	d025      	beq.n	80066b6 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 800666a:	2300      	movs	r3, #0
 800666c:	e00c      	b.n	8006688 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800666e:	f8bd 2000 	ldrh.w	r2, [sp]
 8006672:	a906      	add	r1, sp, #24
 8006674:	4419      	add	r1, r3
 8006676:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 800667a:	4916      	ldr	r1, [pc, #88]	; (80066d4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800667c:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 800667e:	3201      	adds	r2, #1
 8006680:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8006684:	3301      	adds	r3, #1
 8006686:	b29b      	uxth	r3, r3
 8006688:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800668c:	429a      	cmp	r2, r3
 800668e:	d8ee      	bhi.n	800666e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006690:	f8bd 0000 	ldrh.w	r0, [sp]
 8006694:	9b05      	ldr	r3, [sp, #20]
 8006696:	4622      	mov	r2, r4
 8006698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800669c:	4c0d      	ldr	r4, [pc, #52]	; (80066d4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800669e:	4420      	add	r0, r4
 80066a0:	f000 fc34 	bl	8006f0c <tiny_vsnprintf_like>
    TRACE_UnLock();
 80066a4:	f7ff ff20 	bl	80064e8 <TRACE_UnLock>
    return TRACE_Send();
 80066a8:	f7ff ff64 	bl	8006574 <TRACE_Send>
}
 80066ac:	b006      	add	sp, #24
 80066ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066b2:	b001      	add	sp, #4
 80066b4:	4770      	bx	lr
  TRACE_UnLock();
 80066b6:	f7ff ff17 	bl	80064e8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80066ba:	f06f 0002 	mvn.w	r0, #2
 80066be:	e7f5      	b.n	80066ac <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80066c0:	f06f 0004 	mvn.w	r0, #4
 80066c4:	e7f2      	b.n	80066ac <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80066c6:	f06f 0005 	mvn.w	r0, #5
 80066ca:	e7ef      	b.n	80066ac <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80066cc:	2000069c 	.word	0x2000069c
 80066d0:	200006b4 	.word	0x200006b4
 80066d4:	2000029c 	.word	0x2000029c

080066d8 <UTIL_ADV_TRACE_Send>:
{
 80066d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066da:	b083      	sub	sp, #12
 80066dc:	4607      	mov	r7, r0
 80066de:	460e      	mov	r6, r1
  TRACE_Lock();
 80066e0:	f7ff fef6 	bl	80064d0 <TRACE_Lock>
  if (TRACE_AllocateBufer(Length,&writepos) != -1)
 80066e4:	f10d 0106 	add.w	r1, sp, #6
 80066e8:	4630      	mov	r0, r6
 80066ea:	f7ff feb3 	bl	8006454 <TRACE_AllocateBufer>
 80066ee:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066f2:	d014      	beq.n	800671e <UTIL_ADV_TRACE_Send+0x46>
    for (idx = 0u; idx < Length; idx++)
 80066f4:	2200      	movs	r2, #0
 80066f6:	4296      	cmp	r6, r2
 80066f8:	d90b      	bls.n	8006712 <UTIL_ADV_TRACE_Send+0x3a>
      ADV_TRACE_Buffer[writepos] = pData[idx];
 80066fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80066fe:	5cbd      	ldrb	r5, [r7, r2]
 8006700:	4c09      	ldr	r4, [pc, #36]	; (8006728 <UTIL_ADV_TRACE_Send+0x50>)
 8006702:	54e5      	strb	r5, [r4, r3]
      writepos = (uint16_t) ((writepos + 1u) % UTIL_ADV_TRACE_FIFO_SIZE);
 8006704:	3301      	adds	r3, #1
 8006706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670a:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (idx = 0u; idx < Length; idx++)
 800670e:	3201      	adds	r2, #1
 8006710:	e7f1      	b.n	80066f6 <UTIL_ADV_TRACE_Send+0x1e>
    TRACE_UnLock();
 8006712:	f7ff fee9 	bl	80064e8 <TRACE_UnLock>
    ret = TRACE_Send();
 8006716:	f7ff ff2d 	bl	8006574 <TRACE_Send>
}
 800671a:	b003      	add	sp, #12
 800671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TRACE_UnLock();
 800671e:	f7ff fee3 	bl	80064e8 <TRACE_UnLock>
    ret = UTIL_ADV_TRACE_MEM_FULL;
 8006722:	f06f 0002 	mvn.w	r0, #2
 8006726:	e7f8      	b.n	800671a <UTIL_ADV_TRACE_Send+0x42>
 8006728:	2000029c 	.word	0x2000029c

0800672c <TRACE_TxCpltCallback>:
{
 800672c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800672e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006732:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8006734:	4b25      	ldr	r3, [pc, #148]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 8006736:	789b      	ldrb	r3, [r3, #2]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d016      	beq.n	800676a <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800673c:	4a23      	ldr	r2, [pc, #140]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 800673e:	8a13      	ldrh	r3, [r2, #16]
 8006740:	8a90      	ldrh	r0, [r2, #20]
 8006742:	4403      	add	r3, r0
 8006744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006748:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800674a:	4b20      	ldr	r3, [pc, #128]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 800674c:	8a1a      	ldrh	r2, [r3, #16]
 800674e:	8a5b      	ldrh	r3, [r3, #18]
 8006750:	429a      	cmp	r2, r3
 8006752:	d003      	beq.n	800675c <TRACE_TxCpltCallback+0x30>
 8006754:	481d      	ldr	r0, [pc, #116]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 8006756:	8ac0      	ldrh	r0, [r0, #22]
 8006758:	2801      	cmp	r0, #1
 800675a:	d00b      	beq.n	8006774 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675c:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8006760:	f7fa fba0 	bl	8000ea4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8006764:	f7ff fec0 	bl	80064e8 <TRACE_UnLock>
}
 8006768:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800676a:	4b18      	ldr	r3, [pc, #96]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 800676c:	2200      	movs	r2, #0
 800676e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8006770:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8006772:	e7ea      	b.n	800674a <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8006774:	4815      	ldr	r0, [pc, #84]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 8006776:	7880      	ldrb	r0, [r0, #2]
 8006778:	2801      	cmp	r0, #1
 800677a:	d014      	beq.n	80067a6 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800677c:	4a13      	ldr	r2, [pc, #76]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 800677e:	7892      	ldrb	r2, [r2, #2]
 8006780:	b932      	cbnz	r2, 8006790 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 8006784:	8a12      	ldrh	r2, [r2, #16]
 8006786:	4293      	cmp	r3, r2
 8006788:	d91b      	bls.n	80067c2 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	4a0f      	ldr	r2, [pc, #60]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 800678e:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8006790:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 8006792:	8a1a      	ldrh	r2, [r3, #16]
 8006794:	480e      	ldr	r0, [pc, #56]	; (80067d0 <TRACE_TxCpltCallback+0xa4>)
 8006796:	4410      	add	r0, r2
 8006798:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800679c:	4a0d      	ldr	r2, [pc, #52]	; (80067d4 <TRACE_TxCpltCallback+0xa8>)
 800679e:	68d2      	ldr	r2, [r2, #12]
 80067a0:	8a99      	ldrh	r1, [r3, #20]
 80067a2:	4790      	blx	r2
 80067a4:	e7e0      	b.n	8006768 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80067a6:	4c09      	ldr	r4, [pc, #36]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 80067a8:	8820      	ldrh	r0, [r4, #0]
 80067aa:	1a82      	subs	r2, r0, r2
 80067ac:	b292      	uxth	r2, r2
 80067ae:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80067b0:	2002      	movs	r0, #2
 80067b2:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80067b4:	2000      	movs	r0, #0
 80067b6:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80067b8:	2a00      	cmp	r2, #0
 80067ba:	d1df      	bne.n	800677c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80067bc:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80067be:	8220      	strh	r0, [r4, #16]
 80067c0:	e7dc      	b.n	800677c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80067c2:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80067c6:	4a01      	ldr	r2, [pc, #4]	; (80067cc <TRACE_TxCpltCallback+0xa0>)
 80067c8:	8293      	strh	r3, [r2, #20]
 80067ca:	e7e1      	b.n	8006790 <TRACE_TxCpltCallback+0x64>
 80067cc:	2000069c 	.word	0x2000069c
 80067d0:	2000029c 	.word	0x2000029c
 80067d4:	08007318 	.word	0x08007318

080067d8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80067d8:	2300      	movs	r3, #0
 80067da:	4a02      	ldr	r2, [pc, #8]	; (80067e4 <UTIL_LPM_Init+0xc>)
 80067dc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80067de:	4a02      	ldr	r2, [pc, #8]	; (80067e8 <UTIL_LPM_Init+0x10>)
 80067e0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80067e2:	4770      	bx	lr
 80067e4:	200008b8 	.word	0x200008b8
 80067e8:	200008b4 	.word	0x200008b4

080067ec <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ec:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80067f0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80067f2:	b141      	cbz	r1, 8006806 <UTIL_LPM_SetStopMode+0x1a>
 80067f4:	2901      	cmp	r1, #1
 80067f6:	d103      	bne.n	8006800 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80067f8:	4906      	ldr	r1, [pc, #24]	; (8006814 <UTIL_LPM_SetStopMode+0x28>)
 80067fa:	680a      	ldr	r2, [r1, #0]
 80067fc:	4310      	orrs	r0, r2
 80067fe:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006800:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006804:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8006806:	4903      	ldr	r1, [pc, #12]	; (8006814 <UTIL_LPM_SetStopMode+0x28>)
 8006808:	680a      	ldr	r2, [r1, #0]
 800680a:	ea22 0000 	bic.w	r0, r2, r0
 800680e:	6008      	str	r0, [r1, #0]
      break;
 8006810:	e7f6      	b.n	8006800 <UTIL_LPM_SetStopMode+0x14>
 8006812:	bf00      	nop
 8006814:	200008b8 	.word	0x200008b8

08006818 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006818:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800681c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800681e:	b141      	cbz	r1, 8006832 <UTIL_LPM_SetOffMode+0x1a>
 8006820:	2901      	cmp	r1, #1
 8006822:	d103      	bne.n	800682c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006824:	4906      	ldr	r1, [pc, #24]	; (8006840 <UTIL_LPM_SetOffMode+0x28>)
 8006826:	680a      	ldr	r2, [r1, #0]
 8006828:	4310      	orrs	r0, r2
 800682a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006830:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8006832:	4903      	ldr	r1, [pc, #12]	; (8006840 <UTIL_LPM_SetOffMode+0x28>)
 8006834:	680a      	ldr	r2, [r1, #0]
 8006836:	ea22 0000 	bic.w	r0, r2, r0
 800683a:	6008      	str	r0, [r1, #0]
      break;
 800683c:	e7f6      	b.n	800682c <UTIL_LPM_SetOffMode+0x14>
 800683e:	bf00      	nop
 8006840:	200008b4 	.word	0x200008b4

08006844 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8006844:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006846:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800684a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <UTIL_LPM_EnterLowPower+0x3c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	b13b      	cbz	r3, 8006862 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8006852:	4d0c      	ldr	r5, [pc, #48]	; (8006884 <UTIL_LPM_EnterLowPower+0x40>)
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8006858:	686b      	ldr	r3, [r5, #4]
 800685a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8006860:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8006862:	4b09      	ldr	r3, [pc, #36]	; (8006888 <UTIL_LPM_EnterLowPower+0x44>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	b12b      	cbz	r3, 8006874 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8006868:	4d06      	ldr	r5, [pc, #24]	; (8006884 <UTIL_LPM_EnterLowPower+0x40>)
 800686a:	68ab      	ldr	r3, [r5, #8]
 800686c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800686e:	68eb      	ldr	r3, [r5, #12]
 8006870:	4798      	blx	r3
 8006872:	e7f3      	b.n	800685c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8006874:	4d03      	ldr	r5, [pc, #12]	; (8006884 <UTIL_LPM_EnterLowPower+0x40>)
 8006876:	692b      	ldr	r3, [r5, #16]
 8006878:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800687a:	696b      	ldr	r3, [r5, #20]
 800687c:	4798      	blx	r3
 800687e:	e7ed      	b.n	800685c <UTIL_LPM_EnterLowPower+0x18>
 8006880:	200008b8 	.word	0x200008b8
 8006884:	08007130 	.word	0x08007130
 8006888:	200008b4 	.word	0x200008b4

0800688c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800688c:	1e53      	subs	r3, r2, #1
 800688e:	b29b      	uxth	r3, r3
 8006890:	b12a      	cbz	r2, 800689e <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 8006892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006896:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800689a:	461a      	mov	r2, r3
 800689c:	e7f6      	b.n	800688c <UTIL_MEM_cpy_8>
    }
}
 800689e:	4770      	bx	lr

080068a0 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80068a0:	1e53      	subs	r3, r2, #1
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	b11a      	cbz	r2, 80068ae <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 80068a6:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80068aa:	461a      	mov	r2, r3
 80068ac:	e7f8      	b.n	80068a0 <UTIL_MEM_set_8>
  }
}
 80068ae:	4770      	bx	lr

080068b0 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80068b0:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80068b6:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80068b8:	4a06      	ldr	r2, [pc, #24]	; (80068d4 <UTIL_SEQ_SetTask+0x24>)
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	4303      	orrs	r3, r0
 80068be:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80068c0:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <UTIL_SEQ_SetTask+0x28>)
 80068c2:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80068c6:	4318      	orrs	r0, r3
 80068c8:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068cc:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80068d0:	bc10      	pop	{r4}
 80068d2:	4770      	bx	lr
 80068d4:	20000958 	.word	0x20000958
 80068d8:	20000948 	.word	0x20000948

080068dc <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80068e0:	b672      	cpsid	i

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 80068e2:	4a03      	ldr	r2, [pc, #12]	; (80068f0 <UTIL_SEQ_SetEvt+0x14>)
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	4303      	orrs	r3, r0
 80068e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ea:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80068ee:	4770      	bx	lr
 80068f0:	200008c0 	.word	0x200008c0

080068f4 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80068f4:	4770      	bx	lr

080068f6 <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80068f6:	4770      	bx	lr

080068f8 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80068f8:	0c03      	lsrs	r3, r0, #16
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	b9b3      	cbnz	r3, 800692c <SEQ_BitPosition+0x34>
 80068fe:	0400      	lsls	r0, r0, #16
 8006900:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8006902:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006906:	d102      	bne.n	800690e <SEQ_BitPosition+0x16>
 8006908:	3308      	adds	r3, #8
 800690a:	b2db      	uxtb	r3, r3
 800690c:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800690e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006912:	d102      	bne.n	800691a <SEQ_BitPosition+0x22>
 8006914:	3304      	adds	r3, #4
 8006916:	b2db      	uxtb	r3, r3
 8006918:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800691a:	0f00      	lsrs	r0, r0, #28
 800691c:	4a04      	ldr	r2, [pc, #16]	; (8006930 <SEQ_BitPosition+0x38>)
 800691e:	5c10      	ldrb	r0, [r2, r0]
 8006920:	4418      	add	r0, r3
 8006922:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8006924:	f1c0 001f 	rsb	r0, r0, #31
}
 8006928:	b2c0      	uxtb	r0, r0
 800692a:	4770      	bx	lr
  uint8_t n = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	e7e8      	b.n	8006902 <SEQ_BitPosition+0xa>
 8006930:	08007828 	.word	0x08007828

08006934 <UTIL_SEQ_Run>:
{
 8006934:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8006936:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <UTIL_SEQ_Run+0xf0>)
 8006938:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800693a:	4020      	ands	r0, r4
 800693c:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800693e:	e012      	b.n	8006966 <UTIL_SEQ_Run+0x32>
      counter++;
 8006940:	3301      	adds	r3, #1
 8006942:	e01f      	b.n	8006984 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006944:	3b01      	subs	r3, #1
 8006946:	4938      	ldr	r1, [pc, #224]	; (8006a28 <UTIL_SEQ_Run+0xf4>)
 8006948:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800694c:	4002      	ands	r2, r0
 800694e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f6      	bne.n	8006944 <UTIL_SEQ_Run+0x10>
 8006956:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 800695a:	4b34      	ldr	r3, [pc, #208]	; (8006a2c <UTIL_SEQ_Run+0xf8>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b34      	ldr	r3, [pc, #208]	; (8006a30 <UTIL_SEQ_Run+0xfc>)
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8006966:	4b33      	ldr	r3, [pc, #204]	; (8006a34 <UTIL_SEQ_Run+0x100>)
 8006968:	6819      	ldr	r1, [r3, #0]
 800696a:	4b33      	ldr	r3, [pc, #204]	; (8006a38 <UTIL_SEQ_Run+0x104>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	400b      	ands	r3, r1
 8006970:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <UTIL_SEQ_Run+0xf0>)
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	4213      	tst	r3, r2
 8006976:	d033      	beq.n	80069e0 <UTIL_SEQ_Run+0xac>
 8006978:	4b30      	ldr	r3, [pc, #192]	; (8006a3c <UTIL_SEQ_Run+0x108>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4830      	ldr	r0, [pc, #192]	; (8006a40 <UTIL_SEQ_Run+0x10c>)
 800697e:	6800      	ldr	r0, [r0, #0]
 8006980:	4003      	ands	r3, r0
 8006982:	d12d      	bne.n	80069e0 <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006984:	4828      	ldr	r0, [pc, #160]	; (8006a28 <UTIL_SEQ_Run+0xf4>)
 8006986:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 800698a:	4008      	ands	r0, r1
 800698c:	4010      	ands	r0, r2
 800698e:	d0d7      	beq.n	8006940 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006990:	4a25      	ldr	r2, [pc, #148]	; (8006a28 <UTIL_SEQ_Run+0xf4>)
 8006992:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006996:	6852      	ldr	r2, [r2, #4]
 8006998:	4210      	tst	r0, r2
 800699a:	d105      	bne.n	80069a8 <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800699c:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <UTIL_SEQ_Run+0xf4>)
 800699e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80069a2:	f04f 31ff 	mov.w	r1, #4294967295
 80069a6:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80069a8:	4d1f      	ldr	r5, [pc, #124]	; (8006a28 <UTIL_SEQ_Run+0xf4>)
 80069aa:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80069ae:	686e      	ldr	r6, [r5, #4]
 80069b0:	4030      	ands	r0, r6
 80069b2:	f7ff ffa1 	bl	80068f8 <SEQ_BitPosition>
 80069b6:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <UTIL_SEQ_Run+0xf8>)
 80069b8:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80069ba:	2301      	movs	r3, #1
 80069bc:	fa03 f000 	lsl.w	r0, r3, r0
 80069c0:	ea26 0000 	bic.w	r0, r6, r0
 80069c4:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80069ca:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	4093      	lsls	r3, r2
 80069d0:	43d8      	mvns	r0, r3
 80069d2:	4919      	ldr	r1, [pc, #100]	; (8006a38 <UTIL_SEQ_Run+0x104>)
 80069d4:	680a      	ldr	r2, [r1, #0]
 80069d6:	ea22 0303 	bic.w	r3, r2, r3
 80069da:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80069dc:	2302      	movs	r3, #2
 80069de:	e7b8      	b.n	8006952 <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <UTIL_SEQ_Run+0xf8>)
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295
 80069e6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80069e8:	f7ff ff84 	bl	80068f4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ec:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80069f0:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80069f2:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <UTIL_SEQ_Run+0x104>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a0f      	ldr	r2, [pc, #60]	; (8006a34 <UTIL_SEQ_Run+0x100>)
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <UTIL_SEQ_Run+0xf0>)
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	4213      	tst	r3, r2
 8006a02:	d105      	bne.n	8006a10 <UTIL_SEQ_Run+0xdc>
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <UTIL_SEQ_Run+0x108>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <UTIL_SEQ_Run+0x10c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	421a      	tst	r2, r3
 8006a0e:	d006      	beq.n	8006a1e <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a10:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8006a14:	f7ff ff6f 	bl	80068f6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <UTIL_SEQ_Run+0xf0>)
 8006a1a:	601c      	str	r4, [r3, #0]
}
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 8006a1e:	f7fa fa02 	bl	8000e26 <UTIL_SEQ_Idle>
 8006a22:	e7f5      	b.n	8006a10 <UTIL_SEQ_Run+0xdc>
 8006a24:	20000058 	.word	0x20000058
 8006a28:	20000948 	.word	0x20000948
 8006a2c:	200008bc 	.word	0x200008bc
 8006a30:	200008c8 	.word	0x200008c8
 8006a34:	2000005c 	.word	0x2000005c
 8006a38:	20000958 	.word	0x20000958
 8006a3c:	200008c0 	.word	0x200008c0
 8006a40:	200008c4 	.word	0x200008c4

08006a44 <UTIL_SEQ_WaitEvt>:
{
 8006a44:	b570      	push	{r4, r5, r6, lr}
  current_task_idx = CurrentTaskIdx;
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <UTIL_SEQ_WaitEvt+0x40>)
 8006a48:	681e      	ldr	r6, [r3, #0]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8006a4a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006a4e:	d00e      	beq.n	8006a6e <UTIL_SEQ_WaitEvt+0x2a>
    wait_task_idx = 1 << CurrentTaskIdx;
 8006a50:	2401      	movs	r4, #1
 8006a52:	40b4      	lsls	r4, r6
  event_waited_id_backup = EvtWaited;
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <UTIL_SEQ_WaitEvt+0x44>)
 8006a56:	681d      	ldr	r5, [r3, #0]
  EvtWaited = EvtId_bm;
 8006a58:	6018      	str	r0, [r3, #0]
  while ((EvtSet & EvtWaited) == 0U)
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <UTIL_SEQ_WaitEvt+0x48>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	; (8006a88 <UTIL_SEQ_WaitEvt+0x44>)
 8006a60:	6811      	ldr	r1, [r2, #0]
 8006a62:	420b      	tst	r3, r1
 8006a64:	d105      	bne.n	8006a72 <UTIL_SEQ_WaitEvt+0x2e>
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7fa f9d8 	bl	8000e1c <UTIL_SEQ_EvtIdle>
 8006a6c:	e7f5      	b.n	8006a5a <UTIL_SEQ_WaitEvt+0x16>
    wait_task_idx = 0;
 8006a6e:	2400      	movs	r4, #0
 8006a70:	e7f0      	b.n	8006a54 <UTIL_SEQ_WaitEvt+0x10>
  CurrentTaskIdx = current_task_idx;
 8006a72:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <UTIL_SEQ_WaitEvt+0x40>)
 8006a74:	6016      	str	r6, [r2, #0]
  EvtSet &= (~EvtWaited);
 8006a76:	ea23 0101 	bic.w	r1, r3, r1
 8006a7a:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <UTIL_SEQ_WaitEvt+0x48>)
 8006a7c:	6019      	str	r1, [r3, #0]
  EvtWaited = event_waited_id_backup;
 8006a7e:	4b02      	ldr	r3, [pc, #8]	; (8006a88 <UTIL_SEQ_WaitEvt+0x44>)
 8006a80:	601d      	str	r5, [r3, #0]
}
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	200008bc 	.word	0x200008bc
 8006a88:	200008c4 	.word	0x200008c4
 8006a8c:	200008c0 	.word	0x200008c0

08006a90 <UTIL_SEQ_RegTask>:
{
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a94:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006a98:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006a9a:	f7ff ff2d 	bl	80068f8 <SEQ_BitPosition>
 8006a9e:	4b03      	ldr	r3, [pc, #12]	; (8006aac <UTIL_SEQ_RegTask+0x1c>)
 8006aa0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa4:	f385 8810 	msr	PRIMASK, r5
}
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	bf00      	nop
 8006aac:	200008c8 	.word	0x200008c8

08006ab0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	f10d 0c08 	add.w	ip, sp, #8
 8006ab8:	e90c 0006 	stmdb	ip, {r1, r2}
 8006abc:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 8006abe:	9a00      	ldr	r2, [sp, #0]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8006ac4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006ac8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8006acc:	440a      	add	r2, r1
 8006ace:	b291      	uxth	r1, r2
 8006ad0:	b212      	sxth	r2, r2
 8006ad2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8006ad4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8006ad8:	db04      	blt.n	8006ae4 <SysTimeAdd+0x34>
  {
    c.Seconds++;
 8006ada:	3301      	adds	r3, #1
 8006adc:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8006ade:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8006ae2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8006ae4:	b002      	add	sp, #8
 8006ae6:	b002      	add	sp, #8
 8006ae8:	4770      	bx	lr
	...

08006aec <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8006aec:	b530      	push	{r4, r5, lr}
 8006aee:	b087      	sub	sp, #28
 8006af0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8006af2:	2300      	movs	r3, #0
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8006afa:	4d0b      	ldr	r5, [pc, #44]	; (8006b28 <SysTimeGet+0x3c>)
 8006afc:	692b      	ldr	r3, [r5, #16]
 8006afe:	a805      	add	r0, sp, #20
 8006b00:	4798      	blx	r3
 8006b02:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8006b04:	68eb      	ldr	r3, [r5, #12]
 8006b06:	4798      	blx	r3
 8006b08:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8006b0c:	686b      	ldr	r3, [r5, #4]
 8006b0e:	4798      	blx	r3
 8006b10:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8006b12:	9b05      	ldr	r3, [sp, #20]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	9a03      	ldr	r2, [sp, #12]
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f7ff ffc7 	bl	8006ab0 <SysTimeAdd>

  return sysTime;
}
 8006b22:	4620      	mov	r0, r4
 8006b24:	b007      	add	sp, #28
 8006b26:	bd30      	pop	{r4, r5, pc}
 8006b28:	080072d8 	.word	0x080072d8

08006b2c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8006b2c:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8006b2e:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <UTIL_TIMER_Init+0x10>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8006b34:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <UTIL_TIMER_Init+0x14>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4798      	blx	r3
}
 8006b3a:	bd08      	pop	{r3, pc}
 8006b3c:	2000095c 	.word	0x2000095c
 8006b40:	080072ec 	.word	0x080072ec

08006b44 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8006b44:	b1a8      	cbz	r0, 8006b72 <UTIL_TIMER_Create+0x2e>
{
 8006b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b48:	4617      	mov	r7, r2
 8006b4a:	461e      	mov	r6, r3
 8006b4c:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8006b4e:	b193      	cbz	r3, 8006b76 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8006b50:	2500      	movs	r5, #0
 8006b52:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8006b54:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <UTIL_TIMER_Create+0x38>)
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	4608      	mov	r0, r1
 8006b5a:	4798      	blx	r3
 8006b5c:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8006b5e:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8006b60:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8006b62:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8006b64:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8006b6a:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8006b6c:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8006b6e:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8006b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8006b72:	2001      	movs	r0, #1
}
 8006b74:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7fa      	b.n	8006b70 <UTIL_TIMER_Create+0x2c>
 8006b7a:	bf00      	nop
 8006b7c:	080072ec 	.word	0x080072ec

08006b80 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <TimerExists+0x18>)
 8006b82:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8006b84:	b11b      	cbz	r3, 8006b8e <TimerExists+0xe>
  {
    if( cur == TimerObject )
 8006b86:	4283      	cmp	r3, r0
 8006b88:	d003      	beq.n	8006b92 <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	e7fa      	b.n	8006b84 <TimerExists+0x4>
  }
  return false;
 8006b8e:	2000      	movs	r0, #0
 8006b90:	4770      	bx	lr
      return true;
 8006b92:	2001      	movs	r0, #1
}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	2000095c 	.word	0x2000095c

08006b9c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8006ba0:	4e09      	ldr	r6, [pc, #36]	; (8006bc8 <TimerSetTimeout+0x2c>)
 8006ba2:	6a33      	ldr	r3, [r6, #32]
 8006ba4:	4798      	blx	r3
 8006ba6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8006bac:	6827      	ldr	r7, [r4, #0]
 8006bae:	69b6      	ldr	r6, [r6, #24]
 8006bb0:	47b0      	blx	r6
 8006bb2:	4428      	add	r0, r5
 8006bb4:	4287      	cmp	r7, r0
 8006bb6:	d202      	bcs.n	8006bbe <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8006bb8:	47b0      	blx	r6
 8006bba:	4405      	add	r5, r0
 8006bbc:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8006bbe:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <TimerSetTimeout+0x2c>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	4798      	blx	r3
}
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	080072ec 	.word	0x080072ec

08006bcc <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8006bcc:	b368      	cbz	r0, 8006c2a <UTIL_TIMER_Stop+0x5e>
{
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006bd6:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <UTIL_TIMER_Stop+0x64>)
 8006bda:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8006be0:	b1e1      	cbz	r1, 8006c1c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8006be6:	4288      	cmp	r0, r1
 8006be8:	d006      	beq.n	8006bf8 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8006bea:	460b      	mov	r3, r1
        while( cur != NULL )
 8006bec:	b1b3      	cbz	r3, 8006c1c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d011      	beq.n	8006c16 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8006bf2:	4619      	mov	r1, r3
            cur = cur->Next;
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	e7f9      	b.n	8006bec <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8006bf8:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8006bfa:	6948      	ldr	r0, [r1, #20]
 8006bfc:	b120      	cbz	r0, 8006c08 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <UTIL_TIMER_Stop+0x64>)
 8006c00:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8006c02:	f7ff ffcb 	bl	8006b9c <TimerSetTimeout>
 8006c06:	e009      	b.n	8006c1c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <UTIL_TIMER_Stop+0x68>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4798      	blx	r3
            TimerListHead = NULL;
 8006c0e:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <UTIL_TIMER_Stop+0x64>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e002      	b.n	8006c1c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	b123      	cbz	r3, 8006c24 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8006c1a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1c:	f384 8810 	msr	PRIMASK, r4
}
 8006c20:	2000      	movs	r0, #0
}
 8006c22:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8006c24:	2300      	movs	r3, #0
 8006c26:	614b      	str	r3, [r1, #20]
 8006c28:	e7f8      	b.n	8006c1c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8006c2a:	2001      	movs	r0, #1
}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	2000095c 	.word	0x2000095c
 8006c34:	080072ec 	.word	0x080072ec

08006c38 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <TimerInsertTimer+0x38>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8006c3c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8006c3e:	6951      	ldr	r1, [r2, #20]
 8006c40:	b189      	cbz	r1, 8006c66 <TimerInsertTimer+0x2e>
{
 8006c42:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8006c44:	6804      	ldr	r4, [r0, #0]
 8006c46:	6819      	ldr	r1, [r3, #0]
 8006c48:	428c      	cmp	r4, r1
 8006c4a:	d908      	bls.n	8006c5e <TimerInsertTimer+0x26>
    {
        cur = next;
 8006c4c:	461a      	mov	r2, r3
        next = next->Next;
 8006c4e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8006c50:	6951      	ldr	r1, [r2, #20]
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d1f6      	bne.n	8006c44 <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8006c56:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6143      	str	r3, [r0, #20]
 8006c5c:	e001      	b.n	8006c62 <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8006c5e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8006c60:	6143      	str	r3, [r0, #20]
}
 8006c62:	bc10      	pop	{r4}
 8006c64:	4770      	bx	lr
  cur->Next = TimerObject;
 8006c66:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6143      	str	r3, [r0, #20]
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	2000095c 	.word	0x2000095c

08006c74 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8006c74:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <TimerInsertNewHeadTimer+0x18>)
 8006c78:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8006c7a:	b10b      	cbz	r3, 8006c80 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8006c80:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8006c82:	4b02      	ldr	r3, [pc, #8]	; (8006c8c <TimerInsertNewHeadTimer+0x18>)
 8006c84:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8006c86:	f7ff ff89 	bl	8006b9c <TimerSetTimeout>
}
 8006c8a:	bd08      	pop	{r3, pc}
 8006c8c:	2000095c 	.word	0x2000095c

08006c90 <UTIL_TIMER_Start>:
{
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d036      	beq.n	8006d04 <UTIL_TIMER_Start+0x74>
 8006c96:	4604      	mov	r4, r0
 8006c98:	f7ff ff72 	bl	8006b80 <TimerExists>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d134      	bne.n	8006d0a <UTIL_TIMER_Start+0x7a>
 8006ca0:	7a65      	ldrb	r5, [r4, #9]
 8006ca2:	2d00      	cmp	r5, #0
 8006ca4:	d133      	bne.n	8006d0e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ca6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006caa:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8006cac:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8006cae:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <UTIL_TIMER_Start+0x84>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	4798      	blx	r3
    if( ticks < minValue )
 8006cb4:	4287      	cmp	r7, r0
 8006cb6:	d300      	bcc.n	8006cba <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8006cb8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8006cba:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8006cc4:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <UTIL_TIMER_Start+0x88>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	b183      	cbz	r3, 8006cee <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <UTIL_TIMER_Start+0x84>)
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	4418      	add	r0, r3
 8006cd6:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <UTIL_TIMER_Start+0x88>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4298      	cmp	r0, r3
 8006ce0:	d20c      	bcs.n	8006cfc <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7ff ffc6 	bl	8006c74 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce8:	f386 8810 	msr	PRIMASK, r6
}
 8006cec:	e00b      	b.n	8006d06 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <UTIL_TIMER_Start+0x84>)
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7ff ffbd 	bl	8006c74 <TimerInsertNewHeadTimer>
 8006cfa:	e7f5      	b.n	8006ce8 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7ff ff9b 	bl	8006c38 <TimerInsertTimer>
 8006d02:	e7f1      	b.n	8006ce8 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8006d04:	2501      	movs	r5, #1
}
 8006d06:	4628      	mov	r0, r5
 8006d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8006d0a:	2501      	movs	r5, #1
 8006d0c:	e7fb      	b.n	8006d06 <UTIL_TIMER_Start+0x76>
 8006d0e:	2501      	movs	r5, #1
 8006d10:	e7f9      	b.n	8006d06 <UTIL_TIMER_Start+0x76>
 8006d12:	bf00      	nop
 8006d14:	080072ec 	.word	0x080072ec
 8006d18:	2000095c 	.word	0x2000095c

08006d1c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8006d1c:	b198      	cbz	r0, 8006d46 <UTIL_TIMER_SetPeriod+0x2a>
{
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <UTIL_TIMER_SetPeriod+0x30>)
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	4608      	mov	r0, r1
 8006d28:	4798      	blx	r3
 8006d2a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7ff ff27 	bl	8006b80 <TimerExists>
 8006d32:	b908      	cbnz	r0, 8006d38 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8006d34:	2000      	movs	r0, #0
}
 8006d36:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7ff ff47 	bl	8006bcc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff ffa6 	bl	8006c90 <UTIL_TIMER_Start>
 8006d44:	e7f7      	b.n	8006d36 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8006d46:	2001      	movs	r0, #1
}
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	080072ec 	.word	0x080072ec

08006d50 <UTIL_TIMER_IRQ_Handler>:
{
 8006d50:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d52:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006d56:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8006d58:	4c1e      	ldr	r4, [pc, #120]	; (8006dd4 <UTIL_TIMER_IRQ_Handler+0x84>)
 8006d5a:	6963      	ldr	r3, [r4, #20]
 8006d5c:	4798      	blx	r3
 8006d5e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8006d64:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8006d66:	4b1c      	ldr	r3, [pc, #112]	; (8006dd8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	b923      	cbnz	r3, 8006d76 <UTIL_TIMER_IRQ_Handler+0x26>
 8006d6c:	e018      	b.n	8006da0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8006d72:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8006d74:	b1a3      	cbz	r3, 8006da0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	42a2      	cmp	r2, r4
 8006d7a:	d9f8      	bls.n	8006d6e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8006d7c:	1a31      	subs	r1, r6, r0
 8006d7e:	440a      	add	r2, r1
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e7f6      	b.n	8006d72 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8006d84:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8006d86:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8006d88:	6962      	ldr	r2, [r4, #20]
 8006d8a:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8006d90:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8006d92:	68e3      	ldr	r3, [r4, #12]
 8006d94:	6920      	ldr	r0, [r4, #16]
 8006d96:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8006d98:	8963      	ldrh	r3, [r4, #10]
 8006d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9e:	d012      	beq.n	8006dc6 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	b13b      	cbz	r3, 8006db6 <UTIL_TIMER_IRQ_Handler+0x66>
 8006da6:	681c      	ldr	r4, [r3, #0]
 8006da8:	2c00      	cmp	r4, #0
 8006daa:	d0eb      	beq.n	8006d84 <UTIL_TIMER_IRQ_Handler+0x34>
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <UTIL_TIMER_IRQ_Handler+0x84>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	4798      	blx	r3
 8006db2:	4284      	cmp	r4, r0
 8006db4:	d3e6      	bcc.n	8006d84 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8006db6:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	b108      	cbz	r0, 8006dc0 <UTIL_TIMER_IRQ_Handler+0x70>
 8006dbc:	7a03      	ldrb	r3, [r0, #8]
 8006dbe:	b133      	cbz	r3, 8006dce <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc0:	f385 8810 	msr	PRIMASK, r5
}
 8006dc4:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7ff ff62 	bl	8006c90 <UTIL_TIMER_Start>
 8006dcc:	e7e8      	b.n	8006da0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8006dce:	f7ff fee5 	bl	8006b9c <TimerSetTimeout>
 8006dd2:	e7f5      	b.n	8006dc0 <UTIL_TIMER_IRQ_Handler+0x70>
 8006dd4:	080072ec 	.word	0x080072ec
 8006dd8:	2000095c 	.word	0x2000095c

08006ddc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8006ddc:	4601      	mov	r1, r0
  int i = 0;
 8006dde:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8006de0:	680a      	ldr	r2, [r1, #0]
 8006de2:	7813      	ldrb	r3, [r2, #0]
 8006de4:	3b30      	subs	r3, #48	; 0x30
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b09      	cmp	r3, #9
 8006dea:	d808      	bhi.n	8006dfe <ee_skip_atoi+0x22>
 8006dec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006df0:	1c53      	adds	r3, r2, #1
 8006df2:	600b      	str	r3, [r1, #0]
 8006df4:	7813      	ldrb	r3, [r2, #0]
 8006df6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006dfa:	3830      	subs	r0, #48	; 0x30
 8006dfc:	e7f0      	b.n	8006de0 <ee_skip_atoi+0x4>
  return i;
}
 8006dfe:	4770      	bx	lr

08006e00 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8006e00:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8006e04:	b093      	sub	sp, #76	; 0x4c
 8006e06:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006e08:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8006e0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e0e:	d111      	bne.n	8006e34 <ee_number+0x34>
  char *dig = lower_digits;
 8006e10:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8006f04 <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8006e14:	469c      	mov	ip, r3
 8006e16:	3b02      	subs	r3, #2
 8006e18:	2b22      	cmp	r3, #34	; 0x22
 8006e1a:	d871      	bhi.n	8006f00 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8006e1c:	f015 0401 	ands.w	r4, r5, #1
 8006e20:	d00b      	beq.n	8006e3a <ee_number+0x3a>
 8006e22:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8006e24:	f015 0f02 	tst.w	r5, #2
 8006e28:	d010      	beq.n	8006e4c <ee_number+0x4c>
  {
    if (num < 0)
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	db07      	blt.n	8006e3e <ee_number+0x3e>
  sign = 0;
 8006e2e:	f04f 0e00 	mov.w	lr, #0
 8006e32:	e00d      	b.n	8006e50 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 8006e34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f08 <ee_number+0x108>
 8006e38:	e7ec      	b.n	8006e14 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8006e3a:	2720      	movs	r7, #32
 8006e3c:	e7f2      	b.n	8006e24 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8006e3e:	4252      	negs	r2, r2
      size--;
 8006e40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e42:	3b01      	subs	r3, #1
 8006e44:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 8006e46:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8006e4a:	e001      	b.n	8006e50 <ee_number+0x50>
  sign = 0;
 8006e4c:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8006e50:	b9da      	cbnz	r2, 8006e8a <ee_number+0x8a>
    tmp[i++] = '0';
 8006e52:	2330      	movs	r3, #48	; 0x30
 8006e54:	f88d 3004 	strb.w	r3, [sp, #4]
 8006e58:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8006e5a:	42b5      	cmp	r5, r6
 8006e5c:	dd00      	ble.n	8006e60 <ee_number+0x60>
 8006e5e:	462e      	mov	r6, r5
  size -= precision;
 8006e60:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e62:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8006e64:	b30c      	cbz	r4, 8006eaa <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 8006e66:	f1be 0f00 	cmp.w	lr, #0
 8006e6a:	d003      	beq.n	8006e74 <ee_number+0x74>
 8006e6c:	f800 eb01 	strb.w	lr, [r0], #1
 8006e70:	3901      	subs	r1, #1
 8006e72:	d007      	beq.n	8006e84 <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e7a:	dd20      	ble.n	8006ebe <ee_number+0xbe>
 8006e7c:	f800 7b01 	strb.w	r7, [r0], #1
 8006e80:	3901      	subs	r1, #1
 8006e82:	d1f7      	bne.n	8006e74 <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8006e84:	b013      	add	sp, #76	; 0x4c
 8006e86:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 8006e8a:	2500      	movs	r5, #0
    while (num != 0)
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	d0e4      	beq.n	8006e5a <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8006e90:	fbb2 f3fc 	udiv	r3, r2, ip
 8006e94:	fb0c 2213 	mls	r2, ip, r3, r2
 8006e98:	f818 a002 	ldrb.w	sl, [r8, r2]
 8006e9c:	aa12      	add	r2, sp, #72	; 0x48
 8006e9e:	442a      	add	r2, r5
 8006ea0:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8006ea4:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	e7f0      	b.n	8006e8c <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f103 33ff 	add.w	r3, r3, #4294967295
 8006eb0:	ddd9      	ble.n	8006e66 <ee_number+0x66>
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f800 2b01 	strb.w	r2, [r0], #1
 8006eb8:	3901      	subs	r1, #1
 8006eba:	d1f6      	bne.n	8006eaa <ee_number+0xaa>
 8006ebc:	e7e2      	b.n	8006e84 <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 8006ebe:	42ae      	cmp	r6, r5
 8006ec0:	f106 36ff 	add.w	r6, r6, #4294967295
 8006ec4:	dd05      	ble.n	8006ed2 <ee_number+0xd2>
 8006ec6:	2230      	movs	r2, #48	; 0x30
 8006ec8:	f800 2b01 	strb.w	r2, [r0], #1
 8006ecc:	3901      	subs	r1, #1
 8006ece:	d1f6      	bne.n	8006ebe <ee_number+0xbe>
 8006ed0:	e7d8      	b.n	8006e84 <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	f105 35ff 	add.w	r5, r5, #4294967295
 8006ed8:	dd08      	ble.n	8006eec <ee_number+0xec>
 8006eda:	aa12      	add	r2, sp, #72	; 0x48
 8006edc:	442a      	add	r2, r5
 8006ede:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8006ee2:	f800 2b01 	strb.w	r2, [r0], #1
 8006ee6:	3901      	subs	r1, #1
 8006ee8:	d1f3      	bne.n	8006ed2 <ee_number+0xd2>
 8006eea:	e7cb      	b.n	8006e84 <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ef2:	ddc7      	ble.n	8006e84 <ee_number+0x84>
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f800 2b01 	strb.w	r2, [r0], #1
 8006efa:	3901      	subs	r1, #1
 8006efc:	d1f6      	bne.n	8006eec <ee_number+0xec>
 8006efe:	e7c1      	b.n	8006e84 <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7bf      	b.n	8006e84 <ee_number+0x84>
 8006f04:	08007860 	.word	0x08007860
 8006f08:	08007838 	.word	0x08007838

08006f0c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8006f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f10:	b087      	sub	sp, #28
 8006f12:	9205      	str	r2, [sp, #20]
 8006f14:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8006f16:	1e0f      	subs	r7, r1, #0
 8006f18:	f340 80b9 	ble.w	800708e <tiny_vsnprintf_like+0x182>
 8006f1c:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8006f1e:	4604      	mov	r4, r0
 8006f20:	e004      	b.n	8006f2c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8006f22:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8006f26:	9b05      	ldr	r3, [sp, #20]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	9305      	str	r3, [sp, #20]
 8006f2c:	9905      	ldr	r1, [sp, #20]
 8006f2e:	780a      	ldrb	r2, [r1, #0]
 8006f30:	b922      	cbnz	r2, 8006f3c <tiny_vsnprintf_like+0x30>
 8006f32:	1ba3      	subs	r3, r4, r6
 8006f34:	1e78      	subs	r0, r7, #1
 8006f36:	4283      	cmp	r3, r0
 8006f38:	f2c0 80a3 	blt.w	8007082 <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 8006f3c:	1ba3      	subs	r3, r4, r6
 8006f3e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006f42:	4543      	cmp	r3, r8
 8006f44:	f280 809d 	bge.w	8007082 <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 8006f48:	2a25      	cmp	r2, #37	; 0x25
 8006f4a:	d1ea      	bne.n	8006f22 <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8006f4c:	1c4b      	adds	r3, r1, #1
 8006f4e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8006f50:	784b      	ldrb	r3, [r1, #1]
 8006f52:	2b30      	cmp	r3, #48	; 0x30
 8006f54:	d020      	beq.n	8006f98 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8006f56:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8006f5a:	3b30      	subs	r3, #48	; 0x30
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b09      	cmp	r3, #9
 8006f60:	d91d      	bls.n	8006f9e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8006f62:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 8006f66:	9b05      	ldr	r3, [sp, #20]
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d868      	bhi.n	8007044 <tiny_vsnprintf_like+0x138>
 8006f72:	e8df f003 	tbb	[pc, r3]
 8006f76:	674b      	.short	0x674b
 8006f78:	67676767 	.word	0x67676767
 8006f7c:	67676767 	.word	0x67676767
 8006f80:	67631b67 	.word	0x67631b67
 8006f84:	63676767 	.word	0x63676767
 8006f88:	67676767 	.word	0x67676767
 8006f8c:	67676767 	.word	0x67676767
 8006f90:	19672967 	.word	0x19672967
 8006f94:	6767      	.short	0x6767
 8006f96:	7d          	.byte	0x7d
 8006f97:	00          	.byte	0x00
      flags |= ZEROPAD;
 8006f98:	f04f 0901 	mov.w	r9, #1
 8006f9c:	e7dd      	b.n	8006f5a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8006f9e:	a805      	add	r0, sp, #20
 8006fa0:	f7ff ff1c 	bl	8006ddc <ee_skip_atoi>
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	e7de      	b.n	8006f66 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8006fa8:	230a      	movs	r3, #10
 8006faa:	e032      	b.n	8007012 <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8006fac:	3d01      	subs	r5, #1
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	dd03      	ble.n	8006fba <tiny_vsnprintf_like+0xae>
 8006fb2:	2320      	movs	r3, #32
 8006fb4:	f804 3b01 	strb.w	r3, [r4], #1
 8006fb8:	e7f8      	b.n	8006fac <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8006fba:	9b04      	ldr	r3, [sp, #16]
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	9204      	str	r2, [sp, #16]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8006fc6:	e7ae      	b.n	8006f26 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8006fc8:	9b04      	ldr	r3, [sp, #16]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	9204      	str	r2, [sp, #16]
 8006fce:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8006fd2:	f1b8 0f00 	cmp.w	r8, #0
 8006fd6:	d00a      	beq.n	8006fee <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8006fd8:	4640      	mov	r0, r8
 8006fda:	f7f9 f8cd 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8006fde:	1e6b      	subs	r3, r5, #1
 8006fe0:	4285      	cmp	r5, r0
 8006fe2:	dd07      	ble.n	8006ff4 <tiny_vsnprintf_like+0xe8>
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f804 2b01 	strb.w	r2, [r4], #1
 8006fea:	461d      	mov	r5, r3
 8006fec:	e7f7      	b.n	8006fde <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8006fee:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8007094 <tiny_vsnprintf_like+0x188>
 8006ff2:	e7f1      	b.n	8006fd8 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	e006      	b.n	8007006 <tiny_vsnprintf_like+0xfa>
 8006ff8:	4643      	mov	r3, r8
 8006ffa:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006ffe:	f804 1b01 	strb.w	r1, [r4], #1
 8007002:	3201      	adds	r2, #1
 8007004:	4698      	mov	r8, r3
 8007006:	4282      	cmp	r2, r0
 8007008:	dbf6      	blt.n	8006ff8 <tiny_vsnprintf_like+0xec>
 800700a:	e78c      	b.n	8006f26 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 800700c:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8007010:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8007012:	f019 0f02 	tst.w	r9, #2
 8007016:	d02f      	beq.n	8007078 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 8007018:	9a04      	ldr	r2, [sp, #16]
 800701a:	1d11      	adds	r1, r2, #4
 800701c:	9104      	str	r1, [sp, #16]
 800701e:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007020:	1ba1      	subs	r1, r4, r6
 8007022:	f8cd 9008 	str.w	r9, [sp, #8]
 8007026:	f04f 30ff 	mov.w	r0, #4294967295
 800702a:	9001      	str	r0, [sp, #4]
 800702c:	9500      	str	r5, [sp, #0]
 800702e:	eba8 0101 	sub.w	r1, r8, r1
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff fee4 	bl	8006e00 <ee_number>
 8007038:	4604      	mov	r4, r0
 800703a:	e774      	b.n	8006f26 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 800703c:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8007040:	230a      	movs	r3, #10
 8007042:	e7e6      	b.n	8007012 <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 8007044:	2a25      	cmp	r2, #37	; 0x25
 8007046:	d002      	beq.n	800704e <tiny_vsnprintf_like+0x142>
 8007048:	2325      	movs	r3, #37	; 0x25
 800704a:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800704e:	1ba3      	subs	r3, r4, r6
 8007050:	4598      	cmp	r8, r3
 8007052:	dd0f      	ble.n	8007074 <tiny_vsnprintf_like+0x168>
        if (*fmt)
 8007054:	9b05      	ldr	r3, [sp, #20]
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	b13a      	cbz	r2, 800706a <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 800705a:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800705e:	1ba3      	subs	r3, r4, r6
 8007060:	4598      	cmp	r8, r3
 8007062:	f73f af60 	bgt.w	8006f26 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8007066:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8007068:	e7d3      	b.n	8007012 <tiny_vsnprintf_like+0x106>
          --fmt;
 800706a:	3b01      	subs	r3, #1
 800706c:	9305      	str	r3, [sp, #20]
 800706e:	e7f6      	b.n	800705e <tiny_vsnprintf_like+0x152>
        base = 16;
 8007070:	2310      	movs	r3, #16
 8007072:	e7ce      	b.n	8007012 <tiny_vsnprintf_like+0x106>
    base = 10;
 8007074:	230a      	movs	r3, #10
 8007076:	e7cc      	b.n	8007012 <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 8007078:	9a04      	ldr	r2, [sp, #16]
 800707a:	1d11      	adds	r1, r2, #4
 800707c:	9104      	str	r1, [sp, #16]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	e7ce      	b.n	8007020 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 8007082:	2300      	movs	r3, #0
 8007084:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8007086:	1ba0      	subs	r0, r4, r6
}
 8007088:	b007      	add	sp, #28
 800708a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 800708e:	2000      	movs	r0, #0
 8007090:	e7fa      	b.n	8007088 <tiny_vsnprintf_like+0x17c>
 8007092:	bf00      	nop
 8007094:	08007888 	.word	0x08007888

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4d0d      	ldr	r5, [pc, #52]	; (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	; (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2600      	movs	r6, #0
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4d0b      	ldr	r5, [pc, #44]	; (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	; (80070dc <__libc_init_array+0x44>)
 80070ac:	f000 f820 	bl	80070f0 <_init>
 80070b0:	1b64      	subs	r4, r4, r5
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2600      	movs	r6, #0
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	08007898 	.word	0x08007898
 80070d4:	08007898 	.word	0x08007898
 80070d8:	08007898 	.word	0x08007898
 80070dc:	0800789c 	.word	0x0800789c

080070e0 <memset>:
 80070e0:	4402      	add	r2, r0
 80070e2:	4603      	mov	r3, r0
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d100      	bne.n	80070ea <memset+0xa>
 80070e8:	4770      	bx	lr
 80070ea:	f803 1b01 	strb.w	r1, [r3], #1
 80070ee:	e7f9      	b.n	80070e4 <memset+0x4>

080070f0 <_init>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr

080070fc <_fini>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr
