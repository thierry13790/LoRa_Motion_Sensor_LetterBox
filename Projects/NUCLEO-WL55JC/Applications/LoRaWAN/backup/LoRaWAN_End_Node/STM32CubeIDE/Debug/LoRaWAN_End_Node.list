
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011178  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  080112b0  080112b0  000212b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012084  08012084  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  08012084  08012084  00022084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801208c  0801208c  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801208c  0801208c  0002208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012090  08012090  00022090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08012094  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001990  200000d8  0801216c  000300d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001a68  0801216c  00031a68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000717e8  00000000  00000000  00030102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c7b6  00000000  00000000  000a18ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00022e01  00000000  00000000  000ae0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a20  00000000  00000000  000d0ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002bc8  00000000  00000000  000d38c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a369  00000000  00000000  000d6490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048f5c  00000000  00000000  001007f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddb32  00000000  00000000  00149755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00227287  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007750  00000000  00000000  002272dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200000d8 	.word	0x200000d8
 8000154:	00000000 	.word	0x00000000
 8000158:	08011298 	.word	0x08011298

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200000dc 	.word	0x200000dc
 8000174:	08011298 	.word	0x08011298

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_ADC_Init+0x50>)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_ADC_Init+0x54>)
 8000e56:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e5c:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e62:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e64:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	2204      	movs	r2, #4
 8000e68:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e6a:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e6c:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e6e:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000e70:	2201      	movs	r2, #1
 8000e72:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e74:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e84:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000e86:	2207      	movs	r2, #7
 8000e88:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000e8a:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000e8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e90:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e92:	f001 fa6d 	bl	8002370 <HAL_ADC_Init>
 8000e96:	b900      	cbnz	r0, 8000e9a <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e98:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e9a:	f000 f8fe 	bl	800109a <Error_Handler>
}
 8000e9e:	e7fb      	b.n	8000e98 <MX_ADC_Init+0x48>
 8000ea0:	20001818 	.word	0x20001818
 8000ea4:	40012400 	.word	0x40012400

08000ea8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000ea8:	6802      	ldr	r2, [r0, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_ADC_MspInit+0x28>)
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d000      	beq.n	8000eb2 <HAL_ADC_MspInit+0xa>
 8000eb0:	4770      	bx	lr
{
 8000eb2:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ebe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ec8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000eca:	b002      	add	sp, #8
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40012400 	.word	0x40012400

08000ed4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000ed4:	6802      	ldr	r2, [r0, #0]
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_ADC_MspDeInit+0x18>)
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d000      	beq.n	8000ede <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000edc:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee2:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	e7f7      	b.n	8000edc <HAL_ADC_MspDeInit+0x8>
 8000eec:	40012400 	.word	0x40012400

08000ef0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000ef0:	b530      	push	{r4, r5, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000efe:	f7ff ffa7 	bl	8000e50 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f02:	4816      	ldr	r0, [pc, #88]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f04:	f001 fe66 	bl	8002bd4 <HAL_ADCEx_Calibration_Start>
 8000f08:	b9f8      	cbnz	r0, 8000f4a <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f0a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f10:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f12:	a901      	add	r1, sp, #4
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f16:	f001 fbc3 	bl	80026a0 <HAL_ADC_ConfigChannel>
 8000f1a:	b9c8      	cbnz	r0, 8000f50 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f1c:	480f      	ldr	r0, [pc, #60]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f1e:	f001 fd69 	bl	80029f4 <HAL_ADC_Start>
 8000f22:	b9c0      	cbnz	r0, 8000f56 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f24:	4c0d      	ldr	r4, [pc, #52]	; (8000f5c <ADC_ReadChannels+0x6c>)
 8000f26:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f001 fb56 	bl	80025dc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000f30:	4620      	mov	r0, r4
 8000f32:	f001 fe2f 	bl	8002b94 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f36:	4620      	mov	r0, r4
 8000f38:	f001 fbaf 	bl	800269a <HAL_ADC_GetValue>
 8000f3c:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f001 fdd4 	bl	8002aec <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f44:	4628      	mov	r0, r5
 8000f46:	b005      	add	sp, #20
 8000f48:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000f4a:	f000 f8a6 	bl	800109a <Error_Handler>
 8000f4e:	e7dc      	b.n	8000f0a <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000f50:	f000 f8a3 	bl	800109a <Error_Handler>
 8000f54:	e7e2      	b.n	8000f1c <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000f56:	f000 f8a0 	bl	800109a <Error_Handler>
 8000f5a:	e7e3      	b.n	8000f24 <ADC_ReadChannels+0x34>
 8000f5c:	20001818 	.word	0x20001818

08000f60 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <SYS_InitMeasurement+0x8>)
 8000f62:	4a02      	ldr	r2, [pc, #8]	; (8000f6c <SYS_InitMeasurement+0xc>)
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	4770      	bx	lr
 8000f68:	20001818 	.word	0x20001818
 8000f6c:	40012400 	.word	0x40012400

08000f70 <SYS_GetBatteryLevel>:
{
 8000f70:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <SYS_GetBatteryLevel+0x38>)
 8000f74:	f7ff ffbc 	bl	8000ef0 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000f78:	b198      	cbz	r0, 8000fa2 <SYS_GetBatteryLevel+0x32>
 8000f7a:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <SYS_GetBatteryLevel+0x3c>)
 8000f7e:	8812      	ldrh	r2, [r2, #0]
 8000f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f84:	428a      	cmp	r2, r1
 8000f86:	d007      	beq.n	8000f98 <SYS_GetBatteryLevel+0x28>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000f88:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000f8c:	fb00 f002 	mul.w	r0, r0, r2
 8000f90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f94:	b280      	uxth	r0, r0
 8000f96:	e005      	b.n	8000fa4 <SYS_GetBatteryLevel+0x34>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <SYS_GetBatteryLevel+0x40>)
 8000f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f9e:	b280      	uxth	r0, r0
 8000fa0:	e000      	b.n	8000fa4 <SYS_GetBatteryLevel+0x34>
    batteryLevelmV = 0;
 8000fa2:	2000      	movs	r0, #0
}
 8000fa4:	bd08      	pop	{r3, pc}
 8000fa6:	bf00      	nop
 8000fa8:	b4002000 	.word	0xb4002000
 8000fac:	1fff75aa 	.word	0x1fff75aa
 8000fb0:	004c08d8 	.word	0x004c08d8

08000fb4 <SYS_GetTemperatureLevel>:
{
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b083      	sub	sp, #12
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fb8:	f7ff ffda 	bl	8000f70 <SYS_GetBatteryLevel>
 8000fbc:	4605      	mov	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fbe:	481f      	ldr	r0, [pc, #124]	; (800103c <SYS_GetTemperatureLevel+0x88>)
 8000fc0:	f7ff ff96 	bl	8000ef0 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <SYS_GetTemperatureLevel+0x8c>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <SYS_GetTemperatureLevel+0x90>)
 8000fca:	8812      	ldrh	r2, [r2, #0]
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d01a      	beq.n	8001006 <SYS_GetTemperatureLevel+0x52>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fd0:	fb00 f005 	mul.w	r0, r0, r5
 8000fd4:	0880      	lsrs	r0, r0, #2
 8000fd6:	4c1c      	ldr	r4, [pc, #112]	; (8001048 <SYS_GetTemperatureLevel+0x94>)
 8000fd8:	fba4 1400 	umull	r1, r4, r4, r0
 8000fdc:	ebc2 1054 	rsb	r0, r2, r4, lsr #5
 8000fe0:	2464      	movs	r4, #100	; 0x64
 8000fe2:	fb04 f400 	mul.w	r4, r4, r0
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	fb94 f4f3 	sdiv	r4, r4, r3
 8000fec:	341e      	adds	r4, #30
 8000fee:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000ff0:	9400      	str	r4, [sp, #0]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <SYS_GetTemperatureLevel+0x98>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f00f fb01 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 8000ffe:	0220      	lsls	r0, r4, #8
}
 8001000:	b200      	sxth	r0, r0
 8001002:	b003      	add	sp, #12
 8001004:	bd30      	pop	{r4, r5, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001006:	fb00 f005 	mul.w	r0, r0, r5
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <SYS_GetTemperatureLevel+0x9c>)
 800100c:	fba3 2300 	umull	r2, r3, r3, r0
 8001010:	1ac0      	subs	r0, r0, r3
 8001012:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8001016:	0ac0      	lsrs	r0, r0, #11
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	fb03 f300 	mul.w	r3, r3, r0
 8001020:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001024:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <SYS_GetTemperatureLevel+0xa0>)
 800102a:	fb80 2003 	smull	r2, r0, r0, r3
 800102e:	17dc      	asrs	r4, r3, #31
 8001030:	ebc4 24a0 	rsb	r4, r4, r0, asr #10
 8001034:	341e      	adds	r4, #30
 8001036:	b224      	sxth	r4, r4
 8001038:	e7da      	b.n	8000ff0 <SYS_GetTemperatureLevel+0x3c>
 800103a:	bf00      	nop
 800103c:	b0001000 	.word	0xb0001000
 8001040:	1fff75c8 	.word	0x1fff75c8
 8001044:	1fff75a8 	.word	0x1fff75a8
 8001048:	09ee009f 	.word	0x09ee009f
 800104c:	0801132c 	.word	0x0801132c
 8001050:	00100101 	.word	0x00100101
 8001054:	68db8bad 	.word	0x68db8bad

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001058:	b500      	push	{lr}
 800105a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001062:	f042 0204 	orr.w	r2, r2, #4
 8001066:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001068:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800106a:	f002 0204 	and.w	r2, r2, #4
 800106e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001070:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001074:	f042 0201 	orr.w	r2, r2, #1
 8001078:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800107a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001082:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2102      	movs	r1, #2
 8001088:	200f      	movs	r0, #15
 800108a:	f001 fe05 	bl	8002c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800108e:	200f      	movs	r0, #15
 8001090:	f001 fe36 	bl	8002d00 <HAL_NVIC_EnableIRQ>

}
 8001094:	b003      	add	sp, #12
 8001096:	f85d fb04 	ldr.w	pc, [sp], #4

0800109a <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x2>

0800109e <SystemClock_Config>:
{
 800109e:	b510      	push	{r4, lr}
 80010a0:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	2248      	movs	r2, #72	; 0x48
 80010a4:	2100      	movs	r1, #0
 80010a6:	a808      	add	r0, sp, #32
 80010a8:	f010 f86e 	bl	8011188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	2400      	movs	r4, #0
 80010ae:	9401      	str	r4, [sp, #4]
 80010b0:	9402      	str	r4, [sp, #8]
 80010b2:	9403      	str	r4, [sp, #12]
 80010b4:	9404      	str	r4, [sp, #16]
 80010b6:	9405      	str	r4, [sp, #20]
 80010b8:	9406      	str	r4, [sp, #24]
 80010ba:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80010bc:	f002 fa1a 	bl	80034f4 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80010c8:	f023 0318 	bic.w	r3, r3, #24
 80010cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010ea:	2324      	movs	r3, #36	; 0x24
 80010ec:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010ee:	2381      	movs	r3, #129	; 0x81
 80010f0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010f6:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010f8:	23b0      	movs	r3, #176	; 0xb0
 80010fa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	a808      	add	r0, sp, #32
 8001100:	f002 fb90 	bl	8003824 <HAL_RCC_OscConfig>
 8001104:	b970      	cbnz	r0, 8001124 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001106:	234f      	movs	r3, #79	; 0x4f
 8001108:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800110a:	2300      	movs	r3, #0
 800110c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001114:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001116:	2102      	movs	r1, #2
 8001118:	a801      	add	r0, sp, #4
 800111a:	f002 febf 	bl	8003e9c <HAL_RCC_ClockConfig>
 800111e:	b918      	cbnz	r0, 8001128 <SystemClock_Config+0x8a>
}
 8001120:	b01a      	add	sp, #104	; 0x68
 8001122:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001124:	f7ff ffb9 	bl	800109a <Error_Handler>
    Error_Handler();
 8001128:	f7ff ffb7 	bl	800109a <Error_Handler>

0800112c <main>:
{
 800112c:	b508      	push	{r3, lr}
  HAL_Init();
 800112e:	f001 f8cf 	bl	80022d0 <HAL_Init>
  SystemClock_Config();
 8001132:	f7ff ffb4 	bl	800109e <SystemClock_Config>
  MX_LoRaWAN_Init();
 8001136:	f000 fc95 	bl	8001a64 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 800113a:	f000 fc99 	bl	8001a70 <MX_LoRaWAN_Process>
  while (1)
 800113e:	e7fc      	b.n	800113a <main+0xe>

08001140 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001140:	b500      	push	{lr}
 8001142:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001144:	222c      	movs	r2, #44	; 0x2c
 8001146:	2100      	movs	r1, #0
 8001148:	a801      	add	r0, sp, #4
 800114a:	f010 f81d 	bl	8011188 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800114e:	4819      	ldr	r0, [pc, #100]	; (80011b4 <MX_RTC_Init+0x74>)
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_RTC_Init+0x78>)
 8001152:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001154:	231f      	movs	r3, #31
 8001156:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800115c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800115e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001160:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001164:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001166:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800116e:	f003 f9f1 	bl	8004554 <HAL_RTC_Init>
 8001172:	b9a8      	cbnz	r0, 80011a0 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <MX_RTC_Init+0x74>)
 8001176:	f003 fb27 	bl	80047c8 <HAL_RTCEx_SetSSRU_IT>
 800117a:	b9a0      	cbnz	r0, 80011a6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800117c:	2200      	movs	r2, #0
 800117e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001180:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001182:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001184:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001188:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800118a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001190:	a901      	add	r1, sp, #4
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <MX_RTC_Init+0x74>)
 8001194:	f003 fa3c 	bl	8004610 <HAL_RTC_SetAlarm_IT>
 8001198:	b940      	cbnz	r0, 80011ac <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119a:	b00d      	add	sp, #52	; 0x34
 800119c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011a0:	f7ff ff7b 	bl	800109a <Error_Handler>
 80011a4:	e7e6      	b.n	8001174 <MX_RTC_Init+0x34>
    Error_Handler();
 80011a6:	f7ff ff78 	bl	800109a <Error_Handler>
 80011aa:	e7e7      	b.n	800117c <MX_RTC_Init+0x3c>
    Error_Handler();
 80011ac:	f7ff ff75 	bl	800109a <Error_Handler>
}
 80011b0:	e7f3      	b.n	800119a <MX_RTC_Init+0x5a>
 80011b2:	bf00      	nop
 80011b4:	2000187c 	.word	0x2000187c
 80011b8:	40002800 	.word	0x40002800

080011bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011bc:	b510      	push	{r4, lr}
 80011be:	b090      	sub	sp, #64	; 0x40
 80011c0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c2:	2238      	movs	r2, #56	; 0x38
 80011c4:	2100      	movs	r1, #0
 80011c6:	a802      	add	r0, sp, #8
 80011c8:	f00f ffde 	bl	8011188 <memset>
  if(rtcHandle->Instance==RTC)
 80011cc:	6822      	ldr	r2, [r4, #0]
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_RTC_MspInit+0x7c>)
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011d4:	b010      	add	sp, #64	; 0x40
 80011d6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	a802      	add	r0, sp, #8
 80011e6:	f002 ffad 	bl	8004144 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	bb08      	cbnz	r0, 8001230 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80011f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001202:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800120c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	4611      	mov	r1, r2
 8001212:	2002      	movs	r0, #2
 8001214:	f001 fd40 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001218:	2002      	movs	r0, #2
 800121a:	f001 fd71 	bl	8002d00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	4611      	mov	r1, r2
 8001222:	202a      	movs	r0, #42	; 0x2a
 8001224:	f001 fd38 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001228:	202a      	movs	r0, #42	; 0x2a
 800122a:	f001 fd69 	bl	8002d00 <HAL_NVIC_EnableIRQ>
}
 800122e:	e7d1      	b.n	80011d4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001230:	f7ff ff33 	bl	800109a <Error_Handler>
 8001234:	e7da      	b.n	80011ec <HAL_RTC_MspInit+0x30>
 8001236:	bf00      	nop
 8001238:	40002800 	.word	0x40002800

0800123c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800123c:	4770      	bx	lr

0800123e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800123e:	4770      	bx	lr

08001240 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001242:	f001 f85b 	bl	80022fc <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001246:	2001      	movs	r0, #1
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <PWR_EnterStopMode+0x14>)
 800124a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800124e:	f002 f9b5 	bl	80035bc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001252:	bd08      	pop	{r3, pc}
 8001254:	58000400 	.word	0x58000400

08001258 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001258:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800125a:	f001 f857 	bl	800230c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800125e:	bd08      	pop	{r3, pc}

08001260 <PWR_ExitStopMode>:
{
 8001260:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001262:	f001 f853 	bl	800230c <HAL_ResumeTick>
  vcom_Resume();
 8001266:	f000 fbcb 	bl	8001a00 <vcom_Resume>
}
 800126a:	bd08      	pop	{r3, pc}

0800126c <PWR_EnterSleepMode>:
{
 800126c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800126e:	f001 f845 	bl	80022fc <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001272:	2101      	movs	r1, #1
 8001274:	2000      	movs	r0, #0
 8001276:	f002 f945 	bl	8003504 <HAL_PWR_EnterSLEEPMode>
}
 800127a:	bd08      	pop	{r3, pc}

0800127c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	4770      	bx	lr

0800127e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127e:	e7fe      	b.n	800127e <NMI_Handler>

08001280 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <HardFault_Handler>

08001282 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <MemManage_Handler>

08001284 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <BusFault_Handler>

08001286 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <UsageFault_Handler>

08001288 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	4770      	bx	lr

0800128c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	4770      	bx	lr

08001290 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001292:	4802      	ldr	r0, [pc, #8]	; (800129c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001294:	f003 fac4 	bl	8004820 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001298:	bd08      	pop	{r3, pc}
 800129a:	bf00      	nop
 800129c:	2000187c 	.word	0x2000187c

080012a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f002 f918 	bl	80034d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012a8:	bd08      	pop	{r3, pc}

080012aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012aa:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012ac:	2002      	movs	r0, #2
 80012ae:	f002 f913 	bl	80034d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012b2:	bd08      	pop	{r3, pc}

080012b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA1_Channel5_IRQHandler+0xc>)
 80012b8:	f001 ff38 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012bc:	bd08      	pop	{r3, pc}
 80012be:	bf00      	nop
 80012c0:	200018c0 	.word	0x200018c0

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c6:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USART2_IRQHandler+0xc>)
 80012c8:	f003 ff6a 	bl	80051a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012cc:	bd08      	pop	{r3, pc}
 80012ce:	bf00      	nop
 80012d0:	20001920 	.word	0x20001920

080012d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80012d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012d6:	4802      	ldr	r0, [pc, #8]	; (80012e0 <RTC_Alarm_IRQHandler+0xc>)
 80012d8:	f003 f8b6 	bl	8004448 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80012dc:	bd08      	pop	{r3, pc}
 80012de:	bf00      	nop
 80012e0:	2000187c 	.word	0x2000187c

080012e4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80012e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80012e6:	4802      	ldr	r0, [pc, #8]	; (80012f0 <SUBGHZ_Radio_IRQHandler+0xc>)
 80012e8:	f003 fd48 	bl	8004d7c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80012ec:	bd08      	pop	{r3, pc}
 80012ee:	bf00      	nop
 80012f0:	200018b4 	.word	0x200018b4

080012f4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80012f4:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_SUBGHZ_Init+0x18>)
 80012f8:	2308      	movs	r3, #8
 80012fa:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80012fc:	f003 fac6 	bl	800488c <HAL_SUBGHZ_Init>
 8001300:	b900      	cbnz	r0, 8001304 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001302:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001304:	f7ff fec9 	bl	800109a <Error_Handler>
}
 8001308:	e7fb      	b.n	8001302 <MX_SUBGHZ_Init+0xe>
 800130a:	bf00      	nop
 800130c:	200018b4 	.word	0x200018b4

08001310 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001310:	b500      	push	{lr}
 8001312:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001318:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001328:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	4611      	mov	r1, r2
 800132e:	2032      	movs	r0, #50	; 0x32
 8001330:	f001 fcb2 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001334:	2032      	movs	r0, #50	; 0x32
 8001336:	f001 fce3 	bl	8002d00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800133a:	b003      	add	sp, #12
 800133c:	f85d fb04 	ldr.w	pc, [sp], #4

08001340 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001340:	b40c      	push	{r2, r3}
 8001342:	b500      	push	{lr}
 8001344:	b083      	sub	sp, #12
 8001346:	ab04      	add	r3, sp, #16
 8001348:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800134c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800134e:	f00f fe31 	bl	8010fb4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001352:	b003      	add	sp, #12
 8001354:	f85d eb04 	ldr.w	lr, [sp], #4
 8001358:	b002      	add	sp, #8
 800135a:	4770      	bx	lr

0800135c <TimestampNow>:
{
 800135c:	b530      	push	{r4, r5, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001364:	a802      	add	r0, sp, #8
 8001366:	f00f fb9b 	bl	8010aa0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800136a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	9b02      	ldr	r3, [sp, #8]
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <TimestampNow+0x2c>)
 8001374:	2110      	movs	r1, #16
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff ffe2 	bl	8001340 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800137c:	4620      	mov	r0, r4
 800137e:	f7fe fefb 	bl	8000178 <strlen>
 8001382:	8028      	strh	r0, [r5, #0]
}
 8001384:	b005      	add	sp, #20
 8001386:	bd30      	pop	{r4, r5, pc}
 8001388:	08011350 	.word	0x08011350

0800138c <SystemApp_Init>:
{
 800138c:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800138e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001392:	6893      	ldr	r3, [r2, #8]
 8001394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001398:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800139a:	f00f fc01 	bl	8010ba0 <UTIL_TIMER_Init>
  DBG_Disable();
 800139e:	f000 f8ba 	bl	8001516 <DBG_Disable>
  DBG_ProbesInit();
 80013a2:	f000 f8d8 	bl	8001556 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 80013a6:	f00f f8b7 	bl	8010518 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <SystemApp_Init+0x40>)
 80013ac:	f00f f8ce 	bl	801054c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80013b0:	2002      	movs	r0, #2
 80013b2:	f00f f8d1 	bl	8010558 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80013b6:	f7ff fdd3 	bl	8000f60 <SYS_InitMeasurement>
  EnvSensors_Init();
 80013ba:	f000 f8e3 	bl	8001584 <EnvSensors_Init>
  UTIL_LPM_Init();
 80013be:	f00f f9d9 	bl	8010774 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80013c2:	2101      	movs	r1, #1
 80013c4:	4608      	mov	r0, r1
 80013c6:	f00f f9f5 	bl	80107b4 <UTIL_LPM_SetOffMode>
}
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	0800135d 	.word	0x0800135d

080013d0 <UTIL_SEQ_Idle>:
{
 80013d0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80013d2:	f00f fa05 	bl	80107e0 <UTIL_LPM_EnterLowPower>
}
 80013d6:	bd08      	pop	{r3, pc}

080013d8 <GetBatteryLevel>:
{
 80013d8:	b510      	push	{r4, lr}
 80013da:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80013dc:	f7ff fdc8 	bl	8000f70 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80013e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013e4:	4298      	cmp	r0, r3
 80013e6:	d80d      	bhi.n	8001404 <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 80013e8:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80013ec:	d315      	bcc.n	800141a <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80013ee:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80013f2:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80013f6:	0044      	lsls	r4, r0, #1
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <GetBatteryLevel+0x48>)
 80013fa:	fba0 3404 	umull	r3, r4, r0, r4
 80013fe:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8001402:	e000      	b.n	8001406 <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 8001404:	24fe      	movs	r4, #254	; 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001406:	9400      	str	r4, [sp, #0]
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <GetBatteryLevel+0x4c>)
 800140a:	2201      	movs	r2, #1
 800140c:	2100      	movs	r1, #0
 800140e:	2002      	movs	r0, #2
 8001410:	f00f f8f6 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8001414:	4620      	mov	r0, r4
 8001416:	b002      	add	sp, #8
 8001418:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 800141a:	2400      	movs	r4, #0
 800141c:	e7f3      	b.n	8001406 <GetBatteryLevel+0x2e>
 800141e:	bf00      	nop
 8001420:	1b4e81b5 	.word	0x1b4e81b5
 8001424:	0801135c 	.word	0x0801135c

08001428 <GetTemperatureLevel>:
{
 8001428:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800142a:	f7ff fdc3 	bl	8000fb4 <SYS_GetTemperatureLevel>
 800142e:	4603      	mov	r3, r0
 8001430:	2800      	cmp	r0, #0
 8001432:	db02      	blt.n	800143a <GetTemperatureLevel+0x12>
}
 8001434:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8001438:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800143a:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 800143e:	e7f9      	b.n	8001434 <GetTemperatureLevel+0xc>

08001440 <GetUniqueId>:
{
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <GetUniqueId+0x60>)
 8001446:	681b      	ldr	r3, [r3, #0]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d011      	beq.n	8001472 <GetUniqueId+0x32>
    id[7] = val & 0xFF;
 800144e:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001450:	0a1a      	lsrs	r2, r3, #8
 8001452:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001454:	0c1a      	lsrs	r2, r3, #16
 8001456:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001458:	0e1b      	lsrs	r3, r3, #24
 800145a:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <GetUniqueId+0x64>)
 800145e:	681a      	ldr	r2, [r3, #0]
    id[3] = val & 0xFF;
 8001460:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001466:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001468:	0c1a      	lsrs	r2, r3, #16
 800146a:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800146c:	0e1b      	lsrs	r3, r3, #24
 800146e:	7003      	strb	r3, [r0, #0]
}
 8001470:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001472:	f000 ff53 	bl	800231c <HAL_GetUIDw0>
 8001476:	4605      	mov	r5, r0
 8001478:	f000 ff5c 	bl	8002334 <HAL_GetUIDw2>
 800147c:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800147e:	f000 ff53 	bl	8002328 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001482:	0e2b      	lsrs	r3, r5, #24
 8001484:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001486:	0c2b      	lsrs	r3, r5, #16
 8001488:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 800148a:	0a2b      	lsrs	r3, r5, #8
 800148c:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800148e:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001490:	0e03      	lsrs	r3, r0, #24
 8001492:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001494:	0c03      	lsrs	r3, r0, #16
 8001496:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001498:	0a03      	lsrs	r3, r0, #8
 800149a:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800149c:	7020      	strb	r0, [r4, #0]
 800149e:	e7e7      	b.n	8001470 <GetUniqueId+0x30>
 80014a0:	1fff7580 	.word	0x1fff7580
 80014a4:	1fff7584 	.word	0x1fff7584

080014a8 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <GetDevAddr+0x24>)
 80014aa:	6818      	ldr	r0, [r3, #0]
  if (val == 0xFFFFFFFF)
 80014ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80014b0:	d000      	beq.n	80014b4 <GetDevAddr+0xc>
}
 80014b2:	4770      	bx	lr
{
 80014b4:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80014b6:	f000 ff31 	bl	800231c <HAL_GetUIDw0>
 80014ba:	4604      	mov	r4, r0
 80014bc:	f000 ff34 	bl	8002328 <HAL_GetUIDw1>
 80014c0:	4044      	eors	r4, r0
 80014c2:	f000 ff37 	bl	8002334 <HAL_GetUIDw2>
 80014c6:	4060      	eors	r0, r4
}
 80014c8:	bd10      	pop	{r4, pc}
 80014ca:	bf00      	nop
 80014cc:	1fff7580 	.word	0x1fff7580

080014d0 <UTIL_ADV_TRACE_PreSendHook>:
{
 80014d0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80014d2:	2101      	movs	r1, #1
 80014d4:	2002      	movs	r0, #2
 80014d6:	f00f f957 	bl	8010788 <UTIL_LPM_SetStopMode>
}
 80014da:	bd08      	pop	{r3, pc}

080014dc <UTIL_ADV_TRACE_PostSendHook>:
{
 80014dc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80014de:	2100      	movs	r1, #0
 80014e0:	2002      	movs	r0, #2
 80014e2:	f00f f951 	bl	8010788 <UTIL_LPM_SetStopMode>
}
 80014e6:	bd08      	pop	{r3, pc}

080014e8 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80014e8:	2000      	movs	r0, #0
 80014ea:	4770      	bx	lr

080014ec <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80014ec:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80014ee:	f000 f867 	bl	80015c0 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80014f2:	bd08      	pop	{r3, pc}

080014f4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80014f4:	b500      	push	{lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80014fa:	9801      	ldr	r0, [sp, #4]
 80014fc:	f000 f93e 	bl	800177c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001500:	b003      	add	sp, #12
 8001502:	f85d fb04 	ldr.w	pc, [sp], #4

08001506 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001506:	b508      	push	{r3, lr}
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 8001508:	f000 ff1a 	bl	8002340 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800150c:	f000 ff20 	bl	8002350 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001510:	f000 ff26 	bl	8002360 <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001514:	bd08      	pop	{r3, pc}

08001516 <DBG_Disable>:
{
 8001516:	b510      	push	{r4, lr}
 8001518:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	2400      	movs	r4, #0
 800151c:	9404      	str	r4, [sp, #16]
 800151e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8001520:	2303      	movs	r3, #3
 8001522:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001524:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8001526:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800152a:	9301      	str	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001540:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	a901      	add	r1, sp, #4
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f001 fe84 	bl	8003254 <HAL_GPIO_Init>
  DBG_ConfigForLpm(0);
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff ffda 	bl	8001506 <DBG_ConfigForLpm>
}
 8001552:	b006      	add	sp, #24
 8001554:	bd10      	pop	{r4, pc}

08001556 <DBG_ProbesInit>:
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001556:	4770      	bx	lr

08001558 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <EnvSensors_Read+0x18>)
 800155a:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <EnvSensors_Read+0x1c>)
 800155e:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <EnvSensors_Read+0x20>)
 8001562:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <EnvSensors_Read+0x24>)
 8001566:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <EnvSensors_Read+0x28>)
 800156a:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 800156c:	2000      	movs	r0, #0
 800156e:	4770      	bx	lr
 8001570:	42480000 	.word	0x42480000
 8001574:	41900000 	.word	0x41900000
 8001578:	447a0000 	.word	0x447a0000
 800157c:	003e090d 	.word	0x003e090d
 8001580:	000503ab 	.word	0x000503ab

08001584 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8001584:	2000      	movs	r0, #0
 8001586:	4770      	bx	lr

08001588 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <TIMER_IF_SetTimerContext+0xc>)
 800158a:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800158c:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800158e:	4b02      	ldr	r3, [pc, #8]	; (8001598 <TIMER_IF_SetTimerContext+0x10>)
 8001590:	6018      	str	r0, [r3, #0]
}
 8001592:	4770      	bx	lr
 8001594:	40002800 	.word	0x40002800
 8001598:	200000f8 	.word	0x200000f8

0800159c <TIMER_IF_GetTimerContext>:
}
 800159c:	4b01      	ldr	r3, [pc, #4]	; (80015a4 <TIMER_IF_GetTimerContext+0x8>)
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200000f8 	.word	0x200000f8

080015a8 <TIMER_IF_GetTimerElapsedTime>:
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <TIMER_IF_GetTimerElapsedTime+0x10>)
 80015aa:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80015ac:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80015ae:	4a03      	ldr	r2, [pc, #12]	; (80015bc <TIMER_IF_GetTimerElapsedTime+0x14>)
 80015b0:	6810      	ldr	r0, [r2, #0]
}
 80015b2:	1a18      	subs	r0, r3, r0
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40002800 	.word	0x40002800
 80015bc:	200000f8 	.word	0x200000f8

080015c0 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <TIMER_IF_GetTimerValue+0x14>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b11b      	cbz	r3, 80015ce <TIMER_IF_GetTimerValue+0xe>
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <TIMER_IF_GetTimerValue+0x18>)
 80015c8:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80015ca:	43c0      	mvns	r0, r0
 80015cc:	4770      	bx	lr
  uint32_t ret = 0;
 80015ce:	2000      	movs	r0, #0
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200000f4 	.word	0x200000f4
 80015d8:	40002800 	.word	0x40002800

080015dc <TIMER_IF_GetMinimumTimeout>:
}
 80015dc:	2003      	movs	r0, #3
 80015de:	4770      	bx	lr

080015e0 <TIMER_IF_Convert_ms2Tick>:
{
 80015e0:	b508      	push	{r3, lr}
 80015e2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80015e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e8:	2300      	movs	r3, #0
 80015ea:	0280      	lsls	r0, r0, #10
 80015ec:	0d89      	lsrs	r1, r1, #22
 80015ee:	f7ff fab5 	bl	8000b5c <__aeabi_uldivmod>
}
 80015f2:	bd08      	pop	{r3, pc}

080015f4 <TIMER_IF_Convert_Tick2ms>:
{
 80015f4:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80015f6:	0142      	lsls	r2, r0, #5
 80015f8:	0ec3      	lsrs	r3, r0, #27
 80015fa:	1a12      	subs	r2, r2, r0
 80015fc:	f163 0300 	sbc.w	r3, r3, #0
 8001600:	0099      	lsls	r1, r3, #2
 8001602:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001606:	0094      	lsls	r4, r2, #2
 8001608:	1822      	adds	r2, r4, r0
 800160a:	f141 0300 	adc.w	r3, r1, #0
 800160e:	00d8      	lsls	r0, r3, #3
 8001610:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8001614:	00d1      	lsls	r1, r2, #3
 8001616:	0a8a      	lsrs	r2, r1, #10
}
 8001618:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 800161c:	bc10      	pop	{r4}
 800161e:	4770      	bx	lr

08001620 <TIMER_IF_StopTimer>:
{
 8001620:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <TIMER_IF_StopTimer+0x20>)
 8001624:	2201      	movs	r2, #1
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001628:	4c06      	ldr	r4, [pc, #24]	; (8001644 <TIMER_IF_StopTimer+0x24>)
 800162a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162e:	4620      	mov	r0, r4
 8001630:	f002 feca 	bl	80043c8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	6323      	str	r3, [r4, #48]	; 0x30
}
 800163a:	2000      	movs	r0, #0
 800163c:	bd10      	pop	{r4, pc}
 800163e:	bf00      	nop
 8001640:	40002800 	.word	0x40002800
 8001644:	2000187c 	.word	0x2000187c

08001648 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001648:	b508      	push	{r3, lr}
 800164a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800164c:	2102      	movs	r1, #2
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001650:	f003 f8fb 	bl	800484a <HAL_RTCEx_BKUPWrite>
}
 8001654:	bd08      	pop	{r3, pc}
 8001656:	bf00      	nop
 8001658:	2000187c 	.word	0x2000187c

0800165c <TIMER_IF_Init>:
{
 800165c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <TIMER_IF_Init+0x40>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b10b      	cbz	r3, 8001668 <TIMER_IF_Init+0xc>
}
 8001664:	2000      	movs	r0, #0
 8001666:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001668:	4c0d      	ldr	r4, [pc, #52]	; (80016a0 <TIMER_IF_Init+0x44>)
 800166a:	f04f 35ff 	mov.w	r5, #4294967295
 800166e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001670:	f7ff fd66 	bl	8001140 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001674:	f7ff ffd4 	bl	8001620 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4620      	mov	r0, r4
 800167e:	f002 fea3 	bl	80043c8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001682:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001684:	4620      	mov	r0, r4
 8001686:	f003 f87f 	bl	8004788 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff ffdc 	bl	8001648 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001690:	f7ff ff7a 	bl	8001588 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <TIMER_IF_Init+0x40>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e7e3      	b.n	8001664 <TIMER_IF_Init+0x8>
 800169c:	200000f4 	.word	0x200000f4
 80016a0:	2000187c 	.word	0x2000187c

080016a4 <TIMER_IF_BkUp_Write_Seconds>:
{
 80016a4:	b508      	push	{r3, lr}
 80016a6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80016a8:	2100      	movs	r1, #0
 80016aa:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80016ac:	f003 f8cd 	bl	800484a <HAL_RTCEx_BKUPWrite>
}
 80016b0:	bd08      	pop	{r3, pc}
 80016b2:	bf00      	nop
 80016b4:	2000187c 	.word	0x2000187c

080016b8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80016b8:	b508      	push	{r3, lr}
 80016ba:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80016bc:	2101      	movs	r1, #1
 80016be:	4802      	ldr	r0, [pc, #8]	; (80016c8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80016c0:	f003 f8c3 	bl	800484a <HAL_RTCEx_BKUPWrite>
}
 80016c4:	bd08      	pop	{r3, pc}
 80016c6:	bf00      	nop
 80016c8:	2000187c 	.word	0x2000187c

080016cc <TIMER_IF_StartTimer>:
{
 80016cc:	b510      	push	{r4, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80016d2:	222c      	movs	r2, #44	; 0x2c
 80016d4:	2100      	movs	r1, #0
 80016d6:	a801      	add	r0, sp, #4
 80016d8:	f00f fd56 	bl	8011188 <memset>
  TIMER_IF_StopTimer();
 80016dc:	f7ff ffa0 	bl	8001620 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <TIMER_IF_StartTimer+0x48>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80016e6:	2300      	movs	r3, #0
 80016e8:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80016ea:	43e4      	mvns	r4, r4
 80016ec:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016ee:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80016f0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016f4:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80016f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fa:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016fc:	2201      	movs	r2, #1
 80016fe:	a901      	add	r1, sp, #4
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <TIMER_IF_StartTimer+0x4c>)
 8001702:	f002 ff85 	bl	8004610 <HAL_RTC_SetAlarm_IT>
 8001706:	b910      	cbnz	r0, 800170e <TIMER_IF_StartTimer+0x42>
}
 8001708:	2000      	movs	r0, #0
 800170a:	b00c      	add	sp, #48	; 0x30
 800170c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800170e:	f7ff fcc4 	bl	800109a <Error_Handler>
 8001712:	e7f9      	b.n	8001708 <TIMER_IF_StartTimer+0x3c>
 8001714:	200000f8 	.word	0x200000f8
 8001718:	2000187c 	.word	0x2000187c

0800171c <TIMER_IF_BkUp_Read_MSBticks>:
{
 800171c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800171e:	2102      	movs	r1, #2
 8001720:	4801      	ldr	r0, [pc, #4]	; (8001728 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001722:	f003 f899 	bl	8004858 <HAL_RTCEx_BKUPRead>
}
 8001726:	bd08      	pop	{r3, pc}
 8001728:	2000187c 	.word	0x2000187c

0800172c <TIMER_IF_GetTime>:
{
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	4605      	mov	r5, r0
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <TIMER_IF_GetTime+0x2c>)
 8001732:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001734:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001736:	f7ff fff1 	bl	800171c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800173a:	2200      	movs	r2, #0
 800173c:	1912      	adds	r2, r2, r4
 800173e:	f140 0300 	adc.w	r3, r0, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001742:	0a94      	lsrs	r4, r2, #10
 8001744:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001748:	f3c2 0009 	ubfx	r0, r2, #0, #10
 800174c:	f7ff ff52 	bl	80015f4 <TIMER_IF_Convert_Tick2ms>
 8001750:	8028      	strh	r0, [r5, #0]
}
 8001752:	4620      	mov	r0, r4
 8001754:	bd38      	pop	{r3, r4, r5, pc}
 8001756:	bf00      	nop
 8001758:	40002800 	.word	0x40002800

0800175c <TIMER_IF_BkUp_Read_Seconds>:
{
 800175c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800175e:	2100      	movs	r1, #0
 8001760:	4801      	ldr	r0, [pc, #4]	; (8001768 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001762:	f003 f879 	bl	8004858 <HAL_RTCEx_BKUPRead>
}
 8001766:	bd08      	pop	{r3, pc}
 8001768:	2000187c 	.word	0x2000187c

0800176c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800176c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800176e:	2101      	movs	r1, #1
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001772:	f003 f871 	bl	8004858 <HAL_RTCEx_BKUPRead>
}
 8001776:	bd08      	pop	{r3, pc}
 8001778:	2000187c 	.word	0x2000187c

0800177c <TIMER_IF_DelayMs>:
{
 800177c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800177e:	f7ff ff2f 	bl	80015e0 <TIMER_IF_Convert_ms2Tick>
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <TIMER_IF_DelayMs+0x20>)
 8001784:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001786:	43d2      	mvns	r2, r2
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <TIMER_IF_DelayMs+0x20>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	4283      	cmp	r3, r0
 8001792:	d201      	bcs.n	8001798 <TIMER_IF_DelayMs+0x1c>
    __NOP();
 8001794:	bf00      	nop
 8001796:	e7f7      	b.n	8001788 <TIMER_IF_DelayMs+0xc>
}
 8001798:	bd08      	pop	{r3, pc}
 800179a:	bf00      	nop
 800179c:	40002800 	.word	0x40002800

080017a0 <HAL_RTC_AlarmAEventCallback>:
{
 80017a0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80017a2:	f00f fb29 	bl	8010df8 <UTIL_TIMER_IRQ_Handler>
}
 80017a6:	bd08      	pop	{r3, pc}

080017a8 <HAL_RTCEx_SSRUEventCallback>:
{
 80017a8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80017aa:	f7ff ffb7 	bl	800171c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80017ae:	3001      	adds	r0, #1
 80017b0:	f7ff ff4a 	bl	8001648 <TIMER_IF_BkUp_Write_MSBticks>
}
 80017b4:	bd08      	pop	{r3, pc}
	...

080017b8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ba:	4817      	ldr	r0, [pc, #92]	; (8001818 <MX_USART2_UART_Init+0x60>)
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_USART2_UART_Init+0x64>)
 80017be:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80017c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80017c4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	2300      	movs	r3, #0
 80017c8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017cc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ce:	220c      	movs	r2, #12
 80017d0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017da:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017dc:	f004 fb41 	bl	8005e62 <HAL_UART_Init>
 80017e0:	b970      	cbnz	r0, 8001800 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_USART2_UART_Init+0x60>)
 80017e6:	f004 fcee 	bl	80061c6 <HAL_UARTEx_SetTxFifoThreshold>
 80017ea:	b960      	cbnz	r0, 8001806 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	480a      	ldr	r0, [pc, #40]	; (8001818 <MX_USART2_UART_Init+0x60>)
 80017f0:	f004 fd0e 	bl	8006210 <HAL_UARTEx_SetRxFifoThreshold>
 80017f4:	b950      	cbnz	r0, 800180c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <MX_USART2_UART_Init+0x60>)
 80017f8:	f004 fcc1 	bl	800617e <HAL_UARTEx_EnableFifoMode>
 80017fc:	b948      	cbnz	r0, 8001812 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001800:	f7ff fc4b 	bl	800109a <Error_Handler>
 8001804:	e7ed      	b.n	80017e2 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001806:	f7ff fc48 	bl	800109a <Error_Handler>
 800180a:	e7ef      	b.n	80017ec <MX_USART2_UART_Init+0x34>
    Error_Handler();
 800180c:	f7ff fc45 	bl	800109a <Error_Handler>
 8001810:	e7f1      	b.n	80017f6 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001812:	f7ff fc42 	bl	800109a <Error_Handler>
}
 8001816:	e7f2      	b.n	80017fe <MX_USART2_UART_Init+0x46>
 8001818:	20001920 	.word	0x20001920
 800181c:	40004400 	.word	0x40004400

08001820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001820:	b530      	push	{r4, r5, lr}
 8001822:	b097      	sub	sp, #92	; 0x5c
 8001824:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	2100      	movs	r1, #0
 8001828:	9111      	str	r1, [sp, #68]	; 0x44
 800182a:	9112      	str	r1, [sp, #72]	; 0x48
 800182c:	9113      	str	r1, [sp, #76]	; 0x4c
 800182e:	9114      	str	r1, [sp, #80]	; 0x50
 8001830:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	a803      	add	r0, sp, #12
 8001836:	f00f fca7 	bl	8011188 <memset>
  if(uartHandle->Instance==USART2)
 800183a:	6822      	ldr	r2, [r4, #0]
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_UART_MspInit+0xd4>)
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001842:	b017      	add	sp, #92	; 0x5c
 8001844:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001846:	2302      	movs	r3, #2
 8001848:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_UART_MspInit+0xd8>)
 800184c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184e:	a803      	add	r0, sp, #12
 8001850:	f002 fc78 	bl	8004144 <HAL_RCCEx_PeriphCLKConfig>
 8001854:	2800      	cmp	r0, #0
 8001856:	d144      	bne.n	80018e2 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800185e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001862:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001866:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800186a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800186c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800186e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800187e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001880:	230c      	movs	r3, #12
 8001882:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2500      	movs	r5, #0
 800188a:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001890:	2307      	movs	r3, #7
 8001892:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	a911      	add	r1, sp, #68	; 0x44
 8001896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189a:	f001 fcdb 	bl	8003254 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <HAL_UART_MspInit+0xdc>)
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_UART_MspInit+0xe0>)
 80018a2:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80018a4:	2314      	movs	r3, #20
 80018a6:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a8:	2310      	movs	r3, #16
 80018aa:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ac:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018b6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018ba:	f001 faa9 	bl	8002e10 <HAL_DMA_Init>
 80018be:	b998      	cbnz	r0, 80018e8 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80018c0:	2110      	movs	r1, #16
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <HAL_UART_MspInit+0xdc>)
 80018c4:	f001 fca6 	bl	8003214 <HAL_DMA_ConfigChannelAttributes>
 80018c8:	b988      	cbnz	r0, 80018ee <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_UART_MspInit+0xdc>)
 80018cc:	67a3      	str	r3, [r4, #120]	; 0x78
 80018ce:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2102      	movs	r1, #2
 80018d4:	2025      	movs	r0, #37	; 0x25
 80018d6:	f001 f9df 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018da:	2025      	movs	r0, #37	; 0x25
 80018dc:	f001 fa10 	bl	8002d00 <HAL_NVIC_EnableIRQ>
}
 80018e0:	e7af      	b.n	8001842 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80018e2:	f7ff fbda 	bl	800109a <Error_Handler>
 80018e6:	e7b7      	b.n	8001858 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80018e8:	f7ff fbd7 	bl	800109a <Error_Handler>
 80018ec:	e7e8      	b.n	80018c0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80018ee:	f7ff fbd4 	bl	800109a <Error_Handler>
 80018f2:	e7ea      	b.n	80018ca <HAL_UART_MspInit+0xaa>
 80018f4:	40004400 	.word	0x40004400
 80018f8:	000c0004 	.word	0x000c0004
 80018fc:	200018c0 	.word	0x200018c0
 8001900:	40020058 	.word	0x40020058

08001904 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001904:	6802      	ldr	r2, [r0, #0]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_UART_MspDeInit+0x34>)
 8001908:	429a      	cmp	r2, r3
 800190a:	d000      	beq.n	800190e <HAL_UART_MspDeInit+0xa>
 800190c:	4770      	bx	lr
{
 800190e:	b510      	push	{r4, lr}
 8001910:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001916:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800191e:	210c      	movs	r1, #12
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001924:	f001 fd4e 	bl	80033c4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001928:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800192a:	f001 fae3 	bl	8002ef4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800192e:	2025      	movs	r0, #37	; 0x25
 8001930:	f001 f9f4 	bl	8002d1c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001934:	bd10      	pop	{r4, pc}
 8001936:	bf00      	nop
 8001938:	40004400 	.word	0x40004400

0800193c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800193c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <vcom_Init+0x20>)
 8001940:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001942:	f7ff fb89 	bl	8001058 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001946:	f7ff ff37 	bl	80017b8 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <vcom_Init+0x24>)
 800194c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001950:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001958:	2000      	movs	r0, #0
 800195a:	bd08      	pop	{r3, pc}
 800195c:	20000100 	.word	0x20000100
 8001960:	58000800 	.word	0x58000800

08001964 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001964:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001970:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001974:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800197a:	4804      	ldr	r0, [pc, #16]	; (800198c <vcom_DeInit+0x28>)
 800197c:	f7ff ffc2 	bl	8001904 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001980:	200f      	movs	r0, #15
 8001982:	f001 f9cb 	bl	8002d1c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001986:	2000      	movs	r0, #0
 8001988:	bd08      	pop	{r3, pc}
 800198a:	bf00      	nop
 800198c:	20001920 	.word	0x20001920

08001990 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001990:	b508      	push	{r3, lr}
 8001992:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001994:	4601      	mov	r1, r0
 8001996:	4802      	ldr	r0, [pc, #8]	; (80019a0 <vcom_Trace_DMA+0x10>)
 8001998:	f003 fb2e 	bl	8004ff8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800199c:	2000      	movs	r0, #0
 800199e:	bd08      	pop	{r3, pc}
 80019a0:	20001920 	.word	0x20001920

080019a4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80019a4:	b510      	push	{r4, lr}
 80019a6:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <vcom_ReceiveInit+0x50>)
 80019aa:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80019ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80019b2:	ab02      	add	r3, sp, #8
 80019b4:	e913 0006 	ldmdb	r3, {r1, r2}
 80019b8:	480f      	ldr	r0, [pc, #60]	; (80019f8 <vcom_ReceiveInit+0x54>)
 80019ba:	f004 fb88 	bl	80060ce <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <vcom_ReceiveInit+0x54>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69da      	ldr	r2, [r3, #28]
 80019c4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80019c8:	d1f9      	bne.n	80019be <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80019ca:	69da      	ldr	r2, [r3, #28]
 80019cc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80019d0:	d0fb      	beq.n	80019ca <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019d8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80019da:	4c07      	ldr	r4, [pc, #28]	; (80019f8 <vcom_ReceiveInit+0x54>)
 80019dc:	4620      	mov	r0, r4
 80019de:	f004 fbb7 	bl	8006150 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	4905      	ldr	r1, [pc, #20]	; (80019fc <vcom_ReceiveInit+0x58>)
 80019e6:	4620      	mov	r0, r4
 80019e8:	f004 fb02 	bl	8005ff0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80019ec:	2000      	movs	r0, #0
 80019ee:	b002      	add	sp, #8
 80019f0:	bd10      	pop	{r4, pc}
 80019f2:	bf00      	nop
 80019f4:	200000fc 	.word	0x200000fc
 80019f8:	20001920 	.word	0x20001920
 80019fc:	200019b0 	.word	0x200019b0

08001a00 <vcom_Resume>:

void vcom_Resume(void)
{
 8001a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <vcom_Resume+0x20>)
 8001a04:	f004 fa2d 	bl	8005e62 <HAL_UART_Init>
 8001a08:	b920      	cbnz	r0, 8001a14 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <vcom_Resume+0x24>)
 8001a0c:	f001 fa00 	bl	8002e10 <HAL_DMA_Init>
 8001a10:	b918      	cbnz	r0, 8001a1a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001a12:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a14:	f7ff fb41 	bl	800109a <Error_Handler>
 8001a18:	e7f7      	b.n	8001a0a <vcom_Resume+0xa>
    Error_Handler();
 8001a1a:	f7ff fb3e 	bl	800109a <Error_Handler>
}
 8001a1e:	e7f8      	b.n	8001a12 <vcom_Resume+0x12>
 8001a20:	20001920 	.word	0x20001920
 8001a24:	200018c0 	.word	0x200018c0

08001a28 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001a2a:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_UART_TxCpltCallback+0xc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2000      	movs	r0, #0
 8001a30:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001a32:	bd08      	pop	{r3, pc}
 8001a34:	20000100 	.word	0x20000100

08001a38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_UART_RxCpltCallback+0x24>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b12b      	cbz	r3, 8001a4e <HAL_UART_RxCpltCallback+0x16>
 8001a42:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001a46:	b912      	cbnz	r2, 8001a4e <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <HAL_UART_RxCpltCallback+0x28>)
 8001a4c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_UART_RxCpltCallback+0x28>)
 8001a52:	4620      	mov	r0, r4
 8001a54:	f004 facc 	bl	8005ff0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200000fc 	.word	0x200000fc
 8001a60:	200019b0 	.word	0x200019b0

08001a64 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001a66:	f7ff fc91 	bl	800138c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001a6a:	f000 f9b7 	bl	8001ddc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001a6e:	bd08      	pop	{r3, pc}

08001a70 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001a70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a72:	f04f 30ff 	mov.w	r0, #4294967295
 8001a76:	f00e ff1f 	bl	80108b8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001a7a:	bd08      	pop	{r3, pc}

08001a7c <OnTxTimerEvent>:

  /* USER CODE END SendTxData_1 */
}

static void OnTxTimerEvent(void *context)
{
 8001a7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2002      	movs	r0, #2
 8001a82:	f00e fee3 	bl	801084c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8001a86:	4802      	ldr	r0, [pc, #8]	; (8001a90 <OnTxTimerEvent+0x14>)
 8001a88:	f00f f956 	bl	8010d38 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8001a8c:	bd08      	pop	{r3, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000240 	.word	0x20000240

08001a94 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 8001a94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001a96:	2100      	movs	r1, #0
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f00e fed7 	bl	801084c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8001a9e:	bd08      	pop	{r3, pc}

08001aa0 <OnTxData>:
  if ((params != NULL))
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d03f      	beq.n	8001b24 <OnTxData+0x84>
{
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8001aaa:	7803      	ldrb	r3, [r0, #0]
 8001aac:	b90b      	cbnz	r3, 8001ab2 <OnTxData+0x12>
}
 8001aae:	b004      	add	sp, #16
 8001ab0:	bd10      	pop	{r4, pc}
      BSP_LED_On(LED_GREEN) ;
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 fabc 	bl	8002030 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 8001ab8:	481b      	ldr	r0, [pc, #108]	; (8001b28 <OnTxData+0x88>)
 8001aba:	f00f f93d 	bl	8010d38 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <OnTxData+0x8c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f00e fd9b 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001aca:	7b23      	ldrb	r3, [r4, #12]
 8001acc:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8001ad0:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8001ad4:	9103      	str	r1, [sp, #12]
 8001ad6:	9202      	str	r2, [sp, #8]
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	68a3      	ldr	r3, [r4, #8]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <OnTxData+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f00e fd8b 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <OnTxData+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	4611      	mov	r1, r2
 8001af0:	2003      	movs	r0, #3
 8001af2:	f00e fd85 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001af6:	78a3      	ldrb	r3, [r4, #2]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d10c      	bne.n	8001b16 <OnTxData+0x76>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001afc:	78e3      	ldrb	r3, [r4, #3]
 8001afe:	b143      	cbz	r3, 8001b12 <OnTxData+0x72>
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <OnTxData+0x98>)
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <OnTxData+0x9c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	4611      	mov	r1, r2
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f00e fd78 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 8001b10:	e7cd      	b.n	8001aae <OnTxData+0xe>
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <OnTxData+0xa0>)
 8001b14:	e7f5      	b.n	8001b02 <OnTxData+0x62>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <OnTxData+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f00e fd6f 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8001b22:	e7c4      	b.n	8001aae <OnTxData+0xe>
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000228 	.word	0x20000228
 8001b2c:	080113c4 	.word	0x080113c4
 8001b30:	080113f8 	.word	0x080113f8
 8001b34:	0801142c 	.word	0x0801142c
 8001b38:	080113c0 	.word	0x080113c0
 8001b3c:	0801143c 	.word	0x0801143c
 8001b40:	080113b8 	.word	0x080113b8
 8001b44:	08011450 	.word	0x08011450

08001b48 <OnRxData>:
{
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	460c      	mov	r4, r1
  if ((appData != NULL) || (params != NULL))
 8001b4e:	4605      	mov	r5, r0
 8001b50:	b370      	cbz	r0, 8001bb0 <OnRxData+0x68>
    BSP_LED_On(LED_BLUE) ;
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 fa6c 	bl	8002030 <BSP_LED_On>
    UTIL_TIMER_Start(&RxLedTimer);
 8001b58:	4830      	ldr	r0, [pc, #192]	; (8001c1c <OnRxData+0xd4>)
 8001b5a:	f00f f8ed 	bl	8010d38 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <OnRxData+0xd8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	4611      	mov	r1, r2
 8001b64:	2002      	movs	r0, #2
 8001b66:	f00e fd4b 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8001b6a:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8001b6e:	782b      	ldrb	r3, [r5, #0]
 8001b70:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8001b74:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8001b78:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8001b7c:	9605      	str	r6, [sp, #20]
 8001b7e:	9004      	str	r0, [sp, #16]
 8001b80:	9103      	str	r1, [sp, #12]
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <OnRxData+0xdc>)
 8001b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	68a3      	ldr	r3, [r4, #8]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <OnRxData+0xe0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	4611      	mov	r1, r2
 8001b96:	2003      	movs	r0, #3
 8001b98:	f00e fd32 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8001b9c:	782b      	ldrb	r3, [r5, #0]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d01d      	beq.n	8001bde <OnRxData+0x96>
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d102      	bne.n	8001bac <OnRxData+0x64>
        if (appData->BufferSize == 1)
 8001ba6:	786b      	ldrb	r3, [r5, #1]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d004      	beq.n	8001bb6 <OnRxData+0x6e>
}
 8001bac:	b006      	add	sp, #24
 8001bae:	bd70      	pop	{r4, r5, r6, pc}
  if ((appData != NULL) || (params != NULL))
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d1ce      	bne.n	8001b52 <OnRxData+0xa>
  }
 8001bb4:	e7fa      	b.n	8001bac <OnRxData+0x64>
          switch (appData->Buffer[0])
 8001bb6:	686b      	ldr	r3, [r5, #4]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d007      	beq.n	8001bce <OnRxData+0x86>
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d009      	beq.n	8001bd6 <OnRxData+0x8e>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f2      	bne.n	8001bac <OnRxData+0x64>
              LmHandlerRequestClass(CLASS_A);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f004 fcf6 	bl	80065b8 <LmHandlerRequestClass>
              break;
 8001bcc:	e7ee      	b.n	8001bac <OnRxData+0x64>
              LmHandlerRequestClass(CLASS_B);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f004 fcf2 	bl	80065b8 <LmHandlerRequestClass>
              break;
 8001bd4:	e7ea      	b.n	8001bac <OnRxData+0x64>
              LmHandlerRequestClass(CLASS_C);
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f004 fcee 	bl	80065b8 <LmHandlerRequestClass>
              break;
 8001bdc:	e7e6      	b.n	8001bac <OnRxData+0x64>
        if (appData->BufferSize == 1)
 8001bde:	786b      	ldrb	r3, [r5, #1]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d1e3      	bne.n	8001bac <OnRxData+0x64>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8001be4:	686b      	ldr	r3, [r5, #4]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <OnRxData+0xe4>)
 8001bee:	7013      	strb	r3, [r2, #0]
          if (AppLedStateOn == RESET)
 8001bf0:	b94b      	cbnz	r3, 8001c06 <OnRxData+0xbe>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <OnRxData+0xe8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f00e fd01 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f000 fa26 	bl	8002050 <BSP_LED_Off>
 8001c04:	e7d2      	b.n	8001bac <OnRxData+0x64>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <OnRxData+0xec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f00e fcf7 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 8001c12:	2002      	movs	r0, #2
 8001c14:	f000 fa0c 	bl	8002030 <BSP_LED_On>
}
 8001c18:	e7c8      	b.n	8001bac <OnRxData+0x64>
 8001c1a:	bf00      	nop
 8001c1c:	20000210 	.word	0x20000210
 8001c20:	08011460 	.word	0x08011460
 8001c24:	08011634 	.word	0x08011634
 8001c28:	08011494 	.word	0x08011494
 8001c2c:	200001f6 	.word	0x200001f6
 8001c30:	080114dc 	.word	0x080114dc
 8001c34:	080114e8 	.word	0x080114e8

08001c38 <OnRxTimerLedEvent>:
{
 8001c38:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_BLUE) ;
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 fa08 	bl	8002050 <BSP_LED_Off>
}
 8001c40:	bd08      	pop	{r3, pc}

08001c42 <OnTxTimerLedEvent>:
{
 8001c42:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN) ;
 8001c44:	2001      	movs	r0, #1
 8001c46:	f000 fa03 	bl	8002050 <BSP_LED_Off>
}
 8001c4a:	bd08      	pop	{r3, pc}

08001c4c <OnJoinRequest>:
  if (joinParams != NULL)
 8001c4c:	b340      	cbz	r0, 8001ca0 <OnJoinRequest+0x54>
{
 8001c4e:	b510      	push	{r4, lr}
 8001c50:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001c52:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8001c56:	b9e3      	cbnz	r3, 8001c92 <OnJoinRequest+0x46>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001c58:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <OnJoinRequest+0x58>)
 8001c5a:	f00f f80b 	bl	8010c74 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f000 f9f6 	bl	8002050 <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <OnJoinRequest+0x5c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	4611      	mov	r1, r2
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f00e fcc8 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001c70:	78a3      	ldrb	r3, [r4, #2]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d006      	beq.n	8001c84 <OnJoinRequest+0x38>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <OnJoinRequest+0x60>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f00e fcbf 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 8001c82:	e00c      	b.n	8001c9e <OnJoinRequest+0x52>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <OnJoinRequest+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	4611      	mov	r1, r2
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f00e fcb8 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 8001c90:	e005      	b.n	8001c9e <OnJoinRequest+0x52>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <OnJoinRequest+0x68>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	4611      	mov	r1, r2
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f00e fcb1 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8001c9e:	bd10      	pop	{r4, pc}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	200001f8 	.word	0x200001f8
 8001ca8:	080114f4 	.word	0x080114f4
 8001cac:	0801152c 	.word	0x0801152c
 8001cb0:	0801150c 	.word	0x0801150c
 8001cb4:	0801154c 	.word	0x0801154c

08001cb8 <SendTxData>:
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9303      	str	r3, [sp, #12]
  EnvSensors_Read(&sensor_data);
 8001cc0:	a804      	add	r0, sp, #16
 8001cc2:	f7ff fc49 	bl	8001558 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001cc6:	f7ff f975 	bl	8000fb4 <SYS_GetTemperatureLevel>
 8001cca:	f340 260f 	sbfx	r6, r0, #8, #16
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001cce:	4938      	ldr	r1, [pc, #224]	; (8001db0 <SendTxData+0xf8>)
 8001cd0:	9804      	ldr	r0, [sp, #16]
 8001cd2:	f7fe fdd3 	bl	800087c <__aeabi_fmul>
 8001cd6:	4937      	ldr	r1, [pc, #220]	; (8001db4 <SendTxData+0xfc>)
 8001cd8:	f7fe fe84 	bl	80009e4 <__aeabi_fdiv>
 8001cdc:	f7fe ff1e 	bl	8000b1c <__aeabi_f2uiz>
 8001ce0:	b285      	uxth	r5, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001ce2:	4c35      	ldr	r4, [pc, #212]	; (8001db8 <SendTxData+0x100>)
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8001ce8:	4932      	ldr	r1, [pc, #200]	; (8001db4 <SendTxData+0xfc>)
 8001cea:	9806      	ldr	r0, [sp, #24]
 8001cec:	f7fe fdc6 	bl	800087c <__aeabi_fmul>
 8001cf0:	f7fe ff14 	bl	8000b1c <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8001cf4:	6863      	ldr	r3, [r4, #4]
 8001cf6:	4a31      	ldr	r2, [pc, #196]	; (8001dbc <SendTxData+0x104>)
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8001cfc:	6863      	ldr	r3, [r4, #4]
 8001cfe:	0a2a      	lsrs	r2, r5, #8
 8001d00:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8001d02:	6863      	ldr	r3, [r4, #4]
 8001d04:	709d      	strb	r5, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8001d06:	6863      	ldr	r3, [r4, #4]
 8001d08:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8001d0a:	6863      	ldr	r3, [r4, #4]
 8001d0c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8001d10:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	7158      	strb	r0, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <SendTxData+0x108>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d002      	beq.n	8001d24 <SendTxData+0x6c>
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d000      	beq.n	8001d24 <SendTxData+0x6c>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8001d22:	b9ab      	cbnz	r3, 8001d50 <SendTxData+0x98>
    AppData.Buffer[i++] = 0;
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <SendTxData+0x100>)
 8001d26:	6851      	ldr	r1, [r2, #4]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8001d2c:	6851      	ldr	r1, [r2, #4]
 8001d2e:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8001d30:	6852      	ldr	r2, [r2, #4]
 8001d32:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8001d34:	7253      	strb	r3, [r2, #9]
 8001d36:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8001d38:	481f      	ldr	r0, [pc, #124]	; (8001db8 <SendTxData+0x100>)
 8001d3a:	7043      	strb	r3, [r0, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	aa03      	add	r2, sp, #12
 8001d40:	4619      	mov	r1, r3
 8001d42:	f004 fce5 	bl	8006710 <LmHandlerSend>
 8001d46:	b1f8      	cbz	r0, 8001d88 <SendTxData+0xd0>
  else if (nextTxIn > 0)
 8001d48:	9b03      	ldr	r3, [sp, #12]
 8001d4a:	bb23      	cbnz	r3, 8001d96 <SendTxData+0xde>
}
 8001d4c:	b00b      	add	sp, #44	; 0x2c
 8001d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8001d50:	9d07      	ldr	r5, [sp, #28]
    longitude = sensor_data.longitude;
 8001d52:	9c08      	ldr	r4, [sp, #32]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8001d54:	4e18      	ldr	r6, [pc, #96]	; (8001db8 <SendTxData+0x100>)
 8001d56:	6877      	ldr	r7, [r6, #4]
 8001d58:	f7ff fb3e 	bl	80013d8 <GetBatteryLevel>
 8001d5c:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8001d5e:	6873      	ldr	r3, [r6, #4]
 8001d60:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8001d64:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8001d66:	6873      	ldr	r3, [r6, #4]
 8001d68:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8001d6c:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8001d6e:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8001d70:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8001d74:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8001d76:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8001d7a:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8001d7c:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8001d82:	739a      	strb	r2, [r3, #14]
 8001d84:	230f      	movs	r3, #15
 8001d86:	e7d7      	b.n	8001d38 <SendTxData+0x80>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <SendTxData+0x10c>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f00e fc36 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 8001d94:	e7da      	b.n	8001d4c <SendTxData+0x94>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <SendTxData+0x110>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <SendTxData+0x114>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	2100      	movs	r1, #0
 8001da6:	4610      	mov	r0, r2
 8001da8:	f00e fc2a 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8001dac:	e7ce      	b.n	8001d4c <SendTxData+0x94>
 8001dae:	bf00      	nop
 8001db0:	42c80000 	.word	0x42c80000
 8001db4:	41200000 	.word	0x41200000
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	200001f6 	.word	0x200001f6
 8001dc0:	2000003c 	.word	0x2000003c
 8001dc4:	08011568 	.word	0x08011568
 8001dc8:	10624dd3 	.word	0x10624dd3
 8001dcc:	08011578 	.word	0x08011578

08001dd0 <OnJoinTimerLedEvent>:
{
 8001dd0:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED_RED) ;
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f000 f94c 	bl	8002070 <BSP_LED_Toggle>
}
 8001dd8:	bd08      	pop	{r3, pc}
	...

08001ddc <LoRaWAN_Init>:
{
 8001ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001de0:	b085      	sub	sp, #20
  BSP_LED_Init(LED_BLUE);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f8f8 	bl	8001fd8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f000 f8f5 	bl	8001fd8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001dee:	2002      	movs	r0, #2
 8001df0:	f000 f8f2 	bl	8001fd8 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001df4:	2101      	movs	r1, #1
 8001df6:	4608      	mov	r0, r1
 8001df8:	f000 f94a 	bl	8002090 <BSP_PB_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	9402      	str	r4, [sp, #8]
 8001e00:	2501      	movs	r5, #1
 8001e02:	9501      	str	r5, [sp, #4]
 8001e04:	9500      	str	r5, [sp, #0]
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <LoRaWAN_Init+0x110>)
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f00e fbf7 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001e12:	9402      	str	r4, [sp, #8]
 8001e14:	2303      	movs	r3, #3
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2602      	movs	r6, #2
 8001e1a:	9600      	str	r6, [sp, #0]
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <LoRaWAN_Init+0x114>)
 8001e1e:	4622      	mov	r2, r4
 8001e20:	4621      	mov	r1, r4
 8001e22:	4630      	mov	r0, r6
 8001e24:	f00e fbec 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001e28:	9402      	str	r4, [sp, #8]
 8001e2a:	9501      	str	r5, [sp, #4]
 8001e2c:	9500      	str	r5, [sp, #0]
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <LoRaWAN_Init+0x118>)
 8001e30:	4622      	mov	r2, r4
 8001e32:	4621      	mov	r1, r4
 8001e34:	4630      	mov	r0, r6
 8001e36:	f00e fbe3 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001e3a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001f20 <LoRaWAN_Init+0x144>
 8001e3e:	9400      	str	r4, [sp, #0]
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <LoRaWAN_Init+0x11c>)
 8001e42:	4622      	mov	r2, r4
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	4648      	mov	r0, r9
 8001e4a:	f00e feb5 	bl	8010bb8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8001e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001f24 <LoRaWAN_Init+0x148>
 8001e52:	9400      	str	r4, [sp, #0]
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <LoRaWAN_Init+0x120>)
 8001e56:	4622      	mov	r2, r4
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	4640      	mov	r0, r8
 8001e5e:	f00e feab 	bl	8010bb8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8001e62:	4f27      	ldr	r7, [pc, #156]	; (8001f00 <LoRaWAN_Init+0x124>)
 8001e64:	9400      	str	r4, [sp, #0]
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <LoRaWAN_Init+0x128>)
 8001e68:	462a      	mov	r2, r5
 8001e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6e:	4638      	mov	r0, r7
 8001e70:	f00e fea2 	bl	8010bb8 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8001e74:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e78:	4648      	mov	r0, r9
 8001e7a:	f00e ffa3 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8001e7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e82:	4640      	mov	r0, r8
 8001e84:	f00e ff9e 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8001e88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e8c:	4638      	mov	r0, r7
 8001e8e:	f00e ff99 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <LoRaWAN_Init+0x12c>)
 8001e94:	4621      	mov	r1, r4
 8001e96:	4628      	mov	r0, r5
 8001e98:	f00e fd96 	bl	80109c8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <LoRaWAN_Init+0x130>)
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f00e fd91 	bl	80109c8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8001ea6:	f000 f849 	bl	8001f3c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8001eaa:	4819      	ldr	r0, [pc, #100]	; (8001f10 <LoRaWAN_Init+0x134>)
 8001eac:	f004 fdea 	bl	8006a84 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8001eb0:	4818      	ldr	r0, [pc, #96]	; (8001f14 <LoRaWAN_Init+0x138>)
 8001eb2:	f004 fa89 	bl	80063c8 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8001eb6:	4638      	mov	r0, r7
 8001eb8:	f00e ff3e 	bl	8010d38 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f004 fbdd 	bl	800667c <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8001ec2:	4d15      	ldr	r5, [pc, #84]	; (8001f18 <LoRaWAN_Init+0x13c>)
 8001ec4:	9400      	str	r4, [sp, #0]
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <LoRaWAN_Init+0x140>)
 8001ec8:	4622      	mov	r2, r4
 8001eca:	f04f 31ff 	mov.w	r1, #4294967295
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f00e fe72 	bl	8010bb8 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8001ed4:	f242 7110 	movw	r1, #10000	; 0x2710
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f00e ff73 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8001ede:	4628      	mov	r0, r5
 8001ee0:	f00e ff2a 	bl	8010d38 <UTIL_TIMER_Start>
}
 8001ee4:	b005      	add	sp, #20
 8001ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eea:	bf00      	nop
 8001eec:	08011598 	.word	0x08011598
 8001ef0:	080115b8 	.word	0x080115b8
 8001ef4:	080115d8 	.word	0x080115d8
 8001ef8:	08001c43 	.word	0x08001c43
 8001efc:	08001c39 	.word	0x08001c39
 8001f00:	200001f8 	.word	0x200001f8
 8001f04:	08001dd1 	.word	0x08001dd1
 8001f08:	08006585 	.word	0x08006585
 8001f0c:	08001cb9 	.word	0x08001cb9
 8001f10:	20000008 	.word	0x20000008
 8001f14:	2000003c 	.word	0x2000003c
 8001f18:	20000240 	.word	0x20000240
 8001f1c:	08001a7d 	.word	0x08001a7d
 8001f20:	20000228 	.word	0x20000228
 8001f24:	20000210 	.word	0x20000210

08001f28 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8001f28:	2801      	cmp	r0, #1
 8001f2a:	d000      	beq.n	8001f2e <HAL_GPIO_EXTI_Callback+0x6>
 8001f2c:	4770      	bx	lr
{
 8001f2e:	b508      	push	{r3, lr}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001f30:	2100      	movs	r1, #0
 8001f32:	2002      	movs	r0, #2
 8001f34:	f00e fc8a 	bl	801084c <UTIL_SEQ_SetTask>
}
 8001f38:	bd08      	pop	{r3, pc}
	...

08001f3c <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <LoraInfo_Init+0x14>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8001f42:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 8001f44:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001f48:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8001f4e:	4770      	bx	lr
 8001f50:	20000258 	.word	0x20000258

08001f54 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8001f54:	4800      	ldr	r0, [pc, #0]	; (8001f58 <LoraInfo_GetPtr+0x4>)
 8001f56:	4770      	bx	lr
 8001f58:	20000258 	.word	0x20000258

08001f5c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001f5c:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8001f5e:	f000 f921 	bl	80021a4 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001f62:	bd08      	pop	{r3, pc}

08001f64 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001f64:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001f66:	f000 f95d 	bl	8002224 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001f6a:	bd08      	pop	{r3, pc}

08001f6c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001f6c:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001f6e:	f000 f9a7 	bl	80022c0 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001f72:	bd08      	pop	{r3, pc}

08001f74 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001f74:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001f76:	f000 f9a5 	bl	80022c4 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001f7a:	bd08      	pop	{r3, pc}

08001f7c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001f7c:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001f7e:	f000 f9a3 	bl	80022c8 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001f82:	bd08      	pop	{r3, pc}

08001f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f88:	f000 f9a0 	bl	80022cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8e:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <LoopForever+0xe>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa4:	4c0a      	ldr	r4, [pc, #40]	; (8001fd0 <LoopForever+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fb2:	f00f f8c5 	bl	8011140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb6:	f7ff f8b9 	bl	800112c <main>

08001fba <LoopForever>:

LoopForever:
    b LoopForever
 8001fba:	e7fe      	b.n	8001fba <LoopForever>
  ldr   r0, =_estack
 8001fbc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001fc8:	08012094 	.word	0x08012094
  ldr r2, =_sbss
 8001fcc:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001fd0:	20001a68 	.word	0x20001a68

08001fd4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC_IRQHandler>
	...

08001fd8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001fdc:	2400      	movs	r4, #0
 8001fde:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe6:	f042 0202 	orr.w	r2, r2, #2
 8001fea:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001ff4:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <BSP_LED_Init+0x50>)
 8001ff8:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 8001ffc:	9601      	str	r6, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002002:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002004:	2302      	movs	r3, #2
 8002006:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <BSP_LED_Init+0x54>)
 800200a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800200e:	a901      	add	r1, sp, #4
 8002010:	4628      	mov	r0, r5
 8002012:	f001 f91f 	bl	8003254 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002016:	4622      	mov	r2, r4
 8002018:	4631      	mov	r1, r6
 800201a:	4628      	mov	r0, r5
 800201c:	f001 fa4e 	bl	80034bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002020:	4620      	mov	r0, r4
 8002022:	b006      	add	sp, #24
 8002024:	bd70      	pop	{r4, r5, r6, pc}
 8002026:	bf00      	nop
 8002028:	08011664 	.word	0x08011664
 800202c:	0801166c 	.word	0x0801166c

08002030 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002030:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8002032:	2201      	movs	r2, #1
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <BSP_LED_On+0x18>)
 8002036:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <BSP_LED_On+0x1c>)
 800203c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002040:	f001 fa3c 	bl	80034bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002044:	2000      	movs	r0, #0
 8002046:	bd08      	pop	{r3, pc}
 8002048:	08011664 	.word	0x08011664
 800204c:	0801166c 	.word	0x0801166c

08002050 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002050:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8002052:	2200      	movs	r2, #0
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <BSP_LED_Off+0x18>)
 8002056:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <BSP_LED_Off+0x1c>)
 800205c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002060:	f001 fa2c 	bl	80034bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002064:	2000      	movs	r0, #0
 8002066:	bd08      	pop	{r3, pc}
 8002068:	08011664 	.word	0x08011664
 800206c:	0801166c 	.word	0x0801166c

08002070 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002070:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <BSP_LED_Toggle+0x18>)
 8002074:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <BSP_LED_Toggle+0x1c>)
 800207a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800207e:	f001 fa22 	bl	80034c6 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8002082:	2000      	movs	r0, #0
 8002084:	bd08      	pop	{r3, pc}
 8002086:	bf00      	nop
 8002088:	08011664 	.word	0x08011664
 800208c:	0801166c 	.word	0x0801166c

08002090 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002090:	b530      	push	{r4, r5, lr}
 8002092:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002094:	2300      	movs	r3, #0
 8002096:	9303      	str	r3, [sp, #12]
 8002098:	9304      	str	r3, [sp, #16]
 800209a:	9305      	str	r3, [sp, #20]
 800209c:	9306      	str	r3, [sp, #24]
 800209e:	9307      	str	r3, [sp, #28]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80020a0:	4604      	mov	r4, r0
 80020a2:	b9f0      	cbnz	r0, 80020e2 <BSP_PB_Init+0x52>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80020b8:	9b00      	ldr	r3, [sp, #0]
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <BSP_PB_Init+0xd8>)
 80020bc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80020c0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	2302      	movs	r3, #2
 80020c8:	9306      	str	r3, [sp, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80020ca:	bb31      	cbnz	r1, 800211a <BSP_PB_Init+0x8a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80020cc:	2300      	movs	r3, #0
 80020ce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020d0:	a903      	add	r1, sp, #12
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <BSP_PB_Init+0xdc>)
 80020d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80020d8:	f001 f8bc 	bl	8003254 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 80020dc:	2000      	movs	r0, #0
 80020de:	b009      	add	sp, #36	; 0x24
 80020e0:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80020e2:	2801      	cmp	r0, #1
 80020e4:	d00d      	beq.n	8002102 <BSP_PB_Init+0x72>
 80020e6:	2802      	cmp	r0, #2
 80020e8:	d1e7      	bne.n	80020ba <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f0:	f042 0204 	orr.w	r2, r2, #4
 80020f4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80020fe:	9b02      	ldr	r3, [sp, #8]
}
 8002100:	e7db      	b.n	80020ba <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002116:	9b01      	ldr	r3, [sp, #4]
}
 8002118:	e7cf      	b.n	80020ba <BSP_PB_Init+0x2a>
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800211a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800211e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002120:	a903      	add	r1, sp, #12
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <BSP_PB_Init+0xdc>)
 8002124:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002128:	f001 f894 	bl	8003254 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800212c:	4d10      	ldr	r5, [pc, #64]	; (8002170 <BSP_PB_Init+0xe0>)
 800212e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <BSP_PB_Init+0xe4>)
 8002134:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002138:	4628      	mov	r0, r5
 800213a:	f001 f885 	bl	8003248 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <BSP_PB_Init+0xe8>)
 8002140:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8002144:	2100      	movs	r1, #0
 8002146:	4628      	mov	r0, r5
 8002148:	f001 f877 	bl	800323a <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <BSP_PB_Init+0xec>)
 800214e:	571d      	ldrsb	r5, [r3, r4]
 8002150:	2200      	movs	r2, #0
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <BSP_PB_Init+0xf0>)
 8002154:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002158:	4628      	mov	r0, r5
 800215a:	f000 fd9d 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800215e:	4628      	mov	r0, r5
 8002160:	f000 fdce 	bl	8002d00 <HAL_NVIC_EnableIRQ>
 8002164:	e7ba      	b.n	80020dc <BSP_PB_Init+0x4c>
 8002166:	bf00      	nop
 8002168:	08011650 	.word	0x08011650
 800216c:	08011658 	.word	0x08011658
 8002170:	200019b4 	.word	0x200019b4
 8002174:	08011684 	.word	0x08011684
 8002178:	08011678 	.word	0x08011678
 800217c:	0801164c 	.word	0x0801164c
 8002180:	08011690 	.word	0x08011690

08002184 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002184:	4770      	bx	lr

08002186 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8002186:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW3);
 8002188:	2002      	movs	r0, #2
 800218a:	f7ff fffb 	bl	8002184 <BSP_PB_Callback>
}
 800218e:	bd08      	pop	{r3, pc}

08002190 <BUTTON_SW2_EXTI_Callback>:
{
 8002190:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW2);
 8002192:	2001      	movs	r0, #1
 8002194:	f7ff fff6 	bl	8002184 <BSP_PB_Callback>
}
 8002198:	bd08      	pop	{r3, pc}

0800219a <BUTTON_SW1_EXTI_Callback>:
{
 800219a:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW1);
 800219c:	2000      	movs	r0, #0
 800219e:	f7ff fff1 	bl	8002184 <BSP_PB_Callback>
}
 80021a2:	bd08      	pop	{r3, pc}

080021a4 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80021a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80021aa:	2400      	movs	r4, #0
 80021ac:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021b4:	f042 0204 	orr.w	r2, r2, #4
 80021b8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80021c2:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80021c4:	2710      	movs	r7, #16
 80021c6:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80021cc:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80021d2:	4d13      	ldr	r5, [pc, #76]	; (8002220 <BSP_RADIO_Init+0x7c>)
 80021d4:	a901      	add	r1, sp, #4
 80021d6:	4628      	mov	r0, r5
 80021d8:	f001 f83c 	bl	8003254 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80021dc:	f04f 0820 	mov.w	r8, #32
 80021e0:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80021e4:	a901      	add	r1, sp, #4
 80021e6:	4628      	mov	r0, r5
 80021e8:	f001 f834 	bl	8003254 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80021ec:	2608      	movs	r6, #8
 80021ee:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80021f0:	a901      	add	r1, sp, #4
 80021f2:	4628      	mov	r0, r5
 80021f4:	f001 f82e 	bl	8003254 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80021f8:	4622      	mov	r2, r4
 80021fa:	4641      	mov	r1, r8
 80021fc:	4628      	mov	r0, r5
 80021fe:	f001 f95d 	bl	80034bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002202:	4622      	mov	r2, r4
 8002204:	4639      	mov	r1, r7
 8002206:	4628      	mov	r0, r5
 8002208:	f001 f958 	bl	80034bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800220c:	4622      	mov	r2, r4
 800220e:	4631      	mov	r1, r6
 8002210:	4628      	mov	r0, r5
 8002212:	f001 f953 	bl	80034bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002216:	4620      	mov	r0, r4
 8002218:	b006      	add	sp, #24
 800221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800221e:	bf00      	nop
 8002220:	48000800 	.word	0x48000800

08002224 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002224:	b510      	push	{r4, lr}
  switch (Config)
 8002226:	2803      	cmp	r0, #3
 8002228:	d813      	bhi.n	8002252 <BSP_RADIO_ConfigRFSwitch+0x2e>
 800222a:	e8df f000 	tbb	[pc, r0]
 800222e:	1402      	.short	0x1402
 8002230:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002232:	4c22      	ldr	r4, [pc, #136]	; (80022bc <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	2108      	movs	r1, #8
 8002238:	4620      	mov	r0, r4
 800223a:	f001 f93f 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2110      	movs	r1, #16
 8002242:	4620      	mov	r0, r4
 8002244:	f001 f93a 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	2120      	movs	r1, #32
 800224c:	4620      	mov	r0, r4
 800224e:	f001 f935 	bl	80034bc <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002252:	2000      	movs	r0, #0
 8002254:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002256:	4c19      	ldr	r4, [pc, #100]	; (80022bc <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002258:	2201      	movs	r2, #1
 800225a:	2108      	movs	r1, #8
 800225c:	4620      	mov	r0, r4
 800225e:	f001 f92d 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002262:	2201      	movs	r2, #1
 8002264:	2110      	movs	r1, #16
 8002266:	4620      	mov	r0, r4
 8002268:	f001 f928 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800226c:	2200      	movs	r2, #0
 800226e:	2120      	movs	r1, #32
 8002270:	4620      	mov	r0, r4
 8002272:	f001 f923 	bl	80034bc <HAL_GPIO_WritePin>
      break;
 8002276:	e7ec      	b.n	8002252 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002278:	4c10      	ldr	r4, [pc, #64]	; (80022bc <BSP_RADIO_ConfigRFSwitch+0x98>)
 800227a:	2201      	movs	r2, #1
 800227c:	2108      	movs	r1, #8
 800227e:	4620      	mov	r0, r4
 8002280:	f001 f91c 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002284:	2201      	movs	r2, #1
 8002286:	2110      	movs	r1, #16
 8002288:	4620      	mov	r0, r4
 800228a:	f001 f917 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800228e:	2201      	movs	r2, #1
 8002290:	2120      	movs	r1, #32
 8002292:	4620      	mov	r0, r4
 8002294:	f001 f912 	bl	80034bc <HAL_GPIO_WritePin>
      break;
 8002298:	e7db      	b.n	8002252 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800229a:	4c08      	ldr	r4, [pc, #32]	; (80022bc <BSP_RADIO_ConfigRFSwitch+0x98>)
 800229c:	2201      	movs	r2, #1
 800229e:	2108      	movs	r1, #8
 80022a0:	4620      	mov	r0, r4
 80022a2:	f001 f90b 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80022a6:	2200      	movs	r2, #0
 80022a8:	2110      	movs	r1, #16
 80022aa:	4620      	mov	r0, r4
 80022ac:	f001 f906 	bl	80034bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80022b0:	2201      	movs	r2, #1
 80022b2:	2120      	movs	r1, #32
 80022b4:	4620      	mov	r0, r4
 80022b6:	f001 f901 	bl	80034bc <HAL_GPIO_WritePin>
      break;
 80022ba:	e7ca      	b.n	8002252 <BSP_RADIO_ConfigRFSwitch+0x2e>
 80022bc:	48000800 	.word	0x48000800

080022c0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80022c0:	2000      	movs	r0, #0
 80022c2:	4770      	bx	lr

080022c4 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80022c4:	2001      	movs	r0, #1
 80022c6:	4770      	bx	lr

080022c8 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80022c8:	2001      	movs	r0, #1
 80022ca:	4770      	bx	lr

080022cc <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d2:	2003      	movs	r0, #3
 80022d4:	f000 fcce 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022d8:	f001 fa94 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_Init+0x28>)
 80022de:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022e0:	200f      	movs	r0, #15
 80022e2:	f7ff f901 	bl	80014e8 <HAL_InitTick>
 80022e6:	b110      	cbz	r0, 80022ee <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80022e8:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80022ea:	4620      	mov	r0, r4
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	4604      	mov	r4, r0
    HAL_MspInit();
 80022f0:	f7fe ffc4 	bl	800127c <HAL_MspInit>
 80022f4:	e7f9      	b.n	80022ea <HAL_Init+0x1a>
 80022f6:	bf00      	nop
 80022f8:	2000004c 	.word	0x2000004c

080022fc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80022fc:	4a02      	ldr	r2, [pc, #8]	; (8002308 <HAL_SuspendTick+0xc>)
 80022fe:	6813      	ldr	r3, [r2, #0]
 8002300:	f023 0302 	bic.w	r3, r3, #2
 8002304:	6013      	str	r3, [r2, #0]
}
 8002306:	4770      	bx	lr
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800230c:	4a02      	ldr	r2, [pc, #8]	; (8002318 <HAL_ResumeTick+0xc>)
 800230e:	6813      	ldr	r3, [r2, #0]
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	4770      	bx	lr
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 800231c:	4b01      	ldr	r3, [pc, #4]	; (8002324 <HAL_GetUIDw0+0x8>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	1fff7590 	.word	0x1fff7590

08002328 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002328:	4b01      	ldr	r3, [pc, #4]	; (8002330 <HAL_GetUIDw1+0x8>)
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	1fff7594 	.word	0x1fff7594

08002334 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002334:	4b01      	ldr	r3, [pc, #4]	; (800233c <HAL_GetUIDw2+0x8>)
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	1fff7598 	.word	0x1fff7598

08002340 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002340:	4a02      	ldr	r2, [pc, #8]	; (800234c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002342:	6853      	ldr	r3, [r2, #4]
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 800234a:	4770      	bx	lr
 800234c:	e0042000 	.word	0xe0042000

08002350 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002350:	4a02      	ldr	r2, [pc, #8]	; (800235c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002352:	6853      	ldr	r3, [r2, #4]
 8002354:	f023 0302 	bic.w	r3, r3, #2
 8002358:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 800235a:	4770      	bx	lr
 800235c:	e0042000 	.word	0xe0042000

08002360 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002360:	4a02      	ldr	r2, [pc, #8]	; (800236c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002362:	6853      	ldr	r3, [r2, #4]
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 800236a:	4770      	bx	lr
 800236c:	e0042000 	.word	0xe0042000

08002370 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002372:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002374:	2300      	movs	r3, #0
 8002376:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002378:	2800      	cmp	r0, #0
 800237a:	f000 8121 	beq.w	80025c0 <HAL_ADC_Init+0x250>
 800237e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002380:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002382:	b1bb      	cbz	r3, 80023b4 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002384:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002386:	6893      	ldr	r3, [r2, #8]
 8002388:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800238c:	d11f      	bne.n	80023ce <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800238e:	6893      	ldr	r3, [r2, #8]
 8002390:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002394:	f023 0317 	bic.w	r3, r3, #23
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239e:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <HAL_ADC_Init+0x254>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	099b      	lsrs	r3, r3, #6
 80023a4:	4a88      	ldr	r2, [pc, #544]	; (80025c8 <HAL_ADC_Init+0x258>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	3301      	adds	r3, #1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80023b2:	e009      	b.n	80023c8 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 80023b4:	f7fe fd78 	bl	8000ea8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	2300      	movs	r3, #0
 80023ba:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80023bc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80023c0:	e7e0      	b.n	8002384 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80023c2:	9b01      	ldr	r3, [sp, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f9      	bne.n	80023c2 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ce:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023d0:	6893      	ldr	r3, [r2, #8]
 80023d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_Init+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
 80023ea:	e000      	b.n	80023ee <HAL_ADC_Init+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ec:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ee:	6893      	ldr	r3, [r2, #8]
 80023f0:	f013 0304 	ands.w	r3, r3, #4
 80023f4:	d000      	beq.n	80023f8 <HAL_ADC_Init+0x88>
 80023f6:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80023fa:	f011 0f10 	tst.w	r1, #16
 80023fe:	f040 80d8 	bne.w	80025b2 <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 80d5 	bne.w	80025b2 <HAL_ADC_Init+0x242>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002408:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800240a:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800240e:	f041 0102 	orr.w	r1, r1, #2
 8002412:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002414:	6891      	ldr	r1, [r2, #8]
 8002416:	f011 0f01 	tst.w	r1, #1
 800241a:	d131      	bne.n	8002480 <HAL_ADC_Init+0x110>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800241c:	68d1      	ldr	r1, [r2, #12]
 800241e:	f021 0118 	bic.w	r1, r1, #24
 8002422:	68a5      	ldr	r5, [r4, #8]
 8002424:	4329      	orrs	r1, r5
 8002426:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002428:	6862      	ldr	r2, [r4, #4]
 800242a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800242e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002430:	4315      	orrs	r5, r2
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002432:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002436:	2901      	cmp	r1, #1
 8002438:	d018      	beq.n	800246c <HAL_ADC_Init+0xfc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800243a:	6821      	ldr	r1, [r4, #0]
 800243c:	690e      	ldr	r6, [r1, #16]
 800243e:	4a63      	ldr	r2, [pc, #396]	; (80025cc <HAL_ADC_Init+0x25c>)
 8002440:	4032      	ands	r2, r6
 8002442:	432a      	orrs	r2, r5
 8002444:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002446:	6862      	ldr	r2, [r4, #4]
 8002448:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800244c:	d019      	beq.n	8002482 <HAL_ADC_Init+0x112>
 800244e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002452:	d016      	beq.n	8002482 <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002454:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002458:	d013      	beq.n	8002482 <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800245a:	4e5d      	ldr	r6, [pc, #372]	; (80025d0 <HAL_ADC_Init+0x260>)
 800245c:	6831      	ldr	r1, [r6, #0]
 800245e:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8002462:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8002466:	430a      	orrs	r2, r1
 8002468:	6032      	str	r2, [r6, #0]
 800246a:	e00a      	b.n	8002482 <HAL_ADC_Init+0x112>
                     hadc->Init.Oversampling.Ratio         |
 800246c:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800246e:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002470:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002472:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002474:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002476:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002478:	4315      	orrs	r5, r2
 800247a:	f045 0501 	orr.w	r5, r5, #1
 800247e:	e7dc      	b.n	800243a <HAL_ADC_Init+0xca>
  uint32_t tmpCFGR2 = 0UL;
 8002480:	461d      	mov	r5, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002482:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002484:	7e62      	ldrb	r2, [r4, #25]
 8002486:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002488:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800248c:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800248e:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002492:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002494:	b109      	cbz	r1, 800249a <HAL_ADC_Init+0x12a>
 8002496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800249a:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 800249c:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800249e:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024a0:	6921      	ldr	r1, [r4, #16]
 80024a2:	2900      	cmp	r1, #0
 80024a4:	db47      	blt.n	8002536 <HAL_ADC_Init+0x1c6>
 80024a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80024aa:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ac:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024b0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024b4:	f894 1020 	ldrb.w	r1, [r4, #32]
 80024b8:	2901      	cmp	r1, #1
 80024ba:	d03f      	beq.n	800253c <HAL_ADC_Init+0x1cc>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024be:	b121      	cbz	r1, 80024ca <HAL_ADC_Init+0x15a>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024c0:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80024c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024c6:	4331      	orrs	r1, r6
 80024c8:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80024ca:	6826      	ldr	r6, [r4, #0]
 80024cc:	68f1      	ldr	r1, [r6, #12]
 80024ce:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80024d2:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 80024d6:	4311      	orrs	r1, r2
 80024d8:	60f1      	str	r1, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80024da:	6826      	ldr	r6, [r4, #0]
 80024dc:	6937      	ldr	r7, [r6, #16]
 80024de:	493d      	ldr	r1, [pc, #244]	; (80025d4 <HAL_ADC_Init+0x264>)
 80024e0:	4039      	ands	r1, r7
 80024e2:	430d      	orrs	r5, r1
 80024e4:	6135      	str	r5, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80024e6:	6826      	ldr	r6, [r4, #0]
 80024e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 80024ea:	6975      	ldr	r5, [r6, #20]
 80024ec:	f025 0507 	bic.w	r5, r5, #7
 80024f0:	4329      	orrs	r1, r5
 80024f2:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80024f4:	6825      	ldr	r5, [r4, #0]
 80024f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80024f8:	6969      	ldr	r1, [r5, #20]
 80024fa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80024fe:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8002502:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002504:	6921      	ldr	r1, [r4, #16]
 8002506:	bb31      	cbnz	r1, 8002556 <HAL_ADC_Init+0x1e6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002508:	6821      	ldr	r1, [r4, #0]
 800250a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800250c:	f063 030f 	orn	r3, r3, #15
 8002510:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	68d9      	ldr	r1, [r3, #12]
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_ADC_Init+0x268>)
 8002518:	400b      	ands	r3, r1
 800251a:	4293      	cmp	r3, r2
 800251c:	d040      	beq.n	80025a0 <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800251e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002520:	f023 0312 	bic.w	r3, r3, #18
 8002524:	f043 0310 	orr.w	r3, r3, #16
 8002528:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002532:	2001      	movs	r0, #1
 8002534:	e042      	b.n	80025bc <HAL_ADC_Init+0x24c>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002536:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800253a:	e7b6      	b.n	80024aa <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800253c:	b916      	cbnz	r6, 8002544 <HAL_ADC_Init+0x1d4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800253e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002542:	e7bb      	b.n	80024bc <HAL_ADC_Init+0x14c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002546:	f041 0120 	orr.w	r1, r1, #32
 800254a:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800254e:	f041 0101 	orr.w	r1, r1, #1
 8002552:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002554:	e7b2      	b.n	80024bc <HAL_ADC_Init+0x14c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002556:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800255a:	d1da      	bne.n	8002512 <HAL_ADC_Init+0x1a2>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800255c:	2b07      	cmp	r3, #7
 800255e:	d808      	bhi.n	8002572 <HAL_ADC_Init+0x202>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002560:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002562:	009d      	lsls	r5, r3, #2
 8002564:	40e9      	lsrs	r1, r5
 8002566:	f001 010f 	and.w	r1, r1, #15
 800256a:	290f      	cmp	r1, #15
 800256c:	d001      	beq.n	8002572 <HAL_ADC_Init+0x202>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800256e:	3301      	adds	r3, #1
 8002570:	e7f4      	b.n	800255c <HAL_ADC_Init+0x1ec>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002572:	2b01      	cmp	r3, #1
 8002574:	d00e      	beq.n	8002594 <HAL_ADC_Init+0x224>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002576:	6825      	ldr	r5, [r4, #0]
 8002578:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800257a:	69e3      	ldr	r3, [r4, #28]
 800257c:	3b01      	subs	r3, #1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f003 031c 	and.w	r3, r3, #28
 8002584:	f06f 010f 	mvn.w	r1, #15
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800258e:	430b      	orrs	r3, r1
 8002590:	62ab      	str	r3, [r5, #40]	; 0x28
 8002592:	e7be      	b.n	8002512 <HAL_ADC_Init+0x1a2>
        SET_BIT(hadc->Instance->CHSELR,
 8002594:	6821      	ldr	r1, [r4, #0]
 8002596:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002598:	f063 030f 	orn	r3, r3, #15
 800259c:	628b      	str	r3, [r1, #40]	; 0x28
 800259e:	e7b8      	b.n	8002512 <HAL_ADC_Init+0x1a2>
      ADC_CLEAR_ERRORCODE(hadc);
 80025a0:	2300      	movs	r3, #0
 80025a2:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80025a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80025b0:	e004      	b.n	80025bc <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025b4:	f043 0310 	orr.w	r3, r3, #16
 80025b8:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ba:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80025bc:	b003      	add	sp, #12
 80025be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80025c0:	2001      	movs	r0, #1
 80025c2:	e7fb      	b.n	80025bc <HAL_ADC_Init+0x24c>
 80025c4:	2000004c 	.word	0x2000004c
 80025c8:	053e2d63 	.word	0x053e2d63
 80025cc:	1ffffc02 	.word	0x1ffffc02
 80025d0:	40012708 	.word	0x40012708
 80025d4:	dffffc02 	.word	0xdffffc02
 80025d8:	833fffe7 	.word	0x833fffe7

080025dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	4604      	mov	r4, r0
 80025e0:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025e2:	6946      	ldr	r6, [r0, #20]
 80025e4:	2e08      	cmp	r6, #8
 80025e6:	d005      	beq.n	80025f4 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80025e8:	6803      	ldr	r3, [r0, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f013 0f01 	tst.w	r3, #1
 80025f0:	d11e      	bne.n	8002630 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80025f2:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025f4:	f7fe ff7a 	bl	80014ec <HAL_GetTick>
 80025f8:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4232      	tst	r2, r6
 8002600:	d11c      	bne.n	800263c <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002602:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002606:	d0f8      	beq.n	80025fa <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002608:	f7fe ff70 	bl	80014ec <HAL_GetTick>
 800260c:	1bc3      	subs	r3, r0, r7
 800260e:	42ab      	cmp	r3, r5
 8002610:	d801      	bhi.n	8002616 <HAL_ADC_PollForConversion+0x3a>
 8002612:	2d00      	cmp	r5, #0
 8002614:	d1f1      	bne.n	80025fa <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4233      	tst	r3, r6
 800261c:	d1ed      	bne.n	80025fa <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800261e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002626:	2300      	movs	r3, #0
 8002628:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 800262c:	2003      	movs	r0, #3
 800262e:	e028      	b.n	8002682 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002632:	f043 0320 	orr.w	r3, r3, #32
 8002636:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002638:	2001      	movs	r0, #1
 800263a:	e022      	b.n	8002682 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800263c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800264a:	d115      	bne.n	8002678 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800264c:	7ea2      	ldrb	r2, [r4, #26]
 800264e:	b99a      	cbnz	r2, 8002678 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	f012 0f08 	tst.w	r2, #8
 8002656:	d00f      	beq.n	8002678 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	f012 0f04 	tst.w	r2, #4
 800265e:	d111      	bne.n	8002684 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	f022 020c 	bic.w	r2, r2, #12
 8002666:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800266a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002678:	7e20      	ldrb	r0, [r4, #24]
 800267a:	b960      	cbnz	r0, 8002696 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002686:	f043 0320 	orr.w	r3, r3, #32
 800268a:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002694:	e7f0      	b.n	8002678 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002696:	2000      	movs	r0, #0
 8002698:	e7f3      	b.n	8002682 <HAL_ADC_PollForConversion+0xa6>

0800269a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800269a:	6803      	ldr	r3, [r0, #0]
 800269c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800269e:	4770      	bx	lr

080026a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80026a0:	b470      	push	{r4, r5, r6}
 80026a2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026a4:	2200      	movs	r2, #0
 80026a6:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026a8:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80026aa:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80026ae:	2a01      	cmp	r2, #1
 80026b0:	f000 80ee 	beq.w	8002890 <HAL_ADC_ConfigChannel+0x1f0>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2201      	movs	r2, #1
 80026b8:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026bc:	6802      	ldr	r2, [r0, #0]
 80026be:	6890      	ldr	r0, [r2, #8]
 80026c0:	f010 0f04 	tst.w	r0, #4
 80026c4:	d00a      	beq.n	80026dc <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026ce:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80026d6:	b003      	add	sp, #12
 80026d8:	bc70      	pop	{r4, r5, r6}
 80026da:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80026dc:	6848      	ldr	r0, [r1, #4]
 80026de:	2802      	cmp	r0, #2
 80026e0:	f000 8097 	beq.w	8002812 <HAL_ADC_ConfigChannel+0x172>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026e4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80026e8:	d029      	beq.n	800273e <HAL_ADC_ConfigChannel+0x9e>
 80026ea:	4d6a      	ldr	r5, [pc, #424]	; (8002894 <HAL_ADC_ConfigChannel+0x1f4>)
 80026ec:	42ac      	cmp	r4, r5
 80026ee:	d026      	beq.n	800273e <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80026f0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80026f2:	f000 001f 	and.w	r0, r0, #31
 80026f6:	250f      	movs	r5, #15
 80026f8:	4085      	lsls	r5, r0
 80026fa:	ea24 0505 	bic.w	r5, r4, r5
 80026fe:	680c      	ldr	r4, [r1, #0]
 8002700:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002704:	2e00      	cmp	r6, #0
 8002706:	d133      	bne.n	8002770 <HAL_ADC_ConfigChannel+0xd0>
 8002708:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800270c:	fa04 f000 	lsl.w	r0, r4, r0
 8002710:	4328      	orrs	r0, r5
 8002712:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002714:	684c      	ldr	r4, [r1, #4]
 8002716:	08a0      	lsrs	r0, r4, #2
 8002718:	3001      	adds	r0, #1
 800271a:	69dd      	ldr	r5, [r3, #28]
 800271c:	42a8      	cmp	r0, r5
 800271e:	d814      	bhi.n	800274a <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002720:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002722:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002724:	f004 041f 	and.w	r4, r4, #31
 8002728:	260f      	movs	r6, #15
 800272a:	40a6      	lsls	r6, r4
 800272c:	ea20 0006 	bic.w	r0, r0, r6
 8002730:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002734:	fa05 f404 	lsl.w	r4, r5, r4
 8002738:	4304      	orrs	r4, r0
 800273a:	6294      	str	r4, [r2, #40]	; 0x28
}
 800273c:	e005      	b.n	800274a <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800273e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002740:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002742:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002746:	4320      	orrs	r0, r4
 8002748:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800274a:	681d      	ldr	r5, [r3, #0]
 800274c:	680e      	ldr	r6, [r1, #0]
 800274e:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002750:	696c      	ldr	r4, [r5, #20]
 8002752:	ea24 2406 	bic.w	r4, r4, r6, lsl #8
 8002756:	ea00 2206 	and.w	r2, r0, r6, lsl #8
 800275a:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800275e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002762:	4322      	orrs	r2, r4
 8002764:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002766:	680a      	ldr	r2, [r1, #0]
 8002768:	2a00      	cmp	r2, #0
 800276a:	db09      	blt.n	8002780 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276c:	2000      	movs	r0, #0
 800276e:	e7af      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002774:	b114      	cbz	r4, 800277c <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002776:	fab4 f484 	clz	r4, r4
 800277a:	e7c7      	b.n	800270c <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 800277c:	2420      	movs	r4, #32
 800277e:	e7c5      	b.n	800270c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002780:	4945      	ldr	r1, [pc, #276]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 8002782:	6808      	ldr	r0, [r1, #0]
 8002784:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002788:	4c44      	ldr	r4, [pc, #272]	; (800289c <HAL_ADC_ConfigChannel+0x1fc>)
 800278a:	42a2      	cmp	r2, r4
 800278c:	d007      	beq.n	800279e <HAL_ADC_ConfigChannel+0xfe>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800278e:	4c44      	ldr	r4, [pc, #272]	; (80028a0 <HAL_ADC_ConfigChannel+0x200>)
 8002790:	42a2      	cmp	r2, r4
 8002792:	d024      	beq.n	80027de <HAL_ADC_ConfigChannel+0x13e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002794:	4c43      	ldr	r4, [pc, #268]	; (80028a4 <HAL_ADC_ConfigChannel+0x204>)
 8002796:	42a2      	cmp	r2, r4
 8002798:	d02e      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x158>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279a:	2000      	movs	r0, #0
 800279c:	e798      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800279e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80027a2:	d1f4      	bne.n	800278e <HAL_ADC_ConfigChannel+0xee>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027a8:	483b      	ldr	r0, [pc, #236]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 80027aa:	6802      	ldr	r2, [r0, #0]
 80027ac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80027b0:	4311      	orrs	r1, r2
 80027b2:	6001      	str	r1, [r0, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b4:	4a3c      	ldr	r2, [pc, #240]	; (80028a8 <HAL_ADC_ConfigChannel+0x208>)
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	0992      	lsrs	r2, r2, #6
 80027ba:	493c      	ldr	r1, [pc, #240]	; (80028ac <HAL_ADC_ConfigChannel+0x20c>)
 80027bc:	fba1 1202 	umull	r1, r2, r1, r2
 80027c0:	0992      	lsrs	r2, r2, #6
 80027c2:	3201      	adds	r2, #1
 80027c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 80027ce:	9a01      	ldr	r2, [sp, #4]
 80027d0:	3a01      	subs	r2, #1
 80027d2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80027d4:	9a01      	ldr	r2, [sp, #4]
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d1f9      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027da:	2000      	movs	r0, #0
 80027dc:	e778      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027de:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80027e2:	d1d7      	bne.n	8002794 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80027e8:	482b      	ldr	r0, [pc, #172]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 80027ea:	6802      	ldr	r2, [r0, #0]
 80027ec:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80027f0:	4311      	orrs	r1, r2
 80027f2:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2000      	movs	r0, #0
}
 80027f6:	e76b      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027f8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80027fc:	d146      	bne.n	800288c <HAL_ADC_ConfigChannel+0x1ec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fe:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002802:	4825      	ldr	r0, [pc, #148]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 8002804:	6801      	ldr	r1, [r0, #0]
 8002806:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800280a:	430a      	orrs	r2, r1
 800280c:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280e:	2000      	movs	r0, #0
}
 8002810:	e75e      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002812:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002816:	d002      	beq.n	800281e <HAL_ADC_ConfigChannel+0x17e>
 8002818:	481e      	ldr	r0, [pc, #120]	; (8002894 <HAL_ADC_ConfigChannel+0x1f4>)
 800281a:	4284      	cmp	r4, r0
 800281c:	d106      	bne.n	800282c <HAL_ADC_ConfigChannel+0x18c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800281e:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002820:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002822:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002826:	ea20 0004 	bic.w	r0, r0, r4
 800282a:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800282c:	680a      	ldr	r2, [r1, #0]
 800282e:	2a00      	cmp	r2, #0
 8002830:	db01      	blt.n	8002836 <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002832:	2000      	movs	r0, #0
 8002834:	e74c      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002836:	4918      	ldr	r1, [pc, #96]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 8002838:	6809      	ldr	r1, [r1, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800283a:	4818      	ldr	r0, [pc, #96]	; (800289c <HAL_ADC_ConfigChannel+0x1fc>)
 800283c:	4282      	cmp	r2, r0
 800283e:	d007      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x1b0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002840:	4817      	ldr	r0, [pc, #92]	; (80028a0 <HAL_ADC_ConfigChannel+0x200>)
 8002842:	4282      	cmp	r2, r0
 8002844:	d00e      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002846:	4817      	ldr	r0, [pc, #92]	; (80028a4 <HAL_ADC_ConfigChannel+0x204>)
 8002848:	4282      	cmp	r2, r0
 800284a:	d015      	beq.n	8002878 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284c:	2000      	movs	r0, #0
 800284e:	e73f      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002850:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002854:	4810      	ldr	r0, [pc, #64]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800285c:	4311      	orrs	r1, r2
 800285e:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002860:	2000      	movs	r0, #0
}
 8002862:	e735      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002864:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002868:	480b      	ldr	r0, [pc, #44]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 800286a:	6801      	ldr	r1, [r0, #0]
 800286c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002870:	430a      	orrs	r2, r1
 8002872:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2000      	movs	r0, #0
}
 8002876:	e72b      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002878:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800287c:	4806      	ldr	r0, [pc, #24]	; (8002898 <HAL_ADC_ConfigChannel+0x1f8>)
 800287e:	6801      	ldr	r1, [r0, #0]
 8002880:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002884:	430a      	orrs	r2, r1
 8002886:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002888:	2000      	movs	r0, #0
}
 800288a:	e721      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
 800288c:	2000      	movs	r0, #0
 800288e:	e71f      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002890:	2002      	movs	r0, #2
 8002892:	e720      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x36>
 8002894:	80000004 	.word	0x80000004
 8002898:	40012708 	.word	0x40012708
 800289c:	b0001000 	.word	0xb0001000
 80028a0:	b8004000 	.word	0xb8004000
 80028a4:	b4002000 	.word	0xb4002000
 80028a8:	2000004c 	.word	0x2000004c
 80028ac:	053e2d63 	.word	0x053e2d63

080028b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80028b0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028b2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	f012 0f04 	tst.w	r2, #4
 80028ba:	d02a      	beq.n	8002912 <ADC_ConversionStop+0x62>
 80028bc:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	f012 0f02 	tst.w	r2, #2
 80028c4:	d107      	bne.n	80028d6 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028cc:	f022 0217 	bic.w	r2, r2, #23
 80028d0:	f042 0210 	orr.w	r2, r2, #16
 80028d4:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028d6:	f7fe fe09 	bl	80014ec <HAL_GetTick>
 80028da:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f013 0f04 	tst.w	r3, #4
 80028e4:	d013      	beq.n	800290e <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028e6:	f7fe fe01 	bl	80014ec <HAL_GetTick>
 80028ea:	1b43      	subs	r3, r0, r5
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d9f5      	bls.n	80028dc <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f013 0f04 	tst.w	r3, #4
 80028f8:	d0f0      	beq.n	80028dc <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028fc:	f043 0310 	orr.w	r3, r3, #16
 8002900:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800290a:	2001      	movs	r0, #1
 800290c:	e002      	b.n	8002914 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800290e:	2000      	movs	r0, #0
 8002910:	e000      	b.n	8002914 <ADC_ConversionStop+0x64>
 8002912:	2000      	movs	r0, #0
}
 8002914:	bd38      	pop	{r3, r4, r5, pc}
	...

08002918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002918:	b530      	push	{r4, r5, lr}
 800291a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800291c:	2300      	movs	r3, #0
 800291e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002920:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	f012 0f01 	tst.w	r2, #1
 8002928:	d159      	bne.n	80029de <ADC_Enable+0xc6>
 800292a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <ADC_Enable+0xcc>)
 8002930:	4211      	tst	r1, r2
 8002932:	d11b      	bne.n	800296c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800293a:	f022 0217 	bic.w	r2, r2, #23
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <ADC_Enable+0xd0>)
 8002946:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002948:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800294c:	d018      	beq.n	8002980 <ADC_Enable+0x68>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800294e:	4b27      	ldr	r3, [pc, #156]	; (80029ec <ADC_Enable+0xd4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <ADC_Enable+0xd8>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	3301      	adds	r3, #1
 800295e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002960:	9b01      	ldr	r3, [sp, #4]
 8002962:	b16b      	cbz	r3, 8002980 <ADC_Enable+0x68>
      {
        wait_loop_index--;
 8002964:	9b01      	ldr	r3, [sp, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	e7f9      	b.n	8002960 <ADC_Enable+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002974:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800297c:	2001      	movs	r0, #1
 800297e:	e02f      	b.n	80029e0 <ADC_Enable+0xc8>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002980:	7e63      	ldrb	r3, [r4, #25]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <ADC_Enable+0x72>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002986:	2000      	movs	r0, #0
 8002988:	e02a      	b.n	80029e0 <ADC_Enable+0xc8>
      tickstart = HAL_GetTick();
 800298a:	f7fe fdaf 	bl	80014ec <HAL_GetTick>
 800298e:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f012 0f01 	tst.w	r2, #1
 8002998:	d11f      	bne.n	80029da <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	f012 0f01 	tst.w	r2, #1
 80029a0:	d107      	bne.n	80029b2 <ADC_Enable+0x9a>
  MODIFY_REG(ADCx->CR,
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029a8:	f022 0217 	bic.w	r2, r2, #23
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b2:	f7fe fd9b 	bl	80014ec <HAL_GetTick>
 80029b6:	1b40      	subs	r0, r0, r5
 80029b8:	2802      	cmp	r0, #2
 80029ba:	d9e9      	bls.n	8002990 <ADC_Enable+0x78>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f013 0f01 	tst.w	r3, #1
 80029c4:	d1e4      	bne.n	8002990 <ADC_Enable+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029c8:	f043 0310 	orr.w	r3, r3, #16
 80029cc:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
 80029d8:	e002      	b.n	80029e0 <ADC_Enable+0xc8>
  return HAL_OK;
 80029da:	2000      	movs	r0, #0
 80029dc:	e000      	b.n	80029e0 <ADC_Enable+0xc8>
 80029de:	2000      	movs	r0, #0
}
 80029e0:	b003      	add	sp, #12
 80029e2:	bd30      	pop	{r4, r5, pc}
 80029e4:	80000017 	.word	0x80000017
 80029e8:	40012708 	.word	0x40012708
 80029ec:	2000004c 	.word	0x2000004c
 80029f0:	053e2d63 	.word	0x053e2d63

080029f4 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f013 0f04 	tst.w	r3, #4
 80029fc:	d128      	bne.n	8002a50 <HAL_ADC_Start+0x5c>
{
 80029fe:	b510      	push	{r4, lr}
 8002a00:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002a02:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d024      	beq.n	8002a54 <HAL_ADC_Start+0x60>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002a10:	f7ff ff82 	bl	8002918 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002a14:	b9c0      	cbnz	r0, 8002a48 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002a26:	2300      	movs	r3, #0
 8002a28:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	211c      	movs	r1, #28
 8002a2e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002a30:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a34:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002a36:	6893      	ldr	r3, [r2, #8]
 8002a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a3c:	f023 0317 	bic.w	r3, r3, #23
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6093      	str	r3, [r2, #8]
}
 8002a46:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002a4e:	e7fa      	b.n	8002a46 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002a50:	2002      	movs	r0, #2
}
 8002a52:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002a54:	2002      	movs	r0, #2
 8002a56:	e7f6      	b.n	8002a46 <HAL_ADC_Start+0x52>

08002a58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a5c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a5e:	6893      	ldr	r3, [r2, #8]
 8002a60:	f013 0302 	ands.w	r3, r3, #2
 8002a64:	d000      	beq.n	8002a68 <ADC_Disable+0x10>
 8002a66:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a68:	6891      	ldr	r1, [r2, #8]
 8002a6a:	f011 0f01 	tst.w	r1, #1
 8002a6e:	d039      	beq.n	8002ae4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d139      	bne.n	8002ae8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a74:	6893      	ldr	r3, [r2, #8]
 8002a76:	f003 0305 	and.w	r3, r3, #5
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d009      	beq.n	8002a92 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e029      	b.n	8002ae6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002a92:	6893      	ldr	r3, [r2, #8]
 8002a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a98:	f023 0317 	bic.w	r3, r3, #23
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fd20 	bl	80014ec <HAL_GetTick>
 8002aac:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f013 0f01 	tst.w	r3, #1
 8002ab6:	d013      	beq.n	8002ae0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ab8:	f7fe fd18 	bl	80014ec <HAL_GetTick>
 8002abc:	1b40      	subs	r0, r0, r5
 8002abe:	2802      	cmp	r0, #2
 8002ac0:	d9f5      	bls.n	8002aae <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f013 0f01 	tst.w	r3, #1
 8002aca:	d0f0      	beq.n	8002aae <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002adc:	2001      	movs	r0, #1
 8002ade:	e002      	b.n	8002ae6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	e000      	b.n	8002ae6 <ADC_Disable+0x8e>
 8002ae4:	2000      	movs	r0, #0
}
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e7fc      	b.n	8002ae6 <ADC_Disable+0x8e>

08002aec <HAL_ADC_DeInit>:
{
 8002aec:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d04a      	beq.n	8002b88 <HAL_ADC_DeInit+0x9c>
 8002af2:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002af4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002afc:	f7ff fed8 	bl	80028b0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002b00:	4606      	mov	r6, r0
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d031      	beq.n	8002b6a <HAL_ADC_DeInit+0x7e>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002b06:	6822      	ldr	r2, [r4, #0]
 8002b08:	6853      	ldr	r3, [r2, #4]
 8002b0a:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	f240 329f 	movw	r2, #927	; 0x39f
 8002b1a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	68d1      	ldr	r1, [r2, #12]
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_ADC_DeInit+0xa0>)
 8002b22:	400b      	ands	r3, r1
 8002b24:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002b26:	6822      	ldr	r2, [r4, #0]
 8002b28:	6913      	ldr	r3, [r2, #16]
 8002b2a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b2e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002b30:	6822      	ldr	r2, [r4, #0]
 8002b32:	6953      	ldr	r3, [r2, #20]
 8002b34:	f023 0307 	bic.w	r3, r3, #7
 8002b38:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002b3a:	6822      	ldr	r2, [r4, #0]
 8002b3c:	6a13      	ldr	r3, [r2, #32]
 8002b3e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002b42:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b48:	2500      	movs	r5, #0
 8002b4a:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002b4c:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <HAL_ADC_DeInit+0xa4>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002b54:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fe f9bc 	bl	8000ed4 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002b5c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8002b5e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8002b60:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8002b62:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8002b66:	4630      	mov	r0, r6
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7ff ff74 	bl	8002a58 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002b70:	4606      	mov	r6, r0
 8002b72:	b908      	cbnz	r0, 8002b78 <HAL_ADC_DeInit+0x8c>
      hadc->State = HAL_ADC_STATE_READY;
 8002b74:	2301      	movs	r3, #1
 8002b76:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002b78:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002b7a:	6893      	ldr	r3, [r2, #8]
 8002b7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b80:	f023 0317 	bic.w	r3, r3, #23
 8002b84:	6093      	str	r3, [r2, #8]
}
 8002b86:	e7be      	b.n	8002b06 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8002b88:	2601      	movs	r6, #1
 8002b8a:	e7ec      	b.n	8002b66 <HAL_ADC_DeInit+0x7a>
 8002b8c:	833e0200 	.word	0x833e0200
 8002b90:	40012708 	.word	0x40012708

08002b94 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002b94:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d019      	beq.n	8002bd0 <HAL_ADC_Stop+0x3c>
{
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ba6:	f7ff fe83 	bl	80028b0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002baa:	b118      	cbz	r0, 8002bb4 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8002bac:	2300      	movs	r3, #0
 8002bae:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8002bb2:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7ff ff4f 	bl	8002a58 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d1f6      	bne.n	8002bac <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bce:	e7ed      	b.n	8002bac <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8002bd0:	2002      	movs	r0, #2
}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002bd4:	b530      	push	{r4, r5, lr}
 8002bd6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002bdc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d045      	beq.n	8002c70 <HAL_ADCEx_Calibration_Start+0x9c>
 8002be4:	4604      	mov	r4, r0
 8002be6:	2301      	movs	r3, #1
 8002be8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bec:	f7ff ff34 	bl	8002a58 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f012 0f01 	tst.w	r2, #1
 8002bf8:	d008      	beq.n	8002c0c <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bfc:	f043 0310 	orr.w	r3, r3, #16
 8002c00:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002c02:	2300      	movs	r3, #0
 8002c04:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8002c08:	b003      	add	sp, #12
 8002c0a:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002c0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002c0e:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002c12:	f042 0202 	orr.w	r2, r2, #2
 8002c16:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002c18:	68dd      	ldr	r5, [r3, #12]
 8002c1a:	f005 0503 	and.w	r5, r5, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	f022 0203 	bic.w	r2, r2, #3
 8002c24:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	688b      	ldr	r3, [r1, #8]
 8002c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c2e:	608b      	str	r3, [r1, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c30:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	2900      	cmp	r1, #0
 8002c36:	db09      	blt.n	8002c4c <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	432a      	orrs	r2, r5
 8002c3c:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c4a:	e7da      	b.n	8002c02 <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 8002c4c:	9b01      	ldr	r3, [sp, #4]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c52:	9b01      	ldr	r3, [sp, #4]
 8002c54:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8002c58:	d3ea      	bcc.n	8002c30 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8002c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c5c:	f023 0312 	bic.w	r3, r3, #18
 8002c60:	f043 0310 	orr.w	r3, r3, #16
 8002c64:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8002c66:	2300      	movs	r3, #0
 8002c68:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	e7cb      	b.n	8002c08 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 8002c70:	2002      	movs	r0, #2
 8002c72:	e7c9      	b.n	8002c08 <HAL_ADCEx_Calibration_Start+0x34>

08002c74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c76:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	0200      	lsls	r0, r0, #8
 8002c82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c86:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c90:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c98:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_NVIC_SetPriority+0x60>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca2:	f1c3 0407 	rsb	r4, r3, #7
 8002ca6:	2c04      	cmp	r4, #4
 8002ca8:	bf28      	it	cs
 8002caa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cac:	1d1d      	adds	r5, r3, #4
 8002cae:	2d06      	cmp	r5, #6
 8002cb0:	d918      	bls.n	8002ce4 <HAL_NVIC_SetPriority+0x4c>
 8002cb2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8002cb8:	fa05 f404 	lsl.w	r4, r5, r4
 8002cbc:	ea21 0104 	bic.w	r1, r1, r4
 8002cc0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc2:	fa05 f303 	lsl.w	r3, r5, r3
 8002cc6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cca:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	db0b      	blt.n	8002ce8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	0109      	lsls	r1, r1, #4
 8002cd2:	b2c9      	uxtb	r1, r1
 8002cd4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002cd8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002cdc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ce0:	bc30      	pop	{r4, r5}
 8002ce2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e7e5      	b.n	8002cb4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	f000 000f 	and.w	r0, r0, #15
 8002cec:	0109      	lsls	r1, r1, #4
 8002cee:	b2c9      	uxtb	r1, r1
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <HAL_NVIC_SetPriority+0x64>)
 8002cf2:	5419      	strb	r1, [r3, r0]
 8002cf4:	e7f4      	b.n	8002ce0 <HAL_NVIC_SetPriority+0x48>
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00
 8002cfc:	e000ed14 	.word	0xe000ed14

08002d00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d00:	2800      	cmp	r0, #0
 8002d02:	db07      	blt.n	8002d14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d04:	f000 021f 	and.w	r2, r0, #31
 8002d08:	0940      	lsrs	r0, r0, #5
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	4a02      	ldr	r2, [pc, #8]	; (8002d18 <HAL_NVIC_EnableIRQ+0x18>)
 8002d10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	db0c      	blt.n	8002d3a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d20:	f000 021f 	and.w	r2, r0, #31
 8002d24:	0940      	lsrs	r0, r0, #5
 8002d26:	2301      	movs	r3, #1
 8002d28:	4093      	lsls	r3, r2
 8002d2a:	3020      	adds	r0, #32
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <HAL_NVIC_DisableIRQ+0x20>)
 8002d2e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d36:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d42:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002d44:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002d46:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d48:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002d4a:	b114      	cbz	r4, 8002d52 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d4c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002d4e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002d50:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d52:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002d54:	f004 051c 	and.w	r5, r4, #28
 8002d58:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002d5a:	2401      	movs	r4, #1
 8002d5c:	40ac      	lsls	r4, r5
 8002d5e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d60:	6804      	ldr	r4, [r0, #0]
 8002d62:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d64:	6883      	ldr	r3, [r0, #8]
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d005      	beq.n	8002d76 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002d6a:	6803      	ldr	r3, [r0, #0]
 8002d6c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002d6e:	6803      	ldr	r3, [r0, #0]
 8002d70:	60da      	str	r2, [r3, #12]
  }
}
 8002d72:	bc70      	pop	{r4, r5, r6}
 8002d74:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002d76:	6803      	ldr	r3, [r0, #0]
 8002d78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002d7a:	6803      	ldr	r3, [r0, #0]
 8002d7c:	60d9      	str	r1, [r3, #12]
 8002d7e:	e7f8      	b.n	8002d72 <DMA_SetConfig+0x32>

08002d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d80:	6803      	ldr	r3, [r0, #0]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d816      	bhi.n	8002db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002d88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d8a:	f022 0203 	bic.w	r2, r2, #3
 8002d8e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002d92:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002d96:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b08      	subs	r3, #8
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002da6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2201      	movs	r2, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002db4:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002db6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002db8:	f022 0103 	bic.w	r1, r2, #3
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8002dbe:	440a      	add	r2, r1
 8002dc0:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3b08      	subs	r3, #8
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	3307      	adds	r3, #7
 8002dd0:	e7e8      	b.n	8002da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8002dd2:	bf00      	nop
 8002dd4:	40020407 	.word	0x40020407
 8002dd8:	cccccccd 	.word	0xcccccccd
 8002ddc:	40020880 	.word	0x40020880
 8002de0:	4002081c 	.word	0x4002081c

08002de4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002de4:	6843      	ldr	r3, [r0, #4]
 8002de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002dec:	441a      	add	r2, r3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002df2:	4a06      	ldr	r2, [pc, #24]	; (8002e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002df4:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	1000823f 	.word	0x1000823f
 8002e0c:	40020940 	.word	0x40020940

08002e10 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d060      	beq.n	8002ed6 <HAL_DMA_Init+0xc6>
{
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e18:	6802      	ldr	r2, [r0, #0]
 8002e1a:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_DMA_Init+0xcc>)
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d842      	bhi.n	8002ea6 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <HAL_DMA_Init+0xd0>)
 8002e22:	4413      	add	r3, r2
 8002e24:	492f      	ldr	r1, [pc, #188]	; (8002ee4 <HAL_DMA_Init+0xd4>)
 8002e26:	fba1 1303 	umull	r1, r3, r1, r3
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_DMA_Init+0xd8>)
 8002e32:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e34:	2302      	movs	r3, #2
 8002e36:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002e46:	6821      	ldr	r1, [r4, #0]
 8002e48:	680a      	ldr	r2, [r1, #0]
 8002e4a:	68a3      	ldr	r3, [r4, #8]
 8002e4c:	68e0      	ldr	r0, [r4, #12]
 8002e4e:	4303      	orrs	r3, r0
 8002e50:	6920      	ldr	r0, [r4, #16]
 8002e52:	4303      	orrs	r3, r0
 8002e54:	6960      	ldr	r0, [r4, #20]
 8002e56:	4303      	orrs	r3, r0
 8002e58:	69a0      	ldr	r0, [r4, #24]
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	69e0      	ldr	r0, [r4, #28]
 8002e5e:	4303      	orrs	r3, r0
 8002e60:	6a20      	ldr	r0, [r4, #32]
 8002e62:	4303      	orrs	r3, r0
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff ff89 	bl	8002d80 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e6e:	68a3      	ldr	r3, [r4, #8]
 8002e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e76:	6863      	ldr	r3, [r4, #4]
 8002e78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e7e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e82:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e84:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e86:	6863      	ldr	r3, [r4, #4]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d919      	bls.n	8002ec2 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e92:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e94:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e96:	2000      	movs	r0, #0
 8002e98:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002ea0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002ea4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <HAL_DMA_Init+0xdc>)
 8002ea8:	4413      	add	r3, r2
 8002eaa:	490e      	ldr	r1, [pc, #56]	; (8002ee4 <HAL_DMA_Init+0xd4>)
 8002eac:	fba1 1303 	umull	r1, r3, r1, r3
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_DMA_Init+0xe0>)
 8002eb8:	6403      	str	r3, [r0, #64]	; 0x40
 8002eba:	e7bb      	b.n	8002e34 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6063      	str	r3, [r4, #4]
 8002ec0:	e7d9      	b.n	8002e76 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f7ff ff8e 	bl	8002de4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ec8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ed0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	e7df      	b.n	8002e96 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002ed6:	2001      	movs	r0, #1
}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40020407 	.word	0x40020407
 8002ee0:	bffdfff8 	.word	0xbffdfff8
 8002ee4:	cccccccd 	.word	0xcccccccd
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	bffdfbf8 	.word	0xbffdfbf8
 8002ef0:	40020400 	.word	0x40020400

08002ef4 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d04b      	beq.n	8002f90 <HAL_DMA_DeInit+0x9c>
{
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8002efc:	6802      	ldr	r2, [r0, #0]
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f06:	6802      	ldr	r2, [r0, #0]
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_DMA_DeInit+0xa0>)
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d82c      	bhi.n	8002f68 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <HAL_DMA_DeInit+0xa4>)
 8002f10:	4413      	add	r3, r2
 8002f12:	4922      	ldr	r1, [pc, #136]	; (8002f9c <HAL_DMA_DeInit+0xa8>)
 8002f14:	fba1 1303 	umull	r1, r3, r1, r3
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_DMA_DeInit+0xac>)
 8002f20:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8002f22:	2500      	movs	r5, #0
 8002f24:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f28:	f003 021c 	and.w	r2, r3, #28
 8002f2c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4093      	lsls	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff ff23 	bl	8002d80 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8002f3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f3c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002f40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002f42:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f44:	6863      	ldr	r3, [r4, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d918      	bls.n	8002f7e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002f50:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f52:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8002f54:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002f56:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002f58:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002f5a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002f5e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002f62:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_DMA_DeInit+0xb0>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	490b      	ldr	r1, [pc, #44]	; (8002f9c <HAL_DMA_DeInit+0xa8>)
 8002f6e:	fba1 1303 	umull	r1, r3, r1, r3
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_DMA_DeInit+0xb4>)
 8002f7a:	6403      	str	r3, [r0, #64]	; 0x40
 8002f7c:	e7d1      	b.n	8002f22 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7ff ff30 	bl	8002de4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f86:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e7dd      	b.n	8002f4c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8002f90:	2001      	movs	r0, #1
}
 8002f92:	4770      	bx	lr
 8002f94:	40020407 	.word	0x40020407
 8002f98:	bffdfff8 	.word	0xbffdfff8
 8002f9c:	cccccccd 	.word	0xcccccccd
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	bffdfbf8 	.word	0xbffdfbf8
 8002fa8:	40020400 	.word	0x40020400

08002fac <HAL_DMA_Start_IT>:
{
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002fb0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002fb4:	2801      	cmp	r0, #1
 8002fb6:	d043      	beq.n	8003040 <HAL_DMA_Start_IT+0x94>
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8002fbe:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002fc2:	b2c0      	uxtb	r0, r0
 8002fc4:	2801      	cmp	r0, #1
 8002fc6:	d006      	beq.n	8002fd6 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
}
 8002fd4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fdc:	2000      	movs	r0, #0
 8002fde:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002fe0:	6825      	ldr	r5, [r4, #0]
 8002fe2:	6828      	ldr	r0, [r5, #0]
 8002fe4:	f020 0001 	bic.w	r0, r0, #1
 8002fe8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fea:	4620      	mov	r0, r4
 8002fec:	f7ff fea8 	bl	8002d40 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ff2:	b1d3      	cbz	r3, 800302a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	f043 030e 	orr.w	r3, r3, #14
 8002ffc:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ffe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003006:	d003      	beq.n	8003010 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003010:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003012:	b11b      	cbz	r3, 800301c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	6813      	ldr	r3, [r2, #0]
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2000      	movs	r0, #0
 8003028:	e7d4      	b.n	8002fd4 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800302a:	6822      	ldr	r2, [r4, #0]
 800302c:	6813      	ldr	r3, [r2, #0]
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	f043 030a 	orr.w	r3, r3, #10
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e7de      	b.n	8002ffe <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003040:	2002      	movs	r0, #2
 8003042:	e7c7      	b.n	8002fd4 <HAL_DMA_Start_IT+0x28>

08003044 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003044:	4603      	mov	r3, r0
 8003046:	2800      	cmp	r0, #0
 8003048:	d034      	beq.n	80030b4 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800304a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	2a02      	cmp	r2, #2
 8003052:	d006      	beq.n	8003062 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003054:	2204      	movs	r2, #4
 8003056:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003058:	2200      	movs	r2, #0
 800305a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800305e:	2001      	movs	r0, #1
 8003060:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003062:	6801      	ldr	r1, [r0, #0]
 8003064:	680a      	ldr	r2, [r1, #0]
 8003066:	f022 020e 	bic.w	r2, r2, #14
 800306a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800306c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800306e:	680a      	ldr	r2, [r1, #0]
 8003070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003074:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003076:	6801      	ldr	r1, [r0, #0]
 8003078:	680a      	ldr	r2, [r1, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003082:	f002 011c 	and.w	r1, r2, #28
 8003086:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003088:	2201      	movs	r2, #1
 800308a:	408a      	lsls	r2, r1
 800308c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003090:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003092:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003096:	b132      	cbz	r2, 80030a6 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003098:	6811      	ldr	r1, [r2, #0]
 800309a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800309e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80030a4:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80030b2:	4770      	bx	lr
    return HAL_ERROR;
 80030b4:	2001      	movs	r0, #1
}
 80030b6:	4770      	bx	lr

080030b8 <HAL_DMA_Abort_IT>:
{
 80030b8:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c4:	2304      	movs	r3, #4
 80030c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80030c8:	2001      	movs	r0, #1
}
 80030ca:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030cc:	6802      	ldr	r2, [r0, #0]
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	f023 030e 	bic.w	r3, r3, #14
 80030d4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80030d6:	6802      	ldr	r2, [r0, #0]
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030e0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030ec:	f003 021c 	and.w	r2, r3, #28
 80030f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80030f2:	2301      	movs	r3, #1
 80030f4:	4093      	lsls	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80030fa:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80030fc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80030fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003100:	b133      	cbz	r3, 8003110 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003108:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800310a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800310c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800310e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003110:	2301      	movs	r3, #1
 8003112:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003116:	2300      	movs	r3, #0
 8003118:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800311c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800311e:	b113      	cbz	r3, 8003126 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003120:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2000      	movs	r0, #0
 8003124:	e7d1      	b.n	80030ca <HAL_DMA_Abort_IT+0x12>
 8003126:	2000      	movs	r0, #0
 8003128:	e7cf      	b.n	80030ca <HAL_DMA_Abort_IT+0x12>
	...

0800312c <HAL_DMA_IRQHandler>:
{
 800312c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800312e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003130:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003132:	6804      	ldr	r4, [r0, #0]
 8003134:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003136:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003138:	f003 031c 	and.w	r3, r3, #28
 800313c:	2204      	movs	r2, #4
 800313e:	409a      	lsls	r2, r3
 8003140:	420a      	tst	r2, r1
 8003142:	d015      	beq.n	8003170 <HAL_DMA_IRQHandler+0x44>
 8003144:	f015 0f04 	tst.w	r5, #4
 8003148:	d012      	beq.n	8003170 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	f013 0f20 	tst.w	r3, #32
 8003150:	d103      	bne.n	800315a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800315a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800315c:	f003 021c 	and.w	r2, r3, #28
 8003160:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003162:	2304      	movs	r3, #4
 8003164:	4093      	lsls	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003168:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800316a:	b103      	cbz	r3, 800316e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800316c:	4798      	blx	r3
}
 800316e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003170:	2202      	movs	r2, #2
 8003172:	409a      	lsls	r2, r3
 8003174:	420a      	tst	r2, r1
 8003176:	d028      	beq.n	80031ca <HAL_DMA_IRQHandler+0x9e>
 8003178:	f015 0f02 	tst.w	r5, #2
 800317c:	d025      	beq.n	80031ca <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f013 0f20 	tst.w	r3, #32
 8003184:	d106      	bne.n	8003194 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	f023 030a 	bic.w	r3, r3, #10
 800318c:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800318e:	2301      	movs	r3, #1
 8003190:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003194:	6802      	ldr	r2, [r0, #0]
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_DMA_IRQHandler+0xdc>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d90e      	bls.n	80031ba <HAL_DMA_IRQHandler+0x8e>
 800319c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800319e:	f003 021c 	and.w	r2, r3, #28
 80031a2:	2302      	movs	r3, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_DMA_IRQHandler+0xe0>)
 80031a8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80031aa:	2300      	movs	r3, #0
 80031ac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80031b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0db      	beq.n	800316e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80031b6:	4798      	blx	r3
 80031b8:	e7d9      	b.n	800316e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80031ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80031bc:	f003 021c 	and.w	r2, r3, #28
 80031c0:	2302      	movs	r3, #2
 80031c2:	4093      	lsls	r3, r2
 80031c4:	4a12      	ldr	r2, [pc, #72]	; (8003210 <HAL_DMA_IRQHandler+0xe4>)
 80031c6:	6053      	str	r3, [r2, #4]
 80031c8:	e7ef      	b.n	80031aa <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80031ca:	2208      	movs	r2, #8
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	420b      	tst	r3, r1
 80031d2:	d0cc      	beq.n	800316e <HAL_DMA_IRQHandler+0x42>
 80031d4:	f015 0f08 	tst.w	r5, #8
 80031d8:	d0c9      	beq.n	800316e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	f023 030e 	bic.w	r3, r3, #14
 80031e0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80031e4:	f003 031c 	and.w	r3, r3, #28
 80031e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80031ea:	2201      	movs	r2, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031f2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80031f4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80031f8:	2300      	movs	r3, #0
 80031fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80031fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0b4      	beq.n	800316e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003204:	4798      	blx	r3
  return;
 8003206:	e7b2      	b.n	800316e <HAL_DMA_IRQHandler+0x42>
 8003208:	40020080 	.word	0x40020080
 800320c:	40020400 	.word	0x40020400
 8003210:	40020000 	.word	0x40020000

08003214 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003214:	b178      	cbz	r0, 8003236 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003216:	6803      	ldr	r3, [r0, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800321a:	f011 0f10 	tst.w	r1, #16
 800321e:	d004      	beq.n	800322a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003220:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003224:	d004      	beq.n	8003230 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003226:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800322a:	601a      	str	r2, [r3, #0]
  return status;
 800322c:	2000      	movs	r0, #0
 800322e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003230:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003234:	e7f9      	b.n	800322a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003236:	2001      	movs	r0, #1
}
 8003238:	4770      	bx	lr

0800323a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800323a:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 800323c:	4608      	mov	r0, r1
 800323e:	b909      	cbnz	r1, 8003244 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003240:	605a      	str	r2, [r3, #4]
      break;
 8003242:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8003244:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8003246:	4770      	bx	lr

08003248 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003248:	b110      	cbz	r0, 8003250 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800324a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800324c:	2000      	movs	r0, #0
 800324e:	4770      	bx	lr
    return HAL_ERROR;
 8003250:	2001      	movs	r0, #1
  }
}
 8003252:	4770      	bx	lr

08003254 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8003256:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003258:	e05f      	b.n	800331a <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800325a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800325c:	005f      	lsls	r7, r3, #1
 800325e:	2503      	movs	r5, #3
 8003260:	40bd      	lsls	r5, r7
 8003262:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003266:	68cd      	ldr	r5, [r1, #12]
 8003268:	40bd      	lsls	r5, r7
 800326a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800326c:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003270:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003274:	684d      	ldr	r5, [r1, #4]
 8003276:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800327a:	409c      	lsls	r4, r3
 800327c:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800327e:	6044      	str	r4, [r0, #4]
 8003280:	e059      	b.n	8003336 <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003282:	08dd      	lsrs	r5, r3, #3
 8003284:	3508      	adds	r5, #8
 8003286:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800328a:	f003 0407 	and.w	r4, r3, #7
 800328e:	00a6      	lsls	r6, r4, #2
 8003290:	240f      	movs	r4, #15
 8003292:	40b4      	lsls	r4, r6
 8003294:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003298:	690c      	ldr	r4, [r1, #16]
 800329a:	40b4      	lsls	r4, r6
 800329c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 800329e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80032a2:	e05c      	b.n	800335e <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032a4:	2402      	movs	r4, #2
 80032a6:	e000      	b.n	80032aa <HAL_GPIO_Init+0x56>
 80032a8:	2400      	movs	r4, #0
 80032aa:	40b4      	lsls	r4, r6
 80032ac:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ae:	3502      	adds	r5, #2
 80032b0:	4e41      	ldr	r6, [pc, #260]	; (80033b8 <HAL_GPIO_Init+0x164>)
 80032b2:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80032b6:	4c41      	ldr	r4, [pc, #260]	; (80033bc <HAL_GPIO_Init+0x168>)
 80032b8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80032bc:	43d4      	mvns	r4, r2
 80032be:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032c2:	684f      	ldr	r7, [r1, #4]
 80032c4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80032c8:	d001      	beq.n	80032ce <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 80032ca:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80032ce:	4d3b      	ldr	r5, [pc, #236]	; (80033bc <HAL_GPIO_Init+0x168>)
 80032d0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80032d4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80032d8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032dc:	684f      	ldr	r7, [r1, #4]
 80032de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80032e2:	d001      	beq.n	80032e8 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 80032e4:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80032e8:	4d34      	ldr	r5, [pc, #208]	; (80033bc <HAL_GPIO_Init+0x168>)
 80032ea:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ee:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80032f0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032f4:	684f      	ldr	r7, [r1, #4]
 80032f6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80032fa:	d001      	beq.n	8003300 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80032fc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003300:	4d2e      	ldr	r5, [pc, #184]	; (80033bc <HAL_GPIO_Init+0x168>)
 8003302:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003304:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003306:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003308:	684e      	ldr	r6, [r1, #4]
 800330a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800330e:	d001      	beq.n	8003314 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8003310:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003314:	4a29      	ldr	r2, [pc, #164]	; (80033bc <HAL_GPIO_Init+0x168>)
 8003316:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8003318:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331a:	680a      	ldr	r2, [r1, #0]
 800331c:	fa32 f403 	lsrs.w	r4, r2, r3
 8003320:	d048      	beq.n	80033b4 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003322:	2401      	movs	r4, #1
 8003324:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003326:	4022      	ands	r2, r4
 8003328:	d0f6      	beq.n	8003318 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800332a:	684d      	ldr	r5, [r1, #4]
 800332c:	f005 0503 	and.w	r5, r5, #3
 8003330:	3d01      	subs	r5, #1
 8003332:	2d01      	cmp	r5, #1
 8003334:	d991      	bls.n	800325a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003336:	684c      	ldr	r4, [r1, #4]
 8003338:	f004 0403 	and.w	r4, r4, #3
 800333c:	2c03      	cmp	r4, #3
 800333e:	d009      	beq.n	8003354 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8003340:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003342:	005e      	lsls	r6, r3, #1
 8003344:	2403      	movs	r4, #3
 8003346:	40b4      	lsls	r4, r6
 8003348:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334c:	688c      	ldr	r4, [r1, #8]
 800334e:	40b4      	lsls	r4, r6
 8003350:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003352:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003354:	684c      	ldr	r4, [r1, #4]
 8003356:	f004 0403 	and.w	r4, r4, #3
 800335a:	2c02      	cmp	r4, #2
 800335c:	d091      	beq.n	8003282 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800335e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003360:	005e      	lsls	r6, r3, #1
 8003362:	2403      	movs	r4, #3
 8003364:	40b4      	lsls	r4, r6
 8003366:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336a:	684c      	ldr	r4, [r1, #4]
 800336c:	f004 0403 	and.w	r4, r4, #3
 8003370:	40b4      	lsls	r4, r6
 8003372:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003374:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003376:	684c      	ldr	r4, [r1, #4]
 8003378:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800337c:	d0cc      	beq.n	8003318 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 800337e:	089d      	lsrs	r5, r3, #2
 8003380:	1cae      	adds	r6, r5, #2
 8003382:	4c0d      	ldr	r4, [pc, #52]	; (80033b8 <HAL_GPIO_Init+0x164>)
 8003384:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003388:	f003 0403 	and.w	r4, r3, #3
 800338c:	00a6      	lsls	r6, r4, #2
 800338e:	2407      	movs	r4, #7
 8003390:	40b4      	lsls	r4, r6
 8003392:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003396:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800339a:	d085      	beq.n	80032a8 <HAL_GPIO_Init+0x54>
 800339c:	4c08      	ldr	r4, [pc, #32]	; (80033c0 <HAL_GPIO_Init+0x16c>)
 800339e:	42a0      	cmp	r0, r4
 80033a0:	d006      	beq.n	80033b0 <HAL_GPIO_Init+0x15c>
 80033a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033a6:	42a0      	cmp	r0, r4
 80033a8:	f43f af7c 	beq.w	80032a4 <HAL_GPIO_Init+0x50>
 80033ac:	2407      	movs	r4, #7
 80033ae:	e77c      	b.n	80032aa <HAL_GPIO_Init+0x56>
 80033b0:	2401      	movs	r4, #1
 80033b2:	e77a      	b.n	80032aa <HAL_GPIO_Init+0x56>
  }
}
 80033b4:	bcf0      	pop	{r4, r5, r6, r7}
 80033b6:	4770      	bx	lr
 80033b8:	40010000 	.word	0x40010000
 80033bc:	58000800 	.word	0x58000800
 80033c0:	48000400 	.word	0x48000400

080033c4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80033c4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80033c6:	fa31 f203 	lsrs.w	r2, r1, r3
 80033ca:	d06f      	beq.n	80034ac <HAL_GPIO_DeInit+0xe8>
{
 80033cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ce:	e02d      	b.n	800342c <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80033d0:	2702      	movs	r7, #2
 80033d2:	e000      	b.n	80033d6 <HAL_GPIO_DeInit+0x12>
 80033d4:	2700      	movs	r7, #0
 80033d6:	fa07 f404 	lsl.w	r4, r7, r4
 80033da:	42b4      	cmp	r4, r6
 80033dc:	d046      	beq.n	800346c <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80033de:	6805      	ldr	r5, [r0, #0]
 80033e0:	005c      	lsls	r4, r3, #1
 80033e2:	2603      	movs	r6, #3
 80033e4:	fa06 f404 	lsl.w	r4, r6, r4
 80033e8:	4325      	orrs	r5, r4
 80033ea:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80033ec:	fa23 f506 	lsr.w	r5, r3, r6
 80033f0:	3508      	adds	r5, #8
 80033f2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80033f6:	f003 0707 	and.w	r7, r3, #7
 80033fa:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80033fe:	270f      	movs	r7, #15
 8003400:	fa07 f70c 	lsl.w	r7, r7, ip
 8003404:	ea26 0607 	bic.w	r6, r6, r7
 8003408:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800340c:	6885      	ldr	r5, [r0, #8]
 800340e:	ea25 0504 	bic.w	r5, r5, r4
 8003412:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003414:	6845      	ldr	r5, [r0, #4]
 8003416:	ea25 0202 	bic.w	r2, r5, r2
 800341a:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800341c:	68c2      	ldr	r2, [r0, #12]
 800341e:	ea22 0404 	bic.w	r4, r2, r4
 8003422:	60c4      	str	r4, [r0, #12]
    }

    position++;
 8003424:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003426:	fa31 f203 	lsrs.w	r2, r1, r3
 800342a:	d03e      	beq.n	80034aa <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800342c:	2201      	movs	r2, #1
 800342e:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003430:	ea12 0e01 	ands.w	lr, r2, r1
 8003434:	d0f6      	beq.n	8003424 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003436:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800343a:	f10c 0502 	add.w	r5, ip, #2
 800343e:	4c1c      	ldr	r4, [pc, #112]	; (80034b0 <HAL_GPIO_DeInit+0xec>)
 8003440:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003444:	f003 0403 	and.w	r4, r3, #3
 8003448:	00a4      	lsls	r4, r4, #2
 800344a:	2507      	movs	r5, #7
 800344c:	40a5      	lsls	r5, r4
 800344e:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003450:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003454:	d0be      	beq.n	80033d4 <HAL_GPIO_DeInit+0x10>
 8003456:	4f17      	ldr	r7, [pc, #92]	; (80034b4 <HAL_GPIO_DeInit+0xf0>)
 8003458:	42b8      	cmp	r0, r7
 800345a:	d005      	beq.n	8003468 <HAL_GPIO_DeInit+0xa4>
 800345c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003460:	42b8      	cmp	r0, r7
 8003462:	d0b5      	beq.n	80033d0 <HAL_GPIO_DeInit+0xc>
 8003464:	2707      	movs	r7, #7
 8003466:	e7b6      	b.n	80033d6 <HAL_GPIO_DeInit+0x12>
 8003468:	2701      	movs	r7, #1
 800346a:	e7b4      	b.n	80033d6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800346c:	4c12      	ldr	r4, [pc, #72]	; (80034b8 <HAL_GPIO_DeInit+0xf4>)
 800346e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8003472:	ea26 060e 	bic.w	r6, r6, lr
 8003476:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800347a:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800347e:	ea26 060e 	bic.w	r6, r6, lr
 8003482:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003486:	6826      	ldr	r6, [r4, #0]
 8003488:	ea26 060e 	bic.w	r6, r6, lr
 800348c:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800348e:	6866      	ldr	r6, [r4, #4]
 8003490:	ea26 060e 	bic.w	r6, r6, lr
 8003494:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003496:	4e06      	ldr	r6, [pc, #24]	; (80034b0 <HAL_GPIO_DeInit+0xec>)
 8003498:	f10c 0c02 	add.w	ip, ip, #2
 800349c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80034a0:	ea24 0505 	bic.w	r5, r4, r5
 80034a4:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 80034a8:	e799      	b.n	80033de <HAL_GPIO_DeInit+0x1a>
  }
}
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	48000400 	.word	0x48000400
 80034b8:	58000800 	.word	0x58000800

080034bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034bc:	b10a      	cbz	r2, 80034c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034be:	6181      	str	r1, [r0, #24]
 80034c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034c2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80034c4:	4770      	bx	lr

080034c6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034c6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034c8:	ea01 0203 	and.w	r2, r1, r3
 80034cc:	ea21 0103 	bic.w	r1, r1, r3
 80034d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80034d4:	6181      	str	r1, [r0, #24]
}
 80034d6:	4770      	bx	lr

080034d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034d8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4203      	tst	r3, r0
 80034e0:	d100      	bne.n	80034e4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80034e2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e4:	4b02      	ldr	r3, [pc, #8]	; (80034f0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80034e6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e8:	f7fe fd1e 	bl	8001f28 <HAL_GPIO_EXTI_Callback>
}
 80034ec:	e7f9      	b.n	80034e2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80034ee:	bf00      	nop
 80034f0:	58000800 	.word	0x58000800

080034f4 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f4:	4a02      	ldr	r2, [pc, #8]	; (8003500 <HAL_PWR_EnableBkUpAccess+0xc>)
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]
}
 80034fe:	4770      	bx	lr
 8003500:	58000400 	.word	0x58000400

08003504 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003504:	b510      	push	{r4, lr}
 8003506:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003508:	b9a0      	cbnz	r0, 8003534 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_PWR_EnterSLEEPMode+0x44>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003512:	d10a      	bne.n	800352a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <HAL_PWR_EnterSLEEPMode+0x48>)
 8003516:	6913      	ldr	r3, [r2, #16]
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800351e:	2c01      	cmp	r4, #1
 8003520:	d010      	beq.n	8003544 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003522:	bf40      	sev
    __WFE();
 8003524:	bf20      	wfe
    __WFE();
 8003526:	bf20      	wfe
  }
}
 8003528:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800352a:	f000 f821 	bl	8003570 <HAL_PWREx_DisableLowPowerRunMode>
 800352e:	2800      	cmp	r0, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_PWR_EnterSLEEPMode+0x10>
 8003532:	e7f9      	b.n	8003528 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f413 7f00 	tst.w	r3, #512	; 0x200
 800353c:	d1ea      	bne.n	8003514 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800353e:	f000 f80f 	bl	8003560 <HAL_PWREx_EnableLowPowerRunMode>
 8003542:	e7e7      	b.n	8003514 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003544:	bf30      	wfi
 8003546:	e7ef      	b.n	8003528 <HAL_PWR_EnterSLEEPMode+0x24>
 8003548:	58000400 	.word	0x58000400
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <HAL_PWREx_GetVoltageRange+0xc>)
 8003552:	6818      	ldr	r0, [r3, #0]
}
 8003554:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	58000400 	.word	0x58000400

08003560 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003560:	4a02      	ldr	r2, [pc, #8]	; (800356c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003562:	6813      	ldr	r3, [r2, #0]
 8003564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	4770      	bx	lr
 800356c:	58000400 	.word	0x58000400

08003570 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003570:	4a0f      	ldr	r2, [pc, #60]	; (80035b0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003578:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	2332      	movs	r3, #50	; 0x32
 8003580:	fb03 f302 	mul.w	r3, r3, r2
 8003584:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800358e:	6952      	ldr	r2, [r2, #20]
 8003590:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003594:	d002      	beq.n	800359c <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8003596:	b10b      	cbz	r3, 800359c <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 8003598:	3b01      	subs	r3, #1
 800359a:	e7f7      	b.n	800358c <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035a4:	d101      	bne.n	80035aa <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80035a6:	2000      	movs	r0, #0
 80035a8:	4770      	bx	lr
    return HAL_TIMEOUT;
 80035aa:	2003      	movs	r0, #3
}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	58000400 	.word	0x58000400
 80035b4:	2000004c 	.word	0x2000004c
 80035b8:	431bde83 	.word	0x431bde83

080035bc <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80035bc:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	f023 0307 	bic.w	r3, r3, #7
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80035cc:	6913      	ldr	r3, [r2, #16]
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80035d4:	2801      	cmp	r0, #1
 80035d6:	d008      	beq.n	80035ea <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80035d8:	bf40      	sev
    __WFE();
 80035da:	bf20      	wfe
    __WFE();
 80035dc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80035e0:	6913      	ldr	r3, [r2, #16]
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6113      	str	r3, [r2, #16]
}
 80035e8:	4770      	bx	lr
    __WFI();
 80035ea:	bf30      	wfi
 80035ec:	e7f7      	b.n	80035de <HAL_PWREx_EnterSTOP2Mode+0x22>
 80035ee:	bf00      	nop
 80035f0:	58000400 	.word	0x58000400
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	4604      	mov	r4, r0
 80035fe:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <RCC_SetFlashLatency+0xb0>)
 8003602:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003606:	9006      	str	r0, [sp, #24]
 8003608:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800360c:	68d9      	ldr	r1, [r3, #12]
 800360e:	6898      	ldr	r0, [r3, #8]
 8003610:	9004      	str	r0, [sp, #16]
 8003612:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003616:	ad01      	add	r5, sp, #4
 8003618:	3310      	adds	r3, #16
 800361a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800361e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003622:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003626:	d01b      	beq.n	8003660 <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003628:	2300      	movs	r3, #0
 800362a:	2b02      	cmp	r3, #2
 800362c:	d822      	bhi.n	8003674 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800362e:	aa08      	add	r2, sp, #32
 8003630:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003634:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003638:	42a2      	cmp	r2, r4
 800363a:	d215      	bcs.n	8003668 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800363c:	3301      	adds	r3, #1
 800363e:	e7f4      	b.n	800362a <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003640:	3301      	adds	r3, #1
 8003642:	2b02      	cmp	r3, #2
 8003644:	d80e      	bhi.n	8003664 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003646:	aa08      	add	r2, sp, #32
 8003648:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800364c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003650:	42a2      	cmp	r2, r4
 8003652:	d3f5      	bcc.n	8003640 <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 8003654:	aa08      	add	r2, sp, #32
 8003656:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800365a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800365e:	e00a      	b.n	8003676 <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003660:	2300      	movs	r3, #0
 8003662:	e7ee      	b.n	8003642 <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003664:	2500      	movs	r5, #0
 8003666:	e006      	b.n	8003676 <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003668:	aa08      	add	r2, sp, #32
 800366a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800366e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003672:	e000      	b.n	8003676 <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003674:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <RCC_SetFlashLatency+0xb4>)
 8003678:	6813      	ldr	r3, [r2, #0]
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	432b      	orrs	r3, r5
 8003680:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003682:	f7fd ff33 	bl	80014ec <HAL_GetTick>
 8003686:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <RCC_SetFlashLatency+0xb4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	42ab      	cmp	r3, r5
 8003692:	d006      	beq.n	80036a2 <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003694:	f7fd ff2a 	bl	80014ec <HAL_GetTick>
 8003698:	1b00      	subs	r0, r0, r4
 800369a:	2802      	cmp	r0, #2
 800369c:	d9f4      	bls.n	8003688 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 800369e:	2003      	movs	r0, #3
 80036a0:	e000      	b.n	80036a4 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 80036a2:	2000      	movs	r0, #0
}
 80036a4:	b008      	add	sp, #32
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	080112b0 	.word	0x080112b0
 80036ac:	58004000 	.word	0x58004000

080036b0 <RCC_SetFlashLatencyFromMSIRange>:
{
 80036b0:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036b2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80036b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80036bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	4a08      	ldr	r2, [pc, #32]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80036ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036ce:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036d2:	f7ff ff3d 	bl	8003550 <HAL_PWREx_GetVoltageRange>
 80036d6:	4601      	mov	r1, r0
 80036d8:	4805      	ldr	r0, [pc, #20]	; (80036f0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80036da:	fba0 3004 	umull	r3, r0, r0, r4
 80036de:	0c80      	lsrs	r0, r0, #18
 80036e0:	f7ff ff8a 	bl	80035f8 <RCC_SetFlashLatency>
}
 80036e4:	bd10      	pop	{r4, pc}
 80036e6:	bf00      	nop
 80036e8:	080116fc 	.word	0x080116fc
 80036ec:	0801169c 	.word	0x0801169c
 80036f0:	431bde83 	.word	0x431bde83

080036f4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003700:	f012 020c 	ands.w	r2, r2, #12
 8003704:	d00a      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x28>
 8003706:	2a0c      	cmp	r2, #12
 8003708:	d006      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800370a:	2a04      	cmp	r2, #4
 800370c:	d047      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800370e:	2a08      	cmp	r2, #8
 8003710:	d03b      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8003712:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8003714:	4608      	mov	r0, r1
 8003716:	e026      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003718:	2b01      	cmp	r3, #1
 800371a:	d1f6      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f013 0308 	ands.w	r3, r3, #8
 8003726:	d00d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x50>
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f013 0308 	ands.w	r3, r3, #8
 8003732:	d124      	bne.n	800377e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003738:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800373c:	492e      	ldr	r1, [pc, #184]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800373e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003742:	e00e      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003748:	6809      	ldr	r1, [r1, #0]
 800374a:	f011 0f08 	tst.w	r1, #8
 800374e:	d112      	bne.n	8003776 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800375c:	4926      	ldr	r1, [pc, #152]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800375e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003762:	b1d2      	cbz	r2, 800379a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8003764:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d01a      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0xb6>
}
 8003774:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	e7ee      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x68>
 800377e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003782:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003784:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003788:	e7d8      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 8003794:	d106      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8003796:	4819      	ldr	r0, [pc, #100]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003798:	e7e5      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800379a:	4608      	mov	r0, r1
 800379c:	e7e3      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800379e:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 80037a0:	4817      	ldr	r0, [pc, #92]	; (8003800 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037a2:	e7e0      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80037a4:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 80037a6:	4816      	ldr	r0, [pc, #88]	; (8003800 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037a8:	e7dd      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d009      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0xd8>
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d108      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80037c6:	d115      	bne.n	80037f4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80037c8:	490c      	ldr	r1, [pc, #48]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	e000      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80037ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d2:	68d0      	ldr	r0, [r2, #12]
 80037d4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80037d8:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80037dc:	68d3      	ldr	r3, [r2, #12]
 80037de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80037e8:	68d3      	ldr	r3, [r2, #12]
 80037ea:	0f5b      	lsrs	r3, r3, #29
 80037ec:	3301      	adds	r3, #1
 80037ee:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80037f2:	e7bf      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80037f4:	4902      	ldr	r1, [pc, #8]	; (8003800 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037f6:	e7ea      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0xda>
 80037f8:	080116fc 	.word	0x080116fc
 80037fc:	01e84800 	.word	0x01e84800
 8003800:	00f42400 	.word	0x00f42400

08003804 <HAL_RCC_GetHCLKFreq>:
{
 8003804:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003806:	f7ff ff75 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003814:	4a02      	ldr	r2, [pc, #8]	; (8003820 <HAL_RCC_GetHCLKFreq+0x1c>)
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800381a:	fbb0 f0f3 	udiv	r0, r0, r3
 800381e:	bd08      	pop	{r3, pc}
 8003820:	0801169c 	.word	0x0801169c

08003824 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003824:	2800      	cmp	r0, #0
 8003826:	f000 8318 	beq.w	8003e5a <HAL_RCC_OscConfig+0x636>
{
 800382a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	689d      	ldr	r5, [r3, #8]
 8003834:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003838:	68de      	ldr	r6, [r3, #12]
 800383a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800383e:	6803      	ldr	r3, [r0, #0]
 8003840:	f013 0f20 	tst.w	r3, #32
 8003844:	f000 808f 	beq.w	8003966 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003848:	b1ed      	cbz	r5, 8003886 <HAL_RCC_OscConfig+0x62>
 800384a:	2d0c      	cmp	r5, #12
 800384c:	d019      	beq.n	8003882 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800384e:	6a23      	ldr	r3, [r4, #32]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80bc 	beq.w	80039ce <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003862:	f7fd fe43 	bl	80014ec <HAL_GetTick>
 8003866:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f013 0f02 	tst.w	r3, #2
 8003872:	d165      	bne.n	8003940 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003874:	f7fd fe3a 	bl	80014ec <HAL_GetTick>
 8003878:	1bc0      	subs	r0, r0, r7
 800387a:	2802      	cmp	r0, #2
 800387c:	d9f4      	bls.n	8003868 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800387e:	2003      	movs	r0, #3
 8003880:	e2f8      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003882:	2e01      	cmp	r6, #1
 8003884:	d1e3      	bne.n	800384e <HAL_RCC_OscConfig+0x2a>
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f013 0f02 	tst.w	r3, #2
 8003890:	d003      	beq.n	800389a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003892:	6a23      	ldr	r3, [r4, #32]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 82e2 	beq.w	8003e5e <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800389a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f013 0f08 	tst.w	r3, #8
 80038a6:	d029      	beq.n	80038fc <HAL_RCC_OscConfig+0xd8>
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b2:	4298      	cmp	r0, r3
 80038b4:	d92a      	bls.n	800390c <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038b6:	f7ff fefb 	bl	80036b0 <RCC_SetFlashLatencyFromMSIRange>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	f040 82d1 	bne.w	8003e62 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80038d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80038e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038e4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038e6:	f7ff ff8d 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 80038ea:	4bbc      	ldr	r3, [pc, #752]	; (8003bdc <HAL_RCC_OscConfig+0x3b8>)
 80038ec:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80038ee:	4bbc      	ldr	r3, [pc, #752]	; (8003be0 <HAL_RCC_OscConfig+0x3bc>)
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f7fd fdf9 	bl	80014e8 <HAL_InitTick>
        if (status != HAL_OK)
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d035      	beq.n	8003966 <HAL_RCC_OscConfig+0x142>
 80038fa:	e2bb      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390a:	e7d2      	b.n	80038b2 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800391e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003924:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800392c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003930:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003932:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003934:	f7ff febc 	bl	80036b0 <RCC_SetFlashLatencyFromMSIRange>
 8003938:	2800      	cmp	r0, #0
 800393a:	d0d4      	beq.n	80038e6 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 800393c:	2001      	movs	r0, #1
 800393e:	e299      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	f042 0208 	orr.w	r2, r2, #8
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003952:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003958:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003960:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003964:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f013 0f01 	tst.w	r3, #1
 800396c:	d051      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800396e:	2d08      	cmp	r5, #8
 8003970:	d045      	beq.n	80039fe <HAL_RCC_OscConfig+0x1da>
 8003972:	2d0c      	cmp	r5, #12
 8003974:	d041      	beq.n	80039fa <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003980:	68a1      	ldr	r1, [r4, #8]
 8003982:	430b      	orrs	r3, r1
 8003984:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003986:	6863      	ldr	r3, [r4, #4]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_OscConfig+0x232>
 800398e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003992:	d065      	beq.n	8003a60 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800399e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039a6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a8:	6863      	ldr	r3, [r4, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 80039ae:	f7fd fd9d 	bl	80014ec <HAL_GetTick>
 80039b2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80039be:	d128      	bne.n	8003a12 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fd fd94 	bl	80014ec <HAL_GetTick>
 80039c4:	1bc0      	subs	r0, r0, r7
 80039c6:	2864      	cmp	r0, #100	; 0x64
 80039c8:	d9f4      	bls.n	80039b4 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80039ca:	2003      	movs	r0, #3
 80039cc:	e252      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80039ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039da:	f7fd fd87 	bl	80014ec <HAL_GetTick>
 80039de:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f013 0f02 	tst.w	r3, #2
 80039ea:	d0bc      	beq.n	8003966 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ec:	f7fd fd7e 	bl	80014ec <HAL_GetTick>
 80039f0:	1bc0      	subs	r0, r0, r7
 80039f2:	2802      	cmp	r0, #2
 80039f4:	d9f4      	bls.n	80039e0 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80039f6:	2003      	movs	r0, #3
 80039f8:	e23c      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039fa:	2e03      	cmp	r6, #3
 80039fc:	d1bb      	bne.n	8003976 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80039fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 822a 	beq.w	8003e66 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	f013 0f02 	tst.w	r3, #2
 8003a18:	d052      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003a1a:	2d04      	cmp	r5, #4
 8003a1c:	d03d      	beq.n	8003a9a <HAL_RCC_OscConfig+0x276>
 8003a1e:	2d0c      	cmp	r5, #12
 8003a20:	d039      	beq.n	8003a96 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8091 	beq.w	8003b4c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a36:	f7fd fd59 	bl	80014ec <HAL_GetTick>
 8003a3a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a46:	d177      	bne.n	8003b38 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fd fd50 	bl	80014ec <HAL_GetTick>
 8003a4c:	1b80      	subs	r0, r0, r6
 8003a4e:	2802      	cmp	r0, #2
 8003a50:	d9f4      	bls.n	8003a3c <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8003a52:	2003      	movs	r0, #3
 8003a54:	e20e      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a56:	6813      	ldr	r3, [r2, #0]
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
}
 8003a5e:	e7a3      	b.n	80039a8 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003a6a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	e798      	b.n	80039a8 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8003a76:	f7fd fd39 	bl	80014ec <HAL_GetTick>
 8003a7a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a86:	d0c4      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fd30 	bl	80014ec <HAL_GetTick>
 8003a8c:	1bc0      	subs	r0, r0, r7
 8003a8e:	2864      	cmp	r0, #100	; 0x64
 8003a90:	d9f4      	bls.n	8003a7c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8003a92:	2003      	movs	r0, #3
 8003a94:	e1ee      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a96:	2e02      	cmp	r6, #2
 8003a98:	d1c3      	bne.n	8003a22 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 81de 	beq.w	8003e6a <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab4:	6853      	ldr	r3, [r2, #4]
 8003ab6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003aba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003abe:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	f013 0f08 	tst.w	r3, #8
 8003ac6:	f000 808d 	beq.w	8003be4 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aca:	69a3      	ldr	r3, [r4, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d06c      	beq.n	8003baa <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003ad8:	69e1      	ldr	r1, [r4, #28]
 8003ada:	f003 0210 	and.w	r2, r3, #16
 8003ade:	4291      	cmp	r1, r2
 8003ae0:	d011      	beq.n	8003b06 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ae2:	f003 0203 	and.w	r2, r3, #3
 8003ae6:	2a02      	cmp	r2, #2
 8003ae8:	f000 81c1 	beq.w	8003e6e <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003aec:	f013 0f01 	tst.w	r3, #1
 8003af0:	d142      	bne.n	8003b78 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003afa:	f023 0310 	bic.w	r3, r3, #16
 8003afe:	69e1      	ldr	r1, [r4, #28]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003b16:	f7fd fce9 	bl	80014ec <HAL_GetTick>
 8003b1a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b24:	f013 0f02 	tst.w	r3, #2
 8003b28:	d15c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2a:	f7fd fcdf 	bl	80014ec <HAL_GetTick>
 8003b2e:	1b80      	subs	r0, r0, r6
 8003b30:	2811      	cmp	r0, #17
 8003b32:	d9f3      	bls.n	8003b1c <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8003b34:	2003      	movs	r0, #3
 8003b36:	e19d      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3e:	6853      	ldr	r3, [r2, #4]
 8003b40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b44:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b48:	6053      	str	r3, [r2, #4]
}
 8003b4a:	e7b9      	b.n	8003ac0 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b50:	6813      	ldr	r3, [r2, #0]
 8003b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b58:	f7fd fcc8 	bl	80014ec <HAL_GetTick>
 8003b5c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b68:	d0aa      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fd fcbf 	bl	80014ec <HAL_GetTick>
 8003b6e:	1b80      	subs	r0, r0, r6
 8003b70:	2802      	cmp	r0, #2
 8003b72:	d9f4      	bls.n	8003b5e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8003b74:	2003      	movs	r0, #3
 8003b76:	e17d      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003b88:	f7fd fcb0 	bl	80014ec <HAL_GetTick>
 8003b8c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	f013 0f02 	tst.w	r3, #2
 8003b9a:	d0aa      	beq.n	8003af2 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fd fca6 	bl	80014ec <HAL_GetTick>
 8003ba0:	1b80      	subs	r0, r0, r6
 8003ba2:	2811      	cmp	r0, #17
 8003ba4:	d9f3      	bls.n	8003b8e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	e164      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bae:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003bba:	f7fd fc97 	bl	80014ec <HAL_GetTick>
 8003bbe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc8:	f013 0f02 	tst.w	r3, #2
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fd fc8d 	bl	80014ec <HAL_GetTick>
 8003bd2:	1b80      	subs	r0, r0, r6
 8003bd4:	2811      	cmp	r0, #17
 8003bd6:	d9f3      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 8003bd8:	2003      	movs	r0, #3
 8003bda:	e14b      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
 8003bdc:	2000004c 	.word	0x2000004c
 8003be0:	20000050 	.word	0x20000050
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f013 0f04 	tst.w	r3, #4
 8003bea:	f000 80b1 	beq.w	8003d50 <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003bee:	4ba9      	ldr	r3, [pc, #676]	; (8003e94 <HAL_RCC_OscConfig+0x670>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bf6:	d110      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 8003bf8:	f7ff fc7c 	bl	80034f4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003bfc:	f7fd fc76 	bl	80014ec <HAL_GetTick>
 8003c00:	4606      	mov	r6, r0
 8003c02:	4ba4      	ldr	r3, [pc, #656]	; (8003e94 <HAL_RCC_OscConfig+0x670>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0c:	f7fd fc6e 	bl	80014ec <HAL_GetTick>
 8003c10:	1b80      	subs	r0, r0, r6
 8003c12:	2802      	cmp	r0, #2
 8003c14:	d9f5      	bls.n	8003c02 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8003c16:	2003      	movs	r0, #3
 8003c18:	e12c      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c1a:	68e3      	ldr	r3, [r4, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d061      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003c20:	2b85      	cmp	r3, #133	; 0x85
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003c38:	f7fd fc58 	bl	80014ec <HAL_GetTick>
 8003c3c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f013 0f02 	tst.w	r3, #2
 8003c5a:	d108      	bne.n	8003c6e <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fc46 	bl	80014ec <HAL_GetTick>
 8003c60:	1b80      	subs	r0, r0, r6
 8003c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c66:	4298      	cmp	r0, r3
 8003c68:	d9f1      	bls.n	8003c4e <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 8003c6a:	2003      	movs	r0, #3
 8003c6c:	e102      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	2b81      	cmp	r3, #129	; 0x81
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003c74:	2b85      	cmp	r3, #133	; 0x85
 8003c76:	d11a      	bne.n	8003cae <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8003c78:	f7fd fc38 	bl	80014ec <HAL_GetTick>
 8003c7c:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003c9a:	d159      	bne.n	8003d50 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fc26 	bl	80014ec <HAL_GetTick>
 8003ca0:	1b80      	subs	r0, r0, r6
 8003ca2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ca6:	4298      	cmp	r0, r3
 8003ca8:	d9f1      	bls.n	8003c8e <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8003caa:	2003      	movs	r0, #3
 8003cac:	e0e2      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 8003cae:	f7fd fc1d 	bl	80014ec <HAL_GetTick>
 8003cb2:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003cd0:	d03e      	beq.n	8003d50 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fd fc0b 	bl	80014ec <HAL_GetTick>
 8003cd6:	1b80      	subs	r0, r0, r6
 8003cd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cdc:	4298      	cmp	r0, r3
 8003cde:	d9f1      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	e0c7      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8003ce4:	f7fd fc02 	bl	80014ec <HAL_GetTick>
 8003ce8:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd fbf0 	bl	80014ec <HAL_GetTick>
 8003d0c:	1b80      	subs	r0, r0, r6
 8003d0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d12:	4298      	cmp	r0, r3
 8003d14:	d9f1      	bls.n	8003cfa <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 8003d16:	2003      	movs	r0, #3
 8003d18:	e0ac      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8003d1a:	f7fd fbe7 	bl	80014ec <HAL_GetTick>
 8003d1e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	f013 0f02 	tst.w	r3, #2
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fd fbd5 	bl	80014ec <HAL_GetTick>
 8003d42:	1b80      	subs	r0, r0, r6
 8003d44:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d48:	4298      	cmp	r0, r3
 8003d4a:	d9f1      	bls.n	8003d30 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8003d4c:	2003      	movs	r0, #3
 8003d4e:	e091      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 808d 	beq.w	8003e72 <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d58:	2d0c      	cmp	r5, #12
 8003d5a:	d062      	beq.n	8003e22 <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d01f      	beq.n	8003da0 <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003d6a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	f022 0203 	bic.w	r2, r2, #3
 8003d72:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003d7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d7e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003d80:	f7fd fbb4 	bl	80014ec <HAL_GetTick>
 8003d84:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d90:	d073      	beq.n	8003e7a <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fd fbab 	bl	80014ec <HAL_GetTick>
 8003d96:	1b00      	subs	r0, r0, r4
 8003d98:	280a      	cmp	r0, #10
 8003d9a:	d9f4      	bls.n	8003d86 <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 8003d9c:	2003      	movs	r0, #3
 8003d9e:	e069      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003dac:	f7fd fb9e 	bl	80014ec <HAL_GetTick>
 8003db0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003dbc:	d12a      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc2:	68d3      	ldr	r3, [r2, #12]
 8003dc4:	4934      	ldr	r1, [pc, #208]	; (8003e98 <HAL_RCC_OscConfig+0x674>)
 8003dc6:	4019      	ands	r1, r3
 8003dc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003dcc:	4303      	orrs	r3, r0
 8003dce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003dd0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003dd4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003dd6:	4303      	orrs	r3, r0
 8003dd8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003dda:	4303      	orrs	r3, r0
 8003ddc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003dde:	4303      	orrs	r3, r0
 8003de0:	430b      	orrs	r3, r1
 8003de2:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003de4:	6813      	ldr	r3, [r2, #0]
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dec:	68d3      	ldr	r3, [r2, #12]
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003df4:	f7fd fb7a 	bl	80014ec <HAL_GetTick>
 8003df8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e04:	d137      	bne.n	8003e76 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e06:	f7fd fb71 	bl	80014ec <HAL_GetTick>
 8003e0a:	1b00      	subs	r0, r0, r4
 8003e0c:	280a      	cmp	r0, #10
 8003e0e:	d9f4      	bls.n	8003dfa <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 8003e10:	2003      	movs	r0, #3
 8003e12:	e02f      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd fb6a 	bl	80014ec <HAL_GetTick>
 8003e18:	1b40      	subs	r0, r0, r5
 8003e1a:	280a      	cmp	r0, #10
 8003e1c:	d9c9      	bls.n	8003db2 <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 8003e1e:	2003      	movs	r0, #3
 8003e20:	e028      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d02b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 8003e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2a:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003e2c:	f003 0103 	and.w	r1, r3, #3
 8003e30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003e32:	4291      	cmp	r1, r2
 8003e34:	d125      	bne.n	8003e82 <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003e36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e3c:	428a      	cmp	r2, r1
 8003e3e:	d122      	bne.n	8003e86 <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003e40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e44:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003e46:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003e4a:	d11e      	bne.n	8003e8a <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003e4c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003e50:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d11b      	bne.n	8003e8e <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 8003e56:	2000      	movs	r0, #0
 8003e58:	e00c      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 8003e5a:	2001      	movs	r0, #1
}
 8003e5c:	4770      	bx	lr
        return HAL_ERROR;
 8003e5e:	2001      	movs	r0, #1
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8003e62:	2001      	movs	r0, #1
 8003e64:	e006      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8003e66:	2001      	movs	r0, #1
 8003e68:	e004      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8003e6e:	2001      	movs	r0, #1
 8003e70:	e000      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8003e72:	2000      	movs	r0, #0
}
 8003e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003e76:	2000      	movs	r0, #0
 8003e78:	e7fc      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e7fa      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e7f8      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8003e82:	2001      	movs	r0, #1
 8003e84:	e7f6      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
 8003e86:	2001      	movs	r0, #1
 8003e88:	e7f4      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	e7f2      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
 8003e8e:	2001      	movs	r0, #1
 8003e90:	e7f0      	b.n	8003e74 <HAL_RCC_OscConfig+0x650>
 8003e92:	bf00      	nop
 8003e94:	58000400 	.word	0x58000400
 8003e98:	11c1808c 	.word	0x11c1808c

08003e9c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	f000 8127 	beq.w	80040f0 <HAL_RCC_ClockConfig+0x254>
{
 8003ea2:	b570      	push	{r4, r5, r6, lr}
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b93      	ldr	r3, [pc, #588]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	d32d      	bcc.n	8003f10 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	f013 0f02 	tst.w	r3, #2
 8003eba:	d13f      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	f013 0f20 	tst.w	r3, #32
 8003ec2:	d153      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003eca:	d16a      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	f013 0f04 	tst.w	r3, #4
 8003ed2:	f040 8083 	bne.w	8003fdc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	f013 0f08 	tst.w	r3, #8
 8003edc:	f040 8097 	bne.w	800400e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	f013 0f01 	tst.w	r3, #1
 8003ee6:	f000 80de 	beq.w	80040a6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	686b      	ldr	r3, [r5, #4]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	f000 80a8 	beq.w	8004042 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	f000 80ad 	beq.w	8004052 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 80b2 	bne.w	8004062 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	f012 0f02 	tst.w	r2, #2
 8003f08:	f040 80b1 	bne.w	800406e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e0ee      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f10:	4a79      	ldr	r2, [pc, #484]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	f023 0307 	bic.w	r3, r3, #7
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f1c:	f7fd fae6 	bl	80014ec <HAL_GetTick>
 8003f20:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	d0c2      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f2e:	f7fd fadd 	bl	80014ec <HAL_GetTick>
 8003f32:	1b80      	subs	r0, r0, r6
 8003f34:	2802      	cmp	r0, #2
 8003f36:	d9f4      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8003f38:	2003      	movs	r0, #3
 8003f3a:	e0d8      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f42:	688a      	ldr	r2, [r1, #8]
 8003f44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003f4c:	f7fd face 	bl	80014ec <HAL_GetTick>
 8003f50:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f5c:	d1ae      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f5e:	f7fd fac5 	bl	80014ec <HAL_GetTick>
 8003f62:	1b80      	subs	r0, r0, r6
 8003f64:	2802      	cmp	r0, #2
 8003f66:	d9f4      	bls.n	8003f52 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8003f68:	2003      	movs	r0, #3
 8003f6a:	e0c0      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003f6c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f72:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8003f76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003f80:	f7fd fab4 	bl	80014ec <HAL_GetTick>
 8003f84:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f92:	d197      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f94:	f7fd faaa 	bl	80014ec <HAL_GetTick>
 8003f98:	1b80      	subs	r0, r0, r6
 8003f9a:	2802      	cmp	r0, #2
 8003f9c:	d9f3      	bls.n	8003f86 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8003f9e:	2003      	movs	r0, #3
 8003fa0:	e0a5      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003fa2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003fac:	f023 030f 	bic.w	r3, r3, #15
 8003fb0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003fb4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fa98 	bl	80014ec <HAL_GetTick>
 8003fbc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fca:	f47f af7f 	bne.w	8003ecc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003fce:	f7fd fa8d 	bl	80014ec <HAL_GetTick>
 8003fd2:	1b80      	subs	r0, r0, r6
 8003fd4:	2802      	cmp	r0, #2
 8003fd6:	d9f2      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003fd8:	2003      	movs	r0, #3
 8003fda:	e088      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003fdc:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe2:	688a      	ldr	r2, [r1, #8]
 8003fe4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003fec:	f7fd fa7e 	bl	80014ec <HAL_GetTick>
 8003ff0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ffc:	f47f af6b 	bne.w	8003ed6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004000:	f7fd fa74 	bl	80014ec <HAL_GetTick>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	2802      	cmp	r0, #2
 8004008:	d9f3      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800400a:	2003      	movs	r0, #3
 800400c:	e06f      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800400e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004014:	6893      	ldr	r3, [r2, #8]
 8004016:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800401a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800401e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004020:	f7fd fa64 	bl	80014ec <HAL_GetTick>
 8004024:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004030:	f47f af56 	bne.w	8003ee0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004034:	f7fd fa5a 	bl	80014ec <HAL_GetTick>
 8004038:	1b80      	subs	r0, r0, r6
 800403a:	2802      	cmp	r0, #2
 800403c:	d9f3      	bls.n	8004026 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800403e:	2003      	movs	r0, #3
 8004040:	e055      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800404c:	d10f      	bne.n	800406e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800404e:	2001      	movs	r0, #1
 8004050:	e04d      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800405e:	2001      	movs	r0, #1
 8004060:	e045      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800406c:	d042      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800406e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004072:	688a      	ldr	r2, [r1, #8]
 8004074:	f022 0203 	bic.w	r2, r2, #3
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800407c:	f7fd fa36 	bl	80014ec <HAL_GetTick>
 8004080:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408c:	686a      	ldr	r2, [r5, #4]
 800408e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fd fa2a 	bl	80014ec <HAL_GetTick>
 8004098:	1b80      	subs	r0, r0, r6
 800409a:	f241 3388 	movw	r3, #5000	; 0x1388
 800409e:	4298      	cmp	r0, r3
 80040a0:	d9ef      	bls.n	8004082 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80040a2:	2003      	movs	r0, #3
 80040a4:	e023      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	42a3      	cmp	r3, r4
 80040b0:	d915      	bls.n	80040de <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 80040b4:	6813      	ldr	r3, [r2, #0]
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	4323      	orrs	r3, r4
 80040bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80040be:	f7fd fa15 	bl	80014ec <HAL_GetTick>
 80040c2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	42a3      	cmp	r3, r4
 80040ce:	d006      	beq.n	80040de <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80040d0:	f7fd fa0c 	bl	80014ec <HAL_GetTick>
 80040d4:	1b40      	subs	r0, r0, r5
 80040d6:	2802      	cmp	r0, #2
 80040d8:	d9f4      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80040da:	2003      	movs	r0, #3
 80040dc:	e007      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040de:	f7ff fb91 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 80040e4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	f7fd f9fd 	bl	80014e8 <HAL_InitTick>
}
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80040f0:	2001      	movs	r0, #1
}
 80040f2:	4770      	bx	lr
        return HAL_ERROR;
 80040f4:	2001      	movs	r0, #1
 80040f6:	e7fa      	b.n	80040ee <HAL_RCC_ClockConfig+0x252>
 80040f8:	58004000 	.word	0x58004000
 80040fc:	2000004c 	.word	0x2000004c
 8004100:	20000050 	.word	0x20000050

08004104 <HAL_RCC_GetPCLK1Freq>:
{
 8004104:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004106:	f7ff fb7d 	bl	8003804 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004114:	4a02      	ldr	r2, [pc, #8]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800411a:	40d8      	lsrs	r0, r3
 800411c:	bd08      	pop	{r3, pc}
 800411e:	bf00      	nop
 8004120:	080116dc 	.word	0x080116dc

08004124 <HAL_RCC_GetPCLK2Freq>:
{
 8004124:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004126:	f7ff fb6d 	bl	8003804 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004134:	4a02      	ldr	r2, [pc, #8]	; (8004140 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800413a:	40d8      	lsrs	r0, r3
 800413c:	bd08      	pop	{r3, pc}
 800413e:	bf00      	nop
 8004140:	080116dc 	.word	0x080116dc

08004144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004148:	6803      	ldr	r3, [r0, #0]
 800414a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800414e:	f040 80d6 	bne.w	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004152:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f013 0f01 	tst.w	r3, #1
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800415e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004162:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004166:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800416a:	b292      	uxth	r2, r2
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	f013 0f02 	tst.w	r3, #2
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417a:	68a2      	ldr	r2, [r4, #8]
 800417c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004180:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004184:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004188:	b292      	uxth	r2, r2
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	f013 0f20 	tst.w	r3, #32
 8004196:	d009      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004198:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800419a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80041b2:	d00c      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80041b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041be:	0c02      	lsrs	r2, r0, #16
 80041c0:	0412      	lsls	r2, r2, #16
 80041c2:	ea23 0302 	bic.w	r3, r3, r2
 80041c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041e0:	0c02      	lsrs	r2, r0, #16
 80041e2:	0412      	lsls	r2, r2, #16
 80041e4:	ea23 0302 	bic.w	r3, r3, r2
 80041e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80041f6:	d00c      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80041f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80041fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004202:	0c02      	lsrs	r2, r0, #16
 8004204:	0412      	lsls	r2, r2, #16
 8004206:	ea23 0302 	bic.w	r3, r3, r2
 800420a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004218:	d00f      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800421a:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800421c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004220:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004224:	0919      	lsrs	r1, r3, #4
 8004226:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800422a:	ea22 0201 	bic.w	r2, r2, r1
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004240:	d00f      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004242:	69a3      	ldr	r3, [r4, #24]
 8004244:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004248:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800424c:	0919      	lsrs	r1, r3, #4
 800424e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004252:	ea22 0201 	bic.w	r2, r2, r1
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004268:	d00f      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800426a:	69e3      	ldr	r3, [r4, #28]
 800426c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004270:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004274:	0919      	lsrs	r1, r3, #4
 8004276:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800427a:	ea22 0201 	bic.w	r2, r2, r1
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	f013 0f10 	tst.w	r3, #16
 8004290:	d00d      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004292:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004298:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800429c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80042a6:	68e3      	ldr	r3, [r4, #12]
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ac:	d07f      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80042b4:	d00f      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80042b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042c0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042cc:	b91b      	cbnz	r3, 80042d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042ce:	68cb      	ldr	r3, [r1, #12]
 80042d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d4:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80042dc:	d00d      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80042e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f8:	d05e      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80042fa:	4628      	mov	r0, r5
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80042fe:	f7ff f8f9 	bl	80034f4 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004302:	f7fd f8f3 	bl	80014ec <HAL_GetTick>
 8004306:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004308:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004310:	d106      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004312:	f7fd f8eb 	bl	80014ec <HAL_GetTick>
 8004316:	1b40      	subs	r0, r0, r5
 8004318:	2802      	cmp	r0, #2
 800431a:	d9f5      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 800431c:	2503      	movs	r5, #3
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004320:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004322:	2d00      	cmp	r5, #0
 8004324:	f47f af16 	bne.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004334:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004336:	429a      	cmp	r2, r3
 8004338:	d024      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004342:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004346:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800434a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800434e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004352:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004356:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800435a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800435e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004362:	f012 0f02 	tst.w	r2, #2
 8004366:	d10f      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8004368:	2d00      	cmp	r5, #0
 800436a:	f47f aef3 	bne.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004374:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004378:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004382:	e6e7      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004384:	2200      	movs	r2, #0
 8004386:	e7ec      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8004388:	f7fd f8b0 	bl	80014ec <HAL_GetTick>
 800438c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f013 0f02 	tst.w	r3, #2
 800439a:	d1e5      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fd f8a6 	bl	80014ec <HAL_GetTick>
 80043a0:	1b80      	subs	r0, r0, r6
 80043a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80043a6:	4298      	cmp	r0, r3
 80043a8:	d9f1      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 80043aa:	2503      	movs	r5, #3
 80043ac:	e7dc      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80043ae:	68cb      	ldr	r3, [r1, #12]
 80043b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b4:	60cb      	str	r3, [r1, #12]
 80043b6:	e77a      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043b8:	68cb      	ldr	r3, [r1, #12]
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043be:	60cb      	str	r3, [r1, #12]
 80043c0:	e79b      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80043c2:	bf00      	nop
 80043c4:	58000400 	.word	0x58000400

080043c8 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043c8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d036      	beq.n	800443e <HAL_RTC_DeactivateAlarm+0x76>
 80043d0:	2301      	movs	r3, #1
 80043d2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043d6:	2302      	movs	r3, #2
 80043d8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_RTC_DeactivateAlarm+0x7c>)
 80043de:	22ca      	movs	r2, #202	; 0xca
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24
 80043e2:	2253      	movs	r2, #83	; 0x53
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80043e6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80043ea:	d019      	beq.n	8004420 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80043ec:	4b15      	ldr	r3, [pc, #84]	; (8004444 <HAL_RTC_DeactivateAlarm+0x7c>)
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80043f4:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80043f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80043fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004400:	f022 0202 	bic.w	r2, r2, #2
 8004404:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004406:	2202      	movs	r2, #2
 8004408:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <HAL_RTC_DeactivateAlarm+0x7c>)
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004410:	2301      	movs	r3, #1
 8004412:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004416:	2300      	movs	r3, #0
 8004418:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800441c:	4618      	mov	r0, r3
 800441e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004426:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800442a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004430:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004438:	2201      	movs	r2, #1
 800443a:	65da      	str	r2, [r3, #92]	; 0x5c
 800443c:	e7e5      	b.n	800440a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800443e:	2002      	movs	r0, #2
}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40002800 	.word	0x40002800

08004448 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800444e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004450:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004452:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004454:	f015 0f01 	tst.w	r5, #1
 8004458:	d106      	bne.n	8004468 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800445a:	f015 0f02 	tst.w	r5, #2
 800445e:	d109      	bne.n	8004474 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004460:	2301      	movs	r3, #1
 8004462:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004466:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800446a:	2201      	movs	r2, #1
 800446c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800446e:	f7fd f997 	bl	80017a0 <HAL_RTC_AlarmAEventCallback>
 8004472:	e7f2      	b.n	800445a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004476:	2202      	movs	r2, #2
 8004478:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800447a:	4620      	mov	r0, r4
 800447c:	f000 f9e4 	bl	8004848 <HAL_RTCEx_AlarmBEventCallback>
 8004480:	e7ee      	b.n	8004460 <HAL_RTC_AlarmIRQHandler+0x18>
 8004482:	bf00      	nop
 8004484:	40002800 	.word	0x40002800

08004488 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004488:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800448a:	4a0b      	ldr	r2, [pc, #44]	; (80044b8 <HAL_RTC_WaitForSynchro+0x30>)
 800448c:	68d3      	ldr	r3, [r2, #12]
 800448e:	f023 0320 	bic.w	r3, r3, #32
 8004492:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004494:	f7fd f82a 	bl	80014ec <HAL_GetTick>
 8004498:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_RTC_WaitForSynchro+0x30>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f013 0f20 	tst.w	r3, #32
 80044a2:	d107      	bne.n	80044b4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044a4:	f7fd f822 	bl	80014ec <HAL_GetTick>
 80044a8:	1b00      	subs	r0, r0, r4
 80044aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80044ae:	d9f4      	bls.n	800449a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80044b0:	2003      	movs	r0, #3
 80044b2:	e000      	b.n	80044b6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80044b4:	2000      	movs	r0, #0
}
 80044b6:	bd10      	pop	{r4, pc}
 80044b8:	40002800 	.word	0x40002800

080044bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <RTC_EnterInitMode+0x48>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044c6:	d002      	beq.n	80044ce <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80044ca:	4620      	mov	r0, r4
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
 80044ce:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80044d0:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <RTC_EnterInitMode+0x48>)
 80044d2:	68d3      	ldr	r3, [r2, #12]
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80044da:	f7fd f807 	bl	80014ec <HAL_GetTick>
 80044de:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <RTC_EnterInitMode+0x48>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044ea:	d1ee      	bne.n	80044ca <RTC_EnterInitMode+0xe>
 80044ec:	2c03      	cmp	r4, #3
 80044ee:	d0ec      	beq.n	80044ca <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044f0:	f7fc fffc 	bl	80014ec <HAL_GetTick>
 80044f4:	1b43      	subs	r3, r0, r5
 80044f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044fa:	d9f2      	bls.n	80044e2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044fc:	2403      	movs	r4, #3
 80044fe:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8004502:	e7ee      	b.n	80044e2 <RTC_EnterInitMode+0x26>
 8004504:	40002800 	.word	0x40002800

08004508 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004508:	b510      	push	{r4, lr}
 800450a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <RTC_ExitInitMode+0x48>)
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004514:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f013 0f20 	tst.w	r3, #32
 800451c:	d106      	bne.n	800452c <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800451e:	f7ff ffb3 	bl	8004488 <HAL_RTC_WaitForSynchro>
 8004522:	b198      	cbz	r0, 800454c <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004524:	2003      	movs	r0, #3
 8004526:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800452a:	e00f      	b.n	800454c <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800452c:	4a08      	ldr	r2, [pc, #32]	; (8004550 <RTC_ExitInitMode+0x48>)
 800452e:	6993      	ldr	r3, [r2, #24]
 8004530:	f023 0320 	bic.w	r3, r3, #32
 8004534:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004536:	f7ff ffa7 	bl	8004488 <HAL_RTC_WaitForSynchro>
 800453a:	b110      	cbz	r0, 8004542 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800453c:	2003      	movs	r0, #3
 800453e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004542:	4a03      	ldr	r2, [pc, #12]	; (8004550 <RTC_ExitInitMode+0x48>)
 8004544:	6993      	ldr	r3, [r2, #24]
 8004546:	f043 0320 	orr.w	r3, r3, #32
 800454a:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 800454c:	bd10      	pop	{r4, pc}
 800454e:	bf00      	nop
 8004550:	40002800 	.word	0x40002800

08004554 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8004554:	2800      	cmp	r0, #0
 8004556:	d04a      	beq.n	80045ee <HAL_RTC_Init+0x9a>
{
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800455c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004560:	b19b      	cbz	r3, 800458a <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004562:	2302      	movs	r3, #2
 8004564:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <HAL_RTC_Init+0xa0>)
 800456a:	22ca      	movs	r2, #202	; 0xca
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
 800456e:	2253      	movs	r2, #83	; 0x53
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004572:	4620      	mov	r0, r4
 8004574:	f7ff ffa2 	bl	80044bc <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004578:	b160      	cbz	r0, 8004594 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RTC_Init+0xa0>)
 800457c:	22ff      	movs	r2, #255	; 0xff
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004580:	b910      	cbnz	r0, 8004588 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8004582:	2301      	movs	r3, #1
 8004584:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004588:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800458a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800458e:	f7fc fe15 	bl	80011bc <HAL_RTC_MspInit>
 8004592:	e7e6      	b.n	8004562 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <HAL_RTC_Init+0xa0>)
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80045a2:	6999      	ldr	r1, [r3, #24]
 80045a4:	6862      	ldr	r2, [r4, #4]
 80045a6:	6920      	ldr	r0, [r4, #16]
 80045a8:	4302      	orrs	r2, r0
 80045aa:	69a0      	ldr	r0, [r4, #24]
 80045ac:	4302      	orrs	r2, r0
 80045ae:	430a      	orrs	r2, r1
 80045b0:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80045b2:	68e2      	ldr	r2, [r4, #12]
 80045b4:	68a1      	ldr	r1, [r4, #8]
 80045b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80045ba:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80045c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80045c6:	4301      	orrs	r1, r0
 80045c8:	430a      	orrs	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7ff ff9b 	bl	8004508 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d1d1      	bne.n	800457a <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80045d6:	4907      	ldr	r1, [pc, #28]	; (80045f4 <HAL_RTC_Init+0xa0>)
 80045d8:	698b      	ldr	r3, [r1, #24]
 80045da:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80045de:	6a22      	ldr	r2, [r4, #32]
 80045e0:	69e5      	ldr	r5, [r4, #28]
 80045e2:	432a      	orrs	r2, r5
 80045e4:	6965      	ldr	r5, [r4, #20]
 80045e6:	432a      	orrs	r2, r5
 80045e8:	4313      	orrs	r3, r2
 80045ea:	618b      	str	r3, [r1, #24]
 80045ec:	e7c5      	b.n	800457a <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40002800 	.word	0x40002800

080045f8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80045f8:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80045fa:	2809      	cmp	r0, #9
 80045fc:	d903      	bls.n	8004606 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 80045fe:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004600:	380a      	subs	r0, #10
 8004602:	b2c0      	uxtb	r0, r0
 8004604:	e7f9      	b.n	80045fa <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	b2db      	uxtb	r3, r3
}
 800460a:	4318      	orrs	r0, r3
 800460c:	4770      	bx	lr
	...

08004610 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004610:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004614:	2b01      	cmp	r3, #1
 8004616:	f000 80b0 	beq.w	800477a <HAL_RTC_SetAlarm_IT+0x16a>
{
 800461a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8004622:	2301      	movs	r3, #1
 8004624:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004628:	2302      	movs	r3, #2
 800462a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800462e:	4b54      	ldr	r3, [pc, #336]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 8004630:	68de      	ldr	r6, [r3, #12]
 8004632:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8004636:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800463a:	d043      	beq.n	80046c4 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 800463c:	bb12      	cbnz	r2, 8004684 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004644:	d101      	bne.n	800464a <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800464a:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800464e:	7820      	ldrb	r0, [r4, #0]
 8004650:	f7ff ffd2 	bl	80045f8 <RTC_ByteToBcd2>
 8004654:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004656:	7860      	ldrb	r0, [r4, #1]
 8004658:	f7ff ffce 	bl	80045f8 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800465c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004660:	78a0      	ldrb	r0, [r4, #2]
 8004662:	f7ff ffc9 	bl	80045f8 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004666:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004668:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800466a:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800466e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8004672:	f7ff ffc1 	bl	80045f8 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004676:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800467a:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800467c:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800467e:	ea48 0000 	orr.w	r0, r8, r0
 8004682:	e020      	b.n	80046c6 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004684:	6948      	ldr	r0, [r1, #20]
 8004686:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800468a:	d009      	beq.n	80046a0 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800468c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004690:	d006      	beq.n	80046a0 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004692:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f013 0f40 	tst.w	r3, #64	; 0x40
 800469a:	d101      	bne.n	80046a0 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046a0:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046a2:	7863      	ldrb	r3, [r4, #1]
 80046a4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046aa:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046ac:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046ae:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046b0:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046b4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80046bc:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046be:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046c0:	4318      	orrs	r0, r3
 80046c2:	e000      	b.n	80046c6 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80046c4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046c6:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 80046c8:	22ca      	movs	r2, #202	; 0xca
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
 80046cc:	2253      	movs	r2, #83	; 0x53
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80046d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d02a      	beq.n	800472e <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80046d8:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80046e0:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80046e2:	2202      	movs	r2, #2
 80046e4:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80046e6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80046ea:	d040      	beq.n	800476e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80046ec:	4b24      	ldr	r3, [pc, #144]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 80046ee:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80046f0:	69a2      	ldr	r2, [r4, #24]
 80046f2:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80046f4:	6862      	ldr	r2, [r4, #4]
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 80046f8:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80046fa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80046fc:	f042 0202 	orr.w	r2, r2, #2
 8004700:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8004708:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <HAL_RTC_SetAlarm_IT+0x174>)
 800470c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004714:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800471e:	2301      	movs	r3, #1
 8004720:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8004724:	2000      	movs	r0, #0
 8004726:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004736:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004738:	2201      	movs	r2, #1
 800473a:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800473c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004740:	d00f      	beq.n	8004762 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 8004744:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004746:	69a2      	ldr	r2, [r4, #24]
 8004748:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800474a:	6862      	ldr	r2, [r4, #4]
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 800474e:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004750:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800475e:	619a      	str	r2, [r3, #24]
 8004760:	e7d3      	b.n	800470a <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004762:	69a3      	ldr	r3, [r4, #24]
 8004764:	69e2      	ldr	r2, [r4, #28]
 8004766:	4313      	orrs	r3, r2
 8004768:	4a05      	ldr	r2, [pc, #20]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 800476a:	6453      	str	r3, [r2, #68]	; 0x44
 800476c:	e7ed      	b.n	800474a <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800476e:	69a3      	ldr	r3, [r4, #24]
 8004770:	69e2      	ldr	r2, [r4, #28]
 8004772:	4313      	orrs	r3, r2
 8004774:	4a02      	ldr	r2, [pc, #8]	; (8004780 <HAL_RTC_SetAlarm_IT+0x170>)
 8004776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004778:	e7bc      	b.n	80046f4 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800477a:	2002      	movs	r0, #2
}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40002800 	.word	0x40002800
 8004784:	58000800 	.word	0x58000800

08004788 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004788:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d017      	beq.n	80047c0 <HAL_RTCEx_EnableBypassShadow+0x38>
 8004790:	2101      	movs	r1, #1
 8004792:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800479e:	22ca      	movs	r2, #202	; 0xca
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24
 80047a2:	2253      	movs	r2, #83	; 0x53
 80047a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	f042 0220 	orr.w	r2, r2, #32
 80047ac:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ae:	22ff      	movs	r2, #255	; 0xff
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80047b2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047b6:	2300      	movs	r3, #0
 80047b8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80047bc:	4618      	mov	r0, r3
 80047be:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80047c0:	2002      	movs	r0, #2
}
 80047c2:	4770      	bx	lr
 80047c4:	40002800 	.word	0x40002800

080047c8 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047c8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d020      	beq.n	8004812 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80047d0:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80047d2:	2101      	movs	r1, #1
 80047d4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047d8:	2302      	movs	r3, #2
 80047da:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80047e0:	22ca      	movs	r2, #202	; 0xca
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
 80047e4:	2253      	movs	r2, #83	; 0x53
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ee:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80047f0:	4c0a      	ldr	r4, [pc, #40]	; (800481c <HAL_RTCEx_SetSSRU_IT+0x54>)
 80047f2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80047f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80047fa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047fe:	22ff      	movs	r2, #255	; 0xff
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004802:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004806:	2300      	movs	r3, #0
 8004808:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800480c:	4618      	mov	r0, r3
}
 800480e:	bc10      	pop	{r4}
 8004810:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004812:	2002      	movs	r0, #2
}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40002800 	.word	0x40002800
 800481c:	58000800 	.word	0x58000800

08004820 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004820:	b510      	push	{r4, lr}
 8004822:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f013 0f40 	tst.w	r3, #64	; 0x40
 800482c:	d103      	bne.n	8004836 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800482e:	2301      	movs	r3, #1
 8004830:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004834:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8004836:	4b03      	ldr	r3, [pc, #12]	; (8004844 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800483c:	f7fc ffb4 	bl	80017a8 <HAL_RTCEx_SSRUEventCallback>
 8004840:	e7f5      	b.n	800482e <HAL_RTCEx_SSRUIRQHandler+0xe>
 8004842:	bf00      	nop
 8004844:	40002800 	.word	0x40002800

08004848 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004848:	4770      	bx	lr

0800484a <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800484a:	0089      	lsls	r1, r1, #2
 800484c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004850:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004854:	600a      	str	r2, [r1, #0]
}
 8004856:	4770      	bx	lr

08004858 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004858:	0089      	lsls	r1, r1, #2
 800485a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800485e:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004862:	6808      	ldr	r0, [r1, #0]
}
 8004864:	4770      	bx	lr
	...

08004868 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <SUBGHZSPI_Init+0x20>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004872:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8004876:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004878:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800487c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004884:	601a      	str	r2, [r3, #0]
}
 8004886:	4770      	bx	lr
 8004888:	58010000 	.word	0x58010000

0800488c <HAL_SUBGHZ_Init>:
{
 800488c:	b530      	push	{r4, r5, lr}
 800488e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8004890:	2800      	cmp	r0, #0
 8004892:	d04e      	beq.n	8004932 <HAL_SUBGHZ_Init+0xa6>
 8004894:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004896:	7983      	ldrb	r3, [r0, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03b      	beq.n	8004914 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800489c:	2302      	movs	r3, #2
 800489e:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80048a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048a4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80048a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <HAL_SUBGHZ_Init+0xac>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80048b8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80048bc:	2264      	movs	r2, #100	; 0x64
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	b34b      	cbz	r3, 800491c <HAL_SUBGHZ_Init+0x90>
    count--;
 80048c8:	9b01      	ldr	r3, [sp, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80048ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80048da:	d1f3      	bne.n	80048c4 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80048dc:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80048de:	4b17      	ldr	r3, [pc, #92]	; (800493c <HAL_SUBGHZ_Init+0xb0>)
 80048e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80048e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80048ec:	4914      	ldr	r1, [pc, #80]	; (8004940 <HAL_SUBGHZ_Init+0xb4>)
 80048ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80048f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004900:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004906:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8004908:	b15d      	cbz	r5, 8004922 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800490a:	2301      	movs	r3, #1
 800490c:	71a3      	strb	r3, [r4, #6]
}
 800490e:	4628      	mov	r0, r5
 8004910:	b003      	add	sp, #12
 8004912:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8004914:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8004916:	f7fc fcfb 	bl	8001310 <HAL_SUBGHZ_MspInit>
 800491a:	e7bf      	b.n	800489c <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800491c:	2501      	movs	r5, #1
 800491e:	60a5      	str	r5, [r4, #8]
      break;
 8004920:	e7dd      	b.n	80048de <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004922:	6820      	ldr	r0, [r4, #0]
 8004924:	f7ff ffa0 	bl	8004868 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004928:	2301      	movs	r3, #1
 800492a:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800492c:	2300      	movs	r3, #0
 800492e:	60a3      	str	r3, [r4, #8]
 8004930:	e7eb      	b.n	800490a <HAL_SUBGHZ_Init+0x7e>
    return status;
 8004932:	2501      	movs	r5, #1
 8004934:	e7eb      	b.n	800490e <HAL_SUBGHZ_Init+0x82>
 8004936:	bf00      	nop
 8004938:	2000004c 	.word	0x2000004c
 800493c:	58000400 	.word	0x58000400
 8004940:	58000800 	.word	0x58000800

08004944 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004944:	b082      	sub	sp, #8
 8004946:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004948:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <SUBGHZSPI_Transmit+0x70>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004950:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004954:	2064      	movs	r0, #100	; 0x64
 8004956:	fb00 f303 	mul.w	r3, r0, r3
 800495a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800495c:	9b01      	ldr	r3, [sp, #4]
 800495e:	b14b      	cbz	r3, 8004974 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	3b01      	subs	r3, #1
 8004964:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <SUBGHZSPI_Transmit+0x74>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f013 0f02 	tst.w	r3, #2
 800496e:	d0f5      	beq.n	800495c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2000      	movs	r0, #0
 8004972:	e001      	b.n	8004978 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004974:	2001      	movs	r0, #1
 8004976:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <SUBGHZSPI_Transmit+0x78>)
 800497a:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <SUBGHZSPI_Transmit+0x70>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004984:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004988:	2164      	movs	r1, #100	; 0x64
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004990:	9b01      	ldr	r3, [sp, #4]
 8004992:	b143      	cbz	r3, 80049a6 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	3b01      	subs	r3, #1
 8004998:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <SUBGHZSPI_Transmit+0x74>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f013 0f01 	tst.w	r3, #1
 80049a2:	d0f5      	beq.n	8004990 <SUBGHZSPI_Transmit+0x4c>
 80049a4:	e001      	b.n	80049aa <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049a6:	2001      	movs	r0, #1
 80049a8:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80049aa:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <SUBGHZSPI_Transmit+0x74>)
 80049ac:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80049ae:	b002      	add	sp, #8
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000004c 	.word	0x2000004c
 80049b8:	58010000 	.word	0x58010000
 80049bc:	5801000c 	.word	0x5801000c

080049c0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80049c0:	b410      	push	{r4}
 80049c2:	b083      	sub	sp, #12
 80049c4:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <SUBGHZSPI_Receive+0x78>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80049ce:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80049d2:	2064      	movs	r0, #100	; 0x64
 80049d4:	fb00 f303 	mul.w	r3, r0, r3
 80049d8:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	b14b      	cbz	r3, 80049f2 <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80049de:	9b01      	ldr	r3, [sp, #4]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <SUBGHZSPI_Receive+0x7c>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f013 0f02 	tst.w	r3, #2
 80049ec:	d0f5      	beq.n	80049da <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2000      	movs	r0, #0
 80049f0:	e001      	b.n	80049f6 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049f2:	2001      	movs	r0, #1
 80049f4:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <SUBGHZSPI_Receive+0x80>)
 80049f8:	24ff      	movs	r4, #255	; 0xff
 80049fa:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <SUBGHZSPI_Receive+0x78>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a04:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004a08:	2464      	movs	r4, #100	; 0x64
 8004a0a:	fb04 f303 	mul.w	r3, r4, r3
 8004a0e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a10:	9b01      	ldr	r3, [sp, #4]
 8004a12:	b143      	cbz	r3, 8004a26 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004a14:	9b01      	ldr	r3, [sp, #4]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <SUBGHZSPI_Receive+0x7c>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f013 0f01 	tst.w	r3, #1
 8004a22:	d0f5      	beq.n	8004a10 <SUBGHZSPI_Receive+0x50>
 8004a24:	e001      	b.n	8004a2a <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a26:	2001      	movs	r0, #1
 8004a28:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004a2a:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <SUBGHZSPI_Receive+0x7c>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8004a30:	b003      	add	sp, #12
 8004a32:	bc10      	pop	{r4}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	2000004c 	.word	0x2000004c
 8004a3c:	58010000 	.word	0x58010000
 8004a40:	5801000c 	.word	0x5801000c

08004a44 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004a44:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <SUBGHZ_WaitOnBusy+0x50>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004a4e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8004a52:	2264      	movs	r2, #100	; 0x64
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	e006      	b.n	8004a6a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8004a60:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8004a62:	b002      	add	sp, #8
 8004a64:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004a66:	4213      	tst	r3, r2
 8004a68:	d012      	beq.n	8004a90 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <SUBGHZ_WaitOnBusy+0x54>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f013 0304 	ands.w	r3, r3, #4
 8004a72:	d000      	beq.n	8004a76 <SUBGHZ_WaitOnBusy+0x32>
 8004a74:	2301      	movs	r3, #1
    if (count == 0U)
 8004a76:	9a01      	ldr	r2, [sp, #4]
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d0ef      	beq.n	8004a5c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8004a7c:	9a01      	ldr	r2, [sp, #4]
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004a82:	4a05      	ldr	r2, [pc, #20]	; (8004a98 <SUBGHZ_WaitOnBusy+0x54>)
 8004a84:	6952      	ldr	r2, [r2, #20]
 8004a86:	f012 0202 	ands.w	r2, r2, #2
 8004a8a:	d0ec      	beq.n	8004a66 <SUBGHZ_WaitOnBusy+0x22>
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	e7ea      	b.n	8004a66 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8004a90:	2000      	movs	r0, #0
 8004a92:	e7e6      	b.n	8004a62 <SUBGHZ_WaitOnBusy+0x1e>
 8004a94:	2000004c 	.word	0x2000004c
 8004a98:	58000400 	.word	0x58000400

08004a9c <SUBGHZ_CheckDeviceReady>:
{
 8004a9c:	b500      	push	{lr}
 8004a9e:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004aa0:	7903      	ldrb	r3, [r0, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d004      	beq.n	8004ab0 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004aa6:	f7ff ffcd 	bl	8004a44 <SUBGHZ_WaitOnBusy>
}
 8004aaa:	b003      	add	sp, #12
 8004aac:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <SUBGHZ_CheckDeviceReady+0x4c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004ab8:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8004abc:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004abe:	4a0b      	ldr	r2, [pc, #44]	; (8004aec <SUBGHZ_CheckDeviceReady+0x50>)
 8004ac0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8004ad2:	9b01      	ldr	r3, [sp, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f9      	bne.n	8004acc <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <SUBGHZ_CheckDeviceReady+0x50>)
 8004ada:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ae6:	e7de      	b.n	8004aa6 <SUBGHZ_CheckDeviceReady+0xa>
 8004ae8:	2000004c 	.word	0x2000004c
 8004aec:	58000400 	.word	0x58000400

08004af0 <HAL_SUBGHZ_WriteRegisters>:
{
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004af6:	7980      	ldrb	r0, [r0, #6]
 8004af8:	fa5f f880 	uxtb.w	r8, r0
 8004afc:	f1b8 0f01 	cmp.w	r8, #1
 8004b00:	d13e      	bne.n	8004b80 <HAL_SUBGHZ_WriteRegisters+0x90>
 8004b02:	460c      	mov	r4, r1
 8004b04:	4617      	mov	r7, r2
 8004b06:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004b08:	796b      	ldrb	r3, [r5, #5]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d03b      	beq.n	8004b86 <HAL_SUBGHZ_WriteRegisters+0x96>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004b12:	2302      	movs	r3, #2
 8004b14:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b16:	4628      	mov	r0, r5
 8004b18:	f7ff ffc0 	bl	8004a9c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004b1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004b2a:	210d      	movs	r1, #13
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f7ff ff09 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004b32:	0a21      	lsrs	r1, r4, #8
 8004b34:	4628      	mov	r0, r5
 8004b36:	f7ff ff05 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004b3a:	b2e1      	uxtb	r1, r4
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f7ff ff01 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b42:	2400      	movs	r4, #0
 8004b44:	e005      	b.n	8004b52 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b46:	5d39      	ldrb	r1, [r7, r4]
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f7ff fefb 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b4e:	3401      	adds	r4, #1
 8004b50:	b2a4      	uxth	r4, r4
 8004b52:	42b4      	cmp	r4, r6
 8004b54:	d3f7      	bcc.n	8004b46 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b56:	4a0d      	ldr	r2, [pc, #52]	; (8004b8c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004b58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b64:	4628      	mov	r0, r5
 8004b66:	f7ff ff6d 	bl	8004a44 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b6a:	68ab      	ldr	r3, [r5, #8]
 8004b6c:	b90b      	cbnz	r3, 8004b72 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8004b6e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b72:	2301      	movs	r3, #1
 8004b74:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004b76:	2300      	movs	r3, #0
 8004b78:	716b      	strb	r3, [r5, #5]
}
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004b80:	f04f 0802 	mov.w	r8, #2
 8004b84:	e7f9      	b.n	8004b7a <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8004b86:	f04f 0802 	mov.w	r8, #2
 8004b8a:	e7f6      	b.n	8004b7a <HAL_SUBGHZ_WriteRegisters+0x8a>
 8004b8c:	58000400 	.word	0x58000400

08004b90 <HAL_SUBGHZ_ReadRegisters>:
{
 8004b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b94:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b96:	7980      	ldrb	r0, [r0, #6]
 8004b98:	fa5f f880 	uxtb.w	r8, r0
 8004b9c:	f1b8 0f01 	cmp.w	r8, #1
 8004ba0:	d141      	bne.n	8004c26 <HAL_SUBGHZ_ReadRegisters+0x96>
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	4615      	mov	r5, r2
 8004ba6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004ba8:	7973      	ldrb	r3, [r6, #5]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d03e      	beq.n	8004c2c <HAL_SUBGHZ_ReadRegisters+0x9c>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7ff ff72 	bl	8004a9c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004bba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004bc6:	211d      	movs	r1, #29
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f7ff febb 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004bce:	0a21      	lsrs	r1, r4, #8
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff feb7 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004bd6:	b2e1      	uxtb	r1, r4
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7ff feb3 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004bde:	2100      	movs	r1, #0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f7ff feaf 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004be6:	2400      	movs	r4, #0
 8004be8:	e006      	b.n	8004bf8 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bea:	4629      	mov	r1, r5
 8004bec:	4630      	mov	r0, r6
 8004bee:	f7ff fee7 	bl	80049c0 <SUBGHZSPI_Receive>
      pData++;
 8004bf2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004bf4:	3401      	adds	r4, #1
 8004bf6:	b2a4      	uxth	r4, r4
 8004bf8:	42bc      	cmp	r4, r7
 8004bfa:	d3f6      	bcc.n	8004bea <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004bfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7ff ff1a 	bl	8004a44 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c10:	68b3      	ldr	r3, [r6, #8]
 8004c12:	b90b      	cbnz	r3, 8004c18 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8004c14:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	7173      	strb	r3, [r6, #5]
}
 8004c20:	4640      	mov	r0, r8
 8004c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004c26:	f04f 0802 	mov.w	r8, #2
 8004c2a:	e7f9      	b.n	8004c20 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8004c2c:	f04f 0802 	mov.w	r8, #2
 8004c30:	e7f6      	b.n	8004c20 <HAL_SUBGHZ_ReadRegisters+0x90>
 8004c32:	bf00      	nop
 8004c34:	58000400 	.word	0x58000400

08004c38 <HAL_SUBGHZ_ExecSetCmd>:
{
 8004c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c3c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004c3e:	7980      	ldrb	r0, [r0, #6]
 8004c40:	fa5f f980 	uxtb.w	r9, r0
 8004c44:	f1b9 0f01 	cmp.w	r9, #1
 8004c48:	d143      	bne.n	8004cd2 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8004c4a:	4688      	mov	r8, r1
 8004c4c:	4617      	mov	r7, r2
 8004c4e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004c50:	796b      	ldrb	r3, [r5, #5]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d040      	beq.n	8004cd8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8004c56:	2301      	movs	r3, #1
 8004c58:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f7ff ff1e 	bl	8004a9c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004c60:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8004c64:	d005      	beq.n	8004c72 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8004c66:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8004c6a:	d002      	beq.n	8004c72 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	712b      	strb	r3, [r5, #4]
 8004c70:	e001      	b.n	8004c76 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004c76:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004c78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004c84:	4641      	mov	r1, r8
 8004c86:	4628      	mov	r0, r5
 8004c88:	f7ff fe5c 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c8c:	2400      	movs	r4, #0
 8004c8e:	e005      	b.n	8004c9c <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004c90:	5d39      	ldrb	r1, [r7, r4]
 8004c92:	4628      	mov	r0, r5
 8004c94:	f7ff fe56 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c98:	3401      	adds	r4, #1
 8004c9a:	b2a4      	uxth	r4, r4
 8004c9c:	42b4      	cmp	r4, r6
 8004c9e:	d3f7      	bcc.n	8004c90 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ca0:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004ca2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8004cae:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8004cb2:	d10a      	bne.n	8004cca <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004cb4:	68ab      	ldr	r3, [r5, #8]
 8004cb6:	b90b      	cbnz	r3, 8004cbc <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8004cb8:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	716b      	strb	r3, [r5, #5]
}
 8004cc4:	4648      	mov	r0, r9
 8004cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f7ff feba 	bl	8004a44 <SUBGHZ_WaitOnBusy>
 8004cd0:	e7f0      	b.n	8004cb4 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8004cd2:	f04f 0902 	mov.w	r9, #2
 8004cd6:	e7f5      	b.n	8004cc4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8004cd8:	f04f 0902 	mov.w	r9, #2
 8004cdc:	e7f2      	b.n	8004cc4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8004cde:	bf00      	nop
 8004ce0:	58000400 	.word	0x58000400

08004ce4 <HAL_SUBGHZ_ExecGetCmd>:
{
 8004ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004cea:	7980      	ldrb	r0, [r0, #6]
 8004cec:	fa5f f880 	uxtb.w	r8, r0
 8004cf0:	f1b8 0f01 	cmp.w	r8, #1
 8004cf4:	d139      	bne.n	8004d6a <HAL_SUBGHZ_ExecGetCmd+0x86>
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4615      	mov	r5, r2
 8004cfa:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004cfc:	7973      	ldrb	r3, [r6, #5]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d036      	beq.n	8004d70 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8004d02:	2301      	movs	r3, #1
 8004d04:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff fec8 	bl	8004a9c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d0c:	4a1a      	ldr	r2, [pc, #104]	; (8004d78 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004d0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f7ff fe11 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004d22:	2100      	movs	r1, #0
 8004d24:	4630      	mov	r0, r6
 8004d26:	f7ff fe0d 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d2a:	2400      	movs	r4, #0
 8004d2c:	e006      	b.n	8004d3c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004d2e:	4629      	mov	r1, r5
 8004d30:	4630      	mov	r0, r6
 8004d32:	f7ff fe45 	bl	80049c0 <SUBGHZSPI_Receive>
      pData++;
 8004d36:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004d38:	3401      	adds	r4, #1
 8004d3a:	b2a4      	uxth	r4, r4
 8004d3c:	42bc      	cmp	r4, r7
 8004d3e:	d3f6      	bcc.n	8004d2e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d40:	4a0d      	ldr	r2, [pc, #52]	; (8004d78 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004d42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7ff fe78 	bl	8004a44 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004d54:	68b3      	ldr	r3, [r6, #8]
 8004d56:	b90b      	cbnz	r3, 8004d5c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8004d58:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004d60:	2300      	movs	r3, #0
 8004d62:	7173      	strb	r3, [r6, #5]
}
 8004d64:	4640      	mov	r0, r8
 8004d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004d6a:	f04f 0802 	mov.w	r8, #2
 8004d6e:	e7f9      	b.n	8004d64 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8004d70:	f04f 0802 	mov.w	r8, #2
 8004d74:	e7f6      	b.n	8004d64 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8004d76:	bf00      	nop
 8004d78:	58000400 	.word	0x58000400

08004d7c <HAL_SUBGHZ_IRQHandler>:
{
 8004d7c:	b530      	push	{r4, r5, lr}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004d88:	2302      	movs	r3, #2
 8004d8a:	aa01      	add	r2, sp, #4
 8004d8c:	2112      	movs	r1, #18
 8004d8e:	f7ff ffa9 	bl	8004ce4 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004d92:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8004d96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004d9a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004d9e:	f013 0f01 	tst.w	r3, #1
 8004da2:	d126      	bne.n	8004df2 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004da4:	f014 0f02 	tst.w	r4, #2
 8004da8:	d127      	bne.n	8004dfa <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004daa:	f014 0f04 	tst.w	r4, #4
 8004dae:	d128      	bne.n	8004e02 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004db0:	f014 0f08 	tst.w	r4, #8
 8004db4:	d129      	bne.n	8004e0a <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004db6:	f014 0f10 	tst.w	r4, #16
 8004dba:	d12a      	bne.n	8004e12 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004dbc:	f014 0f20 	tst.w	r4, #32
 8004dc0:	d12b      	bne.n	8004e1a <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004dc2:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004dc6:	d12c      	bne.n	8004e22 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004dc8:	f014 0f80 	tst.w	r4, #128	; 0x80
 8004dcc:	d006      	beq.n	8004ddc <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004dce:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004dd2:	d02a      	beq.n	8004e2a <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f00b fa8e 	bl	80102f8 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004ddc:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004de0:	d128      	bne.n	8004e34 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004de2:	2302      	movs	r3, #2
 8004de4:	aa01      	add	r2, sp, #4
 8004de6:	4619      	mov	r1, r3
 8004de8:	4628      	mov	r0, r5
 8004dea:	f7ff ff25 	bl	8004c38 <HAL_SUBGHZ_ExecSetCmd>
}
 8004dee:	b003      	add	sp, #12
 8004df0:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004df2:	4628      	mov	r0, r5
 8004df4:	f00b fa68 	bl	80102c8 <HAL_SUBGHZ_TxCpltCallback>
 8004df8:	e7d4      	b.n	8004da4 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f00b fa6c 	bl	80102d8 <HAL_SUBGHZ_RxCpltCallback>
 8004e00:	e7d3      	b.n	8004daa <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004e02:	4628      	mov	r0, r5
 8004e04:	f00b fa9c 	bl	8010340 <HAL_SUBGHZ_PreambleDetectedCallback>
 8004e08:	e7d2      	b.n	8004db0 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f00b faa0 	bl	8010350 <HAL_SUBGHZ_SyncWordValidCallback>
 8004e10:	e7d1      	b.n	8004db6 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004e12:	4628      	mov	r0, r5
 8004e14:	f00b faa4 	bl	8010360 <HAL_SUBGHZ_HeaderValidCallback>
 8004e18:	e7d0      	b.n	8004dbc <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f00b fa88 	bl	8010330 <HAL_SUBGHZ_HeaderErrorCallback>
 8004e20:	e7cf      	b.n	8004dc2 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004e22:	4628      	mov	r0, r5
 8004e24:	f00b fa60 	bl	80102e8 <HAL_SUBGHZ_CRCErrorCallback>
 8004e28:	e7ce      	b.n	8004dc8 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f00b fa63 	bl	80102f8 <HAL_SUBGHZ_CADStatusCallback>
 8004e32:	e7d3      	b.n	8004ddc <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004e34:	4628      	mov	r0, r5
 8004e36:	f00b fa71 	bl	801031c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8004e3a:	e7d2      	b.n	8004de2 <HAL_SUBGHZ_IRQHandler+0x66>

08004e3c <HAL_SUBGHZ_WriteBuffer>:
{
 8004e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e40:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004e42:	7980      	ldrb	r0, [r0, #6]
 8004e44:	fa5f f880 	uxtb.w	r8, r0
 8004e48:	f1b8 0f01 	cmp.w	r8, #1
 8004e4c:	d138      	bne.n	8004ec0 <HAL_SUBGHZ_WriteBuffer+0x84>
 8004e4e:	460c      	mov	r4, r1
 8004e50:	4617      	mov	r7, r2
 8004e52:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004e54:	796b      	ldrb	r3, [r5, #5]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d035      	beq.n	8004ec6 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f7ff fe1c 	bl	8004a9c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e64:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004e66:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004e72:	210e      	movs	r1, #14
 8004e74:	4628      	mov	r0, r5
 8004e76:	f7ff fd65 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f7ff fd61 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004e82:	2400      	movs	r4, #0
 8004e84:	e005      	b.n	8004e92 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004e86:	5d39      	ldrb	r1, [r7, r4]
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f7ff fd5b 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004e8e:	3401      	adds	r4, #1
 8004e90:	b2a4      	uxth	r4, r4
 8004e92:	42b4      	cmp	r4, r6
 8004e94:	d3f7      	bcc.n	8004e86 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e96:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004e98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7ff fdcd 	bl	8004a44 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004eaa:	68ab      	ldr	r3, [r5, #8]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8004eae:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	716b      	strb	r3, [r5, #5]
}
 8004eba:	4640      	mov	r0, r8
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004ec0:	f04f 0802 	mov.w	r8, #2
 8004ec4:	e7f9      	b.n	8004eba <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8004ec6:	f04f 0802 	mov.w	r8, #2
 8004eca:	e7f6      	b.n	8004eba <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004ecc:	58000400 	.word	0x58000400

08004ed0 <HAL_SUBGHZ_ReadBuffer>:
{
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004ed6:	7980      	ldrb	r0, [r0, #6]
 8004ed8:	fa5f f880 	uxtb.w	r8, r0
 8004edc:	f1b8 0f01 	cmp.w	r8, #1
 8004ee0:	d13d      	bne.n	8004f5e <HAL_SUBGHZ_ReadBuffer+0x8e>
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	4615      	mov	r5, r2
 8004ee6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004ee8:	7973      	ldrb	r3, [r6, #5]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d03a      	beq.n	8004f64 <HAL_SUBGHZ_ReadBuffer+0x94>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7ff fdd2 	bl	8004a9c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ef8:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004efa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004efe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004f06:	211e      	movs	r1, #30
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff fd1b 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004f0e:	4621      	mov	r1, r4
 8004f10:	4630      	mov	r0, r6
 8004f12:	f7ff fd17 	bl	8004944 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004f16:	2100      	movs	r1, #0
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff fd13 	bl	8004944 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f1e:	2400      	movs	r4, #0
 8004f20:	e006      	b.n	8004f30 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004f22:	4629      	mov	r1, r5
 8004f24:	4630      	mov	r0, r6
 8004f26:	f7ff fd4b 	bl	80049c0 <SUBGHZSPI_Receive>
      pData++;
 8004f2a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004f2c:	3401      	adds	r4, #1
 8004f2e:	b2a4      	uxth	r4, r4
 8004f30:	42bc      	cmp	r4, r7
 8004f32:	d3f6      	bcc.n	8004f22 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004f34:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004f36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004f42:	4630      	mov	r0, r6
 8004f44:	f7ff fd7e 	bl	8004a44 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004f48:	68b3      	ldr	r3, [r6, #8]
 8004f4a:	b90b      	cbnz	r3, 8004f50 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8004f4c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004f50:	2301      	movs	r3, #1
 8004f52:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004f54:	2300      	movs	r3, #0
 8004f56:	7173      	strb	r3, [r6, #5]
}
 8004f58:	4640      	mov	r0, r8
 8004f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004f5e:	f04f 0802 	mov.w	r8, #2
 8004f62:	e7f9      	b.n	8004f58 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8004f64:	f04f 0802 	mov.w	r8, #2
 8004f68:	e7f6      	b.n	8004f58 <HAL_SUBGHZ_ReadBuffer+0x88>
 8004f6a:	bf00      	nop
 8004f6c:	58000400 	.word	0x58000400

08004f70 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004f70:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	e852 3f00 	ldrex	r3, [r2]
 8004f76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	e842 3100 	strex	r1, r3, [r2]
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	d1f6      	bne.n	8004f70 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004f82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	f102 0308 	add.w	r3, r2, #8
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	3208      	adds	r2, #8
 8004f92:	e842 3100 	strex	r1, r3, [r2]
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d1f3      	bne.n	8004f82 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f9a:	2320      	movs	r3, #32
 8004f9c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8004fa0:	4770      	bx	lr

08004fa2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fa2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	e852 3f00 	ldrex	r3, [r2]
 8004fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	e842 3100 	strex	r1, r3, [r2]
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d1f6      	bne.n	8004fa2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fb4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	f102 0308 	add.w	r3, r2, #8
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	3208      	adds	r2, #8
 8004fc8:	e842 3100 	strex	r1, r3, [r2]
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	d1f1      	bne.n	8004fb4 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d006      	beq.n	8004fe4 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fe0:	6703      	str	r3, [r0, #112]	; 0x70
}
 8004fe2:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	e852 3f00 	ldrex	r3, [r2]
 8004fea:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	e842 3100 	strex	r1, r3, [r2]
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	d1f6      	bne.n	8004fe4 <UART_EndRxTransfer+0x42>
 8004ff6:	e7ee      	b.n	8004fd6 <UART_EndRxTransfer+0x34>

08004ff8 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d14c      	bne.n	800509a <HAL_UART_Transmit_DMA+0xa2>
{
 8005000:	b510      	push	{r4, lr}
 8005002:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005004:	2900      	cmp	r1, #0
 8005006:	d04a      	beq.n	800509e <HAL_UART_Transmit_DMA+0xa6>
 8005008:	2a00      	cmp	r2, #0
 800500a:	d04a      	beq.n	80050a2 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 800500c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005010:	2b01      	cmp	r3, #1
 8005012:	d048      	beq.n	80050a6 <HAL_UART_Transmit_DMA+0xae>
 8005014:	2301      	movs	r3, #1
 8005016:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800501a:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800501c:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005020:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	2300      	movs	r3, #0
 8005026:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502a:	2321      	movs	r3, #33	; 0x21
 800502c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8005030:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005032:	b1f3      	cbz	r3, 8005072 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005034:	491d      	ldr	r1, [pc, #116]	; (80050ac <HAL_UART_Transmit_DMA+0xb4>)
 8005036:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005038:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800503a:	491d      	ldr	r1, [pc, #116]	; (80050b0 <HAL_UART_Transmit_DMA+0xb8>)
 800503c:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800503e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005040:	491c      	ldr	r1, [pc, #112]	; (80050b4 <HAL_UART_Transmit_DMA+0xbc>)
 8005042:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005044:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005046:	2100      	movs	r1, #0
 8005048:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800504a:	6801      	ldr	r1, [r0, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8005052:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005054:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005056:	f7fd ffa9 	bl	8002fac <HAL_DMA_Start_IT>
 800505a:	b150      	cbz	r0, 8005072 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800505c:	2310      	movs	r3, #16
 800505e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8005062:	2300      	movs	r3, #0
 8005064:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005068:	2320      	movs	r3, #32
 800506a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800506e:	2001      	movs	r0, #1
 8005070:	e012      	b.n	8005098 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	2240      	movs	r2, #64	; 0x40
 8005076:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005078:	2300      	movs	r3, #0
 800507a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800507e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	f102 0308 	add.w	r3, r2, #8
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	3208      	adds	r2, #8
 800508e:	e842 3100 	strex	r1, r3, [r2]
 8005092:	2900      	cmp	r1, #0
 8005094:	d1f3      	bne.n	800507e <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005096:	2000      	movs	r0, #0
}
 8005098:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800509a:	2002      	movs	r0, #2
}
 800509c:	4770      	bx	lr
      return HAL_ERROR;
 800509e:	2001      	movs	r0, #1
 80050a0:	e7fa      	b.n	8005098 <HAL_UART_Transmit_DMA+0xa0>
 80050a2:	2001      	movs	r0, #1
 80050a4:	e7f8      	b.n	8005098 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 80050a6:	2002      	movs	r0, #2
 80050a8:	e7f6      	b.n	8005098 <HAL_UART_Transmit_DMA+0xa0>
 80050aa:	bf00      	nop
 80050ac:	080050b9 	.word	0x080050b9
 80050b0:	08005127 	.word	0x08005127
 80050b4:	08005133 	.word	0x08005133

080050b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050b8:	b508      	push	{r3, lr}
 80050ba:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050bc:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f013 0f20 	tst.w	r3, #32
 80050c6:	d118      	bne.n	80050fa <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	f102 0308 	add.w	r3, r2, #8
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	3208      	adds	r2, #8
 80050de:	e842 3100 	strex	r1, r3, [r2]
 80050e2:	2900      	cmp	r1, #0
 80050e4:	d1f3      	bne.n	80050ce <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	e852 3f00 	ldrex	r3, [r2]
 80050ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	e842 3100 	strex	r1, r3, [r2]
 80050f4:	2900      	cmp	r1, #0
 80050f6:	d1f6      	bne.n	80050e6 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050f8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80050fa:	f7fc fc95 	bl	8001a28 <HAL_UART_TxCpltCallback>
}
 80050fe:	e7fb      	b.n	80050f8 <UART_DMATransmitCplt+0x40>

08005100 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005100:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005102:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	e852 3f00 	ldrex	r3, [r2]
 8005108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	e842 3100 	strex	r1, r3, [r2]
 8005110:	2900      	cmp	r1, #0
 8005112:	d1f6      	bne.n	8005102 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005114:	2320      	movs	r3, #32
 8005116:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800511e:	f7fc fc83 	bl	8001a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005122:	bd08      	pop	{r3, pc}

08005124 <HAL_UART_TxHalfCpltCallback>:
}
 8005124:	4770      	bx	lr

08005126 <UART_DMATxHalfCplt>:
{
 8005126:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005128:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800512a:	f7ff fffb 	bl	8005124 <HAL_UART_TxHalfCpltCallback>
}
 800512e:	bd08      	pop	{r3, pc}

08005130 <HAL_UART_ErrorCallback>:
}
 8005130:	4770      	bx	lr

08005132 <UART_DMAError>:
{
 8005132:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005134:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005136:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800513a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005146:	d001      	beq.n	800514c <UART_DMAError+0x1a>
 8005148:	2a21      	cmp	r2, #33	; 0x21
 800514a:	d010      	beq.n	800516e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005154:	d001      	beq.n	800515a <UART_DMAError+0x28>
 8005156:	2d22      	cmp	r5, #34	; 0x22
 8005158:	d010      	beq.n	800517c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800515a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800515e:	f043 0310 	orr.w	r3, r3, #16
 8005162:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005166:	4620      	mov	r0, r4
 8005168:	f7ff ffe2 	bl	8005130 <HAL_UART_ErrorCallback>
}
 800516c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005174:	4620      	mov	r0, r4
 8005176:	f7ff fefb 	bl	8004f70 <UART_EndTxTransfer>
 800517a:	e7e7      	b.n	800514c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005182:	4620      	mov	r0, r4
 8005184:	f7ff ff0d 	bl	8004fa2 <UART_EndRxTransfer>
 8005188:	e7e7      	b.n	800515a <UART_DMAError+0x28>

0800518a <UART_DMAAbortOnError>:
{
 800518a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800518c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005194:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005198:	f7ff ffca 	bl	8005130 <HAL_UART_ErrorCallback>
}
 800519c:	bd08      	pop	{r3, pc}

0800519e <HAL_UARTEx_RxEventCallback>:
}
 800519e:	4770      	bx	lr

080051a0 <HAL_UART_IRQHandler>:
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051a4:	6801      	ldr	r1, [r0, #0]
 80051a6:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a8:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051aa:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051ac:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80051b0:	401a      	ands	r2, r3
 80051b2:	d108      	bne.n	80051c6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051b4:	f013 0f20 	tst.w	r3, #32
 80051b8:	d005      	beq.n	80051c6 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051ba:	f010 0f20 	tst.w	r0, #32
 80051be:	d134      	bne.n	800522a <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051c0:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80051c4:	d131      	bne.n	800522a <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80051c6:	b12a      	cbz	r2, 80051d4 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051c8:	4abd      	ldr	r2, [pc, #756]	; (80054c0 <HAL_UART_IRQHandler+0x320>)
 80051ca:	402a      	ands	r2, r5
 80051cc:	d133      	bne.n	8005236 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051ce:	4ebd      	ldr	r6, [pc, #756]	; (80054c4 <HAL_UART_IRQHandler+0x324>)
 80051d0:	4230      	tst	r0, r6
 80051d2:	d130      	bne.n	8005236 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80051d6:	2a01      	cmp	r2, #1
 80051d8:	f000 80c3 	beq.w	8005362 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80051e0:	d003      	beq.n	80051ea <HAL_UART_IRQHandler+0x4a>
 80051e2:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80051e6:	f040 8155 	bne.w	8005494 <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051ee:	d007      	beq.n	8005200 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051f0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051f4:	f040 8155 	bne.w	80054a2 <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051f8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80051fc:	f040 8151 	bne.w	80054a2 <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005200:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005204:	d003      	beq.n	800520e <HAL_UART_IRQHandler+0x6e>
 8005206:	f010 0f40 	tst.w	r0, #64	; 0x40
 800520a:	f040 8151 	bne.w	80054b0 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800520e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005212:	d003      	beq.n	800521c <HAL_UART_IRQHandler+0x7c>
 8005214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005218:	f040 814e 	bne.w	80054b8 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800521c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005220:	d002      	beq.n	8005228 <HAL_UART_IRQHandler+0x88>
 8005222:	2800      	cmp	r0, #0
 8005224:	f2c0 8152 	blt.w	80054cc <HAL_UART_IRQHandler+0x32c>
}
 8005228:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800522a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0fb      	beq.n	8005228 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005230:	4620      	mov	r0, r4
 8005232:	4798      	blx	r3
      return;
 8005234:	e7f8      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005236:	f013 0f01 	tst.w	r3, #1
 800523a:	d009      	beq.n	8005250 <HAL_UART_IRQHandler+0xb0>
 800523c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005240:	d006      	beq.n	8005250 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005242:	2601      	movs	r6, #1
 8005244:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005246:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800524a:	4331      	orrs	r1, r6
 800524c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005250:	f013 0f02 	tst.w	r3, #2
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xce>
 8005256:	f015 0f01 	tst.w	r5, #1
 800525a:	d008      	beq.n	800526e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800525c:	6821      	ldr	r1, [r4, #0]
 800525e:	2602      	movs	r6, #2
 8005260:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005262:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005266:	f041 0104 	orr.w	r1, r1, #4
 800526a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800526e:	f013 0f04 	tst.w	r3, #4
 8005272:	d00b      	beq.n	800528c <HAL_UART_IRQHandler+0xec>
 8005274:	f015 0f01 	tst.w	r5, #1
 8005278:	d008      	beq.n	800528c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	2604      	movs	r6, #4
 800527e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005280:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005284:	f041 0102 	orr.w	r1, r1, #2
 8005288:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800528c:	f013 0f08 	tst.w	r3, #8
 8005290:	d00b      	beq.n	80052aa <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005292:	f010 0f20 	tst.w	r0, #32
 8005296:	d100      	bne.n	800529a <HAL_UART_IRQHandler+0xfa>
 8005298:	b13a      	cbz	r2, 80052aa <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	2108      	movs	r1, #8
 800529e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052a0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052a4:	430a      	orrs	r2, r1
 80052a6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80052ae:	d00c      	beq.n	80052ca <HAL_UART_IRQHandler+0x12a>
 80052b0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80052b4:	d009      	beq.n	80052ca <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80052bc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052be:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052c2:	f042 0220 	orr.w	r2, r2, #32
 80052c6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ca:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d0aa      	beq.n	8005228 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052d2:	f013 0f20 	tst.w	r3, #32
 80052d6:	d009      	beq.n	80052ec <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052d8:	f010 0f20 	tst.w	r0, #32
 80052dc:	d102      	bne.n	80052e4 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052de:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80052e2:	d003      	beq.n	80052ec <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80052e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80052e6:	b10b      	cbz	r3, 80052ec <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80052e8:	4620      	mov	r0, r4
 80052ea:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80052ec:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052f8:	d102      	bne.n	8005300 <HAL_UART_IRQHandler+0x160>
 80052fa:	f012 0f28 	tst.w	r2, #40	; 0x28
 80052fe:	d029      	beq.n	8005354 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005300:	4620      	mov	r0, r4
 8005302:	f7ff fe4e 	bl	8004fa2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800530e:	d01d      	beq.n	800534c <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005310:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	f102 0308 	add.w	r3, r2, #8
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	3208      	adds	r2, #8
 8005320:	e842 3100 	strex	r1, r3, [r2]
 8005324:	2900      	cmp	r1, #0
 8005326:	d1f3      	bne.n	8005310 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005328:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800532a:	b15b      	cbz	r3, 8005344 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800532c:	4a66      	ldr	r2, [pc, #408]	; (80054c8 <HAL_UART_IRQHandler+0x328>)
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005330:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005332:	f7fd fec1 	bl	80030b8 <HAL_DMA_Abort_IT>
 8005336:	2800      	cmp	r0, #0
 8005338:	f43f af76 	beq.w	8005228 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800533c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800533e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005340:	4798      	blx	r3
 8005342:	e771      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005344:	4620      	mov	r0, r4
 8005346:	f7ff fef3 	bl	8005130 <HAL_UART_ErrorCallback>
 800534a:	e76d      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800534c:	4620      	mov	r0, r4
 800534e:	f7ff feef 	bl	8005130 <HAL_UART_ErrorCallback>
 8005352:	e769      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff feeb 	bl	8005130 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535a:	2300      	movs	r3, #0
 800535c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005360:	e762      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005362:	f013 0f10 	tst.w	r3, #16
 8005366:	f43f af39 	beq.w	80051dc <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800536a:	f010 0f10 	tst.w	r0, #16
 800536e:	f43f af35 	beq.w	80051dc <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005372:	2310      	movs	r3, #16
 8005374:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800537e:	d04f      	beq.n	8005420 <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005380:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005382:	6813      	ldr	r3, [r2, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005388:	2b00      	cmp	r3, #0
 800538a:	f43f af4d 	beq.w	8005228 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800538e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005392:	4299      	cmp	r1, r3
 8005394:	f67f af48 	bls.w	8005228 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005398:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f013 0f20 	tst.w	r3, #32
 80053a4:	d131      	bne.n	800540a <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	e852 3f00 	ldrex	r3, [r2]
 80053ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	e842 3100 	strex	r1, r3, [r2]
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d1f6      	bne.n	80053a6 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	f102 0308 	add.w	r3, r2, #8
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	3208      	adds	r2, #8
 80053c8:	e842 3100 	strex	r1, r3, [r2]
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d1f3      	bne.n	80053b8 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	f102 0308 	add.w	r3, r2, #8
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	3208      	adds	r2, #8
 80053e0:	e842 3100 	strex	r1, r3, [r2]
 80053e4:	2900      	cmp	r1, #0
 80053e6:	d1f3      	bne.n	80053d0 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80053e8:	2320      	movs	r3, #32
 80053ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	2300      	movs	r3, #0
 80053f0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	e852 3f00 	ldrex	r3, [r2]
 80053f8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	e842 3100 	strex	r1, r3, [r2]
 8005400:	2900      	cmp	r1, #0
 8005402:	d1f6      	bne.n	80053f2 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005404:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005406:	f7fd fe1d 	bl	8003044 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800540a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800540e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005412:	b29b      	uxth	r3, r3
 8005414:	1ac9      	subs	r1, r1, r3
 8005416:	b289      	uxth	r1, r1
 8005418:	4620      	mov	r0, r4
 800541a:	f7ff fec0 	bl	800519e <HAL_UARTEx_RxEventCallback>
      return;
 800541e:	e703      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005420:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005424:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005428:	b29b      	uxth	r3, r3
 800542a:	1ac9      	subs	r1, r1, r3
 800542c:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800542e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	f43f aef7 	beq.w	8005228 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 800543a:	2900      	cmp	r1, #0
 800543c:	f43f aef4 	beq.w	8005228 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005440:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	e852 3f00 	ldrex	r3, [r2]
 8005446:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	e842 3000 	strex	r0, r3, [r2]
 800544e:	2800      	cmp	r0, #0
 8005450:	d1f6      	bne.n	8005440 <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005452:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	f102 0308 	add.w	r3, r2, #8
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005460:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	3208      	adds	r2, #8
 8005466:	e842 3000 	strex	r0, r3, [r2]
 800546a:	2800      	cmp	r0, #0
 800546c:	d1f1      	bne.n	8005452 <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 800546e:	2320      	movs	r3, #32
 8005470:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	2300      	movs	r3, #0
 8005476:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005478:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	e852 3f00 	ldrex	r3, [r2]
 8005480:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	e842 3000 	strex	r0, r3, [r2]
 8005488:	2800      	cmp	r0, #0
 800548a:	d1f6      	bne.n	800547a <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff fe86 	bl	800519e <HAL_UARTEx_RxEventCallback>
      return;
 8005492:	e6c9      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005494:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005498:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fe14 	bl	80060c8 <HAL_UARTEx_WakeupCallback>
    return;
 80054a0:	e6c2      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80054a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f43f aebf 	beq.w	8005228 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80054aa:	4620      	mov	r0, r4
 80054ac:	4798      	blx	r3
    return;
 80054ae:	e6bb      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff fe25 	bl	8005100 <UART_EndTransmit_IT>
    return;
 80054b6:	e6b7      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 fe07 	bl	80060cc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80054be:	e6b3      	b.n	8005228 <HAL_UART_IRQHandler+0x88>
 80054c0:	10000001 	.word	0x10000001
 80054c4:	04000120 	.word	0x04000120
 80054c8:	0800518b 	.word	0x0800518b
    HAL_UARTEx_RxFifoFullCallback(huart);
 80054cc:	4620      	mov	r0, r4
 80054ce:	f000 fdfc 	bl	80060ca <HAL_UARTEx_RxFifoFullCallback>
    return;
 80054d2:	e6a9      	b.n	8005228 <HAL_UART_IRQHandler+0x88>

080054d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054d4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80054d6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054da:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80054de:	2a22      	cmp	r2, #34	; 0x22
 80054e0:	d005      	beq.n	80054ee <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e2:	6802      	ldr	r2, [r0, #0]
 80054e4:	6993      	ldr	r3, [r2, #24]
 80054e6:	f043 0308 	orr.w	r3, r3, #8
 80054ea:	6193      	str	r3, [r2, #24]
  }
}
 80054ec:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054ee:	6802      	ldr	r2, [r0, #0]
 80054f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80054f6:	400b      	ands	r3, r1
 80054f8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80054fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80054fc:	3301      	adds	r3, #1
 80054fe:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005500:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29b      	uxth	r3, r3
 800550a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800550e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e9      	bne.n	80054ec <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005518:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	e852 3f00 	ldrex	r3, [r2]
 800551e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	e842 3100 	strex	r1, r3, [r2]
 8005526:	2900      	cmp	r1, #0
 8005528:	d1f6      	bne.n	8005518 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	f102 0308 	add.w	r3, r2, #8
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	3208      	adds	r2, #8
 800553a:	e842 3100 	strex	r1, r3, [r2]
 800553e:	2900      	cmp	r1, #0
 8005540:	d1f3      	bne.n	800552a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005542:	2320      	movs	r3, #32
 8005544:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800554e:	2b01      	cmp	r3, #1
 8005550:	d116      	bne.n	8005580 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005552:	2300      	movs	r3, #0
 8005554:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005556:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	e852 3f00 	ldrex	r3, [r2]
 800555c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	e842 3100 	strex	r1, r3, [r2]
 8005564:	2900      	cmp	r1, #0
 8005566:	d1f6      	bne.n	8005556 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005568:	6803      	ldr	r3, [r0, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	f012 0f10 	tst.w	r2, #16
 8005570:	d001      	beq.n	8005576 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005572:	2210      	movs	r2, #16
 8005574:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005576:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800557a:	f7ff fe10 	bl	800519e <HAL_UARTEx_RxEventCallback>
 800557e:	e7b5      	b.n	80054ec <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005580:	f7fc fa5a 	bl	8001a38 <HAL_UART_RxCpltCallback>
 8005584:	e7b2      	b.n	80054ec <UART_RxISR_8BIT+0x18>

08005586 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005586:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005588:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800558c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005590:	2b22      	cmp	r3, #34	; 0x22
 8005592:	d005      	beq.n	80055a0 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005594:	6802      	ldr	r2, [r0, #0]
 8005596:	6993      	ldr	r3, [r2, #24]
 8005598:	f043 0308 	orr.w	r3, r3, #8
 800559c:	6193      	str	r3, [r2, #24]
  }
}
 800559e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055a0:	6803      	ldr	r3, [r0, #0]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055a4:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80055a6:	4013      	ands	r3, r2
 80055a8:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80055aa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80055ac:	3302      	adds	r3, #2
 80055ae:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80055b0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80055be:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ea      	bne.n	800559e <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	e852 3f00 	ldrex	r3, [r2]
 80055ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	e842 3100 	strex	r1, r3, [r2]
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d1f6      	bne.n	80055c8 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	f102 0308 	add.w	r3, r2, #8
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	3208      	adds	r2, #8
 80055ea:	e842 3100 	strex	r1, r3, [r2]
 80055ee:	2900      	cmp	r1, #0
 80055f0:	d1f3      	bne.n	80055da <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80055f2:	2320      	movs	r3, #32
 80055f4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d116      	bne.n	8005630 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	2300      	movs	r3, #0
 8005604:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005606:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	e852 3f00 	ldrex	r3, [r2]
 800560c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	e842 3100 	strex	r1, r3, [r2]
 8005614:	2900      	cmp	r1, #0
 8005616:	d1f6      	bne.n	8005606 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005618:	6803      	ldr	r3, [r0, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	f012 0f10 	tst.w	r2, #16
 8005620:	d001      	beq.n	8005626 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005622:	2210      	movs	r2, #16
 8005624:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005626:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800562a:	f7ff fdb8 	bl	800519e <HAL_UARTEx_RxEventCallback>
 800562e:	e7b6      	b.n	800559e <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005630:	f7fc fa02 	bl	8001a38 <HAL_UART_RxCpltCallback>
 8005634:	e7b3      	b.n	800559e <UART_RxISR_16BIT+0x18>
	...

08005638 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800563c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005640:	6803      	ldr	r3, [r0, #0]
 8005642:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005644:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005648:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800564c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005650:	2a22      	cmp	r2, #34	; 0x22
 8005652:	d005      	beq.n	8005660 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	f042 0208 	orr.w	r2, r2, #8
 800565a:	619a      	str	r2, [r3, #24]
  }
}
 800565c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005660:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005662:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005666:	e008      	b.n	800567a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005668:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d14c      	bne.n	800570a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005670:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d04e      	beq.n	8005718 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800567a:	2f00      	cmp	r7, #0
 800567c:	f000 8087 	beq.w	800578e <UART_RxISR_8BIT_FIFOEN+0x156>
 8005680:	f015 0f20 	tst.w	r5, #32
 8005684:	f000 8083 	beq.w	800578e <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800568c:	b2f3      	uxtb	r3, r6
 800568e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005690:	400b      	ands	r3, r1
 8005692:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005696:	3301      	adds	r3, #1
 8005698:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800569a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056ac:	f015 0f07 	tst.w	r5, #7
 80056b0:	d0de      	beq.n	8005670 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056b2:	f015 0f01 	tst.w	r5, #1
 80056b6:	d009      	beq.n	80056cc <UART_RxISR_8BIT_FIFOEN+0x94>
 80056b8:	f419 7f80 	tst.w	r9, #256	; 0x100
 80056bc:	d006      	beq.n	80056cc <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056be:	2201      	movs	r2, #1
 80056c0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056cc:	f015 0f02 	tst.w	r5, #2
 80056d0:	d00b      	beq.n	80056ea <UART_RxISR_8BIT_FIFOEN+0xb2>
 80056d2:	f018 0f01 	tst.w	r8, #1
 80056d6:	d008      	beq.n	80056ea <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	2202      	movs	r2, #2
 80056dc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056de:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ea:	f015 0f04 	tst.w	r5, #4
 80056ee:	d0bb      	beq.n	8005668 <UART_RxISR_8BIT_FIFOEN+0x30>
 80056f0:	f018 0f01 	tst.w	r8, #1
 80056f4:	d0b8      	beq.n	8005668 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	2204      	movs	r2, #4
 80056fa:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005708:	e7ae      	b.n	8005668 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800570a:	4620      	mov	r0, r4
 800570c:	f7ff fd10 	bl	8005130 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005710:	2300      	movs	r3, #0
 8005712:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005716:	e7ab      	b.n	8005670 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005718:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	e852 3f00 	ldrex	r3, [r2]
 800571e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	e842 3100 	strex	r1, r3, [r2]
 8005726:	2900      	cmp	r1, #0
 8005728:	d1f6      	bne.n	8005718 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800572a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	f102 0308 	add.w	r3, r2, #8
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005738:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	3208      	adds	r2, #8
 800573e:	e842 3100 	strex	r1, r3, [r2]
 8005742:	2900      	cmp	r1, #0
 8005744:	d1f1      	bne.n	800572a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8005746:	2320      	movs	r3, #32
 8005748:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d003      	beq.n	800575e <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8005756:	4620      	mov	r0, r4
 8005758:	f7fc f96e 	bl	8001a38 <HAL_UART_RxCpltCallback>
 800575c:	e78d      	b.n	800567a <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	2300      	movs	r3, #0
 8005760:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005762:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	e852 3f00 	ldrex	r3, [r2]
 8005768:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	e842 3100 	strex	r1, r3, [r2]
 8005770:	2900      	cmp	r1, #0
 8005772:	d1f6      	bne.n	8005762 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	f012 0f10 	tst.w	r2, #16
 800577c:	d001      	beq.n	8005782 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800577e:	2210      	movs	r2, #16
 8005780:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005782:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005786:	4620      	mov	r0, r4
 8005788:	f7ff fd09 	bl	800519e <HAL_UARTEx_RxEventCallback>
 800578c:	e775      	b.n	800567a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800578e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005792:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005794:	2b00      	cmp	r3, #0
 8005796:	f43f af61 	beq.w	800565c <UART_RxISR_8BIT_FIFOEN+0x24>
 800579a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800579e:	429a      	cmp	r2, r3
 80057a0:	f67f af5c 	bls.w	800565c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	f102 0308 	add.w	r3, r2, #8
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	3208      	adds	r2, #8
 80057b4:	e842 3100 	strex	r1, r3, [r2]
 80057b8:	2900      	cmp	r1, #0
 80057ba:	d1f3      	bne.n	80057a4 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80057be:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	e852 3f00 	ldrex	r3, [r2]
 80057c6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	e842 3100 	strex	r1, r3, [r2]
 80057ce:	2900      	cmp	r1, #0
 80057d0:	d1f6      	bne.n	80057c0 <UART_RxISR_8BIT_FIFOEN+0x188>
 80057d2:	e743      	b.n	800565c <UART_RxISR_8BIT_FIFOEN+0x24>
 80057d4:	080054d5 	.word	0x080054d5

080057d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80057dc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057e0:	6803      	ldr	r3, [r0, #0]
 80057e2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057e4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057e8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057ec:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80057f0:	2a22      	cmp	r2, #34	; 0x22
 80057f2:	d005      	beq.n	8005800 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	f042 0208 	orr.w	r2, r2, #8
 80057fa:	619a      	str	r2, [r3, #24]
  }
}
 80057fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005800:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005802:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005806:	e008      	b.n	800581a <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005808:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d14b      	bne.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8005810:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d04d      	beq.n	80058b6 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800581a:	2f00      	cmp	r7, #0
 800581c:	f000 8086 	beq.w	800592c <UART_RxISR_16BIT_FIFOEN+0x154>
 8005820:	f015 0f20 	tst.w	r5, #32
 8005824:	f000 8082 	beq.w	800592c <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800582c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800582e:	4033      	ands	r3, r6
 8005830:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005834:	3302      	adds	r3, #2
 8005836:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005838:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29b      	uxth	r3, r3
 8005842:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800584a:	f015 0f07 	tst.w	r5, #7
 800584e:	d0df      	beq.n	8005810 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005850:	f015 0f01 	tst.w	r5, #1
 8005854:	d009      	beq.n	800586a <UART_RxISR_16BIT_FIFOEN+0x92>
 8005856:	f419 7f80 	tst.w	r9, #256	; 0x100
 800585a:	d006      	beq.n	800586a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800585c:	2201      	movs	r2, #1
 800585e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005860:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800586a:	f015 0f02 	tst.w	r5, #2
 800586e:	d00b      	beq.n	8005888 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8005870:	f018 0f01 	tst.w	r8, #1
 8005874:	d008      	beq.n	8005888 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	2202      	movs	r2, #2
 800587a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800587c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005880:	f043 0304 	orr.w	r3, r3, #4
 8005884:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005888:	f015 0f04 	tst.w	r5, #4
 800588c:	d0bc      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0x30>
 800588e:	f018 0f01 	tst.w	r8, #1
 8005892:	d0b9      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	2204      	movs	r2, #4
 8005898:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800589a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800589e:	f043 0302 	orr.w	r3, r3, #2
 80058a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80058a6:	e7af      	b.n	8005808 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff fc41 	bl	8005130 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80058b4:	e7ac      	b.n	8005810 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	e852 3f00 	ldrex	r3, [r2]
 80058bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	e842 3100 	strex	r1, r3, [r2]
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d1f6      	bne.n	80058b6 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	f102 0308 	add.w	r3, r2, #8
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	3208      	adds	r2, #8
 80058dc:	e842 3100 	strex	r1, r3, [r2]
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d1f1      	bne.n	80058c8 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80058e4:	2320      	movs	r3, #32
 80058e6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d003      	beq.n	80058fc <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80058f4:	4620      	mov	r0, r4
 80058f6:	f7fc f89f 	bl	8001a38 <HAL_UART_RxCpltCallback>
 80058fa:	e78e      	b.n	800581a <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fc:	2300      	movs	r3, #0
 80058fe:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	e852 3f00 	ldrex	r3, [r2]
 8005906:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	e842 3100 	strex	r1, r3, [r2]
 800590e:	2900      	cmp	r1, #0
 8005910:	d1f6      	bne.n	8005900 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	f012 0f10 	tst.w	r2, #16
 800591a:	d001      	beq.n	8005920 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800591c:	2210      	movs	r2, #16
 800591e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005920:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff fc3a 	bl	800519e <HAL_UARTEx_RxEventCallback>
 800592a:	e776      	b.n	800581a <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800592c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005930:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005932:	2b00      	cmp	r3, #0
 8005934:	f43f af62 	beq.w	80057fc <UART_RxISR_16BIT_FIFOEN+0x24>
 8005938:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800593c:	429a      	cmp	r2, r3
 800593e:	f67f af5d 	bls.w	80057fc <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005942:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	f102 0308 	add.w	r3, r2, #8
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	3208      	adds	r2, #8
 8005952:	e842 3100 	strex	r1, r3, [r2]
 8005956:	2900      	cmp	r1, #0
 8005958:	d1f3      	bne.n	8005942 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 800595c:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800595e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	e852 3f00 	ldrex	r3, [r2]
 8005964:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	e842 3100 	strex	r1, r3, [r2]
 800596c:	2900      	cmp	r1, #0
 800596e:	d1f6      	bne.n	800595e <UART_RxISR_16BIT_FIFOEN+0x186>
 8005970:	e744      	b.n	80057fc <UART_RxISR_16BIT_FIFOEN+0x24>
 8005972:	bf00      	nop
 8005974:	08005587 	.word	0x08005587

08005978 <UART_SetConfig>:
{
 8005978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800597e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005980:	6883      	ldr	r3, [r0, #8]
 8005982:	6902      	ldr	r2, [r0, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	6942      	ldr	r2, [r0, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	69c2      	ldr	r2, [r0, #28]
 800598c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800598e:	6808      	ldr	r0, [r1, #0]
 8005990:	4aa1      	ldr	r2, [pc, #644]	; (8005c18 <UART_SetConfig+0x2a0>)
 8005992:	4002      	ands	r2, r0
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	6853      	ldr	r3, [r2, #4]
 800599c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059a0:	68e1      	ldr	r1, [r4, #12]
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	4b9c      	ldr	r3, [pc, #624]	; (8005c1c <UART_SetConfig+0x2a4>)
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 80059b0:	6a23      	ldr	r3, [r4, #32]
 80059b2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b4:	6893      	ldr	r3, [r2, #8]
 80059b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059be:	430b      	orrs	r3, r1
 80059c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80059c6:	f023 030f 	bic.w	r3, r3, #15
 80059ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059cc:	430b      	orrs	r3, r1
 80059ce:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	4b93      	ldr	r3, [pc, #588]	; (8005c20 <UART_SetConfig+0x2a8>)
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d01c      	beq.n	8005a12 <UART_SetConfig+0x9a>
 80059d8:	4b92      	ldr	r3, [pc, #584]	; (8005c24 <UART_SetConfig+0x2ac>)
 80059da:	429a      	cmp	r2, r3
 80059dc:	d031      	beq.n	8005a42 <UART_SetConfig+0xca>
 80059de:	4b8f      	ldr	r3, [pc, #572]	; (8005c1c <UART_SetConfig+0x2a4>)
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d04b      	beq.n	8005a7c <UART_SetConfig+0x104>
 80059e4:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80059e6:	498d      	ldr	r1, [pc, #564]	; (8005c1c <UART_SetConfig+0x2a4>)
 80059e8:	428a      	cmp	r2, r1
 80059ea:	d068      	beq.n	8005abe <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ec:	69e0      	ldr	r0, [r4, #28]
 80059ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80059f2:	f000 80a7 	beq.w	8005b44 <UART_SetConfig+0x1cc>
    switch (clocksource)
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	f200 8122 	bhi.w	8005c40 <UART_SetConfig+0x2c8>
 80059fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a00:	00f800d5 	.word	0x00f800d5
 8005a04:	012000d3 	.word	0x012000d3
 8005a08:	012000fb 	.word	0x012000fb
 8005a0c:	01200120 	.word	0x01200120
 8005a10:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8005a22:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d809      	bhi.n	8005a3e <UART_SetConfig+0xc6>
 8005a2a:	e8df f003 	tbb	[pc, r3]
 8005a2e:	0402      	.short	0x0402
 8005a30:	063c      	.short	0x063c
 8005a32:	2301      	movs	r3, #1
 8005a34:	e7d7      	b.n	80059e6 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a36:	2304      	movs	r3, #4
 8005a38:	e7d5      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	e7d3      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005a3e:	2310      	movs	r3, #16
 8005a40:	e7d1      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005a52:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d80e      	bhi.n	8005a78 <UART_SetConfig+0x100>
 8005a5a:	e8df f003 	tbb	[pc, r3]
 8005a5e:	0d07      	.short	0x0d07
 8005a60:	0d090d0d 	.word	0x0d090d0d
 8005a64:	0d260d0d 	.word	0x0d260d0d
 8005a68:	0d0d      	.short	0x0d0d
 8005a6a:	0b          	.byte	0x0b
 8005a6b:	00          	.byte	0x00
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e7ba      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005a70:	2304      	movs	r3, #4
 8005a72:	e7b8      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005a74:	2308      	movs	r3, #8
 8005a76:	e7b6      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	e7b4      	b.n	80059e6 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8c:	d00f      	beq.n	8005aae <UART_SetConfig+0x136>
 8005a8e:	d805      	bhi.n	8005a9c <UART_SetConfig+0x124>
 8005a90:	b17b      	cbz	r3, 8005ab2 <UART_SetConfig+0x13a>
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a96:	d10e      	bne.n	8005ab6 <UART_SetConfig+0x13e>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	e7a4      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005a9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aa0:	d10b      	bne.n	8005aba <UART_SetConfig+0x142>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	e79f      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e79d      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e79b      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e799      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e797      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005ab6:	2310      	movs	r3, #16
 8005ab8:	e795      	b.n	80059e6 <UART_SetConfig+0x6e>
 8005aba:	2310      	movs	r3, #16
 8005abc:	e793      	b.n	80059e6 <UART_SetConfig+0x6e>
    switch (clocksource)
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	f200 809f 	bhi.w	8005c02 <UART_SetConfig+0x28a>
 8005ac4:	e8df f003 	tbb	[pc, r3]
 8005ac8:	9d3c9d08 	.word	0x9d3c9d08
 8005acc:	9d9d9d39 	.word	0x9d9d9d39
 8005ad0:	05          	.byte	0x05
 8005ad1:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ad2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005ad6:	e004      	b.n	8005ae2 <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fe fb14 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005adc:	2800      	cmp	r0, #0
 8005ade:	f000 8092 	beq.w	8005c06 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ae4:	4b50      	ldr	r3, [pc, #320]	; (8005c28 <UART_SetConfig+0x2b0>)
 8005ae6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005aea:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aee:	6865      	ldr	r5, [r4, #4]
 8005af0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005af4:	4299      	cmp	r1, r3
 8005af6:	f200 8088 	bhi.w	8005c0a <UART_SetConfig+0x292>
 8005afa:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005afe:	f200 8086 	bhi.w	8005c0e <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b02:	f04f 0800 	mov.w	r8, #0
 8005b06:	b292      	uxth	r2, r2
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	f7fb f826 	bl	8000b5c <__aeabi_uldivmod>
 8005b10:	020f      	lsls	r7, r1, #8
 8005b12:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005b16:	0206      	lsls	r6, r0, #8
 8005b18:	0868      	lsrs	r0, r5, #1
 8005b1a:	462a      	mov	r2, r5
 8005b1c:	4643      	mov	r3, r8
 8005b1e:	1830      	adds	r0, r6, r0
 8005b20:	f147 0100 	adc.w	r1, r7, #0
 8005b24:	f7fb f81a 	bl	8000b5c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b28:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005b2c:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <UART_SetConfig+0x2b4>)
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d86f      	bhi.n	8005c12 <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	60d8      	str	r0, [r3, #12]
 8005b36:	4640      	mov	r0, r8
 8005b38:	e050      	b.n	8005bdc <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fd fddb 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
        break;
 8005b3e:	e7cd      	b.n	8005adc <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	483b      	ldr	r0, [pc, #236]	; (8005c30 <UART_SetConfig+0x2b8>)
 8005b42:	e7ce      	b.n	8005ae2 <UART_SetConfig+0x16a>
    switch (clocksource)
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d875      	bhi.n	8005c34 <UART_SetConfig+0x2bc>
 8005b48:	e8df f003 	tbb	[pc, r3]
 8005b4c:	74052707 	.word	0x74052707
 8005b50:	7474742a 	.word	0x7474742a
 8005b54:	0b          	.byte	0x0b
 8005b55:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b56:	4836      	ldr	r0, [pc, #216]	; (8005c30 <UART_SetConfig+0x2b8>)
 8005b58:	e003      	b.n	8005b62 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b5a:	f7fe fad3 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d06a      	beq.n	8005c38 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b64:	4b30      	ldr	r3, [pc, #192]	; (8005c28 <UART_SetConfig+0x2b0>)
 8005b66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005b6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	0853      	lsrs	r3, r2, #1
 8005b72:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005b76:	fbb0 f0f2 	udiv	r0, r0, r2
 8005b7a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7c:	f1a0 0210 	sub.w	r2, r0, #16
 8005b80:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d859      	bhi.n	8005c3c <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b88:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b8c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005b90:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	60d8      	str	r0, [r3, #12]
 8005b96:	2000      	movs	r0, #0
 8005b98:	e020      	b.n	8005bdc <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b9a:	f7fe fac3 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
        break;
 8005b9e:	e7de      	b.n	8005b5e <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba0:	f7fd fda8 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
        break;
 8005ba4:	e7db      	b.n	8005b5e <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba6:	4822      	ldr	r0, [pc, #136]	; (8005c30 <UART_SetConfig+0x2b8>)
 8005ba8:	e003      	b.n	8005bb2 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005baa:	f7fe faab 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d048      	beq.n	8005c44 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005bb4:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <UART_SetConfig+0x2b0>)
 8005bb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005bba:	fbb0 f0f3 	udiv	r0, r0, r3
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005bc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8005bc8:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bca:	f1a0 0210 	sub.w	r2, r0, #16
 8005bce:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d838      	bhi.n	8005c48 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	60d8      	str	r0, [r3, #12]
 8005bda:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005be2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005bea:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe fa98 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
        break;
 8005bf4:	e7db      	b.n	8005bae <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fd fd7d 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
        break;
 8005bfa:	e7d8      	b.n	8005bae <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 8005bfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005c00:	e7d7      	b.n	8005bb2 <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c02:	2001      	movs	r0, #1
 8005c04:	e7ea      	b.n	8005bdc <UART_SetConfig+0x264>
 8005c06:	2000      	movs	r0, #0
 8005c08:	e7e8      	b.n	8005bdc <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	e7e6      	b.n	8005bdc <UART_SetConfig+0x264>
 8005c0e:	2001      	movs	r0, #1
 8005c10:	e7e4      	b.n	8005bdc <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 8005c12:	2001      	movs	r0, #1
 8005c14:	e7e2      	b.n	8005bdc <UART_SetConfig+0x264>
 8005c16:	bf00      	nop
 8005c18:	cfff69f3 	.word	0xcfff69f3
 8005c1c:	40008000 	.word	0x40008000
 8005c20:	40013800 	.word	0x40013800
 8005c24:	40004400 	.word	0x40004400
 8005c28:	0801173c 	.word	0x0801173c
 8005c2c:	000ffcff 	.word	0x000ffcff
 8005c30:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c34:	2001      	movs	r0, #1
 8005c36:	e7d1      	b.n	8005bdc <UART_SetConfig+0x264>
 8005c38:	2000      	movs	r0, #0
 8005c3a:	e7cf      	b.n	8005bdc <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	e7cd      	b.n	8005bdc <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c40:	2001      	movs	r0, #1
 8005c42:	e7cb      	b.n	8005bdc <UART_SetConfig+0x264>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7c9      	b.n	8005bdc <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8005c48:	2001      	movs	r0, #1
 8005c4a:	e7c7      	b.n	8005bdc <UART_SetConfig+0x264>

08005c4c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c4e:	f013 0f01 	tst.w	r3, #1
 8005c52:	d006      	beq.n	8005c62 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c54:	6802      	ldr	r2, [r0, #0]
 8005c56:	6853      	ldr	r3, [r2, #4]
 8005c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c5c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c64:	f013 0f02 	tst.w	r3, #2
 8005c68:	d006      	beq.n	8005c78 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c6a:	6802      	ldr	r2, [r0, #0]
 8005c6c:	6853      	ldr	r3, [r2, #4]
 8005c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c72:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c7a:	f013 0f04 	tst.w	r3, #4
 8005c7e:	d006      	beq.n	8005c8e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c80:	6802      	ldr	r2, [r0, #0]
 8005c82:	6853      	ldr	r3, [r2, #4]
 8005c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c88:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c90:	f013 0f08 	tst.w	r3, #8
 8005c94:	d006      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c96:	6802      	ldr	r2, [r0, #0]
 8005c98:	6853      	ldr	r3, [r2, #4]
 8005c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c9e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ca4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ca6:	f013 0f10 	tst.w	r3, #16
 8005caa:	d006      	beq.n	8005cba <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cac:	6802      	ldr	r2, [r0, #0]
 8005cae:	6893      	ldr	r3, [r2, #8]
 8005cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005cbc:	f013 0f20 	tst.w	r3, #32
 8005cc0:	d006      	beq.n	8005cd0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cc2:	6802      	ldr	r2, [r0, #0]
 8005cc4:	6893      	ldr	r3, [r2, #8]
 8005cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005cd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cd6:	d00a      	beq.n	8005cee <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cd8:	6802      	ldr	r2, [r0, #0]
 8005cda:	6853      	ldr	r3, [r2, #4]
 8005cdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ce0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ce6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cec:	d00b      	beq.n	8005d06 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005cf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cf4:	d006      	beq.n	8005d04 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf6:	6802      	ldr	r2, [r0, #0]
 8005cf8:	6853      	ldr	r3, [r2, #4]
 8005cfa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005cfe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6053      	str	r3, [r2, #4]
}
 8005d04:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d06:	6802      	ldr	r2, [r0, #0]
 8005d08:	6853      	ldr	r3, [r2, #4]
 8005d0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d0e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6053      	str	r3, [r2, #4]
 8005d14:	e7eb      	b.n	8005cee <UART_AdvFeatureConfig+0xa2>

08005d16 <UART_WaitOnFlagUntilTimeout>:
{
 8005d16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	460f      	mov	r7, r1
 8005d1e:	4616      	mov	r6, r2
 8005d20:	4699      	mov	r9, r3
 8005d22:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d26:	682c      	ldr	r4, [r5, #0]
 8005d28:	69e4      	ldr	r4, [r4, #28]
 8005d2a:	ea37 0304 	bics.w	r3, r7, r4
 8005d2e:	bf0c      	ite	eq
 8005d30:	2401      	moveq	r4, #1
 8005d32:	2400      	movne	r4, #0
 8005d34:	42b4      	cmp	r4, r6
 8005d36:	d157      	bne.n	8005de8 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8005d38:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d3c:	d0f3      	beq.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3e:	f7fb fbd5 	bl	80014ec <HAL_GetTick>
 8005d42:	eba0 0009 	sub.w	r0, r0, r9
 8005d46:	4540      	cmp	r0, r8
 8005d48:	d82f      	bhi.n	8005daa <UART_WaitOnFlagUntilTimeout+0x94>
 8005d4a:	f1b8 0f00 	cmp.w	r8, #0
 8005d4e:	d02c      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	f012 0f04 	tst.w	r2, #4
 8005d58:	d0e5      	beq.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005d60:	d0e1      	beq.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d66:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d68:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	e852 3f00 	ldrex	r3, [r2]
 8005d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	e842 3100 	strex	r1, r3, [r2]
 8005d76:	2900      	cmp	r1, #0
 8005d78:	d1f6      	bne.n	8005d68 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	f102 0308 	add.w	r3, r2, #8
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	3208      	adds	r2, #8
 8005d8a:	e842 3100 	strex	r1, r3, [r2]
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d1f3      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005d92:	2320      	movs	r3, #32
 8005d94:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005d98:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d9c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005da0:	2300      	movs	r3, #0
 8005da2:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005da6:	2003      	movs	r0, #3
 8005da8:	e01f      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005daa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	e852 3f00 	ldrex	r3, [r2]
 8005db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	e842 3100 	strex	r1, r3, [r2]
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d1f6      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	f102 0308 	add.w	r3, r2, #8
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	3208      	adds	r2, #8
 8005dcc:	e842 3100 	strex	r1, r3, [r2]
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d1f3      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005dda:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005dde:	2300      	movs	r3, #0
 8005de0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005de4:	2003      	movs	r0, #3
 8005de6:	e000      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005de8:	2000      	movs	r0, #0
}
 8005dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005dee <UART_CheckIdleState>:
{
 8005dee:	b530      	push	{r4, r5, lr}
 8005df0:	b083      	sub	sp, #12
 8005df2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005dfa:	f7fb fb77 	bl	80014ec <HAL_GetTick>
 8005dfe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f013 0f08 	tst.w	r3, #8
 8005e08:	d10f      	bne.n	8005e2a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f013 0f04 	tst.w	r3, #4
 8005e12:	d118      	bne.n	8005e46 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005e14:	2320      	movs	r3, #32
 8005e16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1e:	2000      	movs	r0, #0
 8005e20:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005e22:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005e26:	b003      	add	sp, #12
 8005e28:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4603      	mov	r3, r0
 8005e32:	2200      	movs	r2, #0
 8005e34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff ff6c 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0e3      	beq.n	8005e0a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005e42:	2003      	movs	r0, #3
 8005e44:	e7ef      	b.n	8005e26 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e54:	4620      	mov	r0, r4
 8005e56:	f7ff ff5e 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d0da      	beq.n	8005e14 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005e5e:	2003      	movs	r0, #3
 8005e60:	e7e1      	b.n	8005e26 <UART_CheckIdleState+0x38>

08005e62 <HAL_UART_Init>:
  if (huart == NULL)
 8005e62:	b378      	cbz	r0, 8005ec4 <HAL_UART_Init+0x62>
{
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005e68:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005e6c:	b30b      	cbz	r3, 8005eb2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	2324      	movs	r3, #36	; 0x24
 8005e70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005e74:	6822      	ldr	r2, [r4, #0]
 8005e76:	6813      	ldr	r3, [r2, #0]
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f7ff fd7a 	bl	8005978 <UART_SetConfig>
 8005e84:	2801      	cmp	r0, #1
 8005e86:	d013      	beq.n	8005eb0 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e8a:	b9bb      	cbnz	r3, 8005ebc <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	6853      	ldr	r3, [r2, #4]
 8005e90:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005e94:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	6893      	ldr	r3, [r2, #8]
 8005e9a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005e9e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	6813      	ldr	r3, [r2, #0]
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff ff9f 	bl	8005dee <UART_CheckIdleState>
}
 8005eb0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005eb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005eb6:	f7fb fcb3 	bl	8001820 <HAL_UART_MspInit>
 8005eba:	e7d8      	b.n	8005e6e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff fec5 	bl	8005c4c <UART_AdvFeatureConfig>
 8005ec2:	e7e3      	b.n	8005e8c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005ec4:	2001      	movs	r0, #1
}
 8005ec6:	4770      	bx	lr

08005ec8 <UART_Start_Receive_IT>:
{
 8005ec8:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8005eca:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005ecc:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005ed0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8005ed8:	6883      	ldr	r3, [r0, #8]
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ede:	d006      	beq.n	8005eee <UART_Start_Receive_IT+0x26>
 8005ee0:	b9a3      	cbnz	r3, 8005f0c <UART_Start_Receive_IT+0x44>
 8005ee2:	6903      	ldr	r3, [r0, #16]
 8005ee4:	b973      	cbnz	r3, 8005f04 <UART_Start_Receive_IT+0x3c>
 8005ee6:	23ff      	movs	r3, #255	; 0xff
 8005ee8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005eec:	e014      	b.n	8005f18 <UART_Start_Receive_IT+0x50>
 8005eee:	6903      	ldr	r3, [r0, #16]
 8005ef0:	b923      	cbnz	r3, 8005efc <UART_Start_Receive_IT+0x34>
 8005ef2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005ef6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005efa:	e00d      	b.n	8005f18 <UART_Start_Receive_IT+0x50>
 8005efc:	23ff      	movs	r3, #255	; 0xff
 8005efe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005f02:	e009      	b.n	8005f18 <UART_Start_Receive_IT+0x50>
 8005f04:	237f      	movs	r3, #127	; 0x7f
 8005f06:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005f0a:	e005      	b.n	8005f18 <UART_Start_Receive_IT+0x50>
 8005f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f10:	d02d      	beq.n	8005f6e <UART_Start_Receive_IT+0xa6>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f1e:	2322      	movs	r3, #34	; 0x22
 8005f20:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f24:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	f101 0308 	add.w	r3, r1, #8
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	3108      	adds	r1, #8
 8005f34:	e841 3400 	strex	r4, r3, [r1]
 8005f38:	2c00      	cmp	r4, #0
 8005f3a:	d1f3      	bne.n	8005f24 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005f3c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f42:	d01e      	beq.n	8005f82 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f44:	6883      	ldr	r3, [r0, #8]
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4a:	d043      	beq.n	8005fd4 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8005f4c:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <UART_Start_Receive_IT+0x118>)
 8005f4e:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005f50:	2300      	movs	r3, #0
 8005f52:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	e852 3f00 	ldrex	r3, [r2]
 8005f5c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	e842 3100 	strex	r1, r3, [r2]
 8005f64:	2900      	cmp	r1, #0
 8005f66:	d1f6      	bne.n	8005f56 <UART_Start_Receive_IT+0x8e>
}
 8005f68:	2000      	movs	r0, #0
 8005f6a:	bc10      	pop	{r4}
 8005f6c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8005f6e:	6903      	ldr	r3, [r0, #16]
 8005f70:	b91b      	cbnz	r3, 8005f7a <UART_Start_Receive_IT+0xb2>
 8005f72:	237f      	movs	r3, #127	; 0x7f
 8005f74:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005f78:	e7ce      	b.n	8005f18 <UART_Start_Receive_IT+0x50>
 8005f7a:	233f      	movs	r3, #63	; 0x3f
 8005f7c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005f80:	e7ca      	b.n	8005f18 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005f82:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d8dc      	bhi.n	8005f44 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8a:	6883      	ldr	r3, [r0, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f90:	d01a      	beq.n	8005fc8 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <UART_Start_Receive_IT+0x11c>)
 8005f94:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005f96:	2300      	movs	r3, #0
 8005f98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f9c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	e852 3f00 	ldrex	r3, [r2]
 8005fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	e842 3100 	strex	r1, r3, [r2]
 8005faa:	2900      	cmp	r1, #0
 8005fac:	d1f6      	bne.n	8005f9c <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	f102 0308 	add.w	r3, r2, #8
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	3208      	adds	r2, #8
 8005fbe:	e842 3100 	strex	r1, r3, [r2]
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d1f3      	bne.n	8005fae <UART_Start_Receive_IT+0xe6>
 8005fc6:	e7cf      	b.n	8005f68 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc8:	6903      	ldr	r3, [r0, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e1      	bne.n	8005f92 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <UART_Start_Receive_IT+0x120>)
 8005fd0:	6703      	str	r3, [r0, #112]	; 0x70
 8005fd2:	e7e0      	b.n	8005f96 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd4:	6903      	ldr	r3, [r0, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1b8      	bne.n	8005f4c <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8005fda:	4b04      	ldr	r3, [pc, #16]	; (8005fec <UART_Start_Receive_IT+0x124>)
 8005fdc:	6703      	str	r3, [r0, #112]	; 0x70
 8005fde:	e7b7      	b.n	8005f50 <UART_Start_Receive_IT+0x88>
 8005fe0:	080054d5 	.word	0x080054d5
 8005fe4:	08005639 	.word	0x08005639
 8005fe8:	080057d9 	.word	0x080057d9
 8005fec:	08005587 	.word	0x08005587

08005ff0 <HAL_UART_Receive_IT>:
{
 8005ff0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d11e      	bne.n	8006038 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8005ffa:	b1f9      	cbz	r1, 800603c <HAL_UART_Receive_IT+0x4c>
 8005ffc:	b302      	cbz	r2, 8006040 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8005ffe:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006002:	2b01      	cmp	r3, #1
 8006004:	d01e      	beq.n	8006044 <HAL_UART_Receive_IT+0x54>
 8006006:	2301      	movs	r3, #1
 8006008:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600c:	2300      	movs	r3, #0
 800600e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006010:	6803      	ldr	r3, [r0, #0]
 8006012:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <HAL_UART_Receive_IT+0x58>)
 8006014:	42a3      	cmp	r3, r4
 8006016:	d00c      	beq.n	8006032 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800601e:	d008      	beq.n	8006032 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006020:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	e854 3f00 	ldrex	r3, [r4]
 8006026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	e844 3500 	strex	r5, r3, [r4]
 800602e:	2d00      	cmp	r5, #0
 8006030:	d1f6      	bne.n	8006020 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006032:	f7ff ff49 	bl	8005ec8 <UART_Start_Receive_IT>
 8006036:	e000      	b.n	800603a <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006038:	2002      	movs	r0, #2
}
 800603a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800603c:	2001      	movs	r0, #1
 800603e:	e7fc      	b.n	800603a <HAL_UART_Receive_IT+0x4a>
 8006040:	2001      	movs	r0, #1
 8006042:	e7fa      	b.n	800603a <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006044:	2002      	movs	r0, #2
 8006046:	e7f8      	b.n	800603a <HAL_UART_Receive_IT+0x4a>
 8006048:	40008000 	.word	0x40008000

0800604c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800604c:	b082      	sub	sp, #8
 800604e:	ab02      	add	r3, sp, #8
 8006050:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006054:	6802      	ldr	r2, [r0, #0]
 8006056:	6853      	ldr	r3, [r2, #4]
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006060:	430b      	orrs	r3, r1
 8006062:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006064:	6802      	ldr	r2, [r0, #0]
 8006066:	6853      	ldr	r3, [r2, #4]
 8006068:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800606c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006070:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006074:	6053      	str	r3, [r2, #4]
}
 8006076:	b002      	add	sp, #8
 8006078:	4770      	bx	lr
	...

0800607c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800607c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800607e:	b92b      	cbnz	r3, 800608c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006080:	2301      	movs	r3, #1
 8006082:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006086:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800608a:	4770      	bx	lr
{
 800608c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800608e:	6803      	ldr	r3, [r0, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006096:	6899      	ldr	r1, [r3, #8]
 8006098:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800609a:	4d09      	ldr	r5, [pc, #36]	; (80060c0 <UARTEx_SetNbDataToProcess+0x44>)
 800609c:	5c6b      	ldrb	r3, [r5, r1]
 800609e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060a0:	4c08      	ldr	r4, [pc, #32]	; (80060c4 <UARTEx_SetNbDataToProcess+0x48>)
 80060a2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060a4:	fb93 f3f1 	sdiv	r3, r3, r1
 80060a8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060ac:	5cab      	ldrb	r3, [r5, r2]
 80060ae:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060b0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80060b6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80060ba:	bc30      	pop	{r4, r5}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	0801175c 	.word	0x0801175c
 80060c4:	08011754 	.word	0x08011754

080060c8 <HAL_UARTEx_WakeupCallback>:
}
 80060c8:	4770      	bx	lr

080060ca <HAL_UARTEx_RxFifoFullCallback>:
}
 80060ca:	4770      	bx	lr

080060cc <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80060cc:	4770      	bx	lr

080060ce <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80060ce:	b510      	push	{r4, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	ab04      	add	r3, sp, #16
 80060d4:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80060d8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d035      	beq.n	800614c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80060e0:	4604      	mov	r4, r0
 80060e2:	2301      	movs	r3, #1
 80060e4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80060e8:	2324      	movs	r3, #36	; 0x24
 80060ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80060ee:	6802      	ldr	r2, [r0, #0]
 80060f0:	6813      	ldr	r3, [r2, #0]
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80060f8:	6801      	ldr	r1, [r0, #0]
 80060fa:	688b      	ldr	r3, [r1, #8]
 80060fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006100:	9a02      	ldr	r2, [sp, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006106:	b1aa      	cbz	r2, 8006134 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	6813      	ldr	r3, [r2, #0]
 800610c:	f043 0301 	orr.w	r3, r3, #1
 8006110:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006112:	f7fb f9eb 	bl	80014ec <HAL_GetTick>
 8006116:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006118:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800611c:	9200      	str	r2, [sp, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fdf6 	bl	8005d16 <UART_WaitOnFlagUntilTimeout>
 800612a:	b948      	cbnz	r0, 8006140 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800612c:	2320      	movs	r3, #32
 800612e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006132:	e006      	b.n	8006142 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006134:	ab04      	add	r3, sp, #16
 8006136:	e913 0006 	ldmdb	r3, {r1, r2}
 800613a:	f7ff ff87 	bl	800604c <UARTEx_Wakeup_AddressConfig>
 800613e:	e7e3      	b.n	8006108 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006140:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006142:	2300      	movs	r3, #0
 8006144:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006148:	b004      	add	sp, #16
 800614a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800614c:	2002      	movs	r0, #2
 800614e:	e7fb      	b.n	8006148 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006150 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006150:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006154:	2b01      	cmp	r3, #1
 8006156:	d010      	beq.n	800617a <HAL_UARTEx_EnableStopMode+0x2a>
 8006158:	2301      	movs	r3, #1
 800615a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800615e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	e852 3f00 	ldrex	r3, [r2]
 8006164:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	e842 3100 	strex	r1, r3, [r2]
 800616c:	2900      	cmp	r1, #0
 800616e:	d1f6      	bne.n	800615e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006170:	2300      	movs	r3, #0
 8006172:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006176:	4618      	mov	r0, r3
 8006178:	4770      	bx	lr
  __HAL_LOCK(huart);
 800617a:	2002      	movs	r0, #2
}
 800617c:	4770      	bx	lr

0800617e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800617e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006182:	2b01      	cmp	r3, #1
 8006184:	d01d      	beq.n	80061c2 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006186:	b510      	push	{r4, lr}
 8006188:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800618a:	2301      	movs	r3, #1
 800618c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006190:	2324      	movs	r3, #36	; 0x24
 8006192:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006196:	6802      	ldr	r2, [r0, #0]
 8006198:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800619a:	6811      	ldr	r1, [r2, #0]
 800619c:	f021 0101 	bic.w	r1, r1, #1
 80061a0:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80061a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80061aa:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ac:	6802      	ldr	r2, [r0, #0]
 80061ae:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 80061b0:	f7ff ff64 	bl	800607c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80061b4:	2320      	movs	r3, #32
 80061b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80061ba:	2000      	movs	r0, #0
 80061bc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80061c0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80061c2:	2002      	movs	r0, #2
}
 80061c4:	4770      	bx	lr

080061c6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80061c6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80061c8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d01d      	beq.n	800620c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80061d0:	4604      	mov	r4, r0
 80061d2:	2301      	movs	r3, #1
 80061d4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	2324      	movs	r3, #36	; 0x24
 80061da:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061de:	6803      	ldr	r3, [r0, #0]
 80061e0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ea:	6802      	ldr	r2, [r0, #0]
 80061ec:	6893      	ldr	r3, [r2, #8]
 80061ee:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80061f2:	4319      	orrs	r1, r3
 80061f4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80061f6:	f7ff ff41 	bl	800607c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80061fe:	2320      	movs	r3, #32
 8006200:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006204:	2000      	movs	r0, #0
 8006206:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800620a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800620c:	2002      	movs	r0, #2
 800620e:	e7fc      	b.n	800620a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006210 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006210:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006212:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006216:	2b01      	cmp	r3, #1
 8006218:	d01d      	beq.n	8006256 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800621a:	4604      	mov	r4, r0
 800621c:	2301      	movs	r3, #1
 800621e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006222:	2324      	movs	r3, #36	; 0x24
 8006224:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006228:	6803      	ldr	r3, [r0, #0]
 800622a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006234:	6802      	ldr	r2, [r0, #0]
 8006236:	6893      	ldr	r3, [r2, #8]
 8006238:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800623c:	4319      	orrs	r1, r3
 800623e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006240:	f7ff ff1c 	bl	800607c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006248:	2320      	movs	r3, #32
 800624a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800624e:	2000      	movs	r0, #0
 8006250:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006254:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006256:	2002      	movs	r0, #2
 8006258:	e7fc      	b.n	8006254 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800625c <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800625c:	2804      	cmp	r0, #4
 800625e:	d807      	bhi.n	8006270 <LmHandlerPackageIsInitialized+0x14>
{
 8006260:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <LmHandlerPackageIsInitialized+0x1c>)
 8006264:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	b11b      	cbz	r3, 8006274 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800626c:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800626e:	bd08      	pop	{r3, pc}
        return false;
 8006270:	2000      	movs	r0, #0
}
 8006272:	4770      	bx	lr
        return false;
 8006274:	2000      	movs	r0, #0
 8006276:	e7fa      	b.n	800626e <LmHandlerPackageIsInitialized+0x12>
 8006278:	20000360 	.word	0x20000360

0800627c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	4605      	mov	r5, r0
 8006280:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006282:	2400      	movs	r4, #0
 8006284:	e018      	b.n	80062b8 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	b1a2      	cbz	r2, 80062b4 <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800628e:	429a      	cmp	r2, r3
 8006290:	d005      	beq.n	800629e <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006292:	b97c      	cbnz	r4, 80062b4 <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006294:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <LmHandlerPackagesNotify+0x68>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4798      	blx	r3
 800629c:	b150      	cbz	r0, 80062b4 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <LmHandlerPackagesNotify+0x68>)
 80062a0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	4638      	mov	r0, r7
 80062a8:	4798      	blx	r3
 80062aa:	e003      	b.n	80062b4 <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	b10b      	cbz	r3, 80062b4 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 80062b0:	4638      	mov	r0, r7
 80062b2:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80062b4:	3401      	adds	r4, #1
 80062b6:	b264      	sxtb	r4, r4
 80062b8:	2c04      	cmp	r4, #4
 80062ba:	dc11      	bgt.n	80062e0 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 80062bc:	4626      	mov	r6, r4
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <LmHandlerPackagesNotify+0x68>)
 80062c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f5      	beq.n	80062b4 <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 80062c8:	2d01      	cmp	r5, #1
 80062ca:	d0dc      	beq.n	8006286 <LmHandlerPackagesNotify+0xa>
 80062cc:	2d02      	cmp	r5, #2
 80062ce:	d0ed      	beq.n	80062ac <LmHandlerPackagesNotify+0x30>
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d1ef      	bne.n	80062b4 <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0ec      	beq.n	80062b4 <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 80062da:	4638      	mov	r0, r7
 80062dc:	4798      	blx	r3
 80062de:	e7e9      	b.n	80062b4 <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 80062e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000360 	.word	0x20000360

080062e8 <McpsConfirm>:
{
 80062e8:	b510      	push	{r4, lr}
 80062ea:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80062ec:	480c      	ldr	r0, [pc, #48]	; (8006320 <McpsConfirm+0x38>)
 80062ee:	2301      	movs	r3, #1
 80062f0:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 80062f2:	7863      	ldrb	r3, [r4, #1]
 80062f4:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80062f6:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80062fa:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80062fc:	68e3      	ldr	r3, [r4, #12]
 80062fe:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006300:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8006304:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800630a:	7923      	ldrb	r3, [r4, #4]
 800630c:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800630e:	4b05      	ldr	r3, [pc, #20]	; (8006324 <McpsConfirm+0x3c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006316:	4621      	mov	r1, r4
 8006318:	2000      	movs	r0, #0
 800631a:	f7ff ffaf 	bl	800627c <LmHandlerPackagesNotify>
}
 800631e:	bd10      	pop	{r4, pc}
 8006320:	200003a8 	.word	0x200003a8
 8006324:	2000035c 	.word	0x2000035c

08006328 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8006328:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800632a:	2400      	movs	r4, #0
 800632c:	e001      	b.n	8006332 <LmHandlerPackagesProcess+0xa>
 800632e:	3401      	adds	r4, #1
 8006330:	b264      	sxtb	r4, r4
 8006332:	2c04      	cmp	r4, #4
 8006334:	dc12      	bgt.n	800635c <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006336:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <LmHandlerPackagesProcess+0x38>)
 8006338:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f6      	beq.n	800632e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006340:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f3      	beq.n	800632e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006346:	b2e0      	uxtb	r0, r4
 8006348:	f7ff ff88 	bl	800625c <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800634c:	2800      	cmp	r0, #0
 800634e:	d0ee      	beq.n	800632e <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <LmHandlerPackagesProcess+0x38>)
 8006352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4798      	blx	r3
 800635a:	e7e8      	b.n	800632e <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800635c:	bd38      	pop	{r3, r4, r5, pc}
 800635e:	bf00      	nop
 8006360:	20000360 	.word	0x20000360

08006364 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8006364:	b500      	push	{lr}
 8006366:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <DisplayClassUpdate+0x1c>)
 800636a:	5c1b      	ldrb	r3, [r3, r0]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4b05      	ldr	r3, [pc, #20]	; (8006384 <DisplayClassUpdate+0x20>)
 8006370:	2200      	movs	r2, #0
 8006372:	4611      	mov	r1, r2
 8006374:	2002      	movs	r0, #2
 8006376:	f00a f943 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 800637a:	b003      	add	sp, #12
 800637c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006380:	08011780 	.word	0x08011780
 8006384:	08011764 	.word	0x08011764

08006388 <LmHandlerSetSystemMaxRxError>:
{
 8006388:	b500      	push	{lr}
 800638a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800638c:	2322      	movs	r3, #34	; 0x22
 800638e:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8006392:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006394:	a801      	add	r0, sp, #4
 8006396:	f003 fa6b 	bl	8009870 <LoRaMacMibSetRequestConfirm>
 800639a:	b910      	cbnz	r0, 80063a2 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800639c:	b00b      	add	sp, #44	; 0x2c
 800639e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	e7f9      	b.n	800639c <LmHandlerSetSystemMaxRxError+0x14>

080063a8 <LmHandlerDeviceTimeReq>:
{
 80063a8:	b500      	push	{lr}
 80063aa:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80063ac:	230a      	movs	r3, #10
 80063ae:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80063b2:	a801      	add	r0, sp, #4
 80063b4:	f003 fcd4 	bl	8009d60 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 80063b8:	b910      	cbnz	r0, 80063c0 <LmHandlerDeviceTimeReq+0x18>
}
 80063ba:	b007      	add	sp, #28
 80063bc:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	e7f9      	b.n	80063ba <LmHandlerDeviceTimeReq+0x12>
	...

080063c8 <LmHandlerConfigure>:
{
 80063c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ca:	b095      	sub	sp, #84	; 0x54
 80063cc:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80063ce:	4c63      	ldr	r4, [pc, #396]	; (800655c <LmHandlerConfigure+0x194>)
 80063d0:	2210      	movs	r2, #16
 80063d2:	4620      	mov	r0, r4
 80063d4:	f00a fa28 	bl	8010828 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 80063d8:	f7fb fdbc 	bl	8001f54 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80063dc:	7822      	ldrb	r2, [r4, #0]
 80063de:	2301      	movs	r3, #1
 80063e0:	4093      	lsls	r3, r2
 80063e2:	6841      	ldr	r1, [r0, #4]
 80063e4:	420b      	tst	r3, r1
 80063e6:	f000 80aa 	beq.w	800653e <LmHandlerConfigure+0x176>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80063ea:	495d      	ldr	r1, [pc, #372]	; (8006560 <LmHandlerConfigure+0x198>)
 80063ec:	485d      	ldr	r0, [pc, #372]	; (8006564 <LmHandlerConfigure+0x19c>)
 80063ee:	f002 feef 	bl	80091d0 <LoRaMacInitialization>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f040 80ae 	bne.w	8006554 <LmHandlerConfigure+0x18c>
    nbNvmData = NvmDataMgmtRestore( );
 80063f8:	f004 fead 	bl	800b156 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f000 80a5 	beq.w	800654c <LmHandlerConfigure+0x184>
        CtxRestoreDone = true;
 8006402:	4b59      	ldr	r3, [pc, #356]	; (8006568 <LmHandlerConfigure+0x1a0>)
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8006408:	2502      	movs	r5, #2
 800640a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 800640e:	a80b      	add	r0, sp, #44	; 0x2c
 8006410:	f003 f916 	bl	8009640 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8006414:	4c55      	ldr	r4, [pc, #340]	; (800656c <LmHandlerConfigure+0x1a4>)
 8006416:	2208      	movs	r2, #8
 8006418:	990c      	ldr	r1, [sp, #48]	; 0x30
 800641a:	4620      	mov	r0, r4
 800641c:	f007 ff67 	bl	800e2ee <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006420:	2303      	movs	r3, #3
 8006422:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006426:	a80b      	add	r0, sp, #44	; 0x2c
 8006428:	f003 f90a 	bl	8009640 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800642c:	2208      	movs	r2, #8
 800642e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006430:	18a0      	adds	r0, r4, r2
 8006432:	f007 ff5c 	bl	800e2ee <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006436:	4b4e      	ldr	r3, [pc, #312]	; (8006570 <LmHandlerConfigure+0x1a8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4798      	blx	r3
 800643e:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 8006440:	2206      	movs	r2, #6
 8006442:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8006446:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006448:	a80b      	add	r0, sp, #44	; 0x2c
 800644a:	f003 fa11 	bl	8009870 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800644e:	7823      	ldrb	r3, [r4, #0]
 8006450:	7862      	ldrb	r2, [r4, #1]
 8006452:	78a1      	ldrb	r1, [r4, #2]
 8006454:	78e0      	ldrb	r0, [r4, #3]
 8006456:	7926      	ldrb	r6, [r4, #4]
 8006458:	7967      	ldrb	r7, [r4, #5]
 800645a:	f894 c006 	ldrb.w	ip, [r4, #6]
 800645e:	f894 e007 	ldrb.w	lr, [r4, #7]
 8006462:	f8cd e01c 	str.w	lr, [sp, #28]
 8006466:	f8cd c018 	str.w	ip, [sp, #24]
 800646a:	9705      	str	r7, [sp, #20]
 800646c:	9604      	str	r6, [sp, #16]
 800646e:	9003      	str	r0, [sp, #12]
 8006470:	9102      	str	r1, [sp, #8]
 8006472:	9201      	str	r2, [sp, #4]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	4b3f      	ldr	r3, [pc, #252]	; (8006574 <LmHandlerConfigure+0x1ac>)
 8006478:	2200      	movs	r2, #0
 800647a:	4611      	mov	r1, r2
 800647c:	4628      	mov	r0, r5
 800647e:	f00a f8bf 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006482:	7a23      	ldrb	r3, [r4, #8]
 8006484:	7a62      	ldrb	r2, [r4, #9]
 8006486:	7aa1      	ldrb	r1, [r4, #10]
 8006488:	7ae0      	ldrb	r0, [r4, #11]
 800648a:	7b26      	ldrb	r6, [r4, #12]
 800648c:	7b67      	ldrb	r7, [r4, #13]
 800648e:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8006492:	f894 e00f 	ldrb.w	lr, [r4, #15]
 8006496:	f8cd e01c 	str.w	lr, [sp, #28]
 800649a:	f8cd c018 	str.w	ip, [sp, #24]
 800649e:	9705      	str	r7, [sp, #20]
 80064a0:	9604      	str	r6, [sp, #16]
 80064a2:	9003      	str	r0, [sp, #12]
 80064a4:	9102      	str	r1, [sp, #8]
 80064a6:	9201      	str	r2, [sp, #4]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4b33      	ldr	r3, [pc, #204]	; (8006578 <LmHandlerConfigure+0x1b0>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	4611      	mov	r1, r2
 80064b0:	4628      	mov	r0, r5
 80064b2:	f00a f8a5 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 80064b6:	7de3      	ldrb	r3, [r4, #23]
 80064b8:	7da2      	ldrb	r2, [r4, #22]
 80064ba:	7d61      	ldrb	r1, [r4, #21]
 80064bc:	7d20      	ldrb	r0, [r4, #20]
 80064be:	9003      	str	r0, [sp, #12]
 80064c0:	9102      	str	r1, [sp, #8]
 80064c2:	9201      	str	r2, [sp, #4]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	4b2d      	ldr	r3, [pc, #180]	; (800657c <LmHandlerConfigure+0x1b4>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	4611      	mov	r1, r2
 80064cc:	4628      	mov	r0, r5
 80064ce:	f00a f897 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80064d2:	260f      	movs	r6, #15
 80064d4:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80064d8:	2301      	movs	r3, #1
 80064da:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80064de:	a80b      	add	r0, sp, #44	; 0x2c
 80064e0:	f003 f9c6 	bl	8009870 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 80064e4:	2305      	movs	r3, #5
 80064e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80064ea:	2400      	movs	r4, #0
 80064ec:	940c      	str	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80064ee:	a80b      	add	r0, sp, #44	; 0x2c
 80064f0:	f003 f9be 	bl	8009870 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80064f4:	2310      	movs	r3, #16
 80064f6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80064fa:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80064fe:	a80b      	add	r0, sp, #44	; 0x2c
 8006500:	f003 f9b6 	bl	8009870 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8006504:	2304      	movs	r3, #4
 8006506:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800650a:	4d14      	ldr	r5, [pc, #80]	; (800655c <LmHandlerConfigure+0x194>)
 800650c:	78ab      	ldrb	r3, [r5, #2]
 800650e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006512:	a80b      	add	r0, sp, #44	; 0x2c
 8006514:	f003 f9ac 	bl	8009870 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006518:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800651c:	a909      	add	r1, sp, #36	; 0x24
 800651e:	7828      	ldrb	r0, [r5, #0]
 8006520:	f004 fe25 	bl	800b16e <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006524:	1b03      	subs	r3, r0, r4
 8006526:	bf18      	it	ne
 8006528:	2301      	movne	r3, #1
 800652a:	716b      	strb	r3, [r5, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 800652c:	2014      	movs	r0, #20
 800652e:	f7ff ff2b 	bl	8006388 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8006532:	7968      	ldrb	r0, [r5, #5]
 8006534:	f003 fda4 	bl	800a080 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8006538:	4620      	mov	r0, r4
}
 800653a:	b015      	add	sp, #84	; 0x54
 800653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <LmHandlerConfigure+0x1b8>)
 8006540:	2201      	movs	r2, #1
 8006542:	2100      	movs	r1, #0
 8006544:	4608      	mov	r0, r1
 8006546:	f00a f85b 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800654a:	e7fe      	b.n	800654a <LmHandlerConfigure+0x182>
        CtxRestoreDone = false;
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <LmHandlerConfigure+0x1a0>)
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	e759      	b.n	8006408 <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	e7ef      	b.n	800653a <LmHandlerConfigure+0x172>
 800655a:	bf00      	nop
 800655c:	20000374 	.word	0x20000374
 8006560:	20000384 	.word	0x20000384
 8006564:	20000398 	.word	0x20000398
 8006568:	2000035a 	.word	0x2000035a
 800656c:	20000054 	.word	0x20000054
 8006570:	2000035c 	.word	0x2000035c
 8006574:	080117d0 	.word	0x080117d0
 8006578:	0801180c 	.word	0x0801180c
 800657c:	08011848 	.word	0x08011848
 8006580:	08011784 	.word	0x08011784

08006584 <LmHandlerProcess>:
{
 8006584:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8006586:	f002 fdef 	bl	8009168 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800658a:	f7ff fecd 	bl	8006328 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 800658e:	f004 fde0 	bl	800b152 <NvmDataMgmtStore>
}
 8006592:	bd08      	pop	{r3, pc}

08006594 <LmHandlerJoinStatus>:
{
 8006594:	b500      	push	{lr}
 8006596:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006598:	2301      	movs	r3, #1
 800659a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800659e:	a801      	add	r0, sp, #4
 80065a0:	f003 f84e 	bl	8009640 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80065a4:	b920      	cbnz	r0, 80065b0 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80065a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80065aa:	b110      	cbz	r0, 80065b2 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80065ac:	2001      	movs	r0, #1
 80065ae:	e000      	b.n	80065b2 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80065b0:	2000      	movs	r0, #0
}
 80065b2:	b00b      	add	sp, #44	; 0x2c
 80065b4:	f85d fb04 	ldr.w	pc, [sp], #4

080065b8 <LmHandlerRequestClass>:
{
 80065b8:	b510      	push	{r4, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 80065be:	f002 fdc1 	bl	8009144 <LoRaMacIsBusy>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d13d      	bne.n	8006642 <LmHandlerRequestClass+0x8a>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80065c6:	f7ff ffe5 	bl	8006594 <LmHandlerJoinStatus>
 80065ca:	2801      	cmp	r0, #1
 80065cc:	d13c      	bne.n	8006648 <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 80065ce:	2300      	movs	r3, #0
 80065d0:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80065d4:	a801      	add	r0, sp, #4
 80065d6:	f003 f833 	bl	8009640 <LoRaMacMibGetRequestConfirm>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d137      	bne.n	800664e <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 80065de:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	d036      	beq.n	8006654 <LmHandlerRequestClass+0x9c>
        switch( newClass )
 80065e6:	2c01      	cmp	r4, #1
 80065e8:	d036      	beq.n	8006658 <LmHandlerRequestClass+0xa0>
 80065ea:	2c02      	cmp	r4, #2
 80065ec:	d017      	beq.n	800661e <LmHandlerRequestClass+0x66>
 80065ee:	b114      	cbz	r4, 80065f6 <LmHandlerRequestClass+0x3e>
 80065f0:	2000      	movs	r0, #0
}
 80065f2:	b00a      	add	sp, #40	; 0x28
 80065f4:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80065f6:	b90b      	cbnz	r3, 80065fc <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80065f8:	2000      	movs	r0, #0
 80065fa:	e7fa      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 80065fc:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006600:	a801      	add	r0, sp, #4
 8006602:	f003 f935 	bl	8009870 <LoRaMacMibSetRequestConfirm>
 8006606:	bb50      	cbnz	r0, 800665e <LmHandlerRequestClass+0xa6>
                        DisplayClassUpdate(newClass);
 8006608:	4620      	mov	r0, r4
 800660a:	f7ff feab 	bl	8006364 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <LmHandlerRequestClass+0xc0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	b333      	cbz	r3, 8006664 <LmHandlerRequestClass+0xac>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006616:	4620      	mov	r0, r4
 8006618:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800661a:	2000      	movs	r0, #0
 800661c:	e7e9      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 800661e:	bb1b      	cbnz	r3, 8006668 <LmHandlerRequestClass+0xb0>
                    mibReq.Param.Class = newClass;
 8006620:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006624:	a801      	add	r0, sp, #4
 8006626:	f003 f923 	bl	8009870 <LoRaMacMibSetRequestConfirm>
 800662a:	bb00      	cbnz	r0, 800666e <LmHandlerRequestClass+0xb6>
                        DisplayClassUpdate(newClass);
 800662c:	4620      	mov	r0, r4
 800662e:	f7ff fe99 	bl	8006364 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <LmHandlerRequestClass+0xc0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	b1e3      	cbz	r3, 8006674 <LmHandlerRequestClass+0xbc>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800663a:	4620      	mov	r0, r4
 800663c:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800663e:	2000      	movs	r0, #0
 8006640:	e7d7      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006642:	f06f 0001 	mvn.w	r0, #1
 8006646:	e7d4      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006648:	f06f 0002 	mvn.w	r0, #2
 800664c:	e7d1      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 800664e:	f04f 30ff 	mov.w	r0, #4294967295
 8006652:	e7ce      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006654:	2000      	movs	r0, #0
 8006656:	e7cc      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	e7c9      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800665e:	f04f 30ff 	mov.w	r0, #4294967295
 8006662:	e7c6      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006664:	2000      	movs	r0, #0
 8006666:	e7c4      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	e7c1      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800666e:	f04f 30ff 	mov.w	r0, #4294967295
 8006672:	e7be      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006674:	2000      	movs	r0, #0
 8006676:	e7bc      	b.n	80065f2 <LmHandlerRequestClass+0x3a>
 8006678:	2000035c 	.word	0x2000035c

0800667c <LmHandlerJoin>:
{
 800667c:	b500      	push	{lr}
 800667e:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 8006680:	2802      	cmp	r0, #2
 8006682:	d021      	beq.n	80066c8 <LmHandlerJoin+0x4c>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006684:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <LmHandlerJoin+0x80>)
 8006686:	2201      	movs	r2, #1
 8006688:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <LmHandlerJoin+0x84>)
 800668c:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006690:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006692:	2200      	movs	r2, #0
 8006694:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 8006696:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <LmHandlerJoin+0x88>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b32b      	cbz	r3, 80066e8 <LmHandlerJoin+0x6c>
        LoRaMacStart();
 800669c:	f002 ff62 	bl	8009564 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80066a6:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80066aa:	a805      	add	r0, sp, #20
 80066ac:	f003 f8e0 	bl	8009870 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80066b0:	4b15      	ldr	r3, [pc, #84]	; (8006708 <LmHandlerJoin+0x8c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4811      	ldr	r0, [pc, #68]	; (80066fc <LmHandlerJoin+0x80>)
 80066b8:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <LmHandlerJoin+0x84>)
 80066bc:	7858      	ldrb	r0, [r3, #1]
 80066be:	f7ff ff7b 	bl	80065b8 <LmHandlerRequestClass>
}
 80066c2:	b00f      	add	sp, #60	; 0x3c
 80066c4:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <LmHandlerJoin+0x80>)
 80066ca:	2202      	movs	r2, #2
 80066cc:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 80066ce:	f002 ff49 	bl	8009564 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80066d8:	4b09      	ldr	r3, [pc, #36]	; (8006700 <LmHandlerJoin+0x84>)
 80066da:	78db      	ldrb	r3, [r3, #3]
 80066dc:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 80066e0:	4668      	mov	r0, sp
 80066e2:	f003 fb3d 	bl	8009d60 <LoRaMacMlmeRequest>
 80066e6:	e7ec      	b.n	80066c2 <LmHandlerJoin+0x46>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80066e8:	2327      	movs	r3, #39	; 0x27
 80066ea:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <LmHandlerJoin+0x90>)
 80066f0:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80066f2:	a805      	add	r0, sp, #20
 80066f4:	f003 f8bc 	bl	8009870 <LoRaMacMibSetRequestConfirm>
 80066f8:	e7d0      	b.n	800669c <LmHandlerJoin+0x20>
 80066fa:	bf00      	nop
 80066fc:	2000006c 	.word	0x2000006c
 8006700:	20000374 	.word	0x20000374
 8006704:	2000035a 	.word	0x2000035a
 8006708:	2000035c 	.word	0x2000035c
 800670c:	01000300 	.word	0x01000300

08006710 <LmHandlerSend>:
{
 8006710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006712:	b087      	sub	sp, #28
 8006714:	4604      	mov	r4, r0
 8006716:	460e      	mov	r6, r1
 8006718:	4615      	mov	r5, r2
 800671a:	461f      	mov	r7, r3
    if (LoRaMacIsBusy() == true)
 800671c:	f002 fd12 	bl	8009144 <LoRaMacIsBusy>
 8006720:	2800      	cmp	r0, #0
 8006722:	d16c      	bne.n	80067fe <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8006724:	f7ff ff36 	bl	8006594 <LmHandlerJoinStatus>
 8006728:	2801      	cmp	r0, #1
 800672a:	d13d      	bne.n	80067a8 <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800672c:	4b39      	ldr	r3, [pc, #228]	; (8006814 <LmHandlerSend+0x104>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4798      	blx	r3
 8006734:	b138      	cbz	r0, 8006746 <LmHandlerSend+0x36>
 8006736:	7823      	ldrb	r3, [r4, #0]
 8006738:	4a36      	ldr	r2, [pc, #216]	; (8006814 <LmHandlerSend+0x104>)
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	4293      	cmp	r3, r2
 8006740:	d001      	beq.n	8006746 <LmHandlerSend+0x36>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d15e      	bne.n	8006804 <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8006746:	4b34      	ldr	r3, [pc, #208]	; (8006818 <LmHandlerSend+0x108>)
 8006748:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800674c:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006750:	4669      	mov	r1, sp
 8006752:	7860      	ldrb	r0, [r4, #1]
 8006754:	f002 ff0e 	bl	8009574 <LoRaMacQueryTxPossible>
 8006758:	b368      	cbz	r0, 80067b6 <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800675a:	2200      	movs	r2, #0
 800675c:	4b2f      	ldr	r3, [pc, #188]	; (800681c <LmHandlerSend+0x10c>)
 800675e:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006760:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8006764:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8006766:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 800676a:	4a2c      	ldr	r2, [pc, #176]	; (800681c <LmHandlerSend+0x10c>)
 800676c:	f102 060c 	add.w	r6, r2, #12
 8006770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006774:	e886 0003 	stmia.w	r6, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006778:	4b27      	ldr	r3, [pc, #156]	; (8006818 <LmHandlerSend+0x108>)
 800677a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800677e:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8006780:	4639      	mov	r1, r7
 8006782:	a801      	add	r0, sp, #4
 8006784:	f003 fbc2 	bl	8009f0c <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8006788:	b10d      	cbz	r5, 800678e <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800678a:	9b05      	ldr	r3, [sp, #20]
 800678c:	602b      	str	r3, [r5, #0]
    switch (status)
 800678e:	2811      	cmp	r0, #17
 8006790:	d832      	bhi.n	80067f8 <LmHandlerSend+0xe8>
 8006792:	e8df f000 	tbb	[pc, r0]
 8006796:	3a26      	.short	0x3a26
 8006798:	31313131 	.word	0x31313131
 800679c:	31312831 	.word	0x31312831
 80067a0:	31312e31 	.word	0x31312e31
 80067a4:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 80067a8:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <LmHandlerSend+0x110>)
 80067aa:	7898      	ldrb	r0, [r3, #2]
 80067ac:	f7ff ff66 	bl	800667c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80067b0:	f06f 0002 	mvn.w	r0, #2
 80067b4:	e02b      	b.n	800680e <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 80067b6:	4b19      	ldr	r3, [pc, #100]	; (800681c <LmHandlerSend+0x10c>)
 80067b8:	709e      	strb	r6, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80067ba:	7823      	ldrb	r3, [r4, #0]
 80067bc:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80067c0:	7863      	ldrb	r3, [r4, #1]
 80067c2:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80067c6:	6863      	ldr	r3, [r4, #4]
 80067c8:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 80067ca:	b91e      	cbnz	r6, 80067d4 <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 80067cc:	2300      	movs	r3, #0
 80067ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80067d2:	e7ca      	b.n	800676a <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80067da:	2308      	movs	r3, #8
 80067dc:	f88d 3013 	strb.w	r3, [sp, #19]
 80067e0:	e7c3      	b.n	800676a <LmHandlerSend+0x5a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80067e2:	2000      	movs	r0, #0
 80067e4:	e013      	b.n	800680e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80067e6:	f06f 0002 	mvn.w	r0, #2
            break;
 80067ea:	e010      	b.n	800680e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80067ec:	f06f 0004 	mvn.w	r0, #4
            break;
 80067f0:	e00d      	b.n	800680e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80067f2:	f06f 0005 	mvn.w	r0, #5
            break;
 80067f6:	e00a      	b.n	800680e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 80067fc:	e007      	b.n	800680e <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80067fe:	f06f 0001 	mvn.w	r0, #1
 8006802:	e004      	b.n	800680e <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8006804:	f06f 0003 	mvn.w	r0, #3
 8006808:	e001      	b.n	800680e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800680a:	f06f 0001 	mvn.w	r0, #1
}
 800680e:	b007      	add	sp, #28
 8006810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006812:	bf00      	nop
 8006814:	20000360 	.word	0x20000360
 8006818:	20000374 	.word	0x20000374
 800681c:	200003a8 	.word	0x200003a8
 8006820:	2000006c 	.word	0x2000006c

08006824 <MlmeIndication>:
{
 8006824:	b510      	push	{r4, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <MlmeIndication+0x64>)
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006830:	7842      	ldrb	r2, [r0, #1]
 8006832:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 8006834:	f9b1 0000 	ldrsh.w	r0, [r1]
 8006838:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800683a:	f991 0002 	ldrsb.w	r0, [r1, #2]
 800683e:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006840:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8006844:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8006846:	2a0e      	cmp	r2, #14
 8006848:	d005      	beq.n	8006856 <MlmeIndication+0x32>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800684a:	4b10      	ldr	r3, [pc, #64]	; (800688c <MlmeIndication+0x68>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	490d      	ldr	r1, [pc, #52]	; (8006888 <MlmeIndication+0x64>)
 8006852:	2000      	movs	r0, #0
 8006854:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 8006856:	7823      	ldrb	r3, [r4, #0]
 8006858:	2b07      	cmp	r3, #7
 800685a:	d001      	beq.n	8006860 <MlmeIndication+0x3c>
}
 800685c:	b002      	add	sp, #8
 800685e:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 8006860:	2300      	movs	r3, #0
 8006862:	f88d 3000 	strb.w	r3, [sp]
 8006866:	f88d 3001 	strb.w	r3, [sp, #1]
 800686a:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800686c:	4b08      	ldr	r3, [pc, #32]	; (8006890 <MlmeIndication+0x6c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	4798      	blx	r3
 8006874:	2800      	cmp	r0, #0
 8006876:	d1f1      	bne.n	800685c <MlmeIndication+0x38>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8006878:	2301      	movs	r3, #1
 800687a:	2200      	movs	r2, #0
 800687c:	4611      	mov	r1, r2
 800687e:	4668      	mov	r0, sp
 8006880:	f7ff ff46 	bl	8006710 <LmHandlerSend>
}
 8006884:	e7ea      	b.n	800685c <MlmeIndication+0x38>
 8006886:	bf00      	nop
 8006888:	2000007c 	.word	0x2000007c
 800688c:	2000035c 	.word	0x2000035c
 8006890:	20000360 	.word	0x20000360

08006894 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8006894:	b170      	cbz	r0, 80068b4 <LmHandlerGetCurrentClass+0x20>
{
 8006896:	b510      	push	{r4, lr}
 8006898:	b08a      	sub	sp, #40	; 0x28
 800689a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800689c:	2300      	movs	r3, #0
 800689e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80068a2:	a801      	add	r0, sp, #4
 80068a4:	f002 fecc 	bl	8009640 <LoRaMacMibGetRequestConfirm>
 80068a8:	b938      	cbnz	r0, 80068ba <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 80068aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80068ae:	7023      	strb	r3, [r4, #0]
}
 80068b0:	b00a      	add	sp, #40	; 0x28
 80068b2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068b8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	e7f7      	b.n	80068b0 <LmHandlerGetCurrentClass+0x1c>

080068c0 <McpsIndication>:
{
 80068c0:	b530      	push	{r4, r5, lr}
 80068c2:	b087      	sub	sp, #28
 80068c4:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 80068c6:	2200      	movs	r2, #0
 80068c8:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 80068cc:	4922      	ldr	r1, [pc, #136]	; (8006958 <McpsIndication+0x98>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 80068d2:	7842      	ldrb	r2, [r0, #1]
 80068d4:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80068d6:	bb62      	cbnz	r2, 8006932 <McpsIndication+0x72>
 80068d8:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80068da:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80068de:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = RxStatus->Rssi;
 80068e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80068e4:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = RxStatus->Snr;
 80068e6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80068ea:	710a      	strb	r2, [r1, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80068ec:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80068f0:	730b      	strb	r3, [r1, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80068f2:	6903      	ldr	r3, [r0, #16]
 80068f4:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 80068f6:	78c3      	ldrb	r3, [r0, #3]
 80068f8:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 80068fc:	7b03      	ldrb	r3, [r0, #12]
 80068fe:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8006902:	6883      	ldr	r3, [r0, #8]
 8006904:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006906:	4d15      	ldr	r5, [pc, #84]	; (800695c <McpsIndication+0x9c>)
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	a804      	add	r0, sp, #16
 800690e:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	b113      	cbz	r3, 800691c <McpsIndication+0x5c>
 8006916:	7e22      	ldrb	r2, [r4, #24]
 8006918:	b102      	cbz	r2, 800691c <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800691a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800691c:	4621      	mov	r1, r4
 800691e:	2001      	movs	r0, #1
 8006920:	f7ff fcac 	bl	800627c <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 8006924:	f10d 000f 	add.w	r0, sp, #15
 8006928:	f7ff ffb4 	bl	8006894 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800692c:	7963      	ldrb	r3, [r4, #5]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d001      	beq.n	8006936 <McpsIndication+0x76>
}
 8006932:	b007      	add	sp, #28
 8006934:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8006936:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f9      	bne.n	8006932 <McpsIndication+0x72>
        LmHandlerAppData_t appData =
 800693e:	2100      	movs	r1, #0
 8006940:	f88d 1004 	strb.w	r1, [sp, #4]
 8006944:	f88d 1005 	strb.w	r1, [sp, #5]
 8006948:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800694a:	2301      	movs	r3, #1
 800694c:	460a      	mov	r2, r1
 800694e:	a801      	add	r0, sp, #4
 8006950:	f7ff fede 	bl	8006710 <LmHandlerSend>
 8006954:	e7ed      	b.n	8006932 <McpsIndication+0x72>
 8006956:	bf00      	nop
 8006958:	2000007c 	.word	0x2000007c
 800695c:	2000035c 	.word	0x2000035c

08006960 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8006960:	b180      	cbz	r0, 8006984 <LmHandlerGetTxDatarate+0x24>
{
 8006962:	b510      	push	{r4, lr}
 8006964:	b08a      	sub	sp, #40	; 0x28
 8006966:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8006968:	231f      	movs	r3, #31
 800696a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800696e:	a801      	add	r0, sp, #4
 8006970:	f002 fe66 	bl	8009640 <LoRaMacMibGetRequestConfirm>
 8006974:	b948      	cbnz	r0, 800698a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8006976:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800697a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800697c:	4a04      	ldr	r2, [pc, #16]	; (8006990 <LmHandlerGetTxDatarate+0x30>)
 800697e:	70d3      	strb	r3, [r2, #3]
}
 8006980:	b00a      	add	sp, #40	; 0x28
 8006982:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006988:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
 800698e:	e7f7      	b.n	8006980 <LmHandlerGetTxDatarate+0x20>
 8006990:	20000374 	.word	0x20000374

08006994 <MlmeConfirm>:
{
 8006994:	b510      	push	{r4, lr}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800699a:	481d      	ldr	r0, [pc, #116]	; (8006a10 <MlmeConfirm+0x7c>)
 800699c:	2300      	movs	r3, #0
 800699e:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 80069a0:	7863      	ldrb	r3, [r4, #1]
 80069a2:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80069a4:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <MlmeConfirm+0x80>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80069ac:	4621      	mov	r1, r4
 80069ae:	2002      	movs	r0, #2
 80069b0:	f7ff fc64 	bl	800627c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80069b4:	7823      	ldrb	r3, [r4, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d003      	beq.n	80069c2 <MlmeConfirm+0x2e>
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d020      	beq.n	8006a00 <MlmeConfirm+0x6c>
}
 80069be:	b00a      	add	sp, #40	; 0x28
 80069c0:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 80069c2:	2306      	movs	r3, #6
 80069c4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80069c8:	a801      	add	r0, sp, #4
 80069ca:	f002 fe39 	bl	8009640 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80069ce:	9a02      	ldr	r2, [sp, #8]
 80069d0:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <MlmeConfirm+0x84>)
 80069d2:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80069d4:	4811      	ldr	r0, [pc, #68]	; (8006a1c <MlmeConfirm+0x88>)
 80069d6:	f7ff ffc3 	bl	8006960 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80069da:	7863      	ldrb	r3, [r4, #1]
 80069dc:	b143      	cbz	r3, 80069f0 <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80069de:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <MlmeConfirm+0x88>)
 80069e0:	22ff      	movs	r2, #255	; 0xff
 80069e2:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <MlmeConfirm+0x80>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	480c      	ldr	r0, [pc, #48]	; (8006a1c <MlmeConfirm+0x88>)
 80069ec:	4798      	blx	r3
        break;
 80069ee:	e7e6      	b.n	80069be <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <MlmeConfirm+0x88>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80069f6:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <MlmeConfirm+0x8c>)
 80069f8:	7858      	ldrb	r0, [r3, #1]
 80069fa:	f7ff fddd 	bl	80065b8 <LmHandlerRequestClass>
 80069fe:	e7f1      	b.n	80069e4 <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 8006a00:	4b08      	ldr	r3, [pc, #32]	; (8006a24 <MlmeConfirm+0x90>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8006a06:	7a22      	ldrb	r2, [r4, #8]
 8006a08:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8006a0a:	7a62      	ldrb	r2, [r4, #9]
 8006a0c:	73da      	strb	r2, [r3, #15]
}
 8006a0e:	e7d6      	b.n	80069be <MlmeConfirm+0x2a>
 8006a10:	200003a8 	.word	0x200003a8
 8006a14:	2000035c 	.word	0x2000035c
 8006a18:	20000054 	.word	0x20000054
 8006a1c:	2000006c 	.word	0x2000006c
 8006a20:	20000374 	.word	0x20000374
 8006a24:	2000007c 	.word	0x2000007c

08006a28 <LmHandlerPackageRegister>:
    switch( id )
 8006a28:	b9e0      	cbnz	r0, 8006a64 <LmHandlerPackageRegister+0x3c>
{
 8006a2a:	b538      	push	{r3, r4, r5, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 8006a30:	f000 fa20 	bl	8006e74 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8006a34:	b198      	cbz	r0, 8006a5e <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 8006a36:	4a0d      	ldr	r2, [pc, #52]	; (8006a6c <LmHandlerPackageRegister+0x44>)
 8006a38:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <LmHandlerPackageRegister+0x48>)
 8006a3e:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8006a40:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <LmHandlerPackageRegister+0x4c>)
 8006a42:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8006a44:	4a0c      	ldr	r2, [pc, #48]	; (8006a78 <LmHandlerPackageRegister+0x50>)
 8006a46:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8006a48:	4a0c      	ldr	r2, [pc, #48]	; (8006a7c <LmHandlerPackageRegister+0x54>)
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	6912      	ldr	r2, [r2, #16]
 8006a4e:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8006a50:	6843      	ldr	r3, [r0, #4]
 8006a52:	22f2      	movs	r2, #242	; 0xf2
 8006a54:	490a      	ldr	r1, [pc, #40]	; (8006a80 <LmHandlerPackageRegister+0x58>)
 8006a56:	4620      	mov	r0, r4
 8006a58:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8006a5a:	2000      	movs	r0, #0
}
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8006a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a62:	e7fb      	b.n	8006a5c <LmHandlerPackageRegister+0x34>
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000360 	.word	0x20000360
 8006a70:	0800667d 	.word	0x0800667d
 8006a74:	08006711 	.word	0x08006711
 8006a78:	080063a9 	.word	0x080063a9
 8006a7c:	2000035c 	.word	0x2000035c
 8006a80:	20000268 	.word	0x20000268

08006a84 <LmHandlerInit>:
{
 8006a84:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8006a86:	4b0f      	ldr	r3, [pc, #60]	; (8006ac4 <LmHandlerInit+0x40>)
 8006a88:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <LmHandlerInit+0x44>)
 8006a8c:	4a0f      	ldr	r2, [pc, #60]	; (8006acc <LmHandlerInit+0x48>)
 8006a8e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8006a90:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <LmHandlerInit+0x4c>)
 8006a92:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8006a94:	4a0f      	ldr	r2, [pc, #60]	; (8006ad4 <LmHandlerInit+0x50>)
 8006a96:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8006a98:	4a0f      	ldr	r2, [pc, #60]	; (8006ad8 <LmHandlerInit+0x54>)
 8006a9a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8006a9c:	6802      	ldr	r2, [r0, #0]
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <LmHandlerInit+0x58>)
 8006aa0:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8006aa2:	6842      	ldr	r2, [r0, #4]
 8006aa4:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8006aa6:	6882      	ldr	r2, [r0, #8]
 8006aa8:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8006aaa:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <LmHandlerInit+0x5c>)
 8006aac:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8006aae:	6902      	ldr	r2, [r0, #16]
 8006ab0:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8006ab2:	490c      	ldr	r1, [pc, #48]	; (8006ae4 <LmHandlerInit+0x60>)
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7ff ffb7 	bl	8006a28 <LmHandlerPackageRegister>
 8006aba:	b900      	cbnz	r0, 8006abe <LmHandlerInit+0x3a>
}
 8006abc:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac2:	e7fb      	b.n	8006abc <LmHandlerInit+0x38>
 8006ac4:	2000035c 	.word	0x2000035c
 8006ac8:	20000398 	.word	0x20000398
 8006acc:	080062e9 	.word	0x080062e9
 8006ad0:	080068c1 	.word	0x080068c1
 8006ad4:	08006995 	.word	0x08006995
 8006ad8:	08006825 	.word	0x08006825
 8006adc:	20000384 	.word	0x20000384
 8006ae0:	0800b151 	.word	0x0800b151
 8006ae4:	20000070 	.word	0x20000070

08006ae8 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8006ae8:	4603      	mov	r3, r0
 8006aea:	b140      	cbz	r0, 8006afe <LmhpComplianceInit+0x16>
 8006aec:	b139      	cbz	r1, 8006afe <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8006aee:	4807      	ldr	r0, [pc, #28]	; (8006b0c <LmhpComplianceInit+0x24>)
 8006af0:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <LmhpComplianceInit+0x28>)
 8006af4:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8006af6:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	4a02      	ldr	r2, [pc, #8]	; (8006b0c <LmhpComplianceInit+0x24>)
 8006b02:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8006b04:	4a02      	ldr	r2, [pc, #8]	; (8006b10 <LmhpComplianceInit+0x28>)
 8006b06:	7013      	strb	r3, [r2, #0]
    }
}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	200003ec 	.word	0x200003ec
 8006b10:	200003c0 	.word	0x200003c0

08006b14 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8006b14:	4b01      	ldr	r3, [pc, #4]	; (8006b1c <LmhpComplianceIsInitialized+0x8>)
 8006b16:	7818      	ldrb	r0, [r3, #0]
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	200003c0 	.word	0x200003c0

08006b20 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8006b20:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <LmhpComplianceIsRunning+0xc>)
 8006b22:	7818      	ldrb	r0, [r3, #0]
 8006b24:	b100      	cbz	r0, 8006b28 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8006b26:	7858      	ldrb	r0, [r3, #1]
}
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	200003c0 	.word	0x200003c0

08006b30 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 8006b30:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <LmhpComplianceOnMcpsConfirm+0x24>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b12b      	cbz	r3, 8006b42 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <LmhpComplianceOnMcpsConfirm+0x24>)
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	b113      	cbz	r3, 8006b42 <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8006b3c:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d000      	beq.n	8006b44 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8006b42:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8006b44:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0fb      	beq.n	8006b42 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8006b4a:	4a02      	ldr	r2, [pc, #8]	; (8006b54 <LmhpComplianceOnMcpsConfirm+0x24>)
 8006b4c:	8993      	ldrh	r3, [r2, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	8193      	strh	r3, [r2, #12]
 8006b52:	e7f6      	b.n	8006b42 <LmhpComplianceOnMcpsConfirm+0x12>
 8006b54:	200003c0 	.word	0x200003c0

08006b58 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8006b58:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <LmhpComplianceOnMlmeConfirm+0x24>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b12b      	cbz	r3, 8006b6a <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <LmhpComplianceOnMlmeConfirm+0x24>)
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	b113      	cbz	r3, 8006b6a <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8006b64:	7803      	ldrb	r3, [r0, #0]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d000      	beq.n	8006b6c <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8006b6a:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8006b6c:	4b03      	ldr	r3, [pc, #12]	; (8006b7c <LmhpComplianceOnMlmeConfirm+0x24>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8006b72:	7a02      	ldrb	r2, [r0, #8]
 8006b74:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006b76:	7a42      	ldrb	r2, [r0, #9]
 8006b78:	741a      	strb	r2, [r3, #16]
 8006b7a:	e7f6      	b.n	8006b6a <LmhpComplianceOnMlmeConfirm+0x12>
 8006b7c:	200003c0 	.word	0x200003c0

08006b80 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8006b80:	4770      	bx	lr
	...

08006b84 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8006b84:	4b23      	ldr	r3, [pc, #140]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03e      	beq.n	8006c0a <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8006b8c:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d03d      	beq.n	8006c10 <LmhpComplianceTxProcess+0x8c>
{
 8006b94:	b530      	push	{r4, r5, lr}
 8006b96:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 8006b98:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006b9a:	7b9b      	ldrb	r3, [r3, #14]
 8006b9c:	b313      	cbz	r3, 8006be4 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 8006b9e:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	2105      	movs	r1, #5
 8006bac:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8006bae:	7bd9      	ldrb	r1, [r3, #15]
 8006bb0:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8006bb2:	7c19      	ldrb	r1, [r3, #16]
 8006bb4:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 8006bba:	23e0      	movs	r3, #224	; 0xe0
 8006bbc:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8006bc0:	4c14      	ldr	r4, [pc, #80]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006bc2:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8006bc4:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8006bc8:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 8006bca:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8006bcc:	4812      	ldr	r0, [pc, #72]	; (8006c18 <LmhpComplianceTxProcess+0x94>)
 8006bce:	f00a f8b3 	bl	8010d38 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8006bd2:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <LmhpComplianceTxProcess+0x98>)
 8006bd4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	2200      	movs	r2, #0
 8006bda:	78e1      	ldrb	r1, [r4, #3]
 8006bdc:	4668      	mov	r0, sp
 8006bde:	47a8      	blx	r5
}
 8006be0:	b003      	add	sp, #12
 8006be2:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006be6:	789b      	ldrb	r3, [r3, #2]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d005      	beq.n	8006bf8 <LmhpComplianceTxProcess+0x74>
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d1e4      	bne.n	8006bba <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 8006bf0:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	709a      	strb	r2, [r3, #2]
            break;
 8006bf6:	e7e0      	b.n	8006bba <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <LmhpComplianceTxProcess+0x90>)
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8006bfe:	899a      	ldrh	r2, [r3, #12]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	0a11      	lsrs	r1, r2, #8
 8006c04:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8006c06:	705a      	strb	r2, [r3, #1]
            break;
 8006c08:	e7d7      	b.n	8006bba <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8006c10:	2000      	movs	r0, #0
}
 8006c12:	4770      	bx	lr
 8006c14:	200003c0 	.word	0x200003c0
 8006c18:	200003d4 	.word	0x200003d4
 8006c1c:	2000008c 	.word	0x2000008c

08006c20 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8006c20:	4b8d      	ldr	r3, [pc, #564]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8116 	beq.w	8006e56 <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 8006c2a:	7b43      	ldrb	r3, [r0, #13]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8112 	beq.w	8006e56 <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 8006c32:	4b89      	ldr	r3, [pc, #548]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	b12b      	cbz	r3, 8006c44 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8006c38:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8006c3a:	b91a      	cbnz	r2, 8006c44 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8006c3c:	4986      	ldr	r1, [pc, #536]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c3e:	898a      	ldrh	r2, [r1, #12]
 8006c40:	3201      	adds	r2, #1
 8006c42:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8006c44:	78c2      	ldrb	r2, [r0, #3]
 8006c46:	2ae0      	cmp	r2, #224	; 0xe0
 8006c48:	f040 8105 	bne.w	8006e56 <LmhpComplianceOnMcpsIndication+0x236>
{
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d140      	bne.n	8006cd6 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006c54:	7b03      	ldrb	r3, [r0, #12]
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d001      	beq.n	8006c5e <LmhpComplianceOnMcpsIndication+0x3e>
}
 8006c5a:	b00c      	add	sp, #48	; 0x30
 8006c5c:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006c5e:	6883      	ldr	r3, [r0, #8]
 8006c60:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006c62:	2a01      	cmp	r2, #1
 8006c64:	d1f9      	bne.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006c66:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006c68:	2a01      	cmp	r2, #1
 8006c6a:	d1f6      	bne.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006c6c:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	d1f3      	bne.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8006c72:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d1f0      	bne.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006c78:	4b77      	ldr	r3, [pc, #476]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8006c7e:	22e0      	movs	r2, #224	; 0xe0
 8006c80:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8006c82:	2202      	movs	r2, #2
 8006c84:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8006c86:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8006c88:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8006c8a:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8006c8c:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8006c8e:	2201      	movs	r2, #1
 8006c90:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8006c92:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8006c94:	2304      	movs	r3, #4
 8006c96:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 8006c9a:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006c9e:	a803      	add	r0, sp, #12
 8006ca0:	f002 fde6 	bl	8009870 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f003 f9eb 	bl	800a080 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8006caa:	4b6c      	ldr	r3, [pc, #432]	; (8006e5c <LmhpComplianceOnMcpsIndication+0x23c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	b103      	cbz	r3, 8006cb4 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8006cb2:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8006cb4:	4c6a      	ldr	r4, [pc, #424]	; (8006e60 <LmhpComplianceOnMcpsIndication+0x240>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	9200      	str	r2, [sp, #0]
 8006cba:	4b6a      	ldr	r3, [pc, #424]	; (8006e64 <LmhpComplianceOnMcpsIndication+0x244>)
 8006cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f009 ff79 	bl	8010bb8 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006cc6:	f241 3188 	movw	r1, #5000	; 0x1388
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f00a f87a 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8006cd0:	f7ff ff58 	bl	8006b84 <LmhpComplianceTxProcess>
 8006cd4:	e7c1      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006cd6:	6882      	ldr	r2, [r0, #8]
 8006cd8:	7813      	ldrb	r3, [r2, #0]
 8006cda:	495f      	ldr	r1, [pc, #380]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006cdc:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	d8bb      	bhi.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
 8006ce2:	e8df f003 	tbb	[pc, r3]
 8006ce6:	2206      	.short	0x2206
 8006ce8:	47312b26 	.word	0x47312b26
 8006cec:	a49d6d4e 	.word	0xa49d6d4e
 8006cf0:	ae          	.byte	0xae
 8006cf1:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8006cf2:	485b      	ldr	r0, [pc, #364]	; (8006e60 <LmhpComplianceOnMcpsIndication+0x240>)
 8006cf4:	f009 ffbe 	bl	8010c74 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006cf8:	4b57      	ldr	r3, [pc, #348]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006cfe:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006d00:	2304      	movs	r3, #4
 8006d02:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006d06:	4c55      	ldr	r4, [pc, #340]	; (8006e5c <LmhpComplianceOnMcpsIndication+0x23c>)
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006d10:	a803      	add	r0, sp, #12
 8006d12:	f002 fdad 	bl	8009870 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	7858      	ldrb	r0, [r3, #1]
 8006d1a:	f003 f9b1 	bl	800a080 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d099      	beq.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8006d26:	4798      	blx	r3
            break;
 8006d28:	e797      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8006d2a:	4b4b      	ldr	r3, [pc, #300]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	719a      	strb	r2, [r3, #6]
            break;
 8006d30:	e793      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8006d32:	4b49      	ldr	r3, [pc, #292]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006d38:	709a      	strb	r2, [r3, #2]
            break;
 8006d3a:	e78e      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006d3c:	4b46      	ldr	r3, [pc, #280]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006d42:	2201      	movs	r2, #1
 8006d44:	709a      	strb	r2, [r3, #2]
            break;
 8006d46:	e788      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8006d48:	7b01      	ldrb	r1, [r0, #12]
 8006d4a:	4b43      	ldr	r3, [pc, #268]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d4c:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8006d4e:	689c      	ldr	r4, [r3, #8]
 8006d50:	2304      	movs	r3, #4
 8006d52:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006d54:	2301      	movs	r3, #1
 8006d56:	e005      	b.n	8006d64 <LmhpComplianceOnMcpsIndication+0x144>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8006d58:	6882      	ldr	r2, [r0, #8]
 8006d5a:	5cd2      	ldrb	r2, [r2, r3]
 8006d5c:	3201      	adds	r2, #1
 8006d5e:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006d60:	3301      	adds	r3, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	4a3c      	ldr	r2, [pc, #240]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d66:	7952      	ldrb	r2, [r2, #5]
 8006d68:	428a      	cmp	r2, r1
 8006d6a:	bf28      	it	cs
 8006d6c:	460a      	movcs	r2, r1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d8f2      	bhi.n	8006d58 <LmhpComplianceOnMcpsIndication+0x138>
 8006d72:	e772      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8006d74:	2304      	movs	r3, #4
 8006d76:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006d7a:	a803      	add	r0, sp, #12
 8006d7c:	f002 fff0 	bl	8009d60 <LoRaMacMlmeRequest>
            break;
 8006d80:	e76b      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8006d82:	4837      	ldr	r0, [pc, #220]	; (8006e60 <LmhpComplianceOnMcpsIndication+0x240>)
 8006d84:	f009 ff76 	bl	8010c74 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006d88:	4b33      	ldr	r3, [pc, #204]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006d8e:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006d90:	2304      	movs	r3, #4
 8006d92:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006d96:	4c31      	ldr	r4, [pc, #196]	; (8006e5c <LmhpComplianceOnMcpsIndication+0x23c>)
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006da0:	a803      	add	r0, sp, #12
 8006da2:	f002 fd65 	bl	8009870 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	7858      	ldrb	r0, [r3, #1]
 8006daa:	f003 f969 	bl	800a080 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	b103      	cbz	r3, 8006db6 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8006db4:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8006db6:	4b2c      	ldr	r3, [pc, #176]	; (8006e68 <LmhpComplianceOnMcpsIndication+0x248>)
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	2002      	movs	r0, #2
 8006dbc:	4798      	blx	r3
            break;
 8006dbe:	e74c      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8006dc0:	7b03      	ldrb	r3, [r0, #12]
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d008      	beq.n	8006dd8 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8006dc6:	2b07      	cmp	r3, #7
 8006dc8:	d010      	beq.n	8006dec <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8006dca:	a803      	add	r0, sp, #12
 8006dcc:	f002 ffc8 	bl	8009d60 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8006dd0:	4b21      	ldr	r3, [pc, #132]	; (8006e58 <LmhpComplianceOnMcpsIndication+0x238>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	709a      	strb	r2, [r3, #2]
            break;
 8006dd6:	e740      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8006dd8:	2305      	movs	r3, #5
 8006dda:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006dde:	7851      	ldrb	r1, [r2, #1]
 8006de0:	7893      	ldrb	r3, [r2, #2]
 8006de2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006de6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8006dea:	e7ee      	b.n	8006dca <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8006dec:	2306      	movs	r3, #6
 8006dee:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006df2:	7851      	ldrb	r1, [r2, #1]
 8006df4:	7893      	ldrb	r3, [r2, #2]
 8006df6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006dfa:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8006dfe:	78d1      	ldrb	r1, [r2, #3]
 8006e00:	7913      	ldrb	r3, [r2, #4]
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006e08:	7952      	ldrb	r2, [r2, #5]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	2264      	movs	r2, #100	; 0x64
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
 8006e12:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8006e14:	6883      	ldr	r3, [r0, #8]
 8006e16:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006e1a:	f88d 3018 	strb.w	r3, [sp, #24]
 8006e1e:	e7d4      	b.n	8006dca <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8006e20:	230a      	movs	r3, #10
 8006e22:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006e26:	a803      	add	r0, sp, #12
 8006e28:	f002 ff9a 	bl	8009d60 <LoRaMacMlmeRequest>
            break;
 8006e2c:	e715      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8006e34:	7853      	ldrb	r3, [r2, #1]
 8006e36:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006e3a:	a803      	add	r0, sp, #12
 8006e3c:	f002 fd18 	bl	8009870 <LoRaMacMibSetRequestConfirm>
            break;
 8006e40:	e70b      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8006e42:	230d      	movs	r3, #13
 8006e44:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8006e48:	7853      	ldrb	r3, [r2, #1]
 8006e4a:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8006e4e:	a803      	add	r0, sp, #12
 8006e50:	f002 ff86 	bl	8009d60 <LoRaMacMlmeRequest>
            break;
 8006e54:	e701      	b.n	8006c5a <LmhpComplianceOnMcpsIndication+0x3a>
 8006e56:	4770      	bx	lr
 8006e58:	200003c0 	.word	0x200003c0
 8006e5c:	200003ec 	.word	0x200003ec
 8006e60:	200003d4 	.word	0x200003d4
 8006e64:	08006e6d 	.word	0x08006e6d
 8006e68:	2000008c 	.word	0x2000008c

08006e6c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8006e6c:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8006e6e:	f7ff fe89 	bl	8006b84 <LmhpComplianceTxProcess>
}
 8006e72:	bd08      	pop	{r3, pc}

08006e74 <LmhpCompliancePackageFactory>:
}
 8006e74:	4800      	ldr	r0, [pc, #0]	; (8006e78 <LmhpCompliancePackageFactory+0x4>)
 8006e76:	4770      	bx	lr
 8006e78:	2000008c 	.word	0x2000008c

08006e7c <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8006e7c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8006e7e:	4a06      	ldr	r2, [pc, #24]	; (8006e98 <OnRadioRxError+0x1c>)
 8006e80:	7813      	ldrb	r3, [r2, #0]
 8006e82:	f043 0302 	orr.w	r3, r3, #2
 8006e86:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <OnRadioRxError+0x20>)
 8006e8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8006e8e:	b113      	cbz	r3, 8006e96 <OnRadioRxError+0x1a>
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	b103      	cbz	r3, 8006e96 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006e94:	4798      	blx	r3
    }
}
 8006e96:	bd08      	pop	{r3, pc}
 8006e98:	200003f0 	.word	0x200003f0
 8006e9c:	200003f4 	.word	0x200003f4

08006ea0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <UpdateRxSlotIdleState+0x20>)
 8006ea2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d004      	beq.n	8006eb4 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <UpdateRxSlotIdleState+0x24>)
 8006eac:	2206      	movs	r2, #6
 8006eae:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8006eb2:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <UpdateRxSlotIdleState+0x24>)
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	200008fc 	.word	0x200008fc
 8006ec4:	200003f4 	.word	0x200003f4

08006ec8 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8006ec8:	4b01      	ldr	r3, [pc, #4]	; (8006ed0 <LoRaMacEnableRequests+0x8>)
 8006eca:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8006ece:	4770      	bx	lr
 8006ed0:	200003f4 	.word	0x200003f4

08006ed4 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8006ed4:	b530      	push	{r4, r5, lr}
 8006ed6:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8006ed8:	4b22      	ldr	r3, [pc, #136]	; (8006f64 <LoRaMacHandleIndicationEvents+0x90>)
 8006eda:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006ede:	f013 0f08 	tst.w	r3, #8
 8006ee2:	d00e      	beq.n	8006f02 <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8006ee4:	481f      	ldr	r0, [pc, #124]	; (8006f64 <LoRaMacHandleIndicationEvents+0x90>)
 8006ee6:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8006eea:	f36f 03c3 	bfc	r3, #3, #1
 8006eee:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8006ef2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8006efc:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8006f00:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8006f02:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <LoRaMacHandleIndicationEvents+0x90>)
 8006f04:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006f08:	f013 0f10 	tst.w	r3, #16
 8006f0c:	d013      	beq.n	8006f36 <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8006f0e:	2307      	movs	r3, #7
 8006f10:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006f14:	2500      	movs	r5, #0
 8006f16:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8006f1a:	4c12      	ldr	r4, [pc, #72]	; (8006f64 <LoRaMacHandleIndicationEvents+0x90>)
 8006f1c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8006f26:	a801      	add	r0, sp, #4
 8006f28:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8006f2a:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8006f2e:	f365 1304 	bfi	r3, r5, #4, #1
 8006f32:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <LoRaMacHandleIndicationEvents+0x90>)
 8006f38:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8006f3c:	f013 0f02 	tst.w	r3, #2
 8006f40:	d00e      	beq.n	8006f60 <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8006f42:	4808      	ldr	r0, [pc, #32]	; (8006f64 <LoRaMacHandleIndicationEvents+0x90>)
 8006f44:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8006f48:	f36f 0341 	bfc	r3, #1, #1
 8006f4c:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8006f50:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8006f5a:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8006f5e:	4798      	blx	r3
    }
}
 8006f60:	b009      	add	sp, #36	; 0x24
 8006f62:	bd30      	pop	{r4, r5, pc}
 8006f64:	200003f4 	.word	0x200003f4

08006f68 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <LoRaMacCheckForRxAbort+0x18>)
 8006f6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8006f6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f72:	d004      	beq.n	8006f7e <LoRaMacCheckForRxAbort+0x16>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006f74:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8006f78:	4a01      	ldr	r2, [pc, #4]	; (8006f80 <LoRaMacCheckForRxAbort+0x18>)
 8006f7a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8006f7e:	4770      	bx	lr
 8006f80:	200003f4 	.word	0x200003f4

08006f84 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006f84:	4a03      	ldr	r2, [pc, #12]	; (8006f94 <SetMlmeScheduleUplinkIndication+0x10>)
 8006f86:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8006f8a:	f043 0310 	orr.w	r3, r3, #16
 8006f8e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8006f92:	4770      	bx	lr
 8006f94:	200003f4 	.word	0x200003f4

08006f98 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <CalculateBackOff+0x1c>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	b94b      	cbnz	r3, 8006fb2 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8006f9e:	4905      	ldr	r1, [pc, #20]	; (8006fb4 <CalculateBackOff+0x1c>)
 8006fa0:	f8b1 2102 	ldrh.w	r2, [r1, #258]	; 0x102
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <CalculateBackOff+0x20>)
 8006fa6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8006faa:	3a01      	subs	r2, #1
 8006fac:	fb03 f302 	mul.w	r3, r3, r2
 8006fb0:	630b      	str	r3, [r1, #48]	; 0x30
    }
}
 8006fb2:	4770      	bx	lr
 8006fb4:	200008fc 	.word	0x200008fc
 8006fb8:	200003f4 	.word	0x200003f4

08006fbc <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <SetTxContinuousWave1+0x24>)
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	4622      	mov	r2, r4
 8006fca:	b249      	sxtb	r1, r1
 8006fcc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8006fce:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <SetTxContinuousWave1+0x28>)
 8006fd0:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8006fd4:	f043 0302 	orr.w	r3, r3, #2
 8006fd8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8006fdc:	2000      	movs	r0, #0
 8006fde:	bd10      	pop	{r4, pc}
 8006fe0:	08011ee8 	.word	0x08011ee8
 8006fe4:	200003f4 	.word	0x200003f4

08006fe8 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8006fe8:	4800      	ldr	r0, [pc, #0]	; (8006fec <GetNvmData+0x4>)
 8006fea:	4770      	bx	lr
 8006fec:	200008fc 	.word	0x200008fc

08006ff0 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	b1f8      	cbz	r0, 8007034 <DetermineFrameType+0x44>
 8006ff4:	b301      	cbz	r1, 8007038 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8006ff6:	7b03      	ldrb	r3, [r0, #12]
 8006ff8:	f013 030f 	ands.w	r3, r3, #15
 8006ffc:	d005      	beq.n	800700a <DetermineFrameType+0x1a>
 8006ffe:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007002:	b110      	cbz	r0, 800700a <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007004:	2000      	movs	r0, #0
 8007006:	7008      	strb	r0, [r1, #0]
 8007008:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800700a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800700e:	b910      	cbnz	r0, 8007016 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007010:	2301      	movs	r3, #1
 8007012:	700b      	strb	r3, [r1, #0]
 8007014:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007016:	b92b      	cbnz	r3, 8007024 <DetermineFrameType+0x34>
 8007018:	f892 0020 	ldrb.w	r0, [r2, #32]
 800701c:	b910      	cbnz	r0, 8007024 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800701e:	2302      	movs	r3, #2
 8007020:	700b      	strb	r3, [r1, #0]
 8007022:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007024:	b953      	cbnz	r3, 800703c <DetermineFrameType+0x4c>
 8007026:	f892 2020 	ldrb.w	r2, [r2, #32]
 800702a:	b14a      	cbz	r2, 8007040 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800702c:	2203      	movs	r2, #3
 800702e:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007030:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007032:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007034:	2003      	movs	r0, #3
 8007036:	4770      	bx	lr
 8007038:	2003      	movs	r0, #3
 800703a:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800703c:	2017      	movs	r0, #23
 800703e:	4770      	bx	lr
 8007040:	2017      	movs	r0, #23
}
 8007042:	4770      	bx	lr

08007044 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <CheckRetransUnconfirmedUplink+0x40>)
 8007046:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <CheckRetransUnconfirmedUplink+0x44>)
 800704c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8007050:	429a      	cmp	r2, r3
 8007052:	d20f      	bcs.n	8007074 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <CheckRetransUnconfirmedUplink+0x40>)
 8007056:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800705a:	f013 0f02 	tst.w	r3, #2
 800705e:	d00b      	beq.n	8007078 <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007060:	4b09      	ldr	r3, [pc, #36]	; (8007088 <CheckRetransUnconfirmedUplink+0x44>)
 8007062:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007066:	b14b      	cbz	r3, 800707c <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <CheckRetransUnconfirmedUplink+0x40>)
 800706a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800706e:	b13b      	cbz	r3, 8007080 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8007070:	2000      	movs	r0, #0
 8007072:	4770      	bx	lr
        return true;
 8007074:	2001      	movs	r0, #1
 8007076:	4770      	bx	lr
    return false;
 8007078:	2000      	movs	r0, #0
 800707a:	4770      	bx	lr
            return true;
 800707c:	2001      	movs	r0, #1
 800707e:	4770      	bx	lr
                return true;
 8007080:	2001      	movs	r0, #1
}
 8007082:	4770      	bx	lr
 8007084:	200003f4 	.word	0x200003f4
 8007088:	200008fc 	.word	0x200008fc

0800708c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <CheckRetransConfirmedUplink+0x2c>)
 800708e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8007092:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007096:	429a      	cmp	r2, r3
 8007098:	d209      	bcs.n	80070ae <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <CheckRetransConfirmedUplink+0x2c>)
 800709c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80070a0:	f013 0f02 	tst.w	r3, #2
 80070a4:	d005      	beq.n	80070b2 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80070a6:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <CheckRetransConfirmedUplink+0x2c>)
 80070a8:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 80070ac:	4770      	bx	lr
        return true;
 80070ae:	2001      	movs	r0, #1
 80070b0:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 80070b2:	2000      	movs	r0, #0
}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	200003f4 	.word	0x200003f4

080070bc <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <StopRetransmission+0x48>)
 80070be:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80070c2:	f013 0f02 	tst.w	r3, #2
 80070c6:	d004      	beq.n	80070d2 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80070c8:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <StopRetransmission+0x48>)
 80070ca:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d907      	bls.n	80070e2 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80070d2:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <StopRetransmission+0x4c>)
 80070d4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80070d8:	b11b      	cbz	r3, 80070e2 <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80070da:	4a0b      	ldr	r2, [pc, #44]	; (8007108 <StopRetransmission+0x4c>)
 80070dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80070de:	3301      	adds	r3, #1
 80070e0:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <StopRetransmission+0x48>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80070ea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 80070ee:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80070f2:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80070f6:	f022 0202 	bic.w	r2, r2, #2
 80070fa:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80070fe:	2001      	movs	r0, #1
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	200003f4 	.word	0x200003f4
 8007108:	200008fc 	.word	0x200008fc

0800710c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800710c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800710e:	4b04      	ldr	r3, [pc, #16]	; (8007120 <CallNvmDataChangeCallback+0x14>)
 8007110:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007114:	b113      	cbz	r3, 800711c <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007116:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007118:	b103      	cbz	r3, 800711c <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800711a:	4798      	blx	r3
    }
}
 800711c:	bd08      	pop	{r3, pc}
 800711e:	bf00      	nop
 8007120:	200003f4 	.word	0x200003f4

08007124 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007124:	4b04      	ldr	r3, [pc, #16]	; (8007138 <IsRequestPending+0x14>)
 8007126:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 800712a:	f010 0005 	ands.w	r0, r0, #5
 800712e:	d100      	bne.n	8007132 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007130:	4770      	bx	lr
        return 1;
 8007132:	2001      	movs	r0, #1
 8007134:	e7fc      	b.n	8007130 <IsRequestPending+0xc>
 8007136:	bf00      	nop
 8007138:	200003f4 	.word	0x200003f4

0800713c <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <AckTimeoutRetriesProcess+0x50>)
 800713e:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8007142:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8007146:	4293      	cmp	r3, r2
 8007148:	d207      	bcs.n	800715a <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 800714a:	3301      	adds	r3, #1
 800714c:	b2db      	uxtb	r3, r3
 800714e:	4a0f      	ldr	r2, [pc, #60]	; (800718c <AckTimeoutRetriesProcess+0x50>)
 8007150:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8007154:	f013 0f01 	tst.w	r3, #1
 8007158:	d100      	bne.n	800715c <AckTimeoutRetriesProcess+0x20>
 800715a:	4770      	bx	lr
{
 800715c:	b510      	push	{r4, lr}
 800715e:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007160:	2322      	movs	r3, #34	; 0x22
 8007162:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007166:	4c0a      	ldr	r4, [pc, #40]	; (8007190 <AckTimeoutRetriesProcess+0x54>)
 8007168:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800716c:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007170:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8007174:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007178:	a902      	add	r1, sp, #8
 800717a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800717e:	f003 fff6 	bl	800b16e <RegionGetPhyParam>
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007182:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8007186:	b004      	add	sp, #16
 8007188:	bd10      	pop	{r4, pc}
 800718a:	bf00      	nop
 800718c:	200003f4 	.word	0x200003f4
 8007190:	200008fc 	.word	0x200008fc

08007194 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007194:	b500      	push	{lr}
 8007196:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007198:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 800719a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800719e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 80071a2:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80071a6:	220d      	movs	r2, #13
 80071a8:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80071ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071b0:	b113      	cbz	r3, 80071b8 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80071b2:	230e      	movs	r3, #14
 80071b4:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80071b8:	a902      	add	r1, sp, #8
 80071ba:	4b04      	ldr	r3, [pc, #16]	; (80071cc <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 80071bc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80071c0:	f003 ffd5 	bl	800b16e <RegionGetPhyParam>
}
 80071c4:	b2c0      	uxtb	r0, r0
 80071c6:	b005      	add	sp, #20
 80071c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80071cc:	200008fc 	.word	0x200008fc

080071d0 <ValidatePayloadLength>:
{
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80071d6:	4608      	mov	r0, r1
 80071d8:	f7ff ffdc 	bl	8007194 <GetMaxAppPayloadWithoutFOptsLength>
 80071dc:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 80071de:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d303      	bcc.n	80071ec <ValidatePayloadLength+0x1c>
 80071e4:	2aff      	cmp	r2, #255	; 0xff
 80071e6:	d903      	bls.n	80071f0 <ValidatePayloadLength+0x20>
    return false;
 80071e8:	2000      	movs	r0, #0
 80071ea:	e000      	b.n	80071ee <ValidatePayloadLength+0x1e>
 80071ec:	2000      	movs	r0, #0
}
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80071f0:	2001      	movs	r0, #1
 80071f2:	e7fc      	b.n	80071ee <ValidatePayloadLength+0x1e>

080071f4 <ProcessRadioTxDone>:
{
 80071f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f6:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80071f8:	4b39      	ldr	r3, [pc, #228]	; (80072e0 <ProcessRadioTxDone+0xec>)
 80071fa:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d002      	beq.n	8007208 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007202:	4b38      	ldr	r3, [pc, #224]	; (80072e4 <ProcessRadioTxDone+0xf0>)
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007208:	4c37      	ldr	r4, [pc, #220]	; (80072e8 <ProcessRadioTxDone+0xf4>)
 800720a:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800720e:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8007212:	4628      	mov	r0, r5
 8007214:	f009 fdd6 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007218:	4628      	mov	r0, r5
 800721a:	f009 fd8d 	bl	8010d38 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800721e:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8007222:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007226:	4628      	mov	r0, r5
 8007228:	f009 fdcc 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800722c:	4628      	mov	r0, r5
 800722e:	f009 fd83 	bl	8010d38 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8007232:	4b2b      	ldr	r3, [pc, #172]	; (80072e0 <ProcessRadioTxDone+0xec>)
 8007234:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007238:	2b02      	cmp	r3, #2
 800723a:	d002      	beq.n	8007242 <ProcessRadioTxDone+0x4e>
 800723c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007240:	b1a3      	cbz	r3, 800726c <ProcessRadioTxDone+0x78>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007242:	2316      	movs	r3, #22
 8007244:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007248:	a90a      	add	r1, sp, #40	; 0x28
 800724a:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <ProcessRadioTxDone+0xec>)
 800724c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007250:	f003 ff8d 	bl	800b16e <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8007254:	4c24      	ldr	r4, [pc, #144]	; (80072e8 <ProcessRadioTxDone+0xf4>)
 8007256:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800725a:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 800725e:	4401      	add	r1, r0
 8007260:	4620      	mov	r0, r4
 8007262:	f009 fdaf 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8007266:	4620      	mov	r0, r4
 8007268:	f009 fd66 	bl	8010d38 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800726c:	4b1f      	ldr	r3, [pc, #124]	; (80072ec <ProcessRadioTxDone+0xf8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4c1b      	ldr	r4, [pc, #108]	; (80072e0 <ProcessRadioTxDone+0xec>)
 8007272:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8007274:	4f1c      	ldr	r7, [pc, #112]	; (80072e8 <ProcessRadioTxDone+0xf4>)
 8007276:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 800727a:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800727e:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007280:	ae0c      	add	r6, sp, #48	; 0x30
 8007282:	4630      	mov	r0, r6
 8007284:	f009 fc2c 	bl	8010ae0 <SysTimeGetMcuTime>
 8007288:	ad02      	add	r5, sp, #8
 800728a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007294:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007298:	4628      	mov	r0, r5
 800729a:	f009 fbc2 	bl	8010a22 <SysTimeSub>
 800729e:	ab07      	add	r3, sp, #28
 80072a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80072a4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80072a8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80072ac:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80072b4:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80072b8:	b90b      	cbnz	r3, 80072be <ProcessRadioTxDone+0xca>
        txDone.Joined  = false;
 80072ba:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80072be:	a904      	add	r1, sp, #16
 80072c0:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <ProcessRadioTxDone+0xec>)
 80072c2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80072c6:	f003 ff6a 	bl	800b19e <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <ProcessRadioTxDone+0xf4>)
 80072cc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80072d0:	b91b      	cbnz	r3, 80072da <ProcessRadioTxDone+0xe6>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80072d2:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <ProcessRadioTxDone+0xf4>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 80072da:	b00f      	add	sp, #60	; 0x3c
 80072dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072de:	bf00      	nop
 80072e0:	200008fc 	.word	0x200008fc
 80072e4:	08011ee8 	.word	0x08011ee8
 80072e8:	200003f4 	.word	0x200003f4
 80072ec:	200019cc 	.word	0x200019cc

080072f0 <OnAckTimeoutTimerEvent>:
{
 80072f0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80072f2:	4c10      	ldr	r4, [pc, #64]	; (8007334 <OnAckTimeoutTimerEvent+0x44>)
 80072f4:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 80072f8:	f009 fcbc 	bl	8010c74 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80072fc:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007300:	b113      	cbz	r3, 8007308 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007302:	2201      	movs	r2, #1
 8007304:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <OnAckTimeoutTimerEvent+0x48>)
 800730a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800730e:	2b02      	cmp	r3, #2
 8007310:	d007      	beq.n	8007322 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <OnAckTimeoutTimerEvent+0x44>)
 8007314:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007318:	b113      	cbz	r3, 8007320 <OnAckTimeoutTimerEvent+0x30>
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	b103      	cbz	r3, 8007320 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800731e:	4798      	blx	r3
}
 8007320:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007322:	4a04      	ldr	r2, [pc, #16]	; (8007334 <OnAckTimeoutTimerEvent+0x44>)
 8007324:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007328:	f043 0320 	orr.w	r3, r3, #32
 800732c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8007330:	e7ef      	b.n	8007312 <OnAckTimeoutTimerEvent+0x22>
 8007332:	bf00      	nop
 8007334:	200003f4 	.word	0x200003f4
 8007338:	200008fc 	.word	0x200008fc

0800733c <PrepareRxDoneAbort>:
{
 800733c:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800733e:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <PrepareRxDoneAbort+0x34>)
 8007340:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007348:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800734c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007350:	b94b      	cbnz	r3, 8007366 <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007352:	4a07      	ldr	r2, [pc, #28]	; (8007370 <PrepareRxDoneAbort+0x34>)
 8007354:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007358:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 800735c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007360:	f7ff fd9e 	bl	8006ea0 <UpdateRxSlotIdleState>
}
 8007364:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8007366:	2000      	movs	r0, #0
 8007368:	f7ff ffc2 	bl	80072f0 <OnAckTimeoutTimerEvent>
 800736c:	e7f1      	b.n	8007352 <PrepareRxDoneAbort+0x16>
 800736e:	bf00      	nop
 8007370:	200003f4 	.word	0x200003f4

08007374 <LoRaMacCheckForBeaconAcquisition>:
{
 8007374:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007376:	200c      	movs	r0, #12
 8007378:	f003 f98c 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 800737c:	b188      	cbz	r0, 80073a2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <LoRaMacCheckForBeaconAcquisition+0x38>)
 8007380:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007384:	f010 0f01 	tst.w	r0, #1
 8007388:	d10d      	bne.n	80073a6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800738a:	f010 0004 	ands.w	r0, r0, #4
 800738e:	d009      	beq.n	80073a4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007390:	461a      	mov	r2, r3
 8007392:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007396:	f023 0302 	bic.w	r3, r3, #2
 800739a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800739e:	2001      	movs	r0, #1
 80073a0:	e000      	b.n	80073a4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80073a2:	2000      	movs	r0, #0
}
 80073a4:	bd08      	pop	{r3, pc}
    return 0x00;
 80073a6:	2000      	movs	r0, #0
 80073a8:	e7fc      	b.n	80073a4 <LoRaMacCheckForBeaconAcquisition+0x30>
 80073aa:	bf00      	nop
 80073ac:	200003f4 	.word	0x200003f4

080073b0 <GetFCntDown>:
{
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	9c05      	ldr	r4, [sp, #20]
 80073b4:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80073b6:	b1fa      	cbz	r2, 80073f8 <GetFCntDown+0x48>
 80073b8:	4616      	mov	r6, r2
 80073ba:	b1fc      	cbz	r4, 80073fc <GetFCntDown+0x4c>
 80073bc:	b305      	cbz	r5, 8007400 <GetFCntDown+0x50>
    switch( addrID )
 80073be:	b188      	cbz	r0, 80073e4 <GetFCntDown+0x34>
 80073c0:	2801      	cmp	r0, #1
 80073c2:	d11f      	bne.n	8007404 <GetFCntDown+0x54>
            if( lrWanVersion.Fields.Minor == 1 )
 80073c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80073c8:	2a01      	cmp	r2, #1
 80073ca:	d002      	beq.n	80073d2 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 80073cc:	2303      	movs	r3, #3
 80073ce:	7023      	strb	r3, [r4, #0]
 80073d0:	e00a      	b.n	80073e8 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80073d2:	b121      	cbz	r1, 80073de <GetFCntDown+0x2e>
 80073d4:	2903      	cmp	r1, #3
 80073d6:	d002      	beq.n	80073de <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 80073d8:	2301      	movs	r3, #1
 80073da:	7023      	strb	r3, [r4, #0]
 80073dc:	e004      	b.n	80073e8 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 80073de:	2302      	movs	r3, #2
 80073e0:	7023      	strb	r3, [r4, #0]
 80073e2:	e001      	b.n	80073e8 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80073e4:	2304      	movs	r3, #4
 80073e6:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80073e8:	462b      	mov	r3, r5
 80073ea:	89f2      	ldrh	r2, [r6, #14]
 80073ec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80073f0:	7820      	ldrb	r0, [r4, #0]
 80073f2:	f003 fb71 	bl	800aad8 <LoRaMacCryptoGetFCntDown>
}
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80073f8:	200a      	movs	r0, #10
 80073fa:	e7fc      	b.n	80073f6 <GetFCntDown+0x46>
 80073fc:	200a      	movs	r0, #10
 80073fe:	e7fa      	b.n	80073f6 <GetFCntDown+0x46>
 8007400:	200a      	movs	r0, #10
 8007402:	e7f8      	b.n	80073f6 <GetFCntDown+0x46>
    switch( addrID )
 8007404:	2005      	movs	r0, #5
 8007406:	e7f6      	b.n	80073f6 <GetFCntDown+0x46>

08007408 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007408:	2801      	cmp	r0, #1
 800740a:	d900      	bls.n	800740e <RemoveMacCommands+0x6>
 800740c:	4770      	bx	lr
{
 800740e:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8007410:	2a01      	cmp	r2, #1
 8007412:	d105      	bne.n	8007420 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8007414:	f011 0f20 	tst.w	r1, #32
 8007418:	d004      	beq.n	8007424 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800741a:	f002 ffd7 	bl	800a3cc <LoRaMacCommandsRemoveStickyAnsCmds>
 800741e:	e001      	b.n	8007424 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8007420:	f002 ffd4 	bl	800a3cc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8007424:	bd08      	pop	{r3, pc}
	...

08007428 <ProcessMacCommands>:
{
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	b08f      	sub	sp, #60	; 0x3c
 800742e:	4605      	mov	r5, r0
 8007430:	460c      	mov	r4, r1
 8007432:	4616      	mov	r6, r2
 8007434:	4698      	mov	r8, r3
    uint8_t status = 0;
 8007436:	2700      	movs	r7, #0
 8007438:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800743c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8007440:	42b4      	cmp	r4, r6
 8007442:	f080 82b8 	bcs.w	80079b6 <ProcessMacCommands+0x58e>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8007446:	5d28      	ldrb	r0, [r5, r4]
 8007448:	f003 f828 	bl	800a49c <LoRaMacCommandsGetCmdSize>
 800744c:	4420      	add	r0, r4
 800744e:	42b0      	cmp	r0, r6
 8007450:	f300 82b1 	bgt.w	80079b6 <ProcessMacCommands+0x58e>
        switch( payload[macIndex++] )
 8007454:	f104 0901 	add.w	r9, r4, #1
 8007458:	fa5f f989 	uxtb.w	r9, r9
 800745c:	5d29      	ldrb	r1, [r5, r4]
 800745e:	3902      	subs	r1, #2
 8007460:	2911      	cmp	r1, #17
 8007462:	f200 82a8 	bhi.w	80079b6 <ProcessMacCommands+0x58e>
 8007466:	e8df f011 	tbh	[pc, r1, lsl #1]
 800746a:	0012      	.short	0x0012
 800746c:	00920029 	.word	0x00920029
 8007470:	00ed00a6 	.word	0x00ed00a6
 8007474:	013c0105 	.word	0x013c0105
 8007478:	01ab0155 	.word	0x01ab0155
 800747c:	02a602a6 	.word	0x02a602a6
 8007480:	02a601db 	.word	0x02a601db
 8007484:	023202a6 	.word	0x023202a6
 8007488:	02690249 	.word	0x02690249
 800748c:	0285      	.short	0x0285
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800748e:	2004      	movs	r0, #4
 8007490:	f003 f900 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 8007494:	b908      	cbnz	r0, 800749a <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 8007496:	464c      	mov	r4, r9
 8007498:	e7d2      	b.n	8007440 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800749a:	2104      	movs	r1, #4
 800749c:	2000      	movs	r0, #0
 800749e:	f003 f8ad 	bl	800a5fc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80074a2:	1ca3      	adds	r3, r4, #2
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f815 1009 	ldrb.w	r1, [r5, r9]
 80074aa:	4ac1      	ldr	r2, [pc, #772]	; (80077b0 <ProcessMacCommands+0x388>)
 80074ac:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80074b0:	3403      	adds	r4, #3
 80074b2:	b2e4      	uxtb	r4, r4
 80074b4:	5ceb      	ldrb	r3, [r5, r3]
 80074b6:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 80074ba:	e7c1      	b.n	8007440 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 80074bc:	2300      	movs	r3, #0
 80074be:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 80074c2:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 80074c6:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 80074ca:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 80074ce:	b10f      	cbz	r7, 80074d4 <ProcessMacCommands+0xac>
                break;
 80074d0:	464c      	mov	r4, r9
 80074d2:	e7b5      	b.n	8007440 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80074d4:	f109 33ff 	add.w	r3, r9, #4294967295
 80074d8:	442b      	add	r3, r5
 80074da:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80074dc:	eba6 0309 	sub.w	r3, r6, r9
 80074e0:	3301      	adds	r3, #1
 80074e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80074e6:	48b3      	ldr	r0, [pc, #716]	; (80077b4 <ProcessMacCommands+0x38c>)
 80074e8:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 80074ec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80074f0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80074f4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80074f8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 80074fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007500:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8007504:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007508:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800750c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8007510:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8007514:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8007516:	ab05      	add	r3, sp, #20
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	ab03      	add	r3, sp, #12
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	f10d 030b 	add.w	r3, sp, #11
 8007522:	f10d 020a 	add.w	r2, sp, #10
 8007526:	a907      	add	r1, sp, #28
 8007528:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800752c:	f003 feb3 	bl	800b296 <RegionLinkAdrReq>
 8007530:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8007534:	f000 0007 	and.w	r0, r0, #7
 8007538:	2807      	cmp	r0, #7
 800753a:	d001      	beq.n	8007540 <ProcessMacCommands+0x118>
{
 800753c:	2400      	movs	r4, #0
 800753e:	e015      	b.n	800756c <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8007540:	4b9c      	ldr	r3, [pc, #624]	; (80077b4 <ProcessMacCommands+0x38c>)
 8007542:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8007546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800754a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800754e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8007552:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8007556:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800755a:	e7ef      	b.n	800753c <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800755c:	2201      	movs	r2, #1
 800755e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8007562:	2003      	movs	r0, #3
 8007564:	f002 fed2 	bl	800a30c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007568:	3401      	adds	r4, #1
 800756a:	b2e4      	uxtb	r4, r4
 800756c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8007570:	4b91      	ldr	r3, [pc, #580]	; (80077b8 <ProcessMacCommands+0x390>)
 8007572:	fba3 1302 	umull	r1, r3, r3, r2
 8007576:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800757a:	d3ef      	bcc.n	800755c <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800757c:	4491      	add	r9, r2
 800757e:	fa5f f989 	uxtb.w	r9, r9
 8007582:	f109 39ff 	add.w	r9, r9, #4294967295
 8007586:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 800758a:	2701      	movs	r7, #1
 800758c:	e7a0      	b.n	80074d0 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800758e:	3402      	adds	r4, #2
 8007590:	b2e4      	uxtb	r4, r4
 8007592:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	4986      	ldr	r1, [pc, #536]	; (80077b4 <ProcessMacCommands+0x38c>)
 800759c:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80075a0:	2201      	movs	r2, #1
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80075aa:	2200      	movs	r2, #0
 80075ac:	a90b      	add	r1, sp, #44	; 0x2c
 80075ae:	2004      	movs	r0, #4
 80075b0:	f002 feac 	bl	800a30c <LoRaMacCommandsAddCmd>
                break;
 80075b4:	e744      	b.n	8007440 <ProcessMacCommands+0x18>
                status = 0x07;
 80075b6:	2307      	movs	r3, #7
 80075b8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80075bc:	f815 3009 	ldrb.w	r3, [r5, r9]
 80075c0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80075c4:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80075c8:	f915 3009 	ldrsb.w	r3, [r5, r9]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80075d4:	1ca3      	adds	r3, r4, #2
 80075d6:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80075d8:	1ce1      	adds	r1, r4, #3
 80075da:	b2c9      	uxtb	r1, r1
 80075dc:	5ceb      	ldrb	r3, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80075de:	1d22      	adds	r2, r4, #4
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	5c69      	ldrb	r1, [r5, r1]
 80075e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80075e8:	3405      	adds	r4, #5
 80075ea:	b2e4      	uxtb	r4, r4
 80075ec:	5caa      	ldrb	r2, [r5, r2]
 80075ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                rxParamSetupReq.Frequency *= 100;
 80075f2:	2264      	movs	r2, #100	; 0x64
 80075f4:	fb02 f303 	mul.w	r3, r2, r3
 80075f8:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80075fa:	a907      	add	r1, sp, #28
 80075fc:	4b6d      	ldr	r3, [pc, #436]	; (80077b4 <ProcessMacCommands+0x38c>)
 80075fe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007602:	f003 fe61 	bl	800b2c8 <RegionRxParamSetupReq>
 8007606:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800760a:	f000 0307 	and.w	r3, r0, #7
 800760e:	2b07      	cmp	r3, #7
 8007610:	d009      	beq.n	8007626 <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 8007612:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8007616:	2201      	movs	r2, #1
 8007618:	a90b      	add	r1, sp, #44	; 0x2c
 800761a:	2005      	movs	r0, #5
 800761c:	f002 fe76 	bl	800a30c <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8007620:	f7ff fcb0 	bl	8006f84 <SetMlmeScheduleUplinkIndication>
                break;
 8007624:	e70c      	b.n	8007440 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8007626:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800762a:	4b62      	ldr	r3, [pc, #392]	; (80077b4 <ProcessMacCommands+0x38c>)
 800762c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8007630:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8007634:	9a08      	ldr	r2, [sp, #32]
 8007636:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8007638:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800763a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800763e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8007642:	e7e6      	b.n	8007612 <ProcessMacCommands+0x1ea>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8007644:	4b5a      	ldr	r3, [pc, #360]	; (80077b0 <ProcessMacCommands+0x388>)
 8007646:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800764a:	b17b      	cbz	r3, 800766c <ProcessMacCommands+0x244>
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	b17b      	cbz	r3, 8007670 <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8007650:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8007652:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8007656:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800765a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800765e:	2202      	movs	r2, #2
 8007660:	a90b      	add	r1, sp, #44	; 0x2c
 8007662:	2006      	movs	r0, #6
 8007664:	f002 fe52 	bl	800a30c <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8007668:	464c      	mov	r4, r9
                break;
 800766a:	e6e9      	b.n	8007440 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800766c:	20ff      	movs	r0, #255	; 0xff
 800766e:	e7f0      	b.n	8007652 <ProcessMacCommands+0x22a>
 8007670:	20ff      	movs	r0, #255	; 0xff
 8007672:	e7ee      	b.n	8007652 <ProcessMacCommands+0x22a>
                status = 0x03;
 8007674:	2303      	movs	r3, #3
 8007676:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800767a:	1ca3      	adds	r3, r4, #2
 800767c:	b2db      	uxtb	r3, r3
 800767e:	f915 2009 	ldrsb.w	r2, [r5, r9]
 8007682:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8007686:	aa07      	add	r2, sp, #28
 8007688:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800768a:	1ce2      	adds	r2, r4, #3
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	5ceb      	ldrb	r3, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007690:	1d21      	adds	r1, r4, #4
 8007692:	b2c9      	uxtb	r1, r1
 8007694:	5caa      	ldrb	r2, [r5, r2]
 8007696:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800769a:	1d62      	adds	r2, r4, #5
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	5c69      	ldrb	r1, [r5, r1]
 80076a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                chParam.Frequency *= 100;
 80076a4:	2164      	movs	r1, #100	; 0x64
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80076b0:	3406      	adds	r4, #6
 80076b2:	b2e4      	uxtb	r4, r4
 80076b4:	56ab      	ldrsb	r3, [r5, r2]
 80076b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80076ba:	a905      	add	r1, sp, #20
 80076bc:	4b3d      	ldr	r3, [pc, #244]	; (80077b4 <ProcessMacCommands+0x38c>)
 80076be:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80076c2:	f003 fe10 	bl	800b2e6 <RegionNewChannelReq>
 80076c6:	b2c3      	uxtb	r3, r0
 80076c8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f6ff aeb7 	blt.w	8007440 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80076d2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80076d6:	2201      	movs	r2, #1
 80076d8:	a90b      	add	r1, sp, #44	; 0x2c
 80076da:	2007      	movs	r0, #7
 80076dc:	f002 fe16 	bl	800a30c <LoRaMacCommandsAddCmd>
                break;
 80076e0:	e6ae      	b.n	8007440 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80076e2:	3402      	adds	r4, #2
 80076e4:	b2e4      	uxtb	r4, r4
 80076e6:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 80076ea:	f013 020f 	ands.w	r2, r3, #15
 80076ee:	d100      	bne.n	80076f2 <ProcessMacCommands+0x2ca>
                    delay++;
 80076f0:	3201      	adds	r2, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80076f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076f6:	fb03 f302 	mul.w	r3, r3, r2
 80076fa:	4a2e      	ldr	r2, [pc, #184]	; (80077b4 <ProcessMacCommands+0x38c>)
 80076fc:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80076fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007702:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007704:	2200      	movs	r2, #0
 8007706:	a90b      	add	r1, sp, #44	; 0x2c
 8007708:	2008      	movs	r0, #8
 800770a:	f002 fdff 	bl	800a30c <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 800770e:	f7ff fc39 	bl	8006f84 <SetMlmeScheduleUplinkIndication>
                break;
 8007712:	e695      	b.n	8007440 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8007714:	3402      	adds	r4, #2
 8007716:	b2e4      	uxtb	r4, r4
 8007718:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 800771c:	2200      	movs	r2, #0
 800771e:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8007722:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8007726:	f013 0f20 	tst.w	r3, #32
 800772a:	d002      	beq.n	8007732 <ProcessMacCommands+0x30a>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800772c:	2201      	movs	r2, #1
 800772e:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8007732:	f013 0f10 	tst.w	r3, #16
 8007736:	d002      	beq.n	800773e <ProcessMacCommands+0x316>
                    txParamSetupReq.UplinkDwellTime = 1;
 8007738:	2201      	movs	r2, #1
 800773a:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8007746:	a903      	add	r1, sp, #12
 8007748:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <ProcessMacCommands+0x38c>)
 800774a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800774e:	f003 fdd9 	bl	800b304 <RegionTxParamSetupReq>
 8007752:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007756:	f43f ae73 	beq.w	8007440 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800775a:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800775e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80077b4 <ProcessMacCommands+0x38c>
 8007762:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8007766:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800776a:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800776e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8007772:	4a12      	ldr	r2, [pc, #72]	; (80077bc <ProcessMacCommands+0x394>)
 8007774:	5cd0      	ldrb	r0, [r2, r3]
 8007776:	f7f9 f829 	bl	80007cc <__aeabi_ui2f>
 800777a:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800777e:	2302      	movs	r3, #2
 8007780:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007784:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007788:	a907      	add	r1, sp, #28
 800778a:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 800778e:	f003 fcee 	bl	800b16e <RegionGetPhyParam>
 8007792:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8007794:	b240      	sxtb	r0, r0
 8007796:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 800779a:	4298      	cmp	r0, r3
 800779c:	bfb8      	it	lt
 800779e:	4618      	movlt	r0, r3
 80077a0:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80077a4:	2200      	movs	r2, #0
 80077a6:	a90b      	add	r1, sp, #44	; 0x2c
 80077a8:	2009      	movs	r0, #9
 80077aa:	f002 fdaf 	bl	800a30c <LoRaMacCommandsAddCmd>
                break;
 80077ae:	e647      	b.n	8007440 <ProcessMacCommands+0x18>
 80077b0:	200003f4 	.word	0x200003f4
 80077b4:	200008fc 	.word	0x200008fc
 80077b8:	cccccccd 	.word	0xcccccccd
 80077bc:	080118b0 	.word	0x080118b0
                status = 0x03;
 80077c0:	2303      	movs	r3, #3
 80077c2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80077c6:	1ca3      	adds	r3, r4, #2
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f815 2009 	ldrb.w	r2, [r5, r9]
 80077ce:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80077d2:	1ce1      	adds	r1, r4, #3
 80077d4:	b2c9      	uxtb	r1, r1
 80077d6:	5ceb      	ldrb	r3, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80077d8:	1d22      	adds	r2, r4, #4
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	5c69      	ldrb	r1, [r5, r1]
 80077de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80077e2:	3405      	adds	r4, #5
 80077e4:	b2e4      	uxtb	r4, r4
 80077e6:	5caa      	ldrb	r2, [r5, r2]
 80077e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                dlChannelReq.Rx1Frequency *= 100;
 80077ec:	2264      	movs	r2, #100	; 0x64
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80077f4:	a907      	add	r1, sp, #28
 80077f6:	4b71      	ldr	r3, [pc, #452]	; (80079bc <ProcessMacCommands+0x594>)
 80077f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80077fc:	f003 fd91 	bl	800b322 <RegionDlChannelReq>
 8007800:	b2c3      	uxtb	r3, r0
 8007802:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8007806:	2800      	cmp	r0, #0
 8007808:	f6ff ae1a 	blt.w	8007440 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800780c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8007810:	2201      	movs	r2, #1
 8007812:	a90b      	add	r1, sp, #44	; 0x2c
 8007814:	200a      	movs	r0, #10
 8007816:	f002 fd79 	bl	800a30c <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 800781a:	f7ff fbb3 	bl	8006f84 <SetMlmeScheduleUplinkIndication>
                break;
 800781e:	e60f      	b.n	8007440 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8007820:	200a      	movs	r0, #10
 8007822:	f002 ff37 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 8007826:	b908      	cbnz	r0, 800782c <ProcessMacCommands+0x404>
        switch( payload[macIndex++] )
 8007828:	464c      	mov	r4, r9
 800782a:	e609      	b.n	8007440 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800782c:	210a      	movs	r1, #10
 800782e:	2000      	movs	r0, #0
 8007830:	f002 fee4 	bl	800a5fc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8007834:	2300      	movs	r3, #0
 8007836:	f8ad 3012 	strh.w	r3, [sp, #18]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800783a:	1ca1      	adds	r1, r4, #2
 800783c:	b2c9      	uxtb	r1, r1
 800783e:	f815 3009 	ldrb.w	r3, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007842:	1ce2      	adds	r2, r4, #3
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	5c69      	ldrb	r1, [r5, r1]
 8007848:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800784c:	1d21      	adds	r1, r4, #4
 800784e:	b2c9      	uxtb	r1, r1
 8007850:	5caa      	ldrb	r2, [r5, r2]
 8007852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007856:	1d62      	adds	r2, r4, #5
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	5c69      	ldrb	r1, [r5, r1]
 800785c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007860:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8007862:	3406      	adds	r4, #6
 8007864:	b2e4      	uxtb	r4, r4
 8007866:	5ca9      	ldrb	r1, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800786c:	fb02 f201 	mul.w	r2, r2, r1
 8007870:	0a12      	lsrs	r2, r2, #8
 8007872:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8007876:	f10d 0914 	add.w	r9, sp, #20
 800787a:	9904      	ldr	r1, [sp, #16]
 800787c:	4618      	mov	r0, r3
 800787e:	e889 0003 	stmia.w	r9, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8007882:	4a4f      	ldr	r2, [pc, #316]	; (80079c0 <ProcessMacCommands+0x598>)
 8007884:	441a      	add	r2, r3
 8007886:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8007888:	f10d 0b1c 	add.w	fp, sp, #28
 800788c:	4658      	mov	r0, fp
 800788e:	f009 f907 	bl	8010aa0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8007892:	f8df a130 	ldr.w	sl, [pc, #304]	; 80079c4 <ProcessMacCommands+0x59c>
 8007896:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 80078a0:	e899 0006 	ldmia.w	r9, {r1, r2}
 80078a4:	a80c      	add	r0, sp, #48	; 0x30
 80078a6:	f009 f8bc 	bl	8010a22 <SysTimeSub>
 80078aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b0:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80078b4:	4648      	mov	r0, r9
 80078b6:	f009 f897 	bl	80109e8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80078ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80078be:	f009 f8cd 	bl	8010a5c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80078c2:	f002 fc8c 	bl	800a1de <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80078c6:	2301      	movs	r3, #1
 80078c8:	f88a 3434 	strb.w	r3, [sl, #1076]	; 0x434
 80078cc:	e5b8      	b.n	8007440 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80078ce:	200d      	movs	r0, #13
 80078d0:	f002 fee0 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 80078d4:	b908      	cbnz	r0, 80078da <ProcessMacCommands+0x4b2>
        switch( payload[macIndex++] )
 80078d6:	464c      	mov	r4, r9
 80078d8:	e5b2      	b.n	8007440 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80078da:	210d      	movs	r1, #13
 80078dc:	2000      	movs	r0, #0
 80078de:	f002 fe8d 	bl	800a5fc <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80078e2:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <ProcessMacCommands+0x59c>)
 80078e4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80078e8:	3b04      	subs	r3, #4
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d801      	bhi.n	80078f4 <ProcessMacCommands+0x4cc>
        switch( payload[macIndex++] )
 80078f0:	464c      	mov	r4, r9
 80078f2:	e5a5      	b.n	8007440 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 80078f4:	f002 fc6f 	bl	800a1d6 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80078f8:	464c      	mov	r4, r9
 80078fa:	e5a1      	b.n	8007440 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 80078fc:	1ca2      	adds	r2, r4, #2
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007904:	1ce1      	adds	r1, r4, #3
 8007906:	b2c9      	uxtb	r1, r1
 8007908:	5caa      	ldrb	r2, [r5, r2]
 800790a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800790e:	1d22      	adds	r2, r4, #4
 8007910:	b2d2      	uxtb	r2, r2
 8007912:	5c69      	ldrb	r1, [r5, r1]
 8007914:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8007918:	3405      	adds	r4, #5
 800791a:	b2e4      	uxtb	r4, r4
 800791c:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800791e:	2164      	movs	r1, #100	; 0x64
 8007920:	fb01 f103 	mul.w	r1, r1, r3
 8007924:	f000 000f 	and.w	r0, r0, #15
 8007928:	f002 fc56 	bl	800a1d8 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800792c:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8007930:	2201      	movs	r2, #1
 8007932:	a90b      	add	r1, sp, #44	; 0x2c
 8007934:	2011      	movs	r0, #17
 8007936:	f002 fce9 	bl	800a30c <LoRaMacCommandsAddCmd>
                break;
 800793a:	e581      	b.n	8007440 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800793c:	200e      	movs	r0, #14
 800793e:	f002 fea9 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 8007942:	b908      	cbnz	r0, 8007948 <ProcessMacCommands+0x520>
        switch( payload[macIndex++] )
 8007944:	464c      	mov	r4, r9
 8007946:	e57b      	b.n	8007440 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8007948:	210e      	movs	r1, #14
 800794a:	2000      	movs	r0, #0
 800794c:	f002 fe56 	bl	800a5fc <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8007950:	1ca2      	adds	r2, r4, #2
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007958:	1ce3      	adds	r3, r4, #3
 800795a:	b2db      	uxtb	r3, r3
 800795c:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8007960:	3404      	adds	r4, #4
 8007962:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007964:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <ProcessMacCommands+0x5a0>)
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	5ce9      	ldrb	r1, [r5, r3]
 800796a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800796e:	f002 fc35 	bl	800a1dc <LoRaMacClassBBeaconTimingAns>
 8007972:	e565      	b.n	8007440 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8007974:	1ca1      	adds	r1, r4, #2
 8007976:	b2c9      	uxtb	r1, r1
 8007978:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800797c:	1ce2      	adds	r2, r4, #3
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	5c68      	ldrb	r0, [r5, r1]
 8007982:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007986:	3404      	adds	r4, #4
 8007988:	b2e4      	uxtb	r4, r4
 800798a:	5ca8      	ldrb	r0, [r5, r2]
 800798c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007990:	2064      	movs	r0, #100	; 0x64
 8007992:	fb00 f003 	mul.w	r0, r0, r3
 8007996:	f002 fc23 	bl	800a1e0 <LoRaMacClassBBeaconFreqReq>
 800799a:	b140      	cbz	r0, 80079ae <ProcessMacCommands+0x586>
                        macCmdPayload[0] = 1;
 800799c:	2301      	movs	r3, #1
 800799e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80079a2:	2201      	movs	r2, #1
 80079a4:	a90b      	add	r1, sp, #44	; 0x2c
 80079a6:	2013      	movs	r0, #19
 80079a8:	f002 fcb0 	bl	800a30c <LoRaMacCommandsAddCmd>
                break;
 80079ac:	e548      	b.n	8007440 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80079b4:	e7f5      	b.n	80079a2 <ProcessMacCommands+0x57a>
}
 80079b6:	b00f      	add	sp, #60	; 0x3c
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	200008fc 	.word	0x200008fc
 80079c0:	12d53d80 	.word	0x12d53d80
 80079c4:	200003f4 	.word	0x200003f4
 80079c8:	200019d0 	.word	0x200019d0

080079cc <ProcessRadioRxDone>:
{
 80079cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079d0:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 80079d2:	4bbd      	ldr	r3, [pc, #756]	; (8007cc8 <ProcessRadioRxDone+0x2fc>)
 80079d4:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80079d6:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80079d8:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80079dc:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80079e4:	4ab9      	ldr	r2, [pc, #740]	; (8007ccc <ProcessRadioRxDone+0x300>)
 80079e6:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 80079ea:	4cb9      	ldr	r4, [pc, #740]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 80079ec:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80079f0:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 80079f4:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80079f8:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 80079fc:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8007a00:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8007a04:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8007a08:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8007a0c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8007a10:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8007a14:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8007a18:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8007a1c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007a20:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8007a24:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8007a28:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8007a2c:	4ba9      	ldr	r3, [pc, #676]	; (8007cd4 <ProcessRadioRxDone+0x308>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8007a32:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8007a36:	f009 f91d 	bl	8010c74 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f002 fbb7 	bl	800a1b0 <LoRaMacClassBRxBeacon>
 8007a42:	b998      	cbnz	r0, 8007a6c <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007a44:	4ba1      	ldr	r3, [pc, #644]	; (8007ccc <ProcessRadioRxDone+0x300>)
 8007a46:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d013      	beq.n	8007a76 <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8007a4e:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8007a50:	0963      	lsrs	r3, r4, #5
 8007a52:	3b01      	subs	r3, #1
 8007a54:	2b06      	cmp	r3, #6
 8007a56:	f200 827c 	bhi.w	8007f52 <ProcessRadioRxDone+0x586>
 8007a5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007a5e:	0029      	.short	0x0029
 8007a60:	00a7027a 	.word	0x00a7027a
 8007a64:	00a3027a 	.word	0x00a3027a
 8007a68:	0254027a 	.word	0x0254027a
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8007a6c:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8007a70:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 8007a74:	e282      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007a76:	f002 fb9f 	bl	800a1b8 <LoRaMacClassBIsPingExpected>
 8007a7a:	b150      	cbz	r0, 8007a92 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f002 fb90 	bl	800a1a2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007a82:	2000      	movs	r0, #0
 8007a84:	f002 fb92 	bl	800a1ac <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8007a88:	4b91      	ldr	r3, [pc, #580]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8007a90:	e7dd      	b.n	8007a4e <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007a92:	f002 fb93 	bl	800a1bc <LoRaMacClassBIsMulticastExpected>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0d9      	beq.n	8007a4e <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f002 fb82 	bl	800a1a4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f002 fb84 	bl	800a1ae <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8007aa6:	4b8a      	ldr	r3, [pc, #552]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007aa8:	2205      	movs	r2, #5
 8007aaa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8007aae:	e7ce      	b.n	8007a4e <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8007ab0:	2d10      	cmp	r5, #16
 8007ab2:	d95a      	bls.n	8007b6a <ProcessRadioRxDone+0x19e>
            macMsgJoinAccept.Buffer = payload;
 8007ab4:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 8007ab6:	b2ed      	uxtb	r5, r5
 8007ab8:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007abc:	4b83      	ldr	r3, [pc, #524]	; (8007ccc <ProcessRadioRxDone+0x300>)
 8007abe:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d158      	bne.n	8007b78 <ProcessRadioRxDone+0x1ac>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8007ac6:	f006 fbe1 	bl	800e28c <SecureElementGetJoinEui>
 8007aca:	4601      	mov	r1, r0
 8007acc:	aa07      	add	r2, sp, #28
 8007ace:	20ff      	movs	r0, #255	; 0xff
 8007ad0:	f003 f976 	bl	800adc0 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d15b      	bne.n	8007b90 <ProcessRadioRxDone+0x1c4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8007ad8:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8007adc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8007ae0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8007ae4:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8007ae8:	4b78      	ldr	r3, [pc, #480]	; (8007ccc <ProcessRadioRxDone+0x300>)
 8007aea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007aee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8007af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007af4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8007af8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8007afc:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8007b00:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007b04:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8007b08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007b0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8007b10:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8007b14:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8007b16:	b90a      	cbnz	r2, 8007b1c <ProcessRadioRxDone+0x150>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8007b18:	2201      	movs	r2, #1
 8007b1a:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8007b1c:	4c6b      	ldr	r4, [pc, #428]	; (8007ccc <ProcessRadioRxDone+0x300>)
 8007b1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b24:	fb03 f302 	mul.w	r3, r3, r2
 8007b28:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007b2a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007b2e:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8007b36:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8007b3a:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 8007b3c:	3d11      	subs	r5, #17
 8007b3e:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007b42:	a920      	add	r1, sp, #128	; 0x80
 8007b44:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007b48:	f003 fb55 	bl	800b1f6 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007b52:	2001      	movs	r0, #1
 8007b54:	f002 fd9e 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 8007b58:	b9a8      	cbnz	r0, 8007b86 <ProcessRadioRxDone+0x1ba>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8007b5a:	4a5d      	ldr	r2, [pc, #372]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007b5c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007b60:	f043 0308 	orr.w	r3, r3, #8
 8007b64:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8007b68:	e1e7      	b.n	8007f3a <ProcessRadioRxDone+0x56e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b6a:	4b59      	ldr	r3, [pc, #356]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007b72:	f7ff fbe3 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007b76:	e201      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007b78:	4b55      	ldr	r3, [pc, #340]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007b80:	f7ff fbdc 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007b84:	e1fa      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8007b86:	2101      	movs	r1, #1
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f002 fd37 	bl	800a5fc <LoRaMacConfirmQueueSetStatus>
 8007b8e:	e7e4      	b.n	8007b5a <ProcessRadioRxDone+0x18e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007b90:	2001      	movs	r0, #1
 8007b92:	f002 fd7f 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d0df      	beq.n	8007b5a <ProcessRadioRxDone+0x18e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	2007      	movs	r0, #7
 8007b9e:	f002 fd2d 	bl	800a5fc <LoRaMacConfirmQueueSetStatus>
 8007ba2:	e7da      	b.n	8007b5a <ProcessRadioRxDone+0x18e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007ba4:	4b4a      	ldr	r3, [pc, #296]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007bac:	4b47      	ldr	r3, [pc, #284]	; (8007ccc <ProcessRadioRxDone+0x300>)
 8007bae:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8007bb2:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8007bb6:	4a46      	ldr	r2, [pc, #280]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007bb8:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 8007bbc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007bc0:	220d      	movs	r2, #13
 8007bc2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007bc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bca:	b113      	cbz	r3, 8007bd2 <ProcessRadioRxDone+0x206>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007bcc:	230e      	movs	r3, #14
 8007bce:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007bd2:	a91e      	add	r1, sp, #120	; 0x78
 8007bd4:	4b3d      	ldr	r3, [pc, #244]	; (8007ccc <ProcessRadioRxDone+0x300>)
 8007bd6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007bda:	f003 fac8 	bl	800b16e <RegionGetPhyParam>
 8007bde:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8007be0:	f1a5 030d 	sub.w	r3, r5, #13
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007bea:	b200      	sxth	r0, r0
 8007bec:	4283      	cmp	r3, r0
 8007bee:	dc01      	bgt.n	8007bf4 <ProcessRadioRxDone+0x228>
 8007bf0:	2d0b      	cmp	r5, #11
 8007bf2:	d806      	bhi.n	8007c02 <ProcessRadioRxDone+0x236>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007bf4:	4b36      	ldr	r3, [pc, #216]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007bfc:	f7ff fb9e 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007c00:	e1bc      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
            macMsgData.Buffer = payload;
 8007c02:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8007c04:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8007c08:	4b33      	ldr	r3, [pc, #204]	; (8007cd8 <ProcessRadioRxDone+0x30c>)
 8007c0a:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8007c0c:	23ff      	movs	r3, #255	; 0xff
 8007c0e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8007c12:	a811      	add	r0, sp, #68	; 0x44
 8007c14:	f003 f998 	bl	800af48 <LoRaMacParserData>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d146      	bne.n	8007caa <ProcessRadioRxDone+0x2de>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8007c1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c1e:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007c20:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8007c24:	f10d 0116 	add.w	r1, sp, #22
 8007c28:	a811      	add	r0, sp, #68	; 0x44
 8007c2a:	f7ff f9e1 	bl	8006ff0 <DetermineFrameType>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d141      	bne.n	8007cb8 <ProcessRadioRxDone+0x2ec>
            downLinkCounter = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d04e      	beq.n	8007cdc <ProcessRadioRxDone+0x310>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8007c3e:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8007c40:	2d01      	cmp	r5, #1
 8007c42:	d108      	bne.n	8007c56 <ProcessRadioRxDone+0x28a>
 8007c44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d174      	bne.n	8007d36 <ProcessRadioRxDone+0x36a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8007c4c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8007c50:	f013 0f60 	tst.w	r3, #96	; 0x60
 8007c54:	d16f      	bne.n	8007d36 <ProcessRadioRxDone+0x36a>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8007c56:	2315      	movs	r3, #21
 8007c58:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c5c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8007ccc <ProcessRadioRxDone+0x300>
 8007c60:	a91e      	add	r1, sp, #120	; 0x78
 8007c62:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8007c66:	f003 fa82 	bl	800b16e <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8007c6a:	ab06      	add	r3, sp, #24
 8007c6c:	9302      	str	r3, [sp, #8]
 8007c6e:	f10d 0317 	add.w	r3, sp, #23
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	b280      	uxth	r0, r0
 8007c76:	9000      	str	r0, [sp, #0]
 8007c78:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
 8007c7c:	aa11      	add	r2, sp, #68	; 0x44
 8007c7e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff fb94 	bl	80073b0 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d075      	beq.n	8007d78 <ProcessRadioRxDone+0x3ac>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8007c8c:	2807      	cmp	r0, #7
 8007c8e:	d059      	beq.n	8007d44 <ProcessRadioRxDone+0x378>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8007c90:	2808      	cmp	r0, #8
 8007c92:	d06c      	beq.n	8007d6e <ProcessRadioRxDone+0x3a2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007c94:	4b0e      	ldr	r3, [pc, #56]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007c9c:	4b0c      	ldr	r3, [pc, #48]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007c9e:	9a06      	ldr	r2, [sp, #24]
 8007ca0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8007ca4:	f7ff fb4a 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007ca8:	e168      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007cb2:	f7ff fb43 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007cb6:	e161      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <ProcessRadioRxDone+0x304>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007cc0:	f7ff fb3c 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007cc4:	e15a      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
 8007cc6:	bf00      	nop
 8007cc8:	200019d0 	.word	0x200019d0
 8007ccc:	200008fc 	.word	0x200008fc
 8007cd0:	200003f4 	.word	0x200003f4
 8007cd4:	08011ee8 	.word	0x08011ee8
 8007cd8:	2000062c 	.word	0x2000062c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007cdc:	4618      	mov	r0, r3
 8007cde:	49ab      	ldr	r1, [pc, #684]	; (8007f8c <ProcessRadioRxDone+0x5c0>)
 8007ce0:	222c      	movs	r2, #44	; 0x2c
 8007ce2:	fb02 1203 	mla	r2, r2, r3, r1
 8007ce6:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8007cea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007cec:	428a      	cmp	r2, r1
 8007cee:	d002      	beq.n	8007cf6 <ProcessRadioRxDone+0x32a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	e7a1      	b.n	8007c3a <ProcessRadioRxDone+0x26e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8007cf6:	4ea5      	ldr	r6, [pc, #660]	; (8007f8c <ProcessRadioRxDone+0x5c0>)
 8007cf8:	212c      	movs	r1, #44	; 0x2c
 8007cfa:	fb01 6103 	mla	r1, r1, r3, r6
 8007cfe:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007d02:	2900      	cmp	r1, #0
 8007d04:	d0f4      	beq.n	8007cf0 <ProcessRadioRxDone+0x324>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8007d06:	4633      	mov	r3, r6
 8007d08:	212c      	movs	r1, #44	; 0x2c
 8007d0a:	fb01 6000 	mla	r0, r1, r0, r6
 8007d0e:	f890 60d3 	ldrb.w	r6, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8007d12:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8007d16:	6809      	ldr	r1, [r1, #0]
 8007d18:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007d1a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d002      	beq.n	8007d28 <ProcessRadioRxDone+0x35c>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007d22:	4690      	mov	r8, r2
                    multicast = 1;
 8007d24:	2501      	movs	r5, #1
 8007d26:	e78b      	b.n	8007c40 <ProcessRadioRxDone+0x274>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007d28:	4b99      	ldr	r3, [pc, #612]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007d2a:	2103      	movs	r1, #3
 8007d2c:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007d30:	4690      	mov	r8, r2
                    multicast = 1;
 8007d32:	2501      	movs	r5, #1
 8007d34:	e784      	b.n	8007c40 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007d36:	4b96      	ldr	r3, [pc, #600]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007d3e:	f7ff fafd 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007d42:	e11b      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8007d44:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007d46:	2208      	movs	r2, #8
 8007d48:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8007d4c:	f899 310e 	ldrb.w	r3, [r9, #270]	; 0x10e
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1a3      	bne.n	8007c9c <ProcessRadioRxDone+0x2d0>
 8007d54:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8007d58:	2ca0      	cmp	r4, #160	; 0xa0
 8007d5a:	d19f      	bne.n	8007c9c <ProcessRadioRxDone+0x2d0>
 8007d5c:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 8007d60:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d19a      	bne.n	8007c9c <ProcessRadioRxDone+0x2d0>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8007d66:	2201      	movs	r2, #1
 8007d68:	f889 203a 	strb.w	r2, [r9, #58]	; 0x3a
 8007d6c:	e796      	b.n	8007c9c <ProcessRadioRxDone+0x2d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8007d6e:	4b88      	ldr	r3, [pc, #544]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007d70:	220a      	movs	r2, #10
 8007d72:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8007d76:	e791      	b.n	8007c9c <ProcessRadioRxDone+0x2d0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8007d78:	ab11      	add	r3, sp, #68	; 0x44
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	9b06      	ldr	r3, [sp, #24]
 8007d7e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007d82:	4641      	mov	r1, r8
 8007d84:	4630      	mov	r0, r6
 8007d86:	f002 ff6f 	bl	800ac68 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d13a      	bne.n	8007e04 <ProcessRadioRxDone+0x438>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007d8e:	4b80      	ldr	r3, [pc, #512]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007d90:	2100      	movs	r1, #0
 8007d92:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8007d96:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007d9a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007d9e:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8007da2:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8007da6:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8007daa:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007dae:	9806      	ldr	r0, [sp, #24]
 8007db0:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007db4:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007db8:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007dbc:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007dc0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007dc4:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8007dc8:	2801      	cmp	r0, #1
 8007dca:	d929      	bls.n	8007e20 <ProcessRadioRxDone+0x454>
            if( multicast == 1 )
 8007dcc:	2d01      	cmp	r5, #1
 8007dce:	d02a      	beq.n	8007e26 <ProcessRadioRxDone+0x45a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8007dd0:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8007dd4:	2ca0      	cmp	r4, #160	; 0xa0
 8007dd6:	d02b      	beq.n	8007e30 <ProcessRadioRxDone+0x464>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4a6c      	ldr	r2, [pc, #432]	; (8007f8c <ProcessRadioRxDone+0x5c0>)
 8007ddc:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007de0:	4a6b      	ldr	r2, [pc, #428]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007de2:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8007de6:	4b6a      	ldr	r3, [pc, #424]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007de8:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 8007dec:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8007df0:	f7ff fb0a 	bl	8007408 <RemoveMacCommands>
            switch( fType )
 8007df4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d87d      	bhi.n	8007ef8 <ProcessRadioRxDone+0x52c>
 8007dfc:	e8df f003 	tbb	[pc, r3]
 8007e00:	6c5c4a27 	.word	0x6c5c4a27
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8007e04:	2802      	cmp	r0, #2
 8007e06:	d006      	beq.n	8007e16 <ProcessRadioRxDone+0x44a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8007e08:	4b61      	ldr	r3, [pc, #388]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007e0a:	220c      	movs	r2, #12
 8007e0c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8007e10:	f7ff fa94 	bl	800733c <PrepareRxDoneAbort>
                return;
 8007e14:	e0b2      	b.n	8007f7c <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8007e16:	4b5e      	ldr	r3, [pc, #376]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007e18:	220b      	movs	r2, #11
 8007e1a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8007e1e:	e7f7      	b.n	8007e10 <ProcessRadioRxDone+0x444>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8007e20:	4b5a      	ldr	r3, [pc, #360]	; (8007f8c <ProcessRadioRxDone+0x5c0>)
 8007e22:	6299      	str	r1, [r3, #40]	; 0x28
 8007e24:	e7d2      	b.n	8007dcc <ProcessRadioRxDone+0x400>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8007e26:	4b5a      	ldr	r3, [pc, #360]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8007e2e:	e7da      	b.n	8007de6 <ProcessRadioRxDone+0x41a>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8007e30:	4b56      	ldr	r3, [pc, #344]	; (8007f8c <ProcessRadioRxDone+0x5c0>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8007e38:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8007e3c:	b913      	cbnz	r3, 8007e44 <ProcessRadioRxDone+0x478>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8007e3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e40:	4b52      	ldr	r3, [pc, #328]	; (8007f8c <ProcessRadioRxDone+0x5c0>)
 8007e42:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007e44:	4b52      	ldr	r3, [pc, #328]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8007e4c:	e7cb      	b.n	8007de6 <ProcessRadioRxDone+0x41a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007e4e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007e52:	4c4f      	ldr	r4, [pc, #316]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007e54:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	f002 020f 	and.w	r2, r2, #15
 8007e60:	2100      	movs	r1, #0
 8007e62:	a815      	add	r0, sp, #84	; 0x54
 8007e64:	f7ff fae0 	bl	8007428 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007e68:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007e6c:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007e70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e72:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007e76:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8007e7a:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007e84:	4a42      	ldr	r2, [pc, #264]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007e86:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007e8a:	f043 0302 	orr.w	r3, r3, #2
 8007e8e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8007e92:	e052      	b.n	8007f3a <ProcessRadioRxDone+0x56e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007e94:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8007e98:	4c3d      	ldr	r4, [pc, #244]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007e9a:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	f002 020f 	and.w	r2, r2, #15
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	a815      	add	r0, sp, #84	; 0x54
 8007eaa:	f7ff fabd 	bl	8007428 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007eae:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007eb2:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8007eb6:	e7e5      	b.n	8007e84 <ProcessRadioRxDone+0x4b8>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8007eb8:	4c35      	ldr	r4, [pc, #212]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007eba:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007eca:	f7ff faad 	bl	8007428 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007ece:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007ed2:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8007ed6:	e7d5      	b.n	8007e84 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007ed8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8007edc:	4b2c      	ldr	r3, [pc, #176]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007ede:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007ee2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ee4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007ee8:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8007eec:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8007ef6:	e7c5      	b.n	8007e84 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8007f00:	f7ff fa1c 	bl	800733c <PrepareRxDoneAbort>
                    break;
 8007f04:	e7be      	b.n	8007e84 <ProcessRadioRxDone+0x4b8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8007f06:	1e6a      	subs	r2, r5, #1
 8007f08:	4c21      	ldr	r4, [pc, #132]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007f0a:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8007f0e:	b292      	uxth	r2, r2
 8007f10:	1c71      	adds	r1, r6, #1
 8007f12:	4638      	mov	r0, r7
 8007f14:	f006 f9eb 	bl	800e2ee <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8007f24:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8007f28:	3d01      	subs	r5, #1
 8007f2a:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007f2e:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8007f32:	f043 0302 	orr.w	r3, r3, #2
 8007f36:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8007f3a:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007f3c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007f40:	b173      	cbz	r3, 8007f60 <ProcessRadioRxDone+0x594>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007f42:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007f44:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8007f48:	b17b      	cbz	r3, 8007f6a <ProcessRadioRxDone+0x59e>
            OnAckTimeoutTimerEvent( NULL );
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	f7ff f9d0 	bl	80072f0 <OnAckTimeoutTimerEvent>
 8007f50:	e00b      	b.n	8007f6a <ProcessRadioRxDone+0x59e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007f52:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8007f5a:	f7ff f9ef 	bl	800733c <PrepareRxDoneAbort>
            break;
 8007f5e:	e7ec      	b.n	8007f3a <ProcessRadioRxDone+0x56e>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <ProcessRadioRxDone+0x5c0>)
 8007f62:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d00b      	beq.n	8007f82 <ProcessRadioRxDone+0x5b6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007f6a:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <ProcessRadioRxDone+0x5c4>)
 8007f6c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007f70:	f043 0320 	orr.w	r3, r3, #32
 8007f74:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007f78:	f7fe ff92 	bl	8006ea0 <UpdateRxSlotIdleState>
}
 8007f7c:	b023      	add	sp, #140	; 0x8c
 8007f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8007f82:	2000      	movs	r0, #0
 8007f84:	f7ff f9b4 	bl	80072f0 <OnAckTimeoutTimerEvent>
 8007f88:	e7ef      	b.n	8007f6a <ProcessRadioRxDone+0x59e>
 8007f8a:	bf00      	nop
 8007f8c:	200008fc 	.word	0x200008fc
 8007f90:	200003f4 	.word	0x200003f4

08007f94 <ProcessRadioTxTimeout>:
{
 8007f94:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <ProcessRadioTxTimeout+0x40>)
 8007f98:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d002      	beq.n	8007fa6 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <ProcessRadioTxTimeout+0x44>)
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8007fa6:	f7fe ff7b 	bl	8006ea0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8007faa:	4c0c      	ldr	r4, [pc, #48]	; (8007fdc <ProcessRadioTxTimeout+0x48>)
 8007fac:	2002      	movs	r0, #2
 8007fae:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8007fb2:	f002 fb51 	bl	800a658 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8007fb6:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007fba:	b113      	cbz	r3, 8007fc2 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007fc2:	4a06      	ldr	r2, [pc, #24]	; (8007fdc <ProcessRadioTxTimeout+0x48>)
 8007fc4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007fc8:	f043 0320 	orr.w	r3, r3, #32
 8007fcc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	bf00      	nop
 8007fd4:	200008fc 	.word	0x200008fc
 8007fd8:	08011ee8 	.word	0x08011ee8
 8007fdc:	200003f4 	.word	0x200003f4

08007fe0 <CheckForClassBCollision>:
{
 8007fe0:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007fe2:	f002 f8e7 	bl	800a1b4 <LoRaMacClassBIsBeaconExpected>
 8007fe6:	b978      	cbnz	r0, 8008008 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007fe8:	4b09      	ldr	r3, [pc, #36]	; (8008010 <CheckForClassBCollision+0x30>)
 8007fea:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d001      	beq.n	8007ff6 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8007ff2:	2000      	movs	r0, #0
}
 8007ff4:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007ff6:	f002 f8df 	bl	800a1b8 <LoRaMacClassBIsPingExpected>
 8007ffa:	b938      	cbnz	r0, 800800c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007ffc:	f002 f8de 	bl	800a1bc <LoRaMacClassBIsMulticastExpected>
 8008000:	2800      	cmp	r0, #0
 8008002:	d0f7      	beq.n	8007ff4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008004:	200f      	movs	r0, #15
 8008006:	e7f5      	b.n	8007ff4 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008008:	200e      	movs	r0, #14
 800800a:	e7f3      	b.n	8007ff4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800800c:	200f      	movs	r0, #15
 800800e:	e7f1      	b.n	8007ff4 <CheckForClassBCollision+0x14>
 8008010:	200008fc 	.word	0x200008fc

08008014 <HandleRadioRxErrorTimeout>:
{
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	4605      	mov	r5, r0
 8008018:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800801a:	4b37      	ldr	r3, [pc, #220]	; (80080f8 <HandleRadioRxErrorTimeout+0xe4>)
 800801c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008020:	2b02      	cmp	r3, #2
 8008022:	d002      	beq.n	800802a <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008024:	4b35      	ldr	r3, [pc, #212]	; (80080fc <HandleRadioRxErrorTimeout+0xe8>)
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800802a:	f002 f8c3 	bl	800a1b4 <LoRaMacClassBIsBeaconExpected>
 800802e:	4606      	mov	r6, r0
 8008030:	bb00      	cbnz	r0, 8008074 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008032:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <HandleRadioRxErrorTimeout+0xe4>)
 8008034:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008038:	2b01      	cmp	r3, #1
 800803a:	d022      	beq.n	8008082 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 800803c:	b9be      	cbnz	r6, 800806e <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800803e:	4b30      	ldr	r3, [pc, #192]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 8008040:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008044:	2b00      	cmp	r3, #0
 8008046:	d13f      	bne.n	80080c8 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8008048:	4b2d      	ldr	r3, [pc, #180]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 800804a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800804e:	b113      	cbz	r3, 8008056 <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008050:	4b2b      	ldr	r3, [pc, #172]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 8008052:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008056:	4628      	mov	r0, r5
 8008058:	f002 fafe 	bl	800a658 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800805c:	4b26      	ldr	r3, [pc, #152]	; (80080f8 <HandleRadioRxErrorTimeout+0xe4>)
 800805e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008060:	f008 fdd2 	bl	8010c08 <UTIL_TIMER_GetElapsedTime>
 8008064:	4b26      	ldr	r3, [pc, #152]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 8008066:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800806a:	4298      	cmp	r0, r3
 800806c:	d220      	bcs.n	80080b0 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 800806e:	f7fe ff17 	bl	8006ea0 <UpdateRxSlotIdleState>
}
 8008072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008074:	2002      	movs	r0, #2
 8008076:	f002 f893 	bl	800a1a0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800807a:	2000      	movs	r0, #0
 800807c:	f002 f895 	bl	800a1aa <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008080:	e7d7      	b.n	8008032 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008082:	f002 f899 	bl	800a1b8 <LoRaMacClassBIsPingExpected>
 8008086:	4607      	mov	r7, r0
 8008088:	b950      	cbnz	r0, 80080a0 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800808a:	f002 f897 	bl	800a1bc <LoRaMacClassBIsMulticastExpected>
 800808e:	2800      	cmp	r0, #0
 8008090:	d0d4      	beq.n	800803c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008092:	2000      	movs	r0, #0
 8008094:	f002 f886 	bl	800a1a4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008098:	2000      	movs	r0, #0
 800809a:	f002 f888 	bl	800a1ae <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800809e:	e7e6      	b.n	800806e <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80080a0:	2000      	movs	r0, #0
 80080a2:	f002 f87e 	bl	800a1a2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80080a6:	2000      	movs	r0, #0
 80080a8:	f002 f880 	bl	800a1ac <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80080ac:	463e      	mov	r6, r7
 80080ae:	e7ec      	b.n	800808a <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80080b0:	4c13      	ldr	r4, [pc, #76]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 80080b2:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80080b6:	f008 fddd 	bl	8010c74 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80080ba:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 80080be:	f043 0320 	orr.w	r3, r3, #32
 80080c2:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 80080c6:	e7d2      	b.n	800806e <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 80080ca:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80080ce:	b113      	cbz	r3, 80080d6 <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 80080d2:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80080d6:	4620      	mov	r0, r4
 80080d8:	f002 fabe 	bl	800a658 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80080dc:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <HandleRadioRxErrorTimeout+0xe4>)
 80080de:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d0c3      	beq.n	800806e <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80080e6:	4a06      	ldr	r2, [pc, #24]	; (8008100 <HandleRadioRxErrorTimeout+0xec>)
 80080e8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80080ec:	f043 0320 	orr.w	r3, r3, #32
 80080f0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80080f4:	e7bb      	b.n	800806e <HandleRadioRxErrorTimeout+0x5a>
 80080f6:	bf00      	nop
 80080f8:	200008fc 	.word	0x200008fc
 80080fc:	08011ee8 	.word	0x08011ee8
 8008100:	200003f4 	.word	0x200003f4

08008104 <ProcessRadioRxError>:
{
 8008104:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008106:	2106      	movs	r1, #6
 8008108:	2005      	movs	r0, #5
 800810a:	f7ff ff83 	bl	8008014 <HandleRadioRxErrorTimeout>
}
 800810e:	bd08      	pop	{r3, pc}

08008110 <ProcessRadioRxTimeout>:
{
 8008110:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008112:	2104      	movs	r1, #4
 8008114:	2003      	movs	r0, #3
 8008116:	f7ff ff7d 	bl	8008014 <HandleRadioRxErrorTimeout>
}
 800811a:	bd08      	pop	{r3, pc}

0800811c <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800811c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008120:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008122:	4a14      	ldr	r2, [pc, #80]	; (8008174 <LoRaMacHandleIrqEvents+0x58>)
 8008124:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008126:	2000      	movs	r0, #0
 8008128:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800812a:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800812e:	b303      	cbz	r3, 8008172 <LoRaMacHandleIrqEvents+0x56>
{
 8008130:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008132:	b2dc      	uxtb	r4, r3
 8008134:	f013 0f10 	tst.w	r3, #16
 8008138:	d10c      	bne.n	8008154 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800813a:	f014 0f08 	tst.w	r4, #8
 800813e:	d10c      	bne.n	800815a <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008140:	f014 0f04 	tst.w	r4, #4
 8008144:	d10c      	bne.n	8008160 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008146:	f014 0f02 	tst.w	r4, #2
 800814a:	d10c      	bne.n	8008166 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800814c:	f014 0f01 	tst.w	r4, #1
 8008150:	d10c      	bne.n	800816c <LoRaMacHandleIrqEvents+0x50>
}
 8008152:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008154:	f7ff f84e 	bl	80071f4 <ProcessRadioTxDone>
 8008158:	e7ef      	b.n	800813a <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800815a:	f7ff fc37 	bl	80079cc <ProcessRadioRxDone>
 800815e:	e7ef      	b.n	8008140 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008160:	f7ff ff18 	bl	8007f94 <ProcessRadioTxTimeout>
 8008164:	e7ef      	b.n	8008146 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8008166:	f7ff ffcd 	bl	8008104 <ProcessRadioRxError>
 800816a:	e7ef      	b.n	800814c <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800816c:	f7ff ffd0 	bl	8008110 <ProcessRadioRxTimeout>
}
 8008170:	e7ef      	b.n	8008152 <LoRaMacHandleIrqEvents+0x36>
 8008172:	4770      	bx	lr
 8008174:	200003f0 	.word	0x200003f0

08008178 <LoRaMacHandleMlmeRequest>:
{
 8008178:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800817a:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <LoRaMacHandleMlmeRequest+0x5c>)
 800817c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008180:	f013 0f04 	tst.w	r3, #4
 8008184:	d100      	bne.n	8008188 <LoRaMacHandleMlmeRequest+0x10>
}
 8008186:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008188:	2001      	movs	r0, #1
 800818a:	f002 fa83 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 800818e:	b178      	cbz	r0, 80081b0 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008190:	2001      	movs	r0, #1
 8008192:	f002 fa49 	bl	800a628 <LoRaMacConfirmQueueGetStatus>
 8008196:	b918      	cbnz	r0, 80081a0 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8008198:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <LoRaMacHandleMlmeRequest+0x5c>)
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80081a0:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <LoRaMacHandleMlmeRequest+0x5c>)
 80081a2:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80081a6:	f023 0302 	bic.w	r3, r3, #2
 80081aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 80081ae:	e7ea      	b.n	8008186 <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80081b0:	2005      	movs	r0, #5
 80081b2:	f002 fa6f 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
 80081b6:	b138      	cbz	r0, 80081c8 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80081b8:	4a06      	ldr	r2, [pc, #24]	; (80081d4 <LoRaMacHandleMlmeRequest+0x5c>)
 80081ba:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80081be:	f023 0302 	bic.w	r3, r3, #2
 80081c2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80081c6:	e7de      	b.n	8008186 <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80081c8:	2006      	movs	r0, #6
 80081ca:	f002 fa63 	bl	800a694 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0d9      	beq.n	8008186 <LoRaMacHandleMlmeRequest+0xe>
 80081d2:	e7f1      	b.n	80081b8 <LoRaMacHandleMlmeRequest+0x40>
 80081d4:	200003f4 	.word	0x200003f4

080081d8 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 80081d8:	4b14      	ldr	r3, [pc, #80]	; (800822c <AckTimeoutRetriesFinalize+0x54>)
 80081da:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80081de:	b12b      	cbz	r3, 80081ec <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <AckTimeoutRetriesFinalize+0x54>)
 80081e2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80081e6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 80081ea:	4770      	bx	lr
{
 80081ec:	b500      	push	{lr}
 80081ee:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80081f0:	2302      	movs	r3, #2
 80081f2:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80081f6:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <AckTimeoutRetriesFinalize+0x58>)
 80081f8:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 80081fc:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80081fe:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8008202:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008204:	a901      	add	r1, sp, #4
 8008206:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800820a:	f002 ffd6 	bl	800b1ba <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800820e:	4b07      	ldr	r3, [pc, #28]	; (800822c <AckTimeoutRetriesFinalize+0x54>)
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8008216:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800821a:	4b04      	ldr	r3, [pc, #16]	; (800822c <AckTimeoutRetriesFinalize+0x54>)
 800821c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008220:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8008224:	b005      	add	sp, #20
 8008226:	f85d fb04 	ldr.w	pc, [sp], #4
 800822a:	bf00      	nop
 800822c:	200003f4 	.word	0x200003f4
 8008230:	200008fc 	.word	0x200008fc

08008234 <SerializeTxFrame>:
{
 8008234:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <SerializeTxFrame+0x40>)
 8008238:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800823c:	b11b      	cbz	r3, 8008246 <SerializeTxFrame+0x12>
 800823e:	2b04      	cmp	r3, #4
 8008240:	d00a      	beq.n	8008258 <SerializeTxFrame+0x24>
 8008242:	2003      	movs	r0, #3
}
 8008244:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008246:	480c      	ldr	r0, [pc, #48]	; (8008278 <SerializeTxFrame+0x44>)
 8008248:	f002 fedd 	bl	800b006 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800824c:	b968      	cbnz	r0, 800826a <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <SerializeTxFrame+0x40>)
 8008250:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008254:	801a      	strh	r2, [r3, #0]
            break;
 8008256:	e7f5      	b.n	8008244 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008258:	4807      	ldr	r0, [pc, #28]	; (8008278 <SerializeTxFrame+0x44>)
 800825a:	f002 ff0a 	bl	800b072 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800825e:	b930      	cbnz	r0, 800826e <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <SerializeTxFrame+0x40>)
 8008262:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008266:	801a      	strh	r2, [r3, #0]
            break;
 8008268:	e7ec      	b.n	8008244 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800826a:	2011      	movs	r0, #17
 800826c:	e7ea      	b.n	8008244 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800826e:	2011      	movs	r0, #17
 8008270:	e7e8      	b.n	8008244 <SerializeTxFrame+0x10>
 8008272:	bf00      	nop
 8008274:	200003f4 	.word	0x200003f4
 8008278:	200004fc 	.word	0x200004fc

0800827c <ComputeRxWindowParameters>:
{
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008280:	4c1d      	ldr	r4, [pc, #116]	; (80082f8 <ComputeRxWindowParameters+0x7c>)
 8008282:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008286:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800828a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800828e:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 8008292:	4630      	mov	r0, r6
 8008294:	f003 f885 	bl	800b3a2 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008298:	4d18      	ldr	r5, [pc, #96]	; (80082fc <ComputeRxWindowParameters+0x80>)
 800829a:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80082a2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80082a6:	b241      	sxtb	r1, r0
 80082a8:	4630      	mov	r0, r6
 80082aa:	f002 ffc1 	bl	800b230 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80082ae:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80082b6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80082ba:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 80082be:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80082c2:	f002 ffb5 	bl	800b230 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80082c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80082c8:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 80082cc:	440b      	add	r3, r1
 80082ce:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80082d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80082d4:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 80082d8:	4413      	add	r3, r2
 80082da:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80082de:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80082e2:	b93b      	cbnz	r3, 80082f4 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80082e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082e6:	4419      	add	r1, r3
 80082e8:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80082ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80082ee:	440a      	add	r2, r1
 80082f0:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 80082f4:	b002      	add	sp, #8
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	200008fc 	.word	0x200008fc
 80082fc:	200003f4 	.word	0x200003f4

08008300 <VerifyTxFrame>:
{
 8008300:	b510      	push	{r4, lr}
 8008302:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008308:	4b0d      	ldr	r3, [pc, #52]	; (8008340 <VerifyTxFrame+0x40>)
 800830a:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 800830e:	b914      	cbnz	r4, 8008316 <VerifyTxFrame+0x16>
}
 8008310:	4620      	mov	r0, r4
 8008312:	b002      	add	sp, #8
 8008314:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008316:	a801      	add	r0, sp, #4
 8008318:	f002 f86c 	bl	800a3f4 <LoRaMacCommandsGetSizeSerializedCmds>
 800831c:	4604      	mov	r4, r0
 800831e:	b968      	cbnz	r0, 800833c <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008320:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <VerifyTxFrame+0x40>)
 8008326:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800832a:	4b06      	ldr	r3, [pc, #24]	; (8008344 <VerifyTxFrame+0x44>)
 800832c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8008330:	f7fe ff4e 	bl	80071d0 <ValidatePayloadLength>
 8008334:	2800      	cmp	r0, #0
 8008336:	d1eb      	bne.n	8008310 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008338:	2408      	movs	r4, #8
 800833a:	e7e9      	b.n	8008310 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800833c:	2413      	movs	r4, #19
 800833e:	e7e7      	b.n	8008310 <VerifyTxFrame+0x10>
 8008340:	200008fc 	.word	0x200008fc
 8008344:	200003f4 	.word	0x200003f4

08008348 <SecureFrame>:
{
 8008348:	b530      	push	{r4, r5, lr}
 800834a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008350:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <SecureFrame+0x74>)
 8008352:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008356:	b133      	cbz	r3, 8008366 <SecureFrame+0x1e>
 8008358:	4605      	mov	r5, r0
 800835a:	460c      	mov	r4, r1
 800835c:	2b04      	cmp	r3, #4
 800835e:	d00b      	beq.n	8008378 <SecureFrame+0x30>
 8008360:	2003      	movs	r0, #3
}
 8008362:	b003      	add	sp, #12
 8008364:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008366:	4816      	ldr	r0, [pc, #88]	; (80083c0 <SecureFrame+0x78>)
 8008368:	f002 fc0e 	bl	800ab88 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800836c:	bb00      	cbnz	r0, 80083b0 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <SecureFrame+0x74>)
 8008370:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008374:	801a      	strh	r2, [r3, #0]
            break;
 8008376:	e7f4      	b.n	8008362 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008378:	a801      	add	r0, sp, #4
 800837a:	f002 fba1 	bl	800aac0 <LoRaMacCryptoGetFCntUp>
 800837e:	b9c8      	cbnz	r0, 80083b4 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008380:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <SecureFrame+0x74>)
 8008382:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008386:	b923      	cbnz	r3, 8008392 <SecureFrame+0x4a>
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <SecureFrame+0x74>)
 800838a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800838e:	2b01      	cmp	r3, #1
 8008390:	d902      	bls.n	8008398 <SecureFrame+0x50>
                fCntUp -= 1;
 8008392:	9b01      	ldr	r3, [sp, #4]
 8008394:	3b01      	subs	r3, #1
 8008396:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <SecureFrame+0x78>)
 800839a:	4622      	mov	r2, r4
 800839c:	4629      	mov	r1, r5
 800839e:	9801      	ldr	r0, [sp, #4]
 80083a0:	f002 fc1e 	bl	800abe0 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80083a4:	b940      	cbnz	r0, 80083b8 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80083a6:	4b05      	ldr	r3, [pc, #20]	; (80083bc <SecureFrame+0x74>)
 80083a8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80083ac:	801a      	strh	r2, [r3, #0]
            break;
 80083ae:	e7d8      	b.n	8008362 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80083b0:	2011      	movs	r0, #17
 80083b2:	e7d6      	b.n	8008362 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80083b4:	2012      	movs	r0, #18
 80083b6:	e7d4      	b.n	8008362 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80083b8:	2011      	movs	r0, #17
 80083ba:	e7d2      	b.n	8008362 <SecureFrame+0x1a>
 80083bc:	200003f4 	.word	0x200003f4
 80083c0:	200004fc 	.word	0x200004fc

080083c4 <SendFrameOnChannel>:
{
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	4606      	mov	r6, r0
    int8_t txPower = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 80083d0:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80083d4:	4d33      	ldr	r5, [pc, #204]	; (80084a4 <SendFrameOnChannel+0xe0>)
 80083d6:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 80083da:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80083de:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 80083e2:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80083e6:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80083e8:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80083ea:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80083ec:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80083ee:	4c2e      	ldr	r4, [pc, #184]	; (80084a8 <SendFrameOnChannel+0xe4>)
 80083f0:	8823      	ldrh	r3, [r4, #0]
 80083f2:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80083f6:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 80083fa:	f10d 0207 	add.w	r2, sp, #7
 80083fe:	a902      	add	r1, sp, #8
 8008400:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8008404:	f002 ff36 	bl	800b274 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800840e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8008412:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8008416:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800841a:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800841e:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008422:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 8008426:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800842a:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800842e:	f001 fec7 	bl	800a1c0 <LoRaMacClassBIsBeaconModeActive>
 8008432:	bb58      	cbnz	r0, 800848c <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008434:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <SendFrameOnChannel+0xe0>)
 8008436:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800843a:	2b01      	cmp	r3, #1
 800843c:	d02e      	beq.n	800849c <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 800843e:	f001 fec2 	bl	800a1c6 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8008442:	4b18      	ldr	r3, [pc, #96]	; (80084a4 <SendFrameOnChannel+0xe0>)
 8008444:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008448:	4b17      	ldr	r3, [pc, #92]	; (80084a8 <SendFrameOnChannel+0xe4>)
 800844a:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 800844e:	b2c0      	uxtb	r0, r0
 8008450:	f7ff ff7a 	bl	8008348 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8008454:	4604      	mov	r4, r0
 8008456:	b9b0      	cbnz	r0, 8008486 <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008458:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <SendFrameOnChannel+0xe4>)
 800845a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800845e:	f042 0202 	orr.w	r2, r2, #2
 8008462:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8008466:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800846a:	b92b      	cbnz	r3, 8008478 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 800846c:	4a0e      	ldr	r2, [pc, #56]	; (80084a8 <SendFrameOnChannel+0xe4>)
 800846e:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 8008472:	3301      	adds	r3, #1
 8008474:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008478:	4b0c      	ldr	r3, [pc, #48]	; (80084ac <SendFrameOnChannel+0xe8>)
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	480a      	ldr	r0, [pc, #40]	; (80084a8 <SendFrameOnChannel+0xe4>)
 800847e:	f830 1b02 	ldrh.w	r1, [r0], #2
 8008482:	b2c9      	uxtb	r1, r1
 8008484:	4798      	blx	r3
}
 8008486:	4620      	mov	r0, r4
 8008488:	b006      	add	sp, #24
 800848a:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800848c:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 8008490:	f001 fea8 	bl	800a1e4 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008494:	2800      	cmp	r0, #0
 8008496:	d0cd      	beq.n	8008434 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8008498:	2410      	movs	r4, #16
 800849a:	e7f4      	b.n	8008486 <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 800849c:	f001 fea4 	bl	800a1e8 <LoRaMacClassBStopRxSlots>
 80084a0:	e7cd      	b.n	800843e <SendFrameOnChannel+0x7a>
 80084a2:	bf00      	nop
 80084a4:	200008fc 	.word	0x200008fc
 80084a8:	200003f4 	.word	0x200003f4
 80084ac:	08011ee8 	.word	0x08011ee8

080084b0 <ScheduleTx>:
{
 80084b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b4:	b08c      	sub	sp, #48	; 0x30
 80084b6:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 80084b8:	f7ff fd92 	bl	8007fe0 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 80084bc:	4604      	mov	r4, r0
 80084be:	b118      	cbz	r0, 80084c8 <ScheduleTx+0x18>
}
 80084c0:	4620      	mov	r0, r4
 80084c2:	b00c      	add	sp, #48	; 0x30
 80084c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 80084c8:	f7fe fd66 	bl	8006f98 <CalculateBackOff>
    status = SerializeTxFrame( );
 80084cc:	f7ff feb2 	bl	8008234 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80084d0:	4604      	mov	r4, r0
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d1f4      	bne.n	80084c0 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80084d6:	4e36      	ldr	r6, [pc, #216]	; (80085b0 <ScheduleTx+0x100>)
 80084d8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80084da:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80084dc:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 80084e0:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80084e4:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 80084e8:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80084ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80084f0:	4640      	mov	r0, r8
 80084f2:	f008 faf5 	bl	8010ae0 <SysTimeGetMcuTime>
 80084f6:	af02      	add	r7, sp, #8
 80084f8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 8008502:	e898 0006 	ldmia.w	r8, {r1, r2}
 8008506:	4638      	mov	r0, r7
 8008508:	f008 fa8b 	bl	8010a22 <SysTimeSub>
 800850c:	ab07      	add	r3, sp, #28
 800850e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008512:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8008516:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008518:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800851a:	2300      	movs	r3, #0
 800851c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8008520:	2301      	movs	r3, #1
 8008522:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8008526:	4b23      	ldr	r3, [pc, #140]	; (80085b4 <ScheduleTx+0x104>)
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800852e:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 8008532:	b92b      	cbnz	r3, 8008540 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8008534:	2301      	movs	r3, #1
 8008536:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800853a:	2300      	movs	r3, #0
 800853c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8008540:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <ScheduleTx+0x104>)
 8008542:	481b      	ldr	r0, [pc, #108]	; (80085b0 <ScheduleTx+0x100>)
 8008544:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	f202 4384 	addw	r3, r2, #1156	; 0x484
 800854e:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8008552:	a904      	add	r1, sp, #16
 8008554:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008558:	f002 ff02 	bl	800b360 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800855c:	b1b0      	cbz	r0, 800858c <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800855e:	280b      	cmp	r0, #11
 8008560:	d122      	bne.n	80085a8 <ScheduleTx+0xf8>
 8008562:	b31d      	cbz	r5, 80085ac <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8008564:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <ScheduleTx+0x104>)
 8008566:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 800856a:	2900      	cmp	r1, #0
 800856c:	d0a8      	beq.n	80084c0 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800856e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008572:	f042 0220 	orr.w	r2, r2, #32
 8008576:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800857a:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800857e:	4628      	mov	r0, r5
 8008580:	f008 fc20 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008584:	4628      	mov	r0, r5
 8008586:	f008 fbd7 	bl	8010d38 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800858a:	e799      	b.n	80084c0 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800858c:	f7ff fe76 	bl	800827c <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8008590:	f7ff feb6 	bl	8008300 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8008594:	4604      	mov	r4, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d192      	bne.n	80084c0 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800859a:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <ScheduleTx+0x104>)
 800859c:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 80085a0:	f7ff ff10 	bl	80083c4 <SendFrameOnChannel>
 80085a4:	4604      	mov	r4, r0
 80085a6:	e78b      	b.n	80084c0 <ScheduleTx+0x10>
            return status;
 80085a8:	4604      	mov	r4, r0
 80085aa:	e789      	b.n	80084c0 <ScheduleTx+0x10>
 80085ac:	4604      	mov	r4, r0
 80085ae:	e787      	b.n	80084c0 <ScheduleTx+0x10>
 80085b0:	200008fc 	.word	0x200008fc
 80085b4:	200003f4 	.word	0x200003f4

080085b8 <OnTxDelayedTimerEvent>:
{
 80085b8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80085ba:	4c11      	ldr	r4, [pc, #68]	; (8008600 <OnTxDelayedTimerEvent+0x48>)
 80085bc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80085c0:	f008 fb58 	bl	8010c74 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80085c4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80085c8:	f023 0320 	bic.w	r3, r3, #32
 80085cc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 80085d0:	2001      	movs	r0, #1
 80085d2:	f7ff ff6d 	bl	80084b0 <ScheduleTx>
 80085d6:	b108      	cbz	r0, 80085dc <OnTxDelayedTimerEvent+0x24>
 80085d8:	280b      	cmp	r0, #11
 80085da:	d100      	bne.n	80085de <OnTxDelayedTimerEvent+0x26>
}
 80085dc:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80085de:	4b09      	ldr	r3, [pc, #36]	; (8008604 <OnTxDelayedTimerEvent+0x4c>)
 80085e0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80085e4:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80085e8:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 80085ec:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80085f0:	2009      	movs	r0, #9
 80085f2:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80085f6:	f002 f82f 	bl	800a658 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80085fa:	f7fe fd5f 	bl	80070bc <StopRetransmission>
}
 80085fe:	e7ed      	b.n	80085dc <OnTxDelayedTimerEvent+0x24>
 8008600:	200003f4 	.word	0x200003f4
 8008604:	200008fc 	.word	0x200008fc

08008608 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008608:	4b23      	ldr	r3, [pc, #140]	; (8008698 <LoRaMacHandleMcpsRequest+0x90>)
 800860a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800860e:	f013 0f01 	tst.w	r3, #1
 8008612:	d040      	beq.n	8008696 <LoRaMacHandleMcpsRequest+0x8e>
{
 8008614:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8008616:	4b20      	ldr	r3, [pc, #128]	; (8008698 <LoRaMacHandleMcpsRequest+0x90>)
 8008618:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800861c:	b12b      	cbz	r3, 800862a <LoRaMacHandleMcpsRequest+0x22>
 800861e:	2b03      	cmp	r3, #3
 8008620:	d003      	beq.n	800862a <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8008622:	2b01      	cmp	r3, #1
 8008624:	d007      	beq.n	8008636 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 8008626:	2400      	movs	r4, #0
 8008628:	e003      	b.n	8008632 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800862a:	f7fe fd0b 	bl	8007044 <CheckRetransUnconfirmedUplink>
 800862e:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 8008630:	b9a4      	cbnz	r4, 800865c <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 8008632:	b31c      	cbz	r4, 800867c <LoRaMacHandleMcpsRequest+0x74>
}
 8008634:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 8008636:	4b18      	ldr	r3, [pc, #96]	; (8008698 <LoRaMacHandleMcpsRequest+0x90>)
 8008638:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800863c:	b1e3      	cbz	r3, 8008678 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800863e:	f7fe fd25 	bl	800708c <CheckRetransConfirmedUplink>
 8008642:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008644:	4b15      	ldr	r3, [pc, #84]	; (800869c <LoRaMacHandleMcpsRequest+0x94>)
 8008646:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1f0      	bne.n	8008630 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800864e:	b910      	cbnz	r0, 8008656 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 8008650:	f7fe fd74 	bl	800713c <AckTimeoutRetriesProcess>
 8008654:	e7ec      	b.n	8008630 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 8008656:	f7ff fdbf 	bl	80081d8 <AckTimeoutRetriesFinalize>
 800865a:	e7e9      	b.n	8008630 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800865c:	4c0e      	ldr	r4, [pc, #56]	; (8008698 <LoRaMacHandleMcpsRequest+0x90>)
 800865e:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8008662:	f008 fb07 	bl	8010c74 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008666:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800866a:	f023 0320 	bic.w	r3, r3, #32
 800866e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8008672:	f7fe fd23 	bl	80070bc <StopRetransmission>
 8008676:	e7dd      	b.n	8008634 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 8008678:	2401      	movs	r4, #1
 800867a:	e7da      	b.n	8008632 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <LoRaMacHandleMcpsRequest+0x90>)
 800867e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8008682:	f36f 1245 	bfc	r2, #5, #1
 8008686:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800868a:	2000      	movs	r0, #0
 800868c:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8008690:	f7ff ff92 	bl	80085b8 <OnTxDelayedTimerEvent>
}
 8008694:	e7ce      	b.n	8008634 <LoRaMacHandleMcpsRequest+0x2c>
 8008696:	4770      	bx	lr
 8008698:	200003f4 	.word	0x200003f4
 800869c:	200008fc 	.word	0x200008fc

080086a0 <LoRaMacHandleRequestEvents>:
{
 80086a0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80086a2:	4b22      	ldr	r3, [pc, #136]	; (800872c <LoRaMacHandleRequestEvents+0x8c>)
 80086a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80086a8:	bb7b      	cbnz	r3, 800870a <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80086aa:	4b20      	ldr	r3, [pc, #128]	; (800872c <LoRaMacHandleRequestEvents+0x8c>)
 80086ac:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 80086b0:	f014 0501 	ands.w	r5, r4, #1
 80086b4:	d005      	beq.n	80086c2 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80086b6:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80086ba:	f36f 0200 	bfc	r2, #0, #1
 80086be:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80086c2:	4b1a      	ldr	r3, [pc, #104]	; (800872c <LoRaMacHandleRequestEvents+0x8c>)
 80086c4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80086c8:	f013 0f04 	tst.w	r3, #4
 80086cc:	d006      	beq.n	80086dc <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80086ce:	4b17      	ldr	r3, [pc, #92]	; (800872c <LoRaMacHandleRequestEvents+0x8c>)
 80086d0:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80086d4:	f36f 0282 	bfc	r2, #2, #1
 80086d8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80086dc:	2001      	movs	r0, #1
 80086de:	f7fe fbf3 	bl	8006ec8 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 80086e2:	b135      	cbz	r5, 80086f2 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80086e4:	4811      	ldr	r0, [pc, #68]	; (800872c <LoRaMacHandleRequestEvents+0x8c>)
 80086e6:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 80086f0:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80086f2:	f014 0f04 	tst.w	r4, #4
 80086f6:	d109      	bne.n	800870c <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 80086f8:	f001 fd66 	bl	800a1c8 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80086fc:	4b0b      	ldr	r3, [pc, #44]	; (800872c <LoRaMacHandleRequestEvents+0x8c>)
 80086fe:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8008702:	f36f 1245 	bfc	r2, #5, #1
 8008706:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 800870a:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800870c:	4808      	ldr	r0, [pc, #32]	; (8008730 <LoRaMacHandleRequestEvents+0x90>)
 800870e:	f001 ffcd 	bl	800a6ac <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8008712:	f001 fffd 	bl	800a710 <LoRaMacConfirmQueueGetCnt>
 8008716:	2800      	cmp	r0, #0
 8008718:	d0ee      	beq.n	80086f8 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800871a:	4a04      	ldr	r2, [pc, #16]	; (800872c <LoRaMacHandleRequestEvents+0x8c>)
 800871c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008720:	f043 0304 	orr.w	r3, r3, #4
 8008724:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8008728:	e7e6      	b.n	80086f8 <LoRaMacHandleRequestEvents+0x58>
 800872a:	bf00      	nop
 800872c:	200003f4 	.word	0x200003f4
 8008730:	20000840 	.word	0x20000840

08008734 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008734:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 8008736:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800873a:	b103      	cbz	r3, 800873e <LoRaMacHandleScheduleUplinkEvent+0xa>
 800873c:	4770      	bx	lr
{
 800873e:	b500      	push	{lr}
 8008740:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 8008742:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008746:	f10d 0007 	add.w	r0, sp, #7
 800874a:	f001 fe91 	bl	800a470 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800874e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008752:	b913      	cbnz	r3, 800875a <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 8008754:	b003      	add	sp, #12
 8008756:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 800875a:	f7fe fc13 	bl	8006f84 <SetMlmeScheduleUplinkIndication>
}
 800875e:	e7f9      	b.n	8008754 <LoRaMacHandleScheduleUplinkEvent+0x20>
 8008760:	200003f4 	.word	0x200003f4

08008764 <LoRaMacHandleNvm>:
{
 8008764:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8008766:	4b30      	ldr	r3, [pc, #192]	; (8008828 <LoRaMacHandleNvm+0xc4>)
 8008768:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800876c:	b103      	cbz	r3, 8008770 <LoRaMacHandleNvm+0xc>
}
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008772:	2124      	movs	r1, #36	; 0x24
 8008774:	f005 fdda 	bl	800e32c <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8008778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800877a:	4283      	cmp	r3, r0
 800877c:	d052      	beq.n	8008824 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800877e:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008780:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008782:	2114      	movs	r1, #20
 8008784:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008788:	f005 fdd0 	bl	800e32c <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800878c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800878e:	4283      	cmp	r3, r0
 8008790:	d002      	beq.n	8008798 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8008792:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008794:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008798:	21d4      	movs	r1, #212	; 0xd4
 800879a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800879e:	f005 fdc5 	bl	800e32c <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 80087a2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80087a6:	4283      	cmp	r3, r0
 80087a8:	d003      	beq.n	80087b2 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 80087aa:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80087ae:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80087b2:	21bc      	movs	r1, #188	; 0xbc
 80087b4:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80087b8:	f005 fdb8 	bl	800e32c <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80087bc:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 80087c0:	4283      	cmp	r3, r0
 80087c2:	d003      	beq.n	80087cc <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 80087c4:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80087c8:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80087cc:	21a0      	movs	r1, #160	; 0xa0
 80087ce:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 80087d2:	f005 fdab 	bl	800e32c <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 80087d6:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 80087da:	4283      	cmp	r3, r0
 80087dc:	d003      	beq.n	80087e6 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 80087de:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80087e2:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80087e6:	f44f 715e 	mov.w	r1, #888	; 0x378
 80087ea:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80087ee:	f005 fd9d 	bl	800e32c <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80087f2:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	; 0x5f4
 80087f6:	4283      	cmp	r3, r0
 80087f8:	d003      	beq.n	8008802 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 80087fa:	f8c4 05f4 	str.w	r0, [r4, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80087fe:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8008802:	2114      	movs	r1, #20
 8008804:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 8008808:	f005 fd90 	bl	800e32c <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800880c:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8008810:	4283      	cmp	r3, r0
 8008812:	d003      	beq.n	800881c <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 8008814:	f8c4 060c 	str.w	r0, [r4, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008818:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800881c:	4628      	mov	r0, r5
 800881e:	f7fe fc75 	bl	800710c <CallNvmDataChangeCallback>
 8008822:	e7a4      	b.n	800876e <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8008824:	2500      	movs	r5, #0
 8008826:	e7ac      	b.n	8008782 <LoRaMacHandleNvm+0x1e>
 8008828:	200003f4 	.word	0x200003f4

0800882c <RestoreNvmData>:
    if( nvm == NULL )
 800882c:	2800      	cmp	r0, #0
 800882e:	d07a      	beq.n	8008926 <RestoreNvmData+0xfa>
{
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8008834:	4b3d      	ldr	r3, [pc, #244]	; (800892c <RestoreNvmData+0x100>)
 8008836:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800883a:	2b01      	cmp	r3, #1
 800883c:	d001      	beq.n	8008842 <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 800883e:	2001      	movs	r0, #1
}
 8008840:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8008842:	2124      	movs	r1, #36	; 0x24
 8008844:	f005 fd72 	bl	800e32c <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8008848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800884a:	4283      	cmp	r3, r0
 800884c:	d032      	beq.n	80088b4 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800884e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8008852:	2114      	movs	r1, #20
 8008854:	4628      	mov	r0, r5
 8008856:	f005 fd69 	bl	800e32c <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 800885a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800885c:	4283      	cmp	r3, r0
 800885e:	d02f      	beq.n	80088c0 <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8008860:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8008864:	21d4      	movs	r1, #212	; 0xd4
 8008866:	4628      	mov	r0, r5
 8008868:	f005 fd60 	bl	800e32c <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 800886c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8008870:	4283      	cmp	r3, r0
 8008872:	d02b      	beq.n	80088cc <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8008874:	f504 758c 	add.w	r5, r4, #280	; 0x118
 8008878:	21bc      	movs	r1, #188	; 0xbc
 800887a:	4628      	mov	r0, r5
 800887c:	f005 fd56 	bl	800e32c <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8008880:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8008884:	4283      	cmp	r3, r0
 8008886:	d03b      	beq.n	8008900 <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8008888:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 800888c:	21a0      	movs	r1, #160	; 0xa0
 800888e:	4628      	mov	r0, r5
 8008890:	f005 fd4c 	bl	800e32c <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8008894:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 8008898:	4283      	cmp	r3, r0
 800889a:	d037      	beq.n	800890c <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800889c:	f504 65bf 	add.w	r5, r4, #1528	; 0x5f8
 80088a0:	2114      	movs	r1, #20
 80088a2:	4628      	mov	r0, r5
 80088a4:	f005 fd42 	bl	800e32c <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 80088a8:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 80088ac:	4283      	cmp	r3, r0
 80088ae:	d033      	beq.n	8008918 <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7c5      	b.n	8008840 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80088b4:	2228      	movs	r2, #40	; 0x28
 80088b6:	4621      	mov	r1, r4
 80088b8:	481d      	ldr	r0, [pc, #116]	; (8008930 <RestoreNvmData+0x104>)
 80088ba:	f005 fd18 	bl	800e2ee <memcpy1>
 80088be:	e7c6      	b.n	800884e <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80088c0:	2218      	movs	r2, #24
 80088c2:	4629      	mov	r1, r5
 80088c4:	481b      	ldr	r0, [pc, #108]	; (8008934 <RestoreNvmData+0x108>)
 80088c6:	f005 fd12 	bl	800e2ee <memcpy1>
 80088ca:	e7c9      	b.n	8008860 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80088cc:	4e18      	ldr	r6, [pc, #96]	; (8008930 <RestoreNvmData+0x104>)
 80088ce:	22d8      	movs	r2, #216	; 0xd8
 80088d0:	4629      	mov	r1, r5
 80088d2:	f106 0040 	add.w	r0, r6, #64	; 0x40
 80088d6:	f005 fd0a 	bl	800e2ee <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80088da:	4b14      	ldr	r3, [pc, #80]	; (800892c <RestoreNvmData+0x100>)
 80088dc:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80088e0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80088e4:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80088e6:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80088ea:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 80088ee:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 80088fe:	e7b9      	b.n	8008874 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8008900:	22c0      	movs	r2, #192	; 0xc0
 8008902:	4629      	mov	r1, r5
 8008904:	480c      	ldr	r0, [pc, #48]	; (8008938 <RestoreNvmData+0x10c>)
 8008906:	f005 fcf2 	bl	800e2ee <memcpy1>
 800890a:	e7bd      	b.n	8008888 <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800890c:	22a4      	movs	r2, #164	; 0xa4
 800890e:	4629      	mov	r1, r5
 8008910:	480a      	ldr	r0, [pc, #40]	; (800893c <RestoreNvmData+0x110>)
 8008912:	f005 fcec 	bl	800e2ee <memcpy1>
 8008916:	e7c1      	b.n	800889c <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8008918:	2218      	movs	r2, #24
 800891a:	4629      	mov	r1, r5
 800891c:	4808      	ldr	r0, [pc, #32]	; (8008940 <RestoreNvmData+0x114>)
 800891e:	f005 fce6 	bl	800e2ee <memcpy1>
    return LORAMAC_STATUS_OK;
 8008922:	2000      	movs	r0, #0
 8008924:	e78c      	b.n	8008840 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008926:	2003      	movs	r0, #3
}
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	200003f4 	.word	0x200003f4
 8008930:	200008fc 	.word	0x200008fc
 8008934:	20000924 	.word	0x20000924
 8008938:	20000a14 	.word	0x20000a14
 800893c:	20000ad4 	.word	0x20000ad4
 8008940:	20000ef4 	.word	0x20000ef4

08008944 <OpenContinuousRxCWindow>:
{
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8008948:	4c12      	ldr	r4, [pc, #72]	; (8008994 <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800894a:	4d13      	ldr	r5, [pc, #76]	; (8008998 <OpenContinuousRxCWindow+0x54>)
 800894c:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 8008950:	9600      	str	r6, [sp, #0]
 8008952:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008954:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008958:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800895c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008960:	f002 fc66 	bl	800b230 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008964:	2302      	movs	r3, #2
 8008966:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800896a:	2301      	movs	r3, #1
 800896c:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008970:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 8008974:	4631      	mov	r1, r6
 8008976:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800897a:	f002 fc6b 	bl	800b254 <RegionRxConfig>
 800897e:	b138      	cbz	r0, 8008990 <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 8008980:	4b06      	ldr	r3, [pc, #24]	; (800899c <OpenContinuousRxCWindow+0x58>)
 8008982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008984:	2000      	movs	r0, #0
 8008986:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8008988:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 800898c:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 8008990:	b002      	add	sp, #8
 8008992:	bd70      	pop	{r4, r5, r6, pc}
 8008994:	200008fc 	.word	0x200008fc
 8008998:	200003f4 	.word	0x200003f4
 800899c:	08011ee8 	.word	0x08011ee8

080089a0 <RxWindowSetup>:
{
 80089a0:	b510      	push	{r4, lr}
 80089a2:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80089a4:	f008 f966 	bl	8010c74 <UTIL_TIMER_Stop>
    Radio.Standby( );
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <RxWindowSetup+0x34>)
 80089aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ac:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80089ae:	4a0a      	ldr	r2, [pc, #40]	; (80089d8 <RxWindowSetup+0x38>)
 80089b0:	4621      	mov	r1, r4
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <RxWindowSetup+0x3c>)
 80089b4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80089b8:	f002 fc4c 	bl	800b254 <RegionRxConfig>
 80089bc:	b140      	cbz	r0, 80089d0 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <RxWindowSetup+0x34>)
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	4a06      	ldr	r2, [pc, #24]	; (80089dc <RxWindowSetup+0x3c>)
 80089c4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80089c6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80089c8:	7ce2      	ldrb	r2, [r4, #19]
 80089ca:	4b05      	ldr	r3, [pc, #20]	; (80089e0 <RxWindowSetup+0x40>)
 80089cc:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	bf00      	nop
 80089d4:	08011ee8 	.word	0x08011ee8
 80089d8:	20000814 	.word	0x20000814
 80089dc:	200008fc 	.word	0x200008fc
 80089e0:	200003f4 	.word	0x200003f4

080089e4 <OnRxWindow2TimerEvent>:
{
 80089e4:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <OnRxWindow2TimerEvent+0x48>)
 80089e8:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80089ec:	b903      	cbnz	r3, 80089f0 <OnRxWindow2TimerEvent+0xc>
}
 80089ee:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80089f0:	480e      	ldr	r0, [pc, #56]	; (8008a2c <OnRxWindow2TimerEvent+0x48>)
 80089f2:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 80089f6:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80089fa:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <OnRxWindow2TimerEvent+0x4c>)
 80089fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80089fe:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008a02:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008a06:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008a0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a0e:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008a12:	2300      	movs	r3, #0
 8008a14:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008a1e:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 8008a22:	f500 7066 	add.w	r0, r0, #920	; 0x398
 8008a26:	f7ff ffbb 	bl	80089a0 <RxWindowSetup>
 8008a2a:	e7e0      	b.n	80089ee <OnRxWindow2TimerEvent+0xa>
 8008a2c:	200003f4 	.word	0x200003f4
 8008a30:	200008fc 	.word	0x200008fc

08008a34 <OnRxWindow1TimerEvent>:
{
 8008a34:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8008a36:	480f      	ldr	r0, [pc, #60]	; (8008a74 <OnRxWindow1TimerEvent+0x40>)
 8008a38:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8008a3c:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8008a40:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <OnRxWindow1TimerEvent+0x44>)
 8008a42:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 8008a46:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008a4a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008a4e:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008a52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a56:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8008a60:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008a64:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 8008a68:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8008a6c:	f7ff ff98 	bl	80089a0 <RxWindowSetup>
}
 8008a70:	bd08      	pop	{r3, pc}
 8008a72:	bf00      	nop
 8008a74:	200003f4 	.word	0x200003f4
 8008a78:	200008fc 	.word	0x200008fc

08008a7c <OnRadioRxTimeout>:
{
 8008a7c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008a7e:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <OnRadioRxTimeout+0x28>)
 8008a80:	7813      	ldrb	r3, [r2, #0]
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <OnRadioRxTimeout+0x2c>)
 8008a8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008a8e:	b113      	cbz	r3, 8008a96 <OnRadioRxTimeout+0x1a>
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	b103      	cbz	r3, 8008a96 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008a94:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <OnRadioRxTimeout+0x30>)
 8008a98:	2201      	movs	r2, #1
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	2002      	movs	r0, #2
 8008a9e:	f007 fdaf 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8008aa2:	bd08      	pop	{r3, pc}
 8008aa4:	200003f0 	.word	0x200003f0
 8008aa8:	200003f4 	.word	0x200003f4
 8008aac:	08011870 	.word	0x08011870

08008ab0 <OnRadioTxTimeout>:
{
 8008ab0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008ab2:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <OnRadioTxTimeout+0x28>)
 8008ab4:	7813      	ldrb	r3, [r2, #0]
 8008ab6:	f043 0304 	orr.w	r3, r3, #4
 8008aba:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <OnRadioTxTimeout+0x2c>)
 8008abe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008ac2:	b113      	cbz	r3, 8008aca <OnRadioTxTimeout+0x1a>
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	b103      	cbz	r3, 8008aca <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008ac8:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <OnRadioTxTimeout+0x30>)
 8008acc:	2201      	movs	r2, #1
 8008ace:	2100      	movs	r1, #0
 8008ad0:	2002      	movs	r0, #2
 8008ad2:	f007 fd95 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8008ad6:	bd08      	pop	{r3, pc}
 8008ad8:	200003f0 	.word	0x200003f0
 8008adc:	200003f4 	.word	0x200003f4
 8008ae0:	08011880 	.word	0x08011880

08008ae4 <OnRadioRxDone>:
{
 8008ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae8:	4680      	mov	r8, r0
 8008aea:	460f      	mov	r7, r1
 8008aec:	4616      	mov	r6, r2
 8008aee:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008af0:	f008 f880 	bl	8010bf4 <UTIL_TIMER_GetCurrentTime>
 8008af4:	4c0d      	ldr	r4, [pc, #52]	; (8008b2c <OnRadioRxDone+0x48>)
 8008af6:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8008af8:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8008afc:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8008afe:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8008b00:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008b02:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <OnRadioRxDone+0x4c>)
 8008b04:	7813      	ldrb	r3, [r2, #0]
 8008b06:	f043 0308 	orr.w	r3, r3, #8
 8008b0a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <OnRadioRxDone+0x50>)
 8008b0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008b12:	b113      	cbz	r3, 8008b1a <OnRadioRxDone+0x36>
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	b103      	cbz	r3, 8008b1a <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008b18:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <OnRadioRxDone+0x54>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	2100      	movs	r1, #0
 8008b20:	2002      	movs	r0, #2
 8008b22:	f007 fd6d 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8008b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200019d0 	.word	0x200019d0
 8008b30:	200003f0 	.word	0x200003f0
 8008b34:	200003f4 	.word	0x200003f4
 8008b38:	08011890 	.word	0x08011890

08008b3c <OnRadioTxDone>:
{
 8008b3c:	b530      	push	{r4, r5, lr}
 8008b3e:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008b40:	f008 f858 	bl	8010bf4 <UTIL_TIMER_GetCurrentTime>
 8008b44:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <OnRadioTxDone+0x48>)
 8008b46:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008b48:	4d0f      	ldr	r5, [pc, #60]	; (8008b88 <OnRadioTxDone+0x4c>)
 8008b4a:	466c      	mov	r4, sp
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f007 ffa7 	bl	8010aa0 <SysTimeGet>
 8008b52:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8008b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b5a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8008b5e:	4a0b      	ldr	r2, [pc, #44]	; (8008b8c <OnRadioTxDone+0x50>)
 8008b60:	7813      	ldrb	r3, [r2, #0]
 8008b62:	f043 0310 	orr.w	r3, r3, #16
 8008b66:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008b68:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8008b6c:	b113      	cbz	r3, 8008b74 <OnRadioTxDone+0x38>
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	b103      	cbz	r3, 8008b74 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008b72:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8008b74:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <OnRadioTxDone+0x54>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	2100      	movs	r1, #0
 8008b7a:	2002      	movs	r0, #2
 8008b7c:	f007 fd40 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 8008b80:	b003      	add	sp, #12
 8008b82:	bd30      	pop	{r4, r5, pc}
 8008b84:	200019cc 	.word	0x200019cc
 8008b88:	200003f4 	.word	0x200003f4
 8008b8c:	200003f0 	.word	0x200003f0
 8008b90:	080118a0 	.word	0x080118a0

08008b94 <ResetMacParameters>:
{
 8008b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b98:	b08e      	sub	sp, #56	; 0x38
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8008b9a:	4c4d      	ldr	r4, [pc, #308]	; (8008cd0 <ResetMacParameters+0x13c>)
 8008b9c:	2600      	movs	r6, #0
 8008b9e:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 8008ba2:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8008ba4:	4d4b      	ldr	r5, [pc, #300]	; (8008cd4 <ResetMacParameters+0x140>)
 8008ba6:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8008baa:	f04f 0801 	mov.w	r8, #1
 8008bae:	f885 8411 	strb.w	r8, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008bb2:	f885 8412 	strb.w	r8, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8008bb6:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 8008bba:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8008bbe:	f8a4 8102 	strh.w	r8, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008bc2:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 8008bc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008bca:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 8008bce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8008bd2:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8008bd6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008bda:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8008bde:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008be2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008be6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008bea:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8008bee:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8008bf2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008bf6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8008bfa:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8008bfe:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8008c02:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8008c06:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8008c0a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8008c0e:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008c10:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8008c14:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8008c16:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8008c1a:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008c1e:	f88d 800c 	strb.w	r8, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8008c22:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8008c26:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8008c28:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 8008c2c:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008c2e:	a901      	add	r1, sp, #4
 8008c30:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008c34:	f002 fac1 	bl	800b1ba <RegionInitDefaults>
    MacCtx.Channel = 0;
 8008c38:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008c3c:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c42:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008c46:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8008c4a:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008c4e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8008c52:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008c56:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008c5a:	f885 83df 	strb.w	r8, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008c5e:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 8008c62:	f505 7773 	add.w	r7, r5, #972	; 0x3cc
 8008c66:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008c6e:	f885 83f2 	strb.w	r8, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008c72:	2302      	movs	r3, #2
 8008c74:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8008c78:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8008c7a:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 8008c7c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8008c80:	b11b      	cbz	r3, 8008c8a <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8008c8a:	4b12      	ldr	r3, [pc, #72]	; (8008cd4 <ResetMacParameters+0x140>)
 8008c8c:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8008c90:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8008c92:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 8008c96:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8008c98:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 8008c9c:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8008c9e:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8008ca2:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <ResetMacParameters+0x13c>)
 8008ca6:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 8008caa:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8008cac:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8008cb0:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8008cb2:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8008cb6:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8008cb8:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 8008cbc:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008cbe:	f502 62bf 	add.w	r2, r2, #1528	; 0x5f8
 8008cc2:	a90c      	add	r1, sp, #48	; 0x30
 8008cc4:	a804      	add	r0, sp, #16
 8008cc6:	f001 fa6a 	bl	800a19e <LoRaMacClassBInit>
}
 8008cca:	b00e      	add	sp, #56	; 0x38
 8008ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd0:	200008fc 	.word	0x200008fc
 8008cd4:	200003f4 	.word	0x200003f4

08008cd8 <SwitchClass>:
{
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8008cdc:	4b3d      	ldr	r3, [pc, #244]	; (8008dd4 <SwitchClass+0xfc>)
 8008cde:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 8008ce2:	2d01      	cmp	r5, #1
 8008ce4:	d062      	beq.n	8008dac <SwitchClass+0xd4>
 8008ce6:	2d02      	cmp	r5, #2
 8008ce8:	d068      	beq.n	8008dbc <SwitchClass+0xe4>
 8008cea:	b10d      	cbz	r5, 8008cf0 <SwitchClass+0x18>
 8008cec:	2003      	movs	r0, #3
}
 8008cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 8008cf0:	b928      	cbnz	r0, 8008cfe <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8008cf2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008cf6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008cf8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008cfa:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8008cfe:	2c01      	cmp	r4, #1
 8008d00:	d01f      	beq.n	8008d42 <SwitchClass+0x6a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008d02:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8008d04:	2c02      	cmp	r4, #2
 8008d06:	d1f2      	bne.n	8008cee <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008d08:	4b32      	ldr	r3, [pc, #200]	; (8008dd4 <SwitchClass+0xfc>)
 8008d0a:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008d0e:	4f32      	ldr	r7, [pc, #200]	; (8008dd8 <SwitchClass+0x100>)
 8008d10:	f507 7478 	add.w	r4, r7, #992	; 0x3e0
 8008d14:	f507 7673 	add.w	r6, r7, #972	; 0x3cc
 8008d18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d1c:	6833      	ldr	r3, [r6, #0]
 8008d1e:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008d20:	2302      	movs	r3, #2
 8008d22:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008d26:	2300      	movs	r3, #0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dd13      	ble.n	8008d54 <SwitchClass+0x7c>
                MacCtx.NodeAckRequested = false;
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	; (8008dd8 <SwitchClass+0x100>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 8008d34:	4b29      	ldr	r3, [pc, #164]	; (8008ddc <SwitchClass+0x104>)
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8008d3a:	f7ff fe03 	bl	8008944 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8008d3e:	4628      	mov	r0, r5
 8008d40:	e7d5      	b.n	8008cee <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8008d42:	4620      	mov	r0, r4
 8008d44:	f001 fa41 	bl	800a1ca <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d1db      	bne.n	8008d04 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8008d4c:	4b21      	ldr	r3, [pc, #132]	; (8008dd4 <SwitchClass+0xfc>)
 8008d4e:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8008d52:	e7d7      	b.n	8008d04 <SwitchClass+0x2c>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8008d54:	4618      	mov	r0, r3
 8008d56:	491f      	ldr	r1, [pc, #124]	; (8008dd4 <SwitchClass+0xfc>)
 8008d58:	222c      	movs	r2, #44	; 0x2c
 8008d5a:	fb02 1203 	mla	r2, r2, r3, r1
 8008d5e:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 8008d62:	b912      	cbnz	r2, 8008d6a <SwitchClass+0x92>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008d64:	3301      	adds	r3, #1
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	e7de      	b.n	8008d28 <SwitchClass+0x50>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008d6a:	460a      	mov	r2, r1
 8008d6c:	232c      	movs	r3, #44	; 0x2c
 8008d6e:	fb03 1000 	mla	r0, r3, r0, r1
 8008d72:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8008d76:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8008d78:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8008d7c:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8008d80:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <SwitchClass+0x100>)
 8008d82:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8008d86:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8008d8a:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008d8e:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8008d92:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008d96:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8008d9a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008d9e:	2203      	movs	r2, #3
 8008da0:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8008daa:	e7bf      	b.n	8008d2c <SwitchClass+0x54>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8008dac:	f001 fa0d 	bl	800a1ca <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d19c      	bne.n	8008cee <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008db4:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <SwitchClass+0xfc>)
 8008db6:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8008dba:	e798      	b.n	8008cee <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8008dbc:	b938      	cbnz	r0, 8008dce <SwitchClass+0xf6>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <SwitchClass+0xfc>)
 8008dc0:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <SwitchClass+0x104>)
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8008dca:	4620      	mov	r0, r4
 8008dcc:	e78f      	b.n	8008cee <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008dce:	2003      	movs	r0, #3
 8008dd0:	e78d      	b.n	8008cee <SwitchClass+0x16>
 8008dd2:	bf00      	nop
 8008dd4:	200008fc 	.word	0x200008fc
 8008dd8:	200003f4 	.word	0x200003f4
 8008ddc:	08011ee8 	.word	0x08011ee8

08008de0 <SendReJoinReq>:
{
 8008de0:	b570      	push	{r4, r5, r6, lr}
    switch( joinReqType )
 8008de2:	28ff      	cmp	r0, #255	; 0xff
 8008de4:	d003      	beq.n	8008dee <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8008de6:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8008de8:	f7ff fb62 	bl	80084b0 <ScheduleTx>
}
 8008dec:	bd70      	pop	{r4, r5, r6, pc}
 8008dee:	f04f 0600 	mov.w	r6, #0
            SwitchClass( CLASS_A );
 8008df2:	2000      	movs	r0, #0
 8008df4:	f7ff ff70 	bl	8008cd8 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008df8:	4d0f      	ldr	r5, [pc, #60]	; (8008e38 <SendReJoinReq+0x58>)
 8008dfa:	2400      	movs	r4, #0
 8008dfc:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008e00:	1cab      	adds	r3, r5, #2
 8008e02:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008e06:	23ff      	movs	r3, #255	; 0xff
 8008e08:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8008e0c:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8008e10:	f885 610d 	strb.w	r6, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008e14:	f005 fa3a 	bl	800e28c <SecureElementGetJoinEui>
 8008e18:	4601      	mov	r1, r0
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8008e20:	f005 fa65 	bl	800e2ee <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8008e24:	f005 fa1c 	bl	800e260 <SecureElementGetDevEui>
 8008e28:	4601      	mov	r1, r0
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8008e30:	f005 fa5d 	bl	800e2ee <memcpy1>
            allowDelayedTx = false;
 8008e34:	4620      	mov	r0, r4
            break;
 8008e36:	e7d7      	b.n	8008de8 <SendReJoinReq+0x8>
 8008e38:	200003f4 	.word	0x200003f4

08008e3c <SetTxContinuousWave>:
{
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8008e40:	4c10      	ldr	r4, [pc, #64]	; (8008e84 <SetTxContinuousWave+0x48>)
 8008e42:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 8008e46:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e4a:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <SetTxContinuousWave+0x4c>)
 8008e4c:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8008e50:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008e54:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8008e58:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008e5c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008e5e:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008e60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008e62:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 8008e64:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8008e68:	4669      	mov	r1, sp
 8008e6a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008e6e:	f002 fa8a 	bl	800b386 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008e72:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008e76:	f043 0302 	orr.w	r3, r3, #2
 8008e7a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8008e7e:	2000      	movs	r0, #0
 8008e80:	b004      	add	sp, #16
 8008e82:	bd10      	pop	{r4, pc}
 8008e84:	200003f4 	.word	0x200003f4
 8008e88:	200008fc 	.word	0x200008fc

08008e8c <PrepareFrame>:
{
 8008e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e90:	b083      	sub	sp, #12
 8008e92:	4605      	mov	r5, r0
 8008e94:	460e      	mov	r6, r1
 8008e96:	4617      	mov	r7, r2
 8008e98:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8008e9c:	4959      	ldr	r1, [pc, #356]	; (8009004 <PrepareFrame+0x178>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8008ea2:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8008ea6:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8008ea8:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8008eaa:	4698      	mov	r8, r3
 8008eac:	b1cb      	cbz	r3, 8008ee2 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008eae:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009004 <PrepareFrame+0x178>
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8008eba:	f005 fa18 	bl	800e2ee <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8008ebe:	b2e0      	uxtb	r0, r4
 8008ec0:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8008ec4:	782b      	ldrb	r3, [r5, #0]
 8008ec6:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8008eca:	782b      	ldrb	r3, [r5, #0]
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d009      	beq.n	8008ee6 <PrepareFrame+0x5a>
 8008ed2:	2b07      	cmp	r3, #7
 8008ed4:	d078      	beq.n	8008fc8 <PrepareFrame+0x13c>
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d009      	beq.n	8008eee <PrepareFrame+0x62>
 8008eda:	2002      	movs	r0, #2
}
 8008edc:	b003      	add	sp, #12
 8008ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8008ee2:	4614      	mov	r4, r2
 8008ee4:	e7e3      	b.n	8008eae <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8008ee6:	4b47      	ldr	r3, [pc, #284]	; (8009004 <PrepareFrame+0x178>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008eee:	4b45      	ldr	r3, [pc, #276]	; (8009004 <PrepareFrame+0x178>)
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008ef6:	1c9a      	adds	r2, r3, #2
 8008ef8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008efc:	22ff      	movs	r2, #255	; 0xff
 8008efe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008f02:	782a      	ldrb	r2, [r5, #0]
 8008f04:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008f08:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8008f0c:	4a3e      	ldr	r2, [pc, #248]	; (8009008 <PrepareFrame+0x17c>)
 8008f0e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8008f12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008f16:	7832      	ldrb	r2, [r6, #0]
 8008f18:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8008f1c:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8008f20:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8008f24:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008f28:	a801      	add	r0, sp, #4
 8008f2a:	f001 fdc9 	bl	800aac0 <LoRaMacCryptoGetFCntUp>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d15b      	bne.n	8008fea <PrepareFrame+0x15e>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8008f32:	9a01      	ldr	r2, [sp, #4]
 8008f34:	4b33      	ldr	r3, [pc, #204]	; (8009004 <PrepareFrame+0x178>)
 8008f36:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8008f40:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8008f44:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008f48:	4668      	mov	r0, sp
 8008f4a:	f001 fa53 	bl	800a3f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d14d      	bne.n	8008fee <PrepareFrame+0x162>
            if( macCmdsSize > 0 )
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0c1      	beq.n	8008edc <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8008f58:	4b2b      	ldr	r3, [pc, #172]	; (8009008 <PrepareFrame+0x17c>)
 8008f5a:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008f5e:	f7fe f919 	bl	8007194 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008f62:	4b28      	ldr	r3, [pc, #160]	; (8009004 <PrepareFrame+0x178>)
 8008f64:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8008f68:	b113      	cbz	r3, 8008f70 <PrepareFrame+0xe4>
 8008f6a:	9a00      	ldr	r2, [sp, #0]
 8008f6c:	2a0f      	cmp	r2, #15
 8008f6e:	d915      	bls.n	8008f9c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008f70:	b113      	cbz	r3, 8008f78 <PrepareFrame+0xec>
 8008f72:	9b00      	ldr	r3, [sp, #0]
 8008f74:	2b0f      	cmp	r3, #15
 8008f76:	d820      	bhi.n	8008fba <PrepareFrame+0x12e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008f78:	4a24      	ldr	r2, [pc, #144]	; (800900c <PrepareFrame+0x180>)
 8008f7a:	4669      	mov	r1, sp
 8008f7c:	f001 fa46 	bl	800a40c <LoRaMacCommandsSerializeCmds>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d13a      	bne.n	8008ffa <PrepareFrame+0x16e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008f84:	4b1f      	ldr	r3, [pc, #124]	; (8009004 <PrepareFrame+0x178>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8008f8c:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8008f90:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008f94:	9a00      	ldr	r2, [sp, #0]
 8008f96:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8008f9a:	e79f      	b.n	8008edc <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8008f9c:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <PrepareFrame+0x184>)
 8008f9e:	4669      	mov	r1, sp
 8008fa0:	200f      	movs	r0, #15
 8008fa2:	f001 fa33 	bl	800a40c <LoRaMacCommandsSerializeCmds>
 8008fa6:	bb20      	cbnz	r0, 8008ff2 <PrepareFrame+0x166>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8008fa8:	7833      	ldrb	r3, [r6, #0]
 8008faa:	9a00      	ldr	r2, [sp, #0]
 8008fac:	f362 0303 	bfi	r3, r2, #0, #4
 8008fb0:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008fb2:	4a14      	ldr	r2, [pc, #80]	; (8009004 <PrepareFrame+0x178>)
 8008fb4:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 8008fb8:	e790      	b.n	8008edc <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008fba:	4a14      	ldr	r2, [pc, #80]	; (800900c <PrepareFrame+0x180>)
 8008fbc:	4669      	mov	r1, sp
 8008fbe:	f001 fa25 	bl	800a40c <LoRaMacCommandsSerializeCmds>
 8008fc2:	b1c0      	cbz	r0, 8008ff6 <PrepareFrame+0x16a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008fc4:	2013      	movs	r0, #19
 8008fc6:	e789      	b.n	8008edc <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8008fc8:	f1b8 0f00 	cmp.w	r8, #0
 8008fcc:	d017      	beq.n	8008ffe <PrepareFrame+0x172>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d084      	beq.n	8008edc <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8008fd2:	4c0c      	ldr	r4, [pc, #48]	; (8009004 <PrepareFrame+0x178>)
 8008fd4:	b282      	uxth	r2, r0
 8008fd6:	4641      	mov	r1, r8
 8008fd8:	1ce0      	adds	r0, r4, #3
 8008fda:	f005 f988 	bl	800e2ee <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8008fde:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	e778      	b.n	8008edc <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008fea:	2012      	movs	r0, #18
 8008fec:	e776      	b.n	8008edc <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008fee:	2013      	movs	r0, #19
 8008ff0:	e774      	b.n	8008edc <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ff2:	2013      	movs	r0, #19
 8008ff4:	e772      	b.n	8008edc <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8008ff6:	200a      	movs	r0, #10
 8008ff8:	e770      	b.n	8008edc <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ffa:	2013      	movs	r0, #19
 8008ffc:	e76e      	b.n	8008edc <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8008ffe:	2000      	movs	r0, #0
 8009000:	e76c      	b.n	8008edc <PrepareFrame+0x50>
 8009002:	bf00      	nop
 8009004:	200003f4 	.word	0x200003f4
 8009008:	200008fc 	.word	0x200008fc
 800900c:	2000087c 	.word	0x2000087c
 8009010:	2000050c 	.word	0x2000050c

08009014 <Send>:
{
 8009014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	b08a      	sub	sp, #40	; 0x28
 800901a:	4617      	mov	r7, r2
 800901c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800901e:	4c47      	ldr	r4, [pc, #284]	; (800913c <Send+0x128>)
 8009020:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009024:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009028:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800902a:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800902c:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 8081 	beq.w	8009138 <Send+0x124>
 8009036:	4605      	mov	r5, r0
 8009038:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800903a:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 800903e:	b90b      	cbnz	r3, 8009044 <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009040:	2100      	movs	r1, #0
 8009042:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009044:	2100      	movs	r1, #0
    fCtrl.Bits.FOptsLen      = 0;
 8009046:	460b      	mov	r3, r1
 8009048:	f361 0303 	bfi	r3, r1, #0, #4
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800904c:	483b      	ldr	r0, [pc, #236]	; (800913c <Send+0x128>)
 800904e:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 8009052:	f361 13c7 	bfi	r3, r1, #7, #1
 8009056:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800905a:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 800905e:	2b01      	cmp	r3, #1
 8009060:	d057      	beq.n	8009112 <Send+0xfe>
        fCtrl.Bits.FPending      = 0;
 8009062:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009066:	f36f 1304 	bfc	r3, #4, #1
 800906a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800906e:	4b33      	ldr	r3, [pc, #204]	; (800913c <Send+0x128>)
 8009070:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009074:	b12b      	cbz	r3, 8009082 <Send+0x6e>
        fCtrl.Bits.Ack = 1;
 8009076:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800907a:	f043 0320 	orr.w	r3, r3, #32
 800907e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 8009082:	4c2e      	ldr	r4, [pc, #184]	; (800913c <Send+0x128>)
 8009084:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8009088:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 800908a:	2301      	movs	r3, #1
 800908c:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009090:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009094:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009096:	4b2a      	ldr	r3, [pc, #168]	; (8009140 <Send+0x12c>)
 8009098:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 800909c:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80090a0:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80090a4:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090a8:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80090ac:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80090b0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80090b4:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 80090b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80090bc:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80090c0:	ab08      	add	r3, sp, #32
 80090c2:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80090c6:	f104 0139 	add.w	r1, r4, #57	; 0x39
 80090ca:	a803      	add	r0, sp, #12
 80090cc:	f001 f85f 	bl	800a18e <LoRaMacAdrCalcNext>
 80090d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80090d4:	f360 1386 	bfi	r3, r0, #6, #1
 80090d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80090dc:	f8cd 8000 	str.w	r8, [sp]
 80090e0:	463b      	mov	r3, r7
 80090e2:	4632      	mov	r2, r6
 80090e4:	a909      	add	r1, sp, #36	; 0x24
 80090e6:	4628      	mov	r0, r5
 80090e8:	f7ff fed0 	bl	8008e8c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80090ec:	4604      	mov	r4, r0
 80090ee:	b108      	cbz	r0, 80090f4 <Send+0xe0>
 80090f0:	280a      	cmp	r0, #10
 80090f2:	d104      	bne.n	80090fe <Send+0xea>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80090f4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80090f8:	f7ff f9da 	bl	80084b0 <ScheduleTx>
 80090fc:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 80090fe:	b17c      	cbz	r4, 8009120 <Send+0x10c>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <Send+0x128>)
 8009102:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009106:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800910a:	4620      	mov	r0, r4
 800910c:	b00a      	add	sp, #40	; 0x28
 800910e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009112:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009116:	f043 0310 	orr.w	r3, r3, #16
 800911a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800911e:	e7a6      	b.n	800906e <Send+0x5a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <Send+0x128>)
 8009122:	2200      	movs	r2, #0
 8009124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009128:	9a08      	ldr	r2, [sp, #32]
 800912a:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800912c:	f001 f936 	bl	800a39c <LoRaMacCommandsRemoveNoneStickyCmds>
 8009130:	2800      	cmp	r0, #0
 8009132:	d0ea      	beq.n	800910a <Send+0xf6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009134:	2413      	movs	r4, #19
 8009136:	e7e8      	b.n	800910a <Send+0xf6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009138:	2407      	movs	r4, #7
 800913a:	e7e6      	b.n	800910a <Send+0xf6>
 800913c:	200008fc 	.word	0x200008fc
 8009140:	200003f4 	.word	0x200003f4

08009144 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009144:	4b07      	ldr	r3, [pc, #28]	; (8009164 <LoRaMacIsBusy+0x20>)
 8009146:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800914a:	b933      	cbnz	r3, 800915a <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800914c:	4b05      	ldr	r3, [pc, #20]	; (8009164 <LoRaMacIsBusy+0x20>)
 800914e:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009152:	2b01      	cmp	r3, #1
 8009154:	d003      	beq.n	800915e <LoRaMacIsBusy+0x1a>
    return true;
 8009156:	2001      	movs	r0, #1
 8009158:	4770      	bx	lr
 800915a:	2001      	movs	r0, #1
 800915c:	4770      	bx	lr
        return false;
 800915e:	2000      	movs	r0, #0
}
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	200003f4 	.word	0x200003f4

08009168 <LoRaMacProcess>:
{
 8009168:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800916a:	f7fe ffd7 	bl	800811c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800916e:	f001 f83c 	bl	800a1ea <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <LoRaMacProcess+0x60>)
 8009174:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009178:	f013 0f20 	tst.w	r3, #32
 800917c:	d107      	bne.n	800918e <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 800917e:	f7fd fea9 	bl	8006ed4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009182:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <LoRaMacProcess+0x60>)
 8009184:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009188:	2b02      	cmp	r3, #2
 800918a:	d01a      	beq.n	80091c2 <LoRaMacProcess+0x5a>
}
 800918c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800918e:	2000      	movs	r0, #0
 8009190:	f7fd fe9a 	bl	8006ec8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009194:	f7fd fee8 	bl	8006f68 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009198:	f7fd ffc4 	bl	8007124 <IsRequestPending>
 800919c:	b110      	cbz	r0, 80091a4 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800919e:	f7fe f8e9 	bl	8007374 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 80091a2:	b918      	cbnz	r0, 80091ac <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 80091a4:	f7fe ffe8 	bl	8008178 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80091a8:	f7ff fa2e 	bl	8008608 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 80091ac:	f7ff fa78 	bl	80086a0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80091b0:	f7ff fac0 	bl	8008734 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 80091b4:	4805      	ldr	r0, [pc, #20]	; (80091cc <LoRaMacProcess+0x64>)
 80091b6:	f7ff fad5 	bl	8008764 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80091ba:	2001      	movs	r0, #1
 80091bc:	f7fd fe84 	bl	8006ec8 <LoRaMacEnableRequests>
 80091c0:	e7dd      	b.n	800917e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 80091c2:	f7ff fbbf 	bl	8008944 <OpenContinuousRxCWindow>
}
 80091c6:	e7e1      	b.n	800918c <LoRaMacProcess+0x24>
 80091c8:	200003f4 	.word	0x200003f4
 80091cc:	200008fc 	.word	0x200008fc

080091d0 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f000 8190 	beq.w	80094fc <LoRaMacInitialization+0x32c>
 80091dc:	460e      	mov	r6, r1
 80091de:	4691      	mov	r9, r2
 80091e0:	4680      	mov	r8, r0
 80091e2:	2900      	cmp	r1, #0
 80091e4:	f000 818c 	beq.w	8009500 <LoRaMacInitialization+0x330>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80091e8:	6803      	ldr	r3, [r0, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 818a 	beq.w	8009504 <LoRaMacInitialization+0x334>
        ( primitives->MacMcpsIndication == NULL ) ||
 80091f0:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8188 	beq.w	8009508 <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80091f8:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8186 	beq.w	800950c <LoRaMacInitialization+0x33c>
        ( primitives->MacMlmeIndication == NULL ) )
 8009200:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8184 	beq.w	8009510 <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009208:	4610      	mov	r0, r2
 800920a:	f001 ffa6 	bl	800b15a <RegionIsActive>
 800920e:	2800      	cmp	r0, #0
 8009210:	f000 8180 	beq.w	8009514 <LoRaMacInitialization+0x344>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8009214:	4640      	mov	r0, r8
 8009216:	f001 f9a3 	bl	800a560 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800921a:	4cc5      	ldr	r4, [pc, #788]	; (8009530 <LoRaMacInitialization+0x360>)
 800921c:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8009220:	2100      	movs	r1, #0
 8009222:	4620      	mov	r0, r4
 8009224:	f005 f879 	bl	800e31a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009228:	4dc2      	ldr	r5, [pc, #776]	; (8009534 <LoRaMacInitialization+0x364>)
 800922a:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800922e:	2100      	movs	r1, #0
 8009230:	4628      	mov	r0, r5
 8009232:	f005 f872 	bl	800e31a <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009236:	f04f 0a01 	mov.w	sl, #1
 800923a:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800923e:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8009242:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009246:	2700      	movs	r7, #0
 8009248:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800924c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009250:	4bb9      	ldr	r3, [pc, #740]	; (8009538 <LoRaMacInitialization+0x368>)
 8009252:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009256:	230f      	movs	r3, #15
 8009258:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800925c:	a908      	add	r1, sp, #32
 800925e:	4648      	mov	r0, r9
 8009260:	f001 ff85 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009264:	1bc0      	subs	r0, r0, r7
 8009266:	bf18      	it	ne
 8009268:	2001      	movne	r0, #1
 800926a:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800926e:	f04f 0b0a 	mov.w	fp, #10
 8009272:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009276:	a908      	add	r1, sp, #32
 8009278:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800927c:	f001 ff77 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009280:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009284:	f04f 0906 	mov.w	r9, #6
 8009288:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800928c:	a908      	add	r1, sp, #32
 800928e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009292:	f001 ff6c 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009296:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800929a:	2310      	movs	r3, #16
 800929c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092a0:	a908      	add	r1, sp, #32
 80092a2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092a6:	f001 ff62 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80092aa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80092ae:	2311      	movs	r3, #17
 80092b0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092b4:	a908      	add	r1, sp, #32
 80092b6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092ba:	f001 ff58 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80092be:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80092c2:	2312      	movs	r3, #18
 80092c4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092c8:	a908      	add	r1, sp, #32
 80092ca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092ce:	f001 ff4e 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80092d2:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80092d6:	2313      	movs	r3, #19
 80092d8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092dc:	a908      	add	r1, sp, #32
 80092de:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092e2:	f001 ff44 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80092e6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80092ea:	2314      	movs	r3, #20
 80092ec:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092f0:	a908      	add	r1, sp, #32
 80092f2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80092f6:	f001 ff3a 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80092fa:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80092fe:	2317      	movs	r3, #23
 8009300:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009304:	a908      	add	r1, sp, #32
 8009306:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800930a:	f001 ff30 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800930e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009312:	2318      	movs	r3, #24
 8009314:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009318:	a908      	add	r1, sp, #32
 800931a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800931e:	f001 ff26 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009322:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009326:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800932a:	2319      	movs	r3, #25
 800932c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009330:	a908      	add	r1, sp, #32
 8009332:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009336:	f001 ff1a 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800933a:	b2c0      	uxtb	r0, r0
 800933c:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009340:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009344:	231e      	movs	r3, #30
 8009346:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800934a:	a908      	add	r1, sp, #32
 800934c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009350:	f001 ff0d 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009354:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009358:	231f      	movs	r3, #31
 800935a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800935e:	a908      	add	r1, sp, #32
 8009360:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009364:	f001 ff03 	bl	800b16e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009368:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800936c:	2320      	movs	r3, #32
 800936e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009372:	eb0d 0103 	add.w	r1, sp, r3
 8009376:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800937a:	f001 fef8 	bl	800b16e <RegionGetPhyParam>
 800937e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009380:	9b07      	ldr	r3, [sp, #28]
 8009382:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009386:	2321      	movs	r3, #33	; 0x21
 8009388:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800938c:	a908      	add	r1, sp, #32
 800938e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009392:	f001 feec 	bl	800b16e <RegionGetPhyParam>
 8009396:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009398:	9b07      	ldr	r3, [sp, #28]
 800939a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800939e:	230b      	movs	r3, #11
 80093a0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80093a4:	a908      	add	r1, sp, #32
 80093a6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80093aa:	f001 fee0 	bl	800b16e <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 80093ae:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80093b2:	230c      	movs	r3, #12
 80093b4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80093b8:	a908      	add	r1, sp, #32
 80093ba:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80093be:	f001 fed6 	bl	800b16e <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 80093c2:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80093c6:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80093ca:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80093ce:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80093d2:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80093d6:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80093da:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80093de:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80093e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80093e4:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80093e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80093ea:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80093ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80093f0:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80093f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80093f6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80093f8:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80093fc:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009400:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8009404:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009406:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 800940a:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800940c:	a904      	add	r1, sp, #16
 800940e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009412:	f001 fed2 	bl	800b1ba <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8009416:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 800941a:	f7ff fbbb 	bl	8008b94 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800941e:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8009422:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8009426:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800942a:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800942e:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009430:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009432:	9700      	str	r7, [sp, #0]
 8009434:	4b41      	ldr	r3, [pc, #260]	; (800953c <LoRaMacInitialization+0x36c>)
 8009436:	463a      	mov	r2, r7
 8009438:	f04f 31ff 	mov.w	r1, #4294967295
 800943c:	f505 705a 	add.w	r0, r5, #872	; 0x368
 8009440:	f007 fbba 	bl	8010bb8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009444:	9700      	str	r7, [sp, #0]
 8009446:	4b3e      	ldr	r3, [pc, #248]	; (8009540 <LoRaMacInitialization+0x370>)
 8009448:	463a      	mov	r2, r7
 800944a:	f04f 31ff 	mov.w	r1, #4294967295
 800944e:	f505 7060 	add.w	r0, r5, #896	; 0x380
 8009452:	f007 fbb1 	bl	8010bb8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009456:	9700      	str	r7, [sp, #0]
 8009458:	4b3a      	ldr	r3, [pc, #232]	; (8009544 <LoRaMacInitialization+0x374>)
 800945a:	463a      	mov	r2, r7
 800945c:	f04f 31ff 	mov.w	r1, #4294967295
 8009460:	f505 7066 	add.w	r0, r5, #920	; 0x398
 8009464:	f007 fba8 	bl	8010bb8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009468:	9700      	str	r7, [sp, #0]
 800946a:	4b37      	ldr	r3, [pc, #220]	; (8009548 <LoRaMacInitialization+0x378>)
 800946c:	463a      	mov	r2, r7
 800946e:	f04f 31ff 	mov.w	r1, #4294967295
 8009472:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 8009476:	f007 fb9f 	bl	8010bb8 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800947a:	af02      	add	r7, sp, #8
 800947c:	4638      	mov	r0, r7
 800947e:	f007 fb2f 	bl	8010ae0 <SysTimeGetMcuTime>
 8009482:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8009486:	e897 0003 	ldmia.w	r7, {r0, r1}
 800948a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800948e:	4b2f      	ldr	r3, [pc, #188]	; (800954c <LoRaMacInitialization+0x37c>)
 8009490:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009494:	4b2e      	ldr	r3, [pc, #184]	; (8009550 <LoRaMacInitialization+0x380>)
 8009496:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800949a:	4b2e      	ldr	r3, [pc, #184]	; (8009554 <LoRaMacInitialization+0x384>)
 800949c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80094a0:	4b2d      	ldr	r3, [pc, #180]	; (8009558 <LoRaMacInitialization+0x388>)
 80094a2:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80094a6:	4b2d      	ldr	r3, [pc, #180]	; (800955c <LoRaMacInitialization+0x38c>)
 80094a8:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80094ac:	4b2c      	ldr	r3, [pc, #176]	; (8009560 <LoRaMacInitialization+0x390>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 80094b4:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80094b6:	68b1      	ldr	r1, [r6, #8]
 80094b8:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80094bc:	f004 fd36 	bl	800df2c <SecureElementInit>
 80094c0:	bb68      	cbnz	r0, 800951e <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80094c2:	4620      	mov	r0, r4
 80094c4:	f001 fadc 	bl	800aa80 <LoRaMacCryptoInit>
 80094c8:	bb58      	cbnz	r0, 8009522 <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80094ca:	f000 ff11 	bl	800a2f0 <LoRaMacCommandsInit>
 80094ce:	bb50      	cbnz	r0, 8009526 <LoRaMacInitialization+0x356>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80094d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80094d4:	f001 fb3c 	bl	800ab50 <LoRaMacCryptoSetMulticastReference>
 80094d8:	4604      	mov	r4, r0
 80094da:	bb30      	cbnz	r0, 800952a <LoRaMacInitialization+0x35a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80094dc:	4d20      	ldr	r5, [pc, #128]	; (8009560 <LoRaMacInitialization+0x390>)
 80094de:	696b      	ldr	r3, [r5, #20]
 80094e0:	4798      	blx	r3
 80094e2:	f004 fef1 	bl	800e2c8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80094e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80094e8:	4a11      	ldr	r2, [pc, #68]	; (8009530 <LoRaMacInitialization+0x360>)
 80094ea:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 80094ee:	4798      	blx	r3
    Radio.Sleep( );
 80094f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80094f2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80094f4:	4650      	mov	r0, sl
 80094f6:	f7fd fce7 	bl	8006ec8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80094fa:	e00c      	b.n	8009516 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80094fc:	2403      	movs	r4, #3
 80094fe:	e00a      	b.n	8009516 <LoRaMacInitialization+0x346>
 8009500:	2403      	movs	r4, #3
 8009502:	e008      	b.n	8009516 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009504:	2403      	movs	r4, #3
 8009506:	e006      	b.n	8009516 <LoRaMacInitialization+0x346>
 8009508:	2403      	movs	r4, #3
 800950a:	e004      	b.n	8009516 <LoRaMacInitialization+0x346>
 800950c:	2403      	movs	r4, #3
 800950e:	e002      	b.n	8009516 <LoRaMacInitialization+0x346>
 8009510:	2403      	movs	r4, #3
 8009512:	e000      	b.n	8009516 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009514:	2409      	movs	r4, #9
}
 8009516:	4620      	mov	r0, r4
 8009518:	b00b      	add	sp, #44	; 0x2c
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800951e:	2411      	movs	r4, #17
 8009520:	e7f9      	b.n	8009516 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009522:	2411      	movs	r4, #17
 8009524:	e7f7      	b.n	8009516 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009526:	2413      	movs	r4, #19
 8009528:	e7f5      	b.n	8009516 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800952a:	2411      	movs	r4, #17
 800952c:	e7f3      	b.n	8009516 <LoRaMacInitialization+0x346>
 800952e:	bf00      	nop
 8009530:	200008fc 	.word	0x200008fc
 8009534:	200003f4 	.word	0x200003f4
 8009538:	01000300 	.word	0x01000300
 800953c:	080085b9 	.word	0x080085b9
 8009540:	08008a35 	.word	0x08008a35
 8009544:	080089e5 	.word	0x080089e5
 8009548:	080072f1 	.word	0x080072f1
 800954c:	08008b3d 	.word	0x08008b3d
 8009550:	08008ae5 	.word	0x08008ae5
 8009554:	08006e7d 	.word	0x08006e7d
 8009558:	08008ab1 	.word	0x08008ab1
 800955c:	08008a7d 	.word	0x08008a7d
 8009560:	08011ee8 	.word	0x08011ee8

08009564 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8009564:	2000      	movs	r0, #0
 8009566:	4b02      	ldr	r3, [pc, #8]	; (8009570 <LoRaMacStart+0xc>)
 8009568:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	200003f4 	.word	0x200003f4

08009574 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8009574:	b530      	push	{r4, r5, lr}
 8009576:	b089      	sub	sp, #36	; 0x24
 8009578:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800957a:	4b2f      	ldr	r3, [pc, #188]	; (8009638 <LoRaMacQueryTxPossible+0xc4>)
 800957c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800957e:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009580:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 8009584:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009588:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800958c:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 8009594:	2900      	cmp	r1, #0
 8009596:	d048      	beq.n	800962a <LoRaMacQueryTxPossible+0xb6>
 8009598:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800959a:	4b27      	ldr	r3, [pc, #156]	; (8009638 <LoRaMacQueryTxPossible+0xc4>)
 800959c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80095a0:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 80095a2:	2100      	movs	r1, #0
 80095a4:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80095a8:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 80095ac:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80095b0:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80095b2:	4a22      	ldr	r2, [pc, #136]	; (800963c <LoRaMacQueryTxPossible+0xc8>)
 80095b4:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 80095b8:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80095bc:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 80095c0:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80095c4:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80095c8:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80095cc:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80095d0:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80095d4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80095d8:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 80095dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095e0:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80095e4:	ab02      	add	r3, sp, #8
 80095e6:	f10d 0206 	add.w	r2, sp, #6
 80095ea:	f10d 0107 	add.w	r1, sp, #7
 80095ee:	a803      	add	r0, sp, #12
 80095f0:	f000 fdcd 	bl	800a18e <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80095f4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80095f8:	f7fd fdcc 	bl	8007194 <GetMaxAppPayloadWithoutFOptsLength>
 80095fc:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80095fe:	4668      	mov	r0, sp
 8009600:	f000 fef8 	bl	800a3f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8009604:	b998      	cbnz	r0, 800962e <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8009606:	9b00      	ldr	r3, [sp, #0]
 8009608:	2b0f      	cmp	r3, #15
 800960a:	d80a      	bhi.n	8009622 <LoRaMacQueryTxPossible+0xae>
 800960c:	786a      	ldrb	r2, [r5, #1]
 800960e:	4293      	cmp	r3, r2
 8009610:	d807      	bhi.n	8009622 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8009616:	9b00      	ldr	r3, [sp, #0]
 8009618:	441c      	add	r4, r3
 800961a:	42a2      	cmp	r2, r4
 800961c:	d309      	bcc.n	8009632 <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800961e:	b009      	add	sp, #36	; 0x24
 8009620:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8009626:	2008      	movs	r0, #8
 8009628:	e7f9      	b.n	800961e <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800962a:	2003      	movs	r0, #3
 800962c:	e7f7      	b.n	800961e <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800962e:	2013      	movs	r0, #19
 8009630:	e7f5      	b.n	800961e <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 8009632:	2008      	movs	r0, #8
 8009634:	e7f3      	b.n	800961e <LoRaMacQueryTxPossible+0xaa>
 8009636:	bf00      	nop
 8009638:	200008fc 	.word	0x200008fc
 800963c:	200003f4 	.word	0x200003f4

08009640 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8009640:	2800      	cmp	r0, #0
 8009642:	f000 8109 	beq.w	8009858 <LoRaMacMibGetRequestConfirm+0x218>
{
 8009646:	b510      	push	{r4, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800964c:	7800      	ldrb	r0, [r0, #0]
 800964e:	2828      	cmp	r0, #40	; 0x28
 8009650:	f200 80fe 	bhi.w	8009850 <LoRaMacMibGetRequestConfirm+0x210>
 8009654:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009658:	002f0029 	.word	0x002f0029
 800965c:	003a0035 	.word	0x003a0035
 8009660:	0045003f 	.word	0x0045003f
 8009664:	00fc004b 	.word	0x00fc004b
 8009668:	00fc00fc 	.word	0x00fc00fc
 800966c:	00fc00fc 	.word	0x00fc00fc
 8009670:	00fc00fc 	.word	0x00fc00fc
 8009674:	005100fc 	.word	0x005100fc
 8009678:	005d0057 	.word	0x005d0057
 800967c:	00710069 	.word	0x00710069
 8009680:	00810079 	.word	0x00810079
 8009684:	00890095 	.word	0x00890095
 8009688:	00a700a1 	.word	0x00a700a1
 800968c:	00b100ac 	.word	0x00b100ac
 8009690:	00bb00b6 	.word	0x00bb00b6
 8009694:	00c600c0 	.word	0x00c600c0
 8009698:	00cc00d2 	.word	0x00cc00d2
 800969c:	00dd00d8 	.word	0x00dd00d8
 80096a0:	00ed00e3 	.word	0x00ed00e3
 80096a4:	00fc00e8 	.word	0x00fc00e8
 80096a8:	00f3      	.short	0x00f3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80096aa:	4b6c      	ldr	r3, [pc, #432]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80096ac:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80096b0:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 80096b2:	b004      	add	sp, #16
 80096b4:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80096b6:	4b69      	ldr	r3, [pc, #420]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80096b8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80096bc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096be:	2000      	movs	r0, #0
            break;
 80096c0:	e7f7      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80096c2:	f004 fdcd 	bl	800e260 <SecureElementGetDevEui>
 80096c6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096c8:	2000      	movs	r0, #0
            break;
 80096ca:	e7f2      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80096cc:	f004 fdde 	bl	800e28c <SecureElementGetJoinEui>
 80096d0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096d2:	2000      	movs	r0, #0
            break;
 80096d4:	e7ed      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80096d6:	4b61      	ldr	r3, [pc, #388]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80096d8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80096dc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096de:	2000      	movs	r0, #0
            break;
 80096e0:	e7e7      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80096e2:	4b5e      	ldr	r3, [pc, #376]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80096e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80096e8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096ea:	2000      	movs	r0, #0
            break;
 80096ec:	e7e1      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80096ee:	4b5b      	ldr	r3, [pc, #364]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80096f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80096f4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80096f6:	2000      	movs	r0, #0
            break;
 80096f8:	e7db      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80096fa:	4b58      	ldr	r3, [pc, #352]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80096fc:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8009700:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009702:	2000      	movs	r0, #0
            break;
 8009704:	e7d5      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009706:	4b55      	ldr	r3, [pc, #340]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 8009708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800970c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800970e:	2000      	movs	r0, #0
            break;
 8009710:	e7cf      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 8009712:	231d      	movs	r3, #29
 8009714:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009718:	a902      	add	r1, sp, #8
 800971a:	4b50      	ldr	r3, [pc, #320]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 800971c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009720:	f001 fd25 	bl	800b16e <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 8009724:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009726:	2000      	movs	r0, #0
            break;
 8009728:	e7c3      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800972a:	3404      	adds	r4, #4
 800972c:	4b4c      	ldr	r3, [pc, #304]	; (8009860 <LoRaMacMibGetRequestConfirm+0x220>)
 800972e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009732:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009736:	2000      	movs	r0, #0
            break;
 8009738:	e7bb      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800973a:	3404      	adds	r4, #4
 800973c:	4b49      	ldr	r3, [pc, #292]	; (8009864 <LoRaMacMibGetRequestConfirm+0x224>)
 800973e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009742:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009746:	2000      	movs	r0, #0
            break;
 8009748:	e7b3      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800974a:	3404      	adds	r4, #4
 800974c:	4b46      	ldr	r3, [pc, #280]	; (8009868 <LoRaMacMibGetRequestConfirm+0x228>)
 800974e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009752:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009756:	2000      	movs	r0, #0
            break;
 8009758:	e7ab      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800975a:	3404      	adds	r4, #4
 800975c:	4b43      	ldr	r3, [pc, #268]	; (800986c <LoRaMacMibGetRequestConfirm+0x22c>)
 800975e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009762:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009766:	2000      	movs	r0, #0
            break;
 8009768:	e7a3      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800976a:	231b      	movs	r3, #27
 800976c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009770:	a902      	add	r1, sp, #8
 8009772:	4b3a      	ldr	r3, [pc, #232]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 8009774:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009778:	f001 fcf9 	bl	800b16e <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800977c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800977e:	2000      	movs	r0, #0
            break;
 8009780:	e797      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009782:	231a      	movs	r3, #26
 8009784:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009788:	a902      	add	r1, sp, #8
 800978a:	4b34      	ldr	r3, [pc, #208]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 800978c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009790:	f001 fced 	bl	800b16e <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8009794:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009796:	2000      	movs	r0, #0
            break;
 8009798:	e78b      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800979a:	4b30      	ldr	r3, [pc, #192]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 800979c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80097a0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097a2:	2000      	movs	r0, #0
            break;
 80097a4:	e785      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80097a6:	4b2d      	ldr	r3, [pc, #180]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097aa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097ac:	2000      	movs	r0, #0
            break;
 80097ae:	e780      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80097b0:	4b2a      	ldr	r3, [pc, #168]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097b6:	2000      	movs	r0, #0
            break;
 80097b8:	e77b      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80097ba:	4b28      	ldr	r3, [pc, #160]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097be:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097c0:	2000      	movs	r0, #0
            break;
 80097c2:	e776      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80097c4:	4b25      	ldr	r3, [pc, #148]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097ca:	2000      	movs	r0, #0
            break;
 80097cc:	e771      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80097ce:	4b23      	ldr	r3, [pc, #140]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097d4:	2000      	movs	r0, #0
            break;
 80097d6:	e76c      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80097d8:	4b20      	ldr	r3, [pc, #128]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097da:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 80097de:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097e0:	2000      	movs	r0, #0
            break;
 80097e2:	e766      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80097e4:	4b1d      	ldr	r3, [pc, #116]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097e6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80097ea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097ec:	2000      	movs	r0, #0
            break;
 80097ee:	e760      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80097f0:	4b1a      	ldr	r3, [pc, #104]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097f2:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 80097f6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097f8:	2000      	movs	r0, #0
            break;
 80097fa:	e75a      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80097fc:	4b17      	ldr	r3, [pc, #92]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 80097fe:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8009802:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009804:	2000      	movs	r0, #0
            break;
 8009806:	e754      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8009808:	4b14      	ldr	r3, [pc, #80]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 800980a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800980e:	2000      	movs	r0, #0
            break;
 8009810:	e74f      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8009812:	4b12      	ldr	r3, [pc, #72]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 8009814:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009818:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800981a:	2000      	movs	r0, #0
            break;
 800981c:	e749      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800981e:	4b0f      	ldr	r3, [pc, #60]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 8009820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009822:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009824:	2000      	movs	r0, #0
            break;
 8009826:	e744      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 8009828:	f7fd fbde 	bl	8006fe8 <GetNvmData>
 800982c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800982e:	2000      	movs	r0, #0
            break;
 8009830:	e73f      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009832:	4b0a      	ldr	r3, [pc, #40]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 8009834:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009838:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800983a:	2000      	movs	r0, #0
            break;
 800983c:	e739      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800983e:	4b07      	ldr	r3, [pc, #28]	; (800985c <LoRaMacMibGetRequestConfirm+0x21c>)
 8009840:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009844:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8009846:	f001 fdbd 	bl	800b3c4 <RegionGetVersion>
 800984a:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800984c:	2000      	movs	r0, #0
            break;
 800984e:	e730      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fcbc 	bl	800a1ce <LoRaMacClassBMibGetRequestConfirm>
            break;
 8009856:	e72c      	b.n	80096b2 <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009858:	2003      	movs	r0, #3
}
 800985a:	4770      	bx	lr
 800985c:	200008fc 	.word	0x200008fc
 8009860:	20000960 	.word	0x20000960
 8009864:	200009a0 	.word	0x200009a0
 8009868:	20000968 	.word	0x20000968
 800986c:	200009a8 	.word	0x200009a8

08009870 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009870:	b530      	push	{r4, r5, lr}
 8009872:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009874:	2800      	cmp	r0, #0
 8009876:	f000 8240 	beq.w	8009cfa <LoRaMacMibSetRequestConfirm+0x48a>
 800987a:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800987c:	4bb1      	ldr	r3, [pc, #708]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800987e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009882:	f013 0f02 	tst.w	r3, #2
 8009886:	f040 823a 	bne.w	8009cfe <LoRaMacMibSetRequestConfirm+0x48e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800988a:	7804      	ldrb	r4, [r0, #0]
 800988c:	2c27      	cmp	r4, #39	; 0x27
 800988e:	f200 8230 	bhi.w	8009cf2 <LoRaMacMibSetRequestConfirm+0x482>
 8009892:	e8df f014 	tbh	[pc, r4, lsl #1]
 8009896:	0028      	.short	0x0028
 8009898:	0036002d 	.word	0x0036002d
 800989c:	0047003f 	.word	0x0047003f
 80098a0:	0053004d 	.word	0x0053004d
 80098a4:	00660059 	.word	0x00660059
 80098a8:	00800073 	.word	0x00800073
 80098ac:	009a008d 	.word	0x009a008d
 80098b0:	00b400a7 	.word	0x00b400a7
 80098b4:	00cc00c1 	.word	0x00cc00c1
 80098b8:	00d2022e 	.word	0x00d2022e
 80098bc:	011000f7 	.word	0x011000f7
 80098c0:	0173013d 	.word	0x0173013d
 80098c4:	01830163 	.word	0x01830163
 80098c8:	0193018e 	.word	0x0193018e
 80098cc:	019d0198 	.word	0x019d0198
 80098d0:	01a701a2 	.word	0x01a701a2
 80098d4:	01e901bc 	.word	0x01e901bc
 80098d8:	01fd01d5 	.word	0x01fd01d5
 80098dc:	020c0204 	.word	0x020c0204
 80098e0:	02170211 	.word	0x02170211
 80098e4:	021e      	.short	0x021e
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80098e6:	7900      	ldrb	r0, [r0, #4]
 80098e8:	f7ff f9f6 	bl	8008cd8 <SwitchClass>
 80098ec:	4604      	mov	r4, r0
            break;
 80098ee:	e207      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80098f0:	7903      	ldrb	r3, [r0, #4]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	f000 8207 	beq.w	8009d06 <LoRaMacMibSetRequestConfirm+0x496>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80098f8:	4a93      	ldr	r2, [pc, #588]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 80098fa:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098fe:	2400      	movs	r4, #0
 8009900:	e1fe      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8009902:	6840      	ldr	r0, [r0, #4]
 8009904:	f004 fc9e 	bl	800e244 <SecureElementSetDevEui>
 8009908:	4604      	mov	r4, r0
 800990a:	2800      	cmp	r0, #0
 800990c:	f000 81f8 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009910:	2403      	movs	r4, #3
 8009912:	e1f5      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8009914:	6840      	ldr	r0, [r0, #4]
 8009916:	f004 fca9 	bl	800e26c <SecureElementSetJoinEui>
 800991a:	2800      	cmp	r0, #0
 800991c:	f040 81f0 	bne.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009920:	4604      	mov	r4, r0
 8009922:	e1ed      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8009924:	7902      	ldrb	r2, [r0, #4]
 8009926:	4b88      	ldr	r3, [pc, #544]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009928:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800992c:	2400      	movs	r4, #0
            break;
 800992e:	e1e7      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8009930:	6842      	ldr	r2, [r0, #4]
 8009932:	4b85      	ldr	r3, [pc, #532]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009934:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009938:	2400      	movs	r4, #0
            break;
 800993a:	e1e1      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800993c:	6842      	ldr	r2, [r0, #4]
 800993e:	4b82      	ldr	r3, [pc, #520]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009940:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009944:	2400      	movs	r4, #0
            break;
 8009946:	e1db      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8009948:	6841      	ldr	r1, [r0, #4]
 800994a:	2900      	cmp	r1, #0
 800994c:	f000 81dd 	beq.w	8009d0a <LoRaMacMibSetRequestConfirm+0x49a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009950:	2000      	movs	r0, #0
 8009952:	f001 fa19 	bl	800ad88 <LoRaMacCryptoSetKey>
 8009956:	4604      	mov	r4, r0
 8009958:	2800      	cmp	r0, #0
 800995a:	f000 81d1 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800995e:	2411      	movs	r4, #17
 8009960:	e1ce      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8009962:	6841      	ldr	r1, [r0, #4]
 8009964:	2900      	cmp	r1, #0
 8009966:	f000 81d2 	beq.w	8009d0e <LoRaMacMibSetRequestConfirm+0x49e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800996a:	2001      	movs	r0, #1
 800996c:	f001 fa0c 	bl	800ad88 <LoRaMacCryptoSetKey>
 8009970:	4604      	mov	r4, r0
 8009972:	2800      	cmp	r0, #0
 8009974:	f000 81c4 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009978:	2411      	movs	r4, #17
 800997a:	e1c1      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800997c:	6841      	ldr	r1, [r0, #4]
 800997e:	2900      	cmp	r1, #0
 8009980:	f000 81c7 	beq.w	8009d12 <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8009984:	2002      	movs	r0, #2
 8009986:	f001 f9ff 	bl	800ad88 <LoRaMacCryptoSetKey>
 800998a:	4604      	mov	r4, r0
 800998c:	2800      	cmp	r0, #0
 800998e:	f000 81b7 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009992:	2411      	movs	r4, #17
 8009994:	e1b4      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8009996:	6841      	ldr	r1, [r0, #4]
 8009998:	2900      	cmp	r1, #0
 800999a:	f000 81bc 	beq.w	8009d16 <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800999e:	2003      	movs	r0, #3
 80099a0:	f001 f9f2 	bl	800ad88 <LoRaMacCryptoSetKey>
 80099a4:	4604      	mov	r4, r0
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f000 81aa 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80099ac:	2411      	movs	r4, #17
 80099ae:	e1a7      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80099b0:	6841      	ldr	r1, [r0, #4]
 80099b2:	2900      	cmp	r1, #0
 80099b4:	f000 81b1 	beq.w	8009d1a <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80099b8:	207f      	movs	r0, #127	; 0x7f
 80099ba:	f001 f9e5 	bl	800ad88 <LoRaMacCryptoSetKey>
 80099be:	4604      	mov	r4, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f000 819d 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80099c6:	2411      	movs	r4, #17
 80099c8:	e19a      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80099ca:	6841      	ldr	r1, [r0, #4]
 80099cc:	2900      	cmp	r1, #0
 80099ce:	f000 81a6 	beq.w	8009d1e <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80099d2:	2080      	movs	r0, #128	; 0x80
 80099d4:	f001 f9d8 	bl	800ad88 <LoRaMacCryptoSetKey>
 80099d8:	4604      	mov	r4, r0
 80099da:	2800      	cmp	r0, #0
 80099dc:	f000 8190 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80099e0:	2411      	movs	r4, #17
 80099e2:	e18d      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80099e4:	6841      	ldr	r1, [r0, #4]
 80099e6:	2900      	cmp	r1, #0
 80099e8:	f000 819b 	beq.w	8009d22 <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80099ec:	2081      	movs	r0, #129	; 0x81
 80099ee:	f001 f9cb 	bl	800ad88 <LoRaMacCryptoSetKey>
 80099f2:	4604      	mov	r4, r0
 80099f4:	2800      	cmp	r0, #0
 80099f6:	f000 8183 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80099fa:	2411      	movs	r4, #17
 80099fc:	e180      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80099fe:	6841      	ldr	r1, [r0, #4]
 8009a00:	2900      	cmp	r1, #0
 8009a02:	f000 8190 	beq.w	8009d26 <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009a06:	2082      	movs	r0, #130	; 0x82
 8009a08:	f001 f9be 	bl	800ad88 <LoRaMacCryptoSetKey>
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f000 8176 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a14:	2411      	movs	r4, #17
 8009a16:	e173      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009a18:	7900      	ldrb	r0, [r0, #4]
 8009a1a:	4b4b      	ldr	r3, [pc, #300]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009a1c:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009a20:	4c4a      	ldr	r4, [pc, #296]	; (8009b4c <LoRaMacMibSetRequestConfirm+0x2dc>)
 8009a22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a24:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8009a26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a28:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a2a:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 8009a2c:	e168      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009a2e:	7902      	ldrb	r2, [r0, #4]
 8009a30:	4b45      	ldr	r3, [pc, #276]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a36:	2400      	movs	r4, #0
            break;
 8009a38:	e162      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009a3a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009a3e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a42:	4b41      	ldr	r3, [pc, #260]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009a44:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009a48:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009a4c:	2207      	movs	r2, #7
 8009a4e:	a901      	add	r1, sp, #4
 8009a50:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a54:	f001 fbbf 	bl	800b1d6 <RegionVerify>
 8009a58:	b908      	cbnz	r0, 8009a5e <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009a5a:	2403      	movs	r4, #3
 8009a5c:	e150      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009a5e:	686b      	ldr	r3, [r5, #4]
 8009a60:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009a62:	2200      	movs	r2, #0
 8009a64:	a901      	add	r1, sp, #4
 8009a66:	4b38      	ldr	r3, [pc, #224]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009a68:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a6c:	f001 fbb3 	bl	800b1d6 <RegionVerify>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	f000 815a 	beq.w	8009d2a <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009a76:	4b36      	ldr	r3, [pc, #216]	; (8009b50 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009a78:	68a9      	ldr	r1, [r5, #8]
 8009a7a:	6868      	ldr	r0, [r5, #4]
 8009a7c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009a80:	2400      	movs	r4, #0
 8009a82:	e13d      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009a84:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009a88:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a8c:	4b2e      	ldr	r3, [pc, #184]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009a8e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009a92:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009a96:	2207      	movs	r2, #7
 8009a98:	a901      	add	r1, sp, #4
 8009a9a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a9e:	f001 fb9a 	bl	800b1d6 <RegionVerify>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f000 8143 	beq.w	8009d2e <LoRaMacMibSetRequestConfirm+0x4be>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009aa8:	4b2a      	ldr	r3, [pc, #168]	; (8009b54 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009aaa:	68a9      	ldr	r1, [r5, #8]
 8009aac:	6868      	ldr	r0, [r5, #4]
 8009aae:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ab2:	2400      	movs	r4, #0
 8009ab4:	e124      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009ab6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009aba:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009abe:	4b22      	ldr	r3, [pc, #136]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009ac0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009ac4:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009ac8:	2207      	movs	r2, #7
 8009aca:	a901      	add	r1, sp, #4
 8009acc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009ad0:	f001 fb81 	bl	800b1d6 <RegionVerify>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f000 812c 	beq.w	8009d32 <LoRaMacMibSetRequestConfirm+0x4c2>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009ada:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009adc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009ae0:	68a9      	ldr	r1, [r5, #8]
 8009ae2:	6868      	ldr	r0, [r5, #4]
 8009ae4:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009ae8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d001      	beq.n	8009af4 <LoRaMacMibSetRequestConfirm+0x284>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009af0:	2400      	movs	r4, #0
 8009af2:	e105      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009af4:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 8009af8:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	f000 80ff 	beq.w	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <LoRaMacMibSetRequestConfirm+0x2dc>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8009b08:	f7fe ff1c 	bl	8008944 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b0c:	2400      	movs	r4, #0
 8009b0e:	e0f7      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b10:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009b14:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b18:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009b1a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009b1e:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b22:	2207      	movs	r2, #7
 8009b24:	a901      	add	r1, sp, #4
 8009b26:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b2a:	f001 fb54 	bl	800b1d6 <RegionVerify>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	f000 8101 	beq.w	8009d36 <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009b34:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8009b36:	68a9      	ldr	r1, [r5, #8]
 8009b38:	6868      	ldr	r0, [r5, #4]
 8009b3a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b3e:	2400      	movs	r4, #0
 8009b40:	e0de      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
 8009b42:	bf00      	nop
 8009b44:	200003f4 	.word	0x200003f4
 8009b48:	200008fc 	.word	0x200008fc
 8009b4c:	08011ee8 	.word	0x08011ee8
 8009b50:	20000960 	.word	0x20000960
 8009b54:	200009a0 	.word	0x200009a0
 8009b58:	200009a8 	.word	0x200009a8
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009b5c:	6843      	ldr	r3, [r0, #4]
 8009b5e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009b66:	a902      	add	r1, sp, #8
 8009b68:	4b7c      	ldr	r3, [pc, #496]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b6a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b6e:	f001 fb50 	bl	800b212 <RegionChanMaskSet>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f000 80e1 	beq.w	8009d3a <LoRaMacMibSetRequestConfirm+0x4ca>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b78:	2400      	movs	r4, #0
 8009b7a:	e0c1      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009b7c:	6843      	ldr	r3, [r0, #4]
 8009b7e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009b86:	a902      	add	r1, sp, #8
 8009b88:	4b74      	ldr	r3, [pc, #464]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009b8a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b8e:	f001 fb40 	bl	800b212 <RegionChanMaskSet>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f000 80d3 	beq.w	8009d3e <LoRaMacMibSetRequestConfirm+0x4ce>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b98:	2400      	movs	r4, #0
 8009b9a:	e0b1      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009b9c:	7902      	ldrb	r2, [r0, #4]
 8009b9e:	1e53      	subs	r3, r2, #1
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b0e      	cmp	r3, #14
 8009ba4:	f200 80cd 	bhi.w	8009d42 <LoRaMacMibSetRequestConfirm+0x4d2>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009ba8:	4b6c      	ldr	r3, [pc, #432]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009baa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bae:	2400      	movs	r4, #0
 8009bb0:	e0a6      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009bb2:	6842      	ldr	r2, [r0, #4]
 8009bb4:	4b69      	ldr	r3, [pc, #420]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bb6:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bb8:	2400      	movs	r4, #0
            break;
 8009bba:	e0a1      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009bbc:	6842      	ldr	r2, [r0, #4]
 8009bbe:	4b67      	ldr	r3, [pc, #412]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bc0:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bc2:	2400      	movs	r4, #0
            break;
 8009bc4:	e09c      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009bc6:	6842      	ldr	r2, [r0, #4]
 8009bc8:	4b64      	ldr	r3, [pc, #400]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bca:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bcc:	2400      	movs	r4, #0
            break;
 8009bce:	e097      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009bd0:	6842      	ldr	r2, [r0, #4]
 8009bd2:	4b62      	ldr	r3, [pc, #392]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bd4:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bd6:	2400      	movs	r4, #0
            break;
 8009bd8:	e092      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009bda:	6842      	ldr	r2, [r0, #4]
 8009bdc:	4b5f      	ldr	r3, [pc, #380]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bde:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009be0:	2400      	movs	r4, #0
            break;
 8009be2:	e08d      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009be4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009be8:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009bec:	2206      	movs	r2, #6
 8009bee:	a901      	add	r1, sp, #4
 8009bf0:	4b5a      	ldr	r3, [pc, #360]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009bf2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009bf6:	f001 faee 	bl	800b1d6 <RegionVerify>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f000 80a3 	beq.w	8009d46 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8009c00:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009c04:	4b55      	ldr	r3, [pc, #340]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c06:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	e078      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009c0e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009c12:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c16:	4b51      	ldr	r3, [pc, #324]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c18:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009c1c:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009c20:	2205      	movs	r2, #5
 8009c22:	a901      	add	r1, sp, #4
 8009c24:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009c28:	f001 fad5 	bl	800b1d6 <RegionVerify>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f000 808c 	beq.w	8009d4a <LoRaMacMibSetRequestConfirm+0x4da>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009c32:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009c36:	4b49      	ldr	r3, [pc, #292]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c3c:	2400      	movs	r4, #0
 8009c3e:	e05f      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009c40:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009c44:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009c48:	220a      	movs	r2, #10
 8009c4a:	a901      	add	r1, sp, #4
 8009c4c:	4b43      	ldr	r3, [pc, #268]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c4e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009c52:	f001 fac0 	bl	800b1d6 <RegionVerify>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d079      	beq.n	8009d4e <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009c5a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009c5e:	4b3f      	ldr	r3, [pc, #252]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c60:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c64:	2400      	movs	r4, #0
 8009c66:	e04b      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009c68:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009c6c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009c70:	2209      	movs	r2, #9
 8009c72:	a901      	add	r1, sp, #4
 8009c74:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c76:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009c7a:	f001 faac 	bl	800b1d6 <RegionVerify>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d067      	beq.n	8009d52 <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009c82:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009c86:	4b35      	ldr	r3, [pc, #212]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c8c:	2400      	movs	r4, #0
 8009c8e:	e037      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009c90:	6842      	ldr	r2, [r0, #4]
 8009c92:	4b32      	ldr	r3, [pc, #200]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009c98:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c9a:	2400      	movs	r4, #0
            break;
 8009c9c:	e030      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009c9e:	7902      	ldrb	r2, [r0, #4]
 8009ca0:	4b2e      	ldr	r3, [pc, #184]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009ca2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8009ca6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009caa:	2400      	movs	r4, #0
            break;
 8009cac:	e028      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009cae:	6842      	ldr	r2, [r0, #4]
 8009cb0:	4b2a      	ldr	r3, [pc, #168]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009cb2:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009cb4:	2400      	movs	r4, #0
            break;
 8009cb6:	e023      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009cb8:	6842      	ldr	r2, [r0, #4]
 8009cba:	4b28      	ldr	r3, [pc, #160]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009cbc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009cc0:	2400      	movs	r4, #0
            break;
 8009cc2:	e01d      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8009cc4:	6840      	ldr	r0, [r0, #4]
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d045      	beq.n	8009d56 <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8009cca:	f7fe fdaf 	bl	800882c <RestoreNvmData>
 8009cce:	4604      	mov	r4, r0
 8009cd0:	e016      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009cd2:	7983      	ldrb	r3, [r0, #6]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d901      	bls.n	8009cdc <LoRaMacMibSetRequestConfirm+0x46c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009cd8:	2403      	movs	r4, #3
 8009cda:	e011      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009cdc:	6842      	ldr	r2, [r0, #4]
 8009cde:	4b1f      	ldr	r3, [pc, #124]	; (8009d5c <LoRaMacMibSetRequestConfirm+0x4ec>)
 8009ce0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009ce4:	6840      	ldr	r0, [r0, #4]
 8009ce6:	f000 fee3 	bl	800aab0 <LoRaMacCryptoSetLrWanVersion>
 8009cea:	4604      	mov	r4, r0
 8009cec:	b140      	cbz	r0, 8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009cee:	2411      	movs	r4, #17
 8009cf0:	e006      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009cf2:	f000 fa6e 	bl	800a1d2 <LoRaMacMibClassBSetRequestConfirm>
 8009cf6:	4604      	mov	r4, r0
            break;
 8009cf8:	e002      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009cfa:	2403      	movs	r4, #3
 8009cfc:	e000      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_BUSY;
 8009cfe:	2401      	movs	r4, #1
        }
    }
    return status;
}
 8009d00:	4620      	mov	r0, r4
 8009d02:	b005      	add	sp, #20
 8009d04:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d06:	2403      	movs	r4, #3
 8009d08:	e7fa      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d0a:	2403      	movs	r4, #3
 8009d0c:	e7f8      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d0e:	2403      	movs	r4, #3
 8009d10:	e7f6      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d12:	2403      	movs	r4, #3
 8009d14:	e7f4      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d16:	2403      	movs	r4, #3
 8009d18:	e7f2      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d1a:	2403      	movs	r4, #3
 8009d1c:	e7f0      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d1e:	2403      	movs	r4, #3
 8009d20:	e7ee      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d22:	2403      	movs	r4, #3
 8009d24:	e7ec      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d26:	2403      	movs	r4, #3
 8009d28:	e7ea      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d2a:	2403      	movs	r4, #3
 8009d2c:	e7e8      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d2e:	2403      	movs	r4, #3
 8009d30:	e7e6      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d32:	2403      	movs	r4, #3
 8009d34:	e7e4      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d36:	2403      	movs	r4, #3
 8009d38:	e7e2      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d3a:	2403      	movs	r4, #3
 8009d3c:	e7e0      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d3e:	2403      	movs	r4, #3
 8009d40:	e7de      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d42:	2403      	movs	r4, #3
 8009d44:	e7dc      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d46:	2403      	movs	r4, #3
 8009d48:	e7da      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d4a:	2403      	movs	r4, #3
 8009d4c:	e7d8      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d4e:	2403      	movs	r4, #3
 8009d50:	e7d6      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d52:	2403      	movs	r4, #3
 8009d54:	e7d4      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d56:	2403      	movs	r4, #3
 8009d58:	e7d2      	b.n	8009d00 <LoRaMacMibSetRequestConfirm+0x490>
 8009d5a:	bf00      	nop
 8009d5c:	200008fc 	.word	0x200008fc

08009d60 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009d64:	2300      	movs	r3, #0
 8009d66:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	f000 80c5 	beq.w	8009efa <LoRaMacMlmeRequest+0x19a>
 8009d70:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009d72:	f7ff f9e7 	bl	8009144 <LoRaMacIsBusy>
 8009d76:	b118      	cbz	r0, 8009d80 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 8009d78:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	b002      	add	sp, #8
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009d80:	f000 fccc 	bl	800a71c <LoRaMacConfirmQueueIsFull>
 8009d84:	b108      	cbz	r0, 8009d8a <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 8009d86:	2401      	movs	r4, #1
 8009d88:	e7f7      	b.n	8009d7a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009d8a:	f000 fcc1 	bl	800a710 <LoRaMacConfirmQueueGetCnt>
 8009d8e:	b1f8      	cbz	r0, 8009dd0 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d90:	4b5b      	ldr	r3, [pc, #364]	; (8009f00 <LoRaMacMlmeRequest+0x1a0>)
 8009d92:	2101      	movs	r1, #1
 8009d94:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009d98:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009d9c:	f042 0204 	orr.w	r2, r2, #4
 8009da0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8009da4:	782b      	ldrb	r3, [r5, #0]
 8009da6:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009daa:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 8009dae:	2200      	movs	r2, #0
 8009db0:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 8009db4:	461c      	mov	r4, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	2b0d      	cmp	r3, #13
 8009dba:	f200 8084 	bhi.w	8009ec6 <LoRaMacMlmeRequest+0x166>
 8009dbe:	e8df f003 	tbb	[pc, r3]
 8009dc2:	820d      	.short	0x820d
 8009dc4:	423d3382 	.word	0x423d3382
 8009dc8:	4b828282 	.word	0x4b828282
 8009dcc:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009dd0:	2214      	movs	r2, #20
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	484b      	ldr	r0, [pc, #300]	; (8009f04 <LoRaMacMlmeRequest+0x1a4>)
 8009dd6:	f004 faa0 	bl	800e31a <memset1>
 8009dda:	e7d9      	b.n	8009d90 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009ddc:	4b48      	ldr	r3, [pc, #288]	; (8009f00 <LoRaMacMlmeRequest+0x1a0>)
 8009dde:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009de2:	f013 0f20 	tst.w	r3, #32
 8009de6:	d1c8      	bne.n	8009d7a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009de8:	f7fe fed4 	bl	8008b94 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009dec:	4c46      	ldr	r4, [pc, #280]	; (8009f08 <LoRaMacMlmeRequest+0x1a8>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009df4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009df8:	f001 faa2 	bl	800b340 <RegionAlternateDr>
 8009dfc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009e00:	2307      	movs	r3, #7
 8009e02:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 8009e06:	20ff      	movs	r0, #255	; 0xff
 8009e08:	f7fe ffea 	bl	8008de0 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d05a      	beq.n	8009ec8 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009e12:	4e3d      	ldr	r6, [pc, #244]	; (8009f08 <LoRaMacMlmeRequest+0x1a8>)
 8009e14:	2201      	movs	r2, #1
 8009e16:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009e1a:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8009e1e:	f001 fa8f 	bl	800b340 <RegionAlternateDr>
 8009e22:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 8009e26:	e04f      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4669      	mov	r1, sp
 8009e2c:	2002      	movs	r0, #2
 8009e2e:	f000 fa6d 	bl	800a30c <LoRaMacCommandsAddCmd>
 8009e32:	4604      	mov	r4, r0
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d047      	beq.n	8009ec8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e38:	2413      	movs	r4, #19
 8009e3a:	e045      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009e3c:	88a8      	ldrh	r0, [r5, #4]
 8009e3e:	f7fe fffd 	bl	8008e3c <SetTxContinuousWave>
 8009e42:	4604      	mov	r4, r0
            break;
 8009e44:	e040      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8009e46:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	68a9      	ldr	r1, [r5, #8]
 8009e4e:	88a8      	ldrh	r0, [r5, #4]
 8009e50:	f7fd f8b4 	bl	8006fbc <SetTxContinuousWave1>
 8009e54:	4604      	mov	r4, r0
            break;
 8009e56:	e037      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4669      	mov	r1, sp
 8009e5c:	200d      	movs	r0, #13
 8009e5e:	f000 fa55 	bl	800a30c <LoRaMacCommandsAddCmd>
 8009e62:	4604      	mov	r4, r0
 8009e64:	b380      	cbz	r0, 8009ec8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e66:	2413      	movs	r4, #19
 8009e68:	e02e      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009e6a:	4b27      	ldr	r3, [pc, #156]	; (8009f08 <LoRaMacMlmeRequest+0x1a8>)
 8009e6c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009e70:	b10b      	cbz	r3, 8009e76 <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009e72:	2402      	movs	r4, #2
 8009e74:	e028      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009e76:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009e78:	f004 0007 	and.w	r0, r4, #7
 8009e7c:	f000 f9a2 	bl	800a1c4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009e80:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009e84:	2201      	movs	r2, #1
 8009e86:	4669      	mov	r1, sp
 8009e88:	2010      	movs	r0, #16
 8009e8a:	f000 fa3f 	bl	800a30c <LoRaMacCommandsAddCmd>
 8009e8e:	4604      	mov	r4, r0
 8009e90:	b1d0      	cbz	r0, 8009ec8 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e92:	2413      	movs	r4, #19
 8009e94:	e018      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009e96:	2200      	movs	r2, #0
 8009e98:	4669      	mov	r1, sp
 8009e9a:	2012      	movs	r0, #18
 8009e9c:	f000 fa36 	bl	800a30c <LoRaMacCommandsAddCmd>
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	b188      	cbz	r0, 8009ec8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009ea4:	2413      	movs	r4, #19
 8009ea6:	e00f      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009eae:	f000 f97a 	bl	800a1a6 <LoRaMacClassBIsAcquisitionInProgress>
 8009eb2:	b108      	cbz	r0, 8009eb8 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 8009eb4:	2401      	movs	r4, #1
 8009eb6:	e007      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009eb8:	f000 f972 	bl	800a1a0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	f000 f974 	bl	800a1aa <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009ec2:	2400      	movs	r4, #0
 8009ec4:	e000      	b.n	8009ec8 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 8009ec6:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009ec8:	4b0d      	ldr	r3, [pc, #52]	; (8009f00 <LoRaMacMlmeRequest+0x1a0>)
 8009eca:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8009ece:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8009ed0:	b17c      	cbz	r4, 8009ef2 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009ed2:	f000 fc1d 	bl	800a710 <LoRaMacConfirmQueueGetCnt>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f47f af4f 	bne.w	8009d7a <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 8009edc:	4b08      	ldr	r3, [pc, #32]	; (8009f00 <LoRaMacMlmeRequest+0x1a0>)
 8009ede:	2100      	movs	r1, #0
 8009ee0:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009ee4:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009ee8:	f361 0282 	bfi	r2, r1, #2, #1
 8009eec:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8009ef0:	e743      	b.n	8009d7a <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009ef2:	a801      	add	r0, sp, #4
 8009ef4:	f000 fb48 	bl	800a588 <LoRaMacConfirmQueueAdd>
 8009ef8:	e73f      	b.n	8009d7a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009efa:	2403      	movs	r4, #3
 8009efc:	e73d      	b.n	8009d7a <LoRaMacMlmeRequest+0x1a>
 8009efe:	bf00      	nop
 8009f00:	200003f4 	.word	0x200003f4
 8009f04:	20000840 	.word	0x20000840
 8009f08:	200008fc 	.word	0x200008fc

08009f0c <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f000 80af 	beq.w	800a070 <LoRaMacMcpsRequest+0x164>
{
 8009f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	460d      	mov	r5, r1
 8009f1a:	f04f 0800 	mov.w	r8, #0
 8009f1e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009f20:	f7ff f910 	bl	8009144 <LoRaMacIsBusy>
 8009f24:	4606      	mov	r6, r0
 8009f26:	b118      	cbz	r0, 8009f30 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8009f28:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009f2a:	b008      	add	sp, #32
 8009f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 8009f30:	4641      	mov	r1, r8
 8009f32:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009f36:	4f50      	ldr	r7, [pc, #320]	; (800a078 <LoRaMacMcpsRequest+0x16c>)
 8009f38:	2214      	movs	r2, #20
 8009f3a:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 8009f3e:	f004 f9ec 	bl	800e31a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009f48:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 8009f4c:	7823      	ldrb	r3, [r4, #0]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d058      	beq.n	800a004 <LoRaMacMcpsRequest+0xf8>
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d06e      	beq.n	800a034 <LoRaMacMcpsRequest+0x128>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d041      	beq.n	8009fde <LoRaMacMcpsRequest+0xd2>
 8009f5a:	2700      	movs	r7, #0
 8009f5c:	46ba      	mov	sl, r7
 8009f5e:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009f60:	2302      	movs	r3, #2
 8009f62:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009f66:	4b45      	ldr	r3, [pc, #276]	; (800a07c <LoRaMacMcpsRequest+0x170>)
 8009f68:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009f6c:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f70:	a906      	add	r1, sp, #24
 8009f72:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009f76:	f001 f8fa 	bl	800b16e <RegionGetPhyParam>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009f7a:	b240      	sxtb	r0, r0
 8009f7c:	42b8      	cmp	r0, r7
 8009f7e:	bfb8      	it	lt
 8009f80:	4638      	movlt	r0, r7
    if( readyToSend == true )
 8009f82:	2e00      	cmp	r6, #0
 8009f84:	d06e      	beq.n	800a064 <LoRaMacMcpsRequest+0x158>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8009f86:	4b3d      	ldr	r3, [pc, #244]	; (800a07c <LoRaMacMcpsRequest+0x170>)
 8009f88:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009f8c:	b99b      	cbnz	r3, 8009fb6 <LoRaMacMcpsRequest+0xaa>
            verify.DatarateParams.Datarate = datarate;
 8009f8e:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009f92:	4b3a      	ldr	r3, [pc, #232]	; (800a07c <LoRaMacMcpsRequest+0x170>)
 8009f94:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009f98:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009f9c:	2205      	movs	r2, #5
 8009f9e:	a903      	add	r1, sp, #12
 8009fa0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009fa4:	f001 f917 	bl	800b1d6 <RegionVerify>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d063      	beq.n	800a074 <LoRaMacMcpsRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009fac:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 8009fb0:	4b32      	ldr	r3, [pc, #200]	; (800a07c <LoRaMacMcpsRequest+0x170>)
 8009fb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009fb6:	9500      	str	r5, [sp, #0]
 8009fb8:	4643      	mov	r3, r8
 8009fba:	4652      	mov	r2, sl
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	a804      	add	r0, sp, #16
 8009fc0:	f7ff f828 	bl	8009014 <Send>
        if( status == LORAMAC_STATUS_OK )
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d148      	bne.n	800a05a <LoRaMacMcpsRequest+0x14e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8009fc8:	7822      	ldrb	r2, [r4, #0]
 8009fca:	4b2b      	ldr	r3, [pc, #172]	; (800a078 <LoRaMacMcpsRequest+0x16c>)
 8009fcc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8009fd0:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009fd4:	f042 0201 	orr.w	r2, r2, #1
 8009fd8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8009fdc:	e043      	b.n	800a066 <LoRaMacMcpsRequest+0x15a>
            MacCtx.AckTimeoutRetries = 1;
 8009fde:	2601      	movs	r6, #1
 8009fe0:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009fe4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f362 1347 	bfi	r3, r2, #5, #3
 8009fee:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8009ff2:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8009ff6:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8009ffa:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8009ffe:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800a002:	e7ad      	b.n	8009f60 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800a004:	7be3      	ldrb	r3, [r4, #15]
 800a006:	2b08      	cmp	r3, #8
 800a008:	bf28      	it	cs
 800a00a:	2308      	movcs	r3, #8
 800a00c:	4a1a      	ldr	r2, [pc, #104]	; (800a078 <LoRaMacMcpsRequest+0x16c>)
 800a00e:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a012:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a016:	2204      	movs	r2, #4
 800a018:	f362 1347 	bfi	r3, r2, #5, #3
 800a01c:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a020:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a024:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a028:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a02c:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800a030:	2601      	movs	r6, #1
            break;
 800a032:	e795      	b.n	8009f60 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800a034:	2601      	movs	r6, #1
 800a036:	4b10      	ldr	r3, [pc, #64]	; (800a078 <LoRaMacMcpsRequest+0x16c>)
 800a038:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a03c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a040:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800a044:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a048:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800a04c:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a050:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800a054:	f04f 0900 	mov.w	r9, #0
            break;
 800a058:	e782      	b.n	8009f60 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800a05a:	4b07      	ldr	r3, [pc, #28]	; (800a078 <LoRaMacMcpsRequest+0x16c>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800a062:	e000      	b.n	800a066 <LoRaMacMcpsRequest+0x15a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a064:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a066:	4b04      	ldr	r3, [pc, #16]	; (800a078 <LoRaMacMcpsRequest+0x16c>)
 800a068:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800a06c:	6123      	str	r3, [r4, #16]
    return status;
 800a06e:	e75c      	b.n	8009f2a <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a070:	2003      	movs	r0, #3
}
 800a072:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800a074:	2003      	movs	r0, #3
 800a076:	e758      	b.n	8009f2a <LoRaMacMcpsRequest+0x1e>
 800a078:	200003f4 	.word	0x200003f4
 800a07c:	200008fc 	.word	0x200008fc

0800a080 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800a080:	b510      	push	{r4, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800a086:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a08a:	220f      	movs	r2, #15
 800a08c:	a901      	add	r1, sp, #4
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800a090:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a094:	f001 f89f 	bl	800b1d6 <RegionVerify>
 800a098:	b110      	cbz	r0, 800a0a0 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800a09a:	4b02      	ldr	r3, [pc, #8]	; (800a0a4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800a09c:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 800a0a0:	b002      	add	sp, #8
 800a0a2:	bd10      	pop	{r4, pc}
 800a0a4:	200008fc 	.word	0x200008fc

0800a0a8 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	b089      	sub	sp, #36	; 0x24
 800a0ae:	460f      	mov	r7, r1
 800a0b0:	4616      	mov	r6, r2
 800a0b2:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800a0b4:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800a0b8:	f990 a011 	ldrsb.w	sl, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800a0bc:	6883      	ldr	r3, [r0, #8]
 800a0be:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800a0c0:	f890 8005 	ldrb.w	r8, [r0, #5]
 800a0c4:	f1b8 0f00 	cmp.w	r8, #0
 800a0c8:	d107      	bne.n	800a0da <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800a0ca:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800a0ce:	f886 a000 	strb.w	sl, [r6]
    return adrAckReq;
}
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	b009      	add	sp, #36	; 0x24
 800a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a0e2:	7c83      	ldrb	r3, [r0, #18]
 800a0e4:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a0e8:	a906      	add	r1, sp, #24
 800a0ea:	7cc0      	ldrb	r0, [r0, #19]
 800a0ec:	f001 f83f 	bl	800b16e <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800a0f0:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 800a0f4:	464a      	mov	r2, r9
 800a0f6:	45d9      	cmp	r9, fp
 800a0f8:	bfb8      	it	lt
 800a0fa:	465a      	movlt	r2, fp
 800a0fc:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800a0fe:	45d9      	cmp	r9, fp
 800a100:	dc04      	bgt.n	800a10c <CalcNextV10X+0x64>
            *adrAckCounter = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800a106:	4691      	mov	r9, r2
            adrAckReq = false;
 800a108:	4698      	mov	r8, r3
 800a10a:	e7de      	b.n	800a0ca <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a10c:	68a2      	ldr	r2, [r4, #8]
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	429a      	cmp	r2, r3
 800a112:	d201      	bcs.n	800a118 <CalcNextV10X+0x70>
                adrAckReq = false;
 800a114:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a118:	89e1      	ldrh	r1, [r4, #14]
 800a11a:	440b      	add	r3, r1
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d202      	bcs.n	800a126 <CalcNextV10X+0x7e>
        datarate = MAX( datarate, minTxDatarate );
 800a120:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a124:	e7d1      	b.n	800a0ca <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a126:	2308      	movs	r3, #8
 800a128:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a12c:	a906      	add	r1, sp, #24
 800a12e:	7ce0      	ldrb	r0, [r4, #19]
 800a130:	f001 f81d 	bl	800b16e <RegionGetPhyParam>
                txPower = phyParam.Value;
 800a134:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a138:	68a1      	ldr	r1, [r4, #8]
 800a13a:	89e2      	ldrh	r2, [r4, #14]
 800a13c:	fbb1 f3f2 	udiv	r3, r1, r2
 800a140:	fb02 1313 	mls	r3, r2, r3, r1
 800a144:	2b01      	cmp	r3, #1
 800a146:	d002      	beq.n	800a14e <CalcNextV10X+0xa6>
        datarate = MAX( datarate, minTxDatarate );
 800a148:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a14c:	e7bd      	b.n	800a0ca <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a14e:	2322      	movs	r3, #34	; 0x22
 800a150:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800a154:	9b01      	ldr	r3, [sp, #4]
 800a156:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a15a:	7ca3      	ldrb	r3, [r4, #18]
 800a15c:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a160:	a906      	add	r1, sp, #24
 800a162:	7ce0      	ldrb	r0, [r4, #19]
 800a164:	f001 f803 	bl	800b16e <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800a168:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800a16c:	45cb      	cmp	fp, r9
 800a16e:	d1ac      	bne.n	800a0ca <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800a170:	f894 8004 	ldrb.w	r8, [r4, #4]
 800a174:	f1b8 0f00 	cmp.w	r8, #0
 800a178:	d0a7      	beq.n	800a0ca <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a17a:	2302      	movs	r3, #2
 800a17c:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800a180:	a902      	add	r1, sp, #8
 800a182:	7ce0      	ldrb	r0, [r4, #19]
 800a184:	f001 f819 	bl	800b1ba <RegionInitDefaults>
                        adrAckReq = false;
 800a188:	f04f 0800 	mov.w	r8, #0
 800a18c:	e79d      	b.n	800a0ca <CalcNextV10X+0x22>

0800a18e <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a18e:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800a190:	7884      	ldrb	r4, [r0, #2]
 800a192:	b10c      	cbz	r4, 800a198 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a194:	2000      	movs	r0, #0
}
 800a196:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800a198:	f7ff ff86 	bl	800a0a8 <CalcNextV10X>
 800a19c:	e7fb      	b.n	800a196 <LoRaMacAdrCalcNext+0x8>

0800a19e <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a19e:	4770      	bx	lr

0800a1a0 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1a0:	4770      	bx	lr

0800a1a2 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1a2:	4770      	bx	lr

0800a1a4 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1a4:	4770      	bx	lr

0800a1a6 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	4770      	bx	lr

0800a1aa <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1aa:	4770      	bx	lr

0800a1ac <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1ac:	4770      	bx	lr

0800a1ae <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1ae:	4770      	bx	lr

0800a1b0 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	4770      	bx	lr

0800a1b4 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	4770      	bx	lr

0800a1b8 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	4770      	bx	lr

0800a1bc <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1bc:	2000      	movs	r0, #0
 800a1be:	4770      	bx	lr

0800a1c0 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	4770      	bx	lr

0800a1c4 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1c4:	4770      	bx	lr

0800a1c6 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1c6:	4770      	bx	lr

0800a1c8 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1c8:	4770      	bx	lr

0800a1ca <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1ca:	2002      	movs	r0, #2
 800a1cc:	4770      	bx	lr

0800a1ce <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1ce:	2002      	movs	r0, #2
 800a1d0:	4770      	bx	lr

0800a1d2 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1d2:	2002      	movs	r0, #2
 800a1d4:	4770      	bx	lr

0800a1d6 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1d6:	4770      	bx	lr

0800a1d8 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1d8:	2000      	movs	r0, #0
 800a1da:	4770      	bx	lr

0800a1dc <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1dc:	4770      	bx	lr

0800a1de <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1de:	4770      	bx	lr

0800a1e0 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	4770      	bx	lr

0800a1e4 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	4770      	bx	lr

0800a1e8 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1e8:	4770      	bx	lr

0800a1ea <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a1ea:	4770      	bx	lr

0800a1ec <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d804      	bhi.n	800a1fc <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800a1f2:	5cc2      	ldrb	r2, [r0, r3]
 800a1f4:	b922      	cbnz	r2, 800a200 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	e7f8      	b.n	800a1ee <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	4770      	bx	lr
            return false;
 800a200:	2000      	movs	r0, #0
}
 800a202:	4770      	bx	lr

0800a204 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800a204:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800a206:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a208:	0125      	lsls	r5, r4, #4
 800a20a:	f105 0308 	add.w	r3, r5, #8
 800a20e:	4d06      	ldr	r5, [pc, #24]	; (800a228 <MallocNewMacCommandSlot+0x24>)
 800a210:	441d      	add	r5, r3
 800a212:	4628      	mov	r0, r5
 800a214:	f7ff ffea 	bl	800a1ec <IsSlotFree>
 800a218:	b920      	cbnz	r0, 800a224 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800a21a:	3401      	adds	r4, #1
 800a21c:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800a21e:	2c0f      	cmp	r4, #15
 800a220:	d1f2      	bne.n	800a208 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800a222:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800a224:	4628      	mov	r0, r5
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20000f0c 	.word	0x20000f0c

0800a22c <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800a22c:	b120      	cbz	r0, 800a238 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800a22e:	2200      	movs	r2, #0
 800a230:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800a232:	6042      	str	r2, [r0, #4]

    return true;
 800a234:	2001      	movs	r0, #1
 800a236:	4770      	bx	lr
        return false;
 800a238:	2000      	movs	r0, #0
}
 800a23a:	4770      	bx	lr

0800a23c <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a23c:	4603      	mov	r3, r0
 800a23e:	b160      	cbz	r0, 800a25a <LinkedListAdd+0x1e>
 800a240:	b169      	cbz	r1, 800a25e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800a242:	6802      	ldr	r2, [r0, #0]
 800a244:	b13a      	cbz	r2, 800a256 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	b102      	cbz	r2, 800a24c <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800a24a:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800a24c:	2200      	movs	r2, #0
 800a24e:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800a250:	6059      	str	r1, [r3, #4]

    return true;
 800a252:	2001      	movs	r0, #1
 800a254:	4770      	bx	lr
        list->First = element;
 800a256:	6001      	str	r1, [r0, #0]
 800a258:	e7f5      	b.n	800a246 <LinkedListAdd+0xa>
        return false;
 800a25a:	2000      	movs	r0, #0
 800a25c:	4770      	bx	lr
 800a25e:	2000      	movs	r0, #0
}
 800a260:	4770      	bx	lr

0800a262 <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a262:	b160      	cbz	r0, 800a27e <LinkedListGetPrevious+0x1c>
 800a264:	b161      	cbz	r1, 800a280 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800a266:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800a268:	4281      	cmp	r1, r0
 800a26a:	d102      	bne.n	800a272 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800a26c:	2000      	movs	r0, #0
    }

    return curElement;
}
 800a26e:	4770      	bx	lr
            curElement = curElement->Next;
 800a270:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a272:	2800      	cmp	r0, #0
 800a274:	d0fb      	beq.n	800a26e <LinkedListGetPrevious+0xc>
 800a276:	6803      	ldr	r3, [r0, #0]
 800a278:	428b      	cmp	r3, r1
 800a27a:	d1f9      	bne.n	800a270 <LinkedListGetPrevious+0xe>
 800a27c:	4770      	bx	lr
 800a27e:	4770      	bx	lr
        return NULL;
 800a280:	4608      	mov	r0, r1
 800a282:	4770      	bx	lr

0800a284 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a284:	b1b8      	cbz	r0, 800a2b6 <LinkedListRemove+0x32>
{
 800a286:	b538      	push	{r3, r4, r5, lr}
 800a288:	460c      	mov	r4, r1
 800a28a:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800a28c:	b1a9      	cbz	r1, 800a2ba <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800a28e:	f7ff ffe8 	bl	800a262 <LinkedListGetPrevious>

    if( list->First == element )
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	42a3      	cmp	r3, r4
 800a296:	d009      	beq.n	800a2ac <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800a298:	686b      	ldr	r3, [r5, #4]
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	d009      	beq.n	800a2b2 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800a29e:	b108      	cbz	r0, 800a2a4 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	6023      	str	r3, [r4, #0]

    return true;
 800a2a8:	2001      	movs	r0, #1
}
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	602b      	str	r3, [r5, #0]
 800a2b0:	e7f2      	b.n	800a298 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800a2b2:	6068      	str	r0, [r5, #4]
 800a2b4:	e7f3      	b.n	800a29e <LinkedListRemove+0x1a>
        return false;
 800a2b6:	2000      	movs	r0, #0
}
 800a2b8:	4770      	bx	lr
        return false;
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e7f5      	b.n	800a2aa <LinkedListRemove+0x26>

0800a2be <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800a2be:	2805      	cmp	r0, #5
 800a2c0:	d006      	beq.n	800a2d0 <IsSticky+0x12>
 800a2c2:	d307      	bcc.n	800a2d4 <IsSticky+0x16>
 800a2c4:	3808      	subs	r0, #8
 800a2c6:	b2c0      	uxtb	r0, r0
 800a2c8:	2802      	cmp	r0, #2
 800a2ca:	d905      	bls.n	800a2d8 <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	4770      	bx	lr
    switch( cid )
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	4770      	bx	lr
            return false;
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	4770      	bx	lr
    switch( cid )
 800a2d8:	2001      	movs	r0, #1
    }
}
 800a2da:	4770      	bx	lr

0800a2dc <FreeMacCommandSlot>:
    if( slot == NULL )
 800a2dc:	b130      	cbz	r0, 800a2ec <FreeMacCommandSlot+0x10>
{
 800a2de:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a2e0:	2210      	movs	r2, #16
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	f004 f819 	bl	800e31a <memset1>
    return true;
 800a2e8:	2001      	movs	r0, #1
}
 800a2ea:	bd08      	pop	{r3, pc}
        return false;
 800a2ec:	2000      	movs	r0, #0
}
 800a2ee:	4770      	bx	lr

0800a2f0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a2f0:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a2f2:	4c05      	ldr	r4, [pc, #20]	; (800a308 <LoRaMacCommandsInit+0x18>)
 800a2f4:	22fc      	movs	r2, #252	; 0xfc
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f004 f80e 	bl	800e31a <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff ff94 	bl	800a22c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a304:	2000      	movs	r0, #0
 800a306:	bd10      	pop	{r4, pc}
 800a308:	20000f0c 	.word	0x20000f0c

0800a30c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800a30c:	b301      	cbz	r1, 800a350 <LoRaMacCommandsAddCmd+0x44>
{
 800a30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a310:	4605      	mov	r5, r0
 800a312:	4614      	mov	r4, r2
 800a314:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800a316:	f7ff ff75 	bl	800a204 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800a31a:	4606      	mov	r6, r0
 800a31c:	b1d0      	cbz	r0, 800a354 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800a31e:	4601      	mov	r1, r0
 800a320:	480e      	ldr	r0, [pc, #56]	; (800a35c <LoRaMacCommandsAddCmd+0x50>)
 800a322:	f7ff ff8b 	bl	800a23c <LinkedListAdd>
 800a326:	b1b8      	cbz	r0, 800a358 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a328:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800a32a:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a32c:	b2a2      	uxth	r2, r4
 800a32e:	4639      	mov	r1, r7
 800a330:	1d70      	adds	r0, r6, #5
 800a332:	f003 ffdc 	bl	800e2ee <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800a336:	4628      	mov	r0, r5
 800a338:	f7ff ffc1 	bl	800a2be <IsSticky>
 800a33c:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a33e:	4b07      	ldr	r3, [pc, #28]	; (800a35c <LoRaMacCommandsAddCmd+0x50>)
 800a340:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800a344:	4414      	add	r4, r2
 800a346:	3401      	adds	r4, #1
 800a348:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800a34c:	2000      	movs	r0, #0
}
 800a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a350:	2001      	movs	r0, #1
}
 800a352:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a354:	2002      	movs	r0, #2
 800a356:	e7fa      	b.n	800a34e <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800a358:	2005      	movs	r0, #5
 800a35a:	e7f8      	b.n	800a34e <LoRaMacCommandsAddCmd+0x42>
 800a35c:	20000f0c 	.word	0x20000f0c

0800a360 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800a360:	b1a0      	cbz	r0, 800a38c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800a362:	b510      	push	{r4, lr}
 800a364:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800a366:	4601      	mov	r1, r0
 800a368:	480b      	ldr	r0, [pc, #44]	; (800a398 <LoRaMacCommandsRemoveCmd+0x38>)
 800a36a:	f7ff ff8b 	bl	800a284 <LinkedListRemove>
 800a36e:	b178      	cbz	r0, 800a390 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a370:	68a1      	ldr	r1, [r4, #8]
 800a372:	4a09      	ldr	r2, [pc, #36]	; (800a398 <LoRaMacCommandsRemoveCmd+0x38>)
 800a374:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800a378:	1a5b      	subs	r3, r3, r1
 800a37a:	3b01      	subs	r3, #1
 800a37c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800a380:	4620      	mov	r0, r4
 800a382:	f7ff ffab 	bl	800a2dc <FreeMacCommandSlot>
 800a386:	b128      	cbz	r0, 800a394 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a388:	2000      	movs	r0, #0
}
 800a38a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a38c:	2001      	movs	r0, #1
}
 800a38e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800a390:	2003      	movs	r0, #3
 800a392:	e7fa      	b.n	800a38a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800a394:	2005      	movs	r0, #5
 800a396:	e7f8      	b.n	800a38a <LoRaMacCommandsRemoveCmd+0x2a>
 800a398:	20000f0c 	.word	0x20000f0c

0800a39c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a39c:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800a39e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a3a0:	b120      	cbz	r0, 800a3ac <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800a3a2:	7b03      	ldrb	r3, [r0, #12]
 800a3a4:	b11b      	cbz	r3, 800a3ae <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800a3a6:	6800      	ldr	r0, [r0, #0]
 800a3a8:	e7fa      	b.n	800a3a0 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a3aa:	bd10      	pop	{r4, pc}
 800a3ac:	4770      	bx	lr
{
 800a3ae:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800a3b0:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800a3b2:	f7ff ffd5 	bl	800a360 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800a3b6:	4620      	mov	r0, r4
    while( curElement != NULL )
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d0f6      	beq.n	800a3aa <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800a3bc:	7b03      	ldrb	r3, [r0, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0f6      	beq.n	800a3b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800a3c2:	6800      	ldr	r0, [r0, #0]
 800a3c4:	e7f8      	b.n	800a3b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800a3c6:	bf00      	nop
 800a3c8:	20000f0c 	.word	0x20000f0c

0800a3cc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a3cc:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a3ce:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a3d0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a3d2:	e003      	b.n	800a3dc <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f7ff ffc3 	bl	800a360 <LoRaMacCommandsRemoveCmd>
{
 800a3da:	462c      	mov	r4, r5
    while( curElement != NULL )
 800a3dc:	b134      	cbz	r4, 800a3ec <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
        nexElement = curElement->Next;
 800a3de:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800a3e0:	7920      	ldrb	r0, [r4, #4]
 800a3e2:	f7ff ff6c 	bl	800a2be <IsSticky>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d0f7      	beq.n	800a3da <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 800a3ea:	e7f3      	b.n	800a3d4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	20000f0c 	.word	0x20000f0c

0800a3f4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800a3f4:	b128      	cbz	r0, 800a402 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800a3f6:	4a04      	ldr	r2, [pc, #16]	; (800a408 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a3f8:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800a3fc:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a3fe:	2000      	movs	r0, #0
 800a400:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a402:	2001      	movs	r0, #1
}
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20000f0c 	.word	0x20000f0c

0800a40c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a410:	4b16      	ldr	r3, [pc, #88]	; (800a46c <LoRaMacCommandsSerializeCmds+0x60>)
 800a412:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a414:	b32a      	cbz	r2, 800a462 <LoRaMacCommandsSerializeCmds+0x56>
 800a416:	4607      	mov	r7, r0
 800a418:	4688      	mov	r8, r1
 800a41a:	4616      	mov	r6, r2
 800a41c:	b319      	cbz	r1, 800a466 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800a41e:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a420:	b194      	cbz	r4, 800a448 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a422:	1a7a      	subs	r2, r7, r1
 800a424:	68a3      	ldr	r3, [r4, #8]
 800a426:	3301      	adds	r3, #1
 800a428:	429a      	cmp	r2, r3
 800a42a:	d30d      	bcc.n	800a448 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800a42c:	1c4d      	adds	r5, r1, #1
 800a42e:	b2ed      	uxtb	r5, r5
 800a430:	7923      	ldrb	r3, [r4, #4]
 800a432:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a434:	8922      	ldrh	r2, [r4, #8]
 800a436:	1d61      	adds	r1, r4, #5
 800a438:	1970      	adds	r0, r6, r5
 800a43a:	f003 ff58 	bl	800e2ee <memcpy1>
            itr += curElement->PayloadSize;
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	441d      	add	r5, r3
 800a442:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800a444:	6824      	ldr	r4, [r4, #0]
 800a446:	e7eb      	b.n	800a420 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800a448:	b12c      	cbz	r4, 800a456 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800a44a:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a44c:	4620      	mov	r0, r4
 800a44e:	f7ff ff87 	bl	800a360 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800a452:	462c      	mov	r4, r5
 800a454:	e7f8      	b.n	800a448 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a456:	4640      	mov	r0, r8
 800a458:	f7ff ffcc 	bl	800a3f4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a45c:	2000      	movs	r0, #0
}
 800a45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a462:	2001      	movs	r0, #1
 800a464:	e7fb      	b.n	800a45e <LoRaMacCommandsSerializeCmds+0x52>
 800a466:	2001      	movs	r0, #1
 800a468:	e7f9      	b.n	800a45e <LoRaMacCommandsSerializeCmds+0x52>
 800a46a:	bf00      	nop
 800a46c:	20000f0c 	.word	0x20000f0c

0800a470 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800a470:	4601      	mov	r1, r0
 800a472:	b170      	cbz	r0, 800a492 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a474:	4b08      	ldr	r3, [pc, #32]	; (800a498 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a476:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800a478:	2200      	movs	r2, #0
 800a47a:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a47c:	b13b      	cbz	r3, 800a48e <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800a47e:	7b1a      	ldrb	r2, [r3, #12]
 800a480:	b90a      	cbnz	r2, 800a486 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	e7fa      	b.n	800a47c <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800a486:	2301      	movs	r3, #1
 800a488:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a48a:	2000      	movs	r0, #0
 800a48c:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a48e:	2000      	movs	r0, #0
 800a490:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a492:	2001      	movs	r0, #1
}
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	20000f0c 	.word	0x20000f0c

0800a49c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a49c:	1e83      	subs	r3, r0, #2
 800a49e:	2b11      	cmp	r3, #17
 800a4a0:	d80a      	bhi.n	800a4b8 <LoRaMacCommandsGetCmdSize+0x1c>
 800a4a2:	e8df f003 	tbb	[pc, r3]
 800a4a6:	0b23      	.short	0x0b23
 800a4a8:	110f240d 	.word	0x110f240d
 800a4ac:	09171513 	.word	0x09171513
 800a4b0:	09091909 	.word	0x09091909
 800a4b4:	211f1d1b 	.word	0x211f1d1b
            break;
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	4770      	bx	lr
            cidSize = 5;
 800a4bc:	2005      	movs	r0, #5
            break;
 800a4be:	4770      	bx	lr
            cidSize = 2;
 800a4c0:	2002      	movs	r0, #2
            break;
 800a4c2:	4770      	bx	lr
            cidSize = 1;
 800a4c4:	2001      	movs	r0, #1
            break;
 800a4c6:	4770      	bx	lr
            cidSize = 6;
 800a4c8:	2006      	movs	r0, #6
            break;
 800a4ca:	4770      	bx	lr
            cidSize = 2;
 800a4cc:	2002      	movs	r0, #2
            break;
 800a4ce:	4770      	bx	lr
            cidSize = 2;
 800a4d0:	2002      	movs	r0, #2
            break;
 800a4d2:	4770      	bx	lr
            cidSize = 5;
 800a4d4:	2005      	movs	r0, #5
            break;
 800a4d6:	4770      	bx	lr
            cidSize = 6;
 800a4d8:	2006      	movs	r0, #6
            break;
 800a4da:	4770      	bx	lr
            cidSize = 1;
 800a4dc:	2001      	movs	r0, #1
            break;
 800a4de:	4770      	bx	lr
            cidSize = 5;
 800a4e0:	2005      	movs	r0, #5
            break;
 800a4e2:	4770      	bx	lr
            cidSize = 4;
 800a4e4:	2004      	movs	r0, #4
            break;
 800a4e6:	4770      	bx	lr
            cidSize = 4;
 800a4e8:	2004      	movs	r0, #4
            break;
 800a4ea:	4770      	bx	lr
            cidSize = 3;
 800a4ec:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a4ee:	4770      	bx	lr

0800a4f0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a4f0:	4b03      	ldr	r3, [pc, #12]	; (800a500 <IncreaseBufferPointer+0x10>)
 800a4f2:	4298      	cmp	r0, r3
 800a4f4:	d001      	beq.n	800a4fa <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800a4f6:	3004      	adds	r0, #4
 800a4f8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a4fa:	4802      	ldr	r0, [pc, #8]	; (800a504 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20001024 	.word	0x20001024
 800a504:	20001014 	.word	0x20001014

0800a508 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800a508:	b108      	cbz	r0, 800a50e <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800a50a:	2000      	movs	r0, #0
 800a50c:	4770      	bx	lr
        return true;
 800a50e:	2001      	movs	r0, #1
}
 800a510:	4770      	bx	lr

0800a512 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a512:	2804      	cmp	r0, #4
 800a514:	d801      	bhi.n	800a51a <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800a516:	2000      	movs	r0, #0
 800a518:	4770      	bx	lr
        return true;
 800a51a:	2001      	movs	r0, #1
}
 800a51c:	4770      	bx	lr
	...

0800a520 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	4606      	mov	r6, r0
 800a524:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a526:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <GetElement+0x3c>)
 800a528:	f893 7020 	ldrb.w	r7, [r3, #32]
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7ff ffeb 	bl	800a508 <IsListEmpty>
 800a532:	b970      	cbnz	r0, 800a552 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a534:	2500      	movs	r5, #0
 800a536:	42af      	cmp	r7, r5
 800a538:	d909      	bls.n	800a54e <GetElement+0x2e>
    {
        if( element->Request == request )
 800a53a:	7823      	ldrb	r3, [r4, #0]
 800a53c:	42b3      	cmp	r3, r6
 800a53e:	d00a      	beq.n	800a556 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800a540:	4620      	mov	r0, r4
 800a542:	f7ff ffd5 	bl	800a4f0 <IncreaseBufferPointer>
 800a546:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a548:	3501      	adds	r5, #1
 800a54a:	b2ed      	uxtb	r5, r5
 800a54c:	e7f3      	b.n	800a536 <GetElement+0x16>
    }

    return NULL;
 800a54e:	2000      	movs	r0, #0
}
 800a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800a552:	2000      	movs	r0, #0
 800a554:	e7fc      	b.n	800a550 <GetElement+0x30>
            return element;
 800a556:	4620      	mov	r0, r4
 800a558:	e7fa      	b.n	800a550 <GetElement+0x30>
 800a55a:	bf00      	nop
 800a55c:	20001008 	.word	0x20001008

0800a560 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a560:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a562:	4c08      	ldr	r4, [pc, #32]	; (800a584 <LoRaMacConfirmQueueInit+0x24>)
 800a564:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a56c:	f104 000c 	add.w	r0, r4, #12
 800a570:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a572:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a574:	2214      	movs	r2, #20
 800a576:	21ff      	movs	r1, #255	; 0xff
 800a578:	f003 fecf 	bl	800e31a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800a582:	bd10      	pop	{r4, pc}
 800a584:	20001008 	.word	0x20001008

0800a588 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a58c:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <LoRaMacConfirmQueueAdd+0x44>)
 800a58e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a592:	f7ff ffbe 	bl	800a512 <IsListFull>
 800a596:	b9b8      	cbnz	r0, 800a5c8 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a598:	4c0c      	ldr	r4, [pc, #48]	; (800a5cc <LoRaMacConfirmQueueAdd+0x44>)
 800a59a:	68a3      	ldr	r3, [r4, #8]
 800a59c:	782a      	ldrb	r2, [r5, #0]
 800a59e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	786a      	ldrb	r2, [r5, #1]
 800a5a4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a5a6:	68a3      	ldr	r3, [r4, #8]
 800a5a8:	78ea      	ldrb	r2, [r5, #3]
 800a5aa:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a5ac:	68a3      	ldr	r3, [r4, #8]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a5b2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a5bc:	68a0      	ldr	r0, [r4, #8]
 800a5be:	f7ff ff97 	bl	800a4f0 <IncreaseBufferPointer>
 800a5c2:	60a0      	str	r0, [r4, #8]

    return true;
 800a5c4:	2001      	movs	r0, #1
}
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e7fc      	b.n	800a5c6 <LoRaMacConfirmQueueAdd+0x3e>
 800a5cc:	20001008 	.word	0x20001008

0800a5d0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800a5d0:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a5d2:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a5d4:	f893 4020 	ldrb.w	r4, [r3, #32]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff ff95 	bl	800a508 <IsListEmpty>
 800a5de:	b948      	cbnz	r0, 800a5f4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a5e0:	4d05      	ldr	r5, [pc, #20]	; (800a5f8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a5e2:	3c01      	subs	r4, #1
 800a5e4:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a5e8:	6868      	ldr	r0, [r5, #4]
 800a5ea:	f7ff ff81 	bl	800a4f0 <IncreaseBufferPointer>
 800a5ee:	6068      	str	r0, [r5, #4]

    return true;
 800a5f0:	2001      	movs	r0, #1
}
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	e7fc      	b.n	800a5f2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800a5f8:	20001008 	.word	0x20001008

0800a5fc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4605      	mov	r5, r0
 800a600:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a602:	4b08      	ldr	r3, [pc, #32]	; (800a624 <LoRaMacConfirmQueueSetStatus+0x28>)
 800a604:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a608:	f7ff ff7e 	bl	800a508 <IsListEmpty>
 800a60c:	b948      	cbnz	r0, 800a622 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a60e:	4b05      	ldr	r3, [pc, #20]	; (800a624 <LoRaMacConfirmQueueSetStatus+0x28>)
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	6859      	ldr	r1, [r3, #4]
 800a614:	4620      	mov	r0, r4
 800a616:	f7ff ff83 	bl	800a520 <GetElement>
        if( element != NULL )
 800a61a:	b110      	cbz	r0, 800a622 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800a61c:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800a61e:	2201      	movs	r2, #1
 800a620:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	20001008 	.word	0x20001008

0800a628 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a628:	b510      	push	{r4, lr}
 800a62a:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a62c:	4b09      	ldr	r3, [pc, #36]	; (800a654 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a62e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a632:	f7ff ff69 	bl	800a508 <IsListEmpty>
 800a636:	b940      	cbnz	r0, 800a64a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a638:	4b06      	ldr	r3, [pc, #24]	; (800a654 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	6859      	ldr	r1, [r3, #4]
 800a63e:	4620      	mov	r0, r4
 800a640:	f7ff ff6e 	bl	800a520 <GetElement>
        if( element != NULL )
 800a644:	b118      	cbz	r0, 800a64e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800a646:	7840      	ldrb	r0, [r0, #1]
 800a648:	e000      	b.n	800a64c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a64a:	2001      	movs	r0, #1
}
 800a64c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a64e:	2001      	movs	r0, #1
 800a650:	e7fc      	b.n	800a64c <LoRaMacConfirmQueueGetStatus+0x24>
 800a652:	bf00      	nop
 800a654:	20001008 	.word	0x20001008

0800a658 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a65c:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a65e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a660:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a664:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a668:	f7ff ff4e 	bl	800a508 <IsListEmpty>
 800a66c:	b150      	cbz	r0, 800a684 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800a670:	2301      	movs	r3, #1
 800a672:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800a674:	4620      	mov	r0, r4
 800a676:	f7ff ff3b 	bl	800a4f0 <IncreaseBufferPointer>
 800a67a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	4283      	cmp	r3, r0
 800a682:	d0f4      	beq.n	800a66e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800a684:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a686:	78e3      	ldrb	r3, [r4, #3]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1f3      	bne.n	800a674 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800a68c:	e7f0      	b.n	800a670 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800a68e:	bf00      	nop
 800a690:	20001008 	.word	0x20001008

0800a694 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800a694:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a696:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	6859      	ldr	r1, [r3, #4]
 800a69c:	f7ff ff40 	bl	800a520 <GetElement>
 800a6a0:	b100      	cbz	r0, 800a6a4 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800a6a2:	2001      	movs	r0, #1
    }
    return false;
}
 800a6a4:	bd08      	pop	{r3, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20001008 	.word	0x20001008

0800a6ac <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a6b2:	4b16      	ldr	r3, [pc, #88]	; (800a70c <LoRaMacConfirmQueueHandleCb+0x60>)
 800a6b4:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a6b8:	2400      	movs	r4, #0
 800a6ba:	e00d      	b.n	800a6d8 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a6bc:	781a      	ldrb	r2, [r3, #0]
 800a6be:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a6c2:	785a      	ldrb	r2, [r3, #1]
 800a6c4:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a6c8:	78db      	ldrb	r3, [r3, #3]
 800a6ca:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800a6ce:	f7ff ff7f 	bl	800a5d0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800a6d2:	b1a5      	cbz	r5, 800a6fe <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a6d4:	3401      	adds	r4, #1
 800a6d6:	b2e4      	uxtb	r4, r4
 800a6d8:	42bc      	cmp	r4, r7
 800a6da:	d214      	bcs.n	800a706 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a6dc:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <LoRaMacConfirmQueueHandleCb+0x60>)
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	7852      	ldrb	r2, [r2, #1]
 800a6e8:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	d0e4      	beq.n	800a6bc <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a6f2:	4b06      	ldr	r3, [pc, #24]	; (800a70c <LoRaMacConfirmQueueHandleCb+0x60>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4798      	blx	r3
 800a6fc:	e7e7      	b.n	800a6ce <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a6fe:	a801      	add	r0, sp, #4
 800a700:	f7ff ff42 	bl	800a588 <LoRaMacConfirmQueueAdd>
 800a704:	e7e6      	b.n	800a6d4 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800a706:	b003      	add	sp, #12
 800a708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20001008 	.word	0x20001008

0800a710 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800a710:	4b01      	ldr	r3, [pc, #4]	; (800a718 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a712:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a716:	4770      	bx	lr
 800a718:	20001008 	.word	0x20001008

0800a71c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800a71c:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a71e:	4b03      	ldr	r3, [pc, #12]	; (800a72c <LoRaMacConfirmQueueIsFull+0x10>)
 800a720:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a724:	f7ff fef5 	bl	800a512 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800a728:	bd08      	pop	{r3, pc}
 800a72a:	bf00      	nop
 800a72c:	20001008 	.word	0x20001008

0800a730 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800a730:	b430      	push	{r4, r5}
 800a732:	9c02      	ldr	r4, [sp, #8]
 800a734:	9903      	ldr	r1, [sp, #12]
 800a736:	9a04      	ldr	r2, [sp, #16]
    if( b0 == 0 )
 800a738:	b1d2      	cbz	r2, 800a770 <PrepareB0+0x40>
 800a73a:	4605      	mov	r5, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800a73c:	2049      	movs	r0, #73	; 0x49
 800a73e:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800a740:	2000      	movs	r0, #0
 800a742:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800a744:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800a746:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800a748:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800a74a:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800a74c:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a74e:	0a23      	lsrs	r3, r4, #8
 800a750:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a752:	0c23      	lsrs	r3, r4, #16
 800a754:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a756:	0e24      	lsrs	r4, r4, #24
 800a758:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800a75a:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a75c:	0a0b      	lsrs	r3, r1, #8
 800a75e:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a760:	0c0b      	lsrs	r3, r1, #16
 800a762:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a764:	0e09      	lsrs	r1, r1, #24
 800a766:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800a768:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800a76a:	73d5      	strb	r5, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a76c:	bc30      	pop	{r4, r5}
 800a76e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a770:	200a      	movs	r0, #10
 800a772:	e7fb      	b.n	800a76c <PrepareB0+0x3c>

0800a774 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a774:	2300      	movs	r3, #0
 800a776:	2b01      	cmp	r3, #1
 800a778:	d813      	bhi.n	800a7a2 <GetKeyAddrItem+0x2e>
{
 800a77a:	b410      	push	{r4}
    {
        if( KeyAddrList[i].AddrID == addrID )
 800a77c:	461c      	mov	r4, r3
 800a77e:	4a0a      	ldr	r2, [pc, #40]	; (800a7a8 <GetKeyAddrItem+0x34>)
 800a780:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800a784:	4282      	cmp	r2, r0
 800a786:	d006      	beq.n	800a796 <GetKeyAddrItem+0x22>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a788:	3301      	adds	r3, #1
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d9f5      	bls.n	800a77c <GetKeyAddrItem+0x8>
        {
            *item = &( KeyAddrList[i] );
            return LORAMAC_CRYPTO_SUCCESS;
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800a790:	200c      	movs	r0, #12
}
 800a792:	bc10      	pop	{r4}
 800a794:	4770      	bx	lr
            *item = &( KeyAddrList[i] );
 800a796:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <GetKeyAddrItem+0x34>)
 800a798:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a79c:	600c      	str	r4, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800a79e:	2000      	movs	r0, #0
 800a7a0:	e7f7      	b.n	800a792 <GetKeyAddrItem+0x1e>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800a7a2:	200c      	movs	r0, #12
}
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	200000c0 	.word	0x200000c0

0800a7ac <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	2900      	cmp	r1, #0
 800a7b0:	d024      	beq.n	800a7fc <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a7b2:	3801      	subs	r0, #1
 800a7b4:	2803      	cmp	r0, #3
 800a7b6:	d823      	bhi.n	800a800 <GetLastFcntDown+0x54>
 800a7b8:	e8df f000 	tbb	[pc, r0]
 800a7bc:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a7c0:	4a10      	ldr	r2, [pc, #64]	; (800a804 <GetLastFcntDown+0x58>)
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	6911      	ldr	r1, [r2, #16]
 800a7c6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a7c8:	6913      	ldr	r3, [r2, #16]
 800a7ca:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a7cc:	2000      	movs	r0, #0
            break;
 800a7ce:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a7d0:	4a0c      	ldr	r2, [pc, #48]	; (800a804 <GetLastFcntDown+0x58>)
 800a7d2:	6812      	ldr	r2, [r2, #0]
 800a7d4:	6951      	ldr	r1, [r2, #20]
 800a7d6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a7d8:	6953      	ldr	r3, [r2, #20]
 800a7da:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a7dc:	2000      	movs	r0, #0
            break;
 800a7de:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a7e0:	4a08      	ldr	r2, [pc, #32]	; (800a804 <GetLastFcntDown+0x58>)
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	6991      	ldr	r1, [r2, #24]
 800a7e6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a7e8:	6993      	ldr	r3, [r2, #24]
 800a7ea:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a7ec:	2000      	movs	r0, #0
            break;
 800a7ee:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a7f0:	4a04      	ldr	r2, [pc, #16]	; (800a804 <GetLastFcntDown+0x58>)
 800a7f2:	6812      	ldr	r2, [r2, #0]
 800a7f4:	69d2      	ldr	r2, [r2, #28]
 800a7f6:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800a7f8:	2000      	movs	r0, #0
            break;
 800a7fa:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a7fc:	200a      	movs	r0, #10
 800a7fe:	4770      	bx	lr
    if( lastDown == NULL )
 800a800:	2005      	movs	r0, #5
}
 800a802:	4770      	bx	lr
 800a804:	2000102c 	.word	0x2000102c

0800a808 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800a808:	b510      	push	{r4, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a812:	a901      	add	r1, sp, #4
 800a814:	f7ff ffca 	bl	800a7ac <GetLastFcntDown>
 800a818:	b948      	cbnz	r0, 800a82e <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800a81a:	9b01      	ldr	r3, [sp, #4]
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	d309      	bcc.n	800a834 <CheckFCntDown+0x2c>
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d001      	beq.n	800a82a <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800a826:	2000      	movs	r0, #0
 800a828:	e002      	b.n	800a830 <CheckFCntDown+0x28>
        return true;
 800a82a:	2001      	movs	r0, #1
 800a82c:	e000      	b.n	800a830 <CheckFCntDown+0x28>
        return false;
 800a82e:	2000      	movs	r0, #0
    }
}
 800a830:	b002      	add	sp, #8
 800a832:	bd10      	pop	{r4, pc}
        return true;
 800a834:	2001      	movs	r0, #1
 800a836:	e7fb      	b.n	800a830 <CheckFCntDown+0x28>

0800a838 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800a838:	3801      	subs	r0, #1
 800a83a:	2803      	cmp	r0, #3
 800a83c:	d812      	bhi.n	800a864 <UpdateFCntDown+0x2c>
 800a83e:	e8df f000 	tbb	[pc, r0]
 800a842:	0602      	.short	0x0602
 800a844:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800a846:	4b08      	ldr	r3, [pc, #32]	; (800a868 <UpdateFCntDown+0x30>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6119      	str	r1, [r3, #16]
            break;
 800a84c:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <UpdateFCntDown+0x30>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6159      	str	r1, [r3, #20]
            break;
 800a854:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800a856:	4b04      	ldr	r3, [pc, #16]	; (800a868 <UpdateFCntDown+0x30>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	6199      	str	r1, [r3, #24]
            break;
 800a85c:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800a85e:	4b02      	ldr	r3, [pc, #8]	; (800a868 <UpdateFCntDown+0x30>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	2000102c 	.word	0x2000102c

0800a86c <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800a86c:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <ResetFCnts+0x2c>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	2300      	movs	r3, #0
 800a872:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a874:	f04f 31ff 	mov.w	r1, #4294967295
 800a878:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a87a:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a87c:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a87e:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a880:	2b00      	cmp	r3, #0
 800a882:	dd00      	ble.n	800a886 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800a884:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800a886:	1d99      	adds	r1, r3, #6
 800a888:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295
 800a890:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a892:	3301      	adds	r3, #1
 800a894:	e7f4      	b.n	800a880 <ResetFCnts+0x14>
 800a896:	bf00      	nop
 800a898:	2000102c 	.word	0x2000102c

0800a89c <ComputeCmacB0>:
{
 800a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a0:	b088      	sub	sp, #32
 800a8a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a8a4:	b1f0      	cbz	r0, 800a8e4 <ComputeCmacB0+0x48>
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	4615      	mov	r5, r2
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	b1de      	cbz	r6, 800a8e8 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a8b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a8b4:	d81a      	bhi.n	800a8ec <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800a8b6:	af04      	add	r7, sp, #16
 800a8b8:	9702      	str	r7, [sp, #8]
 800a8ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7ff ff31 	bl	800a730 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800a8ce:	9600      	str	r6, [sp, #0]
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4641      	mov	r1, r8
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f003 fba6 	bl	800e028 <SecureElementComputeAesCmac>
 800a8dc:	b940      	cbnz	r0, 800a8f0 <ComputeCmacB0+0x54>
}
 800a8de:	b008      	add	sp, #32
 800a8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a8e4:	200a      	movs	r0, #10
 800a8e6:	e7fa      	b.n	800a8de <ComputeCmacB0+0x42>
 800a8e8:	200a      	movs	r0, #10
 800a8ea:	e7f8      	b.n	800a8de <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a8ec:	200e      	movs	r0, #14
 800a8ee:	e7f6      	b.n	800a8de <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a8f0:	200f      	movs	r0, #15
 800a8f2:	e7f4      	b.n	800a8de <ComputeCmacB0+0x42>

0800a8f4 <DeriveSessionKey10x>:
{
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800a8f8:	2400      	movs	r4, #0
 800a8fa:	9402      	str	r4, [sp, #8]
 800a8fc:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800a8fe:	2802      	cmp	r0, #2
 800a900:	d003      	beq.n	800a90a <DeriveSessionKey10x+0x16>
 800a902:	2803      	cmp	r0, #3
 800a904:	d025      	beq.n	800a952 <DeriveSessionKey10x+0x5e>
 800a906:	200b      	movs	r0, #11
 800a908:	e021      	b.n	800a94e <DeriveSessionKey10x+0x5a>
            compBase[0] = 0x01;
 800a90a:	2401      	movs	r4, #1
 800a90c:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a910:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a914:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a918:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a91c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a920:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a924:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a928:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a92c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a930:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a934:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a938:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a93c:	0a1b      	lsrs	r3, r3, #8
 800a93e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a942:	4602      	mov	r2, r0
 800a944:	2101      	movs	r1, #1
 800a946:	4668      	mov	r0, sp
 800a948:	f003 fc0a 	bl	800e160 <SecureElementDeriveAndStoreKey>
 800a94c:	b928      	cbnz	r0, 800a95a <DeriveSessionKey10x+0x66>
}
 800a94e:	b004      	add	sp, #16
 800a950:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800a952:	2402      	movs	r4, #2
 800a954:	f88d 4000 	strb.w	r4, [sp]
            break;
 800a958:	e7da      	b.n	800a910 <DeriveSessionKey10x+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a95a:	200f      	movs	r0, #15
 800a95c:	e7f7      	b.n	800a94e <DeriveSessionKey10x+0x5a>

0800a95e <PayloadEncrypt>:
{
 800a95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	4690      	mov	r8, r2
 800a966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800a968:	2800      	cmp	r0, #0
 800a96a:	d050      	beq.n	800aa0e <PayloadEncrypt+0xb0>
 800a96c:	460d      	mov	r5, r1
 800a96e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800a970:	2600      	movs	r6, #0
 800a972:	9604      	str	r6, [sp, #16]
 800a974:	9605      	str	r6, [sp, #20]
 800a976:	9606      	str	r6, [sp, #24]
 800a978:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800a97a:	9600      	str	r6, [sp, #0]
 800a97c:	9601      	str	r6, [sp, #4]
 800a97e:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800a980:	2701      	movs	r7, #1
 800a982:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800a986:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800a98a:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800a98e:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a992:	0a19      	lsrs	r1, r3, #8
 800a994:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a998:	0c19      	lsrs	r1, r3, #16
 800a99a:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a99e:	0e1b      	lsrs	r3, r3, #24
 800a9a0:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800a9a4:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a9a8:	0a13      	lsrs	r3, r2, #8
 800a9aa:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a9ae:	0c13      	lsrs	r3, r2, #16
 800a9b0:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a9b4:	0e12      	lsrs	r2, r2, #24
 800a9b6:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800a9ba:	e013      	b.n	800a9e4 <PayloadEncrypt+0x86>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a9bc:	18f2      	adds	r2, r6, r3
 800a9be:	5ca0      	ldrb	r0, [r4, r2]
 800a9c0:	a908      	add	r1, sp, #32
 800a9c2:	4419      	add	r1, r3
 800a9c4:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800a9c8:	4048      	eors	r0, r1
 800a9ca:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	2d10      	cmp	r5, #16
 800a9d4:	bfa8      	it	ge
 800a9d6:	2210      	movge	r2, #16
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	dbef      	blt.n	800a9bc <PayloadEncrypt+0x5e>
        size -= 16;
 800a9dc:	3d10      	subs	r5, #16
 800a9de:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800a9e0:	3610      	adds	r6, #16
 800a9e2:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800a9e4:	2d00      	cmp	r5, #0
 800a9e6:	dd0e      	ble.n	800aa06 <PayloadEncrypt+0xa8>
        aBlock[15] = ctr & 0xFF;
 800a9e8:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800a9ec:	3701      	adds	r7, #1
 800a9ee:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a9f0:	ab04      	add	r3, sp, #16
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	2110      	movs	r1, #16
 800a9f6:	4668      	mov	r0, sp
 800a9f8:	f003 fb38 	bl	800e06c <SecureElementAesEncrypt>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d0e6      	beq.n	800a9d0 <PayloadEncrypt+0x72>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa02:	200f      	movs	r0, #15
 800aa04:	e000      	b.n	800aa08 <PayloadEncrypt+0xaa>
    return LORAMAC_CRYPTO_SUCCESS;
 800aa06:	2000      	movs	r0, #0
}
 800aa08:	b008      	add	sp, #32
 800aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa0e:	200a      	movs	r0, #10
 800aa10:	e7fa      	b.n	800aa08 <PayloadEncrypt+0xaa>

0800aa12 <VerifyCmacB0>:
    if( msg == 0 )
 800aa12:	b370      	cbz	r0, 800aa72 <VerifyCmacB0+0x60>
{
 800aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa18:	b0c8      	sub	sp, #288	; 0x120
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	4615      	mov	r5, r2
 800aa1e:	461e      	mov	r6, r3
 800aa20:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800aa22:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800aa26:	d826      	bhi.n	800aa76 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800aa28:	af04      	add	r7, sp, #16
 800aa2a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800aa2e:	2100      	movs	r1, #0
 800aa30:	4638      	mov	r0, r7
 800aa32:	f003 fc72 	bl	800e31a <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800aa36:	9702      	str	r7, [sp, #8]
 800aa38:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800aa44:	4632      	mov	r2, r6
 800aa46:	4629      	mov	r1, r5
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f7ff fe71 	bl	800a730 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aa4e:	4622      	mov	r2, r4
 800aa50:	4641      	mov	r1, r8
 800aa52:	a808      	add	r0, sp, #32
 800aa54:	f003 fc4b 	bl	800e2ee <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800aa58:	f104 0110 	add.w	r1, r4, #16
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800aa60:	b289      	uxth	r1, r1
 800aa62:	4638      	mov	r0, r7
 800aa64:	f003 faec 	bl	800e040 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800aa68:	b130      	cbz	r0, 800aa78 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800aa6a:	2801      	cmp	r0, #1
 800aa6c:	d004      	beq.n	800aa78 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa6e:	200f      	movs	r0, #15
 800aa70:	e002      	b.n	800aa78 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa72:	200a      	movs	r0, #10
}
 800aa74:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800aa76:	200e      	movs	r0, #14
}
 800aa78:	b048      	add	sp, #288	; 0x120
 800aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800aa80 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800aa80:	b188      	cbz	r0, 800aaa6 <LoRaMacCryptoInit+0x26>
{
 800aa82:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800aa84:	4c09      	ldr	r4, [pc, #36]	; (800aaac <LoRaMacCryptoInit+0x2c>)
 800aa86:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800aa88:	2228      	movs	r2, #40	; 0x28
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	f003 fc45 	bl	800e31a <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	2201      	movs	r2, #1
 800aa94:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800aa96:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800aa98:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800aa9a:	2400      	movs	r4, #0
 800aa9c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800aa9e:	f7ff fee5 	bl	800a86c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800aaa2:	4620      	mov	r0, r4
}
 800aaa4:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800aaa6:	2009      	movs	r0, #9
}
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	2000102c 	.word	0x2000102c

0800aab0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800aab0:	4b02      	ldr	r3, [pc, #8]	; (800aabc <LoRaMacCryptoSetLrWanVersion+0xc>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800aab6:	2000      	movs	r0, #0
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	2000102c 	.word	0x2000102c

0800aac0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800aac0:	b130      	cbz	r0, 800aad0 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800aac2:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <LoRaMacCryptoGetFCntUp+0x14>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800aacc:	2000      	movs	r0, #0
 800aace:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aad0:	200a      	movs	r0, #10
}
 800aad2:	4770      	bx	lr
 800aad4:	2000102c 	.word	0x2000102c

0800aad8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
 800aade:	2200      	movs	r2, #0
 800aae0:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800aae2:	b373      	cbz	r3, 800ab42 <LoRaMacCryptoGetFCntDown+0x6a>
 800aae4:	460c      	mov	r4, r1
 800aae6:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800aae8:	a901      	add	r1, sp, #4
 800aaea:	f7ff fe5f 	bl	800a7ac <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800aaee:	b9c8      	cbnz	r0, 800ab24 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d017      	beq.n	800ab28 <LoRaMacCryptoGetFCntDown+0x50>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	1aaa      	subs	r2, r5, r2

        if( fCntDiff > 0 )
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	dd15      	ble.n	800ab2c <LoRaMacCryptoGetFCntDown+0x54>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800ab00:	4413      	add	r3, r2
 800ab02:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ab04:	4b11      	ldr	r3, [pc, #68]	; (800ab4c <LoRaMacCryptoGetFCntDown+0x74>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	789b      	ldrb	r3, [r3, #2]
 800ab0a:	b95b      	cbnz	r3, 800ab24 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800ab0c:	6830      	ldr	r0, [r6, #0]
 800ab0e:	9a01      	ldr	r2, [sp, #4]
 800ab10:	1a80      	subs	r0, r0, r2
 800ab12:	eb60 0100 	sbc.w	r1, r0, r0
 800ab16:	b2a4      	uxth	r4, r4
 800ab18:	2500      	movs	r5, #0
 800ab1a:	42a0      	cmp	r0, r4
 800ab1c:	eb71 0205 	sbcs.w	r2, r1, r5
 800ab20:	da11      	bge.n	800ab46 <LoRaMacCryptoGetFCntDown+0x6e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ab22:	4618      	mov	r0, r3
}
 800ab24:	b002      	add	sp, #8
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800ab28:	6035      	str	r5, [r6, #0]
 800ab2a:	e7eb      	b.n	800ab04 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800ab2c:	b132      	cbz	r2, 800ab3c <LoRaMacCryptoGetFCntDown+0x64>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ab2e:	0c1b      	lsrs	r3, r3, #16
 800ab30:	041b      	lsls	r3, r3, #16
 800ab32:	442b      	add	r3, r5
 800ab34:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ab38:	6033      	str	r3, [r6, #0]
 800ab3a:	e7e3      	b.n	800ab04 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800ab3c:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800ab3e:	2007      	movs	r0, #7
 800ab40:	e7f0      	b.n	800ab24 <LoRaMacCryptoGetFCntDown+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab42:	200a      	movs	r0, #10
 800ab44:	e7ee      	b.n	800ab24 <LoRaMacCryptoGetFCntDown+0x4c>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800ab46:	2008      	movs	r0, #8
 800ab48:	e7ec      	b.n	800ab24 <LoRaMacCryptoGetFCntDown+0x4c>
 800ab4a:	bf00      	nop
 800ab4c:	2000102c 	.word	0x2000102c

0800ab50 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800ab50:	b908      	cbnz	r0, 800ab56 <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab52:	200a      	movs	r0, #10
 800ab54:	4770      	bx	lr
 800ab56:	4601      	mov	r1, r0
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ab58:	2300      	movs	r3, #0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	dd01      	ble.n	800ab62 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ab5e:	2000      	movs	r0, #0
}
 800ab60:	4770      	bx	lr
{
 800ab62:	b410      	push	{r4}
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ab64:	4a07      	ldr	r2, [pc, #28]	; (800ab84 <LoRaMacCryptoSetMulticastReference+0x34>)
 800ab66:	6812      	ldr	r2, [r2, #0]
 800ab68:	202c      	movs	r0, #44	; 0x2c
 800ab6a:	fb00 1003 	mla	r0, r0, r3, r1
 800ab6e:	1d9c      	adds	r4, r3, #6
 800ab70:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ab74:	3204      	adds	r2, #4
 800ab76:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ab78:	3301      	adds	r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	ddf2      	ble.n	800ab64 <LoRaMacCryptoSetMulticastReference+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800ab7e:	2000      	movs	r0, #0
}
 800ab80:	bc10      	pop	{r4}
 800ab82:	4770      	bx	lr
 800ab84:	2000102c 	.word	0x2000102c

0800ab88 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800ab88:	b300      	cbz	r0, 800abcc <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800ab8a:	b510      	push	{r4, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800ab94:	a803      	add	r0, sp, #12
 800ab96:	f003 fb47 	bl	800e228 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800ab9a:	4b10      	ldr	r3, [pc, #64]	; (800abdc <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800aba2:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800aba4:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fa2d 	bl	800b006 <LoRaMacSerializerJoinRequest>
 800abac:	b980      	cbnz	r0, 800abd0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800abae:	4623      	mov	r3, r4
 800abb0:	f853 1b18 	ldr.w	r1, [r3], #24
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	2301      	movs	r3, #1
 800abb8:	2213      	movs	r2, #19
 800abba:	f003 fa35 	bl	800e028 <SecureElementComputeAesCmac>
 800abbe:	b950      	cbnz	r0, 800abd6 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fa20 	bl	800b006 <LoRaMacSerializerJoinRequest>
 800abc6:	b120      	cbz	r0, 800abd2 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800abc8:	2011      	movs	r0, #17
 800abca:	e002      	b.n	800abd2 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800abcc:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800abce:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800abd0:	2011      	movs	r0, #17
}
 800abd2:	b004      	add	sp, #16
 800abd4:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800abd6:	200f      	movs	r0, #15
 800abd8:	e7fb      	b.n	800abd2 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800abda:	bf00      	nop
 800abdc:	2000102c 	.word	0x2000102c

0800abe0 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d036      	beq.n	800ac52 <LoRaMacCryptoSecureMessage+0x72>
{
 800abe4:	b530      	push	{r4, r5, lr}
 800abe6:	b085      	sub	sp, #20
 800abe8:	4604      	mov	r4, r0
 800abea:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800abec:	4b1d      	ldr	r3, [pc, #116]	; (800ac64 <LoRaMacCryptoSecureMessage+0x84>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	4283      	cmp	r3, r0
 800abf4:	d82f      	bhi.n	800ac56 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800abf6:	f895 2020 	ldrb.w	r2, [r5, #32]
 800abfa:	b342      	cbz	r2, 800ac4e <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800abfc:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	d209      	bcs.n	800ac16 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ac02:	9401      	str	r4, [sp, #4]
 800ac04:	2300      	movs	r3, #0
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	68ab      	ldr	r3, [r5, #8]
 800ac0a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ac0e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ac10:	f7ff fea5 	bl	800a95e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac14:	bb10      	cbnz	r0, 800ac5c <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 fa2b 	bl	800b072 <LoRaMacSerializerData>
 800ac1c:	b9e8      	cbnz	r0, 800ac5a <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac1e:	7929      	ldrb	r1, [r5, #4]
 800ac20:	3904      	subs	r1, #4
 800ac22:	462b      	mov	r3, r5
 800ac24:	f853 0b2c 	ldr.w	r0, [r3], #44
 800ac28:	9303      	str	r3, [sp, #12]
 800ac2a:	9402      	str	r4, [sp, #8]
 800ac2c:	68ab      	ldr	r3, [r5, #8]
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	2300      	movs	r3, #0
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	2202      	movs	r2, #2
 800ac36:	b289      	uxth	r1, r1
 800ac38:	f7ff fe30 	bl	800a89c <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac3c:	b970      	cbnz	r0, 800ac5c <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 fa17 	bl	800b072 <LoRaMacSerializerData>
 800ac44:	b960      	cbnz	r0, 800ac60 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ac46:	4b07      	ldr	r3, [pc, #28]	; (800ac64 <LoRaMacCryptoSecureMessage+0x84>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800ac4c:	e006      	b.n	800ac5c <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ac4e:	2202      	movs	r2, #2
 800ac50:	e7d5      	b.n	800abfe <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac52:	200a      	movs	r0, #10
}
 800ac54:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ac56:	2006      	movs	r0, #6
 800ac58:	e000      	b.n	800ac5c <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ac5a:	2011      	movs	r0, #17
}
 800ac5c:	b005      	add	sp, #20
 800ac5e:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ac60:	2011      	movs	r0, #17
 800ac62:	e7fb      	b.n	800ac5c <LoRaMacCryptoSecureMessage+0x7c>
 800ac64:	2000102c 	.word	0x2000102c

0800ac68 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800ac68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	b087      	sub	sp, #28
 800ac6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800ac70:	2e00      	cmp	r6, #0
 800ac72:	d049      	beq.n	800ad08 <LoRaMacCryptoUnsecureMessage+0xa0>
 800ac74:	4605      	mov	r5, r0
 800ac76:	4688      	mov	r8, r1
 800ac78:	4617      	mov	r7, r2
 800ac7a:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f7ff fdc2 	bl	800a808 <CheckFCntDown>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d041      	beq.n	800ad0c <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f000 f95d 	bl	800af48 <LoRaMacParserData>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d141      	bne.n	800ad16 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ac92:	a905      	add	r1, sp, #20
 800ac94:	4628      	mov	r0, r5
 800ac96:	f7ff fd6d 	bl	800a774 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d136      	bne.n	800ad0e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800aca0:	9b05      	ldr	r3, [sp, #20]
 800aca2:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800aca6:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800aca8:	68b3      	ldr	r3, [r6, #8]
 800acaa:	4543      	cmp	r3, r8
 800acac:	d135      	bne.n	800ad1a <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800acae:	7b33      	ldrb	r3, [r6, #12]
 800acb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800acb4:	491a      	ldr	r1, [pc, #104]	; (800ad20 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800acb6:	6809      	ldr	r1, [r1, #0]
 800acb8:	7889      	ldrb	r1, [r1, #2]
 800acba:	b901      	cbnz	r1, 800acbe <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800acbc:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800acbe:	7931      	ldrb	r1, [r6, #4]
 800acc0:	3904      	subs	r1, #4
 800acc2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800acc4:	9003      	str	r0, [sp, #12]
 800acc6:	9402      	str	r4, [sp, #8]
 800acc8:	f8cd 8004 	str.w	r8, [sp, #4]
 800accc:	2001      	movs	r0, #1
 800acce:	9000      	str	r0, [sp, #0]
 800acd0:	b289      	uxth	r1, r1
 800acd2:	6830      	ldr	r0, [r6, #0]
 800acd4:	f7ff fe9d 	bl	800aa12 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800acd8:	4605      	mov	r5, r0
 800acda:	b9c0      	cbnz	r0, 800ad0e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800acdc:	f896 3020 	ldrb.w	r3, [r6, #32]
 800ace0:	b90b      	cbnz	r3, 800ace6 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800ace2:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ace6:	9401      	str	r4, [sp, #4]
 800ace8:	2301      	movs	r3, #1
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	4643      	mov	r3, r8
 800acee:	464a      	mov	r2, r9
 800acf0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800acf4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800acf6:	f7ff fe32 	bl	800a95e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800acfa:	4605      	mov	r5, r0
 800acfc:	b938      	cbnz	r0, 800ad0e <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800acfe:	4621      	mov	r1, r4
 800ad00:	4638      	mov	r0, r7
 800ad02:	f7ff fd99 	bl	800a838 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800ad06:	e002      	b.n	800ad0e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ad08:	250a      	movs	r5, #10
 800ad0a:	e000      	b.n	800ad0e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ad0c:	2506      	movs	r5, #6
}
 800ad0e:	4628      	mov	r0, r5
 800ad10:	b007      	add	sp, #28
 800ad12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ad16:	2510      	movs	r5, #16
 800ad18:	e7f9      	b.n	800ad0e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ad1a:	2502      	movs	r5, #2
 800ad1c:	e7f7      	b.n	800ad0e <LoRaMacCryptoUnsecureMessage+0xa6>
 800ad1e:	bf00      	nop
 800ad20:	2000102c 	.word	0x2000102c

0800ad24 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800ad24:	b9a9      	cbnz	r1, 800ad52 <LoRaMacCryptoDeriveMcRootKey+0x2e>
{
 800ad26:	b510      	push	{r4, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	460c      	mov	r4, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	9302      	str	r3, [sp, #8]
 800ad34:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800ad36:	2801      	cmp	r0, #1
 800ad38:	d007      	beq.n	800ad4a <LoRaMacCryptoDeriveMcRootKey+0x26>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ad3a:	2204      	movs	r2, #4
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4668      	mov	r0, sp
 800ad40:	f003 fa0e 	bl	800e160 <SecureElementDeriveAndStoreKey>
 800ad44:	b938      	cbnz	r0, 800ad56 <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ad46:	b004      	add	sp, #16
 800ad48:	bd10      	pop	{r4, pc}
        compBase[0] = 0x20;
 800ad4a:	2320      	movs	r3, #32
 800ad4c:	f88d 3000 	strb.w	r3, [sp]
 800ad50:	e7f3      	b.n	800ad3a <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ad52:	200b      	movs	r0, #11
}
 800ad54:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad56:	200f      	movs	r0, #15
 800ad58:	e7f5      	b.n	800ad46 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800ad5a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800ad5a:	2804      	cmp	r0, #4
 800ad5c:	d001      	beq.n	800ad62 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ad5e:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ad60:	4770      	bx	lr
{
 800ad62:	b500      	push	{lr}
 800ad64:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800ad66:	2300      	movs	r3, #0
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	9302      	str	r3, [sp, #8]
 800ad6e:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ad70:	227f      	movs	r2, #127	; 0x7f
 800ad72:	4601      	mov	r1, r0
 800ad74:	4668      	mov	r0, sp
 800ad76:	f003 f9f3 	bl	800e160 <SecureElementDeriveAndStoreKey>
 800ad7a:	b910      	cbnz	r0, 800ad82 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800ad7c:	b005      	add	sp, #20
 800ad7e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad82:	200f      	movs	r0, #15
 800ad84:	e7fa      	b.n	800ad7c <LoRaMacCryptoDeriveMcKEKey+0x22>
	...

0800ad88 <LoRaMacCryptoSetKey>:
{
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ad8c:	f003 f9a6 	bl	800e0dc <SecureElementSetKey>
 800ad90:	b978      	cbnz	r0, 800adb2 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800ad92:	b104      	cbz	r4, 800ad96 <LoRaMacCryptoSetKey+0xe>
}
 800ad94:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ad96:	4b09      	ldr	r3, [pc, #36]	; (800adbc <LoRaMacCryptoSetKey+0x34>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	7898      	ldrb	r0, [r3, #2]
 800ad9e:	f7ff ffc1 	bl	800ad24 <LoRaMacCryptoDeriveMcRootKey>
 800ada2:	b940      	cbnz	r0, 800adb6 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ada4:	2004      	movs	r0, #4
 800ada6:	f7ff ffd8 	bl	800ad5a <LoRaMacCryptoDeriveMcKEKey>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d0f2      	beq.n	800ad94 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800adae:	200f      	movs	r0, #15
 800adb0:	e7f0      	b.n	800ad94 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800adb2:	200f      	movs	r0, #15
 800adb4:	e7ee      	b.n	800ad94 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800adb6:	200f      	movs	r0, #15
 800adb8:	e7ec      	b.n	800ad94 <LoRaMacCryptoSetKey+0xc>
 800adba:	bf00      	nop
 800adbc:	2000102c 	.word	0x2000102c

0800adc0 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	d064      	beq.n	800ae8e <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800adc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adc6:	b08f      	sub	sp, #60	; 0x3c
 800adc8:	4607      	mov	r7, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800adce:	2900      	cmp	r1, #0
 800add0:	d05f      	beq.n	800ae92 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800add2:	2600      	movs	r6, #0
 800add4:	9605      	str	r6, [sp, #20]
 800add6:	221d      	movs	r2, #29
 800add8:	4631      	mov	r1, r6
 800adda:	a806      	add	r0, sp, #24
 800addc:	f006 f9d4 	bl	8011188 <memset>
    uint8_t versionMinor         = 0;
 800ade0:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ade4:	4b2f      	ldr	r3, [pc, #188]	; (800aea4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800adea:	f10d 0313 	add.w	r3, sp, #19
 800adee:	9302      	str	r3, [sp, #8]
 800adf0:	ab05      	add	r3, sp, #20
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	7923      	ldrb	r3, [r4, #4]
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	4632      	mov	r2, r6
 800adfc:	4629      	mov	r1, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	f003 f9ce 	bl	800e1a0 <SecureElementProcessJoinAccept>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d146      	bne.n	800ae96 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800ae08:	7922      	ldrb	r2, [r4, #4]
 800ae0a:	a905      	add	r1, sp, #20
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	f003 fa6e 	bl	800e2ee <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 f848 	bl	800aea8 <LoRaMacParserJoinAccept>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d13f      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ae1c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ae1e:	79e3      	ldrb	r3, [r4, #7]
 800ae20:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ae24:	7a23      	ldrb	r3, [r4, #8]
 800ae26:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ae2a:	4b1e      	ldr	r3, [pc, #120]	; (800aea4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	42aa      	cmp	r2, r5
 800ae32:	d035      	beq.n	800aea0 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ae34:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ae36:	2100      	movs	r1, #0
 800ae38:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ae3c:	f7ff ff72 	bl	800ad24 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae40:	bb50      	cbnz	r0, 800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800ae42:	2004      	movs	r0, #4
 800ae44:	f7ff ff89 	bl	800ad5a <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae48:	bb30      	cbnz	r0, 800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800ae4a:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ae4c:	7aa2      	ldrb	r2, [r4, #10]
 800ae4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ae52:	7ae4      	ldrb	r4, [r4, #11]
 800ae54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ae58:	4633      	mov	r3, r6
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	2003      	movs	r0, #3
 800ae60:	f7ff fd48 	bl	800a8f4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae64:	b9c0      	cbnz	r0, 800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ae66:	4633      	mov	r3, r6
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	2002      	movs	r0, #2
 800ae6e:	f7ff fd41 	bl	800a8f4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae72:	b988      	cbnz	r0, 800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ae74:	4b0b      	ldr	r3, [pc, #44]	; (800aea4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ae7c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800ae7e:	2200      	movs	r2, #0
 800ae80:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae82:	f04f 32ff 	mov.w	r2, #4294967295
 800ae86:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae88:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae8a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800ae8c:	e004      	b.n	800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ae8e:	200a      	movs	r0, #10
}
 800ae90:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ae92:	200a      	movs	r0, #10
 800ae94:	e000      	b.n	800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae96:	200f      	movs	r0, #15
}
 800ae98:	b00f      	add	sp, #60	; 0x3c
 800ae9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ae9c:	2010      	movs	r0, #16
 800ae9e:	e7fb      	b.n	800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800aea0:	2003      	movs	r0, #3
 800aea2:	e7f9      	b.n	800ae98 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800aea4:	2000102c 	.word	0x2000102c

0800aea8 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d047      	beq.n	800af3c <LoRaMacParserJoinAccept+0x94>
{
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aeb0:	6801      	ldr	r1, [r0, #0]
 800aeb2:	2900      	cmp	r1, #0
 800aeb4:	d044      	beq.n	800af40 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aeb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeba:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800aebc:	2203      	movs	r2, #3
 800aebe:	3006      	adds	r0, #6
 800aec0:	f003 fa15 	bl	800e2ee <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800aec4:	4620      	mov	r0, r4
 800aec6:	f850 1b09 	ldr.w	r1, [r0], #9
 800aeca:	2203      	movs	r2, #3
 800aecc:	3104      	adds	r1, #4
 800aece:	f003 fa0e 	bl	800e2ee <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aed2:	6821      	ldr	r1, [r4, #0]
 800aed4:	79cb      	ldrb	r3, [r1, #7]
 800aed6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aed8:	7a0a      	ldrb	r2, [r1, #8]
 800aeda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aede:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aee0:	7a4a      	ldrb	r2, [r1, #9]
 800aee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aee6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aee8:	7a8a      	ldrb	r2, [r1, #10]
 800aeea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800aeee:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800aef0:	7acb      	ldrb	r3, [r1, #11]
 800aef2:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800aef4:	7b0b      	ldrb	r3, [r1, #12]
 800aef6:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800aef8:	7923      	ldrb	r3, [r4, #4]
 800aefa:	2b21      	cmp	r3, #33	; 0x21
 800aefc:	d016      	beq.n	800af2c <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800aefe:	2b11      	cmp	r3, #17
 800af00:	dc20      	bgt.n	800af44 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800af02:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800af04:	6821      	ldr	r1, [r4, #0]
 800af06:	1c55      	adds	r5, r2, #1
 800af08:	5c8b      	ldrb	r3, [r1, r2]
 800af0a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800af0c:	1c90      	adds	r0, r2, #2
 800af0e:	5d4d      	ldrb	r5, [r1, r5]
 800af10:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800af14:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800af16:	3203      	adds	r2, #3
 800af18:	5c08      	ldrb	r0, [r1, r0]
 800af1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af1e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af20:	5c8a      	ldrb	r2, [r1, r2]
 800af22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800af26:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800af28:	2000      	movs	r0, #0
}
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800af2c:	2210      	movs	r2, #16
 800af2e:	310d      	adds	r1, #13
 800af30:	f104 0012 	add.w	r0, r4, #18
 800af34:	f003 f9db 	bl	800e2ee <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800af38:	221d      	movs	r2, #29
 800af3a:	e7e3      	b.n	800af04 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800af3c:	2002      	movs	r0, #2
}
 800af3e:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800af40:	2002      	movs	r0, #2
 800af42:	e7f2      	b.n	800af2a <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800af44:	2001      	movs	r0, #1
 800af46:	e7f0      	b.n	800af2a <LoRaMacParserJoinAccept+0x82>

0800af48 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af48:	2800      	cmp	r0, #0
 800af4a:	d058      	beq.n	800affe <LoRaMacParserData+0xb6>
{
 800af4c:	b510      	push	{r4, lr}
 800af4e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af50:	6801      	ldr	r1, [r0, #0]
 800af52:	2900      	cmp	r1, #0
 800af54:	d055      	beq.n	800b002 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800af56:	780b      	ldrb	r3, [r1, #0]
 800af58:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800af5a:	784b      	ldrb	r3, [r1, #1]
 800af5c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800af5e:	788a      	ldrb	r2, [r1, #2]
 800af60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800af64:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800af66:	78ca      	ldrb	r2, [r1, #3]
 800af68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af6c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af6e:	790a      	ldrb	r2, [r1, #4]
 800af70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800af74:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800af76:	794b      	ldrb	r3, [r1, #5]
 800af78:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800af7a:	798b      	ldrb	r3, [r1, #6]
 800af7c:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800af7e:	79ca      	ldrb	r2, [r1, #7]
 800af80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800af84:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af86:	7b02      	ldrb	r2, [r0, #12]
 800af88:	f002 020f 	and.w	r2, r2, #15
 800af8c:	3108      	adds	r1, #8
 800af8e:	3010      	adds	r0, #16
 800af90:	f003 f9ad 	bl	800e2ee <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af94:	7b23      	ldrb	r3, [r4, #12]
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800af9e:	2200      	movs	r2, #0
 800afa0:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800afa4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800afa8:	7922      	ldrb	r2, [r4, #4]
 800afaa:	1a11      	subs	r1, r2, r0
 800afac:	2904      	cmp	r1, #4
 800afae:	dc16      	bgt.n	800afde <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	7923      	ldrb	r3, [r4, #4]
 800afb4:	441a      	add	r2, r3
 800afb6:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800afba:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800afbc:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800afc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800afc4:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800afc6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800afca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800afce:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800afd0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800afd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800afd8:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800afda:	2000      	movs	r0, #0
}
 800afdc:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800afde:	6821      	ldr	r1, [r4, #0]
 800afe0:	3309      	adds	r3, #9
 800afe2:	5c08      	ldrb	r0, [r1, r0]
 800afe4:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800afe8:	1ad2      	subs	r2, r2, r3
 800afea:	b2d2      	uxtb	r2, r2
 800afec:	3a04      	subs	r2, #4
 800afee:	b2d2      	uxtb	r2, r2
 800aff0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800aff4:	4419      	add	r1, r3
 800aff6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aff8:	f003 f979 	bl	800e2ee <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800affc:	e7d8      	b.n	800afb0 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800affe:	2002      	movs	r0, #2
}
 800b000:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800b002:	2002      	movs	r0, #2
 800b004:	e7ea      	b.n	800afdc <LoRaMacParserData+0x94>

0800b006 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b006:	b370      	cbz	r0, 800b066 <LoRaMacSerializerJoinRequest+0x60>
{
 800b008:	b510      	push	{r4, lr}
 800b00a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b00c:	6803      	ldr	r3, [r0, #0]
 800b00e:	b363      	cbz	r3, 800b06a <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800b010:	7902      	ldrb	r2, [r0, #4]
 800b012:	2a16      	cmp	r2, #22
 800b014:	d92b      	bls.n	800b06e <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b016:	7942      	ldrb	r2, [r0, #5]
 800b018:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b01a:	4601      	mov	r1, r0
 800b01c:	f851 0b06 	ldr.w	r0, [r1], #6
 800b020:	2208      	movs	r2, #8
 800b022:	3001      	adds	r0, #1
 800b024:	f003 f96d 	bl	800e302 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800b028:	4621      	mov	r1, r4
 800b02a:	f851 0b0e 	ldr.w	r0, [r1], #14
 800b02e:	2208      	movs	r2, #8
 800b030:	3009      	adds	r0, #9
 800b032:	f003 f966 	bl	800e302 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b036:	8ae2      	ldrh	r2, [r4, #22]
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800b03c:	8ae3      	ldrh	r3, [r4, #22]
 800b03e:	6822      	ldr	r2, [r4, #0]
 800b040:	0a1b      	lsrs	r3, r3, #8
 800b042:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b044:	69a2      	ldr	r2, [r4, #24]
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b04a:	69a3      	ldr	r3, [r4, #24]
 800b04c:	0a1b      	lsrs	r3, r3, #8
 800b04e:	6822      	ldr	r2, [r4, #0]
 800b050:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b052:	8b62      	ldrh	r2, [r4, #26]
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b058:	7ee2      	ldrb	r2, [r4, #27]
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800b05e:	2317      	movs	r3, #23
 800b060:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800b062:	2000      	movs	r0, #0
}
 800b064:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b066:	2001      	movs	r0, #1
}
 800b068:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b06a:	2001      	movs	r0, #1
 800b06c:	e7fa      	b.n	800b064 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b06e:	2002      	movs	r0, #2
 800b070:	e7f8      	b.n	800b064 <LoRaMacSerializerJoinRequest+0x5e>

0800b072 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b072:	2800      	cmp	r0, #0
 800b074:	d066      	beq.n	800b144 <LoRaMacSerializerData+0xd2>
{
 800b076:	b538      	push	{r3, r4, r5, lr}
 800b078:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b07a:	6801      	ldr	r1, [r0, #0]
 800b07c:	2900      	cmp	r1, #0
 800b07e:	d063      	beq.n	800b148 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b080:	7b02      	ldrb	r2, [r0, #12]
 800b082:	f002 020f 	and.w	r2, r2, #15
 800b086:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800b08a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b08e:	b10b      	cbz	r3, 800b094 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800b090:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800b094:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b096:	3304      	adds	r3, #4
 800b098:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800b09a:	7922      	ldrb	r2, [r4, #4]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d355      	bcc.n	800b14c <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b0a0:	7963      	ldrb	r3, [r4, #5]
 800b0a2:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b0a4:	68a2      	ldr	r2, [r4, #8]
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	0a1b      	lsrs	r3, r3, #8
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800b0b2:	8962      	ldrh	r2, [r4, #10]
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800b0b8:	7ae2      	ldrb	r2, [r4, #11]
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	7b22      	ldrb	r2, [r4, #12]
 800b0c2:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800b0c4:	89e2      	ldrh	r2, [r4, #14]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800b0ca:	89e3      	ldrh	r3, [r4, #14]
 800b0cc:	6822      	ldr	r2, [r4, #0]
 800b0ce:	0a1b      	lsrs	r3, r3, #8
 800b0d0:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	f851 0b10 	ldr.w	r0, [r1], #16
 800b0d8:	7b22      	ldrb	r2, [r4, #12]
 800b0da:	f002 020f 	and.w	r2, r2, #15
 800b0de:	3008      	adds	r0, #8
 800b0e0:	f003 f905 	bl	800e2ee <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b0e4:	7b23      	ldrb	r3, [r4, #12]
 800b0e6:	f003 030f 	and.w	r3, r3, #15
 800b0ea:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800b0ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b0f2:	b12a      	cbz	r2, 800b100 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800b0f4:	6822      	ldr	r2, [r4, #0]
 800b0f6:	f894 1020 	ldrb.w	r1, [r4, #32]
 800b0fa:	5551      	strb	r1, [r2, r5]
 800b0fc:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800b100:	6820      	ldr	r0, [r4, #0]
 800b102:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b106:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b108:	4428      	add	r0, r5
 800b10a:	f003 f8f0 	bl	800e2ee <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b10e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b112:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b114:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b116:	6821      	ldr	r1, [r4, #0]
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	b292      	uxth	r2, r2
 800b11c:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b11e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b120:	0a08      	lsrs	r0, r1, #8
 800b122:	6825      	ldr	r5, [r4, #0]
 800b124:	1c99      	adds	r1, r3, #2
 800b126:	b289      	uxth	r1, r1
 800b128:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b12a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	1cda      	adds	r2, r3, #3
 800b130:	b292      	uxth	r2, r2
 800b132:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b134:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800b138:	6821      	ldr	r1, [r4, #0]
 800b13a:	3304      	adds	r3, #4
 800b13c:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800b13e:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800b140:	2000      	movs	r0, #0
}
 800b142:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b144:	2001      	movs	r0, #1
}
 800b146:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b148:	2001      	movs	r0, #1
 800b14a:	e7fa      	b.n	800b142 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b14c:	2002      	movs	r0, #2
 800b14e:	e7f8      	b.n	800b142 <LoRaMacSerializerData+0xd0>

0800b150 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800b150:	4770      	bx	lr

0800b152 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800b152:	2000      	movs	r0, #0
 800b154:	4770      	bx	lr

0800b156 <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800b156:	2000      	movs	r0, #0
 800b158:	4770      	bx	lr

0800b15a <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800b15a:	2805      	cmp	r0, #5
 800b15c:	d005      	beq.n	800b16a <RegionIsActive+0x10>
 800b15e:	2808      	cmp	r0, #8
 800b160:	d001      	beq.n	800b166 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800b162:	2000      	movs	r0, #0
        }
    }
}
 800b164:	4770      	bx	lr
    switch( region )
 800b166:	2001      	movs	r0, #1
 800b168:	4770      	bx	lr
 800b16a:	2001      	movs	r0, #1
 800b16c:	4770      	bx	lr

0800b16e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b16e:	b500      	push	{lr}
 800b170:	b083      	sub	sp, #12
 800b172:	4603      	mov	r3, r0
 800b174:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800b176:	2200      	movs	r2, #0
 800b178:	9200      	str	r2, [sp, #0]
    switch( region )
 800b17a:	2b05      	cmp	r3, #5
 800b17c:	d004      	beq.n	800b188 <RegionGetPhyParam+0x1a>
 800b17e:	2b08      	cmp	r3, #8
 800b180:	d009      	beq.n	800b196 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800b182:	9b00      	ldr	r3, [sp, #0]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	e002      	b.n	800b18e <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800b188:	f000 fde4 	bl	800bd54 <RegionEU868GetPhyParam>
 800b18c:	9001      	str	r0, [sp, #4]
        }
    }
}
 800b18e:	9801      	ldr	r0, [sp, #4]
 800b190:	b003      	add	sp, #12
 800b192:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800b196:	f001 fbff 	bl	800c998 <RegionUS915GetPhyParam>
 800b19a:	9001      	str	r0, [sp, #4]
 800b19c:	e7f7      	b.n	800b18e <RegionGetPhyParam+0x20>

0800b19e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b19e:	b508      	push	{r3, lr}
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	4608      	mov	r0, r1
    switch( region )
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	d002      	beq.n	800b1ae <RegionSetBandTxDone+0x10>
 800b1a8:	2b08      	cmp	r3, #8
 800b1aa:	d003      	beq.n	800b1b4 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800b1ac:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800b1ae:	f000 fe95 	bl	800bedc <RegionEU868SetBandTxDone>
 800b1b2:	e7fb      	b.n	800b1ac <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800b1b4:	f001 fcca 	bl	800cb4c <RegionUS915SetBandTxDone>
 800b1b8:	e7f8      	b.n	800b1ac <RegionSetBandTxDone+0xe>

0800b1ba <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b1ba:	b508      	push	{r3, lr}
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4608      	mov	r0, r1
    switch( region )
 800b1c0:	2b05      	cmp	r3, #5
 800b1c2:	d002      	beq.n	800b1ca <RegionInitDefaults+0x10>
 800b1c4:	2b08      	cmp	r3, #8
 800b1c6:	d003      	beq.n	800b1d0 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800b1c8:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800b1ca:	f000 fea5 	bl	800bf18 <RegionEU868InitDefaults>
 800b1ce:	e7fb      	b.n	800b1c8 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800b1d0:	f001 fcda 	bl	800cb88 <RegionUS915InitDefaults>
}
 800b1d4:	e7f8      	b.n	800b1c8 <RegionInitDefaults+0xe>

0800b1d6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b1d6:	b508      	push	{r3, lr}
 800b1d8:	4603      	mov	r3, r0
 800b1da:	4608      	mov	r0, r1
 800b1dc:	4611      	mov	r1, r2
    switch( region )
 800b1de:	2b05      	cmp	r3, #5
 800b1e0:	d003      	beq.n	800b1ea <RegionVerify+0x14>
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d004      	beq.n	800b1f0 <RegionVerify+0x1a>
 800b1e6:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b1e8:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800b1ea:	f000 ff01 	bl	800bff0 <RegionEU868Verify>
 800b1ee:	e7fb      	b.n	800b1e8 <RegionVerify+0x12>
        US915_VERIFY( );
 800b1f0:	f001 fd70 	bl	800ccd4 <RegionUS915Verify>
 800b1f4:	e7f8      	b.n	800b1e8 <RegionVerify+0x12>

0800b1f6 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800b1f6:	b508      	push	{r3, lr}
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	4608      	mov	r0, r1
    switch( region )
 800b1fc:	2b05      	cmp	r3, #5
 800b1fe:	d002      	beq.n	800b206 <RegionApplyCFList+0x10>
 800b200:	2b08      	cmp	r3, #8
 800b202:	d003      	beq.n	800b20c <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800b204:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800b206:	f001 fabb 	bl	800c780 <RegionEU868ApplyCFList>
 800b20a:	e7fb      	b.n	800b204 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800b20c:	f001 fd92 	bl	800cd34 <RegionUS915ApplyCFList>
}
 800b210:	e7f8      	b.n	800b204 <RegionApplyCFList+0xe>

0800b212 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800b212:	b508      	push	{r3, lr}
 800b214:	4603      	mov	r3, r0
 800b216:	4608      	mov	r0, r1
    switch( region )
 800b218:	2b05      	cmp	r3, #5
 800b21a:	d003      	beq.n	800b224 <RegionChanMaskSet+0x12>
 800b21c:	2b08      	cmp	r3, #8
 800b21e:	d004      	beq.n	800b22a <RegionChanMaskSet+0x18>
 800b220:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b222:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800b224:	f000 ff2a 	bl	800c07c <RegionEU868ChanMaskSet>
 800b228:	e7fb      	b.n	800b222 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800b22a:	f001 fdc1 	bl	800cdb0 <RegionUS915ChanMaskSet>
 800b22e:	e7f8      	b.n	800b222 <RegionChanMaskSet+0x10>

0800b230 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b230:	b510      	push	{r4, lr}
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	4611      	mov	r1, r2
 800b238:	461a      	mov	r2, r3
    switch( region )
 800b23a:	2c05      	cmp	r4, #5
 800b23c:	d002      	beq.n	800b244 <RegionComputeRxWindowParameters+0x14>
 800b23e:	2c08      	cmp	r4, #8
 800b240:	d004      	beq.n	800b24c <RegionComputeRxWindowParameters+0x1c>
        default:
        {
            break;
        }
    }
}
 800b242:	bd10      	pop	{r4, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b244:	9b02      	ldr	r3, [sp, #8]
 800b246:	f000 ff37 	bl	800c0b8 <RegionEU868ComputeRxWindowParameters>
 800b24a:	e7fa      	b.n	800b242 <RegionComputeRxWindowParameters+0x12>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b24c:	9b02      	ldr	r3, [sp, #8]
 800b24e:	f001 fdf3 	bl	800ce38 <RegionUS915ComputeRxWindowParameters>
}
 800b252:	e7f6      	b.n	800b242 <RegionComputeRxWindowParameters+0x12>

0800b254 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b254:	b508      	push	{r3, lr}
 800b256:	4603      	mov	r3, r0
 800b258:	4608      	mov	r0, r1
 800b25a:	4611      	mov	r1, r2
    switch( region )
 800b25c:	2b05      	cmp	r3, #5
 800b25e:	d003      	beq.n	800b268 <RegionRxConfig+0x14>
 800b260:	2b08      	cmp	r3, #8
 800b262:	d004      	beq.n	800b26e <RegionRxConfig+0x1a>
 800b264:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b266:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800b268:	f000 ff5c 	bl	800c124 <RegionEU868RxConfig>
 800b26c:	e7fb      	b.n	800b266 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800b26e:	f001 fe11 	bl	800ce94 <RegionUS915RxConfig>
 800b272:	e7f8      	b.n	800b266 <RegionRxConfig+0x12>

0800b274 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b274:	b510      	push	{r4, lr}
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	4611      	mov	r1, r2
 800b27c:	461a      	mov	r2, r3
    switch( region )
 800b27e:	2c05      	cmp	r4, #5
 800b280:	d003      	beq.n	800b28a <RegionTxConfig+0x16>
 800b282:	2c08      	cmp	r4, #8
 800b284:	d004      	beq.n	800b290 <RegionTxConfig+0x1c>
 800b286:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b288:	bd10      	pop	{r4, pc}
        EU868_TX_CONFIG( );
 800b28a:	f000 ffcf 	bl	800c22c <RegionEU868TxConfig>
 800b28e:	e7fb      	b.n	800b288 <RegionTxConfig+0x14>
        US915_TX_CONFIG( );
 800b290:	f001 fe5a 	bl	800cf48 <RegionUS915TxConfig>
 800b294:	e7f8      	b.n	800b288 <RegionTxConfig+0x14>

0800b296 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b296:	b510      	push	{r4, lr}
 800b298:	b082      	sub	sp, #8
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	4611      	mov	r1, r2
 800b2a0:	461a      	mov	r2, r3
    switch( region )
 800b2a2:	2c05      	cmp	r4, #5
 800b2a4:	d004      	beq.n	800b2b0 <RegionLinkAdrReq+0x1a>
 800b2a6:	2c08      	cmp	r4, #8
 800b2a8:	d008      	beq.n	800b2bc <RegionLinkAdrReq+0x26>
 800b2aa:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b2ac:	b002      	add	sp, #8
 800b2ae:	bd10      	pop	{r4, pc}
        EU868_LINK_ADR_REQ( );
 800b2b0:	9b05      	ldr	r3, [sp, #20]
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	f001 f851 	bl	800c35c <RegionEU868LinkAdrReq>
 800b2ba:	e7f7      	b.n	800b2ac <RegionLinkAdrReq+0x16>
        US915_LINK_ADR_REQ( );
 800b2bc:	9b05      	ldr	r3, [sp, #20]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	f001 febb 	bl	800d03c <RegionUS915LinkAdrReq>
 800b2c6:	e7f1      	b.n	800b2ac <RegionLinkAdrReq+0x16>

0800b2c8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800b2c8:	b508      	push	{r3, lr}
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	4608      	mov	r0, r1
    switch( region )
 800b2ce:	2b05      	cmp	r3, #5
 800b2d0:	d003      	beq.n	800b2da <RegionRxParamSetupReq+0x12>
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	d004      	beq.n	800b2e0 <RegionRxParamSetupReq+0x18>
 800b2d6:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b2d8:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800b2da:	f001 f903 	bl	800c4e4 <RegionEU868RxParamSetupReq>
 800b2de:	e7fb      	b.n	800b2d8 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800b2e0:	f001 ffea 	bl	800d2b8 <RegionUS915RxParamSetupReq>
 800b2e4:	e7f8      	b.n	800b2d8 <RegionRxParamSetupReq+0x10>

0800b2e6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800b2e6:	b508      	push	{r3, lr}
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	4608      	mov	r0, r1
    switch( region )
 800b2ec:	2b05      	cmp	r3, #5
 800b2ee:	d003      	beq.n	800b2f8 <RegionNewChannelReq+0x12>
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d004      	beq.n	800b2fe <RegionNewChannelReq+0x18>
 800b2f4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b2f6:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800b2f8:	f001 fa82 	bl	800c800 <RegionEU868NewChannelReq>
 800b2fc:	e7fb      	b.n	800b2f6 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800b2fe:	f002 f806 	bl	800d30e <RegionUS915NewChannelReq>
 800b302:	e7f8      	b.n	800b2f6 <RegionNewChannelReq+0x10>

0800b304 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800b304:	b508      	push	{r3, lr}
 800b306:	4603      	mov	r3, r0
 800b308:	4608      	mov	r0, r1
    switch( region )
 800b30a:	2b05      	cmp	r3, #5
 800b30c:	d003      	beq.n	800b316 <RegionTxParamSetupReq+0x12>
 800b30e:	2b08      	cmp	r3, #8
 800b310:	d004      	beq.n	800b31c <RegionTxParamSetupReq+0x18>
 800b312:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b314:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800b316:	f001 f909 	bl	800c52c <RegionEU868TxParamSetupReq>
 800b31a:	e7fb      	b.n	800b314 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800b31c:	f001 fffa 	bl	800d314 <RegionUS915TxParamSetupReq>
 800b320:	e7f8      	b.n	800b314 <RegionTxParamSetupReq+0x10>

0800b322 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800b322:	b508      	push	{r3, lr}
 800b324:	4603      	mov	r3, r0
 800b326:	4608      	mov	r0, r1
    switch( region )
 800b328:	2b05      	cmp	r3, #5
 800b32a:	d003      	beq.n	800b334 <RegionDlChannelReq+0x12>
 800b32c:	2b08      	cmp	r3, #8
 800b32e:	d004      	beq.n	800b33a <RegionDlChannelReq+0x18>
 800b330:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b332:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800b334:	f001 f8fe 	bl	800c534 <RegionEU868DlChannelReq>
 800b338:	e7fb      	b.n	800b332 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800b33a:	f001 ffee 	bl	800d31a <RegionUS915DlChannelReq>
 800b33e:	e7f8      	b.n	800b332 <RegionDlChannelReq+0x10>

0800b340 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b340:	b508      	push	{r3, lr}
 800b342:	4603      	mov	r3, r0
 800b344:	4608      	mov	r0, r1
 800b346:	4611      	mov	r1, r2
    switch( region )
 800b348:	2b05      	cmp	r3, #5
 800b34a:	d003      	beq.n	800b354 <RegionAlternateDr+0x14>
 800b34c:	2b08      	cmp	r3, #8
 800b34e:	d004      	beq.n	800b35a <RegionAlternateDr+0x1a>
 800b350:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b352:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800b354:	f001 f916 	bl	800c584 <RegionEU868AlternateDr>
 800b358:	e7fb      	b.n	800b352 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800b35a:	f001 ffe1 	bl	800d320 <RegionUS915AlternateDr>
 800b35e:	e7f8      	b.n	800b352 <RegionAlternateDr+0x12>

0800b360 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b360:	b510      	push	{r4, lr}
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	461a      	mov	r2, r3
    switch( region )
 800b36a:	2c05      	cmp	r4, #5
 800b36c:	d003      	beq.n	800b376 <RegionNextChannel+0x16>
 800b36e:	2c08      	cmp	r4, #8
 800b370:	d005      	beq.n	800b37e <RegionNextChannel+0x1e>
 800b372:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800b374:	bd10      	pop	{r4, pc}
        EU868_NEXT_CHANNEL( );
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	f001 f906 	bl	800c588 <RegionEU868NextChannel>
 800b37c:	e7fa      	b.n	800b374 <RegionNextChannel+0x14>
        US915_NEXT_CHANNEL( );
 800b37e:	9b02      	ldr	r3, [sp, #8]
 800b380:	f001 fff4 	bl	800d36c <RegionUS915NextChannel>
 800b384:	e7f6      	b.n	800b374 <RegionNextChannel+0x14>

0800b386 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b386:	b508      	push	{r3, lr}
 800b388:	4603      	mov	r3, r0
 800b38a:	4608      	mov	r0, r1
    switch( region )
 800b38c:	2b05      	cmp	r3, #5
 800b38e:	d002      	beq.n	800b396 <RegionSetContinuousWave+0x10>
 800b390:	2b08      	cmp	r3, #8
 800b392:	d003      	beq.n	800b39c <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800b394:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800b396:	f001 fa5f 	bl	800c858 <RegionEU868SetContinuousWave>
 800b39a:	e7fb      	b.n	800b394 <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800b39c:	f002 f896 	bl	800d4cc <RegionUS915SetContinuousWave>
}
 800b3a0:	e7f8      	b.n	800b394 <RegionSetContinuousWave+0xe>

0800b3a2 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	4608      	mov	r0, r1
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	461a      	mov	r2, r3
    switch( region )
 800b3ac:	2c05      	cmp	r4, #5
 800b3ae:	d003      	beq.n	800b3b8 <RegionApplyDrOffset+0x16>
 800b3b0:	2c08      	cmp	r4, #8
 800b3b2:	d004      	beq.n	800b3be <RegionApplyDrOffset+0x1c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800b3b4:	b2c8      	uxtb	r0, r1
 800b3b6:	e001      	b.n	800b3bc <RegionApplyDrOffset+0x1a>
        EU868_APPLY_DR_OFFSET( );
 800b3b8:	f001 fa7c 	bl	800c8b4 <RegionEU868ApplyDrOffset>
        }
    }
}
 800b3bc:	bd10      	pop	{r4, pc}
        US915_APPLY_DR_OFFSET( );
 800b3be:	f002 f8b9 	bl	800d534 <RegionUS915ApplyDrOffset>
 800b3c2:	e7fb      	b.n	800b3bc <RegionApplyDrOffset+0x1a>

0800b3c4 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800b3c4:	4800      	ldr	r0, [pc, #0]	; (800b3c8 <RegionGetVersion+0x4>)
 800b3c6:	4770      	bx	lr
 800b3c8:	01000300 	.word	0x01000300

0800b3cc <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800b3cc:	b1b9      	cbz	r1, 800b3fe <FindAvailable125kHzChannels+0x32>
{
 800b3ce:	b410      	push	{r4}
 800b3d0:	460c      	mov	r4, r1
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800b3d2:	b1b2      	cbz	r2, 800b402 <FindAvailable125kHzChannels+0x36>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800b3d8:	e001      	b.n	800b3de <FindAvailable125kHzChannels+0x12>
 800b3da:	3301      	adds	r3, #1
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b07      	cmp	r3, #7
 800b3e0:	d80a      	bhi.n	800b3f8 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800b3e2:	fa40 f103 	asr.w	r1, r0, r3
 800b3e6:	f011 0f01 	tst.w	r1, #1
 800b3ea:	d0f6      	beq.n	800b3da <FindAvailable125kHzChannels+0xe>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800b3ec:	7811      	ldrb	r1, [r2, #0]
 800b3ee:	5463      	strb	r3, [r4, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800b3f0:	7811      	ldrb	r1, [r2, #0]
 800b3f2:	3101      	adds	r1, #1
 800b3f4:	7011      	strb	r1, [r2, #0]
 800b3f6:	e7f0      	b.n	800b3da <FindAvailable125kHzChannels+0xe>
        }
    }

    return LORAMAC_STATUS_OK;
 800b3f8:	2000      	movs	r0, #0
}
 800b3fa:	bc10      	pop	{r4}
 800b3fc:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b3fe:	2003      	movs	r0, #3
}
 800b400:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b402:	2003      	movs	r0, #3
 800b404:	e7f9      	b.n	800b3fa <FindAvailable125kHzChannels+0x2e>

0800b406 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800b406:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b408:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800b40a:	2300      	movs	r3, #0
 800b40c:	9302      	str	r3, [sp, #8]
 800b40e:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800b410:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800b414:	2800      	cmp	r0, #0
 800b416:	d03c      	beq.n	800b492 <RegionBaseUSComputeNext125kHzJoinChannel+0x8c>
 800b418:	460d      	mov	r5, r1
 800b41a:	4617      	mov	r7, r2
 800b41c:	4606      	mov	r6, r0
 800b41e:	2900      	cmp	r1, #0
 800b420:	d039      	beq.n	800b496 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800b422:	2a00      	cmp	r2, #0
 800b424:	d039      	beq.n	800b49a <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800b426:	780c      	ldrb	r4, [r1, #0]
 800b428:	e015      	b.n	800b456 <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800b42a:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800b42e:	0a00      	lsrs	r0, r0, #8
 800b430:	e017      	b.n	800b462 <RegionBaseUSComputeNext125kHzJoinChannel+0x5c>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800b432:	3901      	subs	r1, #1
 800b434:	2000      	movs	r0, #0
 800b436:	f002 ff4d 	bl	800e2d4 <randr>
 800b43a:	ab04      	add	r3, sp, #16
 800b43c:	4418      	add	r0, r3
 800b43e:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800b442:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b446:	703b      	strb	r3, [r7, #0]
 800b448:	e016      	b.n	800b478 <RegionBaseUSComputeNext125kHzJoinChannel+0x72>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800b44a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b44e:	b9cb      	cbnz	r3, 800b484 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
 800b450:	782a      	ldrb	r2, [r5, #0]
 800b452:	42a2      	cmp	r2, r4
 800b454:	d016      	beq.n	800b484 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800b456:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800b458:	f014 0f01 	tst.w	r4, #1
 800b45c:	d1e5      	bne.n	800b42a <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800b45e:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800b462:	f10d 0207 	add.w	r2, sp, #7
 800b466:	a902      	add	r1, sp, #8
 800b468:	f7ff ffb0 	bl	800b3cc <FindAvailable125kHzChannels>
 800b46c:	2803      	cmp	r0, #3
 800b46e:	d00b      	beq.n	800b488 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        if ( availableChannels > 0 )
 800b470:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b474:	2900      	cmp	r1, #0
 800b476:	d1dc      	bne.n	800b432 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800b478:	3401      	adds	r4, #1
 800b47a:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800b47c:	2c07      	cmp	r4, #7
 800b47e:	d9e4      	bls.n	800b44a <RegionBaseUSComputeNext125kHzJoinChannel+0x44>
            startIndex = 0;
 800b480:	2400      	movs	r4, #0
 800b482:	e7e2      	b.n	800b44a <RegionBaseUSComputeNext125kHzJoinChannel+0x44>

    if ( availableChannels > 0 )
 800b484:	b913      	cbnz	r3, 800b48c <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800b486:	2003      	movs	r0, #3
}
 800b488:	b005      	add	sp, #20
 800b48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800b48c:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800b48e:	2000      	movs	r0, #0
 800b490:	e7fa      	b.n	800b488 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b492:	2003      	movs	r0, #3
 800b494:	e7f8      	b.n	800b488 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800b496:	2003      	movs	r0, #3
 800b498:	e7f6      	b.n	800b488 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800b49a:	2003      	movs	r0, #3
 800b49c:	e7f4      	b.n	800b488 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>

0800b49e <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800b49e:	fb02 1000 	mla	r0, r2, r0, r1
 800b4a2:	4770      	bx	lr

0800b4a4 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	f10d 0c08 	add.w	ip, sp, #8
 800b4aa:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800b4ae:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800b4b0:	b971      	cbnz	r1, 800b4d0 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b4b2:	9b00      	ldr	r3, [sp, #0]
 800b4b4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800b4b8:	d306      	bcc.n	800b4c8 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b4ba:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d80a      	bhi.n	800b4d8 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800b4c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4c6:	e000      	b.n	800b4ca <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b4c8:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b4ca:	4298      	cmp	r0, r3
 800b4cc:	bf38      	it	cc
 800b4ce:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800b4d0:	b900      	cbnz	r0, 800b4d4 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800b4d2:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800b4d4:	b002      	add	sp, #8
 800b4d6:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b4d8:	f242 7310 	movw	r3, #10000	; 0x2710
 800b4dc:	e7f5      	b.n	800b4ca <GetDutyCycle+0x26>

0800b4de <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800b4de:	b410      	push	{r4}
 800b4e0:	4604      	mov	r4, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800b4e2:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800b4e4:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800b4e6:	e001      	b.n	800b4ec <CountChannels+0xe>
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	428b      	cmp	r3, r1
 800b4ee:	d206      	bcs.n	800b4fe <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	409a      	lsls	r2, r3
 800b4f4:	43a2      	bics	r2, r4
 800b4f6:	d1f7      	bne.n	800b4e8 <CountChannels+0xa>
        {
            nbActiveBits++;
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	b2c0      	uxtb	r0, r0
 800b4fc:	e7f4      	b.n	800b4e8 <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 800b4fe:	bc10      	pop	{r4}
 800b500:	4770      	bx	lr
	...

0800b504 <SetMaxTimeCredits>:
{
 800b504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b508:	b089      	sub	sp, #36	; 0x24
 800b50a:	4604      	mov	r4, r0
 800b50c:	460e      	mov	r6, r1
 800b50e:	ad02      	add	r5, sp, #8
 800b510:	e885 000c 	stmia.w	r5, {r2, r3}
 800b514:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 800b518:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800b51c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b520:	f005 faf4 	bl	8010b0c <SysTimeToMs>
 800b524:	4681      	mov	r9, r0
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b526:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b52a:	4631      	mov	r1, r6
 800b52c:	4620      	mov	r0, r4
 800b52e:	f7ff ffb9 	bl	800b4a4 <GetDutyCycle>
 800b532:	4605      	mov	r5, r0
    if( joined == false )
 800b534:	2e00      	cmp	r6, #0
 800b536:	d149      	bne.n	800b5cc <SetMaxTimeCredits+0xc8>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b538:	2864      	cmp	r0, #100	; 0x64
 800b53a:	d023      	beq.n	800b584 <SetMaxTimeCredits+0x80>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b53c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b540:	d024      	beq.n	800b58c <SetMaxTimeCredits+0x88>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b542:	4e25      	ldr	r6, [pc, #148]	; (800b5d8 <SetMaxTimeCredits+0xd4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b544:	68a1      	ldr	r1, [r4, #8]
 800b546:	a806      	add	r0, sp, #24
 800b548:	f005 fb00 	bl	8010b4c <SysTimeFromMs>
 800b54c:	9b07      	ldr	r3, [sp, #28]
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	9b06      	ldr	r3, [sp, #24]
 800b552:	9a03      	ldr	r2, [sp, #12]
 800b554:	9902      	ldr	r1, [sp, #8]
 800b556:	a804      	add	r0, sp, #16
 800b558:	f005 fa63 	bl	8010a22 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b55c:	b917      	cbnz	r7, 800b564 <SetMaxTimeCredits+0x60>
 800b55e:	f1b8 0f00 	cmp.w	r8, #0
 800b562:	d002      	beq.n	800b56a <SetMaxTimeCredits+0x66>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b564:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b566:	42b3      	cmp	r3, r6
 800b568:	d014      	beq.n	800b594 <SetMaxTimeCredits+0x90>
            band->TimeCredits = maxCredits;
 800b56a:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b56c:	9b02      	ldr	r3, [sp, #8]
 800b56e:	4a1b      	ldr	r2, [pc, #108]	; (800b5dc <SetMaxTimeCredits+0xd8>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d814      	bhi.n	800b59e <SetMaxTimeCredits+0x9a>
    if( band->LastBandUpdateTime == 0 )
 800b574:	6863      	ldr	r3, [r4, #4]
 800b576:	b903      	cbnz	r3, 800b57a <SetMaxTimeCredits+0x76>
        band->TimeCredits = maxCredits;
 800b578:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800b57a:	6126      	str	r6, [r4, #16]
}
 800b57c:	4628      	mov	r0, r5
 800b57e:	b009      	add	sp, #36	; 0x24
 800b580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800b584:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b588:	4e15      	ldr	r6, [pc, #84]	; (800b5e0 <SetMaxTimeCredits+0xdc>)
 800b58a:	e7db      	b.n	800b544 <SetMaxTimeCredits+0x40>
            band->LastMaxCreditAssignTime = elapsedTime;
 800b58c:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b590:	4e14      	ldr	r6, [pc, #80]	; (800b5e4 <SetMaxTimeCredits+0xe0>)
 800b592:	e7d7      	b.n	800b544 <SetMaxTimeCredits+0x40>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b594:	9a04      	ldr	r2, [sp, #16]
 800b596:	4b14      	ldr	r3, [pc, #80]	; (800b5e8 <SetMaxTimeCredits+0xe4>)
 800b598:	429a      	cmp	r2, r3
 800b59a:	d9eb      	bls.n	800b574 <SetMaxTimeCredits+0x70>
 800b59c:	e7e5      	b.n	800b56a <SetMaxTimeCredits+0x66>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b59e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800b5a2:	3b30      	subs	r3, #48	; 0x30
 800b5a4:	4a11      	ldr	r2, [pc, #68]	; (800b5ec <SetMaxTimeCredits+0xe8>)
 800b5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5aa:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800b5ac:	4a10      	ldr	r2, [pc, #64]	; (800b5f0 <SetMaxTimeCredits+0xec>)
 800b5ae:	fb02 f303 	mul.w	r3, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b5b2:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800b5b6:	3330      	adds	r3, #48	; 0x30
 800b5b8:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800b5c0:	9905      	ldr	r1, [sp, #20]
 800b5c2:	9804      	ldr	r0, [sp, #16]
 800b5c4:	f005 faa2 	bl	8010b0c <SysTimeToMs>
 800b5c8:	60a0      	str	r0, [r4, #8]
 800b5ca:	e7d3      	b.n	800b574 <SetMaxTimeCredits+0x70>
        if( dutyCycleEnabled == false )
 800b5cc:	b917      	cbnz	r7, 800b5d4 <SetMaxTimeCredits+0xd0>
            band->TimeCredits = maxCredits;
 800b5ce:	4e04      	ldr	r6, [pc, #16]	; (800b5e0 <SetMaxTimeCredits+0xdc>)
 800b5d0:	60e6      	str	r6, [r4, #12]
 800b5d2:	e7cf      	b.n	800b574 <SetMaxTimeCredits+0x70>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b5d4:	4e02      	ldr	r6, [pc, #8]	; (800b5e0 <SetMaxTimeCredits+0xdc>)
 800b5d6:	e7cd      	b.n	800b574 <SetMaxTimeCredits+0x70>
 800b5d8:	02932e00 	.word	0x02932e00
 800b5dc:	0001ec2f 	.word	0x0001ec2f
 800b5e0:	001b7740 	.word	0x001b7740
 800b5e4:	0112a880 	.word	0x0112a880
 800b5e8:	0001517f 	.word	0x0001517f
 800b5ec:	c22e4507 	.word	0xc22e4507
 800b5f0:	00015180 	.word	0x00015180

0800b5f4 <UpdateTimeCredits>:
{
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	9200      	str	r2, [sp, #0]
 800b600:	ab06      	add	r3, sp, #24
 800b602:	cb0c      	ldmia	r3, {r2, r3}
 800b604:	f7ff ff7e 	bl	800b504 <SetMaxTimeCredits>
 800b608:	4605      	mov	r5, r0
    if( joined == true )
 800b60a:	b94e      	cbnz	r6, 800b620 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800b60c:	68e2      	ldr	r2, [r4, #12]
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	429a      	cmp	r2, r3
 800b612:	d900      	bls.n	800b616 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800b614:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800b616:	9b08      	ldr	r3, [sp, #32]
 800b618:	6063      	str	r3, [r4, #4]
}
 800b61a:	4628      	mov	r0, r5
 800b61c:	b002      	add	sp, #8
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b620:	6860      	ldr	r0, [r4, #4]
 800b622:	f005 faf1 	bl	8010c08 <UTIL_TIMER_GetElapsedTime>
 800b626:	68e3      	ldr	r3, [r4, #12]
 800b628:	4403      	add	r3, r0
 800b62a:	60e3      	str	r3, [r4, #12]
 800b62c:	e7ee      	b.n	800b60c <UpdateTimeCredits+0x18>

0800b62e <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800b62e:	4288      	cmp	r0, r1
 800b630:	db03      	blt.n	800b63a <RegionCommonValueInRange+0xc>
 800b632:	4290      	cmp	r0, r2
 800b634:	dd03      	ble.n	800b63e <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800b636:	2000      	movs	r0, #0
 800b638:	4770      	bx	lr
 800b63a:	2000      	movs	r0, #0
 800b63c:	4770      	bx	lr
        return 1;
 800b63e:	2001      	movs	r0, #1
}
 800b640:	4770      	bx	lr

0800b642 <RegionCommonChanVerifyDr>:
{
 800b642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b646:	4682      	mov	sl, r0
 800b648:	460e      	mov	r6, r1
 800b64a:	4690      	mov	r8, r2
 800b64c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800b650:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800b654:	4619      	mov	r1, r3
 800b656:	4640      	mov	r0, r8
 800b658:	f7ff ffe9 	bl	800b62e <RegionCommonValueInRange>
 800b65c:	b338      	cbz	r0, 800b6ae <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b65e:	2500      	movs	r5, #0
 800b660:	462f      	mov	r7, r5
 800b662:	e01e      	b.n	800b6a2 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800b664:	3401      	adds	r4, #1
 800b666:	b2e4      	uxtb	r4, r4
 800b668:	2c0f      	cmp	r4, #15
 800b66a:	d816      	bhi.n	800b69a <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b66c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800b670:	4123      	asrs	r3, r4
 800b672:	f013 0f01 	tst.w	r3, #1
 800b676:	d0f5      	beq.n	800b664 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b678:	193b      	adds	r3, r7, r4
 800b67a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b67e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b682:	7a19      	ldrb	r1, [r3, #8]
 800b684:	090a      	lsrs	r2, r1, #4
 800b686:	f001 010f 	and.w	r1, r1, #15
 800b68a:	4640      	mov	r0, r8
 800b68c:	f7ff ffcf 	bl	800b62e <RegionCommonValueInRange>
 800b690:	2801      	cmp	r0, #1
 800b692:	d1e7      	bne.n	800b664 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800b694:	2001      	movs	r0, #1
}
 800b696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b69a:	3710      	adds	r7, #16
 800b69c:	b2ff      	uxtb	r7, r7
 800b69e:	3501      	adds	r5, #1
 800b6a0:	b2ed      	uxtb	r5, r5
 800b6a2:	4557      	cmp	r7, sl
 800b6a4:	d201      	bcs.n	800b6aa <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800b6a6:	2400      	movs	r4, #0
 800b6a8:	e7de      	b.n	800b668 <RegionCommonChanVerifyDr+0x26>
    return false;
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e7f3      	b.n	800b696 <RegionCommonChanVerifyDr+0x54>
        return false;
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e7f1      	b.n	800b696 <RegionCommonChanVerifyDr+0x54>

0800b6b2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b6b2:	0913      	lsrs	r3, r2, #4
 800b6b4:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800b6b8:	d311      	bcc.n	800b6de <RegionCommonChanDisable+0x2c>
{
 800b6ba:	b410      	push	{r4}
 800b6bc:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b6be:	4291      	cmp	r1, r2
 800b6c0:	d20f      	bcs.n	800b6e2 <RegionCommonChanDisable+0x30>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800b6c2:	f001 010f 	and.w	r1, r1, #15
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	fa03 f101 	lsl.w	r1, r3, r1
 800b6cc:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 800b6d0:	ea22 0101 	bic.w	r1, r2, r1
 800b6d4:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]

    return true;
 800b6d8:	4618      	mov	r0, r3
}
 800b6da:	bc10      	pop	{r4}
 800b6dc:	4770      	bx	lr
        return false;
 800b6de:	2000      	movs	r0, #0
}
 800b6e0:	4770      	bx	lr
        return false;
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	e7f9      	b.n	800b6da <RegionCommonChanDisable+0x28>

0800b6e6 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800b6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800b6e8:	b188      	cbz	r0, 800b70e <RegionCommonCountChannels+0x28>
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	4616      	mov	r6, r2
 800b6ee:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800b6f0:	2500      	movs	r5, #0
 800b6f2:	e008      	b.n	800b706 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b6f4:	2110      	movs	r1, #16
 800b6f6:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b6fa:	f7ff fef0 	bl	800b4de <CountChannels>
 800b6fe:	4405      	add	r5, r0
 800b700:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b702:	3401      	adds	r4, #1
 800b704:	b2e4      	uxtb	r4, r4
 800b706:	42b4      	cmp	r4, r6
 800b708:	d3f4      	bcc.n	800b6f4 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800b70a:	4628      	mov	r0, r5
 800b70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800b70e:	2500      	movs	r5, #0
 800b710:	e7fb      	b.n	800b70a <RegionCommonCountChannels+0x24>

0800b712 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b712:	b170      	cbz	r0, 800b732 <RegionCommonChanMaskCopy+0x20>
{
 800b714:	b410      	push	{r4}
 800b716:	4604      	mov	r4, r0
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b718:	b149      	cbz	r1, 800b72e <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 800b71a:	2300      	movs	r3, #0
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d206      	bcs.n	800b72e <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800b720:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b724:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800b728:	3301      	adds	r3, #1
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	e7f6      	b.n	800b71c <RegionCommonChanMaskCopy+0xa>
        }
    }
}
 800b72e:	bc10      	pop	{r4}
 800b730:	4770      	bx	lr
 800b732:	4770      	bx	lr

0800b734 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b734:	b082      	sub	sp, #8
 800b736:	b538      	push	{r3, r4, r5, lr}
 800b738:	4605      	mov	r5, r0
 800b73a:	460c      	mov	r4, r1
 800b73c:	4611      	mov	r1, r2
 800b73e:	aa04      	add	r2, sp, #16
 800b740:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b744:	ca0c      	ldmia	r2, {r2, r3}
 800b746:	f7ff fead 	bl	800b4a4 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b74a:	68eb      	ldr	r3, [r5, #12]
 800b74c:	fb04 f100 	mul.w	r1, r4, r0
 800b750:	428b      	cmp	r3, r1
 800b752:	d905      	bls.n	800b760 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800b754:	1a59      	subs	r1, r3, r1
 800b756:	60e9      	str	r1, [r5, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800b758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b75c:	b002      	add	sp, #8
 800b75e:	4770      	bx	lr
        band->TimeCredits = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	60eb      	str	r3, [r5, #12]
}
 800b764:	e7f8      	b.n	800b758 <RegionCommonSetBandTxDone+0x24>
	...

0800b768 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	b089      	sub	sp, #36	; 0x24
 800b76e:	4607      	mov	r7, r0
 800b770:	468b      	mov	fp, r1
 800b772:	4691      	mov	r9, r2
 800b774:	4698      	mov	r8, r3
 800b776:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b77a:	f005 fa3b 	bl	8010bf4 <UTIL_TIMER_GetCurrentTime>
 800b77e:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800b780:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800b782:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b784:	f04f 33ff 	mov.w	r3, #4294967295
 800b788:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b78a:	e005      	b.n	800b798 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800b78c:	2301      	movs	r3, #1
 800b78e:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800b790:	441e      	add	r6, r3
 800b792:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800b794:	3401      	adds	r4, #1
 800b796:	b2e4      	uxtb	r4, r4
 800b798:	454c      	cmp	r4, r9
 800b79a:	d25b      	bcs.n	800b854 <RegionCommonUpdateBandTimeOff+0xec>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b79c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b7a0:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	9302      	str	r3, [sp, #8]
 800b7a8:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b7aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b7ac:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b7b0:	4653      	mov	r3, sl
 800b7b2:	4642      	mov	r2, r8
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f7ff ff1c 	bl	800b5f4 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b7bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7be:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b7c2:	68ea      	ldr	r2, [r5, #12]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d8e1      	bhi.n	800b78c <RegionCommonUpdateBandTimeOff+0x24>
 800b7c8:	f1b8 0f00 	cmp.w	r8, #0
 800b7cc:	d101      	bne.n	800b7d2 <RegionCommonUpdateBandTimeOff+0x6a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b7ce:	2f00      	cmp	r7, #0
 800b7d0:	d1dc      	bne.n	800b78c <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800b7d6:	6929      	ldr	r1, [r5, #16]
 800b7d8:	4299      	cmp	r1, r3
 800b7da:	d907      	bls.n	800b7ec <RegionCommonUpdateBandTimeOff+0x84>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b7dc:	1a9b      	subs	r3, r3, r2
 800b7de:	9a05      	ldr	r2, [sp, #20]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	bf28      	it	cs
 800b7e4:	461a      	movcs	r2, r3
 800b7e6:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800b7e8:	3601      	adds	r6, #1
 800b7ea:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800b7ec:	2f00      	cmp	r7, #0
 800b7ee:	d1d1      	bne.n	800b794 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b7f6:	2864      	cmp	r0, #100	; 0x64
 800b7f8:	d024      	beq.n	800b844 <RegionCommonUpdateBandTimeOff+0xdc>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b7fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b7fe:	d025      	beq.n	800b84c <RegionCommonUpdateBandTimeOff+0xe4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b800:	4b19      	ldr	r3, [pc, #100]	; (800b868 <RegionCommonUpdateBandTimeOff+0x100>)
 800b802:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b806:	4a18      	ldr	r2, [pc, #96]	; (800b868 <RegionCommonUpdateBandTimeOff+0x100>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d90c      	bls.n	800b826 <RegionCommonUpdateBandTimeOff+0xbe>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b80c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800b810:	3b30      	subs	r3, #48	; 0x30
 800b812:	4a16      	ldr	r2, [pc, #88]	; (800b86c <RegionCommonUpdateBandTimeOff+0x104>)
 800b814:	fba2 2303 	umull	r2, r3, r2, r3
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	4a15      	ldr	r2, [pc, #84]	; (800b870 <RegionCommonUpdateBandTimeOff+0x108>)
 800b81c:	fb03 2202 	mla	r2, r3, r2, r2
 800b820:	9b06      	ldr	r3, [sp, #24]
 800b822:	441a      	add	r2, r3
 800b824:	9206      	str	r2, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b826:	ad06      	add	r5, sp, #24
 800b828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b82e:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b832:	4628      	mov	r0, r5
 800b834:	f005 f8f5 	bl	8010a22 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b838:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b83c:	f005 f966 	bl	8010b0c <SysTimeToMs>
 800b840:	9005      	str	r0, [sp, #20]
 800b842:	e7a7      	b.n	800b794 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b844:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b848:	9306      	str	r3, [sp, #24]
 800b84a:	e7db      	b.n	800b804 <RegionCommonUpdateBandTimeOff+0x9c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800b84c:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800b850:	9306      	str	r3, [sp, #24]
 800b852:	e7d7      	b.n	800b804 <RegionCommonUpdateBandTimeOff+0x9c>
            }
        }
    }


    if( validBands == 0 )
 800b854:	b11e      	cbz	r6, 800b85e <RegionCommonUpdateBandTimeOff+0xf6>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800b856:	9805      	ldr	r0, [sp, #20]
 800b858:	b009      	add	sp, #36	; 0x24
 800b85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800b85e:	f04f 33ff 	mov.w	r3, #4294967295
 800b862:	9305      	str	r3, [sp, #20]
 800b864:	e7f7      	b.n	800b856 <RegionCommonUpdateBandTimeOff+0xee>
 800b866:	bf00      	nop
 800b868:	0001ec30 	.word	0x0001ec30
 800b86c:	c22e4507 	.word	0xc22e4507
 800b870:	00015180 	.word	0x00015180

0800b874 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b874:	7803      	ldrb	r3, [r0, #0]
 800b876:	2b03      	cmp	r3, #3
 800b878:	d001      	beq.n	800b87e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800b87a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800b87c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800b87e:	7843      	ldrb	r3, [r0, #1]
 800b880:	f990 2001 	ldrsb.w	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b884:	f002 020f 	and.w	r2, r2, #15
 800b888:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b88a:	091b      	lsrs	r3, r3, #4
 800b88c:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800b88e:	7883      	ldrb	r3, [r0, #2]
 800b890:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800b892:	78c2      	ldrb	r2, [r0, #3]
 800b894:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b898:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800b89a:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b89c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800b8a0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800b8a2:	f003 030f 	and.w	r3, r3, #15
 800b8a6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800b8a8:	2005      	movs	r0, #5
 800b8aa:	4770      	bx	lr

0800b8ac <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800b8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	b085      	sub	sp, #20
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4688      	mov	r8, r1
 800b8b6:	4617      	mov	r7, r2
 800b8b8:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800b8ba:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800b8bc:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800b8c0:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800b8c4:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800b8c8:	7943      	ldrb	r3, [r0, #5]
 800b8ca:	b92b      	cbnz	r3, 800b8d8 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800b8cc:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800b8d0:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800b8d4:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800b8d8:	b95d      	cbnz	r5, 800b8f2 <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800b8da:	2d07      	cmp	r5, #7
 800b8dc:	d02c      	beq.n	800b938 <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800b8de:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800b8e2:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800b8e6:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	b005      	add	sp, #20
 800b8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800b8f2:	69a3      	ldr	r3, [r4, #24]
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800b900:	465a      	mov	r2, fp
 800b902:	6921      	ldr	r1, [r4, #16]
 800b904:	7b20      	ldrb	r0, [r4, #12]
 800b906:	f7ff fe9c 	bl	800b642 <RegionCommonChanVerifyDr>
 800b90a:	b908      	cbnz	r0, 800b910 <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 800b90c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800b910:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800b91a:	461c      	mov	r4, r3
 800b91c:	4619      	mov	r1, r3
 800b91e:	4648      	mov	r0, r9
 800b920:	f7ff fe85 	bl	800b62e <RegionCommonValueInRange>
 800b924:	2800      	cmp	r0, #0
 800b926:	d1d8      	bne.n	800b8da <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 800b928:	454c      	cmp	r4, r9
 800b92a:	dc02      	bgt.n	800b932 <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 800b92c:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800b930:	e7d3      	b.n	800b8da <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 800b932:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b936:	e7d0      	b.n	800b8da <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 800b938:	f1ba 0f00 	cmp.w	sl, #0
 800b93c:	d1cf      	bne.n	800b8de <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 800b93e:	f04f 0a01 	mov.w	sl, #1
 800b942:	e7cc      	b.n	800b8de <RegionCommonLinkAdrReqVerifyParams+0x32>

0800b944 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b944:	4b02      	ldr	r3, [pc, #8]	; (800b950 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800b946:	fa03 f000 	lsl.w	r0, r3, r0
}
 800b94a:	fbb0 f0f1 	udiv	r0, r0, r1
 800b94e:	4770      	bx	lr
 800b950:	000f4240 	.word	0x000f4240

0800b954 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800b954:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800b958:	fbb3 f0f0 	udiv	r0, r3, r0
 800b95c:	4770      	bx	lr
	...

0800b960 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800b960:	b430      	push	{r4, r5}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b962:	1f0c      	subs	r4, r1, #4
 800b964:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b968:	fb05 f202 	mul.w	r2, r5, r2
 800b96c:	fb00 2204 	mla	r2, r0, r4, r2
 800b970:	0052      	lsls	r2, r2, #1
 800b972:	d021      	beq.n	800b9b8 <RegionCommonComputeRxWindowParameters+0x58>
 800b974:	4402      	add	r2, r0
 800b976:	3a01      	subs	r2, #1
 800b978:	fbb2 f2f0 	udiv	r2, r2, r0
 800b97c:	428a      	cmp	r2, r1
 800b97e:	bf38      	it	cc
 800b980:	460a      	movcc	r2, r1
 800b982:	9902      	ldr	r1, [sp, #8]
 800b984:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b986:	0081      	lsls	r1, r0, #2
 800b988:	fb00 f002 	mul.w	r0, r0, r2
 800b98c:	b1b8      	cbz	r0, 800b9be <RegionCommonComputeRxWindowParameters+0x5e>
 800b98e:	3001      	adds	r0, #1
 800b990:	0840      	lsrs	r0, r0, #1
 800b992:	1a08      	subs	r0, r1, r0
 800b994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b998:	fb02 0313 	mls	r3, r2, r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dd10      	ble.n	800b9c2 <RegionCommonComputeRxWindowParameters+0x62>
 800b9a0:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800b9a4:	480a      	ldr	r0, [pc, #40]	; (800b9d0 <RegionCommonComputeRxWindowParameters+0x70>)
 800b9a6:	fb80 2003 	smull	r2, r0, r0, r3
 800b9aa:	17db      	asrs	r3, r3, #31
 800b9ac:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800b9b0:	9a03      	ldr	r2, [sp, #12]
 800b9b2:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b9b4:	bc30      	pop	{r4, r5}
 800b9b6:	4770      	bx	lr
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b9b8:	fbb2 f2f0 	udiv	r2, r2, r0
 800b9bc:	e7de      	b.n	800b97c <RegionCommonComputeRxWindowParameters+0x1c>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b9be:	0840      	lsrs	r0, r0, #1
 800b9c0:	e7e7      	b.n	800b992 <RegionCommonComputeRxWindowParameters+0x32>
 800b9c2:	4803      	ldr	r0, [pc, #12]	; (800b9d0 <RegionCommonComputeRxWindowParameters+0x70>)
 800b9c4:	fb80 2003 	smull	r2, r0, r0, r3
 800b9c8:	17db      	asrs	r3, r3, #31
 800b9ca:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800b9ce:	e7ef      	b.n	800b9b0 <RegionCommonComputeRxWindowParameters+0x50>
 800b9d0:	10624dd3 	.word	0x10624dd3

0800b9d4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	460d      	mov	r5, r1
 800b9d8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b9da:	0040      	lsls	r0, r0, #1
 800b9dc:	f7f4 fef6 	bl	80007cc <__aeabi_ui2f>
 800b9e0:	4601      	mov	r1, r0
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f7f4 fe40 	bl	8000668 <__aeabi_fsub>
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f7f4 fe3d 	bl	8000668 <__aeabi_fsub>
 800b9ee:	f7f4 fd2f 	bl	8000450 <__aeabi_f2d>
 800b9f2:	f005 fbd1 	bl	8011198 <floor>
 800b9f6:	f7f4 fe0b 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800b9fa:	b240      	sxtb	r0, r0
 800b9fc:	bd38      	pop	{r3, r4, r5, pc}

0800b9fe <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b9fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba02:	b083      	sub	sp, #12
 800ba04:	4605      	mov	r5, r0
 800ba06:	468b      	mov	fp, r1
 800ba08:	9200      	str	r2, [sp, #0]
 800ba0a:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ba0c:	2600      	movs	r6, #0
 800ba0e:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800ba10:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800ba12:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ba14:	e04a      	b.n	800baac <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800ba16:	7a3a      	ldrb	r2, [r7, #8]
 800ba18:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800ba1c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ba20:	b252      	sxtb	r2, r2
 800ba22:	b249      	sxtb	r1, r1
 800ba24:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800ba28:	f7ff fe01 	bl	800b62e <RegionCommonValueInRange>
 800ba2c:	b178      	cbz	r0, 800ba4e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800ba2e:	68ea      	ldr	r2, [r5, #12]
 800ba30:	7a7b      	ldrb	r3, [r7, #9]
 800ba32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ba36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba3a:	7d1b      	ldrb	r3, [r3, #20]
 800ba3c:	b35b      	cbz	r3, 800ba96 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800ba3e:	f109 0301 	add.w	r3, r9, #1
 800ba42:	eb08 0204 	add.w	r2, r8, r4
 800ba46:	f80b 2009 	strb.w	r2, [fp, r9]
 800ba4a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800ba4e:	3401      	adds	r4, #1
 800ba50:	b2e4      	uxtb	r4, r4
 800ba52:	2c0f      	cmp	r4, #15
 800ba54:	d824      	bhi.n	800baa0 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800ba56:	686b      	ldr	r3, [r5, #4]
 800ba58:	0072      	lsls	r2, r6, #1
 800ba5a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800ba5e:	4123      	asrs	r3, r4
 800ba60:	f013 0f01 	tst.w	r3, #1
 800ba64:	d0f3      	beq.n	800ba4e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800ba66:	68a8      	ldr	r0, [r5, #8]
 800ba68:	eb08 0304 	add.w	r3, r8, r4
 800ba6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ba70:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800ba74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d0e8      	beq.n	800ba4e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ba7c:	782b      	ldrb	r3, [r5, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1c9      	bne.n	800ba16 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800ba82:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d0c6      	beq.n	800ba16 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800ba88:	5a9b      	ldrh	r3, [r3, r2]
 800ba8a:	fa43 f104 	asr.w	r1, r3, r4
 800ba8e:	f011 0f01 	tst.w	r1, #1
 800ba92:	d1c0      	bne.n	800ba16 <RegionCommonCountNbOfEnabledChannels+0x18>
 800ba94:	e7db      	b.n	800ba4e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800ba96:	f10a 0a01 	add.w	sl, sl, #1
 800ba9a:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800ba9e:	e7d6      	b.n	800ba4e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800baa0:	f108 0810 	add.w	r8, r8, #16
 800baa4:	fa5f f888 	uxtb.w	r8, r8
 800baa8:	3601      	adds	r6, #1
 800baaa:	b2f6      	uxtb	r6, r6
 800baac:	fa1f f388 	uxth.w	r3, r8
 800bab0:	8a2a      	ldrh	r2, [r5, #16]
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d201      	bcs.n	800baba <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800bab6:	2400      	movs	r4, #0
 800bab8:	e7cb      	b.n	800ba52 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800baba:	9b00      	ldr	r3, [sp, #0]
 800babc:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800bac0:	9b01      	ldr	r3, [sp, #4]
 800bac2:	f883 a000 	strb.w	sl, [r3]
}
 800bac6:	b003      	add	sp, #12
 800bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bacc <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800bacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bad0:	b085      	sub	sp, #20
 800bad2:	4604      	mov	r4, r0
 800bad4:	460f      	mov	r7, r1
 800bad6:	4616      	mov	r6, r2
 800bad8:	461d      	mov	r5, r3
 800bada:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800bade:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800bae2:	6840      	ldr	r0, [r0, #4]
 800bae4:	f005 f890 	bl	8010c08 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	1a1b      	subs	r3, r3, r0
 800baec:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800baf0:	2301      	movs	r3, #1
 800baf2:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800bafa:	6863      	ldr	r3, [r4, #4]
 800bafc:	b113      	cbz	r3, 800bb04 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800bafe:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800bb00:	4283      	cmp	r3, r0
 800bb02:	d81c      	bhi.n	800bb3e <RegionCommonIdentifyChannels+0x72>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800bb08:	69e3      	ldr	r3, [r4, #28]
 800bb0a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800bb0e:	781f      	ldrb	r7, [r3, #0]
 800bb10:	69a3      	ldr	r3, [r4, #24]
 800bb12:	9303      	str	r3, [sp, #12]
 800bb14:	ab01      	add	r3, sp, #4
 800bb16:	6921      	ldr	r1, [r4, #16]
 800bb18:	68e0      	ldr	r0, [r4, #12]
 800bb1a:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb1e:	7d23      	ldrb	r3, [r4, #20]
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	7a23      	ldrb	r3, [r4, #8]
 800bb24:	7a62      	ldrb	r2, [r4, #9]
 800bb26:	4661      	mov	r1, ip
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f7ff fe1d 	bl	800b768 <RegionCommonUpdateBandTimeOff>
 800bb2e:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800bb32:	4643      	mov	r3, r8
 800bb34:	462a      	mov	r2, r5
 800bb36:	4631      	mov	r1, r6
 800bb38:	69e0      	ldr	r0, [r4, #28]
 800bb3a:	f7ff ff60 	bl	800b9fe <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800bb3e:	782b      	ldrb	r3, [r5, #0]
 800bb40:	b923      	cbnz	r3, 800bb4c <RegionCommonIdentifyChannels+0x80>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800bb42:	f898 3000 	ldrb.w	r3, [r8]
 800bb46:	b13b      	cbz	r3, 800bb58 <RegionCommonIdentifyChannels+0x8c>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800bb48:	200b      	movs	r0, #11
 800bb4a:	e002      	b.n	800bb52 <RegionCommonIdentifyChannels+0x86>
        *nextTxDelay = 0;
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800bb52:	b005      	add	sp, #20
 800bb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800bb58:	200c      	movs	r0, #12
 800bb5a:	e7fa      	b.n	800bb52 <RegionCommonIdentifyChannels+0x86>

0800bb5c <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800bb62:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800bb66:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800bb6a:	42a6      	cmp	r6, r4
 800bb6c:	d011      	beq.n	800bb92 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800bb6e:	3c01      	subs	r4, #1
 800bb70:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800bb72:	42a6      	cmp	r6, r4
 800bb74:	d00e      	beq.n	800bb94 <RegionCommonGetNextLowerTxDr+0x38>
 800bb76:	68ab      	ldr	r3, [r5, #8]
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	4633      	mov	r3, r6
 800bb82:	4622      	mov	r2, r4
 800bb84:	6869      	ldr	r1, [r5, #4]
 800bb86:	78e8      	ldrb	r0, [r5, #3]
 800bb88:	f7ff fd5b 	bl	800b642 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d0ee      	beq.n	800bb6e <RegionCommonGetNextLowerTxDr+0x12>
 800bb90:	e000      	b.n	800bb94 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800bb92:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800bb94:	4620      	mov	r0, r4
 800bb96:	b002      	add	sp, #8
 800bb98:	bd70      	pop	{r4, r5, r6, pc}

0800bb9a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800bb9a:	4288      	cmp	r0, r1
 800bb9c:	bfb8      	it	lt
 800bb9e:	4608      	movlt	r0, r1
 800bba0:	4770      	bx	lr
	...

0800bba4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800bba4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800bba8:	4a05      	ldr	r2, [pc, #20]	; (800bbc0 <RegionCommonGetBandwidth+0x1c>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d004      	beq.n	800bbb8 <RegionCommonGetBandwidth+0x14>
 800bbae:	4a05      	ldr	r2, [pc, #20]	; (800bbc4 <RegionCommonGetBandwidth+0x20>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d103      	bne.n	800bbbc <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800bbb4:	2002      	movs	r0, #2
 800bbb6:	4770      	bx	lr
            return 1;
 800bbb8:	2001      	movs	r0, #1
 800bbba:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800bbbc:	2000      	movs	r0, #0
    }
}
 800bbbe:	4770      	bx	lr
 800bbc0:	0003d090 	.word	0x0003d090
 800bbc4:	0007a120 	.word	0x0007a120

0800bbc8 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbca:	b08b      	sub	sp, #44	; 0x2c
 800bbcc:	4606      	mov	r6, r0
 800bbce:	460f      	mov	r7, r1
 800bbd0:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800bbd2:	ac04      	add	r4, sp, #16
 800bbd4:	4d11      	ldr	r5, [pc, #68]	; (800bc1c <RegionCommonRxConfigPrint+0x54>)
 800bbd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbda:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bbde:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800bbe2:	2e05      	cmp	r6, #5
 800bbe4:	d810      	bhi.n	800bc08 <RegionCommonRxConfigPrint+0x40>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800bbe6:	f8cd c008 	str.w	ip, [sp, #8]
 800bbea:	9701      	str	r7, [sp, #4]
 800bbec:	ab0a      	add	r3, sp, #40	; 0x28
 800bbee:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800bbf2:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <RegionCommonRxConfigPrint+0x58>)
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	2002      	movs	r0, #2
 800bc00:	f004 fcfe 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800bc04:	b00b      	add	sp, #44	; 0x2c
 800bc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bc08:	f8cd c004 	str.w	ip, [sp, #4]
 800bc0c:	9700      	str	r7, [sp, #0]
 800bc0e:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <RegionCommonRxConfigPrint+0x5c>)
 800bc10:	2201      	movs	r2, #1
 800bc12:	2100      	movs	r1, #0
 800bc14:	2002      	movs	r0, #2
 800bc16:	f004 fcf3 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 800bc1a:	e7f3      	b.n	800bc04 <RegionCommonRxConfigPrint+0x3c>
 800bc1c:	080112cc 	.word	0x080112cc
 800bc20:	080118d4 	.word	0x080118d4
 800bc24:	080118f4 	.word	0x080118f4

0800bc28 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800bc28:	b500      	push	{lr}
 800bc2a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bc2c:	9101      	str	r1, [sp, #4]
 800bc2e:	9000      	str	r0, [sp, #0]
 800bc30:	4b04      	ldr	r3, [pc, #16]	; (800bc44 <RegionCommonTxConfigPrint+0x1c>)
 800bc32:	2201      	movs	r2, #1
 800bc34:	2100      	movs	r1, #0
 800bc36:	2002      	movs	r0, #2
 800bc38:	f004 fce2 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 800bc3c:	b003      	add	sp, #12
 800bc3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc42:	bf00      	nop
 800bc44:	08011910 	.word	0x08011910

0800bc48 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	; (800bcbc <VerifyRfFreq+0x74>)
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	4798      	blx	r3
 800bc54:	b130      	cbz	r0, 800bc64 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800bc56:	4b1a      	ldr	r3, [pc, #104]	; (800bcc0 <VerifyRfFreq+0x78>)
 800bc58:	4423      	add	r3, r4
 800bc5a:	4a1a      	ldr	r2, [pc, #104]	; (800bcc4 <VerifyRfFreq+0x7c>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d802      	bhi.n	800bc66 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800bc60:	2302      	movs	r3, #2
 800bc62:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800bc66:	4b18      	ldr	r3, [pc, #96]	; (800bcc8 <VerifyRfFreq+0x80>)
 800bc68:	4423      	add	r3, r4
 800bc6a:	4a18      	ldr	r2, [pc, #96]	; (800bccc <VerifyRfFreq+0x84>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d802      	bhi.n	800bc76 <VerifyRfFreq+0x2e>
        *band = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	702b      	strb	r3, [r5, #0]
 800bc74:	e7f6      	b.n	800bc64 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800bc76:	4b16      	ldr	r3, [pc, #88]	; (800bcd0 <VerifyRfFreq+0x88>)
 800bc78:	4423      	add	r3, r4
 800bc7a:	4a16      	ldr	r2, [pc, #88]	; (800bcd4 <VerifyRfFreq+0x8c>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d802      	bhi.n	800bc86 <VerifyRfFreq+0x3e>
        *band = 1;
 800bc80:	2301      	movs	r3, #1
 800bc82:	702b      	strb	r3, [r5, #0]
 800bc84:	e7ee      	b.n	800bc64 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800bc86:	4b14      	ldr	r3, [pc, #80]	; (800bcd8 <VerifyRfFreq+0x90>)
 800bc88:	4423      	add	r3, r4
 800bc8a:	4a14      	ldr	r2, [pc, #80]	; (800bcdc <VerifyRfFreq+0x94>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d802      	bhi.n	800bc96 <VerifyRfFreq+0x4e>
        *band = 5;
 800bc90:	2305      	movs	r3, #5
 800bc92:	702b      	strb	r3, [r5, #0]
 800bc94:	e7e6      	b.n	800bc64 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800bc96:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <VerifyRfFreq+0x98>)
 800bc98:	4423      	add	r3, r4
 800bc9a:	4a12      	ldr	r2, [pc, #72]	; (800bce4 <VerifyRfFreq+0x9c>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d802      	bhi.n	800bca6 <VerifyRfFreq+0x5e>
        *band = 3;
 800bca0:	2303      	movs	r3, #3
 800bca2:	702b      	strb	r3, [r5, #0]
 800bca4:	e7de      	b.n	800bc64 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800bca6:	4b10      	ldr	r3, [pc, #64]	; (800bce8 <VerifyRfFreq+0xa0>)
 800bca8:	4423      	add	r3, r4
 800bcaa:	4a10      	ldr	r2, [pc, #64]	; (800bcec <VerifyRfFreq+0xa4>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d802      	bhi.n	800bcb6 <VerifyRfFreq+0x6e>
        *band = 4;
 800bcb0:	2304      	movs	r3, #4
 800bcb2:	702b      	strb	r3, [r5, #0]
 800bcb4:	e7d6      	b.n	800bc64 <VerifyRfFreq+0x1c>
        return false;
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e7d4      	b.n	800bc64 <VerifyRfFreq+0x1c>
 800bcba:	bf00      	nop
 800bcbc:	08011ee8 	.word	0x08011ee8
 800bcc0:	cc8faa40 	.word	0xcc8faa40
 800bcc4:	001e847f 	.word	0x001e847f
 800bcc8:	cc7125c0 	.word	0xcc7125c0
 800bccc:	002dc6c0 	.word	0x002dc6c0
 800bcd0:	cc435eff 	.word	0xcc435eff
 800bcd4:	000927bf 	.word	0x000927bf
 800bcd8:	cc38b0a0 	.word	0xcc38b0a0
 800bcdc:	0007a120 	.word	0x0007a120
 800bce0:	cc2e0240 	.word	0xcc2e0240
 800bce4:	0003d090 	.word	0x0003d090
 800bce8:	cc296e60 	.word	0xcc296e60
 800bcec:	000493e0 	.word	0x000493e0

0800bcf0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800bcf8:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <GetTimeOnAir+0x58>)
 800bcfa:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800bcfc:	4913      	ldr	r1, [pc, #76]	; (800bd4c <GetTimeOnAir+0x5c>)
 800bcfe:	f7ff ff51 	bl	800bba4 <RegionCommonGetBandwidth>
 800bd02:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800bd04:	2d07      	cmp	r5, #7
 800bd06:	d00e      	beq.n	800bd26 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800bd08:	4b11      	ldr	r3, [pc, #68]	; (800bd50 <GetTimeOnAir+0x60>)
 800bd0a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	9003      	str	r0, [sp, #12]
 800bd10:	b2e4      	uxtb	r4, r4
 800bd12:	9402      	str	r4, [sp, #8]
 800bd14:	2300      	movs	r3, #0
 800bd16:	9301      	str	r3, [sp, #4]
 800bd18:	2308      	movs	r3, #8
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	4632      	mov	r2, r6
 800bd20:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800bd22:	b004      	add	sp, #16
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800bd26:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <GetTimeOnAir+0x60>)
 800bd28:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	9303      	str	r3, [sp, #12]
 800bd2e:	b2e4      	uxtb	r4, r4
 800bd30:	9402      	str	r4, [sp, #8]
 800bd32:	2000      	movs	r0, #0
 800bd34:	9001      	str	r0, [sp, #4]
 800bd36:	2305      	movs	r3, #5
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd40:	fb02 f206 	mul.w	r2, r2, r6
 800bd44:	47a8      	blx	r5
 800bd46:	e7ec      	b.n	800bd22 <GetTimeOnAir+0x32>
 800bd48:	0801194c 	.word	0x0801194c
 800bd4c:	0801192c 	.word	0x0801192c
 800bd50:	08011ee8 	.word	0x08011ee8

0800bd54 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800bd54:	b500      	push	{lr}
 800bd56:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800bd5c:	7803      	ldrb	r3, [r0, #0]
 800bd5e:	3b0b      	subs	r3, #11
 800bd60:	2b2e      	cmp	r3, #46	; 0x2e
 800bd62:	d830      	bhi.n	800bdc6 <RegionEU868GetPhyParam+0x72>
 800bd64:	e8df f003 	tbb	[pc, r3]
 800bd68:	3f393633 	.word	0x3f393633
 800bd6c:	504c4845 	.word	0x504c4845
 800bd70:	605c5854 	.word	0x605c5854
 800bd74:	6c2f692f 	.word	0x6c2f692f
 800bd78:	2f7b7872 	.word	0x2f7b7872
 800bd7c:	18837f2f 	.word	0x18837f2f
 800bd80:	2f2f2f2f 	.word	0x2f2f2f2f
 800bd84:	2f2f2f2f 	.word	0x2f2f2f2f
 800bd88:	2f2f2f2f 	.word	0x2f2f2f2f
 800bd8c:	9389862f 	.word	0x9389862f
 800bd90:	99962f2f 	.word	0x99962f2f
 800bd94:	9c2f      	.short	0x9c2f
 800bd96:	a2          	.byte	0xa2
 800bd97:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800bd98:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800bd9c:	f88d 3004 	strb.w	r3, [sp, #4]
 800bda0:	2307      	movs	r3, #7
 800bda2:	f88d 3005 	strb.w	r3, [sp, #5]
 800bda6:	2300      	movs	r3, #0
 800bda8:	f88d 3006 	strb.w	r3, [sp, #6]
 800bdac:	2310      	movs	r3, #16
 800bdae:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800bdb2:	4b42      	ldr	r3, [pc, #264]	; (800bebc <RegionEU868GetPhyParam+0x168>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800bdba:	9202      	str	r2, [sp, #8]
 800bdbc:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800bdbe:	a801      	add	r0, sp, #4
 800bdc0:	f7ff fecc 	bl	800bb5c <RegionCommonGetNextLowerTxDr>
 800bdc4:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 800bdc6:	9804      	ldr	r0, [sp, #16]
 800bdc8:	b007      	add	sp, #28
 800bdca:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800bdce:	2340      	movs	r3, #64	; 0x40
 800bdd0:	9304      	str	r3, [sp, #16]
            break;
 800bdd2:	e7f8      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800bdd4:	2320      	movs	r3, #32
 800bdd6:	9304      	str	r3, [sp, #16]
            break;
 800bdd8:	e7f5      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800bdda:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bdde:	4a38      	ldr	r2, [pc, #224]	; (800bec0 <RegionEU868GetPhyParam+0x16c>)
 800bde0:	5cd3      	ldrb	r3, [r2, r3]
 800bde2:	9304      	str	r3, [sp, #16]
            break;
 800bde4:	e7ef      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800bde6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bdea:	4a36      	ldr	r2, [pc, #216]	; (800bec4 <RegionEU868GetPhyParam+0x170>)
 800bdec:	5cd3      	ldrb	r3, [r2, r3]
 800bdee:	9304      	str	r3, [sp, #16]
            break;
 800bdf0:	e7e9      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	9304      	str	r3, [sp, #16]
            break;
 800bdf6:	e7e6      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800bdf8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bdfc:	9304      	str	r3, [sp, #16]
            break;
 800bdfe:	e7e2      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800be00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be04:	9304      	str	r3, [sp, #16]
            break;
 800be06:	e7de      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800be08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800be0c:	9304      	str	r3, [sp, #16]
            break;
 800be0e:	e7da      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800be10:	f241 3388 	movw	r3, #5000	; 0x1388
 800be14:	9304      	str	r3, [sp, #16]
            break;
 800be16:	e7d6      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800be18:	f241 7370 	movw	r3, #6000	; 0x1770
 800be1c:	9304      	str	r3, [sp, #16]
            break;
 800be1e:	e7d2      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800be20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be24:	9304      	str	r3, [sp, #16]
            break;
 800be26:	e7ce      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800be28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800be2c:	4826      	ldr	r0, [pc, #152]	; (800bec8 <RegionEU868GetPhyParam+0x174>)
 800be2e:	f002 fa51 	bl	800e2d4 <randr>
 800be32:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800be36:	9004      	str	r0, [sp, #16]
            break;
 800be38:	e7c5      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800be3a:	4b24      	ldr	r3, [pc, #144]	; (800becc <RegionEU868GetPhyParam+0x178>)
 800be3c:	9304      	str	r3, [sp, #16]
            break;
 800be3e:	e7c2      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800be40:	4b1e      	ldr	r3, [pc, #120]	; (800bebc <RegionEU868GetPhyParam+0x168>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800be48:	9304      	str	r3, [sp, #16]
            break;
 800be4a:	e7bc      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800be4c:	4b1b      	ldr	r3, [pc, #108]	; (800bebc <RegionEU868GetPhyParam+0x168>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800be54:	9304      	str	r3, [sp, #16]
            break;
 800be56:	e7b6      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800be58:	2310      	movs	r3, #16
 800be5a:	9304      	str	r3, [sp, #16]
            break;
 800be5c:	e7b3      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800be5e:	4b17      	ldr	r3, [pc, #92]	; (800bebc <RegionEU868GetPhyParam+0x168>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	9304      	str	r3, [sp, #16]
            break;
 800be64:	e7af      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800be66:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800be6a:	9304      	str	r3, [sp, #16]
            break;
 800be6c:	e7ab      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800be6e:	4b18      	ldr	r3, [pc, #96]	; (800bed0 <RegionEU868GetPhyParam+0x17c>)
 800be70:	9304      	str	r3, [sp, #16]
            break;
 800be72:	e7a8      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800be74:	4b15      	ldr	r3, [pc, #84]	; (800becc <RegionEU868GetPhyParam+0x178>)
 800be76:	9304      	str	r3, [sp, #16]
            break;
 800be78:	e7a5      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800be7a:	2311      	movs	r3, #17
 800be7c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800be80:	2302      	movs	r3, #2
 800be82:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800be86:	2300      	movs	r3, #0
 800be88:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800be8c:	e79b      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800be8e:	2303      	movs	r3, #3
 800be90:	9304      	str	r3, [sp, #16]
            break;
 800be92:	e798      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800be94:	4b0d      	ldr	r3, [pc, #52]	; (800becc <RegionEU868GetPhyParam+0x178>)
 800be96:	9304      	str	r3, [sp, #16]
            break;
 800be98:	e795      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800be9a:	2303      	movs	r3, #3
 800be9c:	9304      	str	r3, [sp, #16]
            break;
 800be9e:	e792      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bea0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bea4:	4a0b      	ldr	r2, [pc, #44]	; (800bed4 <RegionEU868GetPhyParam+0x180>)
 800bea6:	5cd3      	ldrb	r3, [r2, r3]
 800bea8:	9304      	str	r3, [sp, #16]
            break;
 800beaa:	e78c      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800beac:	490a      	ldr	r1, [pc, #40]	; (800bed8 <RegionEU868GetPhyParam+0x184>)
 800beae:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800beb2:	f7ff fe77 	bl	800bba4 <RegionCommonGetBandwidth>
 800beb6:	9004      	str	r0, [sp, #16]
            break;
 800beb8:	e785      	b.n	800bdc6 <RegionEU868GetPhyParam+0x72>
 800beba:	bf00      	nop
 800bebc:	20001034 	.word	0x20001034
 800bec0:	08011954 	.word	0x08011954
 800bec4:	0801195c 	.word	0x0801195c
 800bec8:	fffffc18 	.word	0xfffffc18
 800becc:	33d3e608 	.word	0x33d3e608
 800bed0:	4009999a 	.word	0x4009999a
 800bed4:	0801194c 	.word	0x0801194c
 800bed8:	0801192c 	.word	0x0801192c

0800bedc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800bedc:	b530      	push	{r4, r5, lr}
 800bede:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800bee0:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <RegionEU868SetBandTxDone+0x34>)
 800bee2:	681d      	ldr	r5, [r3, #0]
 800bee4:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <RegionEU868SetBandTxDone+0x38>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	7803      	ldrb	r3, [r0, #0]
 800beea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800beee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bef2:	7a5b      	ldrb	r3, [r3, #9]
 800bef4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800bef8:	6903      	ldr	r3, [r0, #16]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	68c3      	ldr	r3, [r0, #12]
 800befe:	7842      	ldrb	r2, [r0, #1]
 800bf00:	6881      	ldr	r1, [r0, #8]
 800bf02:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800bf06:	f7ff fc15 	bl	800b734 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800bf0a:	b003      	add	sp, #12
 800bf0c:	bd30      	pop	{r4, r5, pc}
 800bf0e:	bf00      	nop
 800bf10:	20001030 	.word	0x20001030
 800bf14:	20001034 	.word	0x20001034

0800bf18 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	b0a5      	sub	sp, #148	; 0x94
 800bf1c:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800bf1e:	2290      	movs	r2, #144	; 0x90
 800bf20:	2100      	movs	r1, #0
 800bf22:	4668      	mov	r0, sp
 800bf24:	f005 f930 	bl	8011188 <memset>
 800bf28:	2364      	movs	r3, #100	; 0x64
 800bf2a:	f8ad 3000 	strh.w	r3, [sp]
 800bf2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800bf32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf36:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800bf3a:	210a      	movs	r1, #10
 800bf3c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800bf40:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800bf44:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800bf48:	7a23      	ldrb	r3, [r4, #8]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d031      	beq.n	800bfb2 <RegionEU868InitDefaults+0x9a>
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d03d      	beq.n	800bfce <RegionEU868InitDefaults+0xb6>
 800bf52:	b10b      	cbz	r3, 800bf58 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800bf54:	b025      	add	sp, #148	; 0x94
 800bf56:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800bf58:	6820      	ldr	r0, [r4, #0]
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d0fa      	beq.n	800bf54 <RegionEU868InitDefaults+0x3c>
 800bf5e:	6863      	ldr	r3, [r4, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d0f7      	beq.n	800bf54 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800bf64:	4a1f      	ldr	r2, [pc, #124]	; (800bfe4 <RegionEU868InitDefaults+0xcc>)
 800bf66:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800bf68:	4c1f      	ldr	r4, [pc, #124]	; (800bfe8 <RegionEU868InitDefaults+0xd0>)
 800bf6a:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800bf6c:	2290      	movs	r2, #144	; 0x90
 800bf6e:	4669      	mov	r1, sp
 800bf70:	f002 f9bd 	bl	800e2ee <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800bf74:	6824      	ldr	r4, [r4, #0]
 800bf76:	4b1d      	ldr	r3, [pc, #116]	; (800bfec <RegionEU868InitDefaults+0xd4>)
 800bf78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800bf80:	f104 050c 	add.w	r5, r4, #12
 800bf84:	f103 020c 	add.w	r2, r3, #12
 800bf88:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800bf8e:	f104 0518 	add.w	r5, r4, #24
 800bf92:	3318      	adds	r3, #24
 800bf94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf98:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800bf9c:	2307      	movs	r3, #7
 800bf9e:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800bfa8:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800bfac:	f7ff fbb1 	bl	800b712 <RegionCommonChanMaskCopy>
            break;
 800bfb0:	e7d0      	b.n	800bf54 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <RegionEU868InitDefaults+0xd0>)
 800bfb4:	6818      	ldr	r0, [r3, #0]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800bfba:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800bfbc:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800bfc4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800bfc8:	f7ff fba3 	bl	800b712 <RegionCommonChanMaskCopy>
            break;
 800bfcc:	e7c2      	b.n	800bf54 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800bfce:	4b06      	ldr	r3, [pc, #24]	; (800bfe8 <RegionEU868InitDefaults+0xd0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800bfd6:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800bfe0:	e7b8      	b.n	800bf54 <RegionEU868InitDefaults+0x3c>
 800bfe2:	bf00      	nop
 800bfe4:	20001030 	.word	0x20001030
 800bfe8:	20001034 	.word	0x20001034
 800bfec:	080112e4 	.word	0x080112e4

0800bff0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bff0:	b500      	push	{lr}
 800bff2:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800bff4:	290f      	cmp	r1, #15
 800bff6:	d83c      	bhi.n	800c072 <RegionEU868Verify+0x82>
 800bff8:	e8df f001 	tbb	[pc, r1]
 800bffc:	3b3b3b0a 	.word	0x3b3b3b0a
 800c000:	271d133b 	.word	0x271d133b
 800c004:	3b31313b 	.word	0x3b31313b
 800c008:	083b3b3b 	.word	0x083b3b3b
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800c00c:	2001      	movs	r0, #1
 800c00e:	e031      	b.n	800c074 <RegionEU868Verify+0x84>
            uint8_t band = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800c016:	f10d 0107 	add.w	r1, sp, #7
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	f7ff fe14 	bl	800bc48 <VerifyRfFreq>
 800c020:	e028      	b.n	800c074 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800c022:	2207      	movs	r2, #7
 800c024:	2100      	movs	r1, #0
 800c026:	f990 0000 	ldrsb.w	r0, [r0]
 800c02a:	f7ff fb00 	bl	800b62e <RegionCommonValueInRange>
 800c02e:	3800      	subs	r0, #0
 800c030:	bf18      	it	ne
 800c032:	2001      	movne	r0, #1
 800c034:	e01e      	b.n	800c074 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800c036:	2205      	movs	r2, #5
 800c038:	2100      	movs	r1, #0
 800c03a:	f990 0000 	ldrsb.w	r0, [r0]
 800c03e:	f7ff faf6 	bl	800b62e <RegionCommonValueInRange>
 800c042:	3800      	subs	r0, #0
 800c044:	bf18      	it	ne
 800c046:	2001      	movne	r0, #1
 800c048:	e014      	b.n	800c074 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800c04a:	2207      	movs	r2, #7
 800c04c:	2100      	movs	r1, #0
 800c04e:	f990 0000 	ldrsb.w	r0, [r0]
 800c052:	f7ff faec 	bl	800b62e <RegionCommonValueInRange>
 800c056:	3800      	subs	r0, #0
 800c058:	bf18      	it	ne
 800c05a:	2001      	movne	r0, #1
 800c05c:	e00a      	b.n	800c074 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800c05e:	2207      	movs	r2, #7
 800c060:	2100      	movs	r1, #0
 800c062:	f990 0000 	ldrsb.w	r0, [r0]
 800c066:	f7ff fae2 	bl	800b62e <RegionCommonValueInRange>
 800c06a:	3800      	subs	r0, #0
 800c06c:	bf18      	it	ne
 800c06e:	2001      	movne	r0, #1
 800c070:	e000      	b.n	800c074 <RegionEU868Verify+0x84>
            return false;
 800c072:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800c074:	b003      	add	sp, #12
 800c076:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c07c <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c07c:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800c07e:	7903      	ldrb	r3, [r0, #4]
 800c080:	b11b      	cbz	r3, 800c08a <RegionEU868ChanMaskSet+0xe>
 800c082:	2b01      	cmp	r3, #1
 800c084:	d00b      	beq.n	800c09e <RegionEU868ChanMaskSet+0x22>
 800c086:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800c088:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800c08a:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <RegionEU868ChanMaskSet+0x38>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2201      	movs	r2, #1
 800c090:	6801      	ldr	r1, [r0, #0]
 800c092:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800c096:	f7ff fb3c 	bl	800b712 <RegionCommonChanMaskCopy>
    return true;
 800c09a:	2001      	movs	r0, #1
            break;
 800c09c:	e7f4      	b.n	800c088 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <RegionEU868ChanMaskSet+0x38>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	6801      	ldr	r1, [r0, #0]
 800c0a6:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800c0aa:	f7ff fb32 	bl	800b712 <RegionCommonChanMaskCopy>
    return true;
 800c0ae:	2001      	movs	r0, #1
            break;
 800c0b0:	e7ea      	b.n	800c088 <RegionEU868ChanMaskSet+0xc>
 800c0b2:	bf00      	nop
 800c0b4:	20001034 	.word	0x20001034

0800c0b8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	460e      	mov	r6, r1
 800c0be:	4617      	mov	r7, r2
 800c0c0:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800c0c2:	2807      	cmp	r0, #7
 800c0c4:	bfa8      	it	ge
 800c0c6:	2007      	movge	r0, #7
 800c0c8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800c0ca:	4913      	ldr	r1, [pc, #76]	; (800c118 <RegionEU868ComputeRxWindowParameters+0x60>)
 800c0cc:	f7ff fd6a 	bl	800bba4 <RegionCommonGetBandwidth>
 800c0d0:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800c0d2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c0d6:	2b07      	cmp	r3, #7
 800c0d8:	d017      	beq.n	800c10a <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800c0da:	4a0f      	ldr	r2, [pc, #60]	; (800c118 <RegionEU868ComputeRxWindowParameters+0x60>)
 800c0dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c0e0:	4a0e      	ldr	r2, [pc, #56]	; (800c11c <RegionEU868ComputeRxWindowParameters+0x64>)
 800c0e2:	5cd0      	ldrb	r0, [r2, r3]
 800c0e4:	f7ff fc2e 	bl	800b944 <RegionCommonComputeSymbolTimeLoRa>
 800c0e8:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c0ea:	4b0d      	ldr	r3, [pc, #52]	; (800c120 <RegionEU868ComputeRxWindowParameters+0x68>)
 800c0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ee:	4798      	blx	r3
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	f104 020c 	add.w	r2, r4, #12
 800c0f6:	9201      	str	r2, [sp, #4]
 800c0f8:	3408      	adds	r4, #8
 800c0fa:	9400      	str	r4, [sp, #0]
 800c0fc:	463a      	mov	r2, r7
 800c0fe:	4631      	mov	r1, r6
 800c100:	4628      	mov	r0, r5
 800c102:	f7ff fc2d 	bl	800b960 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800c106:	b003      	add	sp, #12
 800c108:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800c10a:	4a04      	ldr	r2, [pc, #16]	; (800c11c <RegionEU868ComputeRxWindowParameters+0x64>)
 800c10c:	5cd0      	ldrb	r0, [r2, r3]
 800c10e:	f7ff fc21 	bl	800b954 <RegionCommonComputeSymbolTimeFsk>
 800c112:	4605      	mov	r5, r0
 800c114:	e7e9      	b.n	800c0ea <RegionEU868ComputeRxWindowParameters+0x32>
 800c116:	bf00      	nop
 800c118:	0801192c 	.word	0x0801192c
 800c11c:	0801194c 	.word	0x0801194c
 800c120:	08011ee8 	.word	0x08011ee8

0800c124 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c128:	b08a      	sub	sp, #40	; 0x28
 800c12a:	4604      	mov	r4, r0
 800c12c:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800c12e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800c132:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800c136:	4b37      	ldr	r3, [pc, #220]	; (800c214 <RegionEU868RxConfig+0xf0>)
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	4798      	blx	r3
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d167      	bne.n	800c210 <RegionEU868RxConfig+0xec>
 800c140:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c142:	7ce3      	ldrb	r3, [r4, #19]
 800c144:	b983      	cbnz	r3, 800c168 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c146:	4b34      	ldr	r3, [pc, #208]	; (800c218 <RegionEU868RxConfig+0xf4>)
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	7823      	ldrb	r3, [r4, #0]
 800c14c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c150:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c154:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c15c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800c160:	f1b8 0f00 	cmp.w	r8, #0
 800c164:	d100      	bne.n	800c168 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c166:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800c168:	4b2c      	ldr	r3, [pc, #176]	; (800c21c <RegionEU868RxConfig+0xf8>)
 800c16a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800c16e:	4b29      	ldr	r3, [pc, #164]	; (800c214 <RegionEU868RxConfig+0xf0>)
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	4640      	mov	r0, r8
 800c174:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800c176:	2d07      	cmp	r5, #7
 800c178:	d02b      	beq.n	800c1d2 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c17a:	4b26      	ldr	r3, [pc, #152]	; (800c214 <RegionEU868RxConfig+0xf0>)
 800c17c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c180:	7ca3      	ldrb	r3, [r4, #18]
 800c182:	9309      	str	r3, [sp, #36]	; 0x24
 800c184:	2601      	movs	r6, #1
 800c186:	9608      	str	r6, [sp, #32]
 800c188:	2300      	movs	r3, #0
 800c18a:	9307      	str	r3, [sp, #28]
 800c18c:	9306      	str	r3, [sp, #24]
 800c18e:	9305      	str	r3, [sp, #20]
 800c190:	9304      	str	r3, [sp, #16]
 800c192:	9303      	str	r3, [sp, #12]
 800c194:	8922      	ldrh	r2, [r4, #8]
 800c196:	9202      	str	r2, [sp, #8]
 800c198:	2208      	movs	r2, #8
 800c19a:	9201      	str	r2, [sp, #4]
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	4633      	mov	r3, r6
 800c1a0:	464a      	mov	r2, r9
 800c1a2:	78a1      	ldrb	r1, [r4, #2]
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800c1a8:	7c63      	ldrb	r3, [r4, #17]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d02d      	beq.n	800c20a <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800c1ae:	4b1c      	ldr	r3, [pc, #112]	; (800c220 <RegionEU868RxConfig+0xfc>)
 800c1b0:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c1b2:	4b18      	ldr	r3, [pc, #96]	; (800c214 <RegionEU868RxConfig+0xf0>)
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b6:	310d      	adds	r1, #13
 800c1b8:	b2c9      	uxtb	r1, r1
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c1be:	462a      	mov	r2, r5
 800c1c0:	4641      	mov	r1, r8
 800c1c2:	7ce0      	ldrb	r0, [r4, #19]
 800c1c4:	f7ff fd00 	bl	800bbc8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800c1c8:	703d      	strb	r5, [r7, #0]
    return true;
 800c1ca:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800c1cc:	b00a      	add	sp, #40	; 0x28
 800c1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800c1d2:	4b10      	ldr	r3, [pc, #64]	; (800c214 <RegionEU868RxConfig+0xf0>)
 800c1d4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c1d8:	7ca3      	ldrb	r3, [r4, #18]
 800c1da:	9309      	str	r3, [sp, #36]	; 0x24
 800c1dc:	2000      	movs	r0, #0
 800c1de:	9008      	str	r0, [sp, #32]
 800c1e0:	9007      	str	r0, [sp, #28]
 800c1e2:	9006      	str	r0, [sp, #24]
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	9305      	str	r3, [sp, #20]
 800c1e8:	9004      	str	r0, [sp, #16]
 800c1ea:	9003      	str	r0, [sp, #12]
 800c1ec:	8923      	ldrh	r3, [r4, #8]
 800c1ee:	9302      	str	r3, [sp, #8]
 800c1f0:	2305      	movs	r3, #5
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	4b0b      	ldr	r3, [pc, #44]	; (800c224 <RegionEU868RxConfig+0x100>)
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1fe:	fb02 f209 	mul.w	r2, r2, r9
 800c202:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c206:	47d0      	blx	sl
 800c208:	e7ce      	b.n	800c1a8 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800c20a:	4b07      	ldr	r3, [pc, #28]	; (800c228 <RegionEU868RxConfig+0x104>)
 800c20c:	5d59      	ldrb	r1, [r3, r5]
 800c20e:	e7d0      	b.n	800c1b2 <RegionEU868RxConfig+0x8e>
        return false;
 800c210:	2000      	movs	r0, #0
 800c212:	e7db      	b.n	800c1cc <RegionEU868RxConfig+0xa8>
 800c214:	08011ee8 	.word	0x08011ee8
 800c218:	20001034 	.word	0x20001034
 800c21c:	0801194c 	.word	0x0801194c
 800c220:	0801195c 	.word	0x0801195c
 800c224:	00014585 	.word	0x00014585
 800c228:	08011954 	.word	0x08011954

0800c22c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	b08d      	sub	sp, #52	; 0x34
 800c232:	4604      	mov	r4, r0
 800c234:	460f      	mov	r7, r1
 800c236:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800c238:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c23c:	4a42      	ldr	r2, [pc, #264]	; (800c348 <RegionEU868TxConfig+0x11c>)
 800c23e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800c242:	4b42      	ldr	r3, [pc, #264]	; (800c34c <RegionEU868TxConfig+0x120>)
 800c244:	6819      	ldr	r1, [r3, #0]
 800c246:	4d42      	ldr	r5, [pc, #264]	; (800c350 <RegionEU868TxConfig+0x124>)
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	7802      	ldrb	r2, [r0, #0]
 800c24c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c250:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c254:	7a53      	ldrb	r3, [r2, #9]
 800c256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c25a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c25e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c262:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c266:	f7ff fc98 	bl	800bb9a <RegionCommonLimitTxPower>
 800c26a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800c26c:	4939      	ldr	r1, [pc, #228]	; (800c354 <RegionEU868TxConfig+0x128>)
 800c26e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c272:	f7ff fc97 	bl	800bba4 <RegionCommonGetBandwidth>
 800c276:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c278:	68a2      	ldr	r2, [r4, #8]
 800c27a:	6861      	ldr	r1, [r4, #4]
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff fba9 	bl	800b9d4 <RegionCommonComputeTxPower>
 800c282:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800c284:	4b34      	ldr	r3, [pc, #208]	; (800c358 <RegionEU868TxConfig+0x12c>)
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	6829      	ldr	r1, [r5, #0]
 800c28a:	7823      	ldrb	r3, [r4, #0]
 800c28c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c290:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800c294:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800c296:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c29a:	2b07      	cmp	r3, #7
 800c29c:	d031      	beq.n	800c302 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c29e:	4b2e      	ldr	r3, [pc, #184]	; (800c358 <RegionEU868TxConfig+0x12c>)
 800c2a0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800c2a4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c2a8:	9308      	str	r3, [sp, #32]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	9207      	str	r2, [sp, #28]
 800c2ae:	9206      	str	r2, [sp, #24]
 800c2b0:	9205      	str	r2, [sp, #20]
 800c2b2:	2501      	movs	r5, #1
 800c2b4:	9504      	str	r5, [sp, #16]
 800c2b6:	9203      	str	r2, [sp, #12]
 800c2b8:	2308      	movs	r3, #8
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	9501      	str	r5, [sp, #4]
 800c2be:	f8cd a000 	str.w	sl, [sp]
 800c2c2:	464b      	mov	r3, r9
 800c2c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800c2ca:	4b21      	ldr	r3, [pc, #132]	; (800c350 <RegionEU868TxConfig+0x124>)
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	7823      	ldrb	r3, [r4, #0]
 800c2d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c2d4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800c2d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c2dc:	f7ff fca4 	bl	800bc28 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800c2e0:	89a1      	ldrh	r1, [r4, #12]
 800c2e2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c2e6:	f7ff fd03 	bl	800bcf0 <GetTimeOnAir>
 800c2ea:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800c2ee:	4b1a      	ldr	r3, [pc, #104]	; (800c358 <RegionEU868TxConfig+0x12c>)
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f2:	7b21      	ldrb	r1, [r4, #12]
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	4798      	blx	r3

    *txPower = txPowerLimited;
 800c2f8:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800c2fa:	2001      	movs	r0, #1
 800c2fc:	b00d      	add	sp, #52	; 0x34
 800c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c302:	4b15      	ldr	r3, [pc, #84]	; (800c358 <RegionEU868TxConfig+0x12c>)
 800c304:	69dd      	ldr	r5, [r3, #28]
 800c306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c30a:	fb03 f30a 	mul.w	r3, r3, sl
 800c30e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c312:	9208      	str	r2, [sp, #32]
 800c314:	f04f 0b00 	mov.w	fp, #0
 800c318:	f8cd b01c 	str.w	fp, [sp, #28]
 800c31c:	f8cd b018 	str.w	fp, [sp, #24]
 800c320:	f8cd b014 	str.w	fp, [sp, #20]
 800c324:	2201      	movs	r2, #1
 800c326:	9204      	str	r2, [sp, #16]
 800c328:	f8cd b00c 	str.w	fp, [sp, #12]
 800c32c:	2205      	movs	r2, #5
 800c32e:	9202      	str	r2, [sp, #8]
 800c330:	f8cd b004 	str.w	fp, [sp, #4]
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	464b      	mov	r3, r9
 800c338:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800c33c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c33e:	4658      	mov	r0, fp
 800c340:	47a8      	blx	r5
        modem = MODEM_FSK;
 800c342:	465d      	mov	r5, fp
 800c344:	e7c1      	b.n	800c2ca <RegionEU868TxConfig+0x9e>
 800c346:	bf00      	nop
 800c348:	0801194c 	.word	0x0801194c
 800c34c:	20001030 	.word	0x20001030
 800c350:	20001034 	.word	0x20001034
 800c354:	0801192c 	.word	0x0801192c
 800c358:	08011ee8 	.word	0x08011ee8

0800c35c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	b08f      	sub	sp, #60	; 0x3c
 800c362:	4607      	mov	r7, r0
 800c364:	468b      	mov	fp, r1
 800c366:	4692      	mov	sl, r2
 800c368:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c36a:	2500      	movs	r5, #0
 800c36c:	950c      	str	r5, [sp, #48]	; 0x30
 800c36e:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800c372:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800c376:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c37a:	e02d      	b.n	800c3d8 <RegionEU868LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c37c:	2400      	movs	r4, #0
        status = 0x07;
 800c37e:	f04f 0807 	mov.w	r8, #7
 800c382:	e00f      	b.n	800c3a4 <RegionEU868LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800c384:	4a56      	ldr	r2, [pc, #344]	; (800c4e0 <RegionEU868LinkAdrReq+0x184>)
 800c386:	6812      	ldr	r2, [r2, #0]
 800c388:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c38c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c390:	b132      	cbz	r2, 800c3a0 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800c392:	2201      	movs	r2, #1
 800c394:	40a2      	lsls	r2, r4
 800c396:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800c39a:	430a      	orrs	r2, r1
 800c39c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c3a0:	3401      	adds	r4, #1
 800c3a2:	b2e4      	uxtb	r4, r4
 800c3a4:	2c0f      	cmp	r4, #15
 800c3a6:	d817      	bhi.n	800c3d8 <RegionEU868LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800c3a8:	2b06      	cmp	r3, #6
 800c3aa:	d0eb      	beq.n	800c384 <RegionEU868LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c3ac:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800c3b0:	4126      	asrs	r6, r4
 800c3b2:	f016 0f01 	tst.w	r6, #1
 800c3b6:	d0f3      	beq.n	800c3a0 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800c3b8:	4a49      	ldr	r2, [pc, #292]	; (800c4e0 <RegionEU868LinkAdrReq+0x184>)
 800c3ba:	6812      	ldr	r2, [r2, #0]
 800c3bc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c3c0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c3c4:	2a00      	cmp	r2, #0
 800c3c6:	d1eb      	bne.n	800c3a0 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800c3c8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800c3cc:	e7e8      	b.n	800c3a0 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800c3ce:	f04f 0806 	mov.w	r8, #6
 800c3d2:	e001      	b.n	800c3d8 <RegionEU868LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800c3d4:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c3d8:	7a3b      	ldrb	r3, [r7, #8]
 800c3da:	42ab      	cmp	r3, r5
 800c3dc:	d919      	bls.n	800c412 <RegionEU868LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	a90c      	add	r1, sp, #48	; 0x30
 800c3e2:	4428      	add	r0, r5
 800c3e4:	f7ff fa46 	bl	800b874 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800c3e8:	b198      	cbz	r0, 800c412 <RegionEU868LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800c3ea:	4405      	add	r5, r0
 800c3ec:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800c3ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800c3f2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800c3f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c3fa:	b90b      	cbnz	r3, 800c400 <RegionEU868LinkAdrReq+0xa4>
 800c3fc:	2a00      	cmp	r2, #0
 800c3fe:	d0e6      	beq.n	800c3ce <RegionEU868LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800c400:	1e5a      	subs	r2, r3, #1
 800c402:	b2d2      	uxtb	r2, r2
 800c404:	2a04      	cmp	r2, #4
 800c406:	d9e5      	bls.n	800c3d4 <RegionEU868LinkAdrReq+0x78>
 800c408:	2b06      	cmp	r3, #6
 800c40a:	d9b7      	bls.n	800c37c <RegionEU868LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800c40c:	f04f 0806 	mov.w	r8, #6
 800c410:	e7e2      	b.n	800c3d8 <RegionEU868LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c412:	2302      	movs	r3, #2
 800c414:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800c418:	7a7b      	ldrb	r3, [r7, #9]
 800c41a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800c41e:	a80a      	add	r0, sp, #40	; 0x28
 800c420:	f7ff fc98 	bl	800bd54 <RegionEU868GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800c424:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800c428:	7abb      	ldrb	r3, [r7, #10]
 800c42a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800c42e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800c432:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800c436:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800c43a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800c43e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c442:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800c446:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c44a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800c44e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c452:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800c456:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c45a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800c45e:	2310      	movs	r3, #16
 800c460:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800c464:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800c468:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800c46a:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800c46e:	2307      	movs	r3, #7
 800c470:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800c474:	4a1a      	ldr	r2, [pc, #104]	; (800c4e0 <RegionEU868LinkAdrReq+0x184>)
 800c476:	6812      	ldr	r2, [r2, #0]
 800c478:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800c47a:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800c47e:	2300      	movs	r3, #0
 800c480:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c488:	ab0c      	add	r3, sp, #48	; 0x30
 800c48a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c48e:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800c492:	a801      	add	r0, sp, #4
 800c494:	f7ff fa0a 	bl	800b8ac <RegionCommonLinkAdrReqVerifyParams>
 800c498:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800c49a:	2807      	cmp	r0, #7
 800c49c:	d011      	beq.n	800c4c2 <RegionEU868LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800c49e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800c4a2:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800c4a6:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800c4aa:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800c4ae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c4b2:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800c4b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c4b8:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	b00f      	add	sp, #60	; 0x3c
 800c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800c4c2:	4e07      	ldr	r6, [pc, #28]	; (800c4e0 <RegionEU868LinkAdrReq+0x184>)
 800c4c4:	6830      	ldr	r0, [r6, #0]
 800c4c6:	220c      	movs	r2, #12
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c4ce:	f001 ff24 	bl	800e31a <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800c4d2:	6833      	ldr	r3, [r6, #0]
 800c4d4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800c4d8:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800c4dc:	e7df      	b.n	800c49e <RegionEU868LinkAdrReq+0x142>
 800c4de:	bf00      	nop
 800c4e0:	20001034 	.word	0x20001034

0800c4e4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c4e4:	b530      	push	{r4, r5, lr}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800c4f0:	f10d 0107 	add.w	r1, sp, #7
 800c4f4:	6840      	ldr	r0, [r0, #4]
 800c4f6:	f7ff fba7 	bl	800bc48 <VerifyRfFreq>
 800c4fa:	b1a8      	cbz	r0, 800c528 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800c4fc:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800c4fe:	2207      	movs	r2, #7
 800c500:	2100      	movs	r1, #0
 800c502:	f994 0000 	ldrsb.w	r0, [r4]
 800c506:	f7ff f892 	bl	800b62e <RegionCommonValueInRange>
 800c50a:	b908      	cbnz	r0, 800c510 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800c50c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800c510:	2205      	movs	r2, #5
 800c512:	2100      	movs	r1, #0
 800c514:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c518:	f7ff f889 	bl	800b62e <RegionCommonValueInRange>
 800c51c:	b908      	cbnz	r0, 800c522 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800c51e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800c522:	4628      	mov	r0, r5
 800c524:	b003      	add	sp, #12
 800c526:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800c528:	2506      	movs	r5, #6
 800c52a:	e7e8      	b.n	800c4fe <RegionEU868RxParamSetupReq+0x1a>

0800c52c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	4770      	bx	lr
	...

0800c534 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800c534:	b510      	push	{r4, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800c540:	f10d 0107 	add.w	r1, sp, #7
 800c544:	6840      	ldr	r0, [r0, #4]
 800c546:	f7ff fb7f 	bl	800bc48 <VerifyRfFreq>
 800c54a:	b178      	cbz	r0, 800c56c <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800c54c:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800c54e:	4b0c      	ldr	r3, [pc, #48]	; (800c580 <RegionEU868DlChannelReq+0x4c>)
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	7823      	ldrb	r3, [r4, #0]
 800c554:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c558:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800c55c:	b909      	cbnz	r1, 800c562 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800c55e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800c562:	2803      	cmp	r0, #3
 800c564:	d004      	beq.n	800c570 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800c566:	b240      	sxtb	r0, r0
 800c568:	b002      	add	sp, #8
 800c56a:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800c56c:	2002      	movs	r0, #2
 800c56e:	e7ee      	b.n	800c54e <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800c570:	6861      	ldr	r1, [r4, #4]
 800c572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c576:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c57a:	6059      	str	r1, [r3, #4]
 800c57c:	e7f3      	b.n	800c566 <RegionEU868DlChannelReq+0x32>
 800c57e:	bf00      	nop
 800c580:	20001034 	.word	0x20001034

0800c584 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800c584:	4770      	bx	lr
	...

0800c588 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c58a:	b097      	sub	sp, #92	; 0x5c
 800c58c:	4604      	mov	r4, r0
 800c58e:	460f      	mov	r7, r1
 800c590:	4616      	mov	r6, r2
 800c592:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800c594:	2100      	movs	r1, #0
 800c596:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800c59a:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c59e:	9111      	str	r1, [sp, #68]	; 0x44
 800c5a0:	9112      	str	r1, [sp, #72]	; 0x48
 800c5a2:	9113      	str	r1, [sp, #76]	; 0x4c
 800c5a4:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c5a6:	2307      	movs	r3, #7
 800c5a8:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c5ac:	4b32      	ldr	r3, [pc, #200]	; (800c678 <RegionEU868NextChannel+0xf0>)
 800c5ae:	6818      	ldr	r0, [r3, #0]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c5b6:	f7ff f896 	bl	800b6e6 <RegionCommonCountChannels>
 800c5ba:	b938      	cbnz	r0, 800c5cc <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c5bc:	4b2e      	ldr	r3, [pc, #184]	; (800c678 <RegionEU868NextChannel+0xf0>)
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c5c4:	f043 0307 	orr.w	r3, r3, #7
 800c5c8:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800c5cc:	7a63      	ldrb	r3, [r4, #9]
 800c5ce:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c5d2:	7a23      	ldrb	r3, [r4, #8]
 800c5d4:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c5d8:	4b27      	ldr	r3, [pc, #156]	; (800c678 <RegionEU868NextChannel+0xf0>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800c5e0:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800c5e2:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800c5e4:	4b25      	ldr	r3, [pc, #148]	; (800c67c <RegionEU868NextChannel+0xf4>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800c5ea:	2310      	movs	r3, #16
 800c5ec:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800c5f0:	f10d 030a 	add.w	r3, sp, #10
 800c5f4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c5fa:	6863      	ldr	r3, [r4, #4]
 800c5fc:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800c5fe:	7aa3      	ldrb	r3, [r4, #10]
 800c600:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800c604:	2306      	movs	r3, #6
 800c606:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c60a:	ab0c      	add	r3, sp, #48	; 0x30
 800c60c:	6921      	ldr	r1, [r4, #16]
 800c60e:	68e0      	ldr	r0, [r4, #12]
 800c610:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c614:	7d23      	ldrb	r3, [r4, #20]
 800c616:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c61a:	8ae1      	ldrh	r1, [r4, #22]
 800c61c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800c620:	f7ff fb66 	bl	800bcf0 <GetTimeOnAir>
 800c624:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c626:	ab03      	add	r3, sp, #12
 800c628:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c62a:	9601      	str	r6, [sp, #4]
 800c62c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800c636:	aa11      	add	r2, sp, #68	; 0x44
 800c638:	4629      	mov	r1, r5
 800c63a:	a809      	add	r0, sp, #36	; 0x24
 800c63c:	f7ff fa46 	bl	800bacc <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c640:	4604      	mov	r4, r0
 800c642:	b120      	cbz	r0, 800c64e <RegionEU868NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800c644:	280c      	cmp	r0, #12
 800c646:	d00d      	beq.n	800c664 <RegionEU868NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c648:	4620      	mov	r0, r4
 800c64a:	b017      	add	sp, #92	; 0x5c
 800c64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c64e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800c652:	3901      	subs	r1, #1
 800c654:	f001 fe3e 	bl	800e2d4 <randr>
 800c658:	ab16      	add	r3, sp, #88	; 0x58
 800c65a:	4418      	add	r0, r3
 800c65c:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800c660:	703b      	strb	r3, [r7, #0]
 800c662:	e7f1      	b.n	800c648 <RegionEU868NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c664:	4b04      	ldr	r3, [pc, #16]	; (800c678 <RegionEU868NextChannel+0xf0>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c66c:	f043 0307 	orr.w	r3, r3, #7
 800c670:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800c674:	e7e8      	b.n	800c648 <RegionEU868NextChannel+0xc0>
 800c676:	bf00      	nop
 800c678:	20001034 	.word	0x20001034
 800c67c:	20001030 	.word	0x20001030

0800c680 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800c680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c682:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800c68a:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c68c:	2d02      	cmp	r5, #2
 800c68e:	d94f      	bls.n	800c730 <RegionEU868ChannelAdd+0xb0>
 800c690:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800c692:	2d0f      	cmp	r5, #15
 800c694:	d84e      	bhi.n	800c734 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c696:	6803      	ldr	r3, [r0, #0]
 800c698:	7a18      	ldrb	r0, [r3, #8]
 800c69a:	f340 0003 	sbfx	r0, r0, #0, #4
 800c69e:	2207      	movs	r2, #7
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	b240      	sxtb	r0, r0
 800c6a4:	f7fe ffc3 	bl	800b62e <RegionCommonValueInRange>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d03d      	beq.n	800c728 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800c6ac:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	7a18      	ldrb	r0, [r3, #8]
 800c6b2:	f340 1003 	sbfx	r0, r0, #4, #4
 800c6b6:	2207      	movs	r2, #7
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	b240      	sxtb	r0, r0
 800c6bc:	f7fe ffb7 	bl	800b62e <RegionCommonValueInRange>
 800c6c0:	b900      	cbnz	r0, 800c6c4 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800c6c2:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800c6c4:	6820      	ldr	r0, [r4, #0]
 800c6c6:	7a03      	ldrb	r3, [r0, #8]
 800c6c8:	f343 0203 	sbfx	r2, r3, #0, #4
 800c6cc:	b252      	sxtb	r2, r2
 800c6ce:	f343 1303 	sbfx	r3, r3, #4, #4
 800c6d2:	b25b      	sxtb	r3, r3
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	dd00      	ble.n	800c6da <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800c6d8:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800c6da:	f10d 0107 	add.w	r1, sp, #7
 800c6de:	6800      	ldr	r0, [r0, #0]
 800c6e0:	f7ff fab2 	bl	800bc48 <VerifyRfFreq>
 800c6e4:	b310      	cbz	r0, 800c72c <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800c6e6:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c6e8:	b106      	cbz	r6, 800c6ec <RegionEU868ChannelAdd+0x6c>
 800c6ea:	bb33      	cbnz	r3, 800c73a <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800c6ec:	bb3e      	cbnz	r6, 800c73e <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800c6ee:	bb43      	cbnz	r3, 800c742 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800c6f0:	4f15      	ldr	r7, [pc, #84]	; (800c748 <RegionEU868ChannelAdd+0xc8>)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	006e      	lsls	r6, r5, #1
 800c6f6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800c6fa:	220c      	movs	r2, #12
 800c6fc:	6821      	ldr	r1, [r4, #0]
 800c6fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c702:	f001 fdf4 	bl	800e2ee <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	442e      	add	r6, r5
 800c70a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c70e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c712:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c714:	2301      	movs	r3, #1
 800c716:	fa03 f505 	lsl.w	r5, r3, r5
 800c71a:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800c71e:	431d      	orrs	r5, r3
 800c720:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800c724:	2000      	movs	r0, #0
 800c726:	e006      	b.n	800c736 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800c728:	2601      	movs	r6, #1
 800c72a:	e7c0      	b.n	800c6ae <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e7db      	b.n	800c6e8 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c730:	2006      	movs	r0, #6
 800c732:	e000      	b.n	800c736 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c734:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c736:	b003      	add	sp, #12
 800c738:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c73a:	2006      	movs	r0, #6
 800c73c:	e7fb      	b.n	800c736 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800c73e:	2005      	movs	r0, #5
 800c740:	e7f9      	b.n	800c736 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800c742:	2004      	movs	r0, #4
 800c744:	e7f7      	b.n	800c736 <RegionEU868ChannelAdd+0xb6>
 800c746:	bf00      	nop
 800c748:	20001034 	.word	0x20001034

0800c74c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800c74c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c74e:	2902      	cmp	r1, #2
 800c750:	d801      	bhi.n	800c756 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800c752:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800c754:	4770      	bx	lr
{
 800c756:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800c758:	4b08      	ldr	r3, [pc, #32]	; (800c77c <RegionEU868ChannelsRemove+0x30>)
 800c75a:	6818      	ldr	r0, [r3, #0]
 800c75c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800c760:	009c      	lsls	r4, r3, #2
 800c762:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c766:	2200      	movs	r2, #0
 800c768:	5102      	str	r2, [r0, r4]
 800c76a:	605a      	str	r2, [r3, #4]
 800c76c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800c76e:	2210      	movs	r2, #16
 800c770:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800c774:	f7fe ff9d 	bl	800b6b2 <RegionCommonChanDisable>
}
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	bf00      	nop
 800c77c:	20001034 	.word	0x20001034

0800c780 <RegionEU868ApplyCFList>:
{
 800c780:	b570      	push	{r4, r5, r6, lr}
 800c782:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c784:	2350      	movs	r3, #80	; 0x50
 800c786:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800c78a:	7903      	ldrb	r3, [r0, #4]
 800c78c:	2b10      	cmp	r3, #16
 800c78e:	d135      	bne.n	800c7fc <RegionEU868ApplyCFList+0x7c>
 800c790:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800c792:	6803      	ldr	r3, [r0, #0]
 800c794:	7bdd      	ldrb	r5, [r3, #15]
 800c796:	2d00      	cmp	r5, #0
 800c798:	d130      	bne.n	800c7fc <RegionEU868ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c79a:	2403      	movs	r4, #3
 800c79c:	e01a      	b.n	800c7d4 <RegionEU868ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c79e:	6832      	ldr	r2, [r6, #0]
 800c7a0:	5d53      	ldrb	r3, [r2, r5]
 800c7a2:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c7a4:	442a      	add	r2, r5
 800c7a6:	7851      	ldrb	r1, [r2, #1]
 800c7a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c7ac:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800c7ae:	7892      	ldrb	r2, [r2, #2]
 800c7b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800c7b4:	2264      	movs	r2, #100	; 0x64
 800c7b6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ba:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	9304      	str	r3, [sp, #16]
 800c7c0:	e011      	b.n	800c7e6 <RegionEU868ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800c7c2:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800c7c6:	4668      	mov	r0, sp
 800c7c8:	f7ff ffc0 	bl	800c74c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c7cc:	3503      	adds	r5, #3
 800c7ce:	b2ed      	uxtb	r5, r5
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	b2e4      	uxtb	r4, r4
 800c7d4:	2c0f      	cmp	r4, #15
 800c7d6:	d811      	bhi.n	800c7fc <RegionEU868ApplyCFList+0x7c>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800c7d8:	2c07      	cmp	r4, #7
 800c7da:	d9e0      	bls.n	800c79e <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800c7e0:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800c7e4:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0ea      	beq.n	800c7c2 <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800c7ec:	ab03      	add	r3, sp, #12
 800c7ee:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800c7f0:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800c7f4:	a801      	add	r0, sp, #4
 800c7f6:	f7ff ff43 	bl	800c680 <RegionEU868ChannelAdd>
 800c7fa:	e7e7      	b.n	800c7cc <RegionEU868ApplyCFList+0x4c>
}
 800c7fc:	b006      	add	sp, #24
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}

0800c800 <RegionEU868NewChannelReq>:
{
 800c800:	b500      	push	{lr}
 800c802:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c804:	6803      	ldr	r3, [r0, #0]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	b952      	cbnz	r2, 800c820 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c80a:	7903      	ldrb	r3, [r0, #4]
 800c80c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c810:	a801      	add	r0, sp, #4
 800c812:	f7ff ff9b 	bl	800c74c <RegionEU868ChannelsRemove>
 800c816:	b1d0      	cbz	r0, 800c84e <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800c818:	2003      	movs	r0, #3
}
 800c81a:	b005      	add	sp, #20
 800c81c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800c820:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800c822:	7903      	ldrb	r3, [r0, #4]
 800c824:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800c828:	a802      	add	r0, sp, #8
 800c82a:	f7ff ff29 	bl	800c680 <RegionEU868ChannelAdd>
 800c82e:	2806      	cmp	r0, #6
 800c830:	d80b      	bhi.n	800c84a <RegionEU868NewChannelReq+0x4a>
 800c832:	e8df f000 	tbb	[pc, r0]
 800c836:	0a04      	.short	0x0a04
 800c838:	060e0a0a 	.word	0x060e0a0a
 800c83c:	08          	.byte	0x08
 800c83d:	00          	.byte	0x00
 800c83e:	2003      	movs	r0, #3
 800c840:	e7eb      	b.n	800c81a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800c842:	2001      	movs	r0, #1
                break;
 800c844:	e7e9      	b.n	800c81a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c846:	2000      	movs	r0, #0
                break;
 800c848:	e7e7      	b.n	800c81a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c84a:	2000      	movs	r0, #0
                break;
 800c84c:	e7e5      	b.n	800c81a <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800c84e:	2000      	movs	r0, #0
 800c850:	e7e3      	b.n	800c81a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800c852:	2002      	movs	r0, #2
 800c854:	e7e1      	b.n	800c81a <RegionEU868NewChannelReq+0x1a>
	...

0800c858 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c85c:	4b12      	ldr	r3, [pc, #72]	; (800c8a8 <RegionEU868SetContinuousWave+0x50>)
 800c85e:	6819      	ldr	r1, [r3, #0]
 800c860:	4d12      	ldr	r5, [pc, #72]	; (800c8ac <RegionEU868SetContinuousWave+0x54>)
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	7802      	ldrb	r2, [r0, #0]
 800c866:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c86a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c86e:	7a53      	ldrb	r3, [r2, #9]
 800c870:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c874:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c878:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c87c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c880:	f7ff f98b 	bl	800bb9a <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c884:	682a      	ldr	r2, [r5, #0]
 800c886:	7823      	ldrb	r3, [r4, #0]
 800c888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c88c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c890:	68a2      	ldr	r2, [r4, #8]
 800c892:	6861      	ldr	r1, [r4, #4]
 800c894:	f7ff f89e 	bl	800b9d4 <RegionCommonComputeTxPower>
 800c898:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c89a:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <RegionEU868SetContinuousWave+0x58>)
 800c89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89e:	89a2      	ldrh	r2, [r4, #12]
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800c8a4:	bd38      	pop	{r3, r4, r5, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20001030 	.word	0x20001030
 800c8ac:	20001034 	.word	0x20001034
 800c8b0:	08011ee8 	.word	0x08011ee8

0800c8b4 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800c8b4:	1a88      	subs	r0, r1, r2
 800c8b6:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	db01      	blt.n	800c8c0 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800c8bc:	b2c0      	uxtb	r0, r0
 800c8be:	4770      	bx	lr
        datarate = DR_0;
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	e7fb      	b.n	800c8bc <RegionEU868ApplyDrOffset+0x8>

0800c8c4 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800c8c4:	b510      	push	{r4, lr}
 800c8c6:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c8c8:	4b10      	ldr	r3, [pc, #64]	; (800c90c <VerifyRfFreq+0x48>)
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	4798      	blx	r3
 800c8ce:	b1c8      	cbz	r0, 800c904 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800c8d0:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <VerifyRfFreq+0x4c>)
 800c8d2:	4423      	add	r3, r4
 800c8d4:	4a0f      	ldr	r2, [pc, #60]	; (800c914 <VerifyRfFreq+0x50>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d813      	bhi.n	800c902 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800c8da:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800c8de:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800c8e2:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800c8e6:	fba2 1203 	umull	r1, r2, r2, r3
 800c8ea:	0c92      	lsrs	r2, r2, #18
 800c8ec:	490a      	ldr	r1, [pc, #40]	; (800c918 <VerifyRfFreq+0x54>)
 800c8ee:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800c8f2:	b942      	cbnz	r2, 800c906 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800c8f4:	4b09      	ldr	r3, [pc, #36]	; (800c91c <VerifyRfFreq+0x58>)
 800c8f6:	4423      	add	r3, r4
 800c8f8:	4a09      	ldr	r2, [pc, #36]	; (800c920 <VerifyRfFreq+0x5c>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d902      	bls.n	800c904 <VerifyRfFreq+0x40>
    {
        return false;
 800c8fe:	2000      	movs	r0, #0
 800c900:	e000      	b.n	800c904 <VerifyRfFreq+0x40>
        return false;
 800c902:	2000      	movs	r0, #0
    }
    return true;
}
 800c904:	bd10      	pop	{r4, pc}
        return false;
 800c906:	2000      	movs	r0, #0
 800c908:	e7fc      	b.n	800c904 <VerifyRfFreq+0x40>
 800c90a:	bf00      	nop
 800c90c:	08011ee8 	.word	0x08011ee8
 800c910:	c8f78f60 	.word	0xc8f78f60
 800c914:	00401640 	.word	0x00401640
 800c918:	000927c0 	.word	0x000927c0
 800c91c:	ca37fea0 	.word	0xca37fea0
 800c920:	01808580 	.word	0x01808580

0800c924 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800c92a:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <GetTimeOnAir+0x30>)
 800c92c:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800c92e:	490a      	ldr	r1, [pc, #40]	; (800c958 <GetTimeOnAir+0x34>)
 800c930:	f7ff f938 	bl	800bba4 <RegionCommonGetBandwidth>
 800c934:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <GetTimeOnAir+0x38>)
 800c938:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c93a:	2001      	movs	r0, #1
 800c93c:	9003      	str	r0, [sp, #12]
 800c93e:	b2e4      	uxtb	r4, r4
 800c940:	9402      	str	r4, [sp, #8]
 800c942:	2200      	movs	r2, #0
 800c944:	9201      	str	r2, [sp, #4]
 800c946:	2208      	movs	r2, #8
 800c948:	9200      	str	r2, [sp, #0]
 800c94a:	4603      	mov	r3, r0
 800c94c:	4632      	mov	r2, r6
 800c94e:	47a8      	blx	r5
}
 800c950:	b004      	add	sp, #16
 800c952:	bd70      	pop	{r4, r5, r6, pc}
 800c954:	080119b8 	.word	0x080119b8
 800c958:	08011964 	.word	0x08011964
 800c95c:	08011ee8 	.word	0x08011ee8

0800c960 <LimitTxPower>:
{
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	4606      	mov	r6, r0
 800c964:	4615      	mov	r5, r2
 800c966:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800c968:	f7ff f917 	bl	800bb9a <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800c96c:	2d04      	cmp	r5, #4
 800c96e:	d105      	bne.n	800c97c <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800c970:	4634      	mov	r4, r6
 800c972:	2e02      	cmp	r6, #2
 800c974:	bfb8      	it	lt
 800c976:	2402      	movlt	r4, #2
}
 800c978:	4620      	mov	r0, r4
 800c97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c97c:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800c97e:	2204      	movs	r2, #4
 800c980:	2100      	movs	r1, #0
 800c982:	4638      	mov	r0, r7
 800c984:	f7fe feaf 	bl	800b6e6 <RegionCommonCountChannels>
 800c988:	2831      	cmp	r0, #49	; 0x31
 800c98a:	d8f5      	bhi.n	800c978 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800c98c:	4634      	mov	r4, r6
 800c98e:	2e05      	cmp	r6, #5
 800c990:	bfb8      	it	lt
 800c992:	2405      	movlt	r4, #5
 800c994:	e7f0      	b.n	800c978 <LimitTxPower+0x18>
	...

0800c998 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800c998:	b500      	push	{lr}
 800c99a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800c99c:	2300      	movs	r3, #0
 800c99e:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800c9a0:	7803      	ldrb	r3, [r0, #0]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	2b38      	cmp	r3, #56	; 0x38
 800c9a6:	d820      	bhi.n	800c9ea <RegionUS915GetPhyParam+0x52>
 800c9a8:	e8df f003 	tbb	[pc, r3]
 800c9ac:	1f1f1f1d 	.word	0x1f1f1f1d
 800c9b0:	1f1f1f1f 	.word	0x1f1f1f1f
 800c9b4:	3e3b1f1f 	.word	0x3e3b1f1f
 800c9b8:	4d1f4741 	.word	0x4d1f4741
 800c9bc:	5d595551 	.word	0x5d595551
 800c9c0:	6e1f6561 	.word	0x6e1f6561
 800c9c4:	807a7471 	.word	0x807a7471
 800c9c8:	871f1f83 	.word	0x871f1f83
 800c9cc:	1f1f238a 	.word	0x1f1f238a
 800c9d0:	1f1f1f1f 	.word	0x1f1f1f1f
 800c9d4:	1f1f1f1f 	.word	0x1f1f1f1f
 800c9d8:	8d1f1f1f 	.word	0x8d1f1f1f
 800c9dc:	1fa19e94 	.word	0x1fa19e94
 800c9e0:	b1aeaba4 	.word	0xb1aeaba4
 800c9e4:	b7          	.byte	0xb7
 800c9e5:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800c9e6:	2308      	movs	r3, #8
 800c9e8:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_US915 */
    return phyParam;
}
 800c9ea:	9804      	ldr	r0, [sp, #16]
 800c9ec:	b007      	add	sp, #28
 800c9ee:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800c9f2:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c9f6:	f88d 3004 	strb.w	r3, [sp, #4]
 800c9fa:	2304      	movs	r3, #4
 800c9fc:	f88d 3005 	strb.w	r3, [sp, #5]
 800ca00:	2300      	movs	r3, #0
 800ca02:	f88d 3006 	strb.w	r3, [sp, #6]
 800ca06:	2348      	movs	r3, #72	; 0x48
 800ca08:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800ca0c:	4b46      	ldr	r3, [pc, #280]	; (800cb28 <RegionUS915GetPhyParam+0x190>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ca14:	9202      	str	r2, [sp, #8]
 800ca16:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ca18:	a801      	add	r0, sp, #4
 800ca1a:	f7ff f89f 	bl	800bb5c <RegionCommonGetNextLowerTxDr>
 800ca1e:	9004      	str	r0, [sp, #16]
            break;
 800ca20:	e7e3      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800ca22:	2340      	movs	r3, #64	; 0x40
 800ca24:	9304      	str	r3, [sp, #16]
            break;
 800ca26:	e7e0      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800ca28:	2320      	movs	r3, #32
 800ca2a:	9304      	str	r3, [sp, #16]
            break;
 800ca2c:	e7dd      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800ca2e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ca32:	4a3e      	ldr	r2, [pc, #248]	; (800cb2c <RegionUS915GetPhyParam+0x194>)
 800ca34:	5cd3      	ldrb	r3, [r2, r3]
 800ca36:	9304      	str	r3, [sp, #16]
            break;
 800ca38:	e7d7      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800ca3a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ca3e:	4a3c      	ldr	r2, [pc, #240]	; (800cb30 <RegionUS915GetPhyParam+0x198>)
 800ca40:	5cd3      	ldrb	r3, [r2, r3]
 800ca42:	9304      	str	r3, [sp, #16]
            break;
 800ca44:	e7d1      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800ca46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ca4a:	9304      	str	r3, [sp, #16]
            break;
 800ca4c:	e7cd      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800ca4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca52:	9304      	str	r3, [sp, #16]
            break;
 800ca54:	e7c9      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ca56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ca5a:	9304      	str	r3, [sp, #16]
            break;
 800ca5c:	e7c5      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ca5e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ca62:	9304      	str	r3, [sp, #16]
            break;
 800ca64:	e7c1      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ca66:	f241 7370 	movw	r3, #6000	; 0x1770
 800ca6a:	9304      	str	r3, [sp, #16]
            break;
 800ca6c:	e7bd      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800ca6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca72:	9304      	str	r3, [sp, #16]
            break;
 800ca74:	e7b9      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800ca76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ca7a:	482e      	ldr	r0, [pc, #184]	; (800cb34 <RegionUS915GetPhyParam+0x19c>)
 800ca7c:	f001 fc2a 	bl	800e2d4 <randr>
 800ca80:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ca84:	9004      	str	r0, [sp, #16]
            break;
 800ca86:	e7b0      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800ca88:	4b2b      	ldr	r3, [pc, #172]	; (800cb38 <RegionUS915GetPhyParam+0x1a0>)
 800ca8a:	9304      	str	r3, [sp, #16]
            break;
 800ca8c:	e7ad      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800ca8e:	2308      	movs	r3, #8
 800ca90:	9304      	str	r3, [sp, #16]
            break;
 800ca92:	e7aa      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ca94:	4b24      	ldr	r3, [pc, #144]	; (800cb28 <RegionUS915GetPhyParam+0x190>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ca9c:	9304      	str	r3, [sp, #16]
            break;
 800ca9e:	e7a4      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800caa0:	4b21      	ldr	r3, [pc, #132]	; (800cb28 <RegionUS915GetPhyParam+0x190>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800caa8:	9304      	str	r3, [sp, #16]
            break;
 800caaa:	e79e      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800caac:	2348      	movs	r3, #72	; 0x48
 800caae:	9304      	str	r3, [sp, #16]
            break;
 800cab0:	e79b      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800cab2:	4b1d      	ldr	r3, [pc, #116]	; (800cb28 <RegionUS915GetPhyParam+0x190>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	9304      	str	r3, [sp, #16]
            break;
 800cab8:	e797      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800caba:	4b20      	ldr	r3, [pc, #128]	; (800cb3c <RegionUS915GetPhyParam+0x1a4>)
 800cabc:	9304      	str	r3, [sp, #16]
            break;
 800cabe:	e794      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	9304      	str	r3, [sp, #16]
            break;
 800cac4:	e791      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800cac6:	4a1e      	ldr	r2, [pc, #120]	; (800cb40 <RegionUS915GetPhyParam+0x1a8>)
 800cac8:	491b      	ldr	r1, [pc, #108]	; (800cb38 <RegionUS915GetPhyParam+0x1a0>)
 800caca:	7900      	ldrb	r0, [r0, #4]
 800cacc:	f7fe fce7 	bl	800b49e <RegionBaseUSCalcDownlinkFrequency>
 800cad0:	9004      	str	r0, [sp, #16]
            break;
 800cad2:	e78a      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800cad4:	2317      	movs	r3, #23
 800cad6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800cada:	2305      	movs	r3, #5
 800cadc:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800cae0:	2303      	movs	r3, #3
 800cae2:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800cae6:	e780      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800cae8:	2308      	movs	r3, #8
 800caea:	9304      	str	r3, [sp, #16]
            break;
 800caec:	e77d      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800caee:	2308      	movs	r3, #8
 800caf0:	9304      	str	r3, [sp, #16]
            break;
 800caf2:	e77a      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800caf4:	4a12      	ldr	r2, [pc, #72]	; (800cb40 <RegionUS915GetPhyParam+0x1a8>)
 800caf6:	4910      	ldr	r1, [pc, #64]	; (800cb38 <RegionUS915GetPhyParam+0x1a0>)
 800caf8:	7900      	ldrb	r0, [r0, #4]
 800cafa:	f7fe fcd0 	bl	800b49e <RegionBaseUSCalcDownlinkFrequency>
 800cafe:	9004      	str	r0, [sp, #16]
            break;
 800cb00:	e773      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800cb02:	2308      	movs	r3, #8
 800cb04:	9304      	str	r3, [sp, #16]
            break;
 800cb06:	e770      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800cb08:	2308      	movs	r3, #8
 800cb0a:	9304      	str	r3, [sp, #16]
            break;
 800cb0c:	e76d      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800cb0e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cb12:	4a0c      	ldr	r2, [pc, #48]	; (800cb44 <RegionUS915GetPhyParam+0x1ac>)
 800cb14:	5cd3      	ldrb	r3, [r2, r3]
 800cb16:	9304      	str	r3, [sp, #16]
            break;
 800cb18:	e767      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800cb1a:	490b      	ldr	r1, [pc, #44]	; (800cb48 <RegionUS915GetPhyParam+0x1b0>)
 800cb1c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800cb20:	f7ff f840 	bl	800bba4 <RegionCommonGetBandwidth>
 800cb24:	9004      	str	r0, [sp, #16]
            break;
 800cb26:	e760      	b.n	800c9ea <RegionUS915GetPhyParam+0x52>
 800cb28:	2000103c 	.word	0x2000103c
 800cb2c:	080119d8 	.word	0x080119d8
 800cb30:	080119c8 	.word	0x080119c8
 800cb34:	fffffc18 	.word	0xfffffc18
 800cb38:	370870a0 	.word	0x370870a0
 800cb3c:	4200999a 	.word	0x4200999a
 800cb40:	000927c0 	.word	0x000927c0
 800cb44:	080119b8 	.word	0x080119b8
 800cb48:	08011964 	.word	0x08011964

0800cb4c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800cb4c:	b530      	push	{r4, r5, lr}
 800cb4e:	b083      	sub	sp, #12
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800cb50:	4b0b      	ldr	r3, [pc, #44]	; (800cb80 <RegionUS915SetBandTxDone+0x34>)
 800cb52:	681d      	ldr	r5, [r3, #0]
 800cb54:	4b0b      	ldr	r3, [pc, #44]	; (800cb84 <RegionUS915SetBandTxDone+0x38>)
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	7803      	ldrb	r3, [r0, #0]
 800cb5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb62:	7a5b      	ldrb	r3, [r3, #9]
 800cb64:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800cb68:	6903      	ldr	r3, [r0, #16]
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	68c3      	ldr	r3, [r0, #12]
 800cb6e:	7842      	ldrb	r2, [r0, #1]
 800cb70:	6881      	ldr	r1, [r0, #8]
 800cb72:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800cb76:	f7fe fddd 	bl	800b734 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 800cb7a:	b003      	add	sp, #12
 800cb7c:	bd30      	pop	{r4, r5, pc}
 800cb7e:	bf00      	nop
 800cb80:	20001038 	.word	0x20001038
 800cb84:	2000103c 	.word	0x2000103c

0800cb88 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	f8ad 3000 	strh.w	r3, [sp]
 800cb92:	2300      	movs	r3, #0
 800cb94:	f88d 3002 	strb.w	r3, [sp, #2]
 800cb98:	9301      	str	r3, [sp, #4]
 800cb9a:	9302      	str	r3, [sp, #8]
 800cb9c:	9303      	str	r3, [sp, #12]
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800cba4:	7a04      	ldrb	r4, [r0, #8]
 800cba6:	b17c      	cbz	r4, 800cbc8 <RegionUS915InitDefaults+0x40>
 800cba8:	3c01      	subs	r4, #1
 800cbaa:	b2e4      	uxtb	r4, r4
 800cbac:	2c01      	cmp	r4, #1
 800cbae:	f200 8082 	bhi.w	800ccb6 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cbb2:	4b42      	ldr	r3, [pc, #264]	; (800ccbc <RegionUS915InitDefaults+0x134>)
 800cbb4:	6818      	ldr	r0, [r3, #0]
 800cbb6:	2206      	movs	r2, #6
 800cbb8:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800cbbc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cbc0:	f7fe fda7 	bl	800b712 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e074      	b.n	800ccb2 <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cbc8:	6803      	ldr	r3, [r0, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d073      	beq.n	800ccb6 <RegionUS915InitDefaults+0x12e>
 800cbce:	6842      	ldr	r2, [r0, #4]
 800cbd0:	2a00      	cmp	r2, #0
 800cbd2:	d070      	beq.n	800ccb6 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800cbd4:	493a      	ldr	r1, [pc, #232]	; (800ccc0 <RegionUS915InitDefaults+0x138>)
 800cbd6:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cbd8:	4938      	ldr	r1, [pc, #224]	; (800ccbc <RegionUS915InitDefaults+0x134>)
 800cbda:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800cbe2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800cbe6:	2218      	movs	r2, #24
 800cbe8:	4669      	mov	r1, sp
 800cbea:	4618      	mov	r0, r3
 800cbec:	f001 fb7f 	bl	800e2ee <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800cbf0:	e011      	b.n	800cc16 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800cbf2:	4b32      	ldr	r3, [pc, #200]	; (800ccbc <RegionUS915InitDefaults+0x134>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a33      	ldr	r2, [pc, #204]	; (800ccc4 <RegionUS915InitDefaults+0x13c>)
 800cbf8:	4933      	ldr	r1, [pc, #204]	; (800ccc8 <RegionUS915InitDefaults+0x140>)
 800cbfa:	fb02 1204 	mla	r2, r2, r4, r1
 800cbfe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cc02:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800cc06:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800cc0a:	2230      	movs	r2, #48	; 0x30
 800cc0c:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cc0e:	2200      	movs	r2, #0
 800cc10:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800cc12:	3401      	adds	r4, #1
 800cc14:	b2e4      	uxtb	r4, r4
 800cc16:	2c3f      	cmp	r4, #63	; 0x3f
 800cc18:	d9eb      	bls.n	800cbf2 <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cc1a:	2340      	movs	r3, #64	; 0x40
 800cc1c:	e013      	b.n	800cc46 <RegionUS915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800cc1e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800cc22:	4a26      	ldr	r2, [pc, #152]	; (800ccbc <RegionUS915InitDefaults+0x134>)
 800cc24:	6812      	ldr	r2, [r2, #0]
 800cc26:	4c29      	ldr	r4, [pc, #164]	; (800cccc <RegionUS915InitDefaults+0x144>)
 800cc28:	4829      	ldr	r0, [pc, #164]	; (800ccd0 <RegionUS915InitDefaults+0x148>)
 800cc2a:	fb04 0101 	mla	r1, r4, r1, r0
 800cc2e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800cc32:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800cc36:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800cc3a:	2144      	movs	r1, #68	; 0x44
 800cc3c:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cc3e:	2100      	movs	r1, #0
 800cc40:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cc42:	3301      	adds	r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b47      	cmp	r3, #71	; 0x47
 800cc48:	d9e9      	bls.n	800cc1e <RegionUS915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800cc4a:	4c1c      	ldr	r4, [pc, #112]	; (800ccbc <RegionUS915InitDefaults+0x134>)
 800cc4c:	6820      	ldr	r0, [r4, #0]
 800cc4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc52:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800cc56:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800cc5a:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800cc5e:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800cc62:	23ff      	movs	r3, #255	; 0xff
 800cc64:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cc6e:	2206      	movs	r2, #6
 800cc70:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800cc74:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cc78:	f7fe fd4b 	bl	800b712 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800cc7c:	4b10      	ldr	r3, [pc, #64]	; (800ccc0 <RegionUS915InitDefaults+0x138>)
 800cc7e:	6818      	ldr	r0, [r3, #0]
 800cc80:	6821      	ldr	r1, [r4, #0]
 800cc82:	2206      	movs	r2, #6
 800cc84:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800cc88:	3090      	adds	r0, #144	; 0x90
 800cc8a:	f7fe fd42 	bl	800b712 <RegionCommonChanMaskCopy>
            break;
 800cc8e:	e012      	b.n	800ccb6 <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cc90:	4a0b      	ldr	r2, [pc, #44]	; (800ccc0 <RegionUS915InitDefaults+0x138>)
 800cc92:	6811      	ldr	r1, [r2, #0]
 800cc94:	4a09      	ldr	r2, [pc, #36]	; (800ccbc <RegionUS915InitDefaults+0x134>)
 800cc96:	6812      	ldr	r2, [r2, #0]
 800cc98:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800cc9c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800cca0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cca4:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800cca8:	4022      	ands	r2, r4
 800ccaa:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ccae:	3301      	adds	r3, #1
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	2b05      	cmp	r3, #5
 800ccb4:	d9ec      	bls.n	800cc90 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800ccb6:	b006      	add	sp, #24
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	bf00      	nop
 800ccbc:	2000103c 	.word	0x2000103c
 800ccc0:	20001038 	.word	0x20001038
 800ccc4:	00030d40 	.word	0x00030d40
 800ccc8:	35c80160 	.word	0x35c80160
 800cccc:	00186a00 	.word	0x00186a00
 800ccd0:	35d2afc0 	.word	0x35d2afc0

0800ccd4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ccd4:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800ccd6:	290a      	cmp	r1, #10
 800ccd8:	d829      	bhi.n	800cd2e <RegionUS915Verify+0x5a>
 800ccda:	e8df f001 	tbb	[pc, r1]
 800ccde:	2806      	.short	0x2806
 800cce0:	0a282828 	.word	0x0a282828
 800cce4:	1e28140a 	.word	0x1e28140a
 800cce8:	1e          	.byte	0x1e
 800cce9:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	f7ff fdea 	bl	800c8c4 <VerifyRfFreq>
 800ccf0:	e01e      	b.n	800cd30 <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800ccf2:	2204      	movs	r2, #4
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	f990 0000 	ldrsb.w	r0, [r0]
 800ccfa:	f7fe fc98 	bl	800b62e <RegionCommonValueInRange>
 800ccfe:	3800      	subs	r0, #0
 800cd00:	bf18      	it	ne
 800cd02:	2001      	movne	r0, #1
 800cd04:	e014      	b.n	800cd30 <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800cd06:	220d      	movs	r2, #13
 800cd08:	2108      	movs	r1, #8
 800cd0a:	f990 0000 	ldrsb.w	r0, [r0]
 800cd0e:	f7fe fc8e 	bl	800b62e <RegionCommonValueInRange>
 800cd12:	3800      	subs	r0, #0
 800cd14:	bf18      	it	ne
 800cd16:	2001      	movne	r0, #1
 800cd18:	e00a      	b.n	800cd30 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800cd1a:	220e      	movs	r2, #14
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	f990 0000 	ldrsb.w	r0, [r0]
 800cd22:	f7fe fc84 	bl	800b62e <RegionCommonValueInRange>
 800cd26:	3800      	subs	r0, #0
 800cd28:	bf18      	it	ne
 800cd2a:	2001      	movne	r0, #1
 800cd2c:	e000      	b.n	800cd30 <RegionUS915Verify+0x5c>
{
 800cd2e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800cd30:	bd08      	pop	{r3, pc}
	...

0800cd34 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800cd34:	7903      	ldrb	r3, [r0, #4]
 800cd36:	2b10      	cmp	r3, #16
 800cd38:	d134      	bne.n	800cda4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800cd3a:	6803      	ldr	r3, [r0, #0]
 800cd3c:	7bdb      	ldrb	r3, [r3, #15]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d130      	bne.n	800cda4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800cd42:	2200      	movs	r2, #0
 800cd44:	4613      	mov	r3, r2
 800cd46:	2a04      	cmp	r2, #4
 800cd48:	d82b      	bhi.n	800cda2 <RegionUS915ApplyCFList+0x6e>
{
 800cd4a:	b4f0      	push	{r4, r5, r6, r7}
 800cd4c:	e014      	b.n	800cd78 <RegionUS915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800cd4e:	b2e4      	uxtb	r4, r4
 800cd50:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800cd54:	4c14      	ldr	r4, [pc, #80]	; (800cda8 <RegionUS915ApplyCFList+0x74>)
 800cd56:	6826      	ldr	r6, [r4, #0]
 800cd58:	f501 74d8 	add.w	r4, r1, #432	; 0x1b0
 800cd5c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800cd60:	3148      	adds	r1, #72	; 0x48
 800cd62:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 800cd66:	402c      	ands	r4, r5
 800cd68:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	3202      	adds	r2, #2
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	d812      	bhi.n	800cd9e <RegionUS915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800cd78:	6804      	ldr	r4, [r0, #0]
 800cd7a:	490c      	ldr	r1, [pc, #48]	; (800cdac <RegionUS915ApplyCFList+0x78>)
 800cd7c:	680d      	ldr	r5, [r1, #0]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	5ca4      	ldrb	r4, [r4, r2]
 800cd82:	f503 77d8 	add.w	r7, r3, #432	; 0x1b0
 800cd86:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800cd8a:	6806      	ldr	r6, [r0, #0]
 800cd8c:	4416      	add	r6, r2
 800cd8e:	7876      	ldrb	r6, [r6, #1]
 800cd90:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800cd94:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d1db      	bne.n	800cd54 <RegionUS915ApplyCFList+0x20>
 800cd9c:	e7d7      	b.n	800cd4e <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800cd9e:	bcf0      	pop	{r4, r5, r6, r7}
 800cda0:	4770      	bx	lr
 800cda2:	4770      	bx	lr
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	20001038 	.word	0x20001038
 800cdac:	2000103c 	.word	0x2000103c

0800cdb0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800cdb4:	2204      	movs	r2, #4
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	6800      	ldr	r0, [r0, #0]
 800cdba:	f7fe fc94 	bl	800b6e6 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800cdbe:	2801      	cmp	r0, #1
 800cdc0:	d033      	beq.n	800ce2a <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800cdc2:	792c      	ldrb	r4, [r5, #4]
 800cdc4:	b11c      	cbz	r4, 800cdce <RegionUS915ChanMaskSet+0x1e>
 800cdc6:	2c01      	cmp	r4, #1
 800cdc8:	d025      	beq.n	800ce16 <RegionUS915ChanMaskSet+0x66>
 800cdca:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cdce:	4e18      	ldr	r6, [pc, #96]	; (800ce30 <RegionUS915ChanMaskSet+0x80>)
 800cdd0:	6830      	ldr	r0, [r6, #0]
 800cdd2:	2206      	movs	r2, #6
 800cdd4:	6829      	ldr	r1, [r5, #0]
 800cdd6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cdda:	f7fe fc9a 	bl	800b712 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800cdde:	6835      	ldr	r5, [r6, #0]
 800cde0:	f895 3374 	ldrb.w	r3, [r5, #884]	; 0x374
 800cde4:	f8a5 3374 	strh.w	r3, [r5, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cde8:	2300      	movs	r3, #0
 800cdea:	f8a5 3376 	strh.w	r3, [r5, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cdee:	2c05      	cmp	r4, #5
 800cdf0:	d80f      	bhi.n	800ce12 <RegionUS915ChanMaskSet+0x62>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cdf2:	4b10      	ldr	r3, [pc, #64]	; (800ce34 <RegionUS915ChanMaskSet+0x84>)
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800cdfa:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800cdfe:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800ce02:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800ce06:	4003      	ands	r3, r0
 800ce08:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ce0c:	3401      	adds	r4, #1
 800ce0e:	b2e4      	uxtb	r4, r4
 800ce10:	e7ed      	b.n	800cdee <RegionUS915ChanMaskSet+0x3e>
    return true;
 800ce12:	2001      	movs	r0, #1
 800ce14:	e7da      	b.n	800cdcc <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ce16:	4b06      	ldr	r3, [pc, #24]	; (800ce30 <RegionUS915ChanMaskSet+0x80>)
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	2206      	movs	r2, #6
 800ce1c:	6829      	ldr	r1, [r5, #0]
 800ce1e:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800ce22:	f7fe fc76 	bl	800b712 <RegionCommonChanMaskCopy>
    return true;
 800ce26:	2001      	movs	r0, #1
            break;
 800ce28:	e7d0      	b.n	800cdcc <RegionUS915ChanMaskSet+0x1c>
        return false;
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e7ce      	b.n	800cdcc <RegionUS915ChanMaskSet+0x1c>
 800ce2e:	bf00      	nop
 800ce30:	2000103c 	.word	0x2000103c
 800ce34:	20001038 	.word	0x20001038

0800ce38 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ce38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	460e      	mov	r6, r1
 800ce3e:	4617      	mov	r7, r2
 800ce40:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800ce42:	280d      	cmp	r0, #13
 800ce44:	bfa8      	it	ge
 800ce46:	200d      	movge	r0, #13
 800ce48:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800ce4a:	4d0f      	ldr	r5, [pc, #60]	; (800ce88 <RegionUS915ComputeRxWindowParameters+0x50>)
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	f7fe fea9 	bl	800bba4 <RegionCommonGetBandwidth>
 800ce52:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800ce54:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ce58:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800ce5c:	4a0b      	ldr	r2, [pc, #44]	; (800ce8c <RegionUS915ComputeRxWindowParameters+0x54>)
 800ce5e:	5cd0      	ldrb	r0, [r2, r3]
 800ce60:	f7fe fd70 	bl	800b944 <RegionCommonComputeSymbolTimeLoRa>
 800ce64:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ce66:	4b0a      	ldr	r3, [pc, #40]	; (800ce90 <RegionUS915ComputeRxWindowParameters+0x58>)
 800ce68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce6a:	4798      	blx	r3
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	f104 020c 	add.w	r2, r4, #12
 800ce72:	9201      	str	r2, [sp, #4]
 800ce74:	3408      	adds	r4, #8
 800ce76:	9400      	str	r4, [sp, #0]
 800ce78:	463a      	mov	r2, r7
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	f7fe fd6f 	bl	800b960 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800ce82:	b003      	add	sp, #12
 800ce84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce86:	bf00      	nop
 800ce88:	08011964 	.word	0x08011964
 800ce8c:	080119b8 	.word	0x080119b8
 800ce90:	08011ee8 	.word	0x08011ee8

0800ce94 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ce94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce98:	b08b      	sub	sp, #44	; 0x2c
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	460e      	mov	r6, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800ce9e:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800cea2:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800cea4:	4b22      	ldr	r3, [pc, #136]	; (800cf30 <RegionUS915RxConfig+0x9c>)
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	4798      	blx	r3
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d13d      	bne.n	800cf2a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ceae:	7ce3      	ldrb	r3, [r4, #19]
 800ceb0:	b933      	cbnz	r3, 800cec0 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800ceb2:	7825      	ldrb	r5, [r4, #0]
 800ceb4:	f005 0507 	and.w	r5, r5, #7
 800ceb8:	4a1e      	ldr	r2, [pc, #120]	; (800cf34 <RegionUS915RxConfig+0xa0>)
 800ceba:	4b1f      	ldr	r3, [pc, #124]	; (800cf38 <RegionUS915RxConfig+0xa4>)
 800cebc:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800cec0:	4b1e      	ldr	r3, [pc, #120]	; (800cf3c <RegionUS915RxConfig+0xa8>)
 800cec2:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 800cec6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800cf30 <RegionUS915RxConfig+0x9c>
 800ceca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cece:	4628      	mov	r0, r5
 800ced0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ced2:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800ced6:	7ca3      	ldrb	r3, [r4, #18]
 800ced8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceda:	2001      	movs	r0, #1
 800cedc:	9008      	str	r0, [sp, #32]
 800cede:	2200      	movs	r2, #0
 800cee0:	9207      	str	r2, [sp, #28]
 800cee2:	9206      	str	r2, [sp, #24]
 800cee4:	9205      	str	r2, [sp, #20]
 800cee6:	9204      	str	r2, [sp, #16]
 800cee8:	9203      	str	r2, [sp, #12]
 800ceea:	8923      	ldrh	r3, [r4, #8]
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	2308      	movs	r3, #8
 800cef0:	9301      	str	r3, [sp, #4]
 800cef2:	9200      	str	r2, [sp, #0]
 800cef4:	4603      	mov	r3, r0
 800cef6:	464a      	mov	r2, r9
 800cef8:	78a1      	ldrb	r1, [r4, #2]
 800cefa:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800cefc:	7c63      	ldrb	r3, [r4, #17]
 800cefe:	b18b      	cbz	r3, 800cf24 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800cf00:	4b0f      	ldr	r3, [pc, #60]	; (800cf40 <RegionUS915RxConfig+0xac>)
 800cf02:	5dd9      	ldrb	r1, [r3, r7]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800cf04:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <RegionUS915RxConfig+0x9c>)
 800cf06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf08:	310d      	adds	r1, #13
 800cf0a:	b2c9      	uxtb	r1, r1
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800cf10:	463a      	mov	r2, r7
 800cf12:	4629      	mov	r1, r5
 800cf14:	7ce0      	ldrb	r0, [r4, #19]
 800cf16:	f7fe fe57 	bl	800bbc8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800cf1a:	7037      	strb	r7, [r6, #0]
    return true;
 800cf1c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800cf1e:	b00b      	add	sp, #44	; 0x2c
 800cf20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800cf24:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <RegionUS915RxConfig+0xb0>)
 800cf26:	5dd9      	ldrb	r1, [r3, r7]
 800cf28:	e7ec      	b.n	800cf04 <RegionUS915RxConfig+0x70>
        return false;
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	e7f7      	b.n	800cf1e <RegionUS915RxConfig+0x8a>
 800cf2e:	bf00      	nop
 800cf30:	08011ee8 	.word	0x08011ee8
 800cf34:	000927c0 	.word	0x000927c0
 800cf38:	370870a0 	.word	0x370870a0
 800cf3c:	080119b8 	.word	0x080119b8
 800cf40:	080119c8 	.word	0x080119c8
 800cf44:	080119d8 	.word	0x080119d8

0800cf48 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	b08d      	sub	sp, #52	; 0x34
 800cf4e:	4604      	mov	r4, r0
 800cf50:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf52:	4690      	mov	r8, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800cf54:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800cf58:	4b32      	ldr	r3, [pc, #200]	; (800d024 <RegionUS915TxConfig+0xdc>)
 800cf5a:	f913 b002 	ldrsb.w	fp, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800cf5e:	4b32      	ldr	r3, [pc, #200]	; (800d028 <RegionUS915TxConfig+0xe0>)
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800d034 <RegionUS915TxConfig+0xec>
 800cf66:	f8da 3000 	ldr.w	r3, [sl]
 800cf6a:	7821      	ldrb	r1, [r4, #0]
 800cf6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cf70:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cf74:	7a49      	ldrb	r1, [r1, #9]
 800cf76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cf7a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cf7e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800cf82:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800cf86:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800cf8a:	f7ff fce9 	bl	800c960 <LimitTxPower>
 800cf8e:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800cf90:	4926      	ldr	r1, [pc, #152]	; (800d02c <RegionUS915TxConfig+0xe4>)
 800cf92:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cf96:	f7fe fe05 	bl	800bba4 <RegionCommonGetBandwidth>
 800cf9a:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	4924      	ldr	r1, [pc, #144]	; (800d030 <RegionUS915TxConfig+0xe8>)
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f7fe fd17 	bl	800b9d4 <RegionCommonComputeTxPower>
 800cfa6:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800cfa8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d038 <RegionUS915TxConfig+0xf0>
 800cfac:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800cfb0:	f8da 1000 	ldr.w	r1, [sl]
 800cfb4:	7823      	ldrb	r3, [r4, #0]
 800cfb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cfba:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800cfbe:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800cfc0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cfc4:	9308      	str	r3, [sp, #32]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	9207      	str	r2, [sp, #28]
 800cfca:	9206      	str	r2, [sp, #24]
 800cfcc:	9205      	str	r2, [sp, #20]
 800cfce:	2501      	movs	r5, #1
 800cfd0:	9504      	str	r5, [sp, #16]
 800cfd2:	9203      	str	r2, [sp, #12]
 800cfd4:	2308      	movs	r3, #8
 800cfd6:	9302      	str	r3, [sp, #8]
 800cfd8:	9501      	str	r5, [sp, #4]
 800cfda:	f8cd b000 	str.w	fp, [sp]
 800cfde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe0:	4639      	mov	r1, r7
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cfe8:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800cfea:	f8da 2000 	ldr.w	r2, [sl]
 800cfee:	7823      	ldrb	r3, [r4, #0]
 800cff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cff4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800cff8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cffc:	f7fe fe14 	bl	800bc28 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800d000:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800d004:	7b21      	ldrb	r1, [r4, #12]
 800d006:	4628      	mov	r0, r5
 800d008:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d00a:	89a1      	ldrh	r1, [r4, #12]
 800d00c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d010:	f7ff fc88 	bl	800c924 <GetTimeOnAir>
 800d014:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800d018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d01a:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800d01c:	4628      	mov	r0, r5
 800d01e:	b00d      	add	sp, #52	; 0x34
 800d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d024:	080119b8 	.word	0x080119b8
 800d028:	20001038 	.word	0x20001038
 800d02c:	08011964 	.word	0x08011964
 800d030:	41f00000 	.word	0x41f00000
 800d034:	2000103c 	.word	0x2000103c
 800d038:	08011ee8 	.word	0x08011ee8

0800d03c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d040:	b091      	sub	sp, #68	; 0x44
 800d042:	4606      	mov	r6, r0
 800d044:	4689      	mov	r9, r1
 800d046:	4690      	mov	r8, r2
 800d048:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d04a:	2400      	movs	r4, #0
 800d04c:	940e      	str	r4, [sp, #56]	; 0x38
 800d04e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800d052:	940b      	str	r4, [sp, #44]	; 0x2c
 800d054:	940c      	str	r4, [sp, #48]	; 0x30
 800d056:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800d058:	4b95      	ldr	r3, [pc, #596]	; (800d2b0 <RegionUS915LinkAdrReq+0x274>)
 800d05a:	6819      	ldr	r1, [r3, #0]
 800d05c:	2206      	movs	r2, #6
 800d05e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800d062:	a80b      	add	r0, sp, #44	; 0x2c
 800d064:	f7fe fb55 	bl	800b712 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d068:	e00d      	b.n	800d086 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800d06a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d06e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800d072:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800d076:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800d07a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d07e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d082:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d086:	7a33      	ldrb	r3, [r6, #8]
 800d088:	42a3      	cmp	r3, r4
 800d08a:	d978      	bls.n	800d17e <RegionUS915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d08c:	6870      	ldr	r0, [r6, #4]
 800d08e:	a90e      	add	r1, sp, #56	; 0x38
 800d090:	4420      	add	r0, r4
 800d092:	f7fe fbef 	bl	800b874 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d096:	2800      	cmp	r0, #0
 800d098:	d071      	beq.n	800d17e <RegionUS915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 800d09a:	4404      	add	r4, r0
 800d09c:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800d09e:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 800d0a2:	2d06      	cmp	r5, #6
 800d0a4:	d0e1      	beq.n	800d06a <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800d0a6:	2d07      	cmp	r5, #7
 800d0a8:	d009      	beq.n	800d0be <RegionUS915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800d0aa:	2d05      	cmp	r5, #5
 800d0ac:	d064      	beq.n	800d178 <RegionUS915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800d0ae:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d0b2:	aa10      	add	r2, sp, #64	; 0x40
 800d0b4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800d0b8:	f825 3c14 	strh.w	r3, [r5, #-20]
 800d0bc:	e7e3      	b.n	800d086 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800d0c4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800d0c8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800d0cc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d0d0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d0d4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d0d8:	e7d5      	b.n	800d086 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800d0da:	aa10      	add	r2, sp, #64	; 0x40
 800d0dc:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d0e0:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d0e4:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800d0e8:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d0ec:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d0f6:	3101      	adds	r1, #1
 800d0f8:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800d0fa:	3501      	adds	r5, #1
 800d0fc:	b2ed      	uxtb	r5, r5
 800d0fe:	2d07      	cmp	r5, #7
 800d100:	d8c1      	bhi.n	800d086 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800d102:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d106:	2301      	movs	r3, #1
 800d108:	40ab      	lsls	r3, r5
 800d10a:	421a      	tst	r2, r3
 800d10c:	d011      	beq.n	800d132 <RegionUS915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 800d10e:	f015 0f01 	tst.w	r5, #1
 800d112:	d1e2      	bne.n	800d0da <RegionUS915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800d114:	aa10      	add	r2, sp, #64	; 0x40
 800d116:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d11a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d11e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800d122:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d126:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d12a:	4313      	orrs	r3, r2
 800d12c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d130:	e7e3      	b.n	800d0fa <RegionUS915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 800d132:	f015 0f01 	tst.w	r5, #1
 800d136:	d10f      	bne.n	800d158 <RegionUS915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800d138:	aa10      	add	r2, sp, #64	; 0x40
 800d13a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d13e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d146:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d14a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d14e:	ea22 0303 	bic.w	r3, r2, r3
 800d152:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d156:	e7d0      	b.n	800d0fa <RegionUS915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800d158:	aa10      	add	r2, sp, #64	; 0x40
 800d15a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800d15e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800d162:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d166:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d16a:	ea22 0303 	bic.w	r3, r2, r3
 800d16e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d172:	3101      	adds	r1, #1
 800d174:	b2c9      	uxtb	r1, r1
 800d176:	e7c0      	b.n	800d0fa <RegionUS915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 800d178:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 800d17a:	4629      	mov	r1, r5
 800d17c:	e7bf      	b.n	800d0fe <RegionUS915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d17e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d182:	2b03      	cmp	r3, #3
 800d184:	dd58      	ble.n	800d238 <RegionUS915LinkAdrReq+0x1fc>
 800d186:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d188:	2302      	movs	r3, #2
 800d18a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d18e:	7a73      	ldrb	r3, [r6, #9]
 800d190:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800d194:	a809      	add	r0, sp, #36	; 0x24
 800d196:	f7ff fbff 	bl	800c998 <RegionUS915GetPhyParam>
 800d19a:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800d19c:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d1a0:	7ab3      	ldrb	r3, [r6, #10]
 800d1a2:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d1a6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d1aa:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d1ae:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d1b2:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d1b6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d1ba:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d1be:	f996 300b 	ldrsb.w	r3, [r6, #11]
 800d1c2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d1c6:	f996 300c 	ldrsb.w	r3, [r6, #12]
 800d1ca:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d1ce:	f996 300d 	ldrsb.w	r3, [r6, #13]
 800d1d2:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800d1d6:	2348      	movs	r3, #72	; 0x48
 800d1d8:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800d1dc:	ab0b      	add	r3, sp, #44	; 0x2c
 800d1de:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d1e0:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800d1e4:	2304      	movs	r3, #4
 800d1e6:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d1ea:	4b31      	ldr	r3, [pc, #196]	; (800d2b0 <RegionUS915LinkAdrReq+0x274>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800d1f0:	230e      	movs	r3, #14
 800d1f2:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d1fc:	6833      	ldr	r3, [r6, #0]
 800d1fe:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d200:	ab0e      	add	r3, sp, #56	; 0x38
 800d202:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800d206:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800d20a:	4668      	mov	r0, sp
 800d20c:	f7fe fb4e 	bl	800b8ac <RegionCommonLinkAdrReqVerifyParams>
 800d210:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d212:	2807      	cmp	r0, #7
 800d214:	d01b      	beq.n	800d24e <RegionUS915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d216:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d21a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d21e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d222:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d226:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d22a:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d22c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d22e:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800d230:	4628      	mov	r0, r5
 800d232:	b011      	add	sp, #68	; 0x44
 800d234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d238:	2204      	movs	r2, #4
 800d23a:	2100      	movs	r1, #0
 800d23c:	a80b      	add	r0, sp, #44	; 0x2c
 800d23e:	f7fe fa52 	bl	800b6e6 <RegionCommonCountChannels>
 800d242:	2801      	cmp	r0, #1
 800d244:	d901      	bls.n	800d24a <RegionUS915LinkAdrReq+0x20e>
 800d246:	2507      	movs	r5, #7
 800d248:	e79e      	b.n	800d188 <RegionUS915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 800d24a:	2506      	movs	r5, #6
 800d24c:	e79c      	b.n	800d188 <RegionUS915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800d24e:	4e18      	ldr	r6, [pc, #96]	; (800d2b0 <RegionUS915LinkAdrReq+0x274>)
 800d250:	6830      	ldr	r0, [r6, #0]
 800d252:	2206      	movs	r2, #6
 800d254:	a90b      	add	r1, sp, #44	; 0x2c
 800d256:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d25a:	f7fe fa5a 	bl	800b712 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800d25e:	4b15      	ldr	r3, [pc, #84]	; (800d2b4 <RegionUS915LinkAdrReq+0x278>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6832      	ldr	r2, [r6, #0]
 800d264:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800d268:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800d26c:	4001      	ands	r1, r0
 800d26e:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800d272:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800d276:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800d27a:	4001      	ands	r1, r0
 800d27c:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800d280:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800d284:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800d288:	4001      	ands	r1, r0
 800d28a:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800d28e:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800d292:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800d296:	4001      	ands	r1, r0
 800d298:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d29c:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800d2a0:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800d2a4:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800d2a8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800d2ac:	e7b3      	b.n	800d216 <RegionUS915LinkAdrReq+0x1da>
 800d2ae:	bf00      	nop
 800d2b0:	2000103c 	.word	0x2000103c
 800d2b4:	20001038 	.word	0x20001038

0800d2b8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800d2bc:	6840      	ldr	r0, [r0, #4]
 800d2be:	f7ff fb01 	bl	800c8c4 <VerifyRfFreq>
 800d2c2:	b310      	cbz	r0, 800d30a <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800d2c4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800d2c6:	220d      	movs	r2, #13
 800d2c8:	2108      	movs	r1, #8
 800d2ca:	f994 0000 	ldrsb.w	r0, [r4]
 800d2ce:	f7fe f9ae 	bl	800b62e <RegionCommonValueInRange>
 800d2d2:	b908      	cbnz	r0, 800d2d8 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800d2d4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d2d8:	2207      	movs	r2, #7
 800d2da:	2105      	movs	r1, #5
 800d2dc:	f994 0000 	ldrsb.w	r0, [r4]
 800d2e0:	f7fe f9a5 	bl	800b62e <RegionCommonValueInRange>
 800d2e4:	2801      	cmp	r0, #1
 800d2e6:	d003      	beq.n	800d2f0 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800d2e8:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d2ec:	2b0d      	cmp	r3, #13
 800d2ee:	dd01      	ble.n	800d2f4 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800d2f0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800d2f4:	2203      	movs	r2, #3
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d2fc:	f7fe f997 	bl	800b62e <RegionCommonValueInRange>
 800d300:	b908      	cbnz	r0, 800d306 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d302:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800d306:	4628      	mov	r0, r5
 800d308:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d30a:	2506      	movs	r5, #6
 800d30c:	e7db      	b.n	800d2c6 <RegionUS915RxParamSetupReq+0xe>

0800d30e <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d30e:	f04f 30ff 	mov.w	r0, #4294967295
 800d312:	4770      	bx	lr

0800d314 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d314:	f04f 30ff 	mov.w	r0, #4294967295
 800d318:	4770      	bx	lr

0800d31a <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d31a:	f04f 30ff 	mov.w	r0, #4294967295
 800d31e:	4770      	bx	lr

0800d320 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800d320:	b9b1      	cbnz	r1, 800d350 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800d322:	4b10      	ldr	r3, [pc, #64]	; (800d364 <RegionUS915AlternateDr+0x44>)
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800d32a:	3301      	adds	r3, #1
 800d32c:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800d330:	4b0c      	ldr	r3, [pc, #48]	; (800d364 <RegionUS915AlternateDr+0x44>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800d338:	4b0b      	ldr	r3, [pc, #44]	; (800d368 <RegionUS915AlternateDr+0x48>)
 800d33a:	fba3 1302 	umull	r1, r3, r3, r2
 800d33e:	085b      	lsrs	r3, r3, #1
 800d340:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d34a:	d009      	beq.n	800d360 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800d34c:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800d34e:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800d350:	4b04      	ldr	r3, [pc, #16]	; (800d364 <RegionUS915AlternateDr+0x44>)
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800d358:	3b01      	subs	r3, #1
 800d35a:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800d35e:	e7e7      	b.n	800d330 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800d360:	2004      	movs	r0, #4
 800d362:	4770      	bx	lr
 800d364:	20001038 	.word	0x20001038
 800d368:	38e38e39 	.word	0x38e38e39

0800d36c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d370:	b0a4      	sub	sp, #144	; 0x90
 800d372:	4604      	mov	r4, r0
 800d374:	460e      	mov	r6, r1
 800d376:	4690      	mov	r8, r2
 800d378:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800d37a:	2500      	movs	r5, #0
 800d37c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800d380:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800d384:	9511      	str	r5, [sp, #68]	; 0x44
 800d386:	2244      	movs	r2, #68	; 0x44
 800d388:	4629      	mov	r1, r5
 800d38a:	a812      	add	r0, sp, #72	; 0x48
 800d38c:	f003 fefc 	bl	8011188 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800d390:	4b4c      	ldr	r3, [pc, #304]	; (800d4c4 <RegionUS915NextChannel+0x158>)
 800d392:	6818      	ldr	r0, [r3, #0]
 800d394:	2204      	movs	r2, #4
 800d396:	4629      	mov	r1, r5
 800d398:	3090      	adds	r0, #144	; 0x90
 800d39a:	f7fe f9a4 	bl	800b6e6 <RegionCommonCountChannels>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d05c      	beq.n	800d45c <RegionUS915NextChannel+0xf0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800d3a2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	dd0a      	ble.n	800d3c0 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800d3aa:	4b46      	ldr	r3, [pc, #280]	; (800d4c4 <RegionUS915NextChannel+0x158>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800d3b2:	b92a      	cbnz	r2, 800d3c0 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d3b4:	4a44      	ldr	r2, [pc, #272]	; (800d4c8 <RegionUS915NextChannel+0x15c>)
 800d3b6:	6812      	ldr	r2, [r2, #0]
 800d3b8:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800d3bc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d3c0:	7a63      	ldrb	r3, [r4, #9]
 800d3c2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d3c6:	7a23      	ldrb	r3, [r4, #8]
 800d3c8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800d3cc:	4b3d      	ldr	r3, [pc, #244]	; (800d4c4 <RegionUS915NextChannel+0x158>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800d3d4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d3d6:	4a3c      	ldr	r2, [pc, #240]	; (800d4c8 <RegionUS915NextChannel+0x15c>)
 800d3d8:	6812      	ldr	r2, [r2, #0]
 800d3da:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d3dc:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800d3de:	2348      	movs	r3, #72	; 0x48
 800d3e0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d3ec:	6863      	ldr	r3, [r4, #4]
 800d3ee:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d3f0:	7aa3      	ldrb	r3, [r4, #10]
 800d3f2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d3fc:	ab0c      	add	r3, sp, #48	; 0x30
 800d3fe:	6921      	ldr	r1, [r4, #16]
 800d400:	68e0      	ldr	r0, [r4, #12]
 800d402:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d406:	7d23      	ldrb	r3, [r4, #20]
 800d408:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d40c:	8ae1      	ldrh	r1, [r4, #22]
 800d40e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d412:	f7ff fa87 	bl	800c924 <GetTimeOnAir>
 800d416:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d418:	ab03      	add	r3, sp, #12
 800d41a:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d41c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d420:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800d42a:	aa11      	add	r2, sp, #68	; 0x44
 800d42c:	4639      	mov	r1, r7
 800d42e:	a809      	add	r0, sp, #36	; 0x24
 800d430:	f7fe fb4c 	bl	800bacc <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d434:	4605      	mov	r5, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	d13f      	bne.n	800d4ba <RegionUS915NextChannel+0x14e>
    {
        if( nextChanParams->Joined == true )
 800d43a:	7a63      	ldrb	r3, [r4, #9]
 800d43c:	b9eb      	cbnz	r3, 800d47a <RegionUS915NextChannel+0x10e>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800d43e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d442:	b32b      	cbz	r3, 800d490 <RegionUS915NextChannel+0x124>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800d444:	4603      	mov	r3, r0
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800d446:	4a1f      	ldr	r2, [pc, #124]	; (800d4c4 <RegionUS915NextChannel+0x158>)
 800d448:	6812      	ldr	r2, [r2, #0]
 800d44a:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800d44e:	411a      	asrs	r2, r3
 800d450:	f012 0f01 	tst.w	r2, #1
 800d454:	d128      	bne.n	800d4a8 <RegionUS915NextChannel+0x13c>
                {
                    i++;
 800d456:	3301      	adds	r3, #1
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	e7f4      	b.n	800d446 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800d45c:	4d19      	ldr	r5, [pc, #100]	; (800d4c4 <RegionUS915NextChannel+0x158>)
 800d45e:	6828      	ldr	r0, [r5, #0]
 800d460:	4b19      	ldr	r3, [pc, #100]	; (800d4c8 <RegionUS915NextChannel+0x15c>)
 800d462:	6819      	ldr	r1, [r3, #0]
 800d464:	2204      	movs	r2, #4
 800d466:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800d46a:	3090      	adds	r0, #144	; 0x90
 800d46c:	f7fe f951 	bl	800b712 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800d478:	e793      	b.n	800d3a2 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d47a:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800d47e:	3901      	subs	r1, #1
 800d480:	f000 ff28 	bl	800e2d4 <randr>
 800d484:	ab24      	add	r3, sp, #144	; 0x90
 800d486:	4418      	add	r0, r3
 800d488:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800d48c:	7033      	strb	r3, [r6, #0]
 800d48e:	e00d      	b.n	800d4ac <RegionUS915NextChannel+0x140>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800d490:	4b0c      	ldr	r3, [pc, #48]	; (800d4c4 <RegionUS915NextChannel+0x158>)
 800d492:	6818      	ldr	r0, [r3, #0]
 800d494:	4632      	mov	r2, r6
 800d496:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800d49a:	3090      	adds	r0, #144	; 0x90
 800d49c:	f7fd ffb3 	bl	800b406 <RegionBaseUSComputeNext125kHzJoinChannel>
 800d4a0:	2803      	cmp	r0, #3
 800d4a2:	d103      	bne.n	800d4ac <RegionUS915NextChannel+0x140>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	e008      	b.n	800d4ba <RegionUS915NextChannel+0x14e>
                }
                *channel = 64 + i;
 800d4a8:	3340      	adds	r3, #64	; 0x40
 800d4aa:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800d4ac:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <RegionUS915NextChannel+0x158>)
 800d4ae:	6818      	ldr	r0, [r3, #0]
 800d4b0:	2248      	movs	r2, #72	; 0x48
 800d4b2:	7831      	ldrb	r1, [r6, #0]
 800d4b4:	3090      	adds	r0, #144	; 0x90
 800d4b6:	f7fe f8fc 	bl	800b6b2 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	b024      	add	sp, #144	; 0x90
 800d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20001038 	.word	0x20001038
 800d4c8:	2000103c 	.word	0x2000103c

0800d4cc <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800d4d0:	4b14      	ldr	r3, [pc, #80]	; (800d524 <RegionUS915SetContinuousWave+0x58>)
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	4d14      	ldr	r5, [pc, #80]	; (800d528 <RegionUS915SetContinuousWave+0x5c>)
 800d4d6:	682b      	ldr	r3, [r5, #0]
 800d4d8:	7802      	ldrb	r2, [r0, #0]
 800d4da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d4de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d4e2:	7a52      	ldrb	r2, [r2, #9]
 800d4e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d4e8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d4ec:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800d4f0:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d4f4:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800d4f8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d4fc:	f7ff fa30 	bl	800c960 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d500:	682a      	ldr	r2, [r5, #0]
 800d502:	7823      	ldrb	r3, [r4, #0]
 800d504:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d508:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800d50c:	2200      	movs	r2, #0
 800d50e:	4907      	ldr	r1, [pc, #28]	; (800d52c <RegionUS915SetContinuousWave+0x60>)
 800d510:	f7fe fa60 	bl	800b9d4 <RegionCommonComputeTxPower>
 800d514:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d516:	4b06      	ldr	r3, [pc, #24]	; (800d530 <RegionUS915SetContinuousWave+0x64>)
 800d518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d51a:	89a2      	ldrh	r2, [r4, #12]
 800d51c:	4628      	mov	r0, r5
 800d51e:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800d520:	bd38      	pop	{r3, r4, r5, pc}
 800d522:	bf00      	nop
 800d524:	20001038 	.word	0x20001038
 800d528:	2000103c 	.word	0x2000103c
 800d52c:	41f00000 	.word	0x41f00000
 800d530:	08011ee8 	.word	0x08011ee8

0800d534 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800d534:	4b04      	ldr	r3, [pc, #16]	; (800d548 <RegionUS915ApplyDrOffset+0x14>)
 800d536:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d53a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800d53c:	2800      	cmp	r0, #0
 800d53e:	db01      	blt.n	800d544 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800d540:	b2c0      	uxtb	r0, r0
 800d542:	4770      	bx	lr
        datarate = DR_0;
 800d544:	2000      	movs	r0, #0
 800d546:	e7fb      	b.n	800d540 <RegionUS915ApplyDrOffset+0xc>
 800d548:	080119a4 	.word	0x080119a4

0800d54c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d54c:	b510      	push	{r4, lr}
 800d54e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800d550:	2210      	movs	r2, #16
 800d552:	2100      	movs	r1, #0
 800d554:	30f1      	adds	r0, #241	; 0xf1
 800d556:	f000 fee0 	bl	800e31a <memset1>
    ctx->M_n = 0;
 800d55a:	2100      	movs	r1, #0
 800d55c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d560:	22f0      	movs	r2, #240	; 0xf0
 800d562:	4620      	mov	r0, r4
 800d564:	f000 fed9 	bl	800e31a <memset1>
}
 800d568:	bd10      	pop	{r4, pc}

0800d56a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d56a:	b508      	push	{r3, lr}
 800d56c:	4602      	mov	r2, r0
 800d56e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d570:	2110      	movs	r1, #16
 800d572:	f000 fb05 	bl	800db80 <lorawan_aes_set_key>
}
 800d576:	bd08      	pop	{r3, pc}

0800d578 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d57c:	b085      	sub	sp, #20
 800d57e:	4607      	mov	r7, r0
 800d580:	4688      	mov	r8, r1
 800d582:	4691      	mov	r9, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d584:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d04b      	beq.n	800d624 <AES_CMAC_Update+0xac>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d58c:	f1c3 0510 	rsb	r5, r3, #16
 800d590:	462c      	mov	r4, r5
 800d592:	4295      	cmp	r5, r2
 800d594:	bf28      	it	cs
 800d596:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d598:	f200 1001 	addw	r0, r0, #257	; 0x101
 800d59c:	b2a2      	uxth	r2, r4
 800d59e:	4418      	add	r0, r3
 800d5a0:	f000 fea5 	bl	800e2ee <memcpy1>
        ctx->M_n += mlen;
 800d5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5a8:	4423      	add	r3, r4
 800d5aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d5ae:	2b0f      	cmp	r3, #15
 800d5b0:	d951      	bls.n	800d656 <AES_CMAC_Update+0xde>
 800d5b2:	454d      	cmp	r5, r9
 800d5b4:	d24f      	bcs.n	800d656 <AES_CMAC_Update+0xde>
            return;
        XOR( ctx->M_last, ctx->X );
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	e008      	b.n	800d5cc <AES_CMAC_Update+0x54>
 800d5ba:	18fa      	adds	r2, r7, r3
 800d5bc:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800d5c0:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800d5c4:	4041      	eors	r1, r0
 800d5c6:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	2b0f      	cmp	r3, #15
 800d5ce:	ddf4      	ble.n	800d5ba <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d5d0:	f107 05f1 	add.w	r5, r7, #241	; 0xf1
 800d5d4:	2210      	movs	r2, #16
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4668      	mov	r0, sp
 800d5da:	f000 fe88 	bl	800e2ee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d5de:	463a      	mov	r2, r7
 800d5e0:	4669      	mov	r1, sp
 800d5e2:	4668      	mov	r0, sp
 800d5e4:	f000 fb56 	bl	800dc94 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d5e8:	2210      	movs	r2, #16
 800d5ea:	4669      	mov	r1, sp
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f000 fe7e 	bl	800e2ee <memcpy1>

        data += mlen;
 800d5f2:	44a0      	add	r8, r4
        len -= mlen;
 800d5f4:	eba9 0904 	sub.w	r9, r9, r4
 800d5f8:	e014      	b.n	800d624 <AES_CMAC_Update+0xac>
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d5fa:	f107 04f1 	add.w	r4, r7, #241	; 0xf1
 800d5fe:	2210      	movs	r2, #16
 800d600:	4621      	mov	r1, r4
 800d602:	4668      	mov	r0, sp
 800d604:	f000 fe73 	bl	800e2ee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d608:	463a      	mov	r2, r7
 800d60a:	4669      	mov	r1, sp
 800d60c:	4668      	mov	r0, sp
 800d60e:	f000 fb41 	bl	800dc94 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d612:	2210      	movs	r2, #16
 800d614:	4669      	mov	r1, sp
 800d616:	4620      	mov	r0, r4
 800d618:	f000 fe69 	bl	800e2ee <memcpy1>

        data += 16;
 800d61c:	f108 0810 	add.w	r8, r8, #16
        len -= 16;
 800d620:	f1a9 0910 	sub.w	r9, r9, #16
    while( len > 16 )
 800d624:	f1b9 0f10 	cmp.w	r9, #16
 800d628:	d90c      	bls.n	800d644 <AES_CMAC_Update+0xcc>
        XOR( data, ctx->X );
 800d62a:	2300      	movs	r3, #0
 800d62c:	2b0f      	cmp	r3, #15
 800d62e:	dce4      	bgt.n	800d5fa <AES_CMAC_Update+0x82>
 800d630:	18fd      	adds	r5, r7, r3
 800d632:	f895 40f1 	ldrb.w	r4, [r5, #241]	; 0xf1
 800d636:	f818 6003 	ldrb.w	r6, [r8, r3]
 800d63a:	4074      	eors	r4, r6
 800d63c:	f885 40f1 	strb.w	r4, [r5, #241]	; 0xf1
 800d640:	3301      	adds	r3, #1
 800d642:	e7f3      	b.n	800d62c <AES_CMAC_Update+0xb4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d644:	fa1f f289 	uxth.w	r2, r9
 800d648:	4641      	mov	r1, r8
 800d64a:	f207 1001 	addw	r0, r7, #257	; 0x101
 800d64e:	f000 fe4e 	bl	800e2ee <memcpy1>
    ctx->M_n = len;
 800d652:	f8c7 9114 	str.w	r9, [r7, #276]	; 0x114
}
 800d656:	b005      	add	sp, #20
 800d658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d65c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d65c:	b570      	push	{r4, r5, r6, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	4606      	mov	r6, r0
 800d662:	460d      	mov	r5, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d664:	2210      	movs	r2, #16
 800d666:	2100      	movs	r1, #0
 800d668:	eb0d 0002 	add.w	r0, sp, r2
 800d66c:	f000 fe55 	bl	800e31a <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d670:	462a      	mov	r2, r5
 800d672:	a904      	add	r1, sp, #16
 800d674:	4608      	mov	r0, r1
 800d676:	f000 fb0d 	bl	800dc94 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d67a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	db19      	blt.n	800d6b6 <AES_CMAC_Final+0x5a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800d682:	2300      	movs	r3, #0
 800d684:	e026      	b.n	800d6d4 <AES_CMAC_Final+0x78>
        LSHIFT( K, K );
 800d686:	aa08      	add	r2, sp, #32
 800d688:	18d1      	adds	r1, r2, r3
 800d68a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d68e:	3301      	adds	r3, #1
 800d690:	441a      	add	r2, r3
 800d692:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d696:	09d2      	lsrs	r2, r2, #7
 800d698:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d69c:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d6a0:	2b0e      	cmp	r3, #14
 800d6a2:	ddf0      	ble.n	800d686 <AES_CMAC_Final+0x2a>
 800d6a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 800d6ac:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d6b0:	f88d 301f 	strb.w	r3, [sp, #31]
 800d6b4:	e015      	b.n	800d6e2 <AES_CMAC_Final+0x86>
        LSHIFT( K, K );
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e7f2      	b.n	800d6a0 <AES_CMAC_Final+0x44>
        LSHIFT( K, K );
 800d6ba:	aa08      	add	r2, sp, #32
 800d6bc:	18d1      	adds	r1, r2, r3
 800d6be:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	441a      	add	r2, r3
 800d6c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d6ca:	09d2      	lsrs	r2, r2, #7
 800d6cc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d6d0:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d6d4:	2b0e      	cmp	r3, #14
 800d6d6:	ddf0      	ble.n	800d6ba <AES_CMAC_Final+0x5e>
 800d6d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800d6e2:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 800d6e6:	2810      	cmp	r0, #16
 800d6e8:	d014      	beq.n	800d714 <AES_CMAC_Final+0xb8>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d6ea:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	db1f      	blt.n	800d732 <AES_CMAC_Final+0xd6>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	2b0e      	cmp	r3, #14
 800d6f6:	dc36      	bgt.n	800d766 <AES_CMAC_Final+0x10a>
 800d6f8:	aa08      	add	r2, sp, #32
 800d6fa:	18d1      	adds	r1, r2, r3
 800d6fc:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800d700:	3301      	adds	r3, #1
 800d702:	441a      	add	r2, r3
 800d704:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d708:	09d2      	lsrs	r2, r2, #7
 800d70a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800d70e:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d712:	e7ef      	b.n	800d6f4 <AES_CMAC_Final+0x98>
        XOR( K, ctx->M_last );
 800d714:	2300      	movs	r3, #0
 800d716:	2b0f      	cmp	r3, #15
 800d718:	dc49      	bgt.n	800d7ae <AES_CMAC_Final+0x152>
 800d71a:	18e9      	adds	r1, r5, r3
 800d71c:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d720:	a808      	add	r0, sp, #32
 800d722:	4418      	add	r0, r3
 800d724:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d728:	4042      	eors	r2, r0
 800d72a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800d72e:	3301      	adds	r3, #1
 800d730:	e7f1      	b.n	800d716 <AES_CMAC_Final+0xba>
            LSHIFT( K, K );
 800d732:	2300      	movs	r3, #0
 800d734:	2b0e      	cmp	r3, #14
 800d736:	dc0d      	bgt.n	800d754 <AES_CMAC_Final+0xf8>
 800d738:	aa08      	add	r2, sp, #32
 800d73a:	18d1      	adds	r1, r2, r3
 800d73c:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800d740:	3301      	adds	r3, #1
 800d742:	441a      	add	r2, r3
 800d744:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d748:	09d2      	lsrs	r2, r2, #7
 800d74a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800d74e:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d752:	e7ef      	b.n	800d734 <AES_CMAC_Final+0xd8>
 800d754:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d758:	005b      	lsls	r3, r3, #1
 800d75a:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 800d75c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d760:	f88d 301f 	strb.w	r3, [sp, #31]
 800d764:	e004      	b.n	800d770 <AES_CMAC_Final+0x114>
            LSHIFT( K, K );
 800d766:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d770:	4428      	add	r0, r5
 800d772:	2380      	movs	r3, #128	; 0x80
 800d774:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d778:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800d77c:	3301      	adds	r3, #1
 800d77e:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 800d782:	2b0f      	cmp	r3, #15
 800d784:	d804      	bhi.n	800d790 <AES_CMAC_Final+0x134>
            ctx->M_last[ctx->M_n] = 0;
 800d786:	442b      	add	r3, r5
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800d78e:	e7f3      	b.n	800d778 <AES_CMAC_Final+0x11c>

        XOR( K, ctx->M_last );
 800d790:	2300      	movs	r3, #0
 800d792:	2b0f      	cmp	r3, #15
 800d794:	dc0b      	bgt.n	800d7ae <AES_CMAC_Final+0x152>
 800d796:	18e9      	adds	r1, r5, r3
 800d798:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d79c:	a808      	add	r0, sp, #32
 800d79e:	4418      	add	r0, r3
 800d7a0:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d7a4:	4042      	eors	r2, r0
 800d7a6:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	e7f1      	b.n	800d792 <AES_CMAC_Final+0x136>
 800d7ae:	2300      	movs	r3, #0
    }
    XOR( ctx->M_last, ctx->X );
 800d7b0:	2b0f      	cmp	r3, #15
 800d7b2:	dc09      	bgt.n	800d7c8 <AES_CMAC_Final+0x16c>
 800d7b4:	18ea      	adds	r2, r5, r3
 800d7b6:	f892 40f1 	ldrb.w	r4, [r2, #241]	; 0xf1
 800d7ba:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800d7be:	404c      	eors	r4, r1
 800d7c0:	f882 40f1 	strb.w	r4, [r2, #241]	; 0xf1
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	e7f3      	b.n	800d7b0 <AES_CMAC_Final+0x154>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d7c8:	2210      	movs	r2, #16
 800d7ca:	f105 01f1 	add.w	r1, r5, #241	; 0xf1
 800d7ce:	4668      	mov	r0, sp
 800d7d0:	f000 fd8d 	bl	800e2ee <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d7d4:	462a      	mov	r2, r5
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	4668      	mov	r0, sp
 800d7da:	f000 fa5b 	bl	800dc94 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d7de:	2210      	movs	r2, #16
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	eb0d 0002 	add.w	r0, sp, r2
 800d7e6:	f000 fd98 	bl	800e31a <memset1>
}
 800d7ea:	b008      	add	sp, #32
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}

0800d7ee <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d7ee:	780b      	ldrb	r3, [r1, #0]
 800d7f0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d7f2:	784b      	ldrb	r3, [r1, #1]
 800d7f4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d7f6:	788b      	ldrb	r3, [r1, #2]
 800d7f8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d7fa:	78cb      	ldrb	r3, [r1, #3]
 800d7fc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d7fe:	790b      	ldrb	r3, [r1, #4]
 800d800:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d802:	794b      	ldrb	r3, [r1, #5]
 800d804:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d806:	798b      	ldrb	r3, [r1, #6]
 800d808:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d80a:	79cb      	ldrb	r3, [r1, #7]
 800d80c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d80e:	7a0b      	ldrb	r3, [r1, #8]
 800d810:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d812:	7a4b      	ldrb	r3, [r1, #9]
 800d814:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d816:	7a8b      	ldrb	r3, [r1, #10]
 800d818:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d81a:	7acb      	ldrb	r3, [r1, #11]
 800d81c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d81e:	7b0b      	ldrb	r3, [r1, #12]
 800d820:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d822:	7b4b      	ldrb	r3, [r1, #13]
 800d824:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d826:	7b8b      	ldrb	r3, [r1, #14]
 800d828:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d82a:	7bcb      	ldrb	r3, [r1, #15]
 800d82c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800d82e:	4770      	bx	lr

0800d830 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800d830:	1e53      	subs	r3, r2, #1
 800d832:	b2db      	uxtb	r3, r3
 800d834:	b12a      	cbz	r2, 800d842 <copy_block_nn+0x12>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d83a:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800d83e:	461a      	mov	r2, r3
 800d840:	e7f6      	b.n	800d830 <copy_block_nn>
}
 800d842:	4770      	bx	lr

0800d844 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d844:	780b      	ldrb	r3, [r1, #0]
 800d846:	7802      	ldrb	r2, [r0, #0]
 800d848:	4053      	eors	r3, r2
 800d84a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d84c:	784b      	ldrb	r3, [r1, #1]
 800d84e:	7842      	ldrb	r2, [r0, #1]
 800d850:	4053      	eors	r3, r2
 800d852:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d854:	788b      	ldrb	r3, [r1, #2]
 800d856:	7882      	ldrb	r2, [r0, #2]
 800d858:	4053      	eors	r3, r2
 800d85a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d85c:	78cb      	ldrb	r3, [r1, #3]
 800d85e:	78c2      	ldrb	r2, [r0, #3]
 800d860:	4053      	eors	r3, r2
 800d862:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d864:	790b      	ldrb	r3, [r1, #4]
 800d866:	7902      	ldrb	r2, [r0, #4]
 800d868:	4053      	eors	r3, r2
 800d86a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d86c:	794b      	ldrb	r3, [r1, #5]
 800d86e:	7942      	ldrb	r2, [r0, #5]
 800d870:	4053      	eors	r3, r2
 800d872:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d874:	798b      	ldrb	r3, [r1, #6]
 800d876:	7982      	ldrb	r2, [r0, #6]
 800d878:	4053      	eors	r3, r2
 800d87a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d87c:	79cb      	ldrb	r3, [r1, #7]
 800d87e:	79c2      	ldrb	r2, [r0, #7]
 800d880:	4053      	eors	r3, r2
 800d882:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d884:	7a0b      	ldrb	r3, [r1, #8]
 800d886:	7a02      	ldrb	r2, [r0, #8]
 800d888:	4053      	eors	r3, r2
 800d88a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d88c:	7a4b      	ldrb	r3, [r1, #9]
 800d88e:	7a42      	ldrb	r2, [r0, #9]
 800d890:	4053      	eors	r3, r2
 800d892:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d894:	7a8b      	ldrb	r3, [r1, #10]
 800d896:	7a82      	ldrb	r2, [r0, #10]
 800d898:	4053      	eors	r3, r2
 800d89a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d89c:	7acb      	ldrb	r3, [r1, #11]
 800d89e:	7ac2      	ldrb	r2, [r0, #11]
 800d8a0:	4053      	eors	r3, r2
 800d8a2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d8a4:	7b0b      	ldrb	r3, [r1, #12]
 800d8a6:	7b02      	ldrb	r2, [r0, #12]
 800d8a8:	4053      	eors	r3, r2
 800d8aa:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d8ac:	7b4b      	ldrb	r3, [r1, #13]
 800d8ae:	7b42      	ldrb	r2, [r0, #13]
 800d8b0:	4053      	eors	r3, r2
 800d8b2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d8b4:	7b8b      	ldrb	r3, [r1, #14]
 800d8b6:	7b82      	ldrb	r2, [r0, #14]
 800d8b8:	4053      	eors	r3, r2
 800d8ba:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d8bc:	7bcb      	ldrb	r3, [r1, #15]
 800d8be:	7bc2      	ldrb	r2, [r0, #15]
 800d8c0:	4053      	eors	r3, r2
 800d8c2:	73c3      	strb	r3, [r0, #15]
#endif
}
 800d8c4:	4770      	bx	lr

0800d8c6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d8c6:	b410      	push	{r4}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d8c8:	780b      	ldrb	r3, [r1, #0]
 800d8ca:	7814      	ldrb	r4, [r2, #0]
 800d8cc:	4063      	eors	r3, r4
 800d8ce:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d8d0:	784b      	ldrb	r3, [r1, #1]
 800d8d2:	7854      	ldrb	r4, [r2, #1]
 800d8d4:	4063      	eors	r3, r4
 800d8d6:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d8d8:	788b      	ldrb	r3, [r1, #2]
 800d8da:	7894      	ldrb	r4, [r2, #2]
 800d8dc:	4063      	eors	r3, r4
 800d8de:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d8e0:	78cb      	ldrb	r3, [r1, #3]
 800d8e2:	78d4      	ldrb	r4, [r2, #3]
 800d8e4:	4063      	eors	r3, r4
 800d8e6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d8e8:	790b      	ldrb	r3, [r1, #4]
 800d8ea:	7914      	ldrb	r4, [r2, #4]
 800d8ec:	4063      	eors	r3, r4
 800d8ee:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d8f0:	794b      	ldrb	r3, [r1, #5]
 800d8f2:	7954      	ldrb	r4, [r2, #5]
 800d8f4:	4063      	eors	r3, r4
 800d8f6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d8f8:	798b      	ldrb	r3, [r1, #6]
 800d8fa:	7994      	ldrb	r4, [r2, #6]
 800d8fc:	4063      	eors	r3, r4
 800d8fe:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d900:	79cb      	ldrb	r3, [r1, #7]
 800d902:	79d4      	ldrb	r4, [r2, #7]
 800d904:	4063      	eors	r3, r4
 800d906:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d908:	7a0b      	ldrb	r3, [r1, #8]
 800d90a:	7a14      	ldrb	r4, [r2, #8]
 800d90c:	4063      	eors	r3, r4
 800d90e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d910:	7a4b      	ldrb	r3, [r1, #9]
 800d912:	7a54      	ldrb	r4, [r2, #9]
 800d914:	4063      	eors	r3, r4
 800d916:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d918:	7a8b      	ldrb	r3, [r1, #10]
 800d91a:	7a94      	ldrb	r4, [r2, #10]
 800d91c:	4063      	eors	r3, r4
 800d91e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d920:	7acb      	ldrb	r3, [r1, #11]
 800d922:	7ad4      	ldrb	r4, [r2, #11]
 800d924:	4063      	eors	r3, r4
 800d926:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d928:	7b0b      	ldrb	r3, [r1, #12]
 800d92a:	7b14      	ldrb	r4, [r2, #12]
 800d92c:	4063      	eors	r3, r4
 800d92e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d930:	7b4b      	ldrb	r3, [r1, #13]
 800d932:	7b54      	ldrb	r4, [r2, #13]
 800d934:	4063      	eors	r3, r4
 800d936:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d938:	7b8b      	ldrb	r3, [r1, #14]
 800d93a:	7b94      	ldrb	r4, [r2, #14]
 800d93c:	4063      	eors	r3, r4
 800d93e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d940:	7bcb      	ldrb	r3, [r1, #15]
 800d942:	7bd2      	ldrb	r2, [r2, #15]
 800d944:	4053      	eors	r3, r2
 800d946:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d948:	bc10      	pop	{r4}
 800d94a:	4770      	bx	lr

0800d94c <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d94c:	b508      	push	{r3, lr}
    xor_block(d, k);
 800d94e:	f7ff ff79 	bl	800d844 <xor_block>
}
 800d952:	bd08      	pop	{r3, pc}

0800d954 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d954:	7802      	ldrb	r2, [r0, #0]
 800d956:	4b18      	ldr	r3, [pc, #96]	; (800d9b8 <shift_sub_rows+0x64>)
 800d958:	5c9a      	ldrb	r2, [r3, r2]
 800d95a:	7002      	strb	r2, [r0, #0]
 800d95c:	7902      	ldrb	r2, [r0, #4]
 800d95e:	5c9a      	ldrb	r2, [r3, r2]
 800d960:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d962:	7a02      	ldrb	r2, [r0, #8]
 800d964:	5c9a      	ldrb	r2, [r3, r2]
 800d966:	7202      	strb	r2, [r0, #8]
 800d968:	7b02      	ldrb	r2, [r0, #12]
 800d96a:	5c9a      	ldrb	r2, [r3, r2]
 800d96c:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d96e:	7842      	ldrb	r2, [r0, #1]
 800d970:	7941      	ldrb	r1, [r0, #5]
 800d972:	5c59      	ldrb	r1, [r3, r1]
 800d974:	7041      	strb	r1, [r0, #1]
 800d976:	7a41      	ldrb	r1, [r0, #9]
 800d978:	5c59      	ldrb	r1, [r3, r1]
 800d97a:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d97c:	7b41      	ldrb	r1, [r0, #13]
 800d97e:	5c59      	ldrb	r1, [r3, r1]
 800d980:	7241      	strb	r1, [r0, #9]
 800d982:	5c9a      	ldrb	r2, [r3, r2]
 800d984:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d986:	7882      	ldrb	r2, [r0, #2]
 800d988:	7a81      	ldrb	r1, [r0, #10]
 800d98a:	5c59      	ldrb	r1, [r3, r1]
 800d98c:	7081      	strb	r1, [r0, #2]
 800d98e:	5c9a      	ldrb	r2, [r3, r2]
 800d990:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d992:	7982      	ldrb	r2, [r0, #6]
 800d994:	7b81      	ldrb	r1, [r0, #14]
 800d996:	5c59      	ldrb	r1, [r3, r1]
 800d998:	7181      	strb	r1, [r0, #6]
 800d99a:	5c9a      	ldrb	r2, [r3, r2]
 800d99c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d99e:	7bc2      	ldrb	r2, [r0, #15]
 800d9a0:	7ac1      	ldrb	r1, [r0, #11]
 800d9a2:	5c59      	ldrb	r1, [r3, r1]
 800d9a4:	73c1      	strb	r1, [r0, #15]
 800d9a6:	79c1      	ldrb	r1, [r0, #7]
 800d9a8:	5c59      	ldrb	r1, [r3, r1]
 800d9aa:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d9ac:	78c1      	ldrb	r1, [r0, #3]
 800d9ae:	5c59      	ldrb	r1, [r3, r1]
 800d9b0:	71c1      	strb	r1, [r0, #7]
 800d9b2:	5c9b      	ldrb	r3, [r3, r2]
 800d9b4:	70c3      	strb	r3, [r0, #3]
}
 800d9b6:	4770      	bx	lr
 800d9b8:	08011be8 	.word	0x08011be8

0800d9bc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	4604      	mov	r4, r0
    block_copy(st, dt);
 800d9c4:	4601      	mov	r1, r0
 800d9c6:	4668      	mov	r0, sp
 800d9c8:	f7ff ff11 	bl	800d7ee <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d9cc:	f89d c000 	ldrb.w	ip, [sp]
 800d9d0:	4b68      	ldr	r3, [pc, #416]	; (800db74 <mix_sub_columns+0x1b8>)
 800d9d2:	f813 000c 	ldrb.w	r0, [r3, ip]
 800d9d6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d9da:	4a67      	ldr	r2, [pc, #412]	; (800db78 <mix_sub_columns+0x1bc>)
 800d9dc:	f812 9008 	ldrb.w	r9, [r2, r8]
 800d9e0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800d9e4:	4965      	ldr	r1, [pc, #404]	; (800db7c <mix_sub_columns+0x1c0>)
 800d9e6:	f811 500e 	ldrb.w	r5, [r1, lr]
 800d9ea:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800d9ee:	5dce      	ldrb	r6, [r1, r7]
 800d9f0:	ea80 0009 	eor.w	r0, r0, r9
 800d9f4:	4068      	eors	r0, r5
 800d9f6:	4070      	eors	r0, r6
 800d9f8:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d9fa:	f811 000c 	ldrb.w	r0, [r1, ip]
 800d9fe:	f813 a008 	ldrb.w	sl, [r3, r8]
 800da02:	f812 900e 	ldrb.w	r9, [r2, lr]
 800da06:	ea80 0a0a 	eor.w	sl, r0, sl
 800da0a:	ea89 090a 	eor.w	r9, r9, sl
 800da0e:	ea86 0609 	eor.w	r6, r6, r9
 800da12:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800da14:	f811 8008 	ldrb.w	r8, [r1, r8]
 800da18:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800da1c:	5dd6      	ldrb	r6, [r2, r7]
 800da1e:	ea80 0008 	eor.w	r0, r0, r8
 800da22:	ea8e 0000 	eor.w	r0, lr, r0
 800da26:	4070      	eors	r0, r6
 800da28:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800da2a:	f812 600c 	ldrb.w	r6, [r2, ip]
 800da2e:	5dd8      	ldrb	r0, [r3, r7]
 800da30:	ea86 0608 	eor.w	r6, r6, r8
 800da34:	4075      	eors	r5, r6
 800da36:	4045      	eors	r5, r0
 800da38:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800da3a:	f89d c004 	ldrb.w	ip, [sp, #4]
 800da3e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800da42:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800da46:	f812 9008 	ldrb.w	r9, [r2, r8]
 800da4a:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800da4e:	f811 500e 	ldrb.w	r5, [r1, lr]
 800da52:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800da56:	5dce      	ldrb	r6, [r1, r7]
 800da58:	ea80 0009 	eor.w	r0, r0, r9
 800da5c:	4068      	eors	r0, r5
 800da5e:	4070      	eors	r0, r6
 800da60:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800da62:	f811 000c 	ldrb.w	r0, [r1, ip]
 800da66:	f813 a008 	ldrb.w	sl, [r3, r8]
 800da6a:	f812 900e 	ldrb.w	r9, [r2, lr]
 800da6e:	ea80 0a0a 	eor.w	sl, r0, sl
 800da72:	ea89 090a 	eor.w	r9, r9, sl
 800da76:	ea86 0609 	eor.w	r6, r6, r9
 800da7a:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800da7c:	f811 8008 	ldrb.w	r8, [r1, r8]
 800da80:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800da84:	5dd6      	ldrb	r6, [r2, r7]
 800da86:	ea80 0008 	eor.w	r0, r0, r8
 800da8a:	ea8e 0000 	eor.w	r0, lr, r0
 800da8e:	4070      	eors	r0, r6
 800da90:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800da92:	f812 600c 	ldrb.w	r6, [r2, ip]
 800da96:	5dd8      	ldrb	r0, [r3, r7]
 800da98:	ea86 0608 	eor.w	r6, r6, r8
 800da9c:	4075      	eors	r5, r6
 800da9e:	4045      	eors	r5, r0
 800daa0:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800daa2:	f89d c008 	ldrb.w	ip, [sp, #8]
 800daa6:	f813 000c 	ldrb.w	r0, [r3, ip]
 800daaa:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800daae:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dab2:	f89d e002 	ldrb.w	lr, [sp, #2]
 800dab6:	f811 500e 	ldrb.w	r5, [r1, lr]
 800daba:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800dabe:	5dce      	ldrb	r6, [r1, r7]
 800dac0:	ea80 0009 	eor.w	r0, r0, r9
 800dac4:	4068      	eors	r0, r5
 800dac6:	4070      	eors	r0, r6
 800dac8:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800daca:	f811 000c 	ldrb.w	r0, [r1, ip]
 800dace:	f813 a008 	ldrb.w	sl, [r3, r8]
 800dad2:	f812 900e 	ldrb.w	r9, [r2, lr]
 800dad6:	ea80 0a0a 	eor.w	sl, r0, sl
 800dada:	ea89 090a 	eor.w	r9, r9, sl
 800dade:	ea86 0609 	eor.w	r6, r6, r9
 800dae2:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800dae4:	f811 8008 	ldrb.w	r8, [r1, r8]
 800dae8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800daec:	5dd6      	ldrb	r6, [r2, r7]
 800daee:	ea80 0008 	eor.w	r0, r0, r8
 800daf2:	ea8e 0000 	eor.w	r0, lr, r0
 800daf6:	4070      	eors	r0, r6
 800daf8:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800dafa:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dafe:	5dd8      	ldrb	r0, [r3, r7]
 800db00:	ea86 0608 	eor.w	r6, r6, r8
 800db04:	4075      	eors	r5, r6
 800db06:	4045      	eors	r5, r0
 800db08:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800db0a:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800db0e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800db12:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800db16:	f812 9008 	ldrb.w	r9, [r2, r8]
 800db1a:	f89d e006 	ldrb.w	lr, [sp, #6]
 800db1e:	f811 500e 	ldrb.w	r5, [r1, lr]
 800db22:	f89d 700b 	ldrb.w	r7, [sp, #11]
 800db26:	5dce      	ldrb	r6, [r1, r7]
 800db28:	ea80 0009 	eor.w	r0, r0, r9
 800db2c:	4068      	eors	r0, r5
 800db2e:	4070      	eors	r0, r6
 800db30:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800db32:	f811 000c 	ldrb.w	r0, [r1, ip]
 800db36:	f813 a008 	ldrb.w	sl, [r3, r8]
 800db3a:	f812 900e 	ldrb.w	r9, [r2, lr]
 800db3e:	ea80 0a0a 	eor.w	sl, r0, sl
 800db42:	ea89 090a 	eor.w	r9, r9, sl
 800db46:	ea86 0609 	eor.w	r6, r6, r9
 800db4a:	7366      	strb	r6, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800db4c:	f811 1008 	ldrb.w	r1, [r1, r8]
 800db50:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800db54:	5dd6      	ldrb	r6, [r2, r7]
 800db56:	4048      	eors	r0, r1
 800db58:	ea8e 0000 	eor.w	r0, lr, r0
 800db5c:	4070      	eors	r0, r6
 800db5e:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800db60:	f812 200c 	ldrb.w	r2, [r2, ip]
 800db64:	5ddb      	ldrb	r3, [r3, r7]
 800db66:	4051      	eors	r1, r2
 800db68:	404d      	eors	r5, r1
 800db6a:	405d      	eors	r5, r3
 800db6c:	73e5      	strb	r5, [r4, #15]
  }
 800db6e:	b004      	add	sp, #16
 800db70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db74:	080119e8 	.word	0x080119e8
 800db78:	08011ae8 	.word	0x08011ae8
 800db7c:	08011be8 	.word	0x08011be8

0800db80 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800db80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db84:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800db86:	f1a1 0310 	sub.w	r3, r1, #16
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	2a10      	cmp	r2, #16
 800db8e:	d807      	bhi.n	800dba0 <lorawan_aes_set_key+0x20>
 800db90:	460d      	mov	r5, r1
 800db92:	2301      	movs	r3, #1
 800db94:	4093      	lsls	r3, r2
 800db96:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800db9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db9e:	b92b      	cbnz	r3, 800dbac <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800dba0:	2300      	movs	r3, #0
 800dba2:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800dba6:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800dba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800dbac:	460a      	mov	r2, r1
 800dbae:	4601      	mov	r1, r0
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f7ff fe3d 	bl	800d830 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800dbb6:	f105 031c 	add.w	r3, r5, #28
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	b2df      	uxtb	r7, r3
    ctx->rnd = (hi >> 4) - 1;
 800dbc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800dbc4:	3b01      	subs	r3, #1
 800dbc6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dbca:	462b      	mov	r3, r5
 800dbcc:	2601      	movs	r6, #1
 800dbce:	e028      	b.n	800dc22 <lorawan_aes_set_key+0xa2>
        else if( keylen > 24 && cc % keylen == 16 )
 800dbd0:	2d18      	cmp	r5, #24
 800dbd2:	d901      	bls.n	800dbd8 <lorawan_aes_set_key+0x58>
 800dbd4:	2a10      	cmp	r2, #16
 800dbd6:	d04f      	beq.n	800dc78 <lorawan_aes_set_key+0xf8>
        tt = cc - keylen;
 800dbd8:	1b5a      	subs	r2, r3, r5
 800dbda:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800dbdc:	f814 9002 	ldrb.w	r9, [r4, r2]
 800dbe0:	ea89 0808 	eor.w	r8, r9, r8
 800dbe4:	f804 8001 	strb.w	r8, [r4, r1]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800dbe8:	f102 0801 	add.w	r8, r2, #1
 800dbec:	f814 8008 	ldrb.w	r8, [r4, r8]
 800dbf0:	f101 0901 	add.w	r9, r1, #1
 800dbf4:	ea88 0e0e 	eor.w	lr, r8, lr
 800dbf8:	f804 e009 	strb.w	lr, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800dbfc:	f102 0e02 	add.w	lr, r2, #2
 800dc00:	f814 e00e 	ldrb.w	lr, [r4, lr]
 800dc04:	f101 0802 	add.w	r8, r1, #2
 800dc08:	ea8e 0c0c 	eor.w	ip, lr, ip
 800dc0c:	f804 c008 	strb.w	ip, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800dc10:	3203      	adds	r2, #3
 800dc12:	f814 c002 	ldrb.w	ip, [r4, r2]
 800dc16:	1cca      	adds	r2, r1, #3
 800dc18:	ea8c 0000 	eor.w	r0, ip, r0
 800dc1c:	54a0      	strb	r0, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dc1e:	3304      	adds	r3, #4
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	42bb      	cmp	r3, r7
 800dc24:	d231      	bcs.n	800dc8a <lorawan_aes_set_key+0x10a>
        t0 = ctx->ksch[cc - 4];
 800dc26:	4619      	mov	r1, r3
 800dc28:	1f1a      	subs	r2, r3, #4
 800dc2a:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800dc2e:	1eda      	subs	r2, r3, #3
 800dc30:	f814 e002 	ldrb.w	lr, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800dc34:	1e9a      	subs	r2, r3, #2
 800dc36:	f814 c002 	ldrb.w	ip, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800dc3a:	1e5a      	subs	r2, r3, #1
 800dc3c:	5ca0      	ldrb	r0, [r4, r2]
        if( cc % keylen == 0 )
 800dc3e:	fbb3 f2f5 	udiv	r2, r3, r5
 800dc42:	fb05 3212 	mls	r2, r5, r2, r3
 800dc46:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800dc4a:	d1c1      	bne.n	800dbd0 <lorawan_aes_set_key+0x50>
            t0 = s_box(t1) ^ rc;
 800dc4c:	4a10      	ldr	r2, [pc, #64]	; (800dc90 <lorawan_aes_set_key+0x110>)
 800dc4e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800dc52:	ea89 0906 	eor.w	r9, r9, r6
            t1 = s_box(t2);
 800dc56:	f812 e00c 	ldrb.w	lr, [r2, ip]
            t2 = s_box(t3);
 800dc5a:	f812 c000 	ldrb.w	ip, [r2, r0]
            t3 = s_box(tt);
 800dc5e:	f812 0008 	ldrb.w	r0, [r2, r8]
            rc = f2(rc);
 800dc62:	09f2      	lsrs	r2, r6, #7
 800dc64:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800dc68:	4442      	add	r2, r8
 800dc6a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800dc6e:	ea82 0646 	eor.w	r6, r2, r6, lsl #1
 800dc72:	b2f6      	uxtb	r6, r6
            t0 = s_box(t1) ^ rc;
 800dc74:	46c8      	mov	r8, r9
 800dc76:	e7af      	b.n	800dbd8 <lorawan_aes_set_key+0x58>
            t0 = s_box(t0);
 800dc78:	4a05      	ldr	r2, [pc, #20]	; (800dc90 <lorawan_aes_set_key+0x110>)
 800dc7a:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800dc7e:	f812 e00e 	ldrb.w	lr, [r2, lr]
            t2 = s_box(t2);
 800dc82:	f812 c00c 	ldrb.w	ip, [r2, ip]
            t3 = s_box(t3);
 800dc86:	5c10      	ldrb	r0, [r2, r0]
 800dc88:	e7a6      	b.n	800dbd8 <lorawan_aes_set_key+0x58>
    return 0;
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	e78c      	b.n	800dba8 <lorawan_aes_set_key+0x28>
 800dc8e:	bf00      	nop
 800dc90:	08011be8 	.word	0x08011be8

0800dc94 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800dc94:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800dc98:	b323      	cbz	r3, 800dce4 <lorawan_aes_encrypt+0x50>
{
 800dc9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc9c:	b085      	sub	sp, #20
 800dc9e:	460f      	mov	r7, r1
 800dca0:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800dca2:	4616      	mov	r6, r2
 800dca4:	4601      	mov	r1, r0
 800dca6:	4668      	mov	r0, sp
 800dca8:	f7ff fe0d 	bl	800d8c6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800dcac:	2401      	movs	r4, #1
 800dcae:	e009      	b.n	800dcc4 <lorawan_aes_encrypt+0x30>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800dcb0:	4668      	mov	r0, sp
 800dcb2:	f7ff fe83 	bl	800d9bc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800dcb6:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 800dcba:	4668      	mov	r0, sp
 800dcbc:	f7ff fe46 	bl	800d94c <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800dcc0:	3401      	adds	r4, #1
 800dcc2:	b2e4      	uxtb	r4, r4
 800dcc4:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800dcc8:	42a3      	cmp	r3, r4
 800dcca:	d8f1      	bhi.n	800dcb0 <lorawan_aes_encrypt+0x1c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800dccc:	4668      	mov	r0, sp
 800dcce:	f7ff fe41 	bl	800d954 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800dcd2:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800dcd6:	4669      	mov	r1, sp
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7ff fdf4 	bl	800d8c6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800dcde:	2000      	movs	r0, #0
}
 800dce0:	b005      	add	sp, #20
 800dce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( uint8_t )-1;
 800dce4:	20ff      	movs	r0, #255	; 0xff
}
 800dce6:	4770      	bx	lr

0800dce8 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dce8:	2300      	movs	r3, #0
 800dcea:	2b09      	cmp	r3, #9
 800dcec:	d816      	bhi.n	800dd1c <GetKeyByID+0x34>
{
 800dcee:	b430      	push	{r4, r5}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dcf0:	4a0b      	ldr	r2, [pc, #44]	; (800dd20 <GetKeyByID+0x38>)
 800dcf2:	6814      	ldr	r4, [r2, #0]
 800dcf4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800dcf8:	4422      	add	r2, r4
 800dcfa:	7c12      	ldrb	r2, [r2, #16]
 800dcfc:	4282      	cmp	r2, r0
 800dcfe:	d006      	beq.n	800dd0e <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dd00:	3301      	adds	r3, #1
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b09      	cmp	r3, #9
 800dd06:	d9f3      	bls.n	800dcf0 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd08:	2003      	movs	r0, #3
}
 800dd0a:	bc30      	pop	{r4, r5}
 800dd0c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800dd0e:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 800dd12:	3510      	adds	r5, #16
 800dd14:	442c      	add	r4, r5
 800dd16:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dd18:	2000      	movs	r0, #0
 800dd1a:	e7f6      	b.n	800dd0a <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd1c:	2003      	movs	r0, #3
}
 800dd1e:	4770      	bx	lr
 800dd20:	20001040 	.word	0x20001040

0800dd24 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800dd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd28:	b0cc      	sub	sp, #304	; 0x130
 800dd2a:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800dd2c:	b3a9      	cbz	r1, 800dd9a <ComputeCmac+0x76>
 800dd2e:	4605      	mov	r5, r0
 800dd30:	4617      	mov	r7, r2
 800dd32:	461c      	mov	r4, r3
 800dd34:	4688      	mov	r8, r1
 800dd36:	b396      	cbz	r6, 800dd9e <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800dd38:	a802      	add	r0, sp, #8
 800dd3a:	f7ff fc07 	bl	800d54c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800dd3e:	a901      	add	r1, sp, #4
 800dd40:	4620      	mov	r0, r4
 800dd42:	f7ff ffd1 	bl	800dce8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800dd46:	4604      	mov	r4, r0
 800dd48:	b118      	cbz	r0, 800dd52 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	b04c      	add	sp, #304	; 0x130
 800dd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800dd52:	9901      	ldr	r1, [sp, #4]
 800dd54:	3101      	adds	r1, #1
 800dd56:	a802      	add	r0, sp, #8
 800dd58:	f7ff fc07 	bl	800d56a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800dd5c:	b125      	cbz	r5, 800dd68 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800dd5e:	2210      	movs	r2, #16
 800dd60:	4629      	mov	r1, r5
 800dd62:	a802      	add	r0, sp, #8
 800dd64:	f7ff fc08 	bl	800d578 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800dd68:	463a      	mov	r2, r7
 800dd6a:	4641      	mov	r1, r8
 800dd6c:	a802      	add	r0, sp, #8
 800dd6e:	f7ff fc03 	bl	800d578 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800dd72:	a902      	add	r1, sp, #8
 800dd74:	a848      	add	r0, sp, #288	; 0x120
 800dd76:	f7ff fc71 	bl	800d65c <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dd7a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800dd7e:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800dd82:	041b      	lsls	r3, r3, #16
 800dd84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dd88:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800dd8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800dd90:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800dd94:	4313      	orrs	r3, r2
 800dd96:	6033      	str	r3, [r6, #0]
 800dd98:	e7d7      	b.n	800dd4a <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800dd9a:	2402      	movs	r4, #2
 800dd9c:	e7d5      	b.n	800dd4a <ComputeCmac+0x26>
 800dd9e:	2402      	movs	r4, #2
 800dda0:	e7d3      	b.n	800dd4a <ComputeCmac+0x26>
	...

0800dda4 <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dda4:	2300      	movs	r3, #0
 800dda6:	2b09      	cmp	r3, #9
 800dda8:	d816      	bhi.n	800ddd8 <SecureElementGetKeyByID+0x34>
{
 800ddaa:	b430      	push	{r4, r5}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ddac:	4a0b      	ldr	r2, [pc, #44]	; (800dddc <SecureElementGetKeyByID+0x38>)
 800ddae:	6814      	ldr	r4, [r2, #0]
 800ddb0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ddb4:	4422      	add	r2, r4
 800ddb6:	7c12      	ldrb	r2, [r2, #16]
 800ddb8:	4282      	cmp	r2, r0
 800ddba:	d006      	beq.n	800ddca <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	2b09      	cmp	r3, #9
 800ddc2:	d9f3      	bls.n	800ddac <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ddc4:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ddc6:	bc30      	pop	{r4, r5}
 800ddc8:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800ddca:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 800ddce:	3510      	adds	r5, #16
 800ddd0:	442c      	add	r4, r5
 800ddd2:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	e7f6      	b.n	800ddc6 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ddd8:	2003      	movs	r0, #3
}
 800ddda:	4770      	bx	lr
 800dddc:	20001040 	.word	0x20001040

0800dde0 <PrintKey>:
{
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	b095      	sub	sp, #84	; 0x54
 800dde6:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800dde8:	a913      	add	r1, sp, #76	; 0x4c
 800ddea:	f7ff ffdb 	bl	800dda4 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d154      	bne.n	800de9c <PrintKey+0xbc>
        if (key == APP_KEY)
 800ddf2:	b1b4      	cbz	r4, 800de22 <PrintKey+0x42>
        else if (key == NWK_KEY)
 800ddf4:	2c01      	cmp	r4, #1
 800ddf6:	d054      	beq.n	800dea2 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800ddf8:	2c03      	cmp	r4, #3
 800ddfa:	d059      	beq.n	800deb0 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800ddfc:	2c02      	cmp	r4, #2
 800ddfe:	d05e      	beq.n	800debe <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800de00:	2c04      	cmp	r4, #4
 800de02:	d063      	beq.n	800decc <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800de04:	2c7f      	cmp	r4, #127	; 0x7f
 800de06:	d068      	beq.n	800deda <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800de08:	2c80      	cmp	r4, #128	; 0x80
 800de0a:	d06d      	beq.n	800dee8 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800de0c:	2c81      	cmp	r4, #129	; 0x81
 800de0e:	d072      	beq.n	800def6 <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800de10:	2c82      	cmp	r4, #130	; 0x82
 800de12:	d10c      	bne.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800de14:	4b3b      	ldr	r3, [pc, #236]	; (800df04 <PrintKey+0x124>)
 800de16:	2200      	movs	r2, #0
 800de18:	4611      	mov	r1, r2
 800de1a:	2002      	movs	r0, #2
 800de1c:	f002 fbf0 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800de20:	e005      	b.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800de22:	4b39      	ldr	r3, [pc, #228]	; (800df08 <PrintKey+0x128>)
 800de24:	2200      	movs	r2, #0
 800de26:	4611      	mov	r1, r2
 800de28:	2002      	movs	r0, #2
 800de2a:	f002 fbe9 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800de2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de30:	785a      	ldrb	r2, [r3, #1]
 800de32:	9210      	str	r2, [sp, #64]	; 0x40
 800de34:	7899      	ldrb	r1, [r3, #2]
 800de36:	9111      	str	r1, [sp, #68]	; 0x44
 800de38:	78da      	ldrb	r2, [r3, #3]
 800de3a:	7919      	ldrb	r1, [r3, #4]
 800de3c:	7958      	ldrb	r0, [r3, #5]
 800de3e:	799c      	ldrb	r4, [r3, #6]
 800de40:	79dd      	ldrb	r5, [r3, #7]
 800de42:	7a1e      	ldrb	r6, [r3, #8]
 800de44:	7a5f      	ldrb	r7, [r3, #9]
 800de46:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800de4a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800de4e:	f893 800c 	ldrb.w	r8, [r3, #12]
 800de52:	f893 900d 	ldrb.w	r9, [r3, #13]
 800de56:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800de5a:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800de5e:	7c1b      	ldrb	r3, [r3, #16]
 800de60:	930f      	str	r3, [sp, #60]	; 0x3c
 800de62:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800de66:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800de6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800de6e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800de72:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800de76:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800de7a:	9708      	str	r7, [sp, #32]
 800de7c:	9607      	str	r6, [sp, #28]
 800de7e:	9506      	str	r5, [sp, #24]
 800de80:	9405      	str	r4, [sp, #20]
 800de82:	9004      	str	r0, [sp, #16]
 800de84:	9103      	str	r1, [sp, #12]
 800de86:	9202      	str	r2, [sp, #8]
 800de88:	9911      	ldr	r1, [sp, #68]	; 0x44
 800de8a:	9101      	str	r1, [sp, #4]
 800de8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de8e:	9200      	str	r2, [sp, #0]
 800de90:	4b1e      	ldr	r3, [pc, #120]	; (800df0c <PrintKey+0x12c>)
 800de92:	2200      	movs	r2, #0
 800de94:	4611      	mov	r1, r2
 800de96:	2002      	movs	r0, #2
 800de98:	f002 fbb2 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 800de9c:	b015      	add	sp, #84	; 0x54
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800dea2:	4b1b      	ldr	r3, [pc, #108]	; (800df10 <PrintKey+0x130>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	4611      	mov	r1, r2
 800dea8:	2002      	movs	r0, #2
 800deaa:	f002 fba9 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800deae:	e7be      	b.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800deb0:	4b18      	ldr	r3, [pc, #96]	; (800df14 <PrintKey+0x134>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	4611      	mov	r1, r2
 800deb6:	2002      	movs	r0, #2
 800deb8:	f002 fba2 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800debc:	e7b7      	b.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800debe:	4b16      	ldr	r3, [pc, #88]	; (800df18 <PrintKey+0x138>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	4611      	mov	r1, r2
 800dec4:	2002      	movs	r0, #2
 800dec6:	f002 fb9b 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800deca:	e7b0      	b.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800decc:	4b13      	ldr	r3, [pc, #76]	; (800df1c <PrintKey+0x13c>)
 800dece:	2200      	movs	r2, #0
 800ded0:	4611      	mov	r1, r2
 800ded2:	2002      	movs	r0, #2
 800ded4:	f002 fb94 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800ded8:	e7a9      	b.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800deda:	4b11      	ldr	r3, [pc, #68]	; (800df20 <PrintKey+0x140>)
 800dedc:	2200      	movs	r2, #0
 800dede:	4611      	mov	r1, r2
 800dee0:	2002      	movs	r0, #2
 800dee2:	f002 fb8d 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800dee6:	e7a2      	b.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800dee8:	4b0e      	ldr	r3, [pc, #56]	; (800df24 <PrintKey+0x144>)
 800deea:	2200      	movs	r2, #0
 800deec:	4611      	mov	r1, r2
 800deee:	2002      	movs	r0, #2
 800def0:	f002 fb86 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800def4:	e79b      	b.n	800de2e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800def6:	4b0c      	ldr	r3, [pc, #48]	; (800df28 <PrintKey+0x148>)
 800def8:	2200      	movs	r2, #0
 800defa:	4611      	mov	r1, r2
 800defc:	2002      	movs	r0, #2
 800defe:	f002 fb7f 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800df02:	e794      	b.n	800de2e <PrintKey+0x4e>
 800df04:	08011da8 	.word	0x08011da8
 800df08:	08011ce8 	.word	0x08011ce8
 800df0c:	08011dc0 	.word	0x08011dc0
 800df10:	08011d00 	.word	0x08011d00
 800df14:	08011d18 	.word	0x08011d18
 800df18:	08011d30 	.word	0x08011d30
 800df1c:	08011d48 	.word	0x08011d48
 800df20:	08011d60 	.word	0x08011d60
 800df24:	08011d78 	.word	0x08011d78
 800df28:	08011d90 	.word	0x08011d90

0800df2c <SecureElementInit>:
{
 800df2c:	b570      	push	{r4, r5, r6, lr}
 800df2e:	b0b0      	sub	sp, #192	; 0xc0
 800df30:	4606      	mov	r6, r0
    SecureElementNvmData_t seNvmInit =
 800df32:	22b8      	movs	r2, #184	; 0xb8
 800df34:	2100      	movs	r1, #0
 800df36:	a802      	add	r0, sp, #8
 800df38:	f003 f926 	bl	8011188 <memset>
 800df3c:	4a34      	ldr	r2, [pc, #208]	; (800e010 <SecureElementInit+0xe4>)
 800df3e:	466b      	mov	r3, sp
 800df40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df44:	e883 0003 	stmia.w	r3, {r0, r1}
 800df48:	4c32      	ldr	r4, [pc, #200]	; (800e014 <SecureElementInit+0xe8>)
 800df4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df4c:	f8cd 0011 	str.w	r0, [sp, #17]
 800df50:	f8cd 1015 	str.w	r1, [sp, #21]
 800df54:	f8cd 2019 	str.w	r2, [sp, #25]
 800df58:	f8cd 301d 	str.w	r3, [sp, #29]
 800df5c:	2301      	movs	r3, #1
 800df5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800df62:	4c2d      	ldr	r4, [pc, #180]	; (800e018 <SecureElementInit+0xec>)
 800df64:	4625      	mov	r5, r4
 800df66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df68:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 800df6c:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 800df70:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800df74:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 800df78:	2302      	movs	r3, #2
 800df7a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 800df7e:	4625      	mov	r5, r4
 800df80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df82:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 800df86:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 800df8a:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 800df8e:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 800df92:	2303      	movs	r3, #3
 800df94:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 800df98:	ad11      	add	r5, sp, #68	; 0x44
 800df9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800dfa2:	2304      	movs	r3, #4
 800dfa4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800dfa8:	237f      	movs	r3, #127	; 0x7f
 800dfaa:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 800dfae:	2380      	movs	r3, #128	; 0x80
 800dfb0:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 800dfb4:	2381      	movs	r3, #129	; 0x81
 800dfb6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800dfba:	2382      	movs	r3, #130	; 0x82
 800dfbc:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800dfc0:	2383      	movs	r3, #131	; 0x83
 800dfc2:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    if( nvm == NULL )
 800dfc6:	b30e      	cbz	r6, 800e00c <SecureElementInit+0xe0>
    SeNvm = nvm;
 800dfc8:	4b14      	ldr	r3, [pc, #80]	; (800e01c <SecureElementInit+0xf0>)
 800dfca:	601e      	str	r6, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800dfcc:	22c0      	movs	r2, #192	; 0xc0
 800dfce:	4669      	mov	r1, sp
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f000 f98c 	bl	800e2ee <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800dfd6:	4b12      	ldr	r3, [pc, #72]	; (800e020 <SecureElementInit+0xf4>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	4611      	mov	r1, r2
 800dfdc:	2002      	movs	r0, #2
 800dfde:	f002 fb0f 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	f7ff fefc 	bl	800dde0 <PrintKey>
    PrintKey(NWK_KEY);
 800dfe8:	2001      	movs	r0, #1
 800dfea:	f7ff fef9 	bl	800dde0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800dfee:	4b0d      	ldr	r3, [pc, #52]	; (800e024 <SecureElementInit+0xf8>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	4611      	mov	r1, r2
 800dff4:	2002      	movs	r0, #2
 800dff6:	f002 fb03 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800dffa:	2003      	movs	r0, #3
 800dffc:	f7ff fef0 	bl	800dde0 <PrintKey>
    PrintKey(NWK_S_KEY);
 800e000:	2002      	movs	r0, #2
 800e002:	f7ff feed 	bl	800dde0 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 800e006:	2000      	movs	r0, #0
}
 800e008:	b030      	add	sp, #192	; 0xc0
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e00c:	2002      	movs	r0, #2
 800e00e:	e7fb      	b.n	800e008 <SecureElementInit+0xdc>
 800e010:	08011e44 	.word	0x08011e44
 800e014:	08011e50 	.word	0x08011e50
 800e018:	08011e64 	.word	0x08011e64
 800e01c:	20001040 	.word	0x20001040
 800e020:	08011e14 	.word	0x08011e14
 800e024:	08011e2c 	.word	0x08011e2c

0800e028 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800e028:	2b7e      	cmp	r3, #126	; 0x7e
 800e02a:	d807      	bhi.n	800e03c <SecureElementComputeAesCmac+0x14>
{
 800e02c:	b510      	push	{r4, lr}
 800e02e:	b082      	sub	sp, #8
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e030:	9c04      	ldr	r4, [sp, #16]
 800e032:	9400      	str	r4, [sp, #0]
 800e034:	f7ff fe76 	bl	800dd24 <ComputeCmac>
}
 800e038:	b002      	add	sp, #8
 800e03a:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e03c:	2003      	movs	r0, #3
}
 800e03e:	4770      	bx	lr

0800e040 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800e040:	b190      	cbz	r0, 800e068 <SecureElementVerifyAesCmac+0x28>
{
 800e042:	b530      	push	{r4, r5, lr}
 800e044:	b085      	sub	sp, #20
 800e046:	460c      	mov	r4, r1
 800e048:	4615      	mov	r5, r2
 800e04a:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800e04c:	2000      	movs	r0, #0
 800e04e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e050:	aa03      	add	r2, sp, #12
 800e052:	9200      	str	r2, [sp, #0]
 800e054:	4622      	mov	r2, r4
 800e056:	f7ff fe65 	bl	800dd24 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e05a:	b918      	cbnz	r0, 800e064 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800e05c:	9b03      	ldr	r3, [sp, #12]
 800e05e:	42ab      	cmp	r3, r5
 800e060:	d000      	beq.n	800e064 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e062:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800e064:	b005      	add	sp, #20
 800e066:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e068:	2002      	movs	r0, #2
}
 800e06a:	4770      	bx	lr

0800e06c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800e06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e070:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800e072:	b350      	cbz	r0, 800e0ca <SecureElementAesEncrypt+0x5e>
 800e074:	460c      	mov	r4, r1
 800e076:	4615      	mov	r5, r2
 800e078:	461e      	mov	r6, r3
 800e07a:	4607      	mov	r7, r0
 800e07c:	b343      	cbz	r3, 800e0d0 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800e07e:	f011 0f0f 	tst.w	r1, #15
 800e082:	d128      	bne.n	800e0d6 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e084:	22f0      	movs	r2, #240	; 0xf0
 800e086:	2100      	movs	r1, #0
 800e088:	a801      	add	r0, sp, #4
 800e08a:	f000 f946 	bl	800e31a <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e08e:	4669      	mov	r1, sp
 800e090:	4628      	mov	r0, r5
 800e092:	f7ff fe29 	bl	800dce8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e096:	4680      	mov	r8, r0
 800e098:	b118      	cbz	r0, 800e0a2 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800e09a:	4640      	mov	r0, r8
 800e09c:	b03e      	add	sp, #248	; 0xf8
 800e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800e0a2:	aa01      	add	r2, sp, #4
 800e0a4:	2110      	movs	r1, #16
 800e0a6:	9800      	ldr	r0, [sp, #0]
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	f7ff fd69 	bl	800db80 <lorawan_aes_set_key>
        uint8_t block = 0;
 800e0ae:	4645      	mov	r5, r8
        while( size != 0 )
 800e0b0:	e008      	b.n	800e0c4 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800e0b2:	aa01      	add	r2, sp, #4
 800e0b4:	1971      	adds	r1, r6, r5
 800e0b6:	1978      	adds	r0, r7, r5
 800e0b8:	f7ff fdec 	bl	800dc94 <lorawan_aes_encrypt>
            block = block + 16;
 800e0bc:	3510      	adds	r5, #16
 800e0be:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800e0c0:	3c10      	subs	r4, #16
 800e0c2:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	d1f4      	bne.n	800e0b2 <SecureElementAesEncrypt+0x46>
 800e0c8:	e7e7      	b.n	800e09a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800e0ca:	f04f 0802 	mov.w	r8, #2
 800e0ce:	e7e4      	b.n	800e09a <SecureElementAesEncrypt+0x2e>
 800e0d0:	f04f 0802 	mov.w	r8, #2
 800e0d4:	e7e1      	b.n	800e09a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e0d6:	f04f 0805 	mov.w	r8, #5
 800e0da:	e7de      	b.n	800e09a <SecureElementAesEncrypt+0x2e>

0800e0dc <SecureElementSetKey>:
{
 800e0dc:	b530      	push	{r4, r5, lr}
 800e0de:	b085      	sub	sp, #20
    if( key == NULL )
 800e0e0:	2900      	cmp	r1, #0
 800e0e2:	d038      	beq.n	800e156 <SecureElementSetKey+0x7a>
 800e0e4:	460d      	mov	r5, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	2b09      	cmp	r3, #9
 800e0ea:	d830      	bhi.n	800e14e <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e0ec:	4a1b      	ldr	r2, [pc, #108]	; (800e15c <SecureElementSetKey+0x80>)
 800e0ee:	6811      	ldr	r1, [r2, #0]
 800e0f0:	461c      	mov	r4, r3
 800e0f2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e0f6:	440a      	add	r2, r1
 800e0f8:	7c12      	ldrb	r2, [r2, #16]
 800e0fa:	4282      	cmp	r2, r0
 800e0fc:	d002      	beq.n	800e104 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e0fe:	3301      	adds	r3, #1
 800e100:	b2db      	uxtb	r3, r3
 800e102:	e7f1      	b.n	800e0e8 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800e104:	2880      	cmp	r0, #128	; 0x80
 800e106:	d00a      	beq.n	800e11e <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e108:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e10c:	3310      	adds	r3, #16
 800e10e:	440b      	add	r3, r1
 800e110:	2210      	movs	r2, #16
 800e112:	4629      	mov	r1, r5
 800e114:	1c58      	adds	r0, r3, #1
 800e116:	f000 f8ea 	bl	800e2ee <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e11a:	2500      	movs	r5, #0
 800e11c:	e018      	b.n	800e150 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800e11e:	2300      	movs	r3, #0
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	9301      	str	r3, [sp, #4]
 800e124:	9302      	str	r3, [sp, #8]
 800e126:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800e128:	466b      	mov	r3, sp
 800e12a:	227f      	movs	r2, #127	; 0x7f
 800e12c:	2110      	movs	r1, #16
 800e12e:	4628      	mov	r0, r5
 800e130:	f7ff ff9c 	bl	800e06c <SecureElementAesEncrypt>
 800e134:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e136:	4b09      	ldr	r3, [pc, #36]	; (800e15c <SecureElementSetKey+0x80>)
 800e138:	6818      	ldr	r0, [r3, #0]
 800e13a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800e13e:	3410      	adds	r4, #16
 800e140:	4420      	add	r0, r4
 800e142:	2210      	movs	r2, #16
 800e144:	4669      	mov	r1, sp
 800e146:	3001      	adds	r0, #1
 800e148:	f000 f8d1 	bl	800e2ee <memcpy1>
                return retval;
 800e14c:	e000      	b.n	800e150 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e14e:	2503      	movs	r5, #3
}
 800e150:	4628      	mov	r0, r5
 800e152:	b005      	add	sp, #20
 800e154:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e156:	2502      	movs	r5, #2
 800e158:	e7fa      	b.n	800e150 <SecureElementSetKey+0x74>
 800e15a:	bf00      	nop
 800e15c:	20001040 	.word	0x20001040

0800e160 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800e160:	b1d0      	cbz	r0, 800e198 <SecureElementDeriveAndStoreKey+0x38>
{
 800e162:	b530      	push	{r4, r5, lr}
 800e164:	b085      	sub	sp, #20
 800e166:	4614      	mov	r4, r2
 800e168:	4605      	mov	r5, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800e16a:	2a7f      	cmp	r2, #127	; 0x7f
 800e16c:	d101      	bne.n	800e172 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e16e:	2904      	cmp	r1, #4
 800e170:	d114      	bne.n	800e19c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800e172:	2300      	movs	r3, #0
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	9301      	str	r3, [sp, #4]
 800e178:	9302      	str	r3, [sp, #8]
 800e17a:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800e17c:	466b      	mov	r3, sp
 800e17e:	460a      	mov	r2, r1
 800e180:	2110      	movs	r1, #16
 800e182:	4628      	mov	r0, r5
 800e184:	f7ff ff72 	bl	800e06c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e188:	b108      	cbz	r0, 800e18e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e18a:	b005      	add	sp, #20
 800e18c:	bd30      	pop	{r4, r5, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800e18e:	4669      	mov	r1, sp
 800e190:	4620      	mov	r0, r4
 800e192:	f7ff ffa3 	bl	800e0dc <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e196:	e7f8      	b.n	800e18a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800e198:	2002      	movs	r0, #2
}
 800e19a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e19c:	2003      	movs	r0, #3
 800e19e:	e7f4      	b.n	800e18a <SecureElementDeriveAndStoreKey+0x2a>

0800e1a0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800e1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e1a8:	9d07      	ldr	r5, [sp, #28]
 800e1aa:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e1ac:	b37b      	cbz	r3, 800e20e <SecureElementProcessJoinAccept+0x6e>
 800e1ae:	4698      	mov	r8, r3
 800e1b0:	b37d      	cbz	r5, 800e212 <SecureElementProcessJoinAccept+0x72>
 800e1b2:	b386      	cbz	r6, 800e216 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e1b4:	2c21      	cmp	r4, #33	; 0x21
 800e1b6:	d830      	bhi.n	800e21a <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e1b8:	b2a7      	uxth	r7, r4
 800e1ba:	463a      	mov	r2, r7
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f000 f895 	bl	800e2ee <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e1c4:	1e79      	subs	r1, r7, #1
 800e1c6:	1c6b      	adds	r3, r5, #1
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	b289      	uxth	r1, r1
 800e1cc:	eb08 0002 	add.w	r0, r8, r2
 800e1d0:	f7ff ff4c 	bl	800e06c <SecureElementAesEncrypt>
 800e1d4:	bb20      	cbnz	r0, 800e220 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e1d6:	7aeb      	ldrb	r3, [r5, #11]
 800e1d8:	09db      	lsrs	r3, r3, #7
 800e1da:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800e1dc:	442c      	add	r4, r5
 800e1de:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800e1e2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e1e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800e1ea:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e1ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800e1f2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e1f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800e1fa:	b99b      	cbnz	r3, 800e224 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e1fc:	1f39      	subs	r1, r7, #4
 800e1fe:	2301      	movs	r3, #1
 800e200:	b289      	uxth	r1, r1
 800e202:	4628      	mov	r0, r5
 800e204:	f7ff ff1c 	bl	800e040 <SecureElementVerifyAesCmac>
 800e208:	b140      	cbz	r0, 800e21c <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e20a:	2001      	movs	r0, #1
 800e20c:	e006      	b.n	800e21c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800e20e:	2002      	movs	r0, #2
 800e210:	e004      	b.n	800e21c <SecureElementProcessJoinAccept+0x7c>
 800e212:	2002      	movs	r0, #2
 800e214:	e002      	b.n	800e21c <SecureElementProcessJoinAccept+0x7c>
 800e216:	2002      	movs	r0, #2
 800e218:	e000      	b.n	800e21c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e21a:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e220:	2007      	movs	r0, #7
 800e222:	e7fb      	b.n	800e21c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e224:	2004      	movs	r0, #4
 800e226:	e7f9      	b.n	800e21c <SecureElementProcessJoinAccept+0x7c>

0800e228 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 800e228:	b138      	cbz	r0, 800e23a <SecureElementRandomNumber+0x12>
{
 800e22a:	b510      	push	{r4, lr}
 800e22c:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800e22e:	4b04      	ldr	r3, [pc, #16]	; (800e240 <SecureElementRandomNumber+0x18>)
 800e230:	695b      	ldr	r3, [r3, #20]
 800e232:	4798      	blx	r3
 800e234:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e236:	2000      	movs	r0, #0
}
 800e238:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e23a:	2002      	movs	r0, #2
}
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	08011ee8 	.word	0x08011ee8

0800e244 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800e244:	b140      	cbz	r0, 800e258 <SecureElementSetDevEui+0x14>
{
 800e246:	b508      	push	{r3, lr}
 800e248:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800e24a:	2208      	movs	r2, #8
 800e24c:	4b03      	ldr	r3, [pc, #12]	; (800e25c <SecureElementSetDevEui+0x18>)
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	f000 f84d 	bl	800e2ee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e254:	2000      	movs	r0, #0
}
 800e256:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e258:	2002      	movs	r0, #2
}
 800e25a:	4770      	bx	lr
 800e25c:	20001040 	.word	0x20001040

0800e260 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800e260:	4b01      	ldr	r3, [pc, #4]	; (800e268 <SecureElementGetDevEui+0x8>)
 800e262:	6818      	ldr	r0, [r3, #0]
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	20001040 	.word	0x20001040

0800e26c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800e26c:	b148      	cbz	r0, 800e282 <SecureElementSetJoinEui+0x16>
{
 800e26e:	b508      	push	{r3, lr}
 800e270:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800e272:	4b05      	ldr	r3, [pc, #20]	; (800e288 <SecureElementSetJoinEui+0x1c>)
 800e274:	6818      	ldr	r0, [r3, #0]
 800e276:	2208      	movs	r2, #8
 800e278:	4410      	add	r0, r2
 800e27a:	f000 f838 	bl	800e2ee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e27e:	2000      	movs	r0, #0
}
 800e280:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e282:	2002      	movs	r0, #2
}
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	20001040 	.word	0x20001040

0800e28c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800e28c:	4b01      	ldr	r3, [pc, #4]	; (800e294 <SecureElementGetJoinEui+0x8>)
 800e28e:	6818      	ldr	r0, [r3, #0]
}
 800e290:	3008      	adds	r0, #8
 800e292:	4770      	bx	lr
 800e294:	20001040 	.word	0x20001040

0800e298 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e298:	4b09      	ldr	r3, [pc, #36]	; (800e2c0 <rand1+0x28>)
 800e29a:	6818      	ldr	r0, [r3, #0]
 800e29c:	4909      	ldr	r1, [pc, #36]	; (800e2c4 <rand1+0x2c>)
 800e29e:	f243 0239 	movw	r2, #12345	; 0x3039
 800e2a2:	fb01 2000 	mla	r0, r1, r0, r2
 800e2a6:	6018      	str	r0, [r3, #0]
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	fba3 2300 	umull	r2, r3, r3, r0
 800e2ae:	1ac2      	subs	r2, r0, r3
 800e2b0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e2b4:	0f9b      	lsrs	r3, r3, #30
 800e2b6:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800e2ba:	1ac0      	subs	r0, r0, r3
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	200000c8 	.word	0x200000c8
 800e2c4:	41c64e6d 	.word	0x41c64e6d

0800e2c8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800e2c8:	4b01      	ldr	r3, [pc, #4]	; (800e2d0 <srand1+0x8>)
 800e2ca:	6018      	str	r0, [r3, #0]
}
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	200000c8 	.word	0x200000c8

0800e2d4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e2da:	f7ff ffdd 	bl	800e298 <rand1>
 800e2de:	1b61      	subs	r1, r4, r5
 800e2e0:	3101      	adds	r1, #1
 800e2e2:	fb90 f3f1 	sdiv	r3, r0, r1
 800e2e6:	fb01 0013 	mls	r0, r1, r3, r0
}
 800e2ea:	4428      	add	r0, r5
 800e2ec:	bd38      	pop	{r3, r4, r5, pc}

0800e2ee <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e2ee:	1e53      	subs	r3, r2, #1
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	b12a      	cbz	r2, 800e300 <memcpy1+0x12>
    {
        *dst++ = *src++;
 800e2f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2f8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	e7f6      	b.n	800e2ee <memcpy1>
    }
}
 800e300:	4770      	bx	lr

0800e302 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e302:	1e53      	subs	r3, r2, #1
 800e304:	4418      	add	r0, r3
    while( size-- )
 800e306:	1e53      	subs	r3, r2, #1
 800e308:	b29b      	uxth	r3, r3
 800e30a:	b12a      	cbz	r2, 800e318 <memcpyr+0x16>
    {
        *dst-- = *src++;
 800e30c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e310:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800e314:	461a      	mov	r2, r3
 800e316:	e7f6      	b.n	800e306 <memcpyr+0x4>
    }
}
 800e318:	4770      	bx	lr

0800e31a <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e31a:	1e53      	subs	r3, r2, #1
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	b11a      	cbz	r2, 800e328 <memset1+0xe>
    {
        *dst++ = value;
 800e320:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800e324:	461a      	mov	r2, r3
 800e326:	e7f8      	b.n	800e31a <memset1>
    }
}
 800e328:	4770      	bx	lr
	...

0800e32c <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800e32c:	b1d0      	cbz	r0, 800e364 <Crc32+0x38>
{
 800e32e:	b470      	push	{r4, r5, r6}
 800e330:	4606      	mov	r6, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800e332:	2500      	movs	r5, #0
    uint32_t crc = 0xFFFFFFFF;
 800e334:	f04f 30ff 	mov.w	r0, #4294967295
 800e338:	e00b      	b.n	800e352 <Crc32+0x26>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800e33a:	f340 0400 	sbfx	r4, r0, #0, #1
 800e33e:	4a0a      	ldr	r2, [pc, #40]	; (800e368 <Crc32+0x3c>)
 800e340:	4022      	ands	r2, r4
 800e342:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800e346:	3301      	adds	r3, #1
 800e348:	b29b      	uxth	r3, r3
 800e34a:	2b07      	cmp	r3, #7
 800e34c:	d9f5      	bls.n	800e33a <Crc32+0xe>
    for( uint16_t i = 0; i < length; ++i )
 800e34e:	3501      	adds	r5, #1
 800e350:	b2ad      	uxth	r5, r5
 800e352:	428d      	cmp	r5, r1
 800e354:	d203      	bcs.n	800e35e <Crc32+0x32>
        crc ^= ( uint32_t )buffer[i];
 800e356:	5d73      	ldrb	r3, [r6, r5]
 800e358:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800e35a:	2300      	movs	r3, #0
 800e35c:	e7f5      	b.n	800e34a <Crc32+0x1e>
        }
    }

    return ~crc;
 800e35e:	43c0      	mvns	r0, r0
}
 800e360:	bc70      	pop	{r4, r5, r6}
 800e362:	4770      	bx	lr
        return 0;
 800e364:	2000      	movs	r0, #0
}
 800e366:	4770      	bx	lr
 800e368:	edb88320 	.word	0xedb88320

0800e36c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800e36c:	2001      	movs	r0, #1
 800e36e:	4770      	bx	lr

0800e370 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800e370:	280a      	cmp	r0, #10
 800e372:	d807      	bhi.n	800e384 <RadioGetLoRaBandwidthInHz+0x14>
 800e374:	e8df f000 	tbb	[pc, r0]
 800e378:	17110b20 	.word	0x17110b20
 800e37c:	061e1c1a 	.word	0x061e1c1a
 800e380:	0e08      	.short	0x0e08
 800e382:	14          	.byte	0x14
 800e383:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e384:	2000      	movs	r0, #0
 800e386:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 800e388:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800e38c:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 800e38e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800e392:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 800e394:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800e398:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 800e39a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800e39e:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 800e3a0:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800e3a4:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 800e3a6:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800e3aa:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 800e3ac:	4804      	ldr	r0, [pc, #16]	; (800e3c0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800e3ae:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800e3b0:	4804      	ldr	r0, [pc, #16]	; (800e3c4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800e3b2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e3b4:	4804      	ldr	r0, [pc, #16]	; (800e3c8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800e3b6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800e3b8:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	0001e848 	.word	0x0001e848
 800e3c4:	0003d090 	.word	0x0003d090
 800e3c8:	0007a120 	.word	0x0007a120

0800e3cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e3cc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800e3d0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e3d2:	b953      	cbnz	r3, 800e3ea <RadioGetGfskTimeOnAirNumerator+0x1e>
 800e3d4:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800e3d6:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e3d8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e3da:	b141      	cbz	r1, 800e3ee <RadioGetGfskTimeOnAirNumerator+0x22>
 800e3dc:	2302      	movs	r3, #2
 800e3de:	f89d 0000 	ldrb.w	r0, [sp]
 800e3e2:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800e3e4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e3e8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	e7f3      	b.n	800e3d6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e7f5      	b.n	800e3de <RadioGetGfskTimeOnAirNumerator+0x12>

0800e3f2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e3f2:	b4f0      	push	{r4, r5, r6, r7}
 800e3f4:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800e3f8:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800e3fc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e3fe:	1f4d      	subs	r5, r1, #5
 800e400:	2d01      	cmp	r5, #1
 800e402:	d92d      	bls.n	800e460 <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e404:	b918      	cbnz	r0, 800e40e <RadioGetLoRaTimeOnAirNumerator+0x1c>
 800e406:	f1a1 050b 	sub.w	r5, r1, #11
 800e40a:	2d01      	cmp	r5, #1
 800e40c:	d930      	bls.n	800e470 <RadioGetLoRaTimeOnAirNumerator+0x7e>
 800e40e:	2801      	cmp	r0, #1
 800e410:	d02a      	beq.n	800e468 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 800e412:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e414:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800e418:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 800e41a:	b36c      	cbz	r4, 800e478 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800e41c:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e41e:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 800e420:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800e422:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800e426:	b34e      	cbz	r6, 800e47c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800e428:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 800e42a:	442c      	add	r4, r5

    if( datarate <= 6 )
 800e42c:	2906      	cmp	r1, #6
 800e42e:	d903      	bls.n	800e438 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800e430:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 800e432:	b10f      	cbz	r7, 800e438 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800e434:	1e88      	subs	r0, r1, #2
 800e436:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800e438:	2c00      	cmp	r4, #0
 800e43a:	db21      	blt.n	800e480 <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e43c:	4404      	add	r4, r0
 800e43e:	3c01      	subs	r4, #1
 800e440:	fb94 f4f0 	sdiv	r4, r4, r0
 800e444:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 800e448:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800e44c:	2906      	cmp	r1, #6
 800e44e:	d801      	bhi.n	800e454 <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 800e450:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e454:	0080      	lsls	r0, r0, #2
 800e456:	3001      	adds	r0, #1
 800e458:	3902      	subs	r1, #2
}
 800e45a:	4088      	lsls	r0, r1
 800e45c:	bcf0      	pop	{r4, r5, r6, r7}
 800e45e:	4770      	bx	lr
        if( preambleLen < 12 )
 800e460:	2b0b      	cmp	r3, #11
 800e462:	d8cf      	bhi.n	800e404 <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 800e464:	230c      	movs	r3, #12
 800e466:	e7cd      	b.n	800e404 <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e468:	290c      	cmp	r1, #12
 800e46a:	d003      	beq.n	800e474 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800e46c:	2700      	movs	r7, #0
 800e46e:	e7d1      	b.n	800e414 <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 800e470:	2701      	movs	r7, #1
 800e472:	e7cf      	b.n	800e414 <RadioGetLoRaTimeOnAirNumerator+0x22>
 800e474:	2701      	movs	r7, #1
 800e476:	e7cd      	b.n	800e414 <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 800e478:	2400      	movs	r4, #0
 800e47a:	e7d0      	b.n	800e41e <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 800e47c:	2414      	movs	r4, #20
 800e47e:	e7d4      	b.n	800e42a <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 800e480:	2400      	movs	r4, #0
 800e482:	e7db      	b.n	800e43c <RadioGetLoRaTimeOnAirNumerator+0x4a>

0800e484 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800e484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e486:	b085      	sub	sp, #20
 800e488:	460e      	mov	r6, r1
 800e48a:	4615      	mov	r5, r2
 800e48c:	4619      	mov	r1, r3
 800e48e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800e492:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800e496:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800e49a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800e49e:	b148      	cbz	r0, 800e4b4 <RadioTimeOnAir+0x30>
 800e4a0:	2801      	cmp	r0, #1
 800e4a2:	d012      	beq.n	800e4ca <RadioTimeOnAir+0x46>
 800e4a4:	2501      	movs	r5, #1
 800e4a6:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800e4a8:	1960      	adds	r0, r4, r5
 800e4aa:	3801      	subs	r0, #1
}
 800e4ac:	fbb0 f0f5 	udiv	r0, r0, r5
 800e4b0:	b005      	add	sp, #20
 800e4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e4b4:	f8cd c004 	str.w	ip, [sp, #4]
 800e4b8:	9700      	str	r7, [sp, #0]
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f7ff ff86 	bl	800e3cc <RadioGetGfskTimeOnAirNumerator>
 800e4c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e4c4:	fb04 f400 	mul.w	r4, r4, r0
        break;
 800e4c8:	e7ee      	b.n	800e4a8 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e4ca:	f8cd c008 	str.w	ip, [sp, #8]
 800e4ce:	9701      	str	r7, [sp, #4]
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	460a      	mov	r2, r1
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	4630      	mov	r0, r6
 800e4da:	f7ff ff8a 	bl	800e3f2 <RadioGetLoRaTimeOnAirNumerator>
 800e4de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e4e2:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e4e6:	4b03      	ldr	r3, [pc, #12]	; (800e4f4 <RadioTimeOnAir+0x70>)
 800e4e8:	5d98      	ldrb	r0, [r3, r6]
 800e4ea:	f7ff ff41 	bl	800e370 <RadioGetLoRaBandwidthInHz>
 800e4ee:	4605      	mov	r5, r0
        break;
 800e4f0:	e7da      	b.n	800e4a8 <RadioTimeOnAir+0x24>
 800e4f2:	bf00      	nop
 800e4f4:	08011ee4 	.word	0x08011ee4

0800e4f8 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800e4f8:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e4fa:	4b03      	ldr	r3, [pc, #12]	; (800e508 <RadioOnTxTimeoutProcess+0x10>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	b113      	cbz	r3, 800e506 <RadioOnTxTimeoutProcess+0xe>
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	b103      	cbz	r3, 800e506 <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 800e504:	4798      	blx	r3
    }
}
 800e506:	bd08      	pop	{r3, pc}
 800e508:	20001144 	.word	0x20001144

0800e50c <RadioOnTxTimeoutIrq>:
{
 800e50c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800e50e:	f7ff fff3 	bl	800e4f8 <RadioOnTxTimeoutProcess>
}
 800e512:	bd08      	pop	{r3, pc}

0800e514 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800e514:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e516:	4b03      	ldr	r3, [pc, #12]	; (800e524 <RadioOnRxTimeoutProcess+0x10>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	b113      	cbz	r3, 800e522 <RadioOnRxTimeoutProcess+0xe>
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	b103      	cbz	r3, 800e522 <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 800e520:	4798      	blx	r3
    }
}
 800e522:	bd08      	pop	{r3, pc}
 800e524:	20001144 	.word	0x20001144

0800e528 <RadioOnRxTimeoutIrq>:
{
 800e528:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800e52a:	f7ff fff3 	bl	800e514 <RadioOnRxTimeoutProcess>
}
 800e52e:	bd08      	pop	{r3, pc}

0800e530 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800e530:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 800e532:	2300      	movs	r3, #0
 800e534:	4616      	mov	r6, r2
 800e536:	429a      	cmp	r2, r3
 800e538:	dd06      	ble.n	800e548 <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800e53a:	5ccc      	ldrb	r4, [r1, r3]
 800e53c:	43e4      	mvns	r4, r4
 800e53e:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800e540:	2400      	movs	r4, #0
 800e542:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 800e544:	3301      	adds	r3, #1
 800e546:	e7f5      	b.n	800e534 <payload_integration+0x4>
    }

    for (i = 0; i < (size * 8); i++)
 800e548:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800e54a:	461f      	mov	r7, r3
 800e54c:	e013      	b.n	800e576 <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800e54e:	f103 0c07 	add.w	ip, r3, #7
 800e552:	e021      	b.n	800e598 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800e554:	fa5f fc8c 	uxtb.w	ip, ip
 800e558:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800e55c:	fa4c f505 	asr.w	r5, ip, r5
 800e560:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 800e564:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800e566:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 800e56a:	fa07 fc04 	lsl.w	ip, r7, r4
 800e56e:	5d44      	ldrb	r4, [r0, r5]
 800e570:	ea44 040c 	orr.w	r4, r4, ip
 800e574:	5544      	strb	r4, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 800e576:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 800e57a:	da23      	bge.n	800e5c4 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 800e57c:	425d      	negs	r5, r3
 800e57e:	f003 0407 	and.w	r4, r3, #7
 800e582:	f005 0507 	and.w	r5, r5, #7
 800e586:	bf58      	it	pl
 800e588:	426c      	negpl	r4, r5
 800e58a:	b2e5      	uxtb	r5, r4
 800e58c:	f1c5 0507 	rsb	r5, r5, #7
 800e590:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 800e592:	469c      	mov	ip, r3
 800e594:	2b00      	cmp	r3, #0
 800e596:	dbda      	blt.n	800e54e <payload_integration+0x1e>
 800e598:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800e59c:	3301      	adds	r3, #1
 800e59e:	f1d3 0e00 	rsbs	lr, r3, #0
 800e5a2:	f003 0407 	and.w	r4, r3, #7
 800e5a6:	f00e 0e07 	and.w	lr, lr, #7
 800e5aa:	bf58      	it	pl
 800e5ac:	f1ce 0400 	rsbpl	r4, lr, #0
 800e5b0:	b2e4      	uxtb	r4, r4
 800e5b2:	f1c4 0407 	rsb	r4, r4, #7
 800e5b6:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 800e5b8:	469e      	mov	lr, r3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	daca      	bge.n	800e554 <payload_integration+0x24>
 800e5be:	f103 0e07 	add.w	lr, r3, #7
 800e5c2:	e7c7      	b.n	800e554 <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e5c4:	01bb      	lsls	r3, r7, #6
 800e5c6:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 800e5ca:	b25b      	sxtb	r3, r3
 800e5cc:	b91f      	cbnz	r7, 800e5d6 <payload_integration+0xa6>
 800e5ce:	2120      	movs	r1, #32
 800e5d0:	430b      	orrs	r3, r1
 800e5d2:	5483      	strb	r3, [r0, r2]
}
 800e5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	e7fa      	b.n	800e5d0 <payload_integration+0xa0>
	...

0800e5dc <RadioSetMaxPayloadLength>:
{
 800e5dc:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800e5de:	2801      	cmp	r0, #1
 800e5e0:	d004      	beq.n	800e5ec <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800e5e2:	4b0a      	ldr	r3, [pc, #40]	; (800e60c <RadioSetMaxPayloadLength+0x30>)
 800e5e4:	7d5b      	ldrb	r3, [r3, #21]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d008      	beq.n	800e5fc <RadioSetMaxPayloadLength+0x20>
}
 800e5ea:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800e5ec:	4b08      	ldr	r3, [pc, #32]	; (800e610 <RadioSetMaxPayloadLength+0x34>)
 800e5ee:	7019      	strb	r1, [r3, #0]
 800e5f0:	4806      	ldr	r0, [pc, #24]	; (800e60c <RadioSetMaxPayloadLength+0x30>)
 800e5f2:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e5f4:	300e      	adds	r0, #14
 800e5f6:	f001 fd37 	bl	8010068 <SUBGRF_SetPacketParams>
 800e5fa:	e7f6      	b.n	800e5ea <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800e5fc:	4b04      	ldr	r3, [pc, #16]	; (800e610 <RadioSetMaxPayloadLength+0x34>)
 800e5fe:	7019      	strb	r1, [r3, #0]
 800e600:	4802      	ldr	r0, [pc, #8]	; (800e60c <RadioSetMaxPayloadLength+0x30>)
 800e602:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e604:	300e      	adds	r0, #14
 800e606:	f001 fd2f 	bl	8010068 <SUBGRF_SetPacketParams>
}
 800e60a:	e7ee      	b.n	800e5ea <RadioSetMaxPayloadLength+0xe>
 800e60c:	200019e0 	.word	0x200019e0
 800e610:	200000cc 	.word	0x200000cc

0800e614 <RadioRead>:
{
 800e614:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 800e616:	f001 fbdf 	bl	800fdd8 <SUBGRF_ReadRegister>
}
 800e61a:	bd08      	pop	{r3, pc}

0800e61c <RadioWrite>:
{
 800e61c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 800e61e:	f001 faeb 	bl	800fbf8 <SUBGRF_WriteRegister>
}
 800e622:	bd08      	pop	{r3, pc}

0800e624 <RadioTxCw>:
{
 800e624:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800e626:	f001 fe35 	bl	8010294 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800e62a:	2101      	movs	r1, #1
 800e62c:	f001 fe1e 	bl	801026c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800e630:	f001 f970 	bl	800f914 <SUBGRF_SetTxContinuousWave>
}
 800e634:	bd08      	pop	{r3, pc}
	...

0800e638 <RadioTxPrbs>:
{
 800e638:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800e63a:	2101      	movs	r1, #1
 800e63c:	4b07      	ldr	r3, [pc, #28]	; (800e65c <RadioTxPrbs+0x24>)
 800e63e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e642:	f001 fe13 	bl	801026c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800e646:	212d      	movs	r1, #45	; 0x2d
 800e648:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e64c:	f7ff ffe6 	bl	800e61c <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800e650:	f001 f967 	bl	800f922 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800e654:	4802      	ldr	r0, [pc, #8]	; (800e660 <RadioTxPrbs+0x28>)
 800e656:	f001 f8f9 	bl	800f84c <SUBGRF_SetTx>
}
 800e65a:	bd08      	pop	{r3, pc}
 800e65c:	200019e0 	.word	0x200019e0
 800e660:	000fffff 	.word	0x000fffff

0800e664 <RadioSetRxDutyCycle>:
{
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	4604      	mov	r4, r0
 800e668:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e66a:	2100      	movs	r1, #0
 800e66c:	4b04      	ldr	r3, [pc, #16]	; (800e680 <RadioSetRxDutyCycle+0x1c>)
 800e66e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e672:	f001 fdfb 	bl	801026c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800e676:	4629      	mov	r1, r5
 800e678:	4620      	mov	r0, r4
 800e67a:	f001 f91b 	bl	800f8b4 <SUBGRF_SetRxDutyCycle>
}
 800e67e:	bd38      	pop	{r3, r4, r5, pc}
 800e680:	200019e0 	.word	0x200019e0

0800e684 <RadioRxBoosted>:
{
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 800e688:	f001 feda 	bl	8010440 <RFW_Is_Init>
 800e68c:	2801      	cmp	r0, #1
 800e68e:	d014      	beq.n	800e6ba <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e690:	2300      	movs	r3, #0
 800e692:	461a      	mov	r2, r3
 800e694:	f240 2162 	movw	r1, #610	; 0x262
 800e698:	4608      	mov	r0, r1
 800e69a:	f001 f9ec 	bl	800fa76 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800e69e:	b97c      	cbnz	r4, 800e6c0 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e6a0:	4c0f      	ldr	r4, [pc, #60]	; (800e6e0 <RadioRxBoosted+0x5c>)
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800e6a8:	f001 fde0 	bl	801026c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800e6ac:	7863      	ldrb	r3, [r4, #1]
 800e6ae:	b183      	cbz	r3, 800e6d2 <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e6b0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e6b4:	f001 fab0 	bl	800fc18 <SUBGRF_SetRxBoosted>
}
 800e6b8:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 800e6ba:	f001 fec9 	bl	8010450 <RFW_ReceiveInit>
 800e6be:	e7ee      	b.n	800e69e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e6c0:	4d08      	ldr	r5, [pc, #32]	; (800e6e4 <RadioRxBoosted+0x60>)
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f002 fb7d 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	f002 fb34 	bl	8010d38 <UTIL_TIMER_Start>
 800e6d0:	e7e6      	b.n	800e6a0 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800e6d2:	4b03      	ldr	r3, [pc, #12]	; (800e6e0 <RadioRxBoosted+0x5c>)
 800e6d4:	6898      	ldr	r0, [r3, #8]
 800e6d6:	0180      	lsls	r0, r0, #6
 800e6d8:	f001 fa9e 	bl	800fc18 <SUBGRF_SetRxBoosted>
}
 800e6dc:	e7ec      	b.n	800e6b8 <RadioRxBoosted+0x34>
 800e6de:	bf00      	nop
 800e6e0:	200019e0 	.word	0x200019e0
 800e6e4:	20001a50 	.word	0x20001a50

0800e6e8 <RadioStandby>:
{
 800e6e8:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	f001 f894 	bl	800f818 <SUBGRF_SetStandby>
}
 800e6f0:	bd08      	pop	{r3, pc}

0800e6f2 <RadioGetStatus>:
{
 800e6f2:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800e6f4:	f001 f88a 	bl	800f80c <SUBGRF_GetOperatingMode>
 800e6f8:	2805      	cmp	r0, #5
 800e6fa:	d007      	beq.n	800e70c <RadioGetStatus+0x1a>
 800e6fc:	2807      	cmp	r0, #7
 800e6fe:	d007      	beq.n	800e710 <RadioGetStatus+0x1e>
 800e700:	2804      	cmp	r0, #4
 800e702:	d001      	beq.n	800e708 <RadioGetStatus+0x16>
            return RF_IDLE;
 800e704:	2000      	movs	r0, #0
}
 800e706:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800e708:	2002      	movs	r0, #2
 800e70a:	e7fc      	b.n	800e706 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800e70c:	2001      	movs	r0, #1
 800e70e:	e7fa      	b.n	800e706 <RadioGetStatus+0x14>
            return RF_CAD;
 800e710:	2003      	movs	r0, #3
 800e712:	e7f8      	b.n	800e706 <RadioGetStatus+0x14>

0800e714 <RadioIrqProcess>:
{
 800e714:	b530      	push	{r4, r5, lr}
 800e716:	b083      	sub	sp, #12
    uint8_t size = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800e71e:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 800e720:	4b9c      	ldr	r3, [pc, #624]	; (800e994 <RadioIrqProcess+0x280>)
 800e722:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e726:	2b20      	cmp	r3, #32
 800e728:	d829      	bhi.n	800e77e <RadioIrqProcess+0x6a>
 800e72a:	b21a      	sxth	r2, r3
 800e72c:	2a00      	cmp	r2, #0
 800e72e:	f000 80eb 	beq.w	800e908 <RadioIrqProcess+0x1f4>
 800e732:	3b01      	subs	r3, #1
 800e734:	2b1f      	cmp	r3, #31
 800e736:	f200 80e7 	bhi.w	800e908 <RadioIrqProcess+0x1f4>
 800e73a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e73e:	005f      	.short	0x005f
 800e740:	00e50075 	.word	0x00e50075
 800e744:	00e500df 	.word	0x00e500df
 800e748:	00e500e5 	.word	0x00e500e5
 800e74c:	00e500e7 	.word	0x00e500e7
 800e750:	00e500e5 	.word	0x00e500e5
 800e754:	00e500e5 	.word	0x00e500e5
 800e758:	00e500e5 	.word	0x00e500e5
 800e75c:	00e500f4 	.word	0x00e500f4
 800e760:	00e500e5 	.word	0x00e500e5
 800e764:	00e500e5 	.word	0x00e500e5
 800e768:	00e500e5 	.word	0x00e500e5
 800e76c:	00e500e5 	.word	0x00e500e5
 800e770:	00e500e5 	.word	0x00e500e5
 800e774:	00e500e5 	.word	0x00e500e5
 800e778:	00e500e5 	.word	0x00e500e5
 800e77c:	00fb      	.short	0x00fb
 800e77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e782:	f000 80a3 	beq.w	800e8cc <RadioIrqProcess+0x1b8>
 800e786:	d924      	bls.n	800e7d2 <RadioIrqProcess+0xbe>
 800e788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e78c:	f040 80bc 	bne.w	800e908 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800e790:	4b81      	ldr	r3, [pc, #516]	; (800e998 <RadioIrqProcess+0x284>)
 800e792:	2201      	movs	r2, #1
 800e794:	2100      	movs	r1, #0
 800e796:	2002      	movs	r0, #2
 800e798:	f001 ff32 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800e79c:	f001 f836 	bl	800f80c <SUBGRF_GetOperatingMode>
 800e7a0:	2804      	cmp	r0, #4
 800e7a2:	f000 809e 	beq.w	800e8e2 <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800e7a6:	f001 f831 	bl	800f80c <SUBGRF_GetOperatingMode>
 800e7aa:	2805      	cmp	r0, #5
 800e7ac:	f040 80ac 	bne.w	800e908 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 800e7b0:	487a      	ldr	r0, [pc, #488]	; (800e99c <RadioIrqProcess+0x288>)
 800e7b2:	f002 fa5f 	bl	8010c74 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	f001 f82e 	bl	800f818 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e7bc:	4b78      	ldr	r3, [pc, #480]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 80a1 	beq.w	800e908 <RadioIrqProcess+0x1f4>
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f000 809d 	beq.w	800e908 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 800e7ce:	4798      	blx	r3
 800e7d0:	e09a      	b.n	800e908 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 800e7d2:	2b40      	cmp	r3, #64	; 0x40
 800e7d4:	f000 80c7 	beq.w	800e966 <RadioIrqProcess+0x252>
 800e7d8:	2b80      	cmp	r3, #128	; 0x80
 800e7da:	f040 8095 	bne.w	800e908 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800e7de:	2000      	movs	r0, #0
 800e7e0:	f001 f81a 	bl	800f818 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e7e4:	4b6e      	ldr	r3, [pc, #440]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 808d 	beq.w	800e908 <RadioIrqProcess+0x1f4>
 800e7ee:	699b      	ldr	r3, [r3, #24]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 8089 	beq.w	800e908 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	4798      	blx	r3
 800e7fa:	e085      	b.n	800e908 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 800e7fc:	4869      	ldr	r0, [pc, #420]	; (800e9a4 <RadioIrqProcess+0x290>)
 800e7fe:	f002 fa39 	bl	8010c74 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800e802:	2000      	movs	r0, #0
 800e804:	f001 f808 	bl	800f818 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800e808:	f001 fe1c 	bl	8010444 <RFW_Is_LongPacketModeEnabled>
 800e80c:	2801      	cmp	r0, #1
 800e80e:	d008      	beq.n	800e822 <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800e810:	4b63      	ldr	r3, [pc, #396]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d077      	beq.n	800e908 <RadioIrqProcess+0x1f4>
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d074      	beq.n	800e908 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 800e81e:	4798      	blx	r3
 800e820:	e072      	b.n	800e908 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 800e822:	f001 fe18 	bl	8010456 <RFW_DeInit_TxLongPacket>
 800e826:	e7f3      	b.n	800e810 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 800e828:	485c      	ldr	r0, [pc, #368]	; (800e99c <RadioIrqProcess+0x288>)
 800e82a:	f002 fa23 	bl	8010c74 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800e82e:	4b59      	ldr	r3, [pc, #356]	; (800e994 <RadioIrqProcess+0x280>)
 800e830:	785b      	ldrb	r3, [r3, #1]
 800e832:	b1f3      	cbz	r3, 800e872 <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800e834:	22ff      	movs	r2, #255	; 0xff
 800e836:	f10d 0107 	add.w	r1, sp, #7
 800e83a:	485b      	ldr	r0, [pc, #364]	; (800e9a8 <RadioIrqProcess+0x294>)
 800e83c:	f001 fcfc 	bl	8010238 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800e840:	485a      	ldr	r0, [pc, #360]	; (800e9ac <RadioIrqProcess+0x298>)
 800e842:	f001 f99d 	bl	800fb80 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e846:	4b56      	ldr	r3, [pc, #344]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d05c      	beq.n	800e908 <RadioIrqProcess+0x1f4>
 800e84e:	689c      	ldr	r4, [r3, #8]
 800e850:	2c00      	cmp	r4, #0
 800e852:	d059      	beq.n	800e908 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 800e854:	4b4f      	ldr	r3, [pc, #316]	; (800e994 <RadioIrqProcess+0x280>)
 800e856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d11d      	bne.n	800e89a <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800e85e:	4a4d      	ldr	r2, [pc, #308]	; (800e994 <RadioIrqProcess+0x280>)
 800e860:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800e864:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800e868:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e86c:	484e      	ldr	r0, [pc, #312]	; (800e9a8 <RadioIrqProcess+0x294>)
 800e86e:	47a0      	blx	r4
                break;
 800e870:	e04a      	b.n	800e908 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e872:	2000      	movs	r0, #0
 800e874:	f000 ffd0 	bl	800f818 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800e878:	2100      	movs	r1, #0
 800e87a:	f640 1002 	movw	r0, #2306	; 0x902
 800e87e:	f001 f9bb 	bl	800fbf8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800e882:	f640 1044 	movw	r0, #2372	; 0x944
 800e886:	f001 faa7 	bl	800fdd8 <SUBGRF_ReadRegister>
 800e88a:	f040 0102 	orr.w	r1, r0, #2
 800e88e:	b2c9      	uxtb	r1, r1
 800e890:	f640 1044 	movw	r0, #2372	; 0x944
 800e894:	f001 f9b0 	bl	800fbf8 <SUBGRF_WriteRegister>
 800e898:	e7cc      	b.n	800e834 <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800e89a:	4c3e      	ldr	r4, [pc, #248]	; (800e994 <RadioIrqProcess+0x280>)
 800e89c:	4669      	mov	r1, sp
 800e89e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e8a0:	f001 fd80 	bl	80103a4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800e8a4:	4b3e      	ldr	r3, [pc, #248]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	689d      	ldr	r5, [r3, #8]
 800e8aa:	9b00      	ldr	r3, [sp, #0]
 800e8ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e8b0:	4a3f      	ldr	r2, [pc, #252]	; (800e9b0 <RadioIrqProcess+0x29c>)
 800e8b2:	fb82 1203 	smull	r1, r2, r2, r3
 800e8b6:	17db      	asrs	r3, r3, #31
 800e8b8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e8bc:	b25b      	sxtb	r3, r3
 800e8be:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800e8c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e8c6:	4838      	ldr	r0, [pc, #224]	; (800e9a8 <RadioIrqProcess+0x294>)
 800e8c8:	47a8      	blx	r5
                break;
 800e8ca:	e01d      	b.n	800e908 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	f000 ffa3 	bl	800f818 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e8d2:	4b33      	ldr	r3, [pc, #204]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	b1bb      	cbz	r3, 800e908 <RadioIrqProcess+0x1f4>
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	b1ab      	cbz	r3, 800e908 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 800e8dc:	2001      	movs	r0, #1
 800e8de:	4798      	blx	r3
 800e8e0:	e012      	b.n	800e908 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 800e8e2:	4830      	ldr	r0, [pc, #192]	; (800e9a4 <RadioIrqProcess+0x290>)
 800e8e4:	f002 f9c6 	bl	8010c74 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	f000 ff95 	bl	800f818 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e8ee:	4b2c      	ldr	r3, [pc, #176]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	b14b      	cbz	r3, 800e908 <RadioIrqProcess+0x1f4>
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	b13b      	cbz	r3, 800e908 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 800e8f8:	4798      	blx	r3
 800e8fa:	e005      	b.n	800e908 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800e8fc:	4b2d      	ldr	r3, [pc, #180]	; (800e9b4 <RadioIrqProcess+0x2a0>)
 800e8fe:	2201      	movs	r2, #1
 800e900:	2100      	movs	r1, #0
 800e902:	2002      	movs	r0, #2
 800e904:	f001 fe7c 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
}
 800e908:	b003      	add	sp, #12
 800e90a:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800e90c:	4b2a      	ldr	r3, [pc, #168]	; (800e9b8 <RadioIrqProcess+0x2a4>)
 800e90e:	2201      	movs	r2, #1
 800e910:	2100      	movs	r1, #0
 800e912:	2002      	movs	r0, #2
 800e914:	f001 fe74 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800e918:	f001 fd92 	bl	8010440 <RFW_Is_Init>
 800e91c:	2801      	cmp	r0, #1
 800e91e:	d1f3      	bne.n	800e908 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 800e920:	f001 fd9a 	bl	8010458 <RFW_ReceivePayload>
 800e924:	e7f0      	b.n	800e908 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800e926:	4b25      	ldr	r3, [pc, #148]	; (800e9bc <RadioIrqProcess+0x2a8>)
 800e928:	2201      	movs	r2, #1
 800e92a:	2100      	movs	r1, #0
 800e92c:	2002      	movs	r0, #2
 800e92e:	f001 fe67 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e932:	e7e9      	b.n	800e908 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 800e934:	4819      	ldr	r0, [pc, #100]	; (800e99c <RadioIrqProcess+0x288>)
 800e936:	f002 f99d 	bl	8010c74 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800e93a:	4b16      	ldr	r3, [pc, #88]	; (800e994 <RadioIrqProcess+0x280>)
 800e93c:	785b      	ldrb	r3, [r3, #1]
 800e93e:	b173      	cbz	r3, 800e95e <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e940:	4b17      	ldr	r3, [pc, #92]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d0df      	beq.n	800e908 <RadioIrqProcess+0x1f4>
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d0dc      	beq.n	800e908 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 800e94e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800e950:	4b1b      	ldr	r3, [pc, #108]	; (800e9c0 <RadioIrqProcess+0x2ac>)
 800e952:	2201      	movs	r2, #1
 800e954:	2100      	movs	r1, #0
 800e956:	2002      	movs	r0, #2
 800e958:	f001 fe52 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
 800e95c:	e7d4      	b.n	800e908 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e95e:	2000      	movs	r0, #0
 800e960:	f000 ff5a 	bl	800f818 <SUBGRF_SetStandby>
 800e964:	e7ec      	b.n	800e940 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800e966:	4b17      	ldr	r3, [pc, #92]	; (800e9c4 <RadioIrqProcess+0x2b0>)
 800e968:	2201      	movs	r2, #1
 800e96a:	2100      	movs	r1, #0
 800e96c:	2002      	movs	r0, #2
 800e96e:	f001 fe47 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800e972:	4b08      	ldr	r3, [pc, #32]	; (800e994 <RadioIrqProcess+0x280>)
 800e974:	785b      	ldrb	r3, [r3, #1]
 800e976:	b143      	cbz	r3, 800e98a <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800e978:	4b09      	ldr	r3, [pc, #36]	; (800e9a0 <RadioIrqProcess+0x28c>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d0c3      	beq.n	800e908 <RadioIrqProcess+0x1f4>
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d0c0      	beq.n	800e908 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 800e986:	4798      	blx	r3
}
 800e988:	e7be      	b.n	800e908 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800e98a:	2000      	movs	r0, #0
 800e98c:	f000 ff44 	bl	800f818 <SUBGRF_SetStandby>
 800e990:	e7f2      	b.n	800e978 <RadioIrqProcess+0x264>
 800e992:	bf00      	nop
 800e994:	200019e0 	.word	0x200019e0
 800e998:	08011e78 	.word	0x08011e78
 800e99c:	20001a50 	.word	0x20001a50
 800e9a0:	20001144 	.word	0x20001144
 800e9a4:	20001a38 	.word	0x20001a38
 800e9a8:	20001044 	.word	0x20001044
 800e9ac:	20001a04 	.word	0x20001a04
 800e9b0:	10624dd3 	.word	0x10624dd3
 800e9b4:	08011e8c 	.word	0x08011e8c
 800e9b8:	08011e98 	.word	0x08011e98
 800e9bc:	08011ea4 	.word	0x08011ea4
 800e9c0:	08011eb0 	.word	0x08011eb0
 800e9c4:	08011ebc 	.word	0x08011ebc

0800e9c8 <RadioOnDioIrq>:
{
 800e9c8:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800e9ca:	4b03      	ldr	r3, [pc, #12]	; (800e9d8 <RadioOnDioIrq+0x10>)
 800e9cc:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800e9d0:	f7ff fea0 	bl	800e714 <RadioIrqProcess>
}
 800e9d4:	bd08      	pop	{r3, pc}
 800e9d6:	bf00      	nop
 800e9d8:	200019e0 	.word	0x200019e0

0800e9dc <RadioGetWakeupTime>:
{
 800e9dc:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800e9de:	f001 fc70 	bl	80102c2 <SUBGRF_GetRadioWakeUpTime>
}
 800e9e2:	3003      	adds	r0, #3
 800e9e4:	bd08      	pop	{r3, pc}

0800e9e6 <RadioReadRegisters>:
{
 800e9e6:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800e9e8:	f001 fbb0 	bl	801014c <SUBGRF_ReadRegisters>
}
 800e9ec:	bd08      	pop	{r3, pc}

0800e9ee <RadioWriteRegisters>:
{
 800e9ee:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800e9f0:	f001 faf8 	bl	800ffe4 <SUBGRF_WriteRegisters>
}
 800e9f4:	bd08      	pop	{r3, pc}

0800e9f6 <RadioRssi>:
{
 800e9f6:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800e9f8:	f001 f8b4 	bl	800fb64 <SUBGRF_GetRssiInst>
}
 800e9fc:	b200      	sxth	r0, r0
 800e9fe:	bd08      	pop	{r3, pc}

0800ea00 <RadioSetTxContinuousWave>:
{
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800ea04:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ea08:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 800ea0c:	f001 f86a 	bl	800fae4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800ea10:	4628      	mov	r0, r5
 800ea12:	f001 fc3f 	bl	8010294 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800ea16:	2101      	movs	r1, #1
 800ea18:	f001 fc28 	bl	801026c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ea1c:	f000 ff7a 	bl	800f914 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ea20:	4d04      	ldr	r5, [pc, #16]	; (800ea34 <RadioSetTxContinuousWave+0x34>)
 800ea22:	4621      	mov	r1, r4
 800ea24:	4628      	mov	r0, r5
 800ea26:	f002 f9cd 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	f002 f984 	bl	8010d38 <UTIL_TIMER_Start>
}
 800ea30:	bd38      	pop	{r3, r4, r5, pc}
 800ea32:	bf00      	nop
 800ea34:	20001a38 	.word	0x20001a38

0800ea38 <RadioSetChannel>:
{
 800ea38:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800ea3a:	f001 f853 	bl	800fae4 <SUBGRF_SetRfFrequency>
}
 800ea3e:	bd08      	pop	{r3, pc}

0800ea40 <RadioStartCad>:
{
 800ea40:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ea42:	2100      	movs	r1, #0
 800ea44:	4b07      	ldr	r3, [pc, #28]	; (800ea64 <RadioStartCad+0x24>)
 800ea46:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800ea4a:	f001 fc0f 	bl	801026c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800ea4e:	2300      	movs	r3, #0
 800ea50:	461a      	mov	r2, r3
 800ea52:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ea56:	4608      	mov	r0, r1
 800ea58:	f001 f80d 	bl	800fa76 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800ea5c:	f000 ff4e 	bl	800f8fc <SUBGRF_SetCad>
}
 800ea60:	bd08      	pop	{r3, pc}
 800ea62:	bf00      	nop
 800ea64:	200019e0 	.word	0x200019e0

0800ea68 <RadioRx>:
{
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 800ea6c:	f001 fce8 	bl	8010440 <RFW_Is_Init>
 800ea70:	2801      	cmp	r0, #1
 800ea72:	d014      	beq.n	800ea9e <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ea74:	2300      	movs	r3, #0
 800ea76:	461a      	mov	r2, r3
 800ea78:	f240 2162 	movw	r1, #610	; 0x262
 800ea7c:	4608      	mov	r0, r1
 800ea7e:	f000 fffa 	bl	800fa76 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800ea82:	b97c      	cbnz	r4, 800eaa4 <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ea84:	4c0f      	ldr	r4, [pc, #60]	; (800eac4 <RadioRx+0x5c>)
 800ea86:	2100      	movs	r1, #0
 800ea88:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800ea8c:	f001 fbee 	bl	801026c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800ea90:	7863      	ldrb	r3, [r4, #1]
 800ea92:	b183      	cbz	r3, 800eab6 <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ea94:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ea98:	f000 fef2 	bl	800f880 <SUBGRF_SetRx>
}
 800ea9c:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 800ea9e:	f001 fcd7 	bl	8010450 <RFW_ReceiveInit>
 800eaa2:	e7ee      	b.n	800ea82 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800eaa4:	4d08      	ldr	r5, [pc, #32]	; (800eac8 <RadioRx+0x60>)
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f002 f98b 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800eaae:	4628      	mov	r0, r5
 800eab0:	f002 f942 	bl	8010d38 <UTIL_TIMER_Start>
 800eab4:	e7e6      	b.n	800ea84 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800eab6:	4b03      	ldr	r3, [pc, #12]	; (800eac4 <RadioRx+0x5c>)
 800eab8:	6898      	ldr	r0, [r3, #8]
 800eaba:	0180      	lsls	r0, r0, #6
 800eabc:	f000 fee0 	bl	800f880 <SUBGRF_SetRx>
}
 800eac0:	e7ec      	b.n	800ea9c <RadioRx+0x34>
 800eac2:	bf00      	nop
 800eac4:	200019e0 	.word	0x200019e0
 800eac8:	20001a50 	.word	0x20001a50

0800eacc <RadioSleep>:
{
 800eacc:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800eace:	f04f 0004 	mov.w	r0, #4
 800ead2:	f001 f9db 	bl	800fe8c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800ead6:	2002      	movs	r0, #2
 800ead8:	f7f2 fd0c 	bl	80014f4 <HAL_Delay>
}
 800eadc:	bd08      	pop	{r3, pc}
	...

0800eae0 <RadioSend>:
{
 800eae0:	b570      	push	{r4, r5, r6, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	4605      	mov	r5, r0
 800eae6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800eae8:	2300      	movs	r3, #0
 800eaea:	461a      	mov	r2, r3
 800eaec:	f240 2101 	movw	r1, #513	; 0x201
 800eaf0:	4608      	mov	r0, r1
 800eaf2:	f000 ffc0 	bl	800fa76 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800eaf6:	4e5a      	ldr	r6, [pc, #360]	; (800ec60 <RadioSend+0x180>)
 800eaf8:	2101      	movs	r1, #1
 800eafa:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800eafe:	f001 fbb5 	bl	801026c <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800eb02:	7833      	ldrb	r3, [r6, #0]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d103      	bne.n	800eb10 <RadioSend+0x30>
 800eb08:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800eb0c:	2b06      	cmp	r3, #6
 800eb0e:	d012      	beq.n	800eb36 <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800eb10:	f640 0089 	movw	r0, #2185	; 0x889
 800eb14:	f001 f960 	bl	800fdd8 <SUBGRF_ReadRegister>
 800eb18:	f040 0104 	orr.w	r1, r0, #4
 800eb1c:	b2c9      	uxtb	r1, r1
 800eb1e:	f640 0089 	movw	r0, #2185	; 0x889
 800eb22:	f001 f869 	bl	800fbf8 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 800eb26:	4b4e      	ldr	r3, [pc, #312]	; (800ec60 <RadioSend+0x180>)
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	d818      	bhi.n	800eb60 <RadioSend+0x80>
 800eb2e:	e8df f003 	tbb	[pc, r3]
 800eb32:	0d22      	.short	0x0d22
 800eb34:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800eb36:	f640 0089 	movw	r0, #2185	; 0x889
 800eb3a:	f001 f94d 	bl	800fdd8 <SUBGRF_ReadRegister>
 800eb3e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800eb42:	f640 0089 	movw	r0, #2185	; 0x889
 800eb46:	f001 f857 	bl	800fbf8 <SUBGRF_WriteRegister>
 800eb4a:	e7ec      	b.n	800eb26 <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800eb4c:	4844      	ldr	r0, [pc, #272]	; (800ec60 <RadioSend+0x180>)
 800eb4e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eb50:	300e      	adds	r0, #14
 800eb52:	f001 fa89 	bl	8010068 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800eb56:	2200      	movs	r2, #0
 800eb58:	4621      	mov	r1, r4
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f001 fb53 	bl	8010206 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800eb60:	4c40      	ldr	r4, [pc, #256]	; (800ec64 <RadioSend+0x184>)
 800eb62:	4b3f      	ldr	r3, [pc, #252]	; (800ec60 <RadioSend+0x180>)
 800eb64:	6859      	ldr	r1, [r3, #4]
 800eb66:	4620      	mov	r0, r4
 800eb68:	f002 f92c 	bl	8010dc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f002 f8e3 	bl	8010d38 <UTIL_TIMER_Start>
}
 800eb72:	b002      	add	sp, #8
 800eb74:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800eb76:	f001 fc63 	bl	8010440 <RFW_Is_Init>
 800eb7a:	2801      	cmp	r0, #1
 800eb7c:	d00a      	beq.n	800eb94 <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800eb7e:	4838      	ldr	r0, [pc, #224]	; (800ec60 <RadioSend+0x180>)
 800eb80:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eb82:	300e      	adds	r0, #14
 800eb84:	f001 fa70 	bl	8010068 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800eb88:	2200      	movs	r2, #0
 800eb8a:	4621      	mov	r1, r4
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f001 fb3a 	bl	8010206 <SUBGRF_SendPayload>
 800eb92:	e7e5      	b.n	800eb60 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800eb94:	f10d 0207 	add.w	r2, sp, #7
 800eb98:	4621      	mov	r1, r4
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	f001 fc55 	bl	801044a <RFW_TransmitInit>
 800eba0:	b968      	cbnz	r0, 800ebbe <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800eba2:	482f      	ldr	r0, [pc, #188]	; (800ec60 <RadioSend+0x180>)
 800eba4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eba8:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ebaa:	300e      	adds	r0, #14
 800ebac:	f001 fa5c 	bl	8010068 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f001 fb25 	bl	8010206 <SUBGRF_SendPayload>
 800ebbc:	e7d0      	b.n	800eb60 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800ebbe:	4b2a      	ldr	r3, [pc, #168]	; (800ec68 <RadioSend+0x188>)
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	2002      	movs	r0, #2
 800ebc6:	f001 fd1b 	bl	8010600 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ebca:	e7d2      	b.n	800eb72 <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ebcc:	4824      	ldr	r0, [pc, #144]	; (800ec60 <RadioSend+0x180>)
 800ebce:	2302      	movs	r3, #2
 800ebd0:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ebd2:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ebd4:	300e      	adds	r0, #14
 800ebd6:	f001 fa47 	bl	8010068 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ebda:	2200      	movs	r2, #0
 800ebdc:	4621      	mov	r1, r4
 800ebde:	4628      	mov	r0, r5
 800ebe0:	f001 fb11 	bl	8010206 <SUBGRF_SendPayload>
            break;
 800ebe4:	e7bc      	b.n	800eb60 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 800ebe6:	4622      	mov	r2, r4
 800ebe8:	4629      	mov	r1, r5
 800ebea:	4820      	ldr	r0, [pc, #128]	; (800ec6c <RadioSend+0x18c>)
 800ebec:	f7ff fca0 	bl	800e530 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ebf0:	4e1b      	ldr	r6, [pc, #108]	; (800ec60 <RadioSend+0x180>)
 800ebf2:	2302      	movs	r3, #2
 800ebf4:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800ebf6:	1c65      	adds	r5, r4, #1
 800ebf8:	b2ed      	uxtb	r5, r5
 800ebfa:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ebfc:	f106 000e 	add.w	r0, r6, #14
 800ec00:	f001 fa32 	bl	8010068 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800ec04:	2100      	movs	r1, #0
 800ec06:	20f1      	movs	r0, #241	; 0xf1
 800ec08:	f7ff fd08 	bl	800e61c <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	20f0      	movs	r0, #240	; 0xf0
 800ec10:	f7ff fd04 	bl	800e61c <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800ec14:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800ec16:	2b64      	cmp	r3, #100	; 0x64
 800ec18:	d019      	beq.n	800ec4e <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800ec1a:	21e1      	movs	r1, #225	; 0xe1
 800ec1c:	20f3      	movs	r0, #243	; 0xf3
 800ec1e:	f7ff fcfd 	bl	800e61c <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800ec22:	2104      	movs	r1, #4
 800ec24:	20f2      	movs	r0, #242	; 0xf2
 800ec26:	f7ff fcf9 	bl	800e61c <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800ec2a:	00e1      	lsls	r1, r4, #3
 800ec2c:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800ec2e:	0a09      	lsrs	r1, r1, #8
 800ec30:	20f4      	movs	r0, #244	; 0xf4
 800ec32:	f7ff fcf3 	bl	800e61c <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800ec36:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800ec3a:	20f5      	movs	r0, #245	; 0xf5
 800ec3c:	f7ff fcee 	bl	800e61c <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800ec40:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ec44:	4629      	mov	r1, r5
 800ec46:	4809      	ldr	r0, [pc, #36]	; (800ec6c <RadioSend+0x18c>)
 800ec48:	f001 fadd 	bl	8010206 <SUBGRF_SendPayload>
            break;
 800ec4c:	e788      	b.n	800eb60 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800ec4e:	2170      	movs	r1, #112	; 0x70
 800ec50:	20f3      	movs	r0, #243	; 0xf3
 800ec52:	f7ff fce3 	bl	800e61c <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800ec56:	211d      	movs	r1, #29
 800ec58:	20f2      	movs	r0, #242	; 0xf2
 800ec5a:	f7ff fcdf 	bl	800e61c <RadioWrite>
 800ec5e:	e7e4      	b.n	800ec2a <RadioSend+0x14a>
 800ec60:	200019e0 	.word	0x200019e0
 800ec64:	20001a38 	.word	0x20001a38
 800ec68:	08011ecc 	.word	0x08011ecc
 800ec6c:	20001044 	.word	0x20001044

0800ec70 <RadioSetModem>:
{
 800ec70:	b510      	push	{r4, lr}
 800ec72:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800ec74:	4b19      	ldr	r3, [pc, #100]	; (800ecdc <RadioSetModem+0x6c>)
 800ec76:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 800ec78:	f001 fbef 	bl	801045a <RFW_SetRadioModem>
    switch( modem )
 800ec7c:	3c01      	subs	r4, #1
 800ec7e:	2c03      	cmp	r4, #3
 800ec80:	d803      	bhi.n	800ec8a <RadioSetModem+0x1a>
 800ec82:	e8df f004 	tbb	[pc, r4]
 800ec86:	1509      	.short	0x1509
 800ec88:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	f001 f804 	bl	800fc98 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ec90:	4b12      	ldr	r3, [pc, #72]	; (800ecdc <RadioSetModem+0x6c>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	735a      	strb	r2, [r3, #13]
        break;
 800ec96:	e011      	b.n	800ecbc <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800ec98:	2001      	movs	r0, #1
 800ec9a:	f000 fffd 	bl	800fc98 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800ec9e:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <RadioSetModem+0x6c>)
 800eca0:	7b5a      	ldrb	r2, [r3, #13]
 800eca2:	7b18      	ldrb	r0, [r3, #12]
 800eca4:	4282      	cmp	r2, r0
 800eca6:	d009      	beq.n	800ecbc <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800eca8:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ecaa:	f000 fa83 	bl	800f1b4 <RadioSetPublicNetwork>
 800ecae:	e005      	b.n	800ecbc <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ecb0:	2002      	movs	r0, #2
 800ecb2:	f000 fff1 	bl	800fc98 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ecb6:	4b09      	ldr	r3, [pc, #36]	; (800ecdc <RadioSetModem+0x6c>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	735a      	strb	r2, [r3, #13]
}
 800ecbc:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ecbe:	2002      	movs	r0, #2
 800ecc0:	f000 ffea 	bl	800fc98 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ecc4:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <RadioSetModem+0x6c>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	735a      	strb	r2, [r3, #13]
        break;
 800ecca:	e7f7      	b.n	800ecbc <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800eccc:	2000      	movs	r0, #0
 800ecce:	f000 ffe3 	bl	800fc98 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ecd2:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <RadioSetModem+0x6c>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	735a      	strb	r2, [r3, #13]
}
 800ecd8:	e7f0      	b.n	800ecbc <RadioSetModem+0x4c>
 800ecda:	bf00      	nop
 800ecdc:	200019e0 	.word	0x200019e0

0800ece0 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece4:	b086      	sub	sp, #24
 800ece6:	4605      	mov	r5, r0
 800ece8:	460c      	mov	r4, r1
 800ecea:	4617      	mov	r7, r2
 800ecec:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800ecee:	2300      	movs	r3, #0
 800ecf0:	9304      	str	r3, [sp, #16]
 800ecf2:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ecf4:	f001 fba3 	bl	801043e <RFW_DeInit>
    switch( modem )
 800ecf8:	2d01      	cmp	r5, #1
 800ecfa:	f000 8085 	beq.w	800ee08 <RadioSetTxGenericConfig+0x128>
 800ecfe:	2d02      	cmp	r5, #2
 800ed00:	f000 80ed 	beq.w	800eede <RadioSetTxGenericConfig+0x1fe>
 800ed04:	b165      	cbz	r5, 800ed20 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ed06:	4638      	mov	r0, r7
 800ed08:	f001 fac4 	bl	8010294 <SUBGRF_SetRfTxPower>
 800ed0c:	4c84      	ldr	r4, [pc, #528]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800ed0e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ed12:	f001 fb99 	bl	8010448 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ed16:	6066      	str	r6, [r4, #4]
    return 0;
 800ed18:	2000      	movs	r0, #0
}
 800ed1a:	b006      	add	sp, #24
 800ed1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ed20:	68a3      	ldr	r3, [r4, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f000 80f0 	beq.w	800ef08 <RadioSetTxGenericConfig+0x228>
 800ed28:	6923      	ldr	r3, [r4, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f000 80ef 	beq.w	800ef0e <RadioSetTxGenericConfig+0x22e>
        if( config->fsk.SyncWordLength > 8 )
 800ed30:	7d20      	ldrb	r0, [r4, #20]
 800ed32:	2808      	cmp	r0, #8
 800ed34:	f200 80ee 	bhi.w	800ef14 <RadioSetTxGenericConfig+0x234>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ed38:	2100      	movs	r1, #0
 800ed3a:	e006      	b.n	800ed4a <RadioSetTxGenericConfig+0x6a>
                syncword[i] = config->fsk.SyncWord[i];
 800ed3c:	69a3      	ldr	r3, [r4, #24]
 800ed3e:	5c5a      	ldrb	r2, [r3, r1]
 800ed40:	ab06      	add	r3, sp, #24
 800ed42:	440b      	add	r3, r1
 800ed44:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ed48:	3101      	adds	r1, #1
 800ed4a:	4288      	cmp	r0, r1
 800ed4c:	dcf6      	bgt.n	800ed3c <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ed4e:	4d74      	ldr	r5, [pc, #464]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800ed50:	f04f 0800 	mov.w	r8, #0
 800ed54:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800ed58:	68a3      	ldr	r3, [r4, #8]
 800ed5a:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800ed5c:	7823      	ldrb	r3, [r4, #0]
 800ed5e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ed62:	6860      	ldr	r0, [r4, #4]
 800ed64:	f001 fb04 	bl	8010370 <SUBGRF_GetFskBandwidthRegValue>
 800ed68:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800ed6c:	68e3      	ldr	r3, [r4, #12]
 800ed6e:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ed70:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800ed74:	6923      	ldr	r3, [r4, #16]
 800ed76:	00db      	lsls	r3, r3, #3
 800ed78:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800ed7a:	2304      	movs	r3, #4
 800ed7c:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800ed7e:	7d23      	ldrb	r3, [r4, #20]
 800ed80:	00db      	lsls	r3, r3, #3
 800ed82:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800ed84:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800ed88:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d008      	beq.n	800eda2 <RadioSetTxGenericConfig+0xc2>
 800ed90:	7fa2      	ldrb	r2, [r4, #30]
 800ed92:	2a02      	cmp	r2, #2
 800ed94:	d005      	beq.n	800eda2 <RadioSetTxGenericConfig+0xc2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800ed96:	7fe0      	ldrb	r0, [r4, #31]
 800ed98:	4961      	ldr	r1, [pc, #388]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800ed9a:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ed9c:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800ed9e:	754a      	strb	r2, [r1, #21]
 800eda0:	e018      	b.n	800edd4 <RadioSetTxGenericConfig+0xf4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800eda2:	7fe2      	ldrb	r2, [r4, #31]
 800eda4:	f102 030f 	add.w	r3, r2, #15
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d901      	bls.n	800edb2 <RadioSetTxGenericConfig+0xd2>
 800edae:	2a01      	cmp	r2, #1
 800edb0:	d127      	bne.n	800ee02 <RadioSetTxGenericConfig+0x122>
            ConfigGeneric.rtx = CONFIG_TX;
 800edb2:	2301      	movs	r3, #1
 800edb4:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800edb8:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800edba:	4a5a      	ldr	r2, [pc, #360]	; (800ef24 <RadioSetTxGenericConfig+0x244>)
 800edbc:	4b5a      	ldr	r3, [pc, #360]	; (800ef28 <RadioSetTxGenericConfig+0x248>)
 800edbe:	6819      	ldr	r1, [r3, #0]
 800edc0:	a801      	add	r0, sp, #4
 800edc2:	f001 fb39 	bl	8010438 <RFW_Init>
 800edc6:	b9e0      	cbnz	r0, 800ee02 <RadioSetTxGenericConfig+0x122>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800edc8:	4b55      	ldr	r3, [pc, #340]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800edca:	2200      	movs	r2, #0
 800edcc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800edce:	2101      	movs	r1, #1
 800edd0:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800edd2:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800edd4:	f7ff fc88 	bl	800e6e8 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800edd8:	2000      	movs	r0, #0
 800edda:	f7ff ff49 	bl	800ec70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800edde:	4d53      	ldr	r5, [pc, #332]	; (800ef2c <RadioSetTxGenericConfig+0x24c>)
 800ede0:	4628      	mov	r0, r5
 800ede2:	f000 ff71 	bl	800fcc8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ede6:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800edea:	f001 f93d 	bl	8010068 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800edee:	a804      	add	r0, sp, #16
 800edf0:	f001 f908 	bl	8010004 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800edf4:	8ba0      	ldrh	r0, [r4, #28]
 800edf6:	f001 f86b 	bl	800fed0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800edfa:	8c20      	ldrh	r0, [r4, #32]
 800edfc:	f001 f91f 	bl	801003e <SUBGRF_SetCrcPolynomial>
        break;
 800ee00:	e781      	b.n	800ed06 <RadioSetTxGenericConfig+0x26>
                return -1;
 800ee02:	f04f 30ff 	mov.w	r0, #4294967295
 800ee06:	e788      	b.n	800ed1a <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ee08:	4b45      	ldr	r3, [pc, #276]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ee10:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ee14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ee18:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800ee1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800ee20:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800ee24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800ee28:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d036      	beq.n	800ee9e <RadioSetTxGenericConfig+0x1be>
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d039      	beq.n	800eea8 <RadioSetTxGenericConfig+0x1c8>
 800ee34:	b373      	cbz	r3, 800ee94 <RadioSetTxGenericConfig+0x1b4>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ee36:	4d3a      	ldr	r5, [pc, #232]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800ee38:	f04f 0801 	mov.w	r8, #1
 800ee3c:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ee40:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800ee42:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ee44:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800ee48:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ee4a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ee4e:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ee52:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ee56:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800ee5a:	f7ff fc45 	bl	800e6e8 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800ee5e:	4640      	mov	r0, r8
 800ee60:	f7ff ff06 	bl	800ec70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ee64:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800ee68:	f000 ff2e 	bl	800fcc8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ee6c:	f105 000e 	add.w	r0, r5, #14
 800ee70:	f001 f8fa 	bl	8010068 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800ee74:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800ee78:	2b06      	cmp	r3, #6
 800ee7a:	d025      	beq.n	800eec8 <RadioSetTxGenericConfig+0x1e8>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800ee7c:	f640 0089 	movw	r0, #2185	; 0x889
 800ee80:	f000 ffaa 	bl	800fdd8 <SUBGRF_ReadRegister>
 800ee84:	f040 0104 	orr.w	r1, r0, #4
 800ee88:	b2c9      	uxtb	r1, r1
 800ee8a:	f640 0089 	movw	r0, #2185	; 0x889
 800ee8e:	f000 feb3 	bl	800fbf8 <SUBGRF_WriteRegister>
 800ee92:	e738      	b.n	800ed06 <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ee94:	4b22      	ldr	r3, [pc, #136]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ee9c:	e7cb      	b.n	800ee36 <RadioSetTxGenericConfig+0x156>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ee9e:	4b20      	ldr	r3, [pc, #128]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800eea6:	e7c6      	b.n	800ee36 <RadioSetTxGenericConfig+0x156>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800eea8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eeac:	3b0b      	subs	r3, #11
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d904      	bls.n	800eebe <RadioSetTxGenericConfig+0x1de>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800eeb4:	4b1a      	ldr	r3, [pc, #104]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800eebc:	e7bb      	b.n	800ee36 <RadioSetTxGenericConfig+0x156>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800eebe:	4b18      	ldr	r3, [pc, #96]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800eec6:	e7b6      	b.n	800ee36 <RadioSetTxGenericConfig+0x156>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800eec8:	f640 0089 	movw	r0, #2185	; 0x889
 800eecc:	f000 ff84 	bl	800fdd8 <SUBGRF_ReadRegister>
 800eed0:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800eed4:	f640 0089 	movw	r0, #2185	; 0x889
 800eed8:	f000 fe8e 	bl	800fbf8 <SUBGRF_WriteRegister>
 800eedc:	e713      	b.n	800ed06 <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800eede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eee0:	3b01      	subs	r3, #1
 800eee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eee6:	d218      	bcs.n	800ef1a <RadioSetTxGenericConfig+0x23a>
        RadioSetModem( MODEM_BPSK );
 800eee8:	2002      	movs	r0, #2
 800eeea:	f7ff fec1 	bl	800ec70 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800eeee:	480c      	ldr	r0, [pc, #48]	; (800ef20 <RadioSetTxGenericConfig+0x240>)
 800eef0:	2302      	movs	r3, #2
 800eef2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800eef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eef8:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800eefa:	2316      	movs	r3, #22
 800eefc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ef00:	3038      	adds	r0, #56	; 0x38
 800ef02:	f000 fee1 	bl	800fcc8 <SUBGRF_SetModulationParams>
        break;
 800ef06:	e6fe      	b.n	800ed06 <RadioSetTxGenericConfig+0x26>
            return -1;
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	e705      	b.n	800ed1a <RadioSetTxGenericConfig+0x3a>
 800ef0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef12:	e702      	b.n	800ed1a <RadioSetTxGenericConfig+0x3a>
            return -1;
 800ef14:	f04f 30ff 	mov.w	r0, #4294967295
 800ef18:	e6ff      	b.n	800ed1a <RadioSetTxGenericConfig+0x3a>
            return -1;
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1e:	e6fc      	b.n	800ed1a <RadioSetTxGenericConfig+0x3a>
 800ef20:	200019e0 	.word	0x200019e0
 800ef24:	20001a38 	.word	0x20001a38
 800ef28:	20001144 	.word	0x20001144
 800ef2c:	20001a18 	.word	0x20001a18

0800ef30 <RadioSetRxGenericConfig>:
{
 800ef30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef32:	b087      	sub	sp, #28
 800ef34:	4607      	mov	r7, r0
 800ef36:	460c      	mov	r4, r1
 800ef38:	4615      	mov	r5, r2
 800ef3a:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	9304      	str	r3, [sp, #16]
 800ef40:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ef42:	f001 fa7c 	bl	801043e <RFW_DeInit>
    if( rxContinuous != 0 )
 800ef46:	b105      	cbz	r5, 800ef4a <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 800ef48:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800ef4a:	3d00      	subs	r5, #0
 800ef4c:	bf18      	it	ne
 800ef4e:	2501      	movne	r5, #1
 800ef50:	4b94      	ldr	r3, [pc, #592]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800ef52:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800ef54:	b12f      	cbz	r7, 800ef62 <RadioSetRxGenericConfig+0x32>
 800ef56:	2f01      	cmp	r7, #1
 800ef58:	f000 8094 	beq.w	800f084 <RadioSetRxGenericConfig+0x154>
 800ef5c:	2000      	movs	r0, #0
}
 800ef5e:	b007      	add	sp, #28
 800ef60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ef62:	68e3      	ldr	r3, [r4, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f000 8110 	beq.w	800f18a <RadioSetRxGenericConfig+0x25a>
 800ef6a:	6923      	ldr	r3, [r4, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 810f 	beq.w	800f190 <RadioSetRxGenericConfig+0x260>
        if( config->fsk.SyncWordLength > 8 )
 800ef72:	7d63      	ldrb	r3, [r4, #21]
 800ef74:	2b08      	cmp	r3, #8
 800ef76:	f200 810e 	bhi.w	800f196 <RadioSetRxGenericConfig+0x266>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	e006      	b.n	800ef8c <RadioSetRxGenericConfig+0x5c>
                syncword[i] = config->fsk.SyncWord[i];
 800ef7e:	69a1      	ldr	r1, [r4, #24]
 800ef80:	5c88      	ldrb	r0, [r1, r2]
 800ef82:	a906      	add	r1, sp, #24
 800ef84:	4411      	add	r1, r2
 800ef86:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ef8a:	3201      	adds	r2, #1
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	dcf6      	bgt.n	800ef7e <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800ef90:	6820      	ldr	r0, [r4, #0]
 800ef92:	3800      	subs	r0, #0
 800ef94:	bf18      	it	ne
 800ef96:	2001      	movne	r0, #1
 800ef98:	f000 fcca 	bl	800f930 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ef9c:	4d81      	ldr	r5, [pc, #516]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800ef9e:	2700      	movs	r7, #0
 800efa0:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800efa4:	68e3      	ldr	r3, [r4, #12]
 800efa6:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800efa8:	7923      	ldrb	r3, [r4, #4]
 800efaa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800efae:	68a0      	ldr	r0, [r4, #8]
 800efb0:	f001 f9de 	bl	8010370 <SUBGRF_GetFskBandwidthRegValue>
 800efb4:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800efb8:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	00db      	lsls	r3, r3, #3
 800efbe:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800efc0:	7d23      	ldrb	r3, [r4, #20]
 800efc2:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800efc4:	7d63      	ldrb	r3, [r4, #21]
 800efc6:	00db      	lsls	r3, r3, #3
 800efc8:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800efca:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800efce:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800efd0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800efd4:	b973      	cbnz	r3, 800eff4 <RadioSetRxGenericConfig+0xc4>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800efd6:	69e1      	ldr	r1, [r4, #28]
 800efd8:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800efda:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800efde:	2a02      	cmp	r2, #2
 800efe0:	d012      	beq.n	800f008 <RadioSetRxGenericConfig+0xd8>
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	d010      	beq.n	800f008 <RadioSetRxGenericConfig+0xd8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800efe6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800efea:	496e      	ldr	r1, [pc, #440]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800efec:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800efee:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800eff0:	754b      	strb	r3, [r1, #21]
 800eff2:	e023      	b.n	800f03c <RadioSetRxGenericConfig+0x10c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d003      	beq.n	800f000 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800eff8:	4a6a      	ldr	r2, [pc, #424]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800effa:	21ff      	movs	r1, #255	; 0xff
 800effc:	7591      	strb	r1, [r2, #22]
 800effe:	e7ec      	b.n	800efda <RadioSetRxGenericConfig+0xaa>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f000:	4a68      	ldr	r2, [pc, #416]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f002:	21ff      	movs	r1, #255	; 0xff
 800f004:	7591      	strb	r1, [r2, #22]
 800f006:	e7e8      	b.n	800efda <RadioSetRxGenericConfig+0xaa>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800f008:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800f00c:	f102 030f 	add.w	r3, r2, #15
 800f010:	b2db      	uxtb	r3, r3
 800f012:	2b01      	cmp	r3, #1
 800f014:	d901      	bls.n	800f01a <RadioSetRxGenericConfig+0xea>
 800f016:	2a01      	cmp	r2, #1
 800f018:	d131      	bne.n	800f07e <RadioSetRxGenericConfig+0x14e>
          ConfigGeneric.rtx = CONFIG_RX;
 800f01a:	2300      	movs	r3, #0
 800f01c:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800f020:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800f022:	4a61      	ldr	r2, [pc, #388]	; (800f1a8 <RadioSetRxGenericConfig+0x278>)
 800f024:	4b61      	ldr	r3, [pc, #388]	; (800f1ac <RadioSetRxGenericConfig+0x27c>)
 800f026:	6819      	ldr	r1, [r3, #0]
 800f028:	a801      	add	r0, sp, #4
 800f02a:	f001 fa05 	bl	8010438 <RFW_Init>
 800f02e:	bb30      	cbnz	r0, 800f07e <RadioSetRxGenericConfig+0x14e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800f030:	4b5c      	ldr	r3, [pc, #368]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f032:	2200      	movs	r2, #0
 800f034:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800f036:	2101      	movs	r1, #1
 800f038:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800f03a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800f03c:	f7ff fb54 	bl	800e6e8 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800f040:	2000      	movs	r0, #0
 800f042:	f7ff fe15 	bl	800ec70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f046:	4d5a      	ldr	r5, [pc, #360]	; (800f1b0 <RadioSetRxGenericConfig+0x280>)
 800f048:	4628      	mov	r0, r5
 800f04a:	f000 fe3d 	bl	800fcc8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f04e:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800f052:	f001 f809 	bl	8010068 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800f056:	a804      	add	r0, sp, #16
 800f058:	f000 ffd4 	bl	8010004 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800f05c:	8c20      	ldrh	r0, [r4, #32]
 800f05e:	f000 ff37 	bl	800fed0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800f062:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800f064:	f000 ffeb 	bl	801003e <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800f068:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f06c:	fb03 f606 	mul.w	r6, r3, r6
 800f070:	68e3      	ldr	r3, [r4, #12]
 800f072:	fbb6 f6f3 	udiv	r6, r6, r3
 800f076:	f845 6c30 	str.w	r6, [r5, #-48]
    return status;
 800f07a:	2000      	movs	r0, #0
        break;
 800f07c:	e76f      	b.n	800ef5e <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f07e:	f04f 30ff 	mov.w	r0, #4294967295
 800f082:	e76c      	b.n	800ef5e <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 800f084:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f086:	2b00      	cmp	r3, #0
 800f088:	f000 8088 	beq.w	800f19c <RadioSetRxGenericConfig+0x26c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800f08c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800f090:	2b01      	cmp	r3, #1
 800f092:	d053      	beq.n	800f13c <RadioSetRxGenericConfig+0x20c>
            MaxPayloadLength = 0xFF;
 800f094:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f096:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f098:	3800      	subs	r0, #0
 800f09a:	bf18      	it	ne
 800f09c:	2001      	movne	r0, #1
 800f09e:	f000 fc47 	bl	800f930 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f0a2:	b2f0      	uxtb	r0, r6
 800f0a4:	f000 fdd6 	bl	800fc54 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f0a8:	4b3e      	ldr	r3, [pc, #248]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800f0b0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800f0b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800f0b8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800f0bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800f0c0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800f0c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800f0c8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d03c      	beq.n	800f14a <RadioSetRxGenericConfig+0x21a>
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d03f      	beq.n	800f154 <RadioSetRxGenericConfig+0x224>
 800f0d4:	b3a3      	cbz	r3, 800f140 <RadioSetRxGenericConfig+0x210>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f0d6:	4d33      	ldr	r5, [pc, #204]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f0d8:	2601      	movs	r6, #1
 800f0da:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800f0dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f0de:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800f0e0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800f0e4:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f0e6:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800f0e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f0ec:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800f0f0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f0f4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800f0f8:	f7ff faf6 	bl	800e6e8 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	f7ff fdb7 	bl	800ec70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f102:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800f106:	f000 fddf 	bl	800fcc8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f10a:	f105 000e 	add.w	r0, r5, #14
 800f10e:	f000 ffab 	bl	8010068 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f112:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800f116:	42b3      	cmp	r3, r6
 800f118:	d02c      	beq.n	800f174 <RadioSetRxGenericConfig+0x244>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f11a:	f240 7036 	movw	r0, #1846	; 0x736
 800f11e:	f000 fe5b 	bl	800fdd8 <SUBGRF_ReadRegister>
 800f122:	f040 0104 	orr.w	r1, r0, #4
 800f126:	b2c9      	uxtb	r1, r1
 800f128:	f240 7036 	movw	r0, #1846	; 0x736
 800f12c:	f000 fd64 	bl	800fbf8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800f130:	4b1c      	ldr	r3, [pc, #112]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f136:	609a      	str	r2, [r3, #8]
    return status;
 800f138:	2000      	movs	r0, #0
        break;
 800f13a:	e710      	b.n	800ef5e <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800f13c:	7f27      	ldrb	r7, [r4, #28]
 800f13e:	e7aa      	b.n	800f096 <RadioSetRxGenericConfig+0x166>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f140:	4b18      	ldr	r3, [pc, #96]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f142:	2200      	movs	r2, #0
 800f144:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f148:	e7c5      	b.n	800f0d6 <RadioSetRxGenericConfig+0x1a6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f14a:	4b16      	ldr	r3, [pc, #88]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f14c:	2201      	movs	r2, #1
 800f14e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f152:	e7c0      	b.n	800f0d6 <RadioSetRxGenericConfig+0x1a6>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f154:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f158:	3b0b      	subs	r3, #11
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d904      	bls.n	800f16a <RadioSetRxGenericConfig+0x23a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f160:	4b10      	ldr	r3, [pc, #64]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f162:	2200      	movs	r2, #0
 800f164:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f168:	e7b5      	b.n	800f0d6 <RadioSetRxGenericConfig+0x1a6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f16a:	4b0e      	ldr	r3, [pc, #56]	; (800f1a4 <RadioSetRxGenericConfig+0x274>)
 800f16c:	2201      	movs	r2, #1
 800f16e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f172:	e7b0      	b.n	800f0d6 <RadioSetRxGenericConfig+0x1a6>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f174:	f240 7036 	movw	r0, #1846	; 0x736
 800f178:	f000 fe2e 	bl	800fdd8 <SUBGRF_ReadRegister>
 800f17c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f180:	f240 7036 	movw	r0, #1846	; 0x736
 800f184:	f000 fd38 	bl	800fbf8 <SUBGRF_WriteRegister>
 800f188:	e7d2      	b.n	800f130 <RadioSetRxGenericConfig+0x200>
            return -1;
 800f18a:	f04f 30ff 	mov.w	r0, #4294967295
 800f18e:	e6e6      	b.n	800ef5e <RadioSetRxGenericConfig+0x2e>
 800f190:	f04f 30ff 	mov.w	r0, #4294967295
 800f194:	e6e3      	b.n	800ef5e <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f196:	f04f 30ff 	mov.w	r0, #4294967295
 800f19a:	e6e0      	b.n	800ef5e <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f19c:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a0:	e6dd      	b.n	800ef5e <RadioSetRxGenericConfig+0x2e>
 800f1a2:	bf00      	nop
 800f1a4:	200019e0 	.word	0x200019e0
 800f1a8:	20001a50 	.word	0x20001a50
 800f1ac:	20001144 	.word	0x20001144
 800f1b0:	20001a18 	.word	0x20001a18

0800f1b4 <RadioSetPublicNetwork>:
{
 800f1b4:	b510      	push	{r4, lr}
 800f1b6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f1b8:	4b0e      	ldr	r3, [pc, #56]	; (800f1f4 <RadioSetPublicNetwork+0x40>)
 800f1ba:	7318      	strb	r0, [r3, #12]
 800f1bc:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800f1be:	2001      	movs	r0, #1
 800f1c0:	f7ff fd56 	bl	800ec70 <RadioSetModem>
    if( enable == true )
 800f1c4:	b154      	cbz	r4, 800f1dc <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f1c6:	2134      	movs	r1, #52	; 0x34
 800f1c8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f1cc:	f000 fd14 	bl	800fbf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f1d0:	2144      	movs	r1, #68	; 0x44
 800f1d2:	f240 7041 	movw	r0, #1857	; 0x741
 800f1d6:	f000 fd0f 	bl	800fbf8 <SUBGRF_WriteRegister>
}
 800f1da:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f1dc:	2114      	movs	r1, #20
 800f1de:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f1e2:	f000 fd09 	bl	800fbf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f1e6:	2124      	movs	r1, #36	; 0x24
 800f1e8:	f240 7041 	movw	r0, #1857	; 0x741
 800f1ec:	f000 fd04 	bl	800fbf8 <SUBGRF_WriteRegister>
}
 800f1f0:	e7f3      	b.n	800f1da <RadioSetPublicNetwork+0x26>
 800f1f2:	bf00      	nop
 800f1f4:	200019e0 	.word	0x200019e0

0800f1f8 <RadioSetTxConfig>:
{
 800f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	b083      	sub	sp, #12
 800f1fe:	4604      	mov	r4, r0
 800f200:	460d      	mov	r5, r1
 800f202:	4691      	mov	r9, r2
 800f204:	461f      	mov	r7, r3
 800f206:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800f20a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800f20e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f212:	f001 f914 	bl	801043e <RFW_DeInit>
    switch( modem )
 800f216:	2c01      	cmp	r4, #1
 800f218:	d05a      	beq.n	800f2d0 <RadioSetTxConfig+0xd8>
 800f21a:	2c03      	cmp	r4, #3
 800f21c:	f000 80ab 	beq.w	800f376 <RadioSetTxConfig+0x17e>
 800f220:	b164      	cbz	r4, 800f23c <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f222:	4628      	mov	r0, r5
 800f224:	f001 f836 	bl	8010294 <SUBGRF_SetRfTxPower>
 800f228:	4c5b      	ldr	r4, [pc, #364]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f22a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800f22e:	f001 f90b 	bl	8010448 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f232:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f234:	6063      	str	r3, [r4, #4]
}
 800f236:	b003      	add	sp, #12
 800f238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f23c:	4c56      	ldr	r4, [pc, #344]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f23e:	f04f 0b00 	mov.w	fp, #0
 800f242:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f248:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f24a:	230b      	movs	r3, #11
 800f24c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f250:	4638      	mov	r0, r7
 800f252:	f001 f88d 	bl	8010370 <SUBGRF_GetFskBandwidthRegValue>
 800f256:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f25a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f25e:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f262:	00f6      	lsls	r6, r6, #3
 800f264:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f266:	2304      	movs	r3, #4
 800f268:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f26a:	2318      	movs	r3, #24
 800f26c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f26e:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f272:	f088 0801 	eor.w	r8, r8, #1
 800f276:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 800f27a:	f1ba 0f00 	cmp.w	sl, #0
 800f27e:	d023      	beq.n	800f2c8 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f280:	22f2      	movs	r2, #242	; 0xf2
 800f282:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f284:	4c44      	ldr	r4, [pc, #272]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f286:	2301      	movs	r3, #1
 800f288:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f28a:	f7ff fa2d 	bl	800e6e8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f28e:	4626      	mov	r6, r4
 800f290:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f294:	3800      	subs	r0, #0
 800f296:	bf18      	it	ne
 800f298:	2001      	movne	r0, #1
 800f29a:	f7ff fce9 	bl	800ec70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f29e:	4630      	mov	r0, r6
 800f2a0:	f000 fd12 	bl	800fcc8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2a4:	f104 000e 	add.w	r0, r4, #14
 800f2a8:	f000 fede 	bl	8010068 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f2ac:	4a3b      	ldr	r2, [pc, #236]	; (800f39c <RadioSetTxConfig+0x1a4>)
 800f2ae:	466b      	mov	r3, sp
 800f2b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 fea3 	bl	8010004 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f2be:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f2c2:	f000 fe05 	bl	800fed0 <SUBGRF_SetWhiteningSeed>
            break;
 800f2c6:	e7ac      	b.n	800f222 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f2c8:	4b33      	ldr	r3, [pc, #204]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	75da      	strb	r2, [r3, #23]
 800f2ce:	e7d9      	b.n	800f284 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f2d0:	4a31      	ldr	r2, [pc, #196]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f2e0:	492f      	ldr	r1, [pc, #188]	; (800f3a0 <RadioSetTxConfig+0x1a8>)
 800f2e2:	5dc9      	ldrb	r1, [r1, r7]
 800f2e4:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f2e8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800f2ec:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f2f0:	b91f      	cbnz	r7, 800f2fa <RadioSetTxConfig+0x102>
 800f2f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2f4:	3a0b      	subs	r2, #11
 800f2f6:	2a01      	cmp	r2, #1
 800f2f8:	d92f      	bls.n	800f35a <RadioSetTxConfig+0x162>
 800f2fa:	2f01      	cmp	r7, #1
 800f2fc:	d02a      	beq.n	800f354 <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f2fe:	4a26      	ldr	r2, [pc, #152]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f300:	2100      	movs	r1, #0
 800f302:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f306:	4a24      	ldr	r2, [pc, #144]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f308:	2101      	movs	r1, #1
 800f30a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f30c:	3b05      	subs	r3, #5
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	428b      	cmp	r3, r1
 800f312:	d927      	bls.n	800f364 <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f314:	4b20      	ldr	r3, [pc, #128]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f316:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f318:	4c1f      	ldr	r4, [pc, #124]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f31a:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f31e:	4b21      	ldr	r3, [pc, #132]	; (800f3a4 <RadioSetTxConfig+0x1ac>)
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f324:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f328:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f32c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f330:	f7ff f9da 	bl	800e6e8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f334:	4626      	mov	r6, r4
 800f336:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f33a:	3800      	subs	r0, #0
 800f33c:	bf18      	it	ne
 800f33e:	2001      	movne	r0, #1
 800f340:	f7ff fc96 	bl	800ec70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f344:	4630      	mov	r0, r6
 800f346:	f000 fcbf 	bl	800fcc8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f34a:	f104 000e 	add.w	r0, r4, #14
 800f34e:	f000 fe8b 	bl	8010068 <SUBGRF_SetPacketParams>
            break;
 800f352:	e766      	b.n	800f222 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f356:	2a0c      	cmp	r2, #12
 800f358:	d1d1      	bne.n	800f2fe <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f35a:	4a0f      	ldr	r2, [pc, #60]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f35c:	2101      	movs	r1, #1
 800f35e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f362:	e7d0      	b.n	800f306 <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 800f364:	2e0b      	cmp	r6, #11
 800f366:	d803      	bhi.n	800f370 <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f368:	4613      	mov	r3, r2
 800f36a:	220c      	movs	r2, #12
 800f36c:	839a      	strh	r2, [r3, #28]
 800f36e:	e7d3      	b.n	800f318 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f370:	4b09      	ldr	r3, [pc, #36]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f372:	839e      	strh	r6, [r3, #28]
 800f374:	e7d0      	b.n	800f318 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 800f376:	2003      	movs	r0, #3
 800f378:	f7ff fc7a 	bl	800ec70 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800f37c:	4806      	ldr	r0, [pc, #24]	; (800f398 <RadioSetTxConfig+0x1a0>)
 800f37e:	2302      	movs	r3, #2
 800f380:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800f384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f386:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800f388:	2316      	movs	r3, #22
 800f38a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f38e:	3038      	adds	r0, #56	; 0x38
 800f390:	f000 fc9a 	bl	800fcc8 <SUBGRF_SetModulationParams>
            break;
 800f394:	e745      	b.n	800f222 <RadioSetTxConfig+0x2a>
 800f396:	bf00      	nop
 800f398:	200019e0 	.word	0x200019e0
 800f39c:	08011308 	.word	0x08011308
 800f3a0:	08011ee4 	.word	0x08011ee4
 800f3a4:	200000cc 	.word	0x200000cc

0800f3a8 <RadioSetRxConfig>:
{
 800f3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ac:	b087      	sub	sp, #28
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	4615      	mov	r5, r2
 800f3b4:	9301      	str	r3, [sp, #4]
 800f3b6:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 800f3ba:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 800f3be:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800f3c2:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 800f3c6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 800f3ca:	4baf      	ldr	r3, [pc, #700]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f3cc:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f3d0:	f001 f835 	bl	801043e <RFW_DeInit>
    if( rxContinuous == true )
 800f3d4:	f1b8 0f00 	cmp.w	r8, #0
 800f3d8:	d001      	beq.n	800f3de <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800f3da:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800f3de:	b16f      	cbz	r7, 800f3fc <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 800f3e0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800f3e4:	4ba9      	ldr	r3, [pc, #676]	; (800f68c <RadioSetRxConfig+0x2e4>)
 800f3e6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800f3e8:	2c01      	cmp	r4, #1
 800f3ea:	f000 80d6 	beq.w	800f59a <RadioSetRxConfig+0x1f2>
 800f3ee:	2c04      	cmp	r4, #4
 800f3f0:	d008      	beq.n	800f404 <RadioSetRxConfig+0x5c>
 800f3f2:	2c00      	cmp	r4, #0
 800f3f4:	d07c      	beq.n	800f4f0 <RadioSetRxConfig+0x148>
}
 800f3f6:	b007      	add	sp, #28
 800f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800f3fc:	4ba3      	ldr	r3, [pc, #652]	; (800f68c <RadioSetRxConfig+0x2e4>)
 800f3fe:	22ff      	movs	r2, #255	; 0xff
 800f400:	701a      	strb	r2, [r3, #0]
 800f402:	e7f1      	b.n	800f3e8 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800f404:	2001      	movs	r0, #1
 800f406:	f000 fa93 	bl	800f930 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f40a:	4c9f      	ldr	r4, [pc, #636]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f40c:	2700      	movs	r7, #0
 800f40e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f412:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800f414:	2309      	movs	r3, #9
 800f416:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800f41a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f41e:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f420:	4630      	mov	r0, r6
 800f422:	f000 ffa5 	bl	8010370 <SUBGRF_GetFskBandwidthRegValue>
 800f426:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f42a:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f42c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f430:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800f434:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800f436:	2310      	movs	r3, #16
 800f438:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f43a:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800f43c:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f43e:	4b93      	ldr	r3, [pc, #588]	; (800f68c <RadioSetRxConfig+0x2e4>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f444:	2301      	movs	r3, #1
 800f446:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800f448:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800f44a:	2004      	movs	r0, #4
 800f44c:	f7ff fc10 	bl	800ec70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f450:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f454:	f000 fc38 	bl	800fcc8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f458:	f104 000e 	add.w	r0, r4, #14
 800f45c:	f000 fe04 	bl	8010068 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f460:	ab02      	add	r3, sp, #8
 800f462:	4a8b      	ldr	r2, [pc, #556]	; (800f690 <RadioSetRxConfig+0x2e8>)
 800f464:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f468:	e883 0003 	stmia.w	r3, {r0, r1}
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 fdc9 	bl	8010004 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f472:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f476:	f000 fd2b 	bl	800fed0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800f47a:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800f47e:	f7ff f8c9 	bl	800e614 <RadioRead>
            RadioWrite(0x8b8, modReg);
 800f482:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 800f486:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800f48a:	f7ff f8c7 	bl	800e61c <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800f48e:	2104      	movs	r1, #4
 800f490:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800f494:	f7ff f8c2 	bl	800e61c <RadioWrite>
            modReg= RadioRead(0x89b);
 800f498:	f640 009b 	movw	r0, #2203	; 0x89b
 800f49c:	f7ff f8ba 	bl	800e614 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f4a0:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800f4a4:	f041 0108 	orr.w	r1, r1, #8
 800f4a8:	f640 009b 	movw	r0, #2203	; 0x89b
 800f4ac:	f7ff f8b6 	bl	800e61c <RadioWrite>
            modReg= RadioRead(0x6d1);
 800f4b0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800f4b4:	f7ff f8ae 	bl	800e614 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f4b8:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800f4bc:	f041 0118 	orr.w	r1, r1, #24
 800f4c0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800f4c4:	f7ff f8aa 	bl	800e61c <RadioWrite>
            modReg= RadioRead(0x6ac);
 800f4c8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f4cc:	f7ff f8a2 	bl	800e614 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800f4d0:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800f4d4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 800f4d8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f4dc:	f7ff f89e 	bl	800e61c <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f4e0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f4e4:	fb03 fa0a 	mul.w	sl, r3, sl
 800f4e8:	fbba f5f5 	udiv	r5, sl, r5
 800f4ec:	60a5      	str	r5, [r4, #8]
            break;
 800f4ee:	e782      	b.n	800f3f6 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	f000 fa1d 	bl	800f930 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f4f6:	4c64      	ldr	r4, [pc, #400]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f4f8:	f04f 0800 	mov.w	r8, #0
 800f4fc:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f500:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f502:	230b      	movs	r3, #11
 800f504:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f508:	4630      	mov	r0, r6
 800f50a:	f000 ff31 	bl	8010370 <SUBGRF_GetFskBandwidthRegValue>
 800f50e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f512:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f516:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f51a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f51e:	2304      	movs	r3, #4
 800f520:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800f522:	2318      	movs	r3, #24
 800f524:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f526:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f52a:	f087 0701 	eor.w	r7, r7, #1
 800f52e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f530:	4b56      	ldr	r3, [pc, #344]	; (800f68c <RadioSetRxConfig+0x2e4>)
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800f536:	f1bb 0f00 	cmp.w	fp, #0
 800f53a:	d02a      	beq.n	800f592 <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f53c:	22f2      	movs	r2, #242	; 0xf2
 800f53e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f540:	4c51      	ldr	r4, [pc, #324]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f542:	2301      	movs	r3, #1
 800f544:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f546:	f7ff f8cf 	bl	800e6e8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f54a:	4626      	mov	r6, r4
 800f54c:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f550:	3800      	subs	r0, #0
 800f552:	bf18      	it	ne
 800f554:	2001      	movne	r0, #1
 800f556:	f7ff fb8b 	bl	800ec70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f55a:	4630      	mov	r0, r6
 800f55c:	f000 fbb4 	bl	800fcc8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f560:	f104 000e 	add.w	r0, r4, #14
 800f564:	f000 fd80 	bl	8010068 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f568:	4a4a      	ldr	r2, [pc, #296]	; (800f694 <RadioSetRxConfig+0x2ec>)
 800f56a:	ab04      	add	r3, sp, #16
 800f56c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f570:	e883 0003 	stmia.w	r3, {r0, r1}
 800f574:	4618      	mov	r0, r3
 800f576:	f000 fd45 	bl	8010004 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f57a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f57e:	f000 fca7 	bl	800fed0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f582:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f586:	fb03 fa0a 	mul.w	sl, r3, sl
 800f58a:	fbba f5f5 	udiv	r5, sl, r5
 800f58e:	60a5      	str	r5, [r4, #8]
            break;
 800f590:	e731      	b.n	800f3f6 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f592:	4b3d      	ldr	r3, [pc, #244]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f594:	2201      	movs	r2, #1
 800f596:	75da      	strb	r2, [r3, #23]
 800f598:	e7d2      	b.n	800f540 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f59a:	2000      	movs	r0, #0
 800f59c:	f000 f9c8 	bl	800f930 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f5a0:	4a39      	ldr	r2, [pc, #228]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800f5a8:	b2eb      	uxtb	r3, r5
 800f5aa:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800f5ae:	493a      	ldr	r1, [pc, #232]	; (800f698 <RadioSetRxConfig+0x2f0>)
 800f5b0:	5d89      	ldrb	r1, [r1, r6]
 800f5b2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800f5b6:	9901      	ldr	r1, [sp, #4]
 800f5b8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f5bc:	b91e      	cbnz	r6, 800f5c6 <RadioSetRxConfig+0x21e>
 800f5be:	f1a5 020b 	sub.w	r2, r5, #11
 800f5c2:	2a01      	cmp	r2, #1
 800f5c4:	d945      	bls.n	800f652 <RadioSetRxConfig+0x2aa>
 800f5c6:	2e01      	cmp	r6, #1
 800f5c8:	d041      	beq.n	800f64e <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f5ca:	4a2f      	ldr	r2, [pc, #188]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f5d2:	4a2d      	ldr	r2, [pc, #180]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f5d8:	3b05      	subs	r3, #5
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	428b      	cmp	r3, r1
 800f5de:	d93d      	bls.n	800f65c <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f5e0:	4b29      	ldr	r3, [pc, #164]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f5e2:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f5e6:	4c28      	ldr	r4, [pc, #160]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f5e8:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f5ea:	4b28      	ldr	r3, [pc, #160]	; (800f68c <RadioSetRxConfig+0x2e4>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f5f0:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f5f4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800f5f8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f5fc:	f7ff f874 	bl	800e6e8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f600:	4625      	mov	r5, r4
 800f602:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 800f606:	3800      	subs	r0, #0
 800f608:	bf18      	it	ne
 800f60a:	2001      	movne	r0, #1
 800f60c:	f7ff fb30 	bl	800ec70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f610:	4628      	mov	r0, r5
 800f612:	f000 fb59 	bl	800fcc8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f616:	f104 000e 	add.w	r0, r4, #14
 800f61a:	f000 fd25 	bl	8010068 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f61e:	fa5f f08a 	uxtb.w	r0, sl
 800f622:	f000 fb17 	bl	800fc54 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f626:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d021      	beq.n	800f672 <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f62e:	f240 7036 	movw	r0, #1846	; 0x736
 800f632:	f000 fbd1 	bl	800fdd8 <SUBGRF_ReadRegister>
 800f636:	f040 0104 	orr.w	r1, r0, #4
 800f63a:	b2c9      	uxtb	r1, r1
 800f63c:	f240 7036 	movw	r0, #1846	; 0x736
 800f640:	f000 fada 	bl	800fbf8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800f644:	4b10      	ldr	r3, [pc, #64]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f64a:	609a      	str	r2, [r3, #8]
}
 800f64c:	e6d3      	b.n	800f3f6 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f64e:	2d0c      	cmp	r5, #12
 800f650:	d1bb      	bne.n	800f5ca <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f652:	4a0d      	ldr	r2, [pc, #52]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f654:	2101      	movs	r1, #1
 800f656:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f65a:	e7ba      	b.n	800f5d2 <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 800f65c:	f1b9 0f0b 	cmp.w	r9, #11
 800f660:	d803      	bhi.n	800f66a <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f662:	4613      	mov	r3, r2
 800f664:	220c      	movs	r2, #12
 800f666:	839a      	strh	r2, [r3, #28]
 800f668:	e7bd      	b.n	800f5e6 <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f66a:	4b07      	ldr	r3, [pc, #28]	; (800f688 <RadioSetRxConfig+0x2e0>)
 800f66c:	f8a3 901c 	strh.w	r9, [r3, #28]
 800f670:	e7b9      	b.n	800f5e6 <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f672:	f240 7036 	movw	r0, #1846	; 0x736
 800f676:	f000 fbaf 	bl	800fdd8 <SUBGRF_ReadRegister>
 800f67a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f67e:	f240 7036 	movw	r0, #1846	; 0x736
 800f682:	f000 fab9 	bl	800fbf8 <SUBGRF_WriteRegister>
 800f686:	e7dd      	b.n	800f644 <RadioSetRxConfig+0x29c>
 800f688:	200019e0 	.word	0x200019e0
 800f68c:	200000cc 	.word	0x200000cc
 800f690:	08011310 	.word	0x08011310
 800f694:	08011308 	.word	0x08011308
 800f698:	08011ee4 	.word	0x08011ee4

0800f69c <RadioRandom>:
{
 800f69c:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 800f69e:	2001      	movs	r0, #1
 800f6a0:	f7ff fae6 	bl	800ec70 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 f9e3 	bl	800fa76 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800f6b0:	f000 fd5c 	bl	801016c <SUBGRF_GetRandom>
}
 800f6b4:	bd08      	pop	{r3, pc}

0800f6b6 <RadioIsChannelFree>:
{
 800f6b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b8:	b08b      	sub	sp, #44	; 0x2c
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	460f      	mov	r7, r1
 800f6be:	4616      	mov	r6, r2
 800f6c0:	461d      	mov	r5, r3
    RadioStandby( );
 800f6c2:	f7ff f811 	bl	800e6e8 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	f7ff fad2 	bl	800ec70 <RadioSetModem>
    RadioSetChannel( freq );
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f7ff f9b3 	bl	800ea38 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d6:	2400      	movs	r4, #0
 800f6d8:	9408      	str	r4, [sp, #32]
 800f6da:	9407      	str	r4, [sp, #28]
 800f6dc:	9406      	str	r4, [sp, #24]
 800f6de:	9405      	str	r4, [sp, #20]
 800f6e0:	9404      	str	r4, [sp, #16]
 800f6e2:	9403      	str	r4, [sp, #12]
 800f6e4:	9402      	str	r4, [sp, #8]
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	9301      	str	r3, [sp, #4]
 800f6ea:	9700      	str	r7, [sp, #0]
 800f6ec:	4623      	mov	r3, r4
 800f6ee:	f44f 7216 	mov.w	r2, #600	; 0x258
 800f6f2:	4639      	mov	r1, r7
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f7ff fe57 	bl	800f3a8 <RadioSetRxConfig>
    RadioRx( 0 );
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f7ff f9b4 	bl	800ea68 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f700:	f7ff f96c 	bl	800e9dc <RadioGetWakeupTime>
 800f704:	f7f1 fef6 	bl	80014f4 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f708:	f001 fa74 	bl	8010bf4 <UTIL_TIMER_GetCurrentTime>
 800f70c:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f70e:	4620      	mov	r0, r4
 800f710:	f001 fa7a 	bl	8010c08 <UTIL_TIMER_GetElapsedTime>
 800f714:	42a8      	cmp	r0, r5
 800f716:	d206      	bcs.n	800f726 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800f718:	2000      	movs	r0, #0
 800f71a:	f7ff f96c 	bl	800e9f6 <RadioRssi>
        if( rssi > rssiThresh )
 800f71e:	42b0      	cmp	r0, r6
 800f720:	ddf5      	ble.n	800f70e <RadioIsChannelFree+0x58>
            status = false;
 800f722:	2400      	movs	r4, #0
 800f724:	e000      	b.n	800f728 <RadioIsChannelFree+0x72>
    bool status = true;
 800f726:	2401      	movs	r4, #1
    RadioStandby( );
 800f728:	f7fe ffde 	bl	800e6e8 <RadioStandby>
}
 800f72c:	4620      	mov	r0, r4
 800f72e:	b00b      	add	sp, #44	; 0x2c
 800f730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f734 <RadioInit>:
{
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	b082      	sub	sp, #8
    RadioEvents = events;
 800f738:	4b1d      	ldr	r3, [pc, #116]	; (800f7b0 <RadioInit+0x7c>)
 800f73a:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800f73c:	4b1d      	ldr	r3, [pc, #116]	; (800f7b4 <RadioInit+0x80>)
 800f73e:	2400      	movs	r4, #0
 800f740:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 800f742:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 800f744:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 800f746:	481c      	ldr	r0, [pc, #112]	; (800f7b8 <RadioInit+0x84>)
 800f748:	f000 fb6a 	bl	800fe20 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 800f74c:	4620      	mov	r0, r4
 800f74e:	f7ff fd31 	bl	800f1b4 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 800f752:	f000 f8fa 	bl	800f94a <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800f756:	4621      	mov	r1, r4
 800f758:	4620      	mov	r0, r4
 800f75a:	f000 f9f5 	bl	800fb48 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800f75e:	2204      	movs	r2, #4
 800f760:	4621      	mov	r1, r4
 800f762:	2001      	movs	r0, #1
 800f764:	f000 fbcd 	bl	800ff02 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f768:	4623      	mov	r3, r4
 800f76a:	4622      	mov	r2, r4
 800f76c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f770:	4608      	mov	r0, r1
 800f772:	f000 f980 	bl	800fa76 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800f776:	f7ff f9a9 	bl	800eacc <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800f77a:	4e10      	ldr	r6, [pc, #64]	; (800f7bc <RadioInit+0x88>)
 800f77c:	9400      	str	r4, [sp, #0]
 800f77e:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <RadioInit+0x8c>)
 800f780:	4622      	mov	r2, r4
 800f782:	f04f 31ff 	mov.w	r1, #4294967295
 800f786:	4630      	mov	r0, r6
 800f788:	f001 fa16 	bl	8010bb8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800f78c:	4d0d      	ldr	r5, [pc, #52]	; (800f7c4 <RadioInit+0x90>)
 800f78e:	9400      	str	r4, [sp, #0]
 800f790:	4b0d      	ldr	r3, [pc, #52]	; (800f7c8 <RadioInit+0x94>)
 800f792:	4622      	mov	r2, r4
 800f794:	f04f 31ff 	mov.w	r1, #4294967295
 800f798:	4628      	mov	r0, r5
 800f79a:	f001 fa0d 	bl	8010bb8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f001 fa68 	bl	8010c74 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f001 fa65 	bl	8010c74 <UTIL_TIMER_Stop>
}
 800f7aa:	b002      	add	sp, #8
 800f7ac:	bd70      	pop	{r4, r5, r6, pc}
 800f7ae:	bf00      	nop
 800f7b0:	20001144 	.word	0x20001144
 800f7b4:	200019e0 	.word	0x200019e0
 800f7b8:	0800e9c9 	.word	0x0800e9c9
 800f7bc:	20001a38 	.word	0x20001a38
 800f7c0:	0800e50d 	.word	0x0800e50d
 800f7c4:	20001a50 	.word	0x20001a50
 800f7c8:	0800e529 	.word	0x0800e529

0800f7cc <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7d0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f7d4:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f7d6:	460a      	mov	r2, r1
 800f7d8:	4601      	mov	r1, r0
 800f7da:	4803      	ldr	r0, [pc, #12]	; (800f7e8 <SUBGRF_WriteCommand+0x1c>)
 800f7dc:	f7f5 fa2c 	bl	8004c38 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7e0:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f7e4:	bd10      	pop	{r4, pc}
 800f7e6:	bf00      	nop
 800f7e8:	200018b4 	.word	0x200018b4

0800f7ec <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7f0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f7f4:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f7f6:	460a      	mov	r2, r1
 800f7f8:	4601      	mov	r1, r0
 800f7fa:	4803      	ldr	r0, [pc, #12]	; (800f808 <SUBGRF_ReadCommand+0x1c>)
 800f7fc:	f7f5 fa72 	bl	8004ce4 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f800:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f804:	bd10      	pop	{r4, pc}
 800f806:	bf00      	nop
 800f808:	200018b4 	.word	0x200018b4

0800f80c <SUBGRF_GetOperatingMode>:
}
 800f80c:	4b01      	ldr	r3, [pc, #4]	; (800f814 <SUBGRF_GetOperatingMode+0x8>)
 800f80e:	7818      	ldrb	r0, [r3, #0]
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	2000114e 	.word	0x2000114e

0800f818 <SUBGRF_SetStandby>:
{
 800f818:	b500      	push	{lr}
 800f81a:	b083      	sub	sp, #12
 800f81c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800f820:	2201      	movs	r2, #1
 800f822:	f10d 0107 	add.w	r1, sp, #7
 800f826:	2080      	movs	r0, #128	; 0x80
 800f828:	f7ff ffd0 	bl	800f7cc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800f82c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f830:	b92b      	cbnz	r3, 800f83e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800f832:	4b05      	ldr	r3, [pc, #20]	; (800f848 <SUBGRF_SetStandby+0x30>)
 800f834:	2201      	movs	r2, #1
 800f836:	701a      	strb	r2, [r3, #0]
}
 800f838:	b003      	add	sp, #12
 800f83a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800f83e:	4b02      	ldr	r3, [pc, #8]	; (800f848 <SUBGRF_SetStandby+0x30>)
 800f840:	2202      	movs	r2, #2
 800f842:	701a      	strb	r2, [r3, #0]
}
 800f844:	e7f8      	b.n	800f838 <SUBGRF_SetStandby+0x20>
 800f846:	bf00      	nop
 800f848:	2000114e 	.word	0x2000114e

0800f84c <SUBGRF_SetTx>:
{
 800f84c:	b500      	push	{lr}
 800f84e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800f850:	4b0a      	ldr	r3, [pc, #40]	; (800f87c <SUBGRF_SetTx+0x30>)
 800f852:	2204      	movs	r2, #4
 800f854:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f856:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f85a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f85e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f862:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f866:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800f86a:	2203      	movs	r2, #3
 800f86c:	a901      	add	r1, sp, #4
 800f86e:	2083      	movs	r0, #131	; 0x83
 800f870:	f7ff ffac 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f874:	b003      	add	sp, #12
 800f876:	f85d fb04 	ldr.w	pc, [sp], #4
 800f87a:	bf00      	nop
 800f87c:	2000114e 	.word	0x2000114e

0800f880 <SUBGRF_SetRx>:
{
 800f880:	b500      	push	{lr}
 800f882:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800f884:	4b0a      	ldr	r3, [pc, #40]	; (800f8b0 <SUBGRF_SetRx+0x30>)
 800f886:	2205      	movs	r2, #5
 800f888:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f88a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f88e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f892:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f896:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f89a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f89e:	2203      	movs	r2, #3
 800f8a0:	a901      	add	r1, sp, #4
 800f8a2:	2082      	movs	r0, #130	; 0x82
 800f8a4:	f7ff ff92 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f8a8:	b003      	add	sp, #12
 800f8aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8ae:	bf00      	nop
 800f8b0:	2000114e 	.word	0x2000114e

0800f8b4 <SUBGRF_SetRxDutyCycle>:
{
 800f8b4:	b500      	push	{lr}
 800f8b6:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800f8b8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f8bc:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800f8c0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f8c4:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800f8c8:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800f8cc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f8d0:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800f8d4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f8d8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800f8dc:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800f8e0:	2206      	movs	r2, #6
 800f8e2:	4669      	mov	r1, sp
 800f8e4:	2094      	movs	r0, #148	; 0x94
 800f8e6:	f7ff ff71 	bl	800f7cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800f8ea:	4b03      	ldr	r3, [pc, #12]	; (800f8f8 <SUBGRF_SetRxDutyCycle+0x44>)
 800f8ec:	2206      	movs	r2, #6
 800f8ee:	701a      	strb	r2, [r3, #0]
}
 800f8f0:	b003      	add	sp, #12
 800f8f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8f6:	bf00      	nop
 800f8f8:	2000114e 	.word	0x2000114e

0800f8fc <SUBGRF_SetCad>:
{
 800f8fc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800f8fe:	2200      	movs	r2, #0
 800f900:	4611      	mov	r1, r2
 800f902:	20c5      	movs	r0, #197	; 0xc5
 800f904:	f7ff ff62 	bl	800f7cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800f908:	4b01      	ldr	r3, [pc, #4]	; (800f910 <SUBGRF_SetCad+0x14>)
 800f90a:	2207      	movs	r2, #7
 800f90c:	701a      	strb	r2, [r3, #0]
}
 800f90e:	bd08      	pop	{r3, pc}
 800f910:	2000114e 	.word	0x2000114e

0800f914 <SUBGRF_SetTxContinuousWave>:
{
 800f914:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800f916:	2200      	movs	r2, #0
 800f918:	4611      	mov	r1, r2
 800f91a:	20d1      	movs	r0, #209	; 0xd1
 800f91c:	f7ff ff56 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f920:	bd08      	pop	{r3, pc}

0800f922 <SUBGRF_SetTxInfinitePreamble>:
{
 800f922:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800f924:	2200      	movs	r2, #0
 800f926:	4611      	mov	r1, r2
 800f928:	20d2      	movs	r0, #210	; 0xd2
 800f92a:	f7ff ff4f 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f92e:	bd08      	pop	{r3, pc}

0800f930 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800f930:	b500      	push	{lr}
 800f932:	b083      	sub	sp, #12
 800f934:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800f938:	2201      	movs	r2, #1
 800f93a:	f10d 0107 	add.w	r1, sp, #7
 800f93e:	209f      	movs	r0, #159	; 0x9f
 800f940:	f7ff ff44 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f944:	b003      	add	sp, #12
 800f946:	f85d fb04 	ldr.w	pc, [sp], #4

0800f94a <SUBGRF_SetRegulatorMode>:
{
 800f94a:	b500      	push	{lr}
 800f94c:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800f94e:	f7f2 fb15 	bl	8001f7c <RBI_IsDCDC>
 800f952:	2801      	cmp	r0, #1
 800f954:	d00b      	beq.n	800f96e <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800f956:	2300      	movs	r3, #0
 800f958:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800f95c:	2201      	movs	r2, #1
 800f95e:	f10d 0107 	add.w	r1, sp, #7
 800f962:	2096      	movs	r0, #150	; 0x96
 800f964:	f7ff ff32 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f968:	b003      	add	sp, #12
 800f96a:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800f96e:	2301      	movs	r3, #1
 800f970:	f88d 3007 	strb.w	r3, [sp, #7]
 800f974:	e7f2      	b.n	800f95c <SUBGRF_SetRegulatorMode+0x12>

0800f976 <SUBGRF_Calibrate>:
{
 800f976:	b500      	push	{lr}
 800f978:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f97a:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f97e:	f3c0 1340 	ubfx	r3, r0, #5, #1
 800f982:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f984:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f988:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f98c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f990:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f994:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f998:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f99c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f9a0:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f9a4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800f9a8:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f9ac:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f9ae:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f10d 0107 	add.w	r1, sp, #7
 800f9b8:	2089      	movs	r0, #137	; 0x89
 800f9ba:	f7ff ff07 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f9be:	b003      	add	sp, #12
 800f9c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800f9c4 <SUBGRF_CalibrateImage>:
{
 800f9c4:	b500      	push	{lr}
 800f9c6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800f9c8:	4b1c      	ldr	r3, [pc, #112]	; (800fa3c <SUBGRF_CalibrateImage+0x78>)
 800f9ca:	4298      	cmp	r0, r3
 800f9cc:	d90d      	bls.n	800f9ea <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800f9ce:	23e1      	movs	r3, #225	; 0xe1
 800f9d0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800f9d4:	23e9      	movs	r3, #233	; 0xe9
 800f9d6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800f9da:	2202      	movs	r2, #2
 800f9dc:	a901      	add	r1, sp, #4
 800f9de:	2098      	movs	r0, #152	; 0x98
 800f9e0:	f7ff fef4 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800f9e4:	b003      	add	sp, #12
 800f9e6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800f9ea:	4b15      	ldr	r3, [pc, #84]	; (800fa40 <SUBGRF_CalibrateImage+0x7c>)
 800f9ec:	4298      	cmp	r0, r3
 800f9ee:	d906      	bls.n	800f9fe <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800f9f0:	23d7      	movs	r3, #215	; 0xd7
 800f9f2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800f9f6:	23db      	movs	r3, #219	; 0xdb
 800f9f8:	f88d 3005 	strb.w	r3, [sp, #5]
 800f9fc:	e7ed      	b.n	800f9da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800f9fe:	4b11      	ldr	r3, [pc, #68]	; (800fa44 <SUBGRF_CalibrateImage+0x80>)
 800fa00:	4298      	cmp	r0, r3
 800fa02:	d906      	bls.n	800fa12 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800fa04:	23c1      	movs	r3, #193	; 0xc1
 800fa06:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800fa0a:	23c5      	movs	r3, #197	; 0xc5
 800fa0c:	f88d 3005 	strb.w	r3, [sp, #5]
 800fa10:	e7e3      	b.n	800f9da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800fa12:	4b0d      	ldr	r3, [pc, #52]	; (800fa48 <SUBGRF_CalibrateImage+0x84>)
 800fa14:	4298      	cmp	r0, r3
 800fa16:	d906      	bls.n	800fa26 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800fa18:	2375      	movs	r3, #117	; 0x75
 800fa1a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800fa1e:	2381      	movs	r3, #129	; 0x81
 800fa20:	f88d 3005 	strb.w	r3, [sp, #5]
 800fa24:	e7d9      	b.n	800f9da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800fa26:	4b09      	ldr	r3, [pc, #36]	; (800fa4c <SUBGRF_CalibrateImage+0x88>)
 800fa28:	4298      	cmp	r0, r3
 800fa2a:	d9d6      	bls.n	800f9da <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800fa2c:	236b      	movs	r3, #107	; 0x6b
 800fa2e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800fa32:	236f      	movs	r3, #111	; 0x6f
 800fa34:	f88d 3005 	strb.w	r3, [sp, #5]
 800fa38:	e7cf      	b.n	800f9da <SUBGRF_CalibrateImage+0x16>
 800fa3a:	bf00      	nop
 800fa3c:	35a4e900 	.word	0x35a4e900
 800fa40:	32a9f880 	.word	0x32a9f880
 800fa44:	2de54480 	.word	0x2de54480
 800fa48:	1b6b0b00 	.word	0x1b6b0b00
 800fa4c:	1954fc40 	.word	0x1954fc40

0800fa50 <SUBGRF_SetPaConfig>:
{
 800fa50:	b500      	push	{lr}
 800fa52:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800fa54:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800fa58:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800fa5c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800fa60:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800fa64:	2204      	movs	r2, #4
 800fa66:	eb0d 0102 	add.w	r1, sp, r2
 800fa6a:	2095      	movs	r0, #149	; 0x95
 800fa6c:	f7ff feae 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fa70:	b003      	add	sp, #12
 800fa72:	f85d fb04 	ldr.w	pc, [sp], #4

0800fa76 <SUBGRF_SetDioIrqParams>:
{
 800fa76:	b510      	push	{r4, lr}
 800fa78:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800fa7a:	0a04      	lsrs	r4, r0, #8
 800fa7c:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800fa80:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800fa84:	0a08      	lsrs	r0, r1, #8
 800fa86:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800fa8a:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800fa8e:	0a11      	lsrs	r1, r2, #8
 800fa90:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800fa94:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800fa98:	0a1a      	lsrs	r2, r3, #8
 800fa9a:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800fa9e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800faa2:	2208      	movs	r2, #8
 800faa4:	4669      	mov	r1, sp
 800faa6:	4610      	mov	r0, r2
 800faa8:	f7ff fe90 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800faac:	b002      	add	sp, #8
 800faae:	bd10      	pop	{r4, pc}

0800fab0 <SUBGRF_SetTcxoMode>:
{
 800fab0:	b500      	push	{lr}
 800fab2:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800fab4:	f000 0007 	and.w	r0, r0, #7
 800fab8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fabc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fac0:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fac4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800fac8:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800facc:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800fad0:	2204      	movs	r2, #4
 800fad2:	eb0d 0102 	add.w	r1, sp, r2
 800fad6:	2097      	movs	r0, #151	; 0x97
 800fad8:	f7ff fe78 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fadc:	b003      	add	sp, #12
 800fade:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fae4 <SUBGRF_SetRfFrequency>:
{
 800fae4:	b510      	push	{r4, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800faea:	4b12      	ldr	r3, [pc, #72]	; (800fb34 <SUBGRF_SetRfFrequency+0x50>)
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	b1d3      	cbz	r3, 800fb26 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800faf0:	4a11      	ldr	r2, [pc, #68]	; (800fb38 <SUBGRF_SetRfFrequency+0x54>)
 800faf2:	2300      	movs	r3, #0
 800faf4:	0660      	lsls	r0, r4, #25
 800faf6:	09e1      	lsrs	r1, r4, #7
 800faf8:	f7f1 f830 	bl	8000b5c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800fafc:	0e03      	lsrs	r3, r0, #24
 800fafe:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800fb02:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fb06:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800fb0a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fb0e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800fb12:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800fb16:	2204      	movs	r2, #4
 800fb18:	eb0d 0102 	add.w	r1, sp, r2
 800fb1c:	2086      	movs	r0, #134	; 0x86
 800fb1e:	f7ff fe55 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fb22:	b002      	add	sp, #8
 800fb24:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800fb26:	f7ff ff4d 	bl	800f9c4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800fb2a:	4b02      	ldr	r3, [pc, #8]	; (800fb34 <SUBGRF_SetRfFrequency+0x50>)
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	e7de      	b.n	800faf0 <SUBGRF_SetRfFrequency+0xc>
 800fb32:	bf00      	nop
 800fb34:	2000114c 	.word	0x2000114c
 800fb38:	01e84800 	.word	0x01e84800

0800fb3c <SUBGRF_GetPacketType>:
}
 800fb3c:	4b01      	ldr	r3, [pc, #4]	; (800fb44 <SUBGRF_GetPacketType+0x8>)
 800fb3e:	7818      	ldrb	r0, [r3, #0]
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	2000114f 	.word	0x2000114f

0800fb48 <SUBGRF_SetBufferBaseAddress>:
{
 800fb48:	b500      	push	{lr}
 800fb4a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800fb4c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800fb50:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800fb54:	2202      	movs	r2, #2
 800fb56:	a901      	add	r1, sp, #4
 800fb58:	208f      	movs	r0, #143	; 0x8f
 800fb5a:	f7ff fe37 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fb5e:	b003      	add	sp, #12
 800fb60:	f85d fb04 	ldr.w	pc, [sp], #4

0800fb64 <SUBGRF_GetRssiInst>:
{
 800fb64:	b500      	push	{lr}
 800fb66:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800fb68:	2201      	movs	r2, #1
 800fb6a:	a901      	add	r1, sp, #4
 800fb6c:	2015      	movs	r0, #21
 800fb6e:	f7ff fe3d 	bl	800f7ec <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800fb72:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800fb76:	4240      	negs	r0, r0
}
 800fb78:	1040      	asrs	r0, r0, #1
 800fb7a:	b003      	add	sp, #12
 800fb7c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fb80 <SUBGRF_GetPacketStatus>:
{
 800fb80:	b510      	push	{r4, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800fb86:	2203      	movs	r2, #3
 800fb88:	a901      	add	r1, sp, #4
 800fb8a:	2014      	movs	r0, #20
 800fb8c:	f7ff fe2e 	bl	800f7ec <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800fb90:	f7ff ffd4 	bl	800fb3c <SUBGRF_GetPacketType>
 800fb94:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800fb96:	b148      	cbz	r0, 800fbac <SUBGRF_GetPacketStatus+0x2c>
 800fb98:	2801      	cmp	r0, #1
 800fb9a:	d018      	beq.n	800fbce <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800fb9c:	2214      	movs	r2, #20
 800fb9e:	2100      	movs	r1, #0
 800fba0:	4620      	mov	r0, r4
 800fba2:	f000 fe4b 	bl	801083c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800fba6:	230f      	movs	r3, #15
 800fba8:	7023      	strb	r3, [r4, #0]
}
 800fbaa:	e00e      	b.n	800fbca <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800fbac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fbb0:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800fbb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fbb6:	425b      	negs	r3, r3
 800fbb8:	105b      	asrs	r3, r3, #1
 800fbba:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800fbbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbc0:	425b      	negs	r3, r3
 800fbc2:	105b      	asrs	r3, r3, #1
 800fbc4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	60a3      	str	r3, [r4, #8]
}
 800fbca:	b002      	add	sp, #8
 800fbcc:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800fbce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fbd2:	425b      	negs	r3, r3
 800fbd4:	105b      	asrs	r3, r3, #1
 800fbd6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800fbd8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800fbdc:	3302      	adds	r3, #2
 800fbde:	109b      	asrs	r3, r3, #2
 800fbe0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800fbe2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbe6:	425b      	negs	r3, r3
 800fbe8:	105b      	asrs	r3, r3, #1
 800fbea:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800fbec:	4b01      	ldr	r3, [pc, #4]	; (800fbf4 <SUBGRF_GetPacketStatus+0x74>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6123      	str	r3, [r4, #16]
            break;
 800fbf2:	e7ea      	b.n	800fbca <SUBGRF_GetPacketStatus+0x4a>
 800fbf4:	20001148 	.word	0x20001148

0800fbf8 <SUBGRF_WriteRegister>:
{
 800fbf8:	b500      	push	{lr}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800fc00:	2301      	movs	r3, #1
 800fc02:	f10d 0207 	add.w	r2, sp, #7
 800fc06:	4601      	mov	r1, r0
 800fc08:	4802      	ldr	r0, [pc, #8]	; (800fc14 <SUBGRF_WriteRegister+0x1c>)
 800fc0a:	f7f4 ff71 	bl	8004af0 <HAL_SUBGHZ_WriteRegisters>
}
 800fc0e:	b003      	add	sp, #12
 800fc10:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc14:	200018b4 	.word	0x200018b4

0800fc18 <SUBGRF_SetRxBoosted>:
{
 800fc18:	b510      	push	{r4, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800fc1e:	4b0c      	ldr	r3, [pc, #48]	; (800fc50 <SUBGRF_SetRxBoosted+0x38>)
 800fc20:	2205      	movs	r2, #5
 800fc22:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800fc24:	2197      	movs	r1, #151	; 0x97
 800fc26:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800fc2a:	f7ff ffe5 	bl	800fbf8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fc2e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fc32:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fc36:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800fc3a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fc3e:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fc42:	2203      	movs	r2, #3
 800fc44:	a901      	add	r1, sp, #4
 800fc46:	2082      	movs	r0, #130	; 0x82
 800fc48:	f7ff fdc0 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fc4c:	b002      	add	sp, #8
 800fc4e:	bd10      	pop	{r4, pc}
 800fc50:	2000114e 	.word	0x2000114e

0800fc54 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800fc54:	b500      	push	{lr}
 800fc56:	b083      	sub	sp, #12
 800fc58:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	f10d 0107 	add.w	r1, sp, #7
 800fc62:	20a0      	movs	r0, #160	; 0xa0
 800fc64:	f7ff fdb2 	bl	800f7cc <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800fc68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc6c:	2b3f      	cmp	r3, #63	; 0x3f
 800fc6e:	d90f      	bls.n	800fc90 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800fc70:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800fc72:	2200      	movs	r2, #0
        while( mant > 31 )
 800fc74:	2b1f      	cmp	r3, #31
 800fc76:	d903      	bls.n	800fc80 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 800fc78:	089b      	lsrs	r3, r3, #2
            exp++;
 800fc7a:	1c51      	adds	r1, r2, #1
 800fc7c:	b2ca      	uxtb	r2, r1
 800fc7e:	e7f9      	b.n	800fc74 <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 800fc80:	00d9      	lsls	r1, r3, #3
 800fc82:	b2c9      	uxtb	r1, r1
 800fc84:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800fc86:	b2c9      	uxtb	r1, r1
 800fc88:	f240 7006 	movw	r0, #1798	; 0x706
 800fc8c:	f7ff ffb4 	bl	800fbf8 <SUBGRF_WriteRegister>
}
 800fc90:	b003      	add	sp, #12
 800fc92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fc98 <SUBGRF_SetPacketType>:
{
 800fc98:	b500      	push	{lr}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800fca0:	4b08      	ldr	r3, [pc, #32]	; (800fcc4 <SUBGRF_SetPacketType+0x2c>)
 800fca2:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800fca4:	b140      	cbz	r0, 800fcb8 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800fca6:	2201      	movs	r2, #1
 800fca8:	f10d 0107 	add.w	r1, sp, #7
 800fcac:	208a      	movs	r0, #138	; 0x8a
 800fcae:	f7ff fd8d 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fcb2:	b003      	add	sp, #12
 800fcb4:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800fcb8:	2100      	movs	r1, #0
 800fcba:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800fcbe:	f7ff ff9b 	bl	800fbf8 <SUBGRF_WriteRegister>
 800fcc2:	e7f0      	b.n	800fca6 <SUBGRF_SetPacketType+0xe>
 800fcc4:	2000114f 	.word	0x2000114f

0800fcc8 <SUBGRF_SetModulationParams>:
{
 800fcc8:	b510      	push	{r4, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800fcce:	4b3e      	ldr	r3, [pc, #248]	; (800fdc8 <SUBGRF_SetModulationParams+0x100>)
 800fcd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fcd4:	ab02      	add	r3, sp, #8
 800fcd6:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800fcda:	7820      	ldrb	r0, [r4, #0]
 800fcdc:	4b3b      	ldr	r3, [pc, #236]	; (800fdcc <SUBGRF_SetModulationParams+0x104>)
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	4298      	cmp	r0, r3
 800fce2:	d106      	bne.n	800fcf2 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800fce4:	7823      	ldrb	r3, [r4, #0]
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	d82c      	bhi.n	800fd44 <SUBGRF_SetModulationParams+0x7c>
 800fcea:	e8df f003 	tbb	[pc, r3]
 800fcee:	4205      	.short	0x4205
 800fcf0:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800fcf2:	f7ff ffd1 	bl	800fc98 <SUBGRF_SetPacketType>
 800fcf6:	e7f5      	b.n	800fce4 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800fcf8:	6862      	ldr	r2, [r4, #4]
 800fcfa:	4b35      	ldr	r3, [pc, #212]	; (800fdd0 <SUBGRF_SetModulationParams+0x108>)
 800fcfc:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fd00:	0c1a      	lsrs	r2, r3, #16
 800fd02:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fd06:	0a1a      	lsrs	r2, r3, #8
 800fd08:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fd0c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fd10:	7b23      	ldrb	r3, [r4, #12]
 800fd12:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fd16:	7b63      	ldrb	r3, [r4, #13]
 800fd18:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800fd1c:	68a1      	ldr	r1, [r4, #8]
 800fd1e:	4a2d      	ldr	r2, [pc, #180]	; (800fdd4 <SUBGRF_SetModulationParams+0x10c>)
 800fd20:	2300      	movs	r3, #0
 800fd22:	0648      	lsls	r0, r1, #25
 800fd24:	09c9      	lsrs	r1, r1, #7
 800fd26:	f7f0 ff19 	bl	8000b5c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800fd2a:	0c03      	lsrs	r3, r0, #16
 800fd2c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800fd30:	0a03      	lsrs	r3, r0, #8
 800fd32:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800fd36:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fd3a:	2208      	movs	r2, #8
 800fd3c:	4669      	mov	r1, sp
 800fd3e:	208b      	movs	r0, #139	; 0x8b
 800fd40:	f7ff fd44 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fd44:	b002      	add	sp, #8
 800fd46:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800fd48:	6922      	ldr	r2, [r4, #16]
 800fd4a:	4b21      	ldr	r3, [pc, #132]	; (800fdd0 <SUBGRF_SetModulationParams+0x108>)
 800fd4c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fd50:	0c1a      	lsrs	r2, r3, #16
 800fd52:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fd56:	0a1a      	lsrs	r2, r3, #8
 800fd58:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fd5c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800fd60:	7d23      	ldrb	r3, [r4, #20]
 800fd62:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fd66:	2204      	movs	r2, #4
 800fd68:	4669      	mov	r1, sp
 800fd6a:	208b      	movs	r0, #139	; 0x8b
 800fd6c:	f7ff fd2e 	bl	800f7cc <SUBGRF_WriteCommand>
        break;
 800fd70:	e7e8      	b.n	800fd44 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800fd72:	7e23      	ldrb	r3, [r4, #24]
 800fd74:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800fd78:	7e63      	ldrb	r3, [r4, #25]
 800fd7a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800fd7e:	7ea3      	ldrb	r3, [r4, #26]
 800fd80:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800fd84:	7ee3      	ldrb	r3, [r4, #27]
 800fd86:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	4669      	mov	r1, sp
 800fd8e:	208b      	movs	r0, #139	; 0x8b
 800fd90:	f7ff fd1c 	bl	800f7cc <SUBGRF_WriteCommand>
        break;
 800fd94:	e7d6      	b.n	800fd44 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800fd96:	6862      	ldr	r2, [r4, #4]
 800fd98:	4b0d      	ldr	r3, [pc, #52]	; (800fdd0 <SUBGRF_SetModulationParams+0x108>)
 800fd9a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fd9e:	0c1a      	lsrs	r2, r3, #16
 800fda0:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fda4:	0a1a      	lsrs	r2, r3, #8
 800fda6:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fdaa:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fdae:	7b23      	ldrb	r3, [r4, #12]
 800fdb0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fdb4:	7b63      	ldrb	r3, [r4, #13]
 800fdb6:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fdba:	2205      	movs	r2, #5
 800fdbc:	4669      	mov	r1, sp
 800fdbe:	208b      	movs	r0, #139	; 0x8b
 800fdc0:	f7ff fd04 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800fdc4:	e7be      	b.n	800fd44 <SUBGRF_SetModulationParams+0x7c>
 800fdc6:	bf00      	nop
 800fdc8:	08011318 	.word	0x08011318
 800fdcc:	2000114f 	.word	0x2000114f
 800fdd0:	3d090000 	.word	0x3d090000
 800fdd4:	01e84800 	.word	0x01e84800

0800fdd8 <SUBGRF_ReadRegister>:
{
 800fdd8:	b500      	push	{lr}
 800fdda:	b083      	sub	sp, #12
 800fddc:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800fdde:	2301      	movs	r3, #1
 800fde0:	f10d 0207 	add.w	r2, sp, #7
 800fde4:	4803      	ldr	r0, [pc, #12]	; (800fdf4 <SUBGRF_ReadRegister+0x1c>)
 800fde6:	f7f4 fed3 	bl	8004b90 <HAL_SUBGHZ_ReadRegisters>
}
 800fdea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fdee:	b003      	add	sp, #12
 800fdf0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdf4:	200018b4 	.word	0x200018b4

0800fdf8 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800fdf8:	b510      	push	{r4, lr}
 800fdfa:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800fdfc:	f7f2 f8be 	bl	8001f7c <RBI_IsDCDC>
 800fe00:	2801      	cmp	r0, #1
 800fe02:	d000      	beq.n	800fe06 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800fe04:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800fe06:	f640 1023 	movw	r0, #2339	; 0x923
 800fe0a:	f7ff ffe5 	bl	800fdd8 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800fe0e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800fe12:	4321      	orrs	r1, r4
 800fe14:	f640 1023 	movw	r0, #2339	; 0x923
 800fe18:	f7ff feee 	bl	800fbf8 <SUBGRF_WriteRegister>
}
 800fe1c:	e7f2      	b.n	800fe04 <Radio_SMPS_Set+0xc>
	...

0800fe20 <SUBGRF_Init>:
{
 800fe20:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800fe22:	b108      	cbz	r0, 800fe28 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800fe24:	4a16      	ldr	r2, [pc, #88]	; (800fe80 <SUBGRF_Init+0x60>)
 800fe26:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800fe28:	f7f1 fa64 	bl	80012f4 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fe2c:	2002      	movs	r0, #2
 800fe2e:	f7ff ffe3 	bl	800fdf8 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800fe32:	2000      	movs	r0, #0
 800fe34:	4b13      	ldr	r3, [pc, #76]	; (800fe84 <SUBGRF_Init+0x64>)
 800fe36:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800fe38:	f7ff fcee 	bl	800f818 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800fe3c:	f7f2 f89a 	bl	8001f74 <RBI_IsTCXO>
 800fe40:	2801      	cmp	r0, #1
 800fe42:	d00f      	beq.n	800fe64 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fe44:	2120      	movs	r1, #32
 800fe46:	f640 1011 	movw	r0, #2321	; 0x911
 800fe4a:	f7ff fed5 	bl	800fbf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fe4e:	2120      	movs	r1, #32
 800fe50:	f640 1012 	movw	r0, #2322	; 0x912
 800fe54:	f7ff fed0 	bl	800fbf8 <SUBGRF_WriteRegister>
    RBI_Init();
 800fe58:	f7f2 f880 	bl	8001f5c <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800fe5c:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <SUBGRF_Init+0x68>)
 800fe5e:	2201      	movs	r2, #1
 800fe60:	701a      	strb	r2, [r3, #0]
}
 800fe62:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800fe64:	2140      	movs	r1, #64	; 0x40
 800fe66:	f7ff fe23 	bl	800fab0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	f640 1011 	movw	r0, #2321	; 0x911
 800fe70:	f7ff fec2 	bl	800fbf8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800fe74:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800fe78:	f7ff fd7d 	bl	800f976 <SUBGRF_Calibrate>
 800fe7c:	e7ec      	b.n	800fe58 <SUBGRF_Init+0x38>
 800fe7e:	bf00      	nop
 800fe80:	20001150 	.word	0x20001150
 800fe84:	2000114c 	.word	0x2000114c
 800fe88:	2000114e 	.word	0x2000114e

0800fe8c <SUBGRF_SetSleep>:
{
 800fe8c:	b510      	push	{r4, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800fe92:	2000      	movs	r0, #0
 800fe94:	f7f2 f866 	bl	8001f64 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fe98:	2002      	movs	r0, #2
 800fe9a:	f7ff ffad 	bl	800fdf8 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fe9e:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fea2:	f3c4 0340 	ubfx	r3, r4, #1, #1
 800fea6:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fea8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800feac:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800feb0:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800feb2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800feb6:	2201      	movs	r2, #1
 800feb8:	f10d 0107 	add.w	r1, sp, #7
 800febc:	2084      	movs	r0, #132	; 0x84
 800febe:	f7ff fc85 	bl	800f7cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800fec2:	4b02      	ldr	r3, [pc, #8]	; (800fecc <SUBGRF_SetSleep+0x40>)
 800fec4:	2200      	movs	r2, #0
 800fec6:	701a      	strb	r2, [r3, #0]
}
 800fec8:	b002      	add	sp, #8
 800feca:	bd10      	pop	{r4, pc}
 800fecc:	2000114e 	.word	0x2000114e

0800fed0 <SUBGRF_SetWhiteningSeed>:
{
 800fed0:	b510      	push	{r4, lr}
 800fed2:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800fed4:	f7ff fe32 	bl	800fb3c <SUBGRF_GetPacketType>
 800fed8:	b100      	cbz	r0, 800fedc <SUBGRF_SetWhiteningSeed+0xc>
}
 800feda:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800fedc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fee0:	f7ff ff7a 	bl	800fdd8 <SUBGRF_ReadRegister>
 800fee4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800fee8:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800feec:	4301      	orrs	r1, r0
 800feee:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fef2:	f7ff fe81 	bl	800fbf8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800fef6:	b2e1      	uxtb	r1, r4
 800fef8:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800fefc:	f7ff fe7c 	bl	800fbf8 <SUBGRF_WriteRegister>
}
 800ff00:	e7eb      	b.n	800feda <SUBGRF_SetWhiteningSeed+0xa>

0800ff02 <SUBGRF_SetTxParams>:
{
 800ff02:	b530      	push	{r4, r5, lr}
 800ff04:	b083      	sub	sp, #12
 800ff06:	460c      	mov	r4, r1
 800ff08:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 800ff0a:	2801      	cmp	r0, #1
 800ff0c:	d127      	bne.n	800ff5e <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 800ff0e:	290f      	cmp	r1, #15
 800ff10:	d00d      	beq.n	800ff2e <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800ff12:	2301      	movs	r3, #1
 800ff14:	461a      	mov	r2, r3
 800ff16:	2100      	movs	r1, #0
 800ff18:	2004      	movs	r0, #4
 800ff1a:	f7ff fd99 	bl	800fa50 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 800ff1e:	2c0d      	cmp	r4, #13
 800ff20:	dc0c      	bgt.n	800ff3c <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 800ff22:	f114 0f11 	cmn.w	r4, #17
 800ff26:	da0a      	bge.n	800ff3e <SUBGRF_SetTxParams+0x3c>
            power = -17;
 800ff28:	f06f 0410 	mvn.w	r4, #16
 800ff2c:	e007      	b.n	800ff3e <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800ff2e:	2301      	movs	r3, #1
 800ff30:	461a      	mov	r2, r3
 800ff32:	2100      	movs	r1, #0
 800ff34:	2006      	movs	r0, #6
 800ff36:	f7ff fd8b 	bl	800fa50 <SUBGRF_SetPaConfig>
 800ff3a:	e7f0      	b.n	800ff1e <SUBGRF_SetTxParams+0x1c>
            power = 14;
 800ff3c:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800ff3e:	2118      	movs	r1, #24
 800ff40:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ff44:	f7ff fe58 	bl	800fbf8 <SUBGRF_WriteRegister>
    buf[0] = power;
 800ff48:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 800ff4c:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ff50:	2202      	movs	r2, #2
 800ff52:	a901      	add	r1, sp, #4
 800ff54:	208e      	movs	r0, #142	; 0x8e
 800ff56:	f7ff fc39 	bl	800f7cc <SUBGRF_WriteCommand>
}
 800ff5a:	b003      	add	sp, #12
 800ff5c:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800ff5e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ff62:	f7ff ff39 	bl	800fdd8 <SUBGRF_ReadRegister>
 800ff66:	f040 011e 	orr.w	r1, r0, #30
 800ff6a:	b2c9      	uxtb	r1, r1
 800ff6c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ff70:	f7ff fe42 	bl	800fbf8 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800ff74:	2301      	movs	r3, #1
 800ff76:	2200      	movs	r2, #0
 800ff78:	2107      	movs	r1, #7
 800ff7a:	2004      	movs	r0, #4
 800ff7c:	f7ff fd68 	bl	800fa50 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800ff80:	2c16      	cmp	r4, #22
 800ff82:	dc05      	bgt.n	800ff90 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 800ff84:	f114 0f09 	cmn.w	r4, #9
 800ff88:	da03      	bge.n	800ff92 <SUBGRF_SetTxParams+0x90>
            power = -9;
 800ff8a:	f06f 0408 	mvn.w	r4, #8
 800ff8e:	e000      	b.n	800ff92 <SUBGRF_SetTxParams+0x90>
            power = 22;
 800ff90:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800ff92:	2138      	movs	r1, #56	; 0x38
 800ff94:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ff98:	f7ff fe2e 	bl	800fbf8 <SUBGRF_WriteRegister>
 800ff9c:	e7d4      	b.n	800ff48 <SUBGRF_SetTxParams+0x46>
	...

0800ffa0 <SUBGRF_GetRxBufferStatus>:
{
 800ffa0:	b530      	push	{r4, r5, lr}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	4605      	mov	r5, r0
 800ffa6:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ffa8:	2202      	movs	r2, #2
 800ffaa:	a901      	add	r1, sp, #4
 800ffac:	2013      	movs	r0, #19
 800ffae:	f7ff fc1d 	bl	800f7ec <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ffb2:	f7ff fdc3 	bl	800fb3c <SUBGRF_GetPacketType>
 800ffb6:	2801      	cmp	r0, #1
 800ffb8:	d007      	beq.n	800ffca <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800ffba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ffbe:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800ffc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ffc4:	7023      	strb	r3, [r4, #0]
}
 800ffc6:	b003      	add	sp, #12
 800ffc8:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ffca:	4b05      	ldr	r3, [pc, #20]	; (800ffe0 <SUBGRF_GetRxBufferStatus+0x40>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d1f2      	bne.n	800ffba <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ffd4:	f240 7002 	movw	r0, #1794	; 0x702
 800ffd8:	f7ff fefe 	bl	800fdd8 <SUBGRF_ReadRegister>
 800ffdc:	7028      	strb	r0, [r5, #0]
 800ffde:	e7ef      	b.n	800ffc0 <SUBGRF_GetRxBufferStatus+0x20>
 800ffe0:	2000114d 	.word	0x2000114d

0800ffe4 <SUBGRF_WriteRegisters>:
{
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffe8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ffec:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ffee:	460a      	mov	r2, r1
 800fff0:	4601      	mov	r1, r0
 800fff2:	4803      	ldr	r0, [pc, #12]	; (8010000 <SUBGRF_WriteRegisters+0x1c>)
 800fff4:	f7f4 fd7c 	bl	8004af0 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fff8:	f384 8810 	msr	PRIMASK, r4
}
 800fffc:	bd10      	pop	{r4, pc}
 800fffe:	bf00      	nop
 8010000:	200018b4 	.word	0x200018b4

08010004 <SUBGRF_SetSyncWord>:
{
 8010004:	b508      	push	{r3, lr}
 8010006:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010008:	2208      	movs	r2, #8
 801000a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801000e:	f7ff ffe9 	bl	800ffe4 <SUBGRF_WriteRegisters>
}
 8010012:	2000      	movs	r0, #0
 8010014:	bd08      	pop	{r3, pc}

08010016 <SUBGRF_SetCrcSeed>:
{
 8010016:	b500      	push	{lr}
 8010018:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801001a:	0a03      	lsrs	r3, r0, #8
 801001c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8010020:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010024:	f7ff fd8a 	bl	800fb3c <SUBGRF_GetPacketType>
 8010028:	b110      	cbz	r0, 8010030 <SUBGRF_SetCrcSeed+0x1a>
}
 801002a:	b003      	add	sp, #12
 801002c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8010030:	2202      	movs	r2, #2
 8010032:	a901      	add	r1, sp, #4
 8010034:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8010038:	f7ff ffd4 	bl	800ffe4 <SUBGRF_WriteRegisters>
}
 801003c:	e7f5      	b.n	801002a <SUBGRF_SetCrcSeed+0x14>

0801003e <SUBGRF_SetCrcPolynomial>:
{
 801003e:	b500      	push	{lr}
 8010040:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8010042:	0a03      	lsrs	r3, r0, #8
 8010044:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8010048:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 801004c:	f7ff fd76 	bl	800fb3c <SUBGRF_GetPacketType>
 8010050:	b110      	cbz	r0, 8010058 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8010052:	b003      	add	sp, #12
 8010054:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8010058:	2202      	movs	r2, #2
 801005a:	a901      	add	r1, sp, #4
 801005c:	f240 60be 	movw	r0, #1726	; 0x6be
 8010060:	f7ff ffc0 	bl	800ffe4 <SUBGRF_WriteRegisters>
}
 8010064:	e7f5      	b.n	8010052 <SUBGRF_SetCrcPolynomial+0x14>
	...

08010068 <SUBGRF_SetPacketParams>:
{
 8010068:	b510      	push	{r4, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801006e:	ab01      	add	r3, sp, #4
 8010070:	4a33      	ldr	r2, [pc, #204]	; (8010140 <SUBGRF_SetPacketParams+0xd8>)
 8010072:	ca07      	ldmia	r2, {r0, r1, r2}
 8010074:	c303      	stmia	r3!, {r0, r1}
 8010076:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8010078:	7820      	ldrb	r0, [r4, #0]
 801007a:	4b32      	ldr	r3, [pc, #200]	; (8010144 <SUBGRF_SetPacketParams+0xdc>)
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	4298      	cmp	r0, r3
 8010080:	d106      	bne.n	8010090 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8010082:	7823      	ldrb	r3, [r4, #0]
 8010084:	2b03      	cmp	r3, #3
 8010086:	d82a      	bhi.n	80100de <SUBGRF_SetPacketParams+0x76>
 8010088:	e8df f003 	tbb	[pc, r3]
 801008c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010090:	f7ff fe02 	bl	800fc98 <SUBGRF_SetPacketType>
 8010094:	e7f5      	b.n	8010082 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8010096:	7a63      	ldrb	r3, [r4, #9]
 8010098:	2bf1      	cmp	r3, #241	; 0xf1
 801009a:	d022      	beq.n	80100e2 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801009c:	2bf2      	cmp	r3, #242	; 0xf2
 801009e:	d02a      	beq.n	80100f6 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80100a0:	8862      	ldrh	r2, [r4, #2]
 80100a2:	0a11      	lsrs	r1, r2, #8
 80100a4:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80100a8:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80100ac:	7922      	ldrb	r2, [r4, #4]
 80100ae:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80100b2:	7962      	ldrb	r2, [r4, #5]
 80100b4:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80100b8:	79a2      	ldrb	r2, [r4, #6]
 80100ba:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80100be:	79e2      	ldrb	r2, [r4, #7]
 80100c0:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80100c4:	7a22      	ldrb	r2, [r4, #8]
 80100c6:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80100ca:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80100ce:	7aa3      	ldrb	r3, [r4, #10]
 80100d0:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80100d4:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80100d6:	a901      	add	r1, sp, #4
 80100d8:	208c      	movs	r0, #140	; 0x8c
 80100da:	f7ff fb77 	bl	800f7cc <SUBGRF_WriteCommand>
}
 80100de:	b004      	add	sp, #16
 80100e0:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80100e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80100e6:	f7ff ff96 	bl	8010016 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80100ea:	f248 0005 	movw	r0, #32773	; 0x8005
 80100ee:	f7ff ffa6 	bl	801003e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80100f2:	2302      	movs	r3, #2
 80100f4:	e7d4      	b.n	80100a0 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80100f6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80100fa:	f7ff ff8c 	bl	8010016 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80100fe:	f241 0021 	movw	r0, #4129	; 0x1021
 8010102:	f7ff ff9c 	bl	801003e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8010106:	2306      	movs	r3, #6
 8010108:	e7ca      	b.n	80100a0 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801010a:	7b23      	ldrb	r3, [r4, #12]
 801010c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8010110:	2201      	movs	r2, #1
        break;
 8010112:	e7e0      	b.n	80100d6 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8010114:	89e3      	ldrh	r3, [r4, #14]
 8010116:	0a1a      	lsrs	r2, r3, #8
 8010118:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801011c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8010120:	7c23      	ldrb	r3, [r4, #16]
 8010122:	4a09      	ldr	r2, [pc, #36]	; (8010148 <SUBGRF_SetPacketParams+0xe0>)
 8010124:	7013      	strb	r3, [r2, #0]
 8010126:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801012a:	7c63      	ldrb	r3, [r4, #17]
 801012c:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010130:	7ca3      	ldrb	r3, [r4, #18]
 8010132:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8010136:	7ce3      	ldrb	r3, [r4, #19]
 8010138:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 801013c:	2206      	movs	r2, #6
        break;
 801013e:	e7ca      	b.n	80100d6 <SUBGRF_SetPacketParams+0x6e>
 8010140:	08011320 	.word	0x08011320
 8010144:	2000114f 	.word	0x2000114f
 8010148:	2000114d 	.word	0x2000114d

0801014c <SUBGRF_ReadRegisters>:
{
 801014c:	b510      	push	{r4, lr}
 801014e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010150:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010154:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8010156:	460a      	mov	r2, r1
 8010158:	4601      	mov	r1, r0
 801015a:	4803      	ldr	r0, [pc, #12]	; (8010168 <SUBGRF_ReadRegisters+0x1c>)
 801015c:	f7f4 fd18 	bl	8004b90 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010160:	f384 8810 	msr	PRIMASK, r4
}
 8010164:	bd10      	pop	{r4, pc}
 8010166:	bf00      	nop
 8010168:	200018b4 	.word	0x200018b4

0801016c <SUBGRF_GetRandom>:
{
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010170:	2600      	movs	r6, #0
 8010172:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010174:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010178:	f7ff fe2e 	bl	800fdd8 <SUBGRF_ReadRegister>
 801017c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801017e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8010182:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010186:	f7ff fd37 	bl	800fbf8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801018a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801018e:	f7ff fe23 	bl	800fdd8 <SUBGRF_ReadRegister>
 8010192:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8010194:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8010198:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801019c:	f7ff fd2c 	bl	800fbf8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80101a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80101a4:	f7ff fb6c 	bl	800f880 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80101a8:	2204      	movs	r2, #4
 80101aa:	eb0d 0102 	add.w	r1, sp, r2
 80101ae:	f640 0019 	movw	r0, #2073	; 0x819
 80101b2:	f7ff ffcb 	bl	801014c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80101b6:	4630      	mov	r0, r6
 80101b8:	f7ff fb2e 	bl	800f818 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80101bc:	4629      	mov	r1, r5
 80101be:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80101c2:	f7ff fd19 	bl	800fbf8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80101c6:	4621      	mov	r1, r4
 80101c8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80101cc:	f7ff fd14 	bl	800fbf8 <SUBGRF_WriteRegister>
}
 80101d0:	9801      	ldr	r0, [sp, #4]
 80101d2:	b002      	add	sp, #8
 80101d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080101d8 <SUBGRF_WriteBuffer>:
{
 80101d8:	b510      	push	{r4, lr}
 80101da:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101e0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80101e2:	460a      	mov	r2, r1
 80101e4:	4601      	mov	r1, r0
 80101e6:	4803      	ldr	r0, [pc, #12]	; (80101f4 <SUBGRF_WriteBuffer+0x1c>)
 80101e8:	f7f4 fe28 	bl	8004e3c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101ec:	f384 8810 	msr	PRIMASK, r4
}
 80101f0:	bd10      	pop	{r4, pc}
 80101f2:	bf00      	nop
 80101f4:	200018b4 	.word	0x200018b4

080101f8 <SUBGRF_SetPayload>:
{
 80101f8:	b508      	push	{r3, lr}
 80101fa:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80101fc:	4601      	mov	r1, r0
 80101fe:	2000      	movs	r0, #0
 8010200:	f7ff ffea 	bl	80101d8 <SUBGRF_WriteBuffer>
}
 8010204:	bd08      	pop	{r3, pc}

08010206 <SUBGRF_SendPayload>:
{
 8010206:	b510      	push	{r4, lr}
 8010208:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 801020a:	f7ff fff5 	bl	80101f8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801020e:	4620      	mov	r0, r4
 8010210:	f7ff fb1c 	bl	800f84c <SUBGRF_SetTx>
}
 8010214:	bd10      	pop	{r4, pc}
	...

08010218 <SUBGRF_ReadBuffer>:
{
 8010218:	b510      	push	{r4, lr}
 801021a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801021c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010220:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8010222:	460a      	mov	r2, r1
 8010224:	4601      	mov	r1, r0
 8010226:	4803      	ldr	r0, [pc, #12]	; (8010234 <SUBGRF_ReadBuffer+0x1c>)
 8010228:	f7f4 fe52 	bl	8004ed0 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801022c:	f384 8810 	msr	PRIMASK, r4
}
 8010230:	bd10      	pop	{r4, pc}
 8010232:	bf00      	nop
 8010234:	200018b4 	.word	0x200018b4

08010238 <SUBGRF_GetPayload>:
{
 8010238:	b570      	push	{r4, r5, r6, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	4606      	mov	r6, r0
 801023e:	460c      	mov	r4, r1
 8010240:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8010248:	f10d 0107 	add.w	r1, sp, #7
 801024c:	4620      	mov	r0, r4
 801024e:	f7ff fea7 	bl	800ffa0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8010252:	7822      	ldrb	r2, [r4, #0]
 8010254:	42aa      	cmp	r2, r5
 8010256:	d902      	bls.n	801025e <SUBGRF_GetPayload+0x26>
        return 1;
 8010258:	2001      	movs	r0, #1
}
 801025a:	b002      	add	sp, #8
 801025c:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801025e:	4631      	mov	r1, r6
 8010260:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010264:	f7ff ffd8 	bl	8010218 <SUBGRF_ReadBuffer>
    return 0;
 8010268:	2000      	movs	r0, #0
 801026a:	e7f6      	b.n	801025a <SUBGRF_GetPayload+0x22>

0801026c <SUBGRF_SetSwitch>:
{
 801026c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801026e:	2901      	cmp	r1, #1
 8010270:	d003      	beq.n	801027a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8010272:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8010274:	f7f1 fe76 	bl	8001f64 <RBI_ConfigRFSwitch>
}
 8010278:	bd10      	pop	{r4, pc}
 801027a:	4604      	mov	r4, r0
 801027c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801027e:	2c01      	cmp	r4, #1
 8010280:	d003      	beq.n	801028a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8010282:	2c02      	cmp	r4, #2
 8010284:	d1f6      	bne.n	8010274 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8010286:	2003      	movs	r0, #3
 8010288:	e7f4      	b.n	8010274 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801028a:	2004      	movs	r0, #4
 801028c:	f7ff fdb4 	bl	800fdf8 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8010290:	2002      	movs	r0, #2
 8010292:	e7f6      	b.n	8010282 <SUBGRF_SetSwitch+0x16>

08010294 <SUBGRF_SetRfTxPower>:
{
 8010294:	b538      	push	{r3, r4, r5, lr}
 8010296:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8010298:	f7f1 fe68 	bl	8001f6c <RBI_GetTxConfig>
    switch (TxConfig)
 801029c:	b148      	cbz	r0, 80102b2 <SUBGRF_SetRfTxPower+0x1e>
 801029e:	2802      	cmp	r0, #2
 80102a0:	d10d      	bne.n	80102be <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80102a2:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80102a4:	2202      	movs	r2, #2
 80102a6:	4621      	mov	r1, r4
 80102a8:	4628      	mov	r0, r5
 80102aa:	f7ff fe2a 	bl	800ff02 <SUBGRF_SetTxParams>
}
 80102ae:	4628      	mov	r0, r5
 80102b0:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80102b2:	2c0f      	cmp	r4, #15
 80102b4:	dc01      	bgt.n	80102ba <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80102b6:	2501      	movs	r5, #1
 80102b8:	e7f4      	b.n	80102a4 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80102ba:	2502      	movs	r5, #2
 80102bc:	e7f2      	b.n	80102a4 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80102be:	2501      	movs	r5, #1
 80102c0:	e7f0      	b.n	80102a4 <SUBGRF_SetRfTxPower+0x10>

080102c2 <SUBGRF_GetRadioWakeUpTime>:
}
 80102c2:	2001      	movs	r0, #1
 80102c4:	4770      	bx	lr
	...

080102c8 <HAL_SUBGHZ_TxCpltCallback>:
{
 80102c8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80102ca:	4b02      	ldr	r3, [pc, #8]	; (80102d4 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2001      	movs	r0, #1
 80102d0:	4798      	blx	r3
}
 80102d2:	bd08      	pop	{r3, pc}
 80102d4:	20001150 	.word	0x20001150

080102d8 <HAL_SUBGHZ_RxCpltCallback>:
{
 80102d8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80102da:	4b02      	ldr	r3, [pc, #8]	; (80102e4 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2002      	movs	r0, #2
 80102e0:	4798      	blx	r3
}
 80102e2:	bd08      	pop	{r3, pc}
 80102e4:	20001150 	.word	0x20001150

080102e8 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80102e8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80102ea:	4b02      	ldr	r3, [pc, #8]	; (80102f4 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2040      	movs	r0, #64	; 0x40
 80102f0:	4798      	blx	r3
}
 80102f2:	bd08      	pop	{r3, pc}
 80102f4:	20001150 	.word	0x20001150

080102f8 <HAL_SUBGHZ_CADStatusCallback>:
{
 80102f8:	b508      	push	{r3, lr}
    switch (cadstatus)
 80102fa:	b111      	cbz	r1, 8010302 <HAL_SUBGHZ_CADStatusCallback+0xa>
 80102fc:	2901      	cmp	r1, #1
 80102fe:	d005      	beq.n	801030c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8010300:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8010302:	4b05      	ldr	r3, [pc, #20]	; (8010318 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2080      	movs	r0, #128	; 0x80
 8010308:	4798      	blx	r3
            break;
 801030a:	e7f9      	b.n	8010300 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801030c:	4b02      	ldr	r3, [pc, #8]	; (8010318 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010314:	4798      	blx	r3
}
 8010316:	e7f3      	b.n	8010300 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8010318:	20001150 	.word	0x20001150

0801031c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 801031c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801031e:	4b03      	ldr	r3, [pc, #12]	; (801032c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010326:	4798      	blx	r3
}
 8010328:	bd08      	pop	{r3, pc}
 801032a:	bf00      	nop
 801032c:	20001150 	.word	0x20001150

08010330 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8010330:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8010332:	4b02      	ldr	r3, [pc, #8]	; (801033c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2020      	movs	r0, #32
 8010338:	4798      	blx	r3
}
 801033a:	bd08      	pop	{r3, pc}
 801033c:	20001150 	.word	0x20001150

08010340 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8010340:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8010342:	4b02      	ldr	r3, [pc, #8]	; (801034c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2004      	movs	r0, #4
 8010348:	4798      	blx	r3
}
 801034a:	bd08      	pop	{r3, pc}
 801034c:	20001150 	.word	0x20001150

08010350 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8010350:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8010352:	4b02      	ldr	r3, [pc, #8]	; (801035c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2008      	movs	r0, #8
 8010358:	4798      	blx	r3
}
 801035a:	bd08      	pop	{r3, pc}
 801035c:	20001150 	.word	0x20001150

08010360 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8010360:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8010362:	4b02      	ldr	r3, [pc, #8]	; (801036c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2010      	movs	r0, #16
 8010368:	4798      	blx	r3
}
 801036a:	bd08      	pop	{r3, pc}
 801036c:	20001150 	.word	0x20001150

08010370 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8010370:	b1a0      	cbz	r0, 801039c <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 8010372:	b410      	push	{r4}
 8010374:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010376:	2300      	movs	r3, #0
 8010378:	2b15      	cmp	r3, #21
 801037a:	d80e      	bhi.n	801039a <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801037c:	4619      	mov	r1, r3
 801037e:	4a08      	ldr	r2, [pc, #32]	; (80103a0 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8010380:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010384:	42a2      	cmp	r2, r4
 8010386:	d802      	bhi.n	801038e <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010388:	3301      	adds	r3, #1
 801038a:	b2db      	uxtb	r3, r3
 801038c:	e7f4      	b.n	8010378 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 801038e:	4b04      	ldr	r3, [pc, #16]	; (80103a0 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8010390:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010394:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 8010396:	bc10      	pop	{r4}
 8010398:	4770      	bx	lr
    while( 1 );
 801039a:	e7fe      	b.n	801039a <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 801039c:	201f      	movs	r0, #31
}
 801039e:	4770      	bx	lr
 80103a0:	08011f6c 	.word	0x08011f6c

080103a4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80103a4:	b570      	push	{r4, r5, r6, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	4604      	mov	r4, r0
 80103aa:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80103ac:	4b1d      	ldr	r3, [pc, #116]	; (8010424 <SUBGRF_GetCFO+0x80>)
 80103ae:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80103b0:	f640 0007 	movw	r0, #2055	; 0x807
 80103b4:	f7ff fd10 	bl	800fdd8 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80103b8:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80103bc:	aa02      	add	r2, sp, #8
 80103be:	4413      	add	r3, r2
 80103c0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80103c4:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80103c8:	3b01      	subs	r3, #1
 80103ca:	fa02 f003 	lsl.w	r0, r2, r3
 80103ce:	4b16      	ldr	r3, [pc, #88]	; (8010428 <SUBGRF_GetCFO+0x84>)
 80103d0:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 80103d4:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80103d8:	2807      	cmp	r0, #7
 80103da:	d921      	bls.n	8010420 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80103dc:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80103de:	fb00 f004 	mul.w	r0, r0, r4
 80103e2:	2803      	cmp	r0, #3
 80103e4:	d800      	bhi.n	80103e8 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80103e6:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80103e8:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80103ec:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80103f0:	f7ff fcf2 	bl	800fdd8 <SUBGRF_ReadRegister>
 80103f4:	0200      	lsls	r0, r0, #8
 80103f6:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80103fa:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80103fe:	f7ff fceb 	bl	800fdd8 <SUBGRF_ReadRegister>
 8010402:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8010404:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010408:	d003      	beq.n	8010412 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 801040a:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801040e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8010412:	0963      	lsrs	r3, r4, #5
 8010414:	fb03 f300 	mul.w	r3, r3, r0
 8010418:	11db      	asrs	r3, r3, #7
 801041a:	602b      	str	r3, [r5, #0]
}
 801041c:	b002      	add	sp, #8
 801041e:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8010420:	2402      	movs	r4, #2
 8010422:	e7dc      	b.n	80103de <SUBGRF_GetCFO+0x3a>
 8010424:	0c0a0804 	.word	0x0c0a0804
 8010428:	01e84800 	.word	0x01e84800

0801042c <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801042c:	f04f 30ff 	mov.w	r0, #4294967295
 8010430:	4770      	bx	lr

08010432 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8010432:	f04f 30ff 	mov.w	r0, #4294967295
 8010436:	4770      	bx	lr

08010438 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8010438:	f04f 30ff 	mov.w	r0, #4294967295
 801043c:	4770      	bx	lr

0801043e <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801043e:	4770      	bx	lr

08010440 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8010440:	2000      	movs	r0, #0
 8010442:	4770      	bx	lr

08010444 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8010444:	2000      	movs	r0, #0
 8010446:	4770      	bx	lr

08010448 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8010448:	4770      	bx	lr

0801044a <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 801044a:	f04f 30ff 	mov.w	r0, #4294967295
 801044e:	4770      	bx	lr

08010450 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8010450:	f04f 30ff 	mov.w	r0, #4294967295
 8010454:	4770      	bx	lr

08010456 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8010456:	4770      	bx	lr

08010458 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8010458:	4770      	bx	lr

0801045a <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801045a:	4770      	bx	lr

0801045c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801045c:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801045e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010462:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8010464:	4b1b      	ldr	r3, [pc, #108]	; (80104d4 <TRACE_AllocateBufer+0x78>)
 8010466:	8a5c      	ldrh	r4, [r3, #18]
 8010468:	8a1a      	ldrh	r2, [r3, #16]
 801046a:	4294      	cmp	r4, r2
 801046c:	d010      	beq.n	8010490 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801046e:	4294      	cmp	r4, r2
 8010470:	d91d      	bls.n	80104ae <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010472:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8010476:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8010478:	4283      	cmp	r3, r0
 801047a:	d81a      	bhi.n	80104b2 <TRACE_AllocateBufer+0x56>
 801047c:	4282      	cmp	r2, r0
 801047e:	d918      	bls.n	80104b2 <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010480:	4b14      	ldr	r3, [pc, #80]	; (80104d4 <TRACE_AllocateBufer+0x78>)
 8010482:	2601      	movs	r6, #1
 8010484:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010486:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010488:	2400      	movs	r4, #0
 801048a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801048c:	4613      	mov	r3, r2
 801048e:	e010      	b.n	80104b2 <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010490:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8010494:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8010496:	4298      	cmp	r0, r3
 8010498:	d30b      	bcc.n	80104b2 <TRACE_AllocateBufer+0x56>
 801049a:	4282      	cmp	r2, r0
 801049c:	d909      	bls.n	80104b2 <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801049e:	4b0d      	ldr	r3, [pc, #52]	; (80104d4 <TRACE_AllocateBufer+0x78>)
 80104a0:	2601      	movs	r6, #1
 80104a2:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80104a4:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80104a6:	2400      	movs	r4, #0
 80104a8:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80104aa:	4613      	mov	r3, r2
 80104ac:	e001      	b.n	80104b2 <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80104ae:	1b13      	subs	r3, r2, r4
 80104b0:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80104b2:	4283      	cmp	r3, r0
 80104b4:	d90b      	bls.n	80104ce <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80104b6:	4a07      	ldr	r2, [pc, #28]	; (80104d4 <TRACE_AllocateBufer+0x78>)
 80104b8:	8a53      	ldrh	r3, [r2, #18]
 80104ba:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80104bc:	4403      	add	r3, r0
 80104be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104c2:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80104c4:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104c6:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80104ca:	bc70      	pop	{r4, r5, r6}
 80104cc:	4770      	bx	lr
  int16_t ret = -1;
 80104ce:	f04f 30ff 	mov.w	r0, #4294967295
 80104d2:	e7f8      	b.n	80104c6 <TRACE_AllocateBufer+0x6a>
 80104d4:	20001554 	.word	0x20001554

080104d8 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104dc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80104de:	4a03      	ldr	r2, [pc, #12]	; (80104ec <TRACE_Lock+0x14>)
 80104e0:	8ad3      	ldrh	r3, [r2, #22]
 80104e2:	3301      	adds	r3, #1
 80104e4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104e6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80104ea:	4770      	bx	lr
 80104ec:	20001554 	.word	0x20001554

080104f0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80104f4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80104f6:	4a03      	ldr	r2, [pc, #12]	; (8010504 <TRACE_UnLock+0x14>)
 80104f8:	8ad3      	ldrh	r3, [r2, #22]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104fe:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010502:	4770      	bx	lr
 8010504:	20001554 	.word	0x20001554

08010508 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8010508:	4b02      	ldr	r3, [pc, #8]	; (8010514 <TRACE_IsLocked+0xc>)
 801050a:	8ad8      	ldrh	r0, [r3, #22]
}
 801050c:	3800      	subs	r0, #0
 801050e:	bf18      	it	ne
 8010510:	2001      	movne	r0, #1
 8010512:	4770      	bx	lr
 8010514:	20001554 	.word	0x20001554

08010518 <UTIL_ADV_TRACE_Init>:
{
 8010518:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801051a:	2218      	movs	r2, #24
 801051c:	2100      	movs	r1, #0
 801051e:	4807      	ldr	r0, [pc, #28]	; (801053c <UTIL_ADV_TRACE_Init+0x24>)
 8010520:	f000 f98c 	bl	801083c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8010524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010528:	2100      	movs	r1, #0
 801052a:	4805      	ldr	r0, [pc, #20]	; (8010540 <UTIL_ADV_TRACE_Init+0x28>)
 801052c:	f000 f986 	bl	801083c <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010530:	4b04      	ldr	r3, [pc, #16]	; (8010544 <UTIL_ADV_TRACE_Init+0x2c>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4804      	ldr	r0, [pc, #16]	; (8010548 <UTIL_ADV_TRACE_Init+0x30>)
 8010536:	4798      	blx	r3
}
 8010538:	bd08      	pop	{r3, pc}
 801053a:	bf00      	nop
 801053c:	20001554 	.word	0x20001554
 8010540:	20001154 	.word	0x20001154
 8010544:	080113a8 	.word	0x080113a8
 8010548:	080106c9 	.word	0x080106c9

0801054c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801054c:	4b01      	ldr	r3, [pc, #4]	; (8010554 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801054e:	6058      	str	r0, [r3, #4]
}
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	20001554 	.word	0x20001554

08010558 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010558:	4b01      	ldr	r3, [pc, #4]	; (8010560 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801055a:	7218      	strb	r0, [r3, #8]
}
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop
 8010560:	20001554 	.word	0x20001554

08010564 <TRACE_Send>:
{
 8010564:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010566:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801056a:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 801056c:	f7ff ffcc 	bl	8010508 <TRACE_IsLocked>
 8010570:	b118      	cbz	r0, 801057a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010572:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010576:	2000      	movs	r0, #0
}
 8010578:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 801057a:	f7ff ffad 	bl	80104d8 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801057e:	4b1d      	ldr	r3, [pc, #116]	; (80105f4 <TRACE_Send+0x90>)
 8010580:	8a1a      	ldrh	r2, [r3, #16]
 8010582:	8a5b      	ldrh	r3, [r3, #18]
 8010584:	429a      	cmp	r2, r3
 8010586:	d02e      	beq.n	80105e6 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010588:	491a      	ldr	r1, [pc, #104]	; (80105f4 <TRACE_Send+0x90>)
 801058a:	7889      	ldrb	r1, [r1, #2]
 801058c:	2901      	cmp	r1, #1
 801058e:	d017      	beq.n	80105c0 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010590:	4a18      	ldr	r2, [pc, #96]	; (80105f4 <TRACE_Send+0x90>)
 8010592:	7892      	ldrb	r2, [r2, #2]
 8010594:	b932      	cbnz	r2, 80105a4 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010596:	4a17      	ldr	r2, [pc, #92]	; (80105f4 <TRACE_Send+0x90>)
 8010598:	8a12      	ldrh	r2, [r2, #16]
 801059a:	4293      	cmp	r3, r2
 801059c:	d91e      	bls.n	80105dc <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801059e:	1a9b      	subs	r3, r3, r2
 80105a0:	4a14      	ldr	r2, [pc, #80]	; (80105f4 <TRACE_Send+0x90>)
 80105a2:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80105a4:	4e13      	ldr	r6, [pc, #76]	; (80105f4 <TRACE_Send+0x90>)
 80105a6:	8a33      	ldrh	r3, [r6, #16]
 80105a8:	4d13      	ldr	r5, [pc, #76]	; (80105f8 <TRACE_Send+0x94>)
 80105aa:	441d      	add	r5, r3
 80105ac:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80105b0:	f7f0 ff8e 	bl	80014d0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80105b4:	4b11      	ldr	r3, [pc, #68]	; (80105fc <TRACE_Send+0x98>)
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	8ab1      	ldrh	r1, [r6, #20]
 80105ba:	4628      	mov	r0, r5
 80105bc:	4798      	blx	r3
 80105be:	e7db      	b.n	8010578 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80105c0:	480c      	ldr	r0, [pc, #48]	; (80105f4 <TRACE_Send+0x90>)
 80105c2:	8801      	ldrh	r1, [r0, #0]
 80105c4:	1a8a      	subs	r2, r1, r2
 80105c6:	b292      	uxth	r2, r2
 80105c8:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80105ca:	2102      	movs	r1, #2
 80105cc:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80105ce:	2100      	movs	r1, #0
 80105d0:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80105d2:	2a00      	cmp	r2, #0
 80105d4:	d1dc      	bne.n	8010590 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80105d6:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80105d8:	8201      	strh	r1, [r0, #16]
 80105da:	e7d9      	b.n	8010590 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80105dc:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80105e0:	4a04      	ldr	r2, [pc, #16]	; (80105f4 <TRACE_Send+0x90>)
 80105e2:	8293      	strh	r3, [r2, #20]
 80105e4:	e7de      	b.n	80105a4 <TRACE_Send+0x40>
      TRACE_UnLock();
 80105e6:	f7ff ff83 	bl	80104f0 <TRACE_UnLock>
 80105ea:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80105ee:	2000      	movs	r0, #0
}
 80105f0:	e7c2      	b.n	8010578 <TRACE_Send+0x14>
 80105f2:	bf00      	nop
 80105f4:	20001554 	.word	0x20001554
 80105f8:	20001154 	.word	0x20001154
 80105fc:	080113a8 	.word	0x080113a8

08010600 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010600:	b408      	push	{r3}
 8010602:	b530      	push	{r4, r5, lr}
 8010604:	b086      	sub	sp, #24
 8010606:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8010608:	2300      	movs	r3, #0
 801060a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801060e:	4b2b      	ldr	r3, [pc, #172]	; (80106bc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010610:	7a1b      	ldrb	r3, [r3, #8]
 8010612:	4283      	cmp	r3, r0
 8010614:	d34c      	bcc.n	80106b0 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8010616:	4b29      	ldr	r3, [pc, #164]	; (80106bc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	ea31 0303 	bics.w	r3, r1, r3
 801061e:	d14a      	bne.n	80106b6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8010620:	4b26      	ldr	r3, [pc, #152]	; (80106bc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	b123      	cbz	r3, 8010630 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8010626:	b11a      	cbz	r2, 8010630 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8010628:	f10d 0102 	add.w	r1, sp, #2
 801062c:	a801      	add	r0, sp, #4
 801062e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8010630:	ab0a      	add	r3, sp, #40	; 0x28
 8010632:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010634:	4622      	mov	r2, r4
 8010636:	f44f 7100 	mov.w	r1, #512	; 0x200
 801063a:	4821      	ldr	r0, [pc, #132]	; (80106c0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801063c:	f000 fcba 	bl	8010fb4 <tiny_vsnprintf_like>
 8010640:	b285      	uxth	r5, r0
  TRACE_Lock();
 8010642:	f7ff ff49 	bl	80104d8 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8010646:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801064a:	4428      	add	r0, r5
 801064c:	4669      	mov	r1, sp
 801064e:	b280      	uxth	r0, r0
 8010650:	f7ff ff04 	bl	801045c <TRACE_AllocateBufer>
 8010654:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010658:	d025      	beq.n	80106a6 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 801065a:	2300      	movs	r3, #0
 801065c:	e00c      	b.n	8010678 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801065e:	f8bd 2000 	ldrh.w	r2, [sp]
 8010662:	a906      	add	r1, sp, #24
 8010664:	4419      	add	r1, r3
 8010666:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 801066a:	4916      	ldr	r1, [pc, #88]	; (80106c4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801066c:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 801066e:	3201      	adds	r2, #1
 8010670:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8010674:	3301      	adds	r3, #1
 8010676:	b29b      	uxth	r3, r3
 8010678:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801067c:	429a      	cmp	r2, r3
 801067e:	d8ee      	bhi.n	801065e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010680:	f8bd 0000 	ldrh.w	r0, [sp]
 8010684:	9b05      	ldr	r3, [sp, #20]
 8010686:	4622      	mov	r2, r4
 8010688:	f44f 7100 	mov.w	r1, #512	; 0x200
 801068c:	4c0d      	ldr	r4, [pc, #52]	; (80106c4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801068e:	4420      	add	r0, r4
 8010690:	f000 fc90 	bl	8010fb4 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8010694:	f7ff ff2c 	bl	80104f0 <TRACE_UnLock>
    return TRACE_Send();
 8010698:	f7ff ff64 	bl	8010564 <TRACE_Send>
}
 801069c:	b006      	add	sp, #24
 801069e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106a2:	b001      	add	sp, #4
 80106a4:	4770      	bx	lr
  TRACE_UnLock();
 80106a6:	f7ff ff23 	bl	80104f0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80106aa:	f06f 0002 	mvn.w	r0, #2
 80106ae:	e7f5      	b.n	801069c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80106b0:	f06f 0004 	mvn.w	r0, #4
 80106b4:	e7f2      	b.n	801069c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80106b6:	f06f 0005 	mvn.w	r0, #5
 80106ba:	e7ef      	b.n	801069c <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80106bc:	20001554 	.word	0x20001554
 80106c0:	2000156c 	.word	0x2000156c
 80106c4:	20001154 	.word	0x20001154

080106c8 <TRACE_TxCpltCallback>:
{
 80106c8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106ce:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80106d0:	4b25      	ldr	r3, [pc, #148]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 80106d2:	789b      	ldrb	r3, [r3, #2]
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d016      	beq.n	8010706 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80106d8:	4a23      	ldr	r2, [pc, #140]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 80106da:	8a13      	ldrh	r3, [r2, #16]
 80106dc:	8a90      	ldrh	r0, [r2, #20]
 80106de:	4403      	add	r3, r0
 80106e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80106e4:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80106e6:	4b20      	ldr	r3, [pc, #128]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 80106e8:	8a1a      	ldrh	r2, [r3, #16]
 80106ea:	8a5b      	ldrh	r3, [r3, #18]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d003      	beq.n	80106f8 <TRACE_TxCpltCallback+0x30>
 80106f0:	481d      	ldr	r0, [pc, #116]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 80106f2:	8ac0      	ldrh	r0, [r0, #22]
 80106f4:	2801      	cmp	r0, #1
 80106f6:	d00b      	beq.n	8010710 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106f8:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80106fc:	f7f0 feee 	bl	80014dc <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010700:	f7ff fef6 	bl	80104f0 <TRACE_UnLock>
}
 8010704:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010706:	4b18      	ldr	r3, [pc, #96]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 8010708:	2200      	movs	r2, #0
 801070a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801070c:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 801070e:	e7ea      	b.n	80106e6 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010710:	4815      	ldr	r0, [pc, #84]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 8010712:	7880      	ldrb	r0, [r0, #2]
 8010714:	2801      	cmp	r0, #1
 8010716:	d014      	beq.n	8010742 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010718:	4a13      	ldr	r2, [pc, #76]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 801071a:	7892      	ldrb	r2, [r2, #2]
 801071c:	b932      	cbnz	r2, 801072c <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801071e:	4a12      	ldr	r2, [pc, #72]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 8010720:	8a12      	ldrh	r2, [r2, #16]
 8010722:	4293      	cmp	r3, r2
 8010724:	d91b      	bls.n	801075e <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010726:	1a9b      	subs	r3, r3, r2
 8010728:	4a0f      	ldr	r2, [pc, #60]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 801072a:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801072c:	4b0e      	ldr	r3, [pc, #56]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 801072e:	8a1a      	ldrh	r2, [r3, #16]
 8010730:	480e      	ldr	r0, [pc, #56]	; (801076c <TRACE_TxCpltCallback+0xa4>)
 8010732:	4410      	add	r0, r2
 8010734:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010738:	4a0d      	ldr	r2, [pc, #52]	; (8010770 <TRACE_TxCpltCallback+0xa8>)
 801073a:	68d2      	ldr	r2, [r2, #12]
 801073c:	8a99      	ldrh	r1, [r3, #20]
 801073e:	4790      	blx	r2
 8010740:	e7e0      	b.n	8010704 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010742:	4c09      	ldr	r4, [pc, #36]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 8010744:	8820      	ldrh	r0, [r4, #0]
 8010746:	1a82      	subs	r2, r0, r2
 8010748:	b292      	uxth	r2, r2
 801074a:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801074c:	2002      	movs	r0, #2
 801074e:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010750:	2000      	movs	r0, #0
 8010752:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010754:	2a00      	cmp	r2, #0
 8010756:	d1df      	bne.n	8010718 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010758:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801075a:	8220      	strh	r0, [r4, #16]
 801075c:	e7dc      	b.n	8010718 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801075e:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8010762:	4a01      	ldr	r2, [pc, #4]	; (8010768 <TRACE_TxCpltCallback+0xa0>)
 8010764:	8293      	strh	r3, [r2, #20]
 8010766:	e7e1      	b.n	801072c <TRACE_TxCpltCallback+0x64>
 8010768:	20001554 	.word	0x20001554
 801076c:	20001154 	.word	0x20001154
 8010770:	080113a8 	.word	0x080113a8

08010774 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010774:	2300      	movs	r3, #0
 8010776:	4a02      	ldr	r2, [pc, #8]	; (8010780 <UTIL_LPM_Init+0xc>)
 8010778:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801077a:	4a02      	ldr	r2, [pc, #8]	; (8010784 <UTIL_LPM_Init+0x10>)
 801077c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801077e:	4770      	bx	lr
 8010780:	20001770 	.word	0x20001770
 8010784:	2000176c 	.word	0x2000176c

08010788 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010788:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801078c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801078e:	b141      	cbz	r1, 80107a2 <UTIL_LPM_SetStopMode+0x1a>
 8010790:	2901      	cmp	r1, #1
 8010792:	d103      	bne.n	801079c <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8010794:	4906      	ldr	r1, [pc, #24]	; (80107b0 <UTIL_LPM_SetStopMode+0x28>)
 8010796:	680a      	ldr	r2, [r1, #0]
 8010798:	4310      	orrs	r0, r2
 801079a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801079c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80107a0:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80107a2:	4903      	ldr	r1, [pc, #12]	; (80107b0 <UTIL_LPM_SetStopMode+0x28>)
 80107a4:	680a      	ldr	r2, [r1, #0]
 80107a6:	ea22 0000 	bic.w	r0, r2, r0
 80107aa:	6008      	str	r0, [r1, #0]
      break;
 80107ac:	e7f6      	b.n	801079c <UTIL_LPM_SetStopMode+0x14>
 80107ae:	bf00      	nop
 80107b0:	20001770 	.word	0x20001770

080107b4 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107b8:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80107ba:	b141      	cbz	r1, 80107ce <UTIL_LPM_SetOffMode+0x1a>
 80107bc:	2901      	cmp	r1, #1
 80107be:	d103      	bne.n	80107c8 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80107c0:	4906      	ldr	r1, [pc, #24]	; (80107dc <UTIL_LPM_SetOffMode+0x28>)
 80107c2:	680a      	ldr	r2, [r1, #0]
 80107c4:	4310      	orrs	r0, r2
 80107c6:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107c8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80107cc:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80107ce:	4903      	ldr	r1, [pc, #12]	; (80107dc <UTIL_LPM_SetOffMode+0x28>)
 80107d0:	680a      	ldr	r2, [r1, #0]
 80107d2:	ea22 0000 	bic.w	r0, r2, r0
 80107d6:	6008      	str	r0, [r1, #0]
      break;
 80107d8:	e7f6      	b.n	80107c8 <UTIL_LPM_SetOffMode+0x14>
 80107da:	bf00      	nop
 80107dc:	2000176c 	.word	0x2000176c

080107e0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80107e0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80107e6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80107e8:	4b0c      	ldr	r3, [pc, #48]	; (801081c <UTIL_LPM_EnterLowPower+0x3c>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	b13b      	cbz	r3, 80107fe <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80107ee:	4d0c      	ldr	r5, [pc, #48]	; (8010820 <UTIL_LPM_EnterLowPower+0x40>)
 80107f0:	682b      	ldr	r3, [r5, #0]
 80107f2:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80107f4:	686b      	ldr	r3, [r5, #4]
 80107f6:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107f8:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80107fc:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80107fe:	4b09      	ldr	r3, [pc, #36]	; (8010824 <UTIL_LPM_EnterLowPower+0x44>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	b12b      	cbz	r3, 8010810 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8010804:	4d06      	ldr	r5, [pc, #24]	; (8010820 <UTIL_LPM_EnterLowPower+0x40>)
 8010806:	68ab      	ldr	r3, [r5, #8]
 8010808:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801080a:	68eb      	ldr	r3, [r5, #12]
 801080c:	4798      	blx	r3
 801080e:	e7f3      	b.n	80107f8 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8010810:	4d03      	ldr	r5, [pc, #12]	; (8010820 <UTIL_LPM_EnterLowPower+0x40>)
 8010812:	692b      	ldr	r3, [r5, #16]
 8010814:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8010816:	696b      	ldr	r3, [r5, #20]
 8010818:	4798      	blx	r3
 801081a:	e7ed      	b.n	80107f8 <UTIL_LPM_EnterLowPower+0x18>
 801081c:	20001770 	.word	0x20001770
 8010820:	08011338 	.word	0x08011338
 8010824:	2000176c 	.word	0x2000176c

08010828 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8010828:	1e53      	subs	r3, r2, #1
 801082a:	b29b      	uxth	r3, r3
 801082c:	b12a      	cbz	r2, 801083a <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 801082e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010832:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8010836:	461a      	mov	r2, r3
 8010838:	e7f6      	b.n	8010828 <UTIL_MEM_cpy_8>
    }
}
 801083a:	4770      	bx	lr

0801083c <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 801083c:	1e53      	subs	r3, r2, #1
 801083e:	b29b      	uxth	r3, r3
 8010840:	b11a      	cbz	r2, 801084a <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 8010842:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8010846:	461a      	mov	r2, r3
 8010848:	e7f8      	b.n	801083c <UTIL_MEM_set_8>
  }
}
 801084a:	4770      	bx	lr

0801084c <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801084c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801084e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010852:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8010854:	4a06      	ldr	r2, [pc, #24]	; (8010870 <UTIL_SEQ_SetTask+0x24>)
 8010856:	6813      	ldr	r3, [r2, #0]
 8010858:	4303      	orrs	r3, r0
 801085a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801085c:	4a05      	ldr	r2, [pc, #20]	; (8010874 <UTIL_SEQ_SetTask+0x28>)
 801085e:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8010862:	4318      	orrs	r0, r3
 8010864:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010868:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 801086c:	bc10      	pop	{r4}
 801086e:	4770      	bx	lr
 8010870:	20001810 	.word	0x20001810
 8010874:	20001800 	.word	0x20001800

08010878 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010878:	4770      	bx	lr

0801087a <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801087a:	4770      	bx	lr

0801087c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801087c:	0c03      	lsrs	r3, r0, #16
 801087e:	041b      	lsls	r3, r3, #16
 8010880:	b9b3      	cbnz	r3, 80108b0 <SEQ_BitPosition+0x34>
 8010882:	0400      	lsls	r0, r0, #16
 8010884:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8010886:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801088a:	d102      	bne.n	8010892 <SEQ_BitPosition+0x16>
 801088c:	3308      	adds	r3, #8
 801088e:	b2db      	uxtb	r3, r3
 8010890:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8010892:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010896:	d102      	bne.n	801089e <SEQ_BitPosition+0x22>
 8010898:	3304      	adds	r3, #4
 801089a:	b2db      	uxtb	r3, r3
 801089c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801089e:	0f00      	lsrs	r0, r0, #28
 80108a0:	4a04      	ldr	r2, [pc, #16]	; (80108b4 <SEQ_BitPosition+0x38>)
 80108a2:	5c10      	ldrb	r0, [r2, r0]
 80108a4:	4418      	add	r0, r3
 80108a6:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80108a8:	f1c0 001f 	rsb	r0, r0, #31
}
 80108ac:	b2c0      	uxtb	r0, r0
 80108ae:	4770      	bx	lr
  uint8_t n = 0U;
 80108b0:	2300      	movs	r3, #0
 80108b2:	e7e8      	b.n	8010886 <SEQ_BitPosition+0xa>
 80108b4:	0801201c 	.word	0x0801201c

080108b8 <UTIL_SEQ_Run>:
{
 80108b8:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 80108ba:	4b3b      	ldr	r3, [pc, #236]	; (80109a8 <UTIL_SEQ_Run+0xf0>)
 80108bc:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 80108be:	4020      	ands	r0, r4
 80108c0:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80108c2:	e012      	b.n	80108ea <UTIL_SEQ_Run+0x32>
      counter++;
 80108c4:	3301      	adds	r3, #1
 80108c6:	e01f      	b.n	8010908 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80108c8:	3b01      	subs	r3, #1
 80108ca:	4938      	ldr	r1, [pc, #224]	; (80109ac <UTIL_SEQ_Run+0xf4>)
 80108cc:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80108d0:	4002      	ands	r2, r0
 80108d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1f6      	bne.n	80108c8 <UTIL_SEQ_Run+0x10>
 80108da:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80108de:	4b34      	ldr	r3, [pc, #208]	; (80109b0 <UTIL_SEQ_Run+0xf8>)
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4b34      	ldr	r3, [pc, #208]	; (80109b4 <UTIL_SEQ_Run+0xfc>)
 80108e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108e8:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80108ea:	4b33      	ldr	r3, [pc, #204]	; (80109b8 <UTIL_SEQ_Run+0x100>)
 80108ec:	6819      	ldr	r1, [r3, #0]
 80108ee:	4b33      	ldr	r3, [pc, #204]	; (80109bc <UTIL_SEQ_Run+0x104>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	400b      	ands	r3, r1
 80108f4:	4a2c      	ldr	r2, [pc, #176]	; (80109a8 <UTIL_SEQ_Run+0xf0>)
 80108f6:	6812      	ldr	r2, [r2, #0]
 80108f8:	4213      	tst	r3, r2
 80108fa:	d033      	beq.n	8010964 <UTIL_SEQ_Run+0xac>
 80108fc:	4b30      	ldr	r3, [pc, #192]	; (80109c0 <UTIL_SEQ_Run+0x108>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4830      	ldr	r0, [pc, #192]	; (80109c4 <UTIL_SEQ_Run+0x10c>)
 8010902:	6800      	ldr	r0, [r0, #0]
 8010904:	4003      	ands	r3, r0
 8010906:	d12d      	bne.n	8010964 <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8010908:	4828      	ldr	r0, [pc, #160]	; (80109ac <UTIL_SEQ_Run+0xf4>)
 801090a:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 801090e:	4008      	ands	r0, r1
 8010910:	4010      	ands	r0, r2
 8010912:	d0d7      	beq.n	80108c4 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010914:	4a25      	ldr	r2, [pc, #148]	; (80109ac <UTIL_SEQ_Run+0xf4>)
 8010916:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801091a:	6852      	ldr	r2, [r2, #4]
 801091c:	4210      	tst	r0, r2
 801091e:	d105      	bne.n	801092c <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010920:	4a22      	ldr	r2, [pc, #136]	; (80109ac <UTIL_SEQ_Run+0xf4>)
 8010922:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010926:	f04f 31ff 	mov.w	r1, #4294967295
 801092a:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801092c:	4d1f      	ldr	r5, [pc, #124]	; (80109ac <UTIL_SEQ_Run+0xf4>)
 801092e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010932:	686e      	ldr	r6, [r5, #4]
 8010934:	4030      	ands	r0, r6
 8010936:	f7ff ffa1 	bl	801087c <SEQ_BitPosition>
 801093a:	4a1d      	ldr	r2, [pc, #116]	; (80109b0 <UTIL_SEQ_Run+0xf8>)
 801093c:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801093e:	2301      	movs	r3, #1
 8010940:	fa03 f000 	lsl.w	r0, r3, r0
 8010944:	ea26 0000 	bic.w	r0, r6, r0
 8010948:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801094a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801094e:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010950:	6812      	ldr	r2, [r2, #0]
 8010952:	4093      	lsls	r3, r2
 8010954:	43d8      	mvns	r0, r3
 8010956:	4919      	ldr	r1, [pc, #100]	; (80109bc <UTIL_SEQ_Run+0x104>)
 8010958:	680a      	ldr	r2, [r1, #0]
 801095a:	ea22 0303 	bic.w	r3, r2, r3
 801095e:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010960:	2302      	movs	r3, #2
 8010962:	e7b8      	b.n	80108d6 <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010964:	4b12      	ldr	r3, [pc, #72]	; (80109b0 <UTIL_SEQ_Run+0xf8>)
 8010966:	f04f 32ff 	mov.w	r2, #4294967295
 801096a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801096c:	f7ff ff84 	bl	8010878 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010970:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010974:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8010976:	4b11      	ldr	r3, [pc, #68]	; (80109bc <UTIL_SEQ_Run+0x104>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a0f      	ldr	r2, [pc, #60]	; (80109b8 <UTIL_SEQ_Run+0x100>)
 801097c:	6812      	ldr	r2, [r2, #0]
 801097e:	4013      	ands	r3, r2
 8010980:	4a09      	ldr	r2, [pc, #36]	; (80109a8 <UTIL_SEQ_Run+0xf0>)
 8010982:	6812      	ldr	r2, [r2, #0]
 8010984:	4213      	tst	r3, r2
 8010986:	d105      	bne.n	8010994 <UTIL_SEQ_Run+0xdc>
 8010988:	4b0d      	ldr	r3, [pc, #52]	; (80109c0 <UTIL_SEQ_Run+0x108>)
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	4b0d      	ldr	r3, [pc, #52]	; (80109c4 <UTIL_SEQ_Run+0x10c>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	421a      	tst	r2, r3
 8010992:	d006      	beq.n	80109a2 <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010994:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8010998:	f7ff ff6f 	bl	801087a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 801099c:	4b02      	ldr	r3, [pc, #8]	; (80109a8 <UTIL_SEQ_Run+0xf0>)
 801099e:	601c      	str	r4, [r3, #0]
}
 80109a0:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 80109a2:	f7f0 fd15 	bl	80013d0 <UTIL_SEQ_Idle>
 80109a6:	e7f5      	b.n	8010994 <UTIL_SEQ_Run+0xdc>
 80109a8:	200000d0 	.word	0x200000d0
 80109ac:	20001800 	.word	0x20001800
 80109b0:	20001774 	.word	0x20001774
 80109b4:	20001780 	.word	0x20001780
 80109b8:	200000d4 	.word	0x200000d4
 80109bc:	20001810 	.word	0x20001810
 80109c0:	20001778 	.word	0x20001778
 80109c4:	2000177c 	.word	0x2000177c

080109c8 <UTIL_SEQ_RegTask>:
{
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109cc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80109d0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80109d2:	f7ff ff53 	bl	801087c <SEQ_BitPosition>
 80109d6:	4b03      	ldr	r3, [pc, #12]	; (80109e4 <UTIL_SEQ_RegTask+0x1c>)
 80109d8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109dc:	f385 8810 	msr	PRIMASK, r5
}
 80109e0:	bd38      	pop	{r3, r4, r5, pc}
 80109e2:	bf00      	nop
 80109e4:	20001780 	.word	0x20001780

080109e8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80109e8:	b082      	sub	sp, #8
 80109ea:	b082      	sub	sp, #8
 80109ec:	f10d 0c08 	add.w	ip, sp, #8
 80109f0:	e90c 0006 	stmdb	ip, {r1, r2}
 80109f4:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 80109f6:	9a00      	ldr	r2, [sp, #0]
 80109f8:	4413      	add	r3, r2
 80109fa:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80109fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010a00:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010a04:	440a      	add	r2, r1
 8010a06:	b291      	uxth	r1, r2
 8010a08:	b212      	sxth	r2, r2
 8010a0a:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8010a0c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010a10:	db04      	blt.n	8010a1c <SysTimeAdd+0x34>
  {
    c.Seconds++;
 8010a12:	3301      	adds	r3, #1
 8010a14:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8010a16:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8010a1a:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8010a1c:	b002      	add	sp, #8
 8010a1e:	b002      	add	sp, #8
 8010a20:	4770      	bx	lr

08010a22 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8010a22:	b082      	sub	sp, #8
 8010a24:	b082      	sub	sp, #8
 8010a26:	f10d 0c08 	add.w	ip, sp, #8
 8010a2a:	e90c 0006 	stmdb	ip, {r1, r2}
 8010a2e:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 8010a30:	9a00      	ldr	r2, [sp, #0]
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010a36:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010a3a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010a3e:	1a52      	subs	r2, r2, r1
 8010a40:	b291      	uxth	r1, r2
 8010a42:	b212      	sxth	r2, r2
 8010a44:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	db02      	blt.n	8010a50 <SysTimeSub+0x2e>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8010a4a:	b002      	add	sp, #8
 8010a4c:	b002      	add	sp, #8
 8010a4e:	4770      	bx	lr
    c.Seconds--;
 8010a50:	3b01      	subs	r3, #1
 8010a52:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8010a54:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8010a58:	8081      	strh	r1, [r0, #4]
  return c;
 8010a5a:	e7f6      	b.n	8010a4a <SysTimeSub+0x28>

08010a5c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8010a5c:	b530      	push	{r4, r5, lr}
 8010a5e:	b089      	sub	sp, #36	; 0x24
 8010a60:	ac02      	add	r4, sp, #8
 8010a62:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010a66:	2300      	movs	r3, #0
 8010a68:	9304      	str	r3, [sp, #16]
 8010a6a:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010a6e:	4d0b      	ldr	r5, [pc, #44]	; (8010a9c <SysTimeSet+0x40>)
 8010a70:	692b      	ldr	r3, [r5, #16]
 8010a72:	a805      	add	r0, sp, #20
 8010a74:	4798      	blx	r3
 8010a76:	4603      	mov	r3, r0
 8010a78:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8010a7a:	9a05      	ldr	r2, [sp, #20]
 8010a7c:	9200      	str	r2, [sp, #0]
 8010a7e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010a82:	a806      	add	r0, sp, #24
 8010a84:	f7ff ffcd 	bl	8010a22 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8010a88:	682b      	ldr	r3, [r5, #0]
 8010a8a:	9806      	ldr	r0, [sp, #24]
 8010a8c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8010a8e:	68ab      	ldr	r3, [r5, #8]
 8010a90:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010a94:	4798      	blx	r3
}
 8010a96:	b009      	add	sp, #36	; 0x24
 8010a98:	bd30      	pop	{r4, r5, pc}
 8010a9a:	bf00      	nop
 8010a9c:	08011368 	.word	0x08011368

08010aa0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8010aa0:	b530      	push	{r4, r5, lr}
 8010aa2:	b087      	sub	sp, #28
 8010aa4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010aae:	4d0b      	ldr	r5, [pc, #44]	; (8010adc <SysTimeGet+0x3c>)
 8010ab0:	692b      	ldr	r3, [r5, #16]
 8010ab2:	a805      	add	r0, sp, #20
 8010ab4:	4798      	blx	r3
 8010ab6:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010ab8:	68eb      	ldr	r3, [r5, #12]
 8010aba:	4798      	blx	r3
 8010abc:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010ac0:	686b      	ldr	r3, [r5, #4]
 8010ac2:	4798      	blx	r3
 8010ac4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8010ac6:	9b05      	ldr	r3, [sp, #20]
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	9b04      	ldr	r3, [sp, #16]
 8010acc:	9a03      	ldr	r2, [sp, #12]
 8010ace:	4601      	mov	r1, r0
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f7ff ff89 	bl	80109e8 <SysTimeAdd>

  return sysTime;
}
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	b007      	add	sp, #28
 8010ada:	bd30      	pop	{r4, r5, pc}
 8010adc:	08011368 	.word	0x08011368

08010ae0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8010ae0:	b530      	push	{r4, r5, lr}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	9300      	str	r3, [sp, #0]
 8010aea:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010aee:	4b06      	ldr	r3, [pc, #24]	; (8010b08 <SysTimeGetMcuTime+0x28>)
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	466d      	mov	r5, sp
 8010af4:	a801      	add	r0, sp, #4
 8010af6:	4798      	blx	r3
 8010af8:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8010afa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010afe:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8010b02:	4620      	mov	r0, r4
 8010b04:	b003      	add	sp, #12
 8010b06:	bd30      	pop	{r4, r5, pc}
 8010b08:	08011368 	.word	0x08011368

08010b0c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8010b0c:	b530      	push	{r4, r5, lr}
 8010b0e:	b089      	sub	sp, #36	; 0x24
 8010b10:	ac02      	add	r4, sp, #8
 8010b12:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010b16:	4d0c      	ldr	r5, [pc, #48]	; (8010b48 <SysTimeToMs+0x3c>)
 8010b18:	68eb      	ldr	r3, [r5, #12]
 8010b1a:	4798      	blx	r3
 8010b1c:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010b20:	686b      	ldr	r3, [r5, #4]
 8010b22:	4798      	blx	r3
 8010b24:	4603      	mov	r3, r0
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8010b26:	9a07      	ldr	r2, [sp, #28]
 8010b28:	9200      	str	r2, [sp, #0]
 8010b2a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010b2e:	a804      	add	r0, sp, #16
 8010b30:	f7ff ff77 	bl	8010a22 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8010b34:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8010b38:	9a04      	ldr	r2, [sp, #16]
 8010b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010b3e:	fb00 3002 	mla	r0, r0, r2, r3
 8010b42:	b009      	add	sp, #36	; 0x24
 8010b44:	bd30      	pop	{r4, r5, pc}
 8010b46:	bf00      	nop
 8010b48:	08011368 	.word	0x08011368

08010b4c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8010b4c:	b530      	push	{r4, r5, lr}
 8010b4e:	b087      	sub	sp, #28
 8010b50:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8010b52:	4b11      	ldr	r3, [pc, #68]	; (8010b98 <SysTimeFromMs+0x4c>)
 8010b54:	fba3 2301 	umull	r2, r3, r3, r1
 8010b58:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010b5a:	9304      	str	r3, [sp, #16]
 8010b5c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8010b60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010b64:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8010b68:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f8ad 300e 	strh.w	r3, [sp, #14]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010b72:	4d0a      	ldr	r5, [pc, #40]	; (8010b9c <SysTimeFromMs+0x50>)
 8010b74:	68eb      	ldr	r3, [r5, #12]
 8010b76:	4798      	blx	r3
 8010b78:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010b7c:	686b      	ldr	r3, [r5, #4]
 8010b7e:	4798      	blx	r3
 8010b80:	4603      	mov	r3, r0
  return SysTimeAdd( sysTime, DeltaTime );
 8010b82:	9a03      	ldr	r2, [sp, #12]
 8010b84:	9200      	str	r2, [sp, #0]
 8010b86:	aa06      	add	r2, sp, #24
 8010b88:	e912 0006 	ldmdb	r2, {r1, r2}
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f7ff ff2b 	bl	80109e8 <SysTimeAdd>
}
 8010b92:	4620      	mov	r0, r4
 8010b94:	b007      	add	sp, #28
 8010b96:	bd30      	pop	{r4, r5, pc}
 8010b98:	10624dd3 	.word	0x10624dd3
 8010b9c:	08011368 	.word	0x08011368

08010ba0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8010ba0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010ba2:	4b03      	ldr	r3, [pc, #12]	; (8010bb0 <UTIL_TIMER_Init+0x10>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8010ba8:	4b02      	ldr	r3, [pc, #8]	; (8010bb4 <UTIL_TIMER_Init+0x14>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4798      	blx	r3
}
 8010bae:	bd08      	pop	{r3, pc}
 8010bb0:	20001814 	.word	0x20001814
 8010bb4:	0801137c 	.word	0x0801137c

08010bb8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8010bb8:	b1a8      	cbz	r0, 8010be6 <UTIL_TIMER_Create+0x2e>
{
 8010bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bbc:	4617      	mov	r7, r2
 8010bbe:	461e      	mov	r6, r3
 8010bc0:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8010bc2:	b193      	cbz	r3, 8010bea <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8010bc4:	2500      	movs	r5, #0
 8010bc6:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010bc8:	4b09      	ldr	r3, [pc, #36]	; (8010bf0 <UTIL_TIMER_Create+0x38>)
 8010bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bcc:	4608      	mov	r0, r1
 8010bce:	4798      	blx	r3
 8010bd0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010bd2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8010bd4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010bd6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8010bd8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8010bda:	9b06      	ldr	r3, [sp, #24]
 8010bdc:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8010bde:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8010be0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8010be2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8010be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8010be6:	2001      	movs	r0, #1
}
 8010be8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8010bea:	2001      	movs	r0, #1
 8010bec:	e7fa      	b.n	8010be4 <UTIL_TIMER_Create+0x2c>
 8010bee:	bf00      	nop
 8010bf0:	0801137c 	.word	0x0801137c

08010bf4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010bf4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8010bf6:	4c03      	ldr	r4, [pc, #12]	; (8010c04 <UTIL_TIMER_GetCurrentTime+0x10>)
 8010bf8:	69e3      	ldr	r3, [r4, #28]
 8010bfa:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010bfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010bfe:	4798      	blx	r3
}
 8010c00:	bd10      	pop	{r4, pc}
 8010c02:	bf00      	nop
 8010c04:	0801137c 	.word	0x0801137c

08010c08 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010c08:	b570      	push	{r4, r5, r6, lr}
 8010c0a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010c0c:	4d05      	ldr	r5, [pc, #20]	; (8010c24 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8010c0e:	69eb      	ldr	r3, [r5, #28]
 8010c10:	4798      	blx	r3
 8010c12:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010c14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c16:	4630      	mov	r0, r6
 8010c18:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8010c1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010c1c:	1a20      	subs	r0, r4, r0
 8010c1e:	4798      	blx	r3
}
 8010c20:	bd70      	pop	{r4, r5, r6, pc}
 8010c22:	bf00      	nop
 8010c24:	0801137c 	.word	0x0801137c

08010c28 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c28:	4b05      	ldr	r3, [pc, #20]	; (8010c40 <TimerExists+0x18>)
 8010c2a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8010c2c:	b11b      	cbz	r3, 8010c36 <TimerExists+0xe>
  {
    if( cur == TimerObject )
 8010c2e:	4283      	cmp	r3, r0
 8010c30:	d003      	beq.n	8010c3a <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8010c32:	695b      	ldr	r3, [r3, #20]
 8010c34:	e7fa      	b.n	8010c2c <TimerExists+0x4>
  }
  return false;
 8010c36:	2000      	movs	r0, #0
 8010c38:	4770      	bx	lr
      return true;
 8010c3a:	2001      	movs	r0, #1
}
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	20001814 	.word	0x20001814

08010c44 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010c48:	4e09      	ldr	r6, [pc, #36]	; (8010c70 <TimerSetTimeout+0x2c>)
 8010c4a:	6a33      	ldr	r3, [r6, #32]
 8010c4c:	4798      	blx	r3
 8010c4e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8010c50:	2301      	movs	r3, #1
 8010c52:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010c54:	6827      	ldr	r7, [r4, #0]
 8010c56:	69b6      	ldr	r6, [r6, #24]
 8010c58:	47b0      	blx	r6
 8010c5a:	4428      	add	r0, r5
 8010c5c:	4287      	cmp	r7, r0
 8010c5e:	d202      	bcs.n	8010c66 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010c60:	47b0      	blx	r6
 8010c62:	4405      	add	r5, r0
 8010c64:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010c66:	4b02      	ldr	r3, [pc, #8]	; (8010c70 <TimerSetTimeout+0x2c>)
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	6820      	ldr	r0, [r4, #0]
 8010c6c:	4798      	blx	r3
}
 8010c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c70:	0801137c 	.word	0x0801137c

08010c74 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8010c74:	b368      	cbz	r0, 8010cd2 <UTIL_TIMER_Stop+0x5e>
{
 8010c76:	b510      	push	{r4, lr}
 8010c78:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c7a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010c7e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010c80:	4b15      	ldr	r3, [pc, #84]	; (8010cd8 <UTIL_TIMER_Stop+0x64>)
 8010c82:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8010c84:	2301      	movs	r3, #1
 8010c86:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8010c88:	b1e1      	cbz	r1, 8010cc4 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010c8e:	4288      	cmp	r0, r1
 8010c90:	d006      	beq.n	8010ca0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010c92:	460b      	mov	r3, r1
        while( cur != NULL )
 8010c94:	b1b3      	cbz	r3, 8010cc4 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d011      	beq.n	8010cbe <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8010c9a:	4619      	mov	r1, r3
            cur = cur->Next;
 8010c9c:	695b      	ldr	r3, [r3, #20]
 8010c9e:	e7f9      	b.n	8010c94 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8010ca0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8010ca2:	6948      	ldr	r0, [r1, #20]
 8010ca4:	b120      	cbz	r0, 8010cb0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8010ca6:	4b0c      	ldr	r3, [pc, #48]	; (8010cd8 <UTIL_TIMER_Stop+0x64>)
 8010ca8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8010caa:	f7ff ffcb 	bl	8010c44 <TimerSetTimeout>
 8010cae:	e009      	b.n	8010cc4 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8010cb0:	4b0a      	ldr	r3, [pc, #40]	; (8010cdc <UTIL_TIMER_Stop+0x68>)
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	4798      	blx	r3
            TimerListHead = NULL;
 8010cb6:	4b08      	ldr	r3, [pc, #32]	; (8010cd8 <UTIL_TIMER_Stop+0x64>)
 8010cb8:	2200      	movs	r2, #0
 8010cba:	601a      	str	r2, [r3, #0]
 8010cbc:	e002      	b.n	8010cc4 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8010cbe:	695b      	ldr	r3, [r3, #20]
 8010cc0:	b123      	cbz	r3, 8010ccc <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8010cc2:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010cc4:	f384 8810 	msr	PRIMASK, r4
}
 8010cc8:	2000      	movs	r0, #0
}
 8010cca:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	614b      	str	r3, [r1, #20]
 8010cd0:	e7f8      	b.n	8010cc4 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8010cd2:	2001      	movs	r0, #1
}
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop
 8010cd8:	20001814 	.word	0x20001814
 8010cdc:	0801137c 	.word	0x0801137c

08010ce0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010ce0:	4b0d      	ldr	r3, [pc, #52]	; (8010d18 <TimerInsertTimer+0x38>)
 8010ce2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010ce4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8010ce6:	6951      	ldr	r1, [r2, #20]
 8010ce8:	b189      	cbz	r1, 8010d0e <TimerInsertTimer+0x2e>
{
 8010cea:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8010cec:	6804      	ldr	r4, [r0, #0]
 8010cee:	6819      	ldr	r1, [r3, #0]
 8010cf0:	428c      	cmp	r4, r1
 8010cf2:	d908      	bls.n	8010d06 <TimerInsertTimer+0x26>
    {
        cur = next;
 8010cf4:	461a      	mov	r2, r3
        next = next->Next;
 8010cf6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8010cf8:	6951      	ldr	r1, [r2, #20]
 8010cfa:	2900      	cmp	r1, #0
 8010cfc:	d1f6      	bne.n	8010cec <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8010cfe:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010d00:	2300      	movs	r3, #0
 8010d02:	6143      	str	r3, [r0, #20]
 8010d04:	e001      	b.n	8010d0a <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8010d06:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8010d08:	6143      	str	r3, [r0, #20]
}
 8010d0a:	bc10      	pop	{r4}
 8010d0c:	4770      	bx	lr
  cur->Next = TimerObject;
 8010d0e:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010d10:	2300      	movs	r3, #0
 8010d12:	6143      	str	r3, [r0, #20]
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	20001814 	.word	0x20001814

08010d1c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8010d1c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010d1e:	4b05      	ldr	r3, [pc, #20]	; (8010d34 <TimerInsertNewHeadTimer+0x18>)
 8010d20:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8010d22:	b10b      	cbz	r3, 8010d28 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8010d24:	2200      	movs	r2, #0
 8010d26:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010d28:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8010d2a:	4b02      	ldr	r3, [pc, #8]	; (8010d34 <TimerInsertNewHeadTimer+0x18>)
 8010d2c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8010d2e:	f7ff ff89 	bl	8010c44 <TimerSetTimeout>
}
 8010d32:	bd08      	pop	{r3, pc}
 8010d34:	20001814 	.word	0x20001814

08010d38 <UTIL_TIMER_Start>:
{
 8010d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	d036      	beq.n	8010dac <UTIL_TIMER_Start+0x74>
 8010d3e:	4604      	mov	r4, r0
 8010d40:	f7ff ff72 	bl	8010c28 <TimerExists>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d134      	bne.n	8010db2 <UTIL_TIMER_Start+0x7a>
 8010d48:	7a65      	ldrb	r5, [r4, #9]
 8010d4a:	2d00      	cmp	r5, #0
 8010d4c:	d133      	bne.n	8010db6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d4e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d52:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8010d54:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010d56:	4b19      	ldr	r3, [pc, #100]	; (8010dbc <UTIL_TIMER_Start+0x84>)
 8010d58:	6a1b      	ldr	r3, [r3, #32]
 8010d5a:	4798      	blx	r3
    if( ticks < minValue )
 8010d5c:	4287      	cmp	r7, r0
 8010d5e:	d300      	bcc.n	8010d62 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8010d60:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8010d62:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8010d64:	2300      	movs	r3, #0
 8010d66:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8010d68:	2201      	movs	r2, #1
 8010d6a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010d6c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8010d6e:	4b14      	ldr	r3, [pc, #80]	; (8010dc0 <UTIL_TIMER_Start+0x88>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	b183      	cbz	r3, 8010d96 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010d74:	4b11      	ldr	r3, [pc, #68]	; (8010dbc <UTIL_TIMER_Start+0x84>)
 8010d76:	699b      	ldr	r3, [r3, #24]
 8010d78:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	4418      	add	r0, r3
 8010d7e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010d80:	4b0f      	ldr	r3, [pc, #60]	; (8010dc0 <UTIL_TIMER_Start+0x88>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4298      	cmp	r0, r3
 8010d88:	d20c      	bcs.n	8010da4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f7ff ffc6 	bl	8010d1c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d90:	f386 8810 	msr	PRIMASK, r6
}
 8010d94:	e00b      	b.n	8010dae <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8010d96:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <UTIL_TIMER_Start+0x84>)
 8010d98:	691b      	ldr	r3, [r3, #16]
 8010d9a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f7ff ffbd 	bl	8010d1c <TimerInsertNewHeadTimer>
 8010da2:	e7f5      	b.n	8010d90 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8010da4:	4620      	mov	r0, r4
 8010da6:	f7ff ff9b 	bl	8010ce0 <TimerInsertTimer>
 8010daa:	e7f1      	b.n	8010d90 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010dac:	2501      	movs	r5, #1
}
 8010dae:	4628      	mov	r0, r5
 8010db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010db2:	2501      	movs	r5, #1
 8010db4:	e7fb      	b.n	8010dae <UTIL_TIMER_Start+0x76>
 8010db6:	2501      	movs	r5, #1
 8010db8:	e7f9      	b.n	8010dae <UTIL_TIMER_Start+0x76>
 8010dba:	bf00      	nop
 8010dbc:	0801137c 	.word	0x0801137c
 8010dc0:	20001814 	.word	0x20001814

08010dc4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8010dc4:	b198      	cbz	r0, 8010dee <UTIL_TIMER_SetPeriod+0x2a>
{
 8010dc6:	b510      	push	{r4, lr}
 8010dc8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010dca:	4b0a      	ldr	r3, [pc, #40]	; (8010df4 <UTIL_TIMER_SetPeriod+0x30>)
 8010dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dce:	4608      	mov	r0, r1
 8010dd0:	4798      	blx	r3
 8010dd2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f7ff ff27 	bl	8010c28 <TimerExists>
 8010dda:	b908      	cbnz	r0, 8010de0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010ddc:	2000      	movs	r0, #0
}
 8010dde:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8010de0:	4620      	mov	r0, r4
 8010de2:	f7ff ff47 	bl	8010c74 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010de6:	4620      	mov	r0, r4
 8010de8:	f7ff ffa6 	bl	8010d38 <UTIL_TIMER_Start>
 8010dec:	e7f7      	b.n	8010dde <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010dee:	2001      	movs	r0, #1
}
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	0801137c 	.word	0x0801137c

08010df8 <UTIL_TIMER_IRQ_Handler>:
{
 8010df8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dfa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010dfe:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010e00:	4c1e      	ldr	r4, [pc, #120]	; (8010e7c <UTIL_TIMER_IRQ_Handler+0x84>)
 8010e02:	6963      	ldr	r3, [r4, #20]
 8010e04:	4798      	blx	r3
 8010e06:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010e08:	6923      	ldr	r3, [r4, #16]
 8010e0a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8010e0c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8010e0e:	4b1c      	ldr	r3, [pc, #112]	; (8010e80 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	b923      	cbnz	r3, 8010e1e <UTIL_TIMER_IRQ_Handler+0x26>
 8010e14:	e018      	b.n	8010e48 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8010e16:	2200      	movs	r2, #0
 8010e18:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010e1a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010e1c:	b1a3      	cbz	r3, 8010e48 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	42a2      	cmp	r2, r4
 8010e22:	d9f8      	bls.n	8010e16 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8010e24:	1a31      	subs	r1, r6, r0
 8010e26:	440a      	add	r2, r1
 8010e28:	601a      	str	r2, [r3, #0]
 8010e2a:	e7f6      	b.n	8010e1a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8010e2c:	4b14      	ldr	r3, [pc, #80]	; (8010e80 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e2e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8010e30:	6962      	ldr	r2, [r4, #20]
 8010e32:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8010e34:	2300      	movs	r3, #0
 8010e36:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8010e38:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8010e3a:	68e3      	ldr	r3, [r4, #12]
 8010e3c:	6920      	ldr	r0, [r4, #16]
 8010e3e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010e40:	8963      	ldrh	r3, [r4, #10]
 8010e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e46:	d012      	beq.n	8010e6e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010e48:	4b0d      	ldr	r3, [pc, #52]	; (8010e80 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	b13b      	cbz	r3, 8010e5e <UTIL_TIMER_IRQ_Handler+0x66>
 8010e4e:	681c      	ldr	r4, [r3, #0]
 8010e50:	2c00      	cmp	r4, #0
 8010e52:	d0eb      	beq.n	8010e2c <UTIL_TIMER_IRQ_Handler+0x34>
 8010e54:	4b09      	ldr	r3, [pc, #36]	; (8010e7c <UTIL_TIMER_IRQ_Handler+0x84>)
 8010e56:	699b      	ldr	r3, [r3, #24]
 8010e58:	4798      	blx	r3
 8010e5a:	4284      	cmp	r4, r0
 8010e5c:	d3e6      	bcc.n	8010e2c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010e5e:	4b08      	ldr	r3, [pc, #32]	; (8010e80 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010e60:	6818      	ldr	r0, [r3, #0]
 8010e62:	b108      	cbz	r0, 8010e68 <UTIL_TIMER_IRQ_Handler+0x70>
 8010e64:	7a03      	ldrb	r3, [r0, #8]
 8010e66:	b133      	cbz	r3, 8010e76 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e68:	f385 8810 	msr	PRIMASK, r5
}
 8010e6c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f7ff ff62 	bl	8010d38 <UTIL_TIMER_Start>
 8010e74:	e7e8      	b.n	8010e48 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8010e76:	f7ff fee5 	bl	8010c44 <TimerSetTimeout>
 8010e7a:	e7f5      	b.n	8010e68 <UTIL_TIMER_IRQ_Handler+0x70>
 8010e7c:	0801137c 	.word	0x0801137c
 8010e80:	20001814 	.word	0x20001814

08010e84 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8010e84:	4601      	mov	r1, r0
  int i = 0;
 8010e86:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8010e88:	680a      	ldr	r2, [r1, #0]
 8010e8a:	7813      	ldrb	r3, [r2, #0]
 8010e8c:	3b30      	subs	r3, #48	; 0x30
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	2b09      	cmp	r3, #9
 8010e92:	d808      	bhi.n	8010ea6 <ee_skip_atoi+0x22>
 8010e94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010e98:	1c53      	adds	r3, r2, #1
 8010e9a:	600b      	str	r3, [r1, #0]
 8010e9c:	7813      	ldrb	r3, [r2, #0]
 8010e9e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010ea2:	3830      	subs	r0, #48	; 0x30
 8010ea4:	e7f0      	b.n	8010e88 <ee_skip_atoi+0x4>
  return i;
}
 8010ea6:	4770      	bx	lr

08010ea8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8010ea8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8010eac:	b093      	sub	sp, #76	; 0x4c
 8010eae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010eb0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8010eb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010eb6:	d111      	bne.n	8010edc <ee_number+0x34>
  char *dig = lower_digits;
 8010eb8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8010fac <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8010ebc:	469c      	mov	ip, r3
 8010ebe:	3b02      	subs	r3, #2
 8010ec0:	2b22      	cmp	r3, #34	; 0x22
 8010ec2:	d871      	bhi.n	8010fa8 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8010ec4:	f015 0401 	ands.w	r4, r5, #1
 8010ec8:	d00b      	beq.n	8010ee2 <ee_number+0x3a>
 8010eca:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8010ecc:	f015 0f02 	tst.w	r5, #2
 8010ed0:	d010      	beq.n	8010ef4 <ee_number+0x4c>
  {
    if (num < 0)
 8010ed2:	2a00      	cmp	r2, #0
 8010ed4:	db07      	blt.n	8010ee6 <ee_number+0x3e>
  sign = 0;
 8010ed6:	f04f 0e00 	mov.w	lr, #0
 8010eda:	e00d      	b.n	8010ef8 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 8010edc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010fb0 <ee_number+0x108>
 8010ee0:	e7ec      	b.n	8010ebc <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8010ee2:	2720      	movs	r7, #32
 8010ee4:	e7f2      	b.n	8010ecc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8010ee6:	4252      	negs	r2, r2
      size--;
 8010ee8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010eea:	3b01      	subs	r3, #1
 8010eec:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 8010eee:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8010ef2:	e001      	b.n	8010ef8 <ee_number+0x50>
  sign = 0;
 8010ef4:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8010ef8:	b9da      	cbnz	r2, 8010f32 <ee_number+0x8a>
    tmp[i++] = '0';
 8010efa:	2330      	movs	r3, #48	; 0x30
 8010efc:	f88d 3004 	strb.w	r3, [sp, #4]
 8010f00:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8010f02:	42b5      	cmp	r5, r6
 8010f04:	dd00      	ble.n	8010f08 <ee_number+0x60>
 8010f06:	462e      	mov	r6, r5
  size -= precision;
 8010f08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010f0a:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010f0c:	b30c      	cbz	r4, 8010f52 <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 8010f0e:	f1be 0f00 	cmp.w	lr, #0
 8010f12:	d003      	beq.n	8010f1c <ee_number+0x74>
 8010f14:	f800 eb01 	strb.w	lr, [r0], #1
 8010f18:	3901      	subs	r1, #1
 8010f1a:	d007      	beq.n	8010f2c <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f22:	dd20      	ble.n	8010f66 <ee_number+0xbe>
 8010f24:	f800 7b01 	strb.w	r7, [r0], #1
 8010f28:	3901      	subs	r1, #1
 8010f2a:	d1f7      	bne.n	8010f1c <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8010f2c:	b013      	add	sp, #76	; 0x4c
 8010f2e:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 8010f32:	2500      	movs	r5, #0
    while (num != 0)
 8010f34:	2a00      	cmp	r2, #0
 8010f36:	d0e4      	beq.n	8010f02 <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010f38:	fbb2 f3fc 	udiv	r3, r2, ip
 8010f3c:	fb0c 2213 	mls	r2, ip, r3, r2
 8010f40:	f818 a002 	ldrb.w	sl, [r8, r2]
 8010f44:	aa12      	add	r2, sp, #72	; 0x48
 8010f46:	442a      	add	r2, r5
 8010f48:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8010f4c:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010f4e:	3501      	adds	r5, #1
 8010f50:	e7f0      	b.n	8010f34 <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f58:	ddd9      	ble.n	8010f0e <ee_number+0x66>
 8010f5a:	2220      	movs	r2, #32
 8010f5c:	f800 2b01 	strb.w	r2, [r0], #1
 8010f60:	3901      	subs	r1, #1
 8010f62:	d1f6      	bne.n	8010f52 <ee_number+0xaa>
 8010f64:	e7e2      	b.n	8010f2c <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 8010f66:	42ae      	cmp	r6, r5
 8010f68:	f106 36ff 	add.w	r6, r6, #4294967295
 8010f6c:	dd05      	ble.n	8010f7a <ee_number+0xd2>
 8010f6e:	2230      	movs	r2, #48	; 0x30
 8010f70:	f800 2b01 	strb.w	r2, [r0], #1
 8010f74:	3901      	subs	r1, #1
 8010f76:	d1f6      	bne.n	8010f66 <ee_number+0xbe>
 8010f78:	e7d8      	b.n	8010f2c <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010f7a:	2d00      	cmp	r5, #0
 8010f7c:	f105 35ff 	add.w	r5, r5, #4294967295
 8010f80:	dd08      	ble.n	8010f94 <ee_number+0xec>
 8010f82:	aa12      	add	r2, sp, #72	; 0x48
 8010f84:	442a      	add	r2, r5
 8010f86:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8010f8a:	f800 2b01 	strb.w	r2, [r0], #1
 8010f8e:	3901      	subs	r1, #1
 8010f90:	d1f3      	bne.n	8010f7a <ee_number+0xd2>
 8010f92:	e7cb      	b.n	8010f2c <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f9a:	ddc7      	ble.n	8010f2c <ee_number+0x84>
 8010f9c:	2220      	movs	r2, #32
 8010f9e:	f800 2b01 	strb.w	r2, [r0], #1
 8010fa2:	3901      	subs	r1, #1
 8010fa4:	d1f6      	bne.n	8010f94 <ee_number+0xec>
 8010fa6:	e7c1      	b.n	8010f2c <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8010fa8:	2000      	movs	r0, #0
 8010faa:	e7bf      	b.n	8010f2c <ee_number+0x84>
 8010fac:	08012054 	.word	0x08012054
 8010fb0:	0801202c 	.word	0x0801202c

08010fb4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fb8:	b087      	sub	sp, #28
 8010fba:	9205      	str	r2, [sp, #20]
 8010fbc:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8010fbe:	1e0f      	subs	r7, r1, #0
 8010fc0:	f340 80b9 	ble.w	8011136 <tiny_vsnprintf_like+0x182>
 8010fc4:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	e004      	b.n	8010fd4 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8010fca:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010fce:	9b05      	ldr	r3, [sp, #20]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	9305      	str	r3, [sp, #20]
 8010fd4:	9905      	ldr	r1, [sp, #20]
 8010fd6:	780a      	ldrb	r2, [r1, #0]
 8010fd8:	b922      	cbnz	r2, 8010fe4 <tiny_vsnprintf_like+0x30>
 8010fda:	1ba3      	subs	r3, r4, r6
 8010fdc:	1e78      	subs	r0, r7, #1
 8010fde:	4283      	cmp	r3, r0
 8010fe0:	f2c0 80a3 	blt.w	801112a <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 8010fe4:	1ba3      	subs	r3, r4, r6
 8010fe6:	f107 38ff 	add.w	r8, r7, #4294967295
 8010fea:	4543      	cmp	r3, r8
 8010fec:	f280 809d 	bge.w	801112a <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 8010ff0:	2a25      	cmp	r2, #37	; 0x25
 8010ff2:	d1ea      	bne.n	8010fca <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8010ff4:	1c4b      	adds	r3, r1, #1
 8010ff6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8010ff8:	784b      	ldrb	r3, [r1, #1]
 8010ffa:	2b30      	cmp	r3, #48	; 0x30
 8010ffc:	d020      	beq.n	8011040 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8010ffe:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8011002:	3b30      	subs	r3, #48	; 0x30
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2b09      	cmp	r3, #9
 8011008:	d91d      	bls.n	8011046 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801100a:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 801100e:	9b05      	ldr	r3, [sp, #20]
 8011010:	781a      	ldrb	r2, [r3, #0]
 8011012:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8011016:	2b20      	cmp	r3, #32
 8011018:	d868      	bhi.n	80110ec <tiny_vsnprintf_like+0x138>
 801101a:	e8df f003 	tbb	[pc, r3]
 801101e:	674b      	.short	0x674b
 8011020:	67676767 	.word	0x67676767
 8011024:	67676767 	.word	0x67676767
 8011028:	67631b67 	.word	0x67631b67
 801102c:	63676767 	.word	0x63676767
 8011030:	67676767 	.word	0x67676767
 8011034:	67676767 	.word	0x67676767
 8011038:	19672967 	.word	0x19672967
 801103c:	6767      	.short	0x6767
 801103e:	7d          	.byte	0x7d
 801103f:	00          	.byte	0x00
      flags |= ZEROPAD;
 8011040:	f04f 0901 	mov.w	r9, #1
 8011044:	e7dd      	b.n	8011002 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8011046:	a805      	add	r0, sp, #20
 8011048:	f7ff ff1c 	bl	8010e84 <ee_skip_atoi>
 801104c:	4605      	mov	r5, r0
 801104e:	e7de      	b.n	801100e <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8011050:	230a      	movs	r3, #10
 8011052:	e032      	b.n	80110ba <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011054:	3d01      	subs	r5, #1
 8011056:	2d00      	cmp	r5, #0
 8011058:	dd03      	ble.n	8011062 <tiny_vsnprintf_like+0xae>
 801105a:	2320      	movs	r3, #32
 801105c:	f804 3b01 	strb.w	r3, [r4], #1
 8011060:	e7f8      	b.n	8011054 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8011062:	9b04      	ldr	r3, [sp, #16]
 8011064:	1d1a      	adds	r2, r3, #4
 8011066:	9204      	str	r2, [sp, #16]
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801106e:	e7ae      	b.n	8010fce <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011070:	9b04      	ldr	r3, [sp, #16]
 8011072:	1d1a      	adds	r2, r3, #4
 8011074:	9204      	str	r2, [sp, #16]
 8011076:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 801107a:	f1b8 0f00 	cmp.w	r8, #0
 801107e:	d00a      	beq.n	8011096 <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8011080:	4640      	mov	r0, r8
 8011082:	f7ef f879 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8011086:	1e6b      	subs	r3, r5, #1
 8011088:	4285      	cmp	r5, r0
 801108a:	dd07      	ble.n	801109c <tiny_vsnprintf_like+0xe8>
 801108c:	2220      	movs	r2, #32
 801108e:	f804 2b01 	strb.w	r2, [r4], #1
 8011092:	461d      	mov	r5, r3
 8011094:	e7f7      	b.n	8011086 <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8011096:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 801113c <tiny_vsnprintf_like+0x188>
 801109a:	e7f1      	b.n	8011080 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801109c:	2200      	movs	r2, #0
 801109e:	e006      	b.n	80110ae <tiny_vsnprintf_like+0xfa>
 80110a0:	4643      	mov	r3, r8
 80110a2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80110a6:	f804 1b01 	strb.w	r1, [r4], #1
 80110aa:	3201      	adds	r2, #1
 80110ac:	4698      	mov	r8, r3
 80110ae:	4282      	cmp	r2, r0
 80110b0:	dbf6      	blt.n	80110a0 <tiny_vsnprintf_like+0xec>
 80110b2:	e78c      	b.n	8010fce <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 80110b4:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80110b8:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80110ba:	f019 0f02 	tst.w	r9, #2
 80110be:	d02f      	beq.n	8011120 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 80110c0:	9a04      	ldr	r2, [sp, #16]
 80110c2:	1d11      	adds	r1, r2, #4
 80110c4:	9104      	str	r1, [sp, #16]
 80110c6:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80110c8:	1ba1      	subs	r1, r4, r6
 80110ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80110ce:	f04f 30ff 	mov.w	r0, #4294967295
 80110d2:	9001      	str	r0, [sp, #4]
 80110d4:	9500      	str	r5, [sp, #0]
 80110d6:	eba8 0101 	sub.w	r1, r8, r1
 80110da:	4620      	mov	r0, r4
 80110dc:	f7ff fee4 	bl	8010ea8 <ee_number>
 80110e0:	4604      	mov	r4, r0
 80110e2:	e774      	b.n	8010fce <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80110e4:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80110e8:	230a      	movs	r3, #10
 80110ea:	e7e6      	b.n	80110ba <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 80110ec:	2a25      	cmp	r2, #37	; 0x25
 80110ee:	d002      	beq.n	80110f6 <tiny_vsnprintf_like+0x142>
 80110f0:	2325      	movs	r3, #37	; 0x25
 80110f2:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80110f6:	1ba3      	subs	r3, r4, r6
 80110f8:	4598      	cmp	r8, r3
 80110fa:	dd0f      	ble.n	801111c <tiny_vsnprintf_like+0x168>
        if (*fmt)
 80110fc:	9b05      	ldr	r3, [sp, #20]
 80110fe:	781a      	ldrb	r2, [r3, #0]
 8011100:	b13a      	cbz	r2, 8011112 <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 8011102:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011106:	1ba3      	subs	r3, r4, r6
 8011108:	4598      	cmp	r8, r3
 801110a:	f73f af60 	bgt.w	8010fce <tiny_vsnprintf_like+0x1a>
    base = 10;
 801110e:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8011110:	e7d3      	b.n	80110ba <tiny_vsnprintf_like+0x106>
          --fmt;
 8011112:	3b01      	subs	r3, #1
 8011114:	9305      	str	r3, [sp, #20]
 8011116:	e7f6      	b.n	8011106 <tiny_vsnprintf_like+0x152>
        base = 16;
 8011118:	2310      	movs	r3, #16
 801111a:	e7ce      	b.n	80110ba <tiny_vsnprintf_like+0x106>
    base = 10;
 801111c:	230a      	movs	r3, #10
 801111e:	e7cc      	b.n	80110ba <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 8011120:	9a04      	ldr	r2, [sp, #16]
 8011122:	1d11      	adds	r1, r2, #4
 8011124:	9104      	str	r1, [sp, #16]
 8011126:	6812      	ldr	r2, [r2, #0]
 8011128:	e7ce      	b.n	80110c8 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 801112a:	2300      	movs	r3, #0
 801112c:	7023      	strb	r3, [r4, #0]
  return str - buf;
 801112e:	1ba0      	subs	r0, r4, r6
}
 8011130:	b007      	add	sp, #28
 8011132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8011136:	2000      	movs	r0, #0
 8011138:	e7fa      	b.n	8011130 <tiny_vsnprintf_like+0x17c>
 801113a:	bf00      	nop
 801113c:	0801207c 	.word	0x0801207c

08011140 <__libc_init_array>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	4d0d      	ldr	r5, [pc, #52]	; (8011178 <__libc_init_array+0x38>)
 8011144:	4c0d      	ldr	r4, [pc, #52]	; (801117c <__libc_init_array+0x3c>)
 8011146:	1b64      	subs	r4, r4, r5
 8011148:	10a4      	asrs	r4, r4, #2
 801114a:	2600      	movs	r6, #0
 801114c:	42a6      	cmp	r6, r4
 801114e:	d109      	bne.n	8011164 <__libc_init_array+0x24>
 8011150:	4d0b      	ldr	r5, [pc, #44]	; (8011180 <__libc_init_array+0x40>)
 8011152:	4c0c      	ldr	r4, [pc, #48]	; (8011184 <__libc_init_array+0x44>)
 8011154:	f000 f8a0 	bl	8011298 <_init>
 8011158:	1b64      	subs	r4, r4, r5
 801115a:	10a4      	asrs	r4, r4, #2
 801115c:	2600      	movs	r6, #0
 801115e:	42a6      	cmp	r6, r4
 8011160:	d105      	bne.n	801116e <__libc_init_array+0x2e>
 8011162:	bd70      	pop	{r4, r5, r6, pc}
 8011164:	f855 3b04 	ldr.w	r3, [r5], #4
 8011168:	4798      	blx	r3
 801116a:	3601      	adds	r6, #1
 801116c:	e7ee      	b.n	801114c <__libc_init_array+0xc>
 801116e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011172:	4798      	blx	r3
 8011174:	3601      	adds	r6, #1
 8011176:	e7f2      	b.n	801115e <__libc_init_array+0x1e>
 8011178:	0801208c 	.word	0x0801208c
 801117c:	0801208c 	.word	0x0801208c
 8011180:	0801208c 	.word	0x0801208c
 8011184:	08012090 	.word	0x08012090

08011188 <memset>:
 8011188:	4402      	add	r2, r0
 801118a:	4603      	mov	r3, r0
 801118c:	4293      	cmp	r3, r2
 801118e:	d100      	bne.n	8011192 <memset+0xa>
 8011190:	4770      	bx	lr
 8011192:	f803 1b01 	strb.w	r1, [r3], #1
 8011196:	e7f9      	b.n	801118c <memset+0x4>

08011198 <floor>:
 8011198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801119c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80111a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80111a4:	2e13      	cmp	r6, #19
 80111a6:	4602      	mov	r2, r0
 80111a8:	460b      	mov	r3, r1
 80111aa:	4607      	mov	r7, r0
 80111ac:	460c      	mov	r4, r1
 80111ae:	4605      	mov	r5, r0
 80111b0:	dc34      	bgt.n	801121c <floor+0x84>
 80111b2:	2e00      	cmp	r6, #0
 80111b4:	da15      	bge.n	80111e2 <floor+0x4a>
 80111b6:	a334      	add	r3, pc, #208	; (adr r3, 8011288 <floor+0xf0>)
 80111b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111bc:	f7ee ffea 	bl	8000194 <__adddf3>
 80111c0:	2200      	movs	r2, #0
 80111c2:	2300      	movs	r3, #0
 80111c4:	f7ef fa1a 	bl	80005fc <__aeabi_dcmpgt>
 80111c8:	b140      	cbz	r0, 80111dc <floor+0x44>
 80111ca:	2c00      	cmp	r4, #0
 80111cc:	da59      	bge.n	8011282 <floor+0xea>
 80111ce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80111d2:	ea57 0503 	orrs.w	r5, r7, r3
 80111d6:	d001      	beq.n	80111dc <floor+0x44>
 80111d8:	4c2d      	ldr	r4, [pc, #180]	; (8011290 <floor+0xf8>)
 80111da:	2500      	movs	r5, #0
 80111dc:	4623      	mov	r3, r4
 80111de:	462f      	mov	r7, r5
 80111e0:	e025      	b.n	801122e <floor+0x96>
 80111e2:	4a2c      	ldr	r2, [pc, #176]	; (8011294 <floor+0xfc>)
 80111e4:	fa42 f806 	asr.w	r8, r2, r6
 80111e8:	ea01 0208 	and.w	r2, r1, r8
 80111ec:	4302      	orrs	r2, r0
 80111ee:	d01e      	beq.n	801122e <floor+0x96>
 80111f0:	a325      	add	r3, pc, #148	; (adr r3, 8011288 <floor+0xf0>)
 80111f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f6:	f7ee ffcd 	bl	8000194 <__adddf3>
 80111fa:	2200      	movs	r2, #0
 80111fc:	2300      	movs	r3, #0
 80111fe:	f7ef f9fd 	bl	80005fc <__aeabi_dcmpgt>
 8011202:	2800      	cmp	r0, #0
 8011204:	d0ea      	beq.n	80111dc <floor+0x44>
 8011206:	2c00      	cmp	r4, #0
 8011208:	bfbe      	ittt	lt
 801120a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801120e:	fa43 f606 	asrlt.w	r6, r3, r6
 8011212:	19a4      	addlt	r4, r4, r6
 8011214:	ea24 0408 	bic.w	r4, r4, r8
 8011218:	2500      	movs	r5, #0
 801121a:	e7df      	b.n	80111dc <floor+0x44>
 801121c:	2e33      	cmp	r6, #51	; 0x33
 801121e:	dd0a      	ble.n	8011236 <floor+0x9e>
 8011220:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011224:	d103      	bne.n	801122e <floor+0x96>
 8011226:	f7ee ffb5 	bl	8000194 <__adddf3>
 801122a:	4607      	mov	r7, r0
 801122c:	460b      	mov	r3, r1
 801122e:	4638      	mov	r0, r7
 8011230:	4619      	mov	r1, r3
 8011232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011236:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801123a:	f04f 32ff 	mov.w	r2, #4294967295
 801123e:	fa22 f808 	lsr.w	r8, r2, r8
 8011242:	ea18 0f00 	tst.w	r8, r0
 8011246:	d0f2      	beq.n	801122e <floor+0x96>
 8011248:	a30f      	add	r3, pc, #60	; (adr r3, 8011288 <floor+0xf0>)
 801124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124e:	f7ee ffa1 	bl	8000194 <__adddf3>
 8011252:	2200      	movs	r2, #0
 8011254:	2300      	movs	r3, #0
 8011256:	f7ef f9d1 	bl	80005fc <__aeabi_dcmpgt>
 801125a:	2800      	cmp	r0, #0
 801125c:	d0be      	beq.n	80111dc <floor+0x44>
 801125e:	2c00      	cmp	r4, #0
 8011260:	da02      	bge.n	8011268 <floor+0xd0>
 8011262:	2e14      	cmp	r6, #20
 8011264:	d103      	bne.n	801126e <floor+0xd6>
 8011266:	3401      	adds	r4, #1
 8011268:	ea25 0508 	bic.w	r5, r5, r8
 801126c:	e7b6      	b.n	80111dc <floor+0x44>
 801126e:	2301      	movs	r3, #1
 8011270:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011274:	fa03 f606 	lsl.w	r6, r3, r6
 8011278:	4435      	add	r5, r6
 801127a:	42bd      	cmp	r5, r7
 801127c:	bf38      	it	cc
 801127e:	18e4      	addcc	r4, r4, r3
 8011280:	e7f2      	b.n	8011268 <floor+0xd0>
 8011282:	2500      	movs	r5, #0
 8011284:	462c      	mov	r4, r5
 8011286:	e7a9      	b.n	80111dc <floor+0x44>
 8011288:	8800759c 	.word	0x8800759c
 801128c:	7e37e43c 	.word	0x7e37e43c
 8011290:	bff00000 	.word	0xbff00000
 8011294:	000fffff 	.word	0x000fffff

08011298 <_init>:
 8011298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801129a:	bf00      	nop
 801129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801129e:	bc08      	pop	{r3}
 80112a0:	469e      	mov	lr, r3
 80112a2:	4770      	bx	lr

080112a4 <_fini>:
 80112a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a6:	bf00      	nop
 80112a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112aa:	bc08      	pop	{r3}
 80112ac:	469e      	mov	lr, r3
 80112ae:	4770      	bx	lr
