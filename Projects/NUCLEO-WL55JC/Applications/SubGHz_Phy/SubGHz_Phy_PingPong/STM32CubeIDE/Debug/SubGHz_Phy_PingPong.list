
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d58  08007d58  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d60  08007d60  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000018  08007d80  00020018  2**2
                  ALLOC
 10 RAM1_region   00000000  20000918  20000918  00020018  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020018  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000918  20000918  00020918  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a0dc  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000734e  00000000  00000000  0005a11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00013d56  00000000  00000000  0006146c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001950  00000000  00000000  000751c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000017f8  00000000  00000000  00076b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023256  00000000  00000000  00078310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002b8fe  00000000  00000000  0009b566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c416a  00000000  00000000  000c6e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  0018afce  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00004184  00000000  00000000  0018b024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	08007818 	.word	0x08007818

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	08007818 	.word	0x08007818

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96c 	b.w	8000478 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468e      	mov	lr, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8082 	bne.w	80002ce <__udivmoddi4+0x116>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d946      	bls.n	800025e <__udivmoddi4+0xa6>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa05 f302 	lsl.w	r3, r5, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0e03 	orr.w	lr, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbe fcf8 	udiv	ip, lr, r8
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80001fa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80001fe:	fb0c f001 	mul.w	r0, ip, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f10c 35ff 	add.w	r5, ip, #4294967295
 800020c:	f080 8116 	bcs.w	800043c <__udivmoddi4+0x284>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8113 	bls.w	800043c <__udivmoddi4+0x284>
 8000216:	f1ac 0c02 	sub.w	ip, ip, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a1b      	subs	r3, r3, r0
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 f101 	mul.w	r1, r0, r1
 8000230:	42a1      	cmp	r1, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x90>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8101 	bcs.w	8000440 <__udivmoddi4+0x288>
 800023e:	42a1      	cmp	r1, r4
 8000240:	f240 80fe 	bls.w	8000440 <__udivmoddi4+0x288>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	1a64      	subs	r4, r4, r1
 800024a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40d4      	lsrs	r4, r2
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	b902      	cbnz	r2, 8000262 <__udivmoddi4+0xaa>
 8000260:	deff      	udf	#255	; 0xff
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	2a00      	cmp	r2, #0
 8000268:	d14f      	bne.n	800030a <__udivmoddi4+0x152>
 800026a:	1bcb      	subs	r3, r1, r7
 800026c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000270:	fa1f f887 	uxth.w	r8, r7
 8000274:	2101      	movs	r1, #1
 8000276:	fbb3 fcfe 	udiv	ip, r3, lr
 800027a:	0c25      	lsrs	r5, r4, #16
 800027c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000280:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000284:	fb08 f30c 	mul.w	r3, r8, ip
 8000288:	42ab      	cmp	r3, r5
 800028a:	d907      	bls.n	800029c <__udivmoddi4+0xe4>
 800028c:	197d      	adds	r5, r7, r5
 800028e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0xe2>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f200 80e7 	bhi.w	8000468 <__udivmoddi4+0x2b0>
 800029a:	4684      	mov	ip, r0
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a3      	uxth	r3, r4
 80002a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80002a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0x10c>
 80002b4:	193c      	adds	r4, r7, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x10a>
 80002bc:	45a0      	cmp	r8, r4
 80002be:	f200 80d7 	bhi.w	8000470 <__udivmoddi4+0x2b8>
 80002c2:	4618      	mov	r0, r3
 80002c4:	eba4 0408 	sub.w	r4, r4, r8
 80002c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002cc:	e7c0      	b.n	8000250 <__udivmoddi4+0x98>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80af 	beq.w	8000436 <__udivmoddi4+0x27e>
 80002d8:	2100      	movs	r1, #0
 80002da:	e9c6 0500 	strd	r0, r5, [r6]
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	d14b      	bne.n	8000384 <__udivmoddi4+0x1cc>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	d302      	bcc.n	80002f6 <__udivmoddi4+0x13e>
 80002f0:	4282      	cmp	r2, r0
 80002f2:	f200 80b7 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002f6:	1a84      	subs	r4, r0, r2
 80002f8:	eb65 0303 	sbc.w	r3, r5, r3
 80002fc:	2001      	movs	r0, #1
 80002fe:	469e      	mov	lr, r3
 8000300:	2e00      	cmp	r6, #0
 8000302:	d0aa      	beq.n	800025a <__udivmoddi4+0xa2>
 8000304:	e9c6 4e00 	strd	r4, lr, [r6]
 8000308:	e7a7      	b.n	800025a <__udivmoddi4+0xa2>
 800030a:	f1c2 0c20 	rsb	ip, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	4097      	lsls	r7, r2
 8000314:	fa20 f00c 	lsr.w	r0, r0, ip
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000320:	4318      	orrs	r0, r3
 8000322:	fbbc f1fe 	udiv	r1, ip, lr
 8000326:	0c05      	lsrs	r5, r0, #16
 8000328:	fb0e cc11 	mls	ip, lr, r1, ip
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000334:	fb01 f308 	mul.w	r3, r1, r8
 8000338:	42ab      	cmp	r3, r5
 800033a:	fa04 f402 	lsl.w	r4, r4, r2
 800033e:	d909      	bls.n	8000354 <__udivmoddi4+0x19c>
 8000340:	197d      	adds	r5, r7, r5
 8000342:	f101 3cff 	add.w	ip, r1, #4294967295
 8000346:	f080 808b 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	42ab      	cmp	r3, r5
 800034c:	f240 8088 	bls.w	8000460 <__udivmoddi4+0x2a8>
 8000350:	3902      	subs	r1, #2
 8000352:	443d      	add	r5, r7
 8000354:	1aeb      	subs	r3, r5, r3
 8000356:	b285      	uxth	r5, r0
 8000358:	fbb3 f0fe 	udiv	r0, r3, lr
 800035c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000360:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000364:	fb00 f308 	mul.w	r3, r0, r8
 8000368:	42ab      	cmp	r3, r5
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x1c4>
 800036c:	197d      	adds	r5, r7, r5
 800036e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000372:	d271      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d96f      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000378:	3802      	subs	r0, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	e778      	b.n	8000276 <__udivmoddi4+0xbe>
 8000384:	f1c1 0c20 	rsb	ip, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f70c 	lsr.w	r7, r2, ip
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 f40c 	lsr.w	r4, r0, ip
 8000394:	fa05 f301 	lsl.w	r3, r5, r1
 8000398:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039c:	fa25 f50c 	lsr.w	r5, r5, ip
 80003a0:	431c      	orrs	r4, r3
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fbb5 f9fe 	udiv	r9, r5, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 5519 	mls	r5, lr, r9, r5
 80003b0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003b4:	fb09 fa08 	mul.w	sl, r9, r8
 80003b8:	45aa      	cmp	sl, r5
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f301 	lsl.w	r3, r0, r1
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x21e>
 80003c4:	197d      	adds	r5, r7, r5
 80003c6:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ca:	d247      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003cc:	45aa      	cmp	sl, r5
 80003ce:	d945      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003d0:	f1a9 0902 	sub.w	r9, r9, #2
 80003d4:	443d      	add	r5, r7
 80003d6:	eba5 050a 	sub.w	r5, r5, sl
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80003e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45a0      	cmp	r8, r4
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000404:	eba4 0408 	sub.w	r4, r4, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454c      	cmp	r4, r9
 800040e:	46c6      	mov	lr, r8
 8000410:	464d      	mov	r5, r9
 8000412:	d319      	bcc.n	8000448 <__udivmoddi4+0x290>
 8000414:	d016      	beq.n	8000444 <__udivmoddi4+0x28c>
 8000416:	b15e      	cbz	r6, 8000430 <__udivmoddi4+0x278>
 8000418:	ebb3 020e 	subs.w	r2, r3, lr
 800041c:	eb64 0405 	sbc.w	r4, r4, r5
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40ca      	lsrs	r2, r1
 8000426:	ea4c 0202 	orr.w	r2, ip, r2
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c6 2400 	strd	r2, r4, [r6]
 8000430:	2100      	movs	r1, #0
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e70e      	b.n	800025a <__udivmoddi4+0xa2>
 800043c:	46ac      	mov	ip, r5
 800043e:	e6ed      	b.n	800021c <__udivmoddi4+0x64>
 8000440:	4618      	mov	r0, r3
 8000442:	e701      	b.n	8000248 <__udivmoddi4+0x90>
 8000444:	4543      	cmp	r3, r8
 8000446:	d2e6      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000448:	ebb8 0e02 	subs.w	lr, r8, r2
 800044c:	eb69 0507 	sbc.w	r5, r9, r7
 8000450:	3801      	subs	r0, #1
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4628      	mov	r0, r5
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78f      	b.n	800037c <__udivmoddi4+0x1c4>
 800045c:	4681      	mov	r9, r0
 800045e:	e7ba      	b.n	80003d6 <__udivmoddi4+0x21e>
 8000460:	4661      	mov	r1, ip
 8000462:	e777      	b.n	8000354 <__udivmoddi4+0x19c>
 8000464:	4608      	mov	r0, r1
 8000466:	e74b      	b.n	8000300 <__udivmoddi4+0x148>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	443d      	add	r5, r7
 800046e:	e715      	b.n	800029c <__udivmoddi4+0xe4>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	e726      	b.n	80002c4 <__udivmoddi4+0x10c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800047c:	b500      	push	{lr}
 800047e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000486:	f042 0204 	orr.w	r2, r2, #4
 800048a:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800048c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800048e:	f002 0204 	and.w	r2, r2, #4
 8000492:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000494:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000498:	f042 0201 	orr.w	r2, r2, #1
 800049c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800049e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80004a6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2102      	movs	r1, #2
 80004ac:	200f      	movs	r0, #15
 80004ae:	f001 f85d 	bl	800156c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004b2:	200f      	movs	r0, #15
 80004b4:	f001 f88e 	bl	80015d4 <HAL_NVIC_EnableIRQ>

}
 80004b8:	b003      	add	sp, #12
 80004ba:	f85d fb04 	ldr.w	pc, [sp], #4

080004be <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004be:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x2>

080004c2 <SystemClock_Config>:
{
 80004c2:	b510      	push	{r4, lr}
 80004c4:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2248      	movs	r2, #72	; 0x48
 80004c8:	2100      	movs	r1, #0
 80004ca:	a808      	add	r0, sp, #32
 80004cc:	f007 f98a 	bl	80077e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	2400      	movs	r4, #0
 80004d2:	9401      	str	r4, [sp, #4]
 80004d4:	9402      	str	r4, [sp, #8]
 80004d6:	9403      	str	r4, [sp, #12]
 80004d8:	9404      	str	r4, [sp, #16]
 80004da:	9405      	str	r4, [sp, #20]
 80004dc:	9406      	str	r4, [sp, #24]
 80004de:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80004e0:	f001 fc58 	bl	8001d94 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80004ec:	f023 0318 	bic.w	r3, r3, #24
 80004f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004f8:	6813      	ldr	r3, [r2, #0]
 80004fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000502:	6013      	str	r3, [r2, #0]
 8000504:	6813      	ldr	r3, [r2, #0]
 8000506:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800050e:	2324      	movs	r3, #36	; 0x24
 8000510:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000512:	2381      	movs	r3, #129	; 0x81
 8000514:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000516:	2301      	movs	r3, #1
 8000518:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800051a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800051c:	23b0      	movs	r3, #176	; 0xb0
 800051e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000520:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	a808      	add	r0, sp, #32
 8000524:	f001 fdce 	bl	80020c4 <HAL_RCC_OscConfig>
 8000528:	b970      	cbnz	r0, 8000548 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800052a:	234f      	movs	r3, #79	; 0x4f
 800052c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800052e:	2300      	movs	r3, #0
 8000530:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000534:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000536:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000538:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053a:	2102      	movs	r1, #2
 800053c:	a801      	add	r0, sp, #4
 800053e:	f002 f8fd 	bl	800273c <HAL_RCC_ClockConfig>
 8000542:	b918      	cbnz	r0, 800054c <SystemClock_Config+0x8a>
}
 8000544:	b01a      	add	sp, #104	; 0x68
 8000546:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000548:	f7ff ffb9 	bl	80004be <Error_Handler>
    Error_Handler();
 800054c:	f7ff ffb7 	bl	80004be <Error_Handler>

08000550 <main>:
{
 8000550:	b508      	push	{r3, lr}
  HAL_Init();
 8000552:	f000 ffbb 	bl	80014cc <HAL_Init>
  SystemClock_Config();
 8000556:	f7ff ffb4 	bl	80004c2 <SystemClock_Config>
  MX_SubGHz_Phy_Init();
 800055a:	f000 fc1c 	bl	8000d96 <MX_SubGHz_Phy_Init>
    MX_SubGHz_Phy_Process();
 800055e:	f000 fc20 	bl	8000da2 <MX_SubGHz_Phy_Process>
  while (1)
 8000562:	e7fc      	b.n	800055e <main+0xe>

08000564 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000564:	b500      	push	{lr}
 8000566:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000568:	222c      	movs	r2, #44	; 0x2c
 800056a:	2100      	movs	r1, #0
 800056c:	a801      	add	r0, sp, #4
 800056e:	f007 f939 	bl	80077e4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <MX_RTC_Init+0x74>)
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_RTC_Init+0x78>)
 8000576:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000578:	231f      	movs	r3, #31
 800057a:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000580:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000582:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800058a:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000592:	f002 fc2f 	bl	8002df4 <HAL_RTC_Init>
 8000596:	b9a8      	cbnz	r0, 80005c4 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <MX_RTC_Init+0x74>)
 800059a:	f002 fd65 	bl	8003068 <HAL_RTCEx_SetSSRU_IT>
 800059e:	b9a0      	cbnz	r0, 80005ca <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80005a0:	2200      	movs	r2, #0
 80005a2:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80005a4:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80005a6:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80005a8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005ac:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80005ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80005b4:	a901      	add	r1, sp, #4
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <MX_RTC_Init+0x74>)
 80005b8:	f002 fc7a 	bl	8002eb0 <HAL_RTC_SetAlarm_IT>
 80005bc:	b940      	cbnz	r0, 80005d0 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005be:	b00d      	add	sp, #52	; 0x34
 80005c0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005c4:	f7ff ff7b 	bl	80004be <Error_Handler>
 80005c8:	e7e6      	b.n	8000598 <MX_RTC_Init+0x34>
    Error_Handler();
 80005ca:	f7ff ff78 	bl	80004be <Error_Handler>
 80005ce:	e7e7      	b.n	80005a0 <MX_RTC_Init+0x3c>
    Error_Handler();
 80005d0:	f7ff ff75 	bl	80004be <Error_Handler>
}
 80005d4:	e7f3      	b.n	80005be <MX_RTC_Init+0x5a>
 80005d6:	bf00      	nop
 80005d8:	20000758 	.word	0x20000758
 80005dc:	40002800 	.word	0x40002800

080005e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e6:	2238      	movs	r2, #56	; 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	a802      	add	r0, sp, #8
 80005ec:	f007 f8fa 	bl	80077e4 <memset>
  if(rtcHandle->Instance==RTC)
 80005f0:	6822      	ldr	r2, [r4, #0]
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <HAL_RTC_MspInit+0x7c>)
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d001      	beq.n	80005fc <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80005f8:	b010      	add	sp, #64	; 0x40
 80005fa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000606:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000608:	a802      	add	r0, sp, #8
 800060a:	f002 f9eb 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 800060e:	bb08      	cbnz	r0, 8000654 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000614:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800061c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000620:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000626:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800062e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000630:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	4611      	mov	r1, r2
 8000636:	2002      	movs	r0, #2
 8000638:	f000 ff98 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800063c:	2002      	movs	r0, #2
 800063e:	f000 ffc9 	bl	80015d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	4611      	mov	r1, r2
 8000646:	202a      	movs	r0, #42	; 0x2a
 8000648:	f000 ff90 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800064c:	202a      	movs	r0, #42	; 0x2a
 800064e:	f000 ffc1 	bl	80015d4 <HAL_NVIC_EnableIRQ>
}
 8000652:	e7d1      	b.n	80005f8 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000654:	f7ff ff33 	bl	80004be <Error_Handler>
 8000658:	e7da      	b.n	8000610 <HAL_RTC_MspInit+0x30>
 800065a:	bf00      	nop
 800065c:	40002800 	.word	0x40002800

08000660 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000660:	4770      	bx	lr

08000662 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000662:	4770      	bx	lr

08000664 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000666:	f000 ff47 	bl	80014f8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800066a:	2001      	movs	r0, #1
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <PWR_EnterStopMode+0x14>)
 800066e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000672:	f001 fbf3 	bl	8001e5c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000676:	bd08      	pop	{r3, pc}
 8000678:	58000400 	.word	0x58000400

0800067c <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 800067c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800067e:	f000 ff43 	bl	8001508 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000682:	bd08      	pop	{r3, pc}

08000684 <PWR_ExitStopMode>:
{
 8000684:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000686:	f000 ff3f 	bl	8001508 <HAL_ResumeTick>
  vcom_Resume();
 800068a:	f000 fb29 	bl	8000ce0 <vcom_Resume>
}
 800068e:	bd08      	pop	{r3, pc}

08000690 <PWR_EnterSleepMode>:
{
 8000690:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8000692:	f000 ff31 	bl	80014f8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000696:	2101      	movs	r1, #1
 8000698:	2000      	movs	r0, #0
 800069a:	f001 fb83 	bl	8001da4 <HAL_PWR_EnterSLEEPMode>
}
 800069e:	bd08      	pop	{r3, pc}

080006a0 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a0:	4770      	bx	lr

080006a2 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <NMI_Handler>

080006a4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <HardFault_Handler>

080006a6 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <MemManage_Handler>

080006a8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <BusFault_Handler>

080006aa <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <UsageFault_Handler>

080006ac <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ae:	4770      	bx	lr

080006b0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b0:	4770      	bx	lr

080006b2 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b2:	4770      	bx	lr

080006b4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80006b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80006b6:	4802      	ldr	r0, [pc, #8]	; (80006c0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 80006b8:	f002 fd02 	bl	80030c0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80006bc:	bd08      	pop	{r3, pc}
 80006be:	bf00      	nop
 80006c0:	20000758 	.word	0x20000758

080006c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <DMA1_Channel5_IRQHandler+0xc>)
 80006c8:	f001 f99a 	bl	8001a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006cc:	bd08      	pop	{r3, pc}
 80006ce:	bf00      	nop
 80006d0:	2000079c 	.word	0x2000079c

080006d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80006d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006d6:	4802      	ldr	r0, [pc, #8]	; (80006e0 <USART2_IRQHandler+0xc>)
 80006d8:	f003 f9b2 	bl	8003a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006dc:	bd08      	pop	{r3, pc}
 80006de:	bf00      	nop
 80006e0:	200007fc 	.word	0x200007fc

080006e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80006e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <RTC_Alarm_IRQHandler+0xc>)
 80006e8:	f002 fafe 	bl	8002ce8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80006ec:	bd08      	pop	{r3, pc}
 80006ee:	bf00      	nop
 80006f0:	20000758 	.word	0x20000758

080006f4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80006f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80006f6:	4802      	ldr	r0, [pc, #8]	; (8000700 <SUBGHZ_Radio_IRQHandler+0xc>)
 80006f8:	f002 ff90 	bl	800361c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80006fc:	bd08      	pop	{r3, pc}
 80006fe:	bf00      	nop
 8000700:	20000790 	.word	0x20000790

08000704 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000704:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_SUBGHZ_Init+0x18>)
 8000708:	2308      	movs	r3, #8
 800070a:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800070c:	f002 fd0e 	bl	800312c <HAL_SUBGHZ_Init>
 8000710:	b900      	cbnz	r0, 8000714 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000712:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000714:	f7ff fed3 	bl	80004be <Error_Handler>
}
 8000718:	e7fb      	b.n	8000712 <MX_SUBGHZ_Init+0xe>
 800071a:	bf00      	nop
 800071c:	20000790 	.word	0x20000790

08000720 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000720:	b500      	push	{lr}
 8000722:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000728:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800072a:	f042 0201 	orr.w	r2, r2, #1
 800072e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000738:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	4611      	mov	r1, r2
 800073e:	2032      	movs	r0, #50	; 0x32
 8000740:	f000 ff14 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000744:	2032      	movs	r0, #50	; 0x32
 8000746:	f000 ff45 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800074a:	b003      	add	sp, #12
 800074c:	f85d fb04 	ldr.w	pc, [sp], #4

08000750 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000750:	b40c      	push	{r2, r3}
 8000752:	b500      	push	{lr}
 8000754:	b083      	sub	sp, #12
 8000756:	ab04      	add	r3, sp, #16
 8000758:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800075c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800075e:	f006 ff49 	bl	80075f4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000762:	b003      	add	sp, #12
 8000764:	f85d eb04 	ldr.w	lr, [sp], #4
 8000768:	b002      	add	sp, #8
 800076a:	4770      	bx	lr

0800076c <TimestampNow>:
{
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	4604      	mov	r4, r0
 8000772:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000774:	a802      	add	r0, sp, #8
 8000776:	f006 fd13 	bl	80071a0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800077a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	9b02      	ldr	r3, [sp, #8]
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <TimestampNow+0x2c>)
 8000784:	2110      	movs	r1, #16
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff ffe2 	bl	8000750 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800078c:	4620      	mov	r0, r4
 800078e:	f7ff fcf3 	bl	8000178 <strlen>
 8000792:	8028      	strh	r0, [r5, #0]
}
 8000794:	b005      	add	sp, #20
 8000796:	bd30      	pop	{r4, r5, pc}
 8000798:	08007888 	.word	0x08007888

0800079c <SystemApp_Init>:
{
 800079c:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800079e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007a2:	6893      	ldr	r3, [r2, #8]
 80007a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007a8:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 80007aa:	f006 fd19 	bl	80071e0 <UTIL_TIMER_Init>
  DBG_Disable();
 80007ae:	f000 f83a 	bl	8000826 <DBG_Disable>
  DBG_ProbesInit();
 80007b2:	f000 f858 	bl	8000866 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 80007b6:	f006 fa77 	bl	8006ca8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <SystemApp_Init+0x38>)
 80007bc:	f006 fa8e 	bl	8006cdc <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80007c0:	2002      	movs	r0, #2
 80007c2:	f006 fa91 	bl	8006ce8 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 80007c6:	f006 fb9d 	bl	8006f04 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80007ca:	2101      	movs	r1, #1
 80007cc:	4608      	mov	r0, r1
 80007ce:	f006 fbb9 	bl	8006f44 <UTIL_LPM_SetOffMode>
}
 80007d2:	bd08      	pop	{r3, pc}
 80007d4:	0800076d 	.word	0x0800076d

080007d8 <UTIL_SEQ_Idle>:
{
 80007d8:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80007da:	f006 fbc9 	bl	8006f70 <UTIL_LPM_EnterLowPower>
}
 80007de:	bd08      	pop	{r3, pc}

080007e0 <UTIL_ADV_TRACE_PreSendHook>:
{
 80007e0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80007e2:	2101      	movs	r1, #1
 80007e4:	2002      	movs	r0, #2
 80007e6:	f006 fb97 	bl	8006f18 <UTIL_LPM_SetStopMode>
}
 80007ea:	bd08      	pop	{r3, pc}

080007ec <UTIL_ADV_TRACE_PostSendHook>:
{
 80007ec:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80007ee:	2100      	movs	r1, #0
 80007f0:	2002      	movs	r0, #2
 80007f2:	f006 fb91 	bl	8006f18 <UTIL_LPM_SetStopMode>
}
 80007f6:	bd08      	pop	{r3, pc}

080007f8 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80007f8:	2000      	movs	r0, #0
 80007fa:	4770      	bx	lr

080007fc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80007fc:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80007fe:	f000 f84f 	bl	80008a0 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8000802:	bd08      	pop	{r3, pc}

08000804 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000804:	b500      	push	{lr}
 8000806:	b083      	sub	sp, #12
 8000808:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800080a:	9801      	ldr	r0, [sp, #4]
 800080c:	f000 f926 	bl	8000a5c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000810:	b003      	add	sp, #12
 8000812:	f85d fb04 	ldr.w	pc, [sp], #4

08000816 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8000816:	b508      	push	{r3, lr}
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 8000818:	f000 fe7e 	bl	8001518 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800081c:	f000 fe84 	bl	8001528 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8000820:	f000 fe8a 	bl	8001538 <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8000824:	bd08      	pop	{r3, pc}

08000826 <DBG_Disable>:
{
 8000826:	b510      	push	{r4, lr}
 8000828:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	2400      	movs	r4, #0
 800082c:	9404      	str	r4, [sp, #16]
 800082e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8000830:	2303      	movs	r3, #3
 8000832:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000834:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8000836:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800083a:	9301      	str	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800083c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000842:	f042 0201 	orr.w	r2, r2, #1
 8000846:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000850:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	a901      	add	r1, sp, #4
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f001 f95a 	bl	8001b10 <HAL_GPIO_Init>
  DBG_ConfigForLpm(0);
 800085c:	4620      	mov	r0, r4
 800085e:	f7ff ffda 	bl	8000816 <DBG_ConfigForLpm>
}
 8000862:	b006      	add	sp, #24
 8000864:	bd10      	pop	{r4, pc}

08000866 <DBG_ProbesInit>:
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8000866:	4770      	bx	lr

08000868 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <TIMER_IF_SetTimerContext+0xc>)
 800086a:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800086c:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800086e:	4b02      	ldr	r3, [pc, #8]	; (8000878 <TIMER_IF_SetTimerContext+0x10>)
 8000870:	6018      	str	r0, [r3, #0]
}
 8000872:	4770      	bx	lr
 8000874:	40002800 	.word	0x40002800
 8000878:	20000038 	.word	0x20000038

0800087c <TIMER_IF_GetTimerContext>:
}
 800087c:	4b01      	ldr	r3, [pc, #4]	; (8000884 <TIMER_IF_GetTimerContext+0x8>)
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000038 	.word	0x20000038

08000888 <TIMER_IF_GetTimerElapsedTime>:
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <TIMER_IF_GetTimerElapsedTime+0x10>)
 800088a:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800088c:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800088e:	4a03      	ldr	r2, [pc, #12]	; (800089c <TIMER_IF_GetTimerElapsedTime+0x14>)
 8000890:	6810      	ldr	r0, [r2, #0]
}
 8000892:	1a18      	subs	r0, r3, r0
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40002800 	.word	0x40002800
 800089c:	20000038 	.word	0x20000038

080008a0 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <TIMER_IF_GetTimerValue+0x14>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b11b      	cbz	r3, 80008ae <TIMER_IF_GetTimerValue+0xe>
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <TIMER_IF_GetTimerValue+0x18>)
 80008a8:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80008aa:	43c0      	mvns	r0, r0
 80008ac:	4770      	bx	lr
  uint32_t ret = 0;
 80008ae:	2000      	movs	r0, #0
}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000034 	.word	0x20000034
 80008b8:	40002800 	.word	0x40002800

080008bc <TIMER_IF_GetMinimumTimeout>:
}
 80008bc:	2003      	movs	r0, #3
 80008be:	4770      	bx	lr

080008c0 <TIMER_IF_Convert_ms2Tick>:
{
 80008c0:	b508      	push	{r3, lr}
 80008c2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80008c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c8:	2300      	movs	r3, #0
 80008ca:	0280      	lsls	r0, r0, #10
 80008cc:	0d89      	lsrs	r1, r1, #22
 80008ce:	f7ff fc5b 	bl	8000188 <__aeabi_uldivmod>
}
 80008d2:	bd08      	pop	{r3, pc}

080008d4 <TIMER_IF_Convert_Tick2ms>:
{
 80008d4:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80008d6:	0142      	lsls	r2, r0, #5
 80008d8:	0ec3      	lsrs	r3, r0, #27
 80008da:	1a12      	subs	r2, r2, r0
 80008dc:	f163 0300 	sbc.w	r3, r3, #0
 80008e0:	0099      	lsls	r1, r3, #2
 80008e2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80008e6:	0094      	lsls	r4, r2, #2
 80008e8:	1822      	adds	r2, r4, r0
 80008ea:	f141 0300 	adc.w	r3, r1, #0
 80008ee:	00d8      	lsls	r0, r3, #3
 80008f0:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 80008f4:	00d1      	lsls	r1, r2, #3
 80008f6:	0a8a      	lsrs	r2, r1, #10
}
 80008f8:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 80008fc:	bc10      	pop	{r4}
 80008fe:	4770      	bx	lr

08000900 <TIMER_IF_StopTimer>:
{
 8000900:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <TIMER_IF_StopTimer+0x20>)
 8000904:	2201      	movs	r2, #1
 8000906:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000908:	4c06      	ldr	r4, [pc, #24]	; (8000924 <TIMER_IF_StopTimer+0x24>)
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	4620      	mov	r0, r4
 8000910:	f002 f9aa 	bl	8002c68 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	6323      	str	r3, [r4, #48]	; 0x30
}
 800091a:	2000      	movs	r0, #0
 800091c:	bd10      	pop	{r4, pc}
 800091e:	bf00      	nop
 8000920:	40002800 	.word	0x40002800
 8000924:	20000758 	.word	0x20000758

08000928 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8000928:	b508      	push	{r3, lr}
 800092a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800092c:	2102      	movs	r1, #2
 800092e:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8000930:	f002 fbdb 	bl	80030ea <HAL_RTCEx_BKUPWrite>
}
 8000934:	bd08      	pop	{r3, pc}
 8000936:	bf00      	nop
 8000938:	20000758 	.word	0x20000758

0800093c <TIMER_IF_Init>:
{
 800093c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <TIMER_IF_Init+0x40>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b10b      	cbz	r3, 8000948 <TIMER_IF_Init+0xc>
}
 8000944:	2000      	movs	r0, #0
 8000946:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000948:	4c0d      	ldr	r4, [pc, #52]	; (8000980 <TIMER_IF_Init+0x44>)
 800094a:	f04f 35ff 	mov.w	r5, #4294967295
 800094e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8000950:	f7ff fe08 	bl	8000564 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8000954:	f7ff ffd4 	bl	8000900 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095c:	4620      	mov	r0, r4
 800095e:	f002 f983 	bl	8002c68 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000962:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000964:	4620      	mov	r0, r4
 8000966:	f002 fb5f 	bl	8003028 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff ffdc 	bl	8000928 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8000970:	f7ff ff7a 	bl	8000868 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8000974:	4b01      	ldr	r3, [pc, #4]	; (800097c <TIMER_IF_Init+0x40>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e7e3      	b.n	8000944 <TIMER_IF_Init+0x8>
 800097c:	20000034 	.word	0x20000034
 8000980:	20000758 	.word	0x20000758

08000984 <TIMER_IF_BkUp_Write_Seconds>:
{
 8000984:	b508      	push	{r3, lr}
 8000986:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000988:	2100      	movs	r1, #0
 800098a:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 800098c:	f002 fbad 	bl	80030ea <HAL_RTCEx_BKUPWrite>
}
 8000990:	bd08      	pop	{r3, pc}
 8000992:	bf00      	nop
 8000994:	20000758 	.word	0x20000758

08000998 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8000998:	b508      	push	{r3, lr}
 800099a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800099c:	2101      	movs	r1, #1
 800099e:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80009a0:	f002 fba3 	bl	80030ea <HAL_RTCEx_BKUPWrite>
}
 80009a4:	bd08      	pop	{r3, pc}
 80009a6:	bf00      	nop
 80009a8:	20000758 	.word	0x20000758

080009ac <TIMER_IF_StartTimer>:
{
 80009ac:	b510      	push	{r4, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80009b2:	222c      	movs	r2, #44	; 0x2c
 80009b4:	2100      	movs	r1, #0
 80009b6:	a801      	add	r0, sp, #4
 80009b8:	f006 ff14 	bl	80077e4 <memset>
  TIMER_IF_StopTimer();
 80009bc:	f7ff ffa0 	bl	8000900 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <TIMER_IF_StartTimer+0x48>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80009c6:	2300      	movs	r3, #0
 80009c8:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80009ca:	43e4      	mvns	r4, r4
 80009cc:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009ce:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80009d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009d4:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80009d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009da:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009dc:	2201      	movs	r2, #1
 80009de:	a901      	add	r1, sp, #4
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <TIMER_IF_StartTimer+0x4c>)
 80009e2:	f002 fa65 	bl	8002eb0 <HAL_RTC_SetAlarm_IT>
 80009e6:	b910      	cbnz	r0, 80009ee <TIMER_IF_StartTimer+0x42>
}
 80009e8:	2000      	movs	r0, #0
 80009ea:	b00c      	add	sp, #48	; 0x30
 80009ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009ee:	f7ff fd66 	bl	80004be <Error_Handler>
 80009f2:	e7f9      	b.n	80009e8 <TIMER_IF_StartTimer+0x3c>
 80009f4:	20000038 	.word	0x20000038
 80009f8:	20000758 	.word	0x20000758

080009fc <TIMER_IF_BkUp_Read_MSBticks>:
{
 80009fc:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80009fe:	2102      	movs	r1, #2
 8000a00:	4801      	ldr	r0, [pc, #4]	; (8000a08 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8000a02:	f002 fb79 	bl	80030f8 <HAL_RTCEx_BKUPRead>
}
 8000a06:	bd08      	pop	{r3, pc}
 8000a08:	20000758 	.word	0x20000758

08000a0c <TIMER_IF_GetTime>:
{
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	4605      	mov	r5, r0
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <TIMER_IF_GetTime+0x2c>)
 8000a12:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8000a14:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000a16:	f7ff fff1 	bl	80009fc <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	1912      	adds	r2, r2, r4
 8000a1e:	f140 0300 	adc.w	r3, r0, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000a22:	0a94      	lsrs	r4, r2, #10
 8000a24:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000a28:	f3c2 0009 	ubfx	r0, r2, #0, #10
 8000a2c:	f7ff ff52 	bl	80008d4 <TIMER_IF_Convert_Tick2ms>
 8000a30:	8028      	strh	r0, [r5, #0]
}
 8000a32:	4620      	mov	r0, r4
 8000a34:	bd38      	pop	{r3, r4, r5, pc}
 8000a36:	bf00      	nop
 8000a38:	40002800 	.word	0x40002800

08000a3c <TIMER_IF_BkUp_Read_Seconds>:
{
 8000a3c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4801      	ldr	r0, [pc, #4]	; (8000a48 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8000a42:	f002 fb59 	bl	80030f8 <HAL_RTCEx_BKUPRead>
}
 8000a46:	bd08      	pop	{r3, pc}
 8000a48:	20000758 	.word	0x20000758

08000a4c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8000a4c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4801      	ldr	r0, [pc, #4]	; (8000a58 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8000a52:	f002 fb51 	bl	80030f8 <HAL_RTCEx_BKUPRead>
}
 8000a56:	bd08      	pop	{r3, pc}
 8000a58:	20000758 	.word	0x20000758

08000a5c <TIMER_IF_DelayMs>:
{
 8000a5c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000a5e:	f7ff ff2f 	bl	80008c0 <TIMER_IF_Convert_ms2Tick>
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <TIMER_IF_DelayMs+0x20>)
 8000a64:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8000a66:	43d2      	mvns	r2, r2
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <TIMER_IF_DelayMs+0x20>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	4283      	cmp	r3, r0
 8000a72:	d201      	bcs.n	8000a78 <TIMER_IF_DelayMs+0x1c>
    __NOP();
 8000a74:	bf00      	nop
 8000a76:	e7f7      	b.n	8000a68 <TIMER_IF_DelayMs+0xc>
}
 8000a78:	bd08      	pop	{r3, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40002800 	.word	0x40002800

08000a80 <HAL_RTC_AlarmAEventCallback>:
{
 8000a80:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000a82:	f006 fcd9 	bl	8007438 <UTIL_TIMER_IRQ_Handler>
}
 8000a86:	bd08      	pop	{r3, pc}

08000a88 <HAL_RTCEx_SSRUEventCallback>:
{
 8000a88:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000a8a:	f7ff ffb7 	bl	80009fc <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000a8e:	3001      	adds	r0, #1
 8000a90:	f7ff ff4a 	bl	8000928 <TIMER_IF_BkUp_Write_MSBticks>
}
 8000a94:	bd08      	pop	{r3, pc}
	...

08000a98 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a98:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_USART2_UART_Init+0x64>)
 8000a9e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000aa0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000aa4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aaa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aac:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aae:	220c      	movs	r2, #12
 8000ab0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abc:	f003 fe21 	bl	8004702 <HAL_UART_Init>
 8000ac0:	b970      	cbnz	r0, 8000ae0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ac6:	f003 ffce 	bl	8004a66 <HAL_UARTEx_SetTxFifoThreshold>
 8000aca:	b960      	cbnz	r0, 8000ae6 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ad0:	f003 ffee 	bl	8004ab0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad4:	b950      	cbnz	r0, 8000aec <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8000ad6:	4808      	ldr	r0, [pc, #32]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ad8:	f003 ffa1 	bl	8004a1e <HAL_UARTEx_EnableFifoMode>
 8000adc:	b948      	cbnz	r0, 8000af2 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ae0:	f7ff fced 	bl	80004be <Error_Handler>
 8000ae4:	e7ed      	b.n	8000ac2 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8000ae6:	f7ff fcea 	bl	80004be <Error_Handler>
 8000aea:	e7ef      	b.n	8000acc <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8000aec:	f7ff fce7 	bl	80004be <Error_Handler>
 8000af0:	e7f1      	b.n	8000ad6 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8000af2:	f7ff fce4 	bl	80004be <Error_Handler>
}
 8000af6:	e7f2      	b.n	8000ade <MX_USART2_UART_Init+0x46>
 8000af8:	200007fc 	.word	0x200007fc
 8000afc:	40004400 	.word	0x40004400

08000b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b00:	b530      	push	{r4, r5, lr}
 8000b02:	b097      	sub	sp, #92	; 0x5c
 8000b04:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	2100      	movs	r1, #0
 8000b08:	9111      	str	r1, [sp, #68]	; 0x44
 8000b0a:	9112      	str	r1, [sp, #72]	; 0x48
 8000b0c:	9113      	str	r1, [sp, #76]	; 0x4c
 8000b0e:	9114      	str	r1, [sp, #80]	; 0x50
 8000b10:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b12:	2238      	movs	r2, #56	; 0x38
 8000b14:	a803      	add	r0, sp, #12
 8000b16:	f006 fe65 	bl	80077e4 <memset>
  if(uartHandle->Instance==USART2)
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <HAL_UART_MspInit+0xd4>)
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b22:	b017      	add	sp, #92	; 0x5c
 8000b24:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <HAL_UART_MspInit+0xd8>)
 8000b2c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	a803      	add	r0, sp, #12
 8000b30:	f001 ff58 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d144      	bne.n	8000bc2 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b42:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b46:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000b4a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000b4c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b50:	f042 0201 	orr.w	r2, r2, #1
 8000b54:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000b5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8000b60:	230c      	movs	r3, #12
 8000b62:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2500      	movs	r5, #0
 8000b6a:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b70:	2307      	movs	r3, #7
 8000b72:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	a911      	add	r1, sp, #68	; 0x44
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 ffc9 	bl	8001b10 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <HAL_UART_MspInit+0xdc>)
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0xe0>)
 8000b82:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000b84:	2314      	movs	r3, #20
 8000b86:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b92:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b94:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b96:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b98:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b9a:	f000 fda3 	bl	80016e4 <HAL_DMA_Init>
 8000b9e:	b998      	cbnz	r0, 8000bc8 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <HAL_UART_MspInit+0xdc>)
 8000ba4:	f000 ffa0 	bl	8001ae8 <HAL_DMA_ConfigChannelAttributes>
 8000ba8:	b988      	cbnz	r0, 8000bce <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_UART_MspInit+0xdc>)
 8000bac:	67a3      	str	r3, [r4, #120]	; 0x78
 8000bae:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	2025      	movs	r0, #37	; 0x25
 8000bb6:	f000 fcd9 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bba:	2025      	movs	r0, #37	; 0x25
 8000bbc:	f000 fd0a 	bl	80015d4 <HAL_NVIC_EnableIRQ>
}
 8000bc0:	e7af      	b.n	8000b22 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000bc2:	f7ff fc7c 	bl	80004be <Error_Handler>
 8000bc6:	e7b7      	b.n	8000b38 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8000bc8:	f7ff fc79 	bl	80004be <Error_Handler>
 8000bcc:	e7e8      	b.n	8000ba0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8000bce:	f7ff fc76 	bl	80004be <Error_Handler>
 8000bd2:	e7ea      	b.n	8000baa <HAL_UART_MspInit+0xaa>
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	000c0004 	.word	0x000c0004
 8000bdc:	2000079c 	.word	0x2000079c
 8000be0:	40020058 	.word	0x40020058

08000be4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8000be4:	6802      	ldr	r2, [r0, #0]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_UART_MspDeInit+0x34>)
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d000      	beq.n	8000bee <HAL_UART_MspDeInit+0xa>
 8000bec:	4770      	bx	lr
{
 8000bee:	b510      	push	{r4, lr}
 8000bf0:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000bf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8000bfe:	210c      	movs	r1, #12
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f001 f83c 	bl	8001c80 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000c08:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8000c0a:	f000 fddd 	bl	80017c8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000c0e:	2025      	movs	r0, #37	; 0x25
 8000c10:	f000 fcee 	bl	80015f0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000c14:	bd10      	pop	{r4, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400

08000c1c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8000c1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <vcom_Init+0x20>)
 8000c20:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8000c22:	f7ff fc2b 	bl	800047c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c26:	f7ff ff37 	bl	8000a98 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <vcom_Init+0x24>)
 8000c2c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8000c38:	2000      	movs	r0, #0
 8000c3a:	bd08      	pop	{r3, pc}
 8000c3c:	20000040 	.word	0x20000040
 8000c40:	58000800 	.word	0x58000800

08000c44 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8000c44:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8000c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c54:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <vcom_DeInit+0x28>)
 8000c5c:	f7ff ffc2 	bl	8000be4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8000c60:	200f      	movs	r0, #15
 8000c62:	f000 fcc5 	bl	80015f0 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8000c66:	2000      	movs	r0, #0
 8000c68:	bd08      	pop	{r3, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200007fc 	.word	0x200007fc

08000c70 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8000c70:	b508      	push	{r3, lr}
 8000c72:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8000c74:	4601      	mov	r1, r0
 8000c76:	4802      	ldr	r0, [pc, #8]	; (8000c80 <vcom_Trace_DMA+0x10>)
 8000c78:	f002 fe0e 	bl	8003898 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	200007fc 	.word	0x200007fc

08000c84 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8000c84:	b510      	push	{r4, lr}
 8000c86:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <vcom_ReceiveInit+0x50>)
 8000c8a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8000c8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c90:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8000c92:	ab02      	add	r3, sp, #8
 8000c94:	e913 0006 	ldmdb	r3, {r1, r2}
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <vcom_ReceiveInit+0x54>)
 8000c9a:	f003 fe68 	bl	800496e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <vcom_ReceiveInit+0x54>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	69da      	ldr	r2, [r3, #28]
 8000ca4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000ca8:	d1f9      	bne.n	8000c9e <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8000caa:	69da      	ldr	r2, [r3, #28]
 8000cac:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000cb0:	d0fb      	beq.n	8000caa <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000cb8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8000cba:	4c07      	ldr	r4, [pc, #28]	; (8000cd8 <vcom_ReceiveInit+0x54>)
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f003 fe97 	bl	80049f0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4905      	ldr	r1, [pc, #20]	; (8000cdc <vcom_ReceiveInit+0x58>)
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f003 fde2 	bl	8004890 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8000ccc:	2000      	movs	r0, #0
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd10      	pop	{r4, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000003c 	.word	0x2000003c
 8000cd8:	200007fc 	.word	0x200007fc
 8000cdc:	2000088c 	.word	0x2000088c

08000ce0 <vcom_Resume>:

void vcom_Resume(void)
{
 8000ce0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <vcom_Resume+0x20>)
 8000ce4:	f003 fd0d 	bl	8004702 <HAL_UART_Init>
 8000ce8:	b920      	cbnz	r0, 8000cf4 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <vcom_Resume+0x24>)
 8000cec:	f000 fcfa 	bl	80016e4 <HAL_DMA_Init>
 8000cf0:	b918      	cbnz	r0, 8000cfa <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8000cf2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cf4:	f7ff fbe3 	bl	80004be <Error_Handler>
 8000cf8:	e7f7      	b.n	8000cea <vcom_Resume+0xa>
    Error_Handler();
 8000cfa:	f7ff fbe0 	bl	80004be <Error_Handler>
}
 8000cfe:	e7f8      	b.n	8000cf2 <vcom_Resume+0x12>
 8000d00:	200007fc 	.word	0x200007fc
 8000d04:	2000079c 	.word	0x2000079c

08000d08 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8000d08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8000d0a:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_UART_TxCpltCallback+0xc>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2000      	movs	r0, #0
 8000d10:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8000d12:	bd08      	pop	{r3, pc}
 8000d14:	20000040 	.word	0x20000040

08000d18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_UART_RxCpltCallback+0x24>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	b12b      	cbz	r3, 8000d2e <HAL_UART_RxCpltCallback+0x16>
 8000d22:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8000d26:	b912      	cbnz	r2, 8000d2e <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_UART_RxCpltCallback+0x28>)
 8000d2c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4903      	ldr	r1, [pc, #12]	; (8000d40 <HAL_UART_RxCpltCallback+0x28>)
 8000d32:	4620      	mov	r0, r4
 8000d34:	f003 fdac 	bl	8004890 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000003c 	.word	0x2000003c
 8000d40:	2000088c 	.word	0x2000088c

08000d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d48:	f000 fbbe 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d72:	f006 fd05 	bl	8007780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fbeb 	bl	8000550 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d88:	08007d68 	.word	0x08007d68
  ldr r2, =_sbss
 8000d8c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d90:	20000918 	.word	0x20000918

08000d94 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>

08000d96 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8000d96:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8000d98:	f7ff fd00 	bl	800079c <SystemApp_Init>
  SubghzApp_Init();
 8000d9c:	f000 f9d2 	bl	8001144 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8000da0:	bd08      	pop	{r3, pc}

08000da2 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8000da2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f006 f944 	bl	8007034 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8000dac:	bd08      	pop	{r3, pc}
	...

08000db0 <OnledEvent>:
      break;
  }
}

static void OnledEvent(void *context)
{
 8000db0:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED_GREEN);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fae4 	bl	8001380 <BSP_LED_Toggle>
  BSP_LED_Toggle(LED_RED);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f000 fae1 	bl	8001380 <BSP_LED_Toggle>
  UTIL_TIMER_Start(&timerLed);
 8000dbe:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <OnledEvent+0x18>)
 8000dc0:	f006 fada 	bl	8007378 <UTIL_TIMER_Start>
}
 8000dc4:	bd08      	pop	{r3, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000026c 	.word	0x2000026c

08000dcc <PingPong_Process>:
{
 8000dcc:	b510      	push	{r4, lr}
  Radio.Sleep();
 8000dce:	4b6c      	ldr	r3, [pc, #432]	; (8000f80 <PingPong_Process+0x1b4>)
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	4798      	blx	r3
  switch (State)
 8000dd4:	4b6b      	ldr	r3, [pc, #428]	; (8000f84 <PingPong_Process+0x1b8>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	f200 809f 	bhi.w	8000f1c <PingPong_Process+0x150>
 8000dde:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000de2:	0005      	.short	0x0005
 8000de4:	009e009e 	.word	0x009e009e
 8000de8:	00c30092 	.word	0x00c30092
      if (isMaster == true)
 8000dec:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <PingPong_Process+0x1bc>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d04e      	beq.n	8000e92 <PingPong_Process+0xc6>
        if (RxBufferSize > 0)
 8000df4:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <PingPong_Process+0x1c0>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 808f 	beq.w	8000f1c <PingPong_Process+0x150>
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4963      	ldr	r1, [pc, #396]	; (8000f90 <PingPong_Process+0x1c4>)
 8000e02:	4864      	ldr	r0, [pc, #400]	; (8000f94 <PingPong_Process+0x1c8>)
 8000e04:	f006 fcf6 	bl	80077f4 <strncmp>
 8000e08:	b198      	cbz	r0, 8000e32 <PingPong_Process+0x66>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4962      	ldr	r1, [pc, #392]	; (8000f98 <PingPong_Process+0x1cc>)
 8000e0e:	4861      	ldr	r0, [pc, #388]	; (8000f94 <PingPong_Process+0x1c8>)
 8000e10:	f006 fcf0 	bl	80077f4 <strncmp>
 8000e14:	bb78      	cbnz	r0, 8000e76 <PingPong_Process+0xaa>
            isMaster = false;
 8000e16:	2100      	movs	r1, #0
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <PingPong_Process+0x1bc>)
 8000e1a:	7019      	strb	r1, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8000e1c:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <PingPong_Process+0x1d0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4610      	mov	r0, r2
 8000e22:	f005 ffb5 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8000e26:	4b56      	ldr	r3, [pc, #344]	; (8000f80 <PingPong_Process+0x1b4>)
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e2e:	4798      	blx	r3
 8000e30:	e074      	b.n	8000f1c <PingPong_Process+0x150>
            UTIL_TIMER_Stop(&timerLed);
 8000e32:	485b      	ldr	r0, [pc, #364]	; (8000fa0 <PingPong_Process+0x1d4>)
 8000e34:	f006 fa3e 	bl	80072b4 <UTIL_TIMER_Stop>
            BSP_LED_Off(LED_GREEN);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fa91 	bl	8001360 <BSP_LED_Off>
            BSP_LED_Toggle(LED_RED);
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f000 fa9e 	bl	8001380 <BSP_LED_Toggle>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 8000e44:	4c4e      	ldr	r4, [pc, #312]	; (8000f80 <PingPong_Process+0x1b4>)
 8000e46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000e48:	4798      	blx	r3
 8000e4a:	30c8      	adds	r0, #200	; 0xc8
 8000e4c:	f7ff fcda 	bl	8000804 <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 8000e50:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <PingPong_Process+0x1d8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	2100      	movs	r1, #0
 8000e56:	4610      	mov	r0, r2
 8000e58:	f005 ff9a 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8000e5c:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <PingPong_Process+0x1dc>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2100      	movs	r1, #0
 8000e62:	4610      	mov	r0, r2
 8000e64:	f005 ff94 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 8000e68:	4850      	ldr	r0, [pc, #320]	; (8000fac <PingPong_Process+0x1e0>)
 8000e6a:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <PingPong_Process+0x1e4>)
 8000e6c:	6003      	str	r3, [r0, #0]
            Radio.Send(BufferTx, PAYLOAD_LEN);
 8000e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	4798      	blx	r3
 8000e74:	e052      	b.n	8000f1c <PingPong_Process+0x150>
            isMaster = true;
 8000e76:	2001      	movs	r0, #1
 8000e78:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <PingPong_Process+0x1bc>)
 8000e7a:	7018      	strb	r0, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	; (8000fb4 <PingPong_Process+0x1e8>)
 8000e7e:	4602      	mov	r2, r0
 8000e80:	2100      	movs	r1, #0
 8000e82:	f005 ff85 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8000e86:	4b3e      	ldr	r3, [pc, #248]	; (8000f80 <PingPong_Process+0x1b4>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e8e:	4798      	blx	r3
 8000e90:	e044      	b.n	8000f1c <PingPong_Process+0x150>
        if (RxBufferSize > 0)
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <PingPong_Process+0x1c0>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d040      	beq.n	8000f1c <PingPong_Process+0x150>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	493e      	ldr	r1, [pc, #248]	; (8000f98 <PingPong_Process+0x1cc>)
 8000e9e:	483d      	ldr	r0, [pc, #244]	; (8000f94 <PingPong_Process+0x1c8>)
 8000ea0:	f006 fca8 	bl	80077f4 <strncmp>
 8000ea4:	bb08      	cbnz	r0, 8000eea <PingPong_Process+0x11e>
            UTIL_TIMER_Stop(&timerLed);
 8000ea6:	483e      	ldr	r0, [pc, #248]	; (8000fa0 <PingPong_Process+0x1d4>)
 8000ea8:	f006 fa04 	bl	80072b4 <UTIL_TIMER_Stop>
            BSP_LED_Off(LED_RED);
 8000eac:	2002      	movs	r0, #2
 8000eae:	f000 fa57 	bl	8001360 <BSP_LED_Off>
            BSP_LED_Toggle(LED_GREEN);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 fa64 	bl	8001380 <BSP_LED_Toggle>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 8000eb8:	4c31      	ldr	r4, [pc, #196]	; (8000f80 <PingPong_Process+0x1b4>)
 8000eba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ebc:	4798      	blx	r3
 8000ebe:	30c8      	adds	r0, #200	; 0xc8
 8000ec0:	f7ff fca0 	bl	8000804 <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <PingPong_Process+0x1ec>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4610      	mov	r0, r2
 8000ecc:	f005 ff60 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <PingPong_Process+0x1f0>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	f005 ff5a 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 8000edc:	4833      	ldr	r0, [pc, #204]	; (8000fac <PingPong_Process+0x1e0>)
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <PingPong_Process+0x1f4>)
 8000ee0:	6003      	str	r3, [r0, #0]
            Radio.Send(BufferTx, PAYLOAD_LEN);
 8000ee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	4798      	blx	r3
 8000ee8:	e018      	b.n	8000f1c <PingPong_Process+0x150>
            isMaster = true;
 8000eea:	2001      	movs	r0, #1
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <PingPong_Process+0x1bc>)
 8000eee:	7018      	strb	r0, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <PingPong_Process+0x1e8>)
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f005 ff4b 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <PingPong_Process+0x1b4>)
 8000efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f02:	4798      	blx	r3
 8000f04:	e00a      	b.n	8000f1c <PingPong_Process+0x150>
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <PingPong_Process+0x1f8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	f005 ff3f 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <PingPong_Process+0x1b4>)
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f1a:	4798      	blx	r3
}
 8000f1c:	bd10      	pop	{r4, pc}
      if (isMaster == true)
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <PingPong_Process+0x1bc>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b1ab      	cbz	r3, 8000f50 <PingPong_Process+0x184>
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 8000f24:	4c16      	ldr	r4, [pc, #88]	; (8000f80 <PingPong_Process+0x1b4>)
 8000f26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000f28:	4798      	blx	r3
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <PingPong_Process+0x1fc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4418      	add	r0, r3
 8000f30:	30c8      	adds	r0, #200	; 0xc8
 8000f32:	f7ff fc67 	bl	8000804 <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <PingPong_Process+0x1dc>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f005 ff27 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 8000f42:	481a      	ldr	r0, [pc, #104]	; (8000fac <PingPong_Process+0x1e0>)
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <PingPong_Process+0x1e4>)
 8000f46:	6003      	str	r3, [r0, #0]
        Radio.Send(BufferTx, PAYLOAD_LEN);
 8000f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	4798      	blx	r3
 8000f4e:	e7e5      	b.n	8000f1c <PingPong_Process+0x150>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <PingPong_Process+0x1d0>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	2100      	movs	r1, #0
 8000f56:	4610      	mov	r0, r2
 8000f58:	f005 ff1a 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <PingPong_Process+0x1b4>)
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f64:	4798      	blx	r3
 8000f66:	e7d9      	b.n	8000f1c <PingPong_Process+0x150>
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <PingPong_Process+0x1d0>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f005 ff0e 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <PingPong_Process+0x1b4>)
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f7c:	4798      	blx	r3
}
 8000f7e:	e7cd      	b.n	8000f1c <PingPong_Process+0x150>
 8000f80:	08007bbc 	.word	0x08007bbc
 8000f84:	20000265 	.word	0x20000265
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000262 	.word	0x20000262
 8000f90:	080078e4 	.word	0x080078e4
 8000f94:	20000044 	.word	0x20000044
 8000f98:	0800790c 	.word	0x0800790c
 8000f9c:	08007914 	.word	0x08007914
 8000fa0:	2000026c 	.word	0x2000026c
 8000fa4:	080078ec 	.word	0x080078ec
 8000fa8:	080078f8 	.word	0x080078f8
 8000fac:	20000144 	.word	0x20000144
 8000fb0:	474e4950 	.word	0x474e4950
 8000fb4:	08007928 	.word	0x08007928
 8000fb8:	0800793c 	.word	0x0800793c
 8000fbc:	08007948 	.word	0x08007948
 8000fc0:	474e4f50 	.word	0x474e4f50
 8000fc4:	0800795c 	.word	0x0800795c
 8000fc8:	20000268 	.word	0x20000268

08000fcc <OnRxError>:
{
 8000fcc:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <OnRxError+0x20>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	f005 fedb 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  State = RX_ERROR;
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <OnRxError+0x24>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f005 fff0 	bl	8006fc8 <UTIL_SEQ_SetTask>
}
 8000fe8:	bd08      	pop	{r3, pc}
 8000fea:	bf00      	nop
 8000fec:	08007968 	.word	0x08007968
 8000ff0:	20000265 	.word	0x20000265

08000ff4 <OnRxTimeout>:
{
 8000ff4:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <OnRxTimeout+0x1c>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	f005 fec7 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  State = RX_TIMEOUT;
 8001002:	2001      	movs	r0, #1
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <OnRxTimeout+0x20>)
 8001006:	7018      	strb	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001008:	2100      	movs	r1, #0
 800100a:	f005 ffdd 	bl	8006fc8 <UTIL_SEQ_SetTask>
}
 800100e:	bd08      	pop	{r3, pc}
 8001010:	08007974 	.word	0x08007974
 8001014:	20000265 	.word	0x20000265

08001018 <OnTxTimeout>:
{
 8001018:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <OnTxTimeout+0x20>)
 800101c:	2201      	movs	r2, #1
 800101e:	2100      	movs	r1, #0
 8001020:	4610      	mov	r0, r2
 8001022:	f005 feb5 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  State = TX_TIMEOUT;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <OnTxTimeout+0x24>)
 8001028:	2204      	movs	r2, #4
 800102a:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800102c:	2100      	movs	r1, #0
 800102e:	2001      	movs	r0, #1
 8001030:	f005 ffca 	bl	8006fc8 <UTIL_SEQ_SetTask>
}
 8001034:	bd08      	pop	{r3, pc}
 8001036:	bf00      	nop
 8001038:	08007984 	.word	0x08007984
 800103c:	20000265 	.word	0x20000265

08001040 <OnRxDone>:
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	4607      	mov	r7, r0
 8001046:	460c      	mov	r4, r1
 8001048:	4615      	mov	r5, r2
 800104a:	461e      	mov	r6, r3
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <OnRxDone+0xb4>)
 800104e:	2201      	movs	r2, #1
 8001050:	2100      	movs	r1, #0
 8001052:	4610      	mov	r0, r2
 8001054:	f005 fe9c 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 8001058:	9601      	str	r6, [sp, #4]
 800105a:	9500      	str	r5, [sp, #0]
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <OnRxDone+0xb8>)
 800105e:	2201      	movs	r2, #1
 8001060:	2100      	movs	r1, #0
 8001062:	4610      	mov	r0, r2
 8001064:	f005 fe94 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  SnrValue = LoraSnr_FskCfo;
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <OnRxDone+0xbc>)
 800106a:	701e      	strb	r6, [r3, #0]
  State = RX;
 800106c:	2100      	movs	r1, #0
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <OnRxDone+0xc0>)
 8001070:	7019      	strb	r1, [r3, #0]
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8001072:	22ff      	movs	r2, #255	; 0xff
 8001074:	4823      	ldr	r0, [pc, #140]	; (8001104 <OnRxDone+0xc4>)
 8001076:	f006 fbb5 	bl	80077e4 <memset>
  RxBufferSize = size;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <OnRxDone+0xc8>)
 800107c:	801c      	strh	r4, [r3, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800107e:	2cff      	cmp	r4, #255	; 0xff
 8001080:	d90a      	bls.n	8001098 <OnRxDone+0x58>
  RssiValue = rssi;
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <OnRxDone+0xcc>)
 8001084:	701d      	strb	r5, [r3, #0]
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 8001086:	9400      	str	r4, [sp, #0]
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <OnRxDone+0xd0>)
 800108a:	2201      	movs	r2, #1
 800108c:	2100      	movs	r1, #0
 800108e:	2003      	movs	r0, #3
 8001090:	f005 fe7e 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 8001094:	2400      	movs	r4, #0
 8001096:	e00c      	b.n	80010b2 <OnRxDone+0x72>
    memcpy(BufferRx, payload, RxBufferSize);
 8001098:	4622      	mov	r2, r4
 800109a:	4639      	mov	r1, r7
 800109c:	4819      	ldr	r0, [pc, #100]	; (8001104 <OnRxDone+0xc4>)
 800109e:	f006 fb93 	bl	80077c8 <memcpy>
 80010a2:	e7ee      	b.n	8001082 <OnRxDone+0x42>
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <OnRxDone+0xd4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	4611      	mov	r1, r2
 80010aa:	2003      	movs	r0, #3
 80010ac:	f005 fe70 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 80010b0:	3401      	adds	r4, #1
 80010b2:	2c3f      	cmp	r4, #63	; 0x3f
 80010b4:	dc12      	bgt.n	80010dc <OnRxDone+0x9c>
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <OnRxDone+0xc4>)
 80010b8:	5d1b      	ldrb	r3, [r3, r4]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <OnRxDone+0xd8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	4611      	mov	r1, r2
 80010c2:	2003      	movs	r0, #3
 80010c4:	f005 fe64 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 80010c8:	4262      	negs	r2, r4
 80010ca:	f004 030f 	and.w	r3, r4, #15
 80010ce:	f002 020f 	and.w	r2, r2, #15
 80010d2:	bf58      	it	pl
 80010d4:	4253      	negpl	r3, r2
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d1ea      	bne.n	80010b0 <OnRxDone+0x70>
 80010da:	e7e3      	b.n	80010a4 <OnRxDone+0x64>
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <OnRxDone+0xd4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	4611      	mov	r1, r2
 80010e2:	2003      	movs	r0, #3
 80010e4:	f005 fe54 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2001      	movs	r0, #1
 80010ec:	f005 ff6c 	bl	8006fc8 <UTIL_SEQ_SetTask>
}
 80010f0:	b003      	add	sp, #12
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f4:	08007994 	.word	0x08007994
 80010f8:	080079a0 	.word	0x080079a0
 80010fc:	20000264 	.word	0x20000264
 8001100:	20000265 	.word	0x20000265
 8001104:	20000044 	.word	0x20000044
 8001108:	20000262 	.word	0x20000262
 800110c:	20000260 	.word	0x20000260
 8001110:	080079c4 	.word	0x080079c4
 8001114:	0800799c 	.word	0x0800799c
 8001118:	080079d8 	.word	0x080079d8

0800111c <OnTxDone>:
{
 800111c:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <OnTxDone+0x20>)
 8001120:	2201      	movs	r2, #1
 8001122:	2100      	movs	r1, #0
 8001124:	4610      	mov	r0, r2
 8001126:	f005 fe33 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  State = TX;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <OnTxDone+0x24>)
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001130:	2100      	movs	r1, #0
 8001132:	2001      	movs	r0, #1
 8001134:	f005 ff48 	bl	8006fc8 <UTIL_SEQ_SetTask>
}
 8001138:	bd08      	pop	{r3, pc}
 800113a:	bf00      	nop
 800113c:	080079e0 	.word	0x080079e0
 8001140:	20000265 	.word	0x20000265

08001144 <SubghzApp_Init>:
{
 8001144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001148:	b08b      	sub	sp, #44	; 0x2c
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <SubghzApp_Init+0x14c>)
 800114c:	2200      	movs	r2, #0
 800114e:	4611      	mov	r1, r2
 8001150:	2002      	movs	r0, #2
 8001152:	f005 fe1d 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n",
 8001156:	2400      	movs	r4, #0
 8001158:	9402      	str	r4, [sp, #8]
 800115a:	2501      	movs	r5, #1
 800115c:	9501      	str	r5, [sp, #4]
 800115e:	9500      	str	r5, [sp, #0]
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <SubghzApp_Init+0x150>)
 8001162:	4622      	mov	r2, r4
 8001164:	4621      	mov	r1, r4
 8001166:	2002      	movs	r0, #2
 8001168:	f005 fe12 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800116c:	4e4a      	ldr	r6, [pc, #296]	; (8001298 <SubghzApp_Init+0x154>)
 800116e:	9400      	str	r4, [sp, #0]
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <SubghzApp_Init+0x158>)
 8001172:	4622      	mov	r2, r4
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	4630      	mov	r0, r6
 800117a:	f006 f83d 	bl	80071f8 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 800117e:	21c8      	movs	r1, #200	; 0xc8
 8001180:	4630      	mov	r0, r6
 8001182:	f006 f93f 	bl	8007404 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerLed);
 8001186:	4630      	mov	r0, r6
 8001188:	f006 f8f6 	bl	8007378 <UTIL_TIMER_Start>
  RadioEvents.TxDone = OnTxDone;
 800118c:	4844      	ldr	r0, [pc, #272]	; (80012a0 <SubghzApp_Init+0x15c>)
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <SubghzApp_Init+0x160>)
 8001190:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 8001192:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <SubghzApp_Init+0x164>)
 8001194:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <SubghzApp_Init+0x168>)
 8001198:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <SubghzApp_Init+0x16c>)
 800119c:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 800119e:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <SubghzApp_Init+0x170>)
 80011a0:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 80011a2:	4e45      	ldr	r6, [pc, #276]	; (80012b8 <SubghzApp_Init+0x174>)
 80011a4:	6833      	ldr	r3, [r6, #0]
 80011a6:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 80011a8:	68f3      	ldr	r3, [r6, #12]
 80011aa:	4844      	ldr	r0, [pc, #272]	; (80012bc <SubghzApp_Init+0x178>)
 80011ac:	4798      	blx	r3
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 80011ae:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <SubghzApp_Init+0x17c>)
 80011b0:	4622      	mov	r2, r4
 80011b2:	4621      	mov	r1, r4
 80011b4:	2002      	movs	r0, #2
 80011b6:	f005 fdeb 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 80011ba:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <SubghzApp_Init+0x180>)
 80011bc:	4622      	mov	r2, r4
 80011be:	4621      	mov	r1, r4
 80011c0:	2002      	movs	r0, #2
 80011c2:	f005 fde5 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 80011c6:	237d      	movs	r3, #125	; 0x7d
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <SubghzApp_Init+0x184>)
 80011cc:	4622      	mov	r2, r4
 80011ce:	4621      	mov	r1, r4
 80011d0:	2002      	movs	r0, #2
 80011d2:	f005 fddd 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 80011d6:	f04f 0807 	mov.w	r8, #7
 80011da:	f8cd 8000 	str.w	r8, [sp]
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <SubghzApp_Init+0x188>)
 80011e0:	4622      	mov	r2, r4
 80011e2:	4621      	mov	r1, r4
 80011e4:	2002      	movs	r0, #2
 80011e6:	f005 fdd3 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80011ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011ee:	9308      	str	r3, [sp, #32]
 80011f0:	9407      	str	r4, [sp, #28]
 80011f2:	9406      	str	r4, [sp, #24]
 80011f4:	9405      	str	r4, [sp, #20]
 80011f6:	9504      	str	r5, [sp, #16]
 80011f8:	9403      	str	r4, [sp, #12]
 80011fa:	f04f 0908 	mov.w	r9, #8
 80011fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8001202:	9501      	str	r5, [sp, #4]
 8001204:	f8cd 8000 	str.w	r8, [sp]
 8001208:	4623      	mov	r3, r4
 800120a:	4622      	mov	r2, r4
 800120c:	210e      	movs	r1, #14
 800120e:	4628      	mov	r0, r5
 8001210:	69f7      	ldr	r7, [r6, #28]
 8001212:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8001214:	9509      	str	r5, [sp, #36]	; 0x24
 8001216:	9408      	str	r4, [sp, #32]
 8001218:	9407      	str	r4, [sp, #28]
 800121a:	9406      	str	r4, [sp, #24]
 800121c:	9505      	str	r5, [sp, #20]
 800121e:	9404      	str	r4, [sp, #16]
 8001220:	9403      	str	r4, [sp, #12]
 8001222:	2305      	movs	r3, #5
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	f8cd 9004 	str.w	r9, [sp, #4]
 800122a:	9400      	str	r4, [sp, #0]
 800122c:	462b      	mov	r3, r5
 800122e:	4642      	mov	r2, r8
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
 8001234:	69b7      	ldr	r7, [r6, #24]
 8001236:	47b8      	blx	r7
  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001238:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800123a:	21ff      	movs	r1, #255	; 0xff
 800123c:	4628      	mov	r0, r5
 800123e:	4798      	blx	r3
  BSP_LED_Init(LED_GREEN);
 8001240:	4628      	mov	r0, r5
 8001242:	f000 f861 	bl	8001308 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001246:	2002      	movs	r0, #2
 8001248:	f000 f85e 	bl	8001308 <BSP_LED_Init>
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800124c:	6973      	ldr	r3, [r6, #20]
 800124e:	4798      	blx	r3
 8001250:	0d87      	lsrs	r7, r0, #22
 8001252:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80012dc <SubghzApp_Init+0x198>
 8001256:	f8c8 7000 	str.w	r7, [r8]
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	4621      	mov	r1, r4
 800125e:	481c      	ldr	r0, [pc, #112]	; (80012d0 <SubghzApp_Init+0x18c>)
 8001260:	f006 fac0 	bl	80077e4 <memset>
  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 8001264:	9700      	str	r7, [sp, #0]
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <SubghzApp_Init+0x190>)
 8001268:	462a      	mov	r2, r5
 800126a:	4621      	mov	r1, r4
 800126c:	4628      	mov	r0, r5
 800126e:	f005 fd8f 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8001272:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001274:	f8d8 0000 	ldr.w	r0, [r8]
 8001278:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
 800127c:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <SubghzApp_Init+0x194>)
 8001280:	4621      	mov	r1, r4
 8001282:	4628      	mov	r0, r5
 8001284:	f005 ff5e 	bl	8007144 <UTIL_SEQ_RegTask>
}
 8001288:	b00b      	add	sp, #44	; 0x2c
 800128a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800128e:	bf00      	nop
 8001290:	080079ec 	.word	0x080079ec
 8001294:	080079fc 	.word	0x080079fc
 8001298:	2000026c 	.word	0x2000026c
 800129c:	08000db1 	.word	0x08000db1
 80012a0:	20000244 	.word	0x20000244
 80012a4:	0800111d 	.word	0x0800111d
 80012a8:	08001041 	.word	0x08001041
 80012ac:	08001019 	.word	0x08001019
 80012b0:	08000ff5 	.word	0x08000ff5
 80012b4:	08000fcd 	.word	0x08000fcd
 80012b8:	08007bbc 	.word	0x08007bbc
 80012bc:	33bca100 	.word	0x33bca100
 80012c0:	08007a18 	.word	0x08007a18
 80012c4:	08007a2c 	.word	0x08007a2c
 80012c8:	08007a40 	.word	0x08007a40
 80012cc:	08007a54 	.word	0x08007a54
 80012d0:	20000144 	.word	0x20000144
 80012d4:	08007a64 	.word	0x08007a64
 80012d8:	08000dcd 	.word	0x08000dcd
 80012dc:	20000268 	.word	0x20000268

080012e0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80012e0:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 80012e2:	f000 f85d 	bl	80013a0 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012e6:	bd08      	pop	{r3, pc}

080012e8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80012e8:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80012ea:	f000 f899 	bl	8001420 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80012ee:	bd08      	pop	{r3, pc}

080012f0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80012f0:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80012f2:	f000 f8e3 	bl	80014bc <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80012f6:	bd08      	pop	{r3, pc}

080012f8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80012f8:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80012fa:	f000 f8e1 	bl	80014c0 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012fe:	bd08      	pop	{r3, pc}

08001300 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001300:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001302:	f000 f8df 	bl	80014c4 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001306:	bd08      	pop	{r3, pc}

08001308 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800130c:	2400      	movs	r4, #0
 800130e:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001316:	f042 0202 	orr.w	r2, r2, #2
 800131a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001324:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <BSP_LED_Init+0x50>)
 8001328:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 800132c:	9601      	str	r6, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001332:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001334:	2302      	movs	r3, #2
 8001336:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <BSP_LED_Init+0x54>)
 800133a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800133e:	a901      	add	r1, sp, #4
 8001340:	4628      	mov	r0, r5
 8001342:	f000 fbe5 	bl	8001b10 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001346:	4622      	mov	r2, r4
 8001348:	4631      	mov	r1, r6
 800134a:	4628      	mov	r0, r5
 800134c:	f000 fd14 	bl	8001d78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001350:	4620      	mov	r0, r4
 8001352:	b006      	add	sp, #24
 8001354:	bd70      	pop	{r4, r5, r6, pc}
 8001356:	bf00      	nop
 8001358:	08007a70 	.word	0x08007a70
 800135c:	08007a78 	.word	0x08007a78

08001360 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001360:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001362:	2200      	movs	r2, #0
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <BSP_LED_Off+0x18>)
 8001366:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <BSP_LED_Off+0x1c>)
 800136c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001370:	f000 fd02 	bl	8001d78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001374:	2000      	movs	r0, #0
 8001376:	bd08      	pop	{r3, pc}
 8001378:	08007a70 	.word	0x08007a70
 800137c:	08007a78 	.word	0x08007a78

08001380 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001380:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <BSP_LED_Toggle+0x18>)
 8001384:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <BSP_LED_Toggle+0x1c>)
 800138a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800138e:	f000 fcf8 	bl	8001d82 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8001392:	2000      	movs	r0, #0
 8001394:	bd08      	pop	{r3, pc}
 8001396:	bf00      	nop
 8001398:	08007a70 	.word	0x08007a70
 800139c:	08007a78 	.word	0x08007a78

080013a0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80013a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a4:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80013a6:	2400      	movs	r4, #0
 80013a8:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b0:	f042 0204 	orr.w	r2, r2, #4
 80013b4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80013be:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80013c0:	2710      	movs	r7, #16
 80013c2:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80013c8:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80013ce:	4d13      	ldr	r5, [pc, #76]	; (800141c <BSP_RADIO_Init+0x7c>)
 80013d0:	a901      	add	r1, sp, #4
 80013d2:	4628      	mov	r0, r5
 80013d4:	f000 fb9c 	bl	8001b10 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80013d8:	f04f 0820 	mov.w	r8, #32
 80013dc:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80013e0:	a901      	add	r1, sp, #4
 80013e2:	4628      	mov	r0, r5
 80013e4:	f000 fb94 	bl	8001b10 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80013e8:	2608      	movs	r6, #8
 80013ea:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80013ec:	a901      	add	r1, sp, #4
 80013ee:	4628      	mov	r0, r5
 80013f0:	f000 fb8e 	bl	8001b10 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80013f4:	4622      	mov	r2, r4
 80013f6:	4641      	mov	r1, r8
 80013f8:	4628      	mov	r0, r5
 80013fa:	f000 fcbd 	bl	8001d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80013fe:	4622      	mov	r2, r4
 8001400:	4639      	mov	r1, r7
 8001402:	4628      	mov	r0, r5
 8001404:	f000 fcb8 	bl	8001d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001408:	4622      	mov	r2, r4
 800140a:	4631      	mov	r1, r6
 800140c:	4628      	mov	r0, r5
 800140e:	f000 fcb3 	bl	8001d78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001412:	4620      	mov	r0, r4
 8001414:	b006      	add	sp, #24
 8001416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800141a:	bf00      	nop
 800141c:	48000800 	.word	0x48000800

08001420 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001420:	b510      	push	{r4, lr}
  switch (Config)
 8001422:	2803      	cmp	r0, #3
 8001424:	d813      	bhi.n	800144e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8001426:	e8df f000 	tbb	[pc, r0]
 800142a:	1402      	.short	0x1402
 800142c:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800142e:	4c22      	ldr	r4, [pc, #136]	; (80014b8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	4620      	mov	r0, r4
 8001436:	f000 fc9f 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2110      	movs	r1, #16
 800143e:	4620      	mov	r0, r4
 8001440:	f000 fc9a 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2120      	movs	r1, #32
 8001448:	4620      	mov	r0, r4
 800144a:	f000 fc95 	bl	8001d78 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800144e:	2000      	movs	r0, #0
 8001450:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001452:	4c19      	ldr	r4, [pc, #100]	; (80014b8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001454:	2201      	movs	r2, #1
 8001456:	2108      	movs	r1, #8
 8001458:	4620      	mov	r0, r4
 800145a:	f000 fc8d 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800145e:	2201      	movs	r2, #1
 8001460:	2110      	movs	r1, #16
 8001462:	4620      	mov	r0, r4
 8001464:	f000 fc88 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001468:	2200      	movs	r2, #0
 800146a:	2120      	movs	r1, #32
 800146c:	4620      	mov	r0, r4
 800146e:	f000 fc83 	bl	8001d78 <HAL_GPIO_WritePin>
      break;
 8001472:	e7ec      	b.n	800144e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001474:	4c10      	ldr	r4, [pc, #64]	; (80014b8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001476:	2201      	movs	r2, #1
 8001478:	2108      	movs	r1, #8
 800147a:	4620      	mov	r0, r4
 800147c:	f000 fc7c 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001480:	2201      	movs	r2, #1
 8001482:	2110      	movs	r1, #16
 8001484:	4620      	mov	r0, r4
 8001486:	f000 fc77 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800148a:	2201      	movs	r2, #1
 800148c:	2120      	movs	r1, #32
 800148e:	4620      	mov	r0, r4
 8001490:	f000 fc72 	bl	8001d78 <HAL_GPIO_WritePin>
      break;
 8001494:	e7db      	b.n	800144e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001496:	4c08      	ldr	r4, [pc, #32]	; (80014b8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001498:	2201      	movs	r2, #1
 800149a:	2108      	movs	r1, #8
 800149c:	4620      	mov	r0, r4
 800149e:	f000 fc6b 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80014a2:	2200      	movs	r2, #0
 80014a4:	2110      	movs	r1, #16
 80014a6:	4620      	mov	r0, r4
 80014a8:	f000 fc66 	bl	8001d78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80014ac:	2201      	movs	r2, #1
 80014ae:	2120      	movs	r1, #32
 80014b0:	4620      	mov	r0, r4
 80014b2:	f000 fc61 	bl	8001d78 <HAL_GPIO_WritePin>
      break;
 80014b6:	e7ca      	b.n	800144e <BSP_RADIO_ConfigRFSwitch+0x2e>
 80014b8:	48000800 	.word	0x48000800

080014bc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80014bc:	2000      	movs	r0, #0
 80014be:	4770      	bx	lr

080014c0 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80014c0:	2001      	movs	r0, #1
 80014c2:	4770      	bx	lr

080014c4 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80014c4:	2001      	movs	r0, #1
 80014c6:	4770      	bx	lr

080014c8 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f000 f83a 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014d4:	f000 fde6 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_Init+0x28>)
 80014da:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014dc:	200f      	movs	r0, #15
 80014de:	f7ff f98b 	bl	80007f8 <HAL_InitTick>
 80014e2:	b110      	cbz	r0, 80014ea <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80014e4:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80014e6:	4620      	mov	r0, r4
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	4604      	mov	r4, r0
    HAL_MspInit();
 80014ec:	f7ff f8d8 	bl	80006a0 <HAL_MspInit>
 80014f0:	e7f9      	b.n	80014e6 <HAL_Init+0x1a>
 80014f2:	bf00      	nop
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80014f8:	4a02      	ldr	r2, [pc, #8]	; (8001504 <HAL_SuspendTick+0xc>)
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	f023 0302 	bic.w	r3, r3, #2
 8001500:	6013      	str	r3, [r2, #0]
}
 8001502:	4770      	bx	lr
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001508:	4a02      	ldr	r2, [pc, #8]	; (8001514 <HAL_ResumeTick+0xc>)
 800150a:	6813      	ldr	r3, [r2, #0]
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	4770      	bx	lr
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001518:	4a02      	ldr	r2, [pc, #8]	; (8001524 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800151a:	6853      	ldr	r3, [r2, #4]
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8001522:	4770      	bx	lr
 8001524:	e0042000 	.word	0xe0042000

08001528 <HAL_DBGMCU_DisableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001528:	4a02      	ldr	r2, [pc, #8]	; (8001534 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800152a:	6853      	ldr	r3, [r2, #4]
 800152c:	f023 0302 	bic.w	r3, r3, #2
 8001530:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8001532:	4770      	bx	lr
 8001534:	e0042000 	.word	0xe0042000

08001538 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001538:	4a02      	ldr	r2, [pc, #8]	; (8001544 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800153a:	6853      	ldr	r3, [r2, #4]
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8001542:	4770      	bx	lr
 8001544:	e0042000 	.word	0xe0042000

08001548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800154a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	0200      	lsls	r0, r0, #8
 8001556:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001564:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_NVIC_SetPriority+0x60>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001576:	f1c3 0407 	rsb	r4, r3, #7
 800157a:	2c04      	cmp	r4, #4
 800157c:	bf28      	it	cs
 800157e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001580:	1d1d      	adds	r5, r3, #4
 8001582:	2d06      	cmp	r5, #6
 8001584:	d918      	bls.n	80015b8 <HAL_NVIC_SetPriority+0x4c>
 8001586:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 35ff 	mov.w	r5, #4294967295
 800158c:	fa05 f404 	lsl.w	r4, r5, r4
 8001590:	ea21 0104 	bic.w	r1, r1, r4
 8001594:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001596:	fa05 f303 	lsl.w	r3, r5, r3
 800159a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80015a0:	2800      	cmp	r0, #0
 80015a2:	db0b      	blt.n	80015bc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	0109      	lsls	r1, r1, #4
 80015a6:	b2c9      	uxtb	r1, r1
 80015a8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80015ac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80015b0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015b4:	bc30      	pop	{r4, r5}
 80015b6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b8:	2300      	movs	r3, #0
 80015ba:	e7e5      	b.n	8001588 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	f000 000f 	and.w	r0, r0, #15
 80015c0:	0109      	lsls	r1, r1, #4
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <HAL_NVIC_SetPriority+0x64>)
 80015c6:	5419      	strb	r1, [r3, r0]
 80015c8:	e7f4      	b.n	80015b4 <HAL_NVIC_SetPriority+0x48>
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	e000ed14 	.word	0xe000ed14

080015d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015d4:	2800      	cmp	r0, #0
 80015d6:	db07      	blt.n	80015e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d8:	f000 021f 	and.w	r2, r0, #31
 80015dc:	0940      	lsrs	r0, r0, #5
 80015de:	2301      	movs	r3, #1
 80015e0:	4093      	lsls	r3, r2
 80015e2:	4a02      	ldr	r2, [pc, #8]	; (80015ec <HAL_NVIC_EnableIRQ+0x18>)
 80015e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015f0:	2800      	cmp	r0, #0
 80015f2:	db0c      	blt.n	800160e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f4:	f000 021f 	and.w	r2, r0, #31
 80015f8:	0940      	lsrs	r0, r0, #5
 80015fa:	2301      	movs	r3, #1
 80015fc:	4093      	lsls	r3, r2
 80015fe:	3020      	adds	r0, #32
 8001600:	4a03      	ldr	r2, [pc, #12]	; (8001610 <HAL_NVIC_DisableIRQ+0x20>)
 8001602:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001606:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800160a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100

08001614 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001614:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001616:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001618:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800161a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800161c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800161e:	b114      	cbz	r4, 8001626 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001620:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001622:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001624:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001626:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001628:	f004 051c 	and.w	r5, r4, #28
 800162c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800162e:	2401      	movs	r4, #1
 8001630:	40ac      	lsls	r4, r5
 8001632:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001634:	6804      	ldr	r4, [r0, #0]
 8001636:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001638:	6883      	ldr	r3, [r0, #8]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d005      	beq.n	800164a <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800163e:	6803      	ldr	r3, [r0, #0]
 8001640:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001642:	6803      	ldr	r3, [r0, #0]
 8001644:	60da      	str	r2, [r3, #12]
  }
}
 8001646:	bc70      	pop	{r4, r5, r6}
 8001648:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800164a:	6803      	ldr	r3, [r0, #0]
 800164c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800164e:	6803      	ldr	r3, [r0, #0]
 8001650:	60d9      	str	r1, [r3, #12]
 8001652:	e7f8      	b.n	8001646 <DMA_SetConfig+0x32>

08001654 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001654:	6803      	ldr	r3, [r0, #0]
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d816      	bhi.n	800168a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800165c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800165e:	f022 0203 	bic.w	r2, r2, #3
 8001662:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001666:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800166a:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800166c:	b2db      	uxtb	r3, r3
 800166e:	3b08      	subs	r3, #8
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800167a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	2201      	movs	r2, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001688:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800168a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800168c:	f022 0103 	bic.w	r1, r2, #3
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8001692:	440a      	add	r2, r1
 8001694:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001696:	b2db      	uxtb	r3, r3
 8001698:	3b08      	subs	r3, #8
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	3307      	adds	r3, #7
 80016a4:	e7e8      	b.n	8001678 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80016a6:	bf00      	nop
 80016a8:	40020407 	.word	0x40020407
 80016ac:	cccccccd 	.word	0xcccccccd
 80016b0:	40020880 	.word	0x40020880
 80016b4:	4002081c 	.word	0x4002081c

080016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016b8:	6843      	ldr	r3, [r0, #4]
 80016ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80016c0:	441a      	add	r2, r3
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016c6:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80016c8:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2201      	movs	r2, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	1000823f 	.word	0x1000823f
 80016e0:	40020940 	.word	0x40020940

080016e4 <HAL_DMA_Init>:
  if (hdma == NULL)
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d060      	beq.n	80017aa <HAL_DMA_Init+0xc6>
{
 80016e8:	b510      	push	{r4, lr}
 80016ea:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016ec:	6802      	ldr	r2, [r0, #0]
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_DMA_Init+0xcc>)
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d842      	bhi.n	800177a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016f4:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_DMA_Init+0xd0>)
 80016f6:	4413      	add	r3, r2
 80016f8:	492f      	ldr	r1, [pc, #188]	; (80017b8 <HAL_DMA_Init+0xd4>)
 80016fa:	fba1 1303 	umull	r1, r3, r1, r3
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_DMA_Init+0xd8>)
 8001706:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	2302      	movs	r3, #2
 800170a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001718:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800171a:	6821      	ldr	r1, [r4, #0]
 800171c:	680a      	ldr	r2, [r1, #0]
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	68e0      	ldr	r0, [r4, #12]
 8001722:	4303      	orrs	r3, r0
 8001724:	6920      	ldr	r0, [r4, #16]
 8001726:	4303      	orrs	r3, r0
 8001728:	6960      	ldr	r0, [r4, #20]
 800172a:	4303      	orrs	r3, r0
 800172c:	69a0      	ldr	r0, [r4, #24]
 800172e:	4303      	orrs	r3, r0
 8001730:	69e0      	ldr	r0, [r4, #28]
 8001732:	4303      	orrs	r3, r0
 8001734:	6a20      	ldr	r0, [r4, #32]
 8001736:	4303      	orrs	r3, r0
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff ff89 	bl	8001654 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001742:	68a3      	ldr	r3, [r4, #8]
 8001744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001748:	d022      	beq.n	8001790 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800174a:	6863      	ldr	r3, [r4, #4]
 800174c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800174e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001752:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001754:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001756:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001758:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	3b01      	subs	r3, #1
 800175e:	2b03      	cmp	r3, #3
 8001760:	d919      	bls.n	8001796 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001766:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001768:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176a:	2000      	movs	r0, #0
 800176c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800176e:	2301      	movs	r3, #1
 8001770:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001774:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8001778:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_DMA_Init+0xdc>)
 800177c:	4413      	add	r3, r2
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <HAL_DMA_Init+0xd4>)
 8001780:	fba1 1303 	umull	r1, r3, r1, r3
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_DMA_Init+0xe0>)
 800178c:	6403      	str	r3, [r0, #64]	; 0x40
 800178e:	e7bb      	b.n	8001708 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001790:	2300      	movs	r3, #0
 8001792:	6063      	str	r3, [r4, #4]
 8001794:	e7d9      	b.n	800174a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff ff8e 	bl	80016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800179c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	e7df      	b.n	800176a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40020407 	.word	0x40020407
 80017b4:	bffdfff8 	.word	0xbffdfff8
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	40020000 	.word	0x40020000
 80017c0:	bffdfbf8 	.word	0xbffdfbf8
 80017c4:	40020400 	.word	0x40020400

080017c8 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d04b      	beq.n	8001864 <HAL_DMA_DeInit+0x9c>
{
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80017d0:	6802      	ldr	r2, [r0, #0]
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017da:	6802      	ldr	r2, [r0, #0]
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_DMA_DeInit+0xa0>)
 80017de:	429a      	cmp	r2, r3
 80017e0:	d82c      	bhi.n	800183c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_DMA_DeInit+0xa4>)
 80017e4:	4413      	add	r3, r2
 80017e6:	4922      	ldr	r1, [pc, #136]	; (8001870 <HAL_DMA_DeInit+0xa8>)
 80017e8:	fba1 1303 	umull	r1, r3, r1, r3
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_DMA_DeInit+0xac>)
 80017f4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80017f6:	2500      	movs	r5, #0
 80017f8:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017fc:	f003 021c 	and.w	r2, r3, #28
 8001800:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001802:	2301      	movs	r3, #1
 8001804:	4093      	lsls	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff ff23 	bl	8001654 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800180e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001810:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001812:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001814:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001816:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001818:	6863      	ldr	r3, [r4, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	2b03      	cmp	r3, #3
 800181e:	d918      	bls.n	8001852 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8001820:	2000      	movs	r0, #0
 8001822:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001824:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001826:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001828:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800182a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800182c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800182e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001830:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8001832:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001836:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800183a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_DMA_DeInit+0xb0>)
 800183e:	4413      	add	r3, r2
 8001840:	490b      	ldr	r1, [pc, #44]	; (8001870 <HAL_DMA_DeInit+0xa8>)
 8001842:	fba1 1303 	umull	r1, r3, r1, r3
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_DMA_DeInit+0xb4>)
 800184e:	6403      	str	r3, [r0, #64]	; 0x40
 8001850:	e7d1      	b.n	80017f6 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff ff30 	bl	80016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001858:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800185a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800185c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800185e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	e7dd      	b.n	8001820 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8001864:	2001      	movs	r0, #1
}
 8001866:	4770      	bx	lr
 8001868:	40020407 	.word	0x40020407
 800186c:	bffdfff8 	.word	0xbffdfff8
 8001870:	cccccccd 	.word	0xcccccccd
 8001874:	40020000 	.word	0x40020000
 8001878:	bffdfbf8 	.word	0xbffdfbf8
 800187c:	40020400 	.word	0x40020400

08001880 <HAL_DMA_Start_IT>:
{
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001884:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8001888:	2801      	cmp	r0, #1
 800188a:	d043      	beq.n	8001914 <HAL_DMA_Start_IT+0x94>
 800188c:	2001      	movs	r0, #1
 800188e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8001892:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001896:	b2c0      	uxtb	r0, r0
 8001898:	2801      	cmp	r0, #1
 800189a:	d006      	beq.n	80018aa <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80018a0:	2300      	movs	r3, #0
 80018a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
}
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80018aa:	2002      	movs	r0, #2
 80018ac:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b0:	2000      	movs	r0, #0
 80018b2:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80018b4:	6825      	ldr	r5, [r4, #0]
 80018b6:	6828      	ldr	r0, [r5, #0]
 80018b8:	f020 0001 	bic.w	r0, r0, #1
 80018bc:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff fea8 	bl	8001614 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80018c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018c6:	b1d3      	cbz	r3, 80018fe <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	6813      	ldr	r3, [r2, #0]
 80018cc:	f043 030e 	orr.w	r3, r3, #14
 80018d0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80018da:	d003      	beq.n	80018e4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80018e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018e6:	b11b      	cbz	r3, 80018f0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	6813      	ldr	r3, [r2, #0]
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018fa:	2000      	movs	r0, #0
 80018fc:	e7d4      	b.n	80018a8 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001908:	6822      	ldr	r2, [r4, #0]
 800190a:	6813      	ldr	r3, [r2, #0]
 800190c:	f043 030a 	orr.w	r3, r3, #10
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e7de      	b.n	80018d2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001914:	2002      	movs	r0, #2
 8001916:	e7c7      	b.n	80018a8 <HAL_DMA_Start_IT+0x28>

08001918 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8001918:	4603      	mov	r3, r0
 800191a:	2800      	cmp	r0, #0
 800191c:	d034      	beq.n	8001988 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800191e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	2a02      	cmp	r2, #2
 8001926:	d006      	beq.n	8001936 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001928:	2204      	movs	r2, #4
 800192a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800192c:	2200      	movs	r2, #0
 800192e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
 8001934:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001936:	6801      	ldr	r1, [r0, #0]
 8001938:	680a      	ldr	r2, [r1, #0]
 800193a:	f022 020e 	bic.w	r2, r2, #14
 800193e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001940:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001942:	680a      	ldr	r2, [r1, #0]
 8001944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001948:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800194a:	6801      	ldr	r1, [r0, #0]
 800194c:	680a      	ldr	r2, [r1, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001956:	f002 011c 	and.w	r1, r2, #28
 800195a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800195c:	2201      	movs	r2, #1
 800195e:	408a      	lsls	r2, r1
 8001960:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001964:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001966:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800196a:	b132      	cbz	r2, 800197a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800196c:	6811      	ldr	r1, [r2, #0]
 800196e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001972:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001976:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001978:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001980:	2000      	movs	r0, #0
 8001982:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8001986:	4770      	bx	lr
    return HAL_ERROR;
 8001988:	2001      	movs	r0, #1
}
 800198a:	4770      	bx	lr

0800198c <HAL_DMA_Abort_IT>:
{
 800198c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800198e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d003      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001998:	2304      	movs	r3, #4
 800199a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800199c:	2001      	movs	r0, #1
}
 800199e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a0:	6802      	ldr	r2, [r0, #0]
 80019a2:	6813      	ldr	r3, [r2, #0]
 80019a4:	f023 030e 	bic.w	r3, r3, #14
 80019a8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80019aa:	6802      	ldr	r2, [r0, #0]
 80019ac:	6813      	ldr	r3, [r2, #0]
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019b4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019c0:	f003 021c 	and.w	r2, r3, #28
 80019c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80019c6:	2301      	movs	r3, #1
 80019c8:	4093      	lsls	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80019ce:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80019d0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80019d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80019d4:	b133      	cbz	r3, 80019e4 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80019e0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80019e2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80019ea:	2300      	movs	r3, #0
 80019ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80019f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80019f2:	b113      	cbz	r3, 80019fa <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80019f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019f6:	2000      	movs	r0, #0
 80019f8:	e7d1      	b.n	800199e <HAL_DMA_Abort_IT+0x12>
 80019fa:	2000      	movs	r0, #0
 80019fc:	e7cf      	b.n	800199e <HAL_DMA_Abort_IT+0x12>
	...

08001a00 <HAL_DMA_IRQHandler>:
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a04:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001a06:	6804      	ldr	r4, [r0, #0]
 8001a08:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a0c:	f003 031c 	and.w	r3, r3, #28
 8001a10:	2204      	movs	r2, #4
 8001a12:	409a      	lsls	r2, r3
 8001a14:	420a      	tst	r2, r1
 8001a16:	d015      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x44>
 8001a18:	f015 0f04 	tst.w	r5, #4
 8001a1c:	d012      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	f013 0f20 	tst.w	r3, #32
 8001a24:	d103      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a30:	f003 021c 	and.w	r2, r3, #28
 8001a34:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a36:	2304      	movs	r3, #4
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8001a3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a3e:	b103      	cbz	r3, 8001a42 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8001a40:	4798      	blx	r3
}
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a44:	2202      	movs	r2, #2
 8001a46:	409a      	lsls	r2, r3
 8001a48:	420a      	tst	r2, r1
 8001a4a:	d028      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x9e>
 8001a4c:	f015 0f02 	tst.w	r5, #2
 8001a50:	d025      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	f013 0f20 	tst.w	r3, #32
 8001a58:	d106      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	f023 030a 	bic.w	r3, r3, #10
 8001a60:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001a68:	6802      	ldr	r2, [r0, #0]
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HAL_DMA_IRQHandler+0xdc>)
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d90e      	bls.n	8001a8e <HAL_DMA_IRQHandler+0x8e>
 8001a70:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a72:	f003 021c 	and.w	r2, r3, #28
 8001a76:	2302      	movs	r3, #2
 8001a78:	4093      	lsls	r3, r2
 8001a7a:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_DMA_IRQHandler+0xe0>)
 8001a7c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8001a84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0db      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8001a8a:	4798      	blx	r3
 8001a8c:	e7d9      	b.n	8001a42 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001a8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a90:	f003 021c 	and.w	r2, r3, #28
 8001a94:	2302      	movs	r3, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_DMA_IRQHandler+0xe4>)
 8001a9a:	6053      	str	r3, [r2, #4]
 8001a9c:	e7ef      	b.n	8001a7e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	420b      	tst	r3, r1
 8001aa6:	d0cc      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x42>
 8001aa8:	f015 0f08 	tst.w	r5, #8
 8001aac:	d0c9      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	f023 030e 	bic.w	r3, r3, #14
 8001ab4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ab6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ab8:	f003 031c 	and.w	r3, r3, #28
 8001abc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001abe:	2201      	movs	r2, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ac6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001acc:	2300      	movs	r3, #0
 8001ace:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001ad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0b4      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001ad8:	4798      	blx	r3
  return;
 8001ada:	e7b2      	b.n	8001a42 <HAL_DMA_IRQHandler+0x42>
 8001adc:	40020080 	.word	0x40020080
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8001ae8:	b178      	cbz	r0, 8001b0a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8001aea:	6803      	ldr	r3, [r0, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001aee:	f011 0f10 	tst.w	r1, #16
 8001af2:	d004      	beq.n	8001afe <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001af4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001af8:	d004      	beq.n	8001b04 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001afa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001afe:	601a      	str	r2, [r3, #0]
  return status;
 8001b00:	2000      	movs	r0, #0
 8001b02:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001b04:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001b08:	e7f9      	b.n	8001afe <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8001b0a:	2001      	movs	r0, #1
}
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8001b12:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b14:	e05f      	b.n	8001bd6 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b16:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b18:	005f      	lsls	r7, r3, #1
 8001b1a:	2503      	movs	r5, #3
 8001b1c:	40bd      	lsls	r5, r7
 8001b1e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b22:	68cd      	ldr	r5, [r1, #12]
 8001b24:	40bd      	lsls	r5, r7
 8001b26:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001b28:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b30:	684d      	ldr	r5, [r1, #4]
 8001b32:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8001b36:	409c      	lsls	r4, r3
 8001b38:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8001b3a:	6044      	str	r4, [r0, #4]
 8001b3c:	e059      	b.n	8001bf2 <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3e:	08dd      	lsrs	r5, r3, #3
 8001b40:	3508      	adds	r5, #8
 8001b42:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b46:	f003 0407 	and.w	r4, r3, #7
 8001b4a:	00a6      	lsls	r6, r4, #2
 8001b4c:	240f      	movs	r4, #15
 8001b4e:	40b4      	lsls	r4, r6
 8001b50:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b54:	690c      	ldr	r4, [r1, #16]
 8001b56:	40b4      	lsls	r4, r6
 8001b58:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8001b5a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001b5e:	e05c      	b.n	8001c1a <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b60:	2402      	movs	r4, #2
 8001b62:	e000      	b.n	8001b66 <HAL_GPIO_Init+0x56>
 8001b64:	2400      	movs	r4, #0
 8001b66:	40b4      	lsls	r4, r6
 8001b68:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6a:	3502      	adds	r5, #2
 8001b6c:	4e41      	ldr	r6, [pc, #260]	; (8001c74 <HAL_GPIO_Init+0x164>)
 8001b6e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001b72:	4c41      	ldr	r4, [pc, #260]	; (8001c78 <HAL_GPIO_Init+0x168>)
 8001b74:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001b78:	43d4      	mvns	r4, r2
 8001b7a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7e:	684f      	ldr	r7, [r1, #4]
 8001b80:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001b84:	d001      	beq.n	8001b8a <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 8001b86:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001b8a:	4d3b      	ldr	r5, [pc, #236]	; (8001c78 <HAL_GPIO_Init+0x168>)
 8001b8c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001b90:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001b94:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b98:	684f      	ldr	r7, [r1, #4]
 8001b9a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001b9e:	d001      	beq.n	8001ba4 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 8001ba0:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001ba4:	4d34      	ldr	r5, [pc, #208]	; (8001c78 <HAL_GPIO_Init+0x168>)
 8001ba6:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001baa:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001bac:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb0:	684f      	ldr	r7, [r1, #4]
 8001bb2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001bb6:	d001      	beq.n	8001bbc <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001bb8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001bbc:	4d2e      	ldr	r5, [pc, #184]	; (8001c78 <HAL_GPIO_Init+0x168>)
 8001bbe:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001bc0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001bc2:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc4:	684e      	ldr	r6, [r1, #4]
 8001bc6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001bca:	d001      	beq.n	8001bd0 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8001bcc:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_GPIO_Init+0x168>)
 8001bd2:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8001bd4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd6:	680a      	ldr	r2, [r1, #0]
 8001bd8:	fa32 f403 	lsrs.w	r4, r2, r3
 8001bdc:	d048      	beq.n	8001c70 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bde:	2401      	movs	r4, #1
 8001be0:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001be2:	4022      	ands	r2, r4
 8001be4:	d0f6      	beq.n	8001bd4 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be6:	684d      	ldr	r5, [r1, #4]
 8001be8:	f005 0503 	and.w	r5, r5, #3
 8001bec:	3d01      	subs	r5, #1
 8001bee:	2d01      	cmp	r5, #1
 8001bf0:	d991      	bls.n	8001b16 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf2:	684c      	ldr	r4, [r1, #4]
 8001bf4:	f004 0403 	and.w	r4, r4, #3
 8001bf8:	2c03      	cmp	r4, #3
 8001bfa:	d009      	beq.n	8001c10 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8001bfc:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfe:	005e      	lsls	r6, r3, #1
 8001c00:	2403      	movs	r4, #3
 8001c02:	40b4      	lsls	r4, r6
 8001c04:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	688c      	ldr	r4, [r1, #8]
 8001c0a:	40b4      	lsls	r4, r6
 8001c0c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001c0e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c10:	684c      	ldr	r4, [r1, #4]
 8001c12:	f004 0403 	and.w	r4, r4, #3
 8001c16:	2c02      	cmp	r4, #2
 8001c18:	d091      	beq.n	8001b3e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8001c1a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c1c:	005e      	lsls	r6, r3, #1
 8001c1e:	2403      	movs	r4, #3
 8001c20:	40b4      	lsls	r4, r6
 8001c22:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c26:	684c      	ldr	r4, [r1, #4]
 8001c28:	f004 0403 	and.w	r4, r4, #3
 8001c2c:	40b4      	lsls	r4, r6
 8001c2e:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001c30:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	684c      	ldr	r4, [r1, #4]
 8001c34:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001c38:	d0cc      	beq.n	8001bd4 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3a:	089d      	lsrs	r5, r3, #2
 8001c3c:	1cae      	adds	r6, r5, #2
 8001c3e:	4c0d      	ldr	r4, [pc, #52]	; (8001c74 <HAL_GPIO_Init+0x164>)
 8001c40:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001c44:	f003 0403 	and.w	r4, r3, #3
 8001c48:	00a6      	lsls	r6, r4, #2
 8001c4a:	2407      	movs	r4, #7
 8001c4c:	40b4      	lsls	r4, r6
 8001c4e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c52:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001c56:	d085      	beq.n	8001b64 <HAL_GPIO_Init+0x54>
 8001c58:	4c08      	ldr	r4, [pc, #32]	; (8001c7c <HAL_GPIO_Init+0x16c>)
 8001c5a:	42a0      	cmp	r0, r4
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_Init+0x15c>
 8001c5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c62:	42a0      	cmp	r0, r4
 8001c64:	f43f af7c 	beq.w	8001b60 <HAL_GPIO_Init+0x50>
 8001c68:	2407      	movs	r4, #7
 8001c6a:	e77c      	b.n	8001b66 <HAL_GPIO_Init+0x56>
 8001c6c:	2401      	movs	r4, #1
 8001c6e:	e77a      	b.n	8001b66 <HAL_GPIO_Init+0x56>
  }
}
 8001c70:	bcf0      	pop	{r4, r5, r6, r7}
 8001c72:	4770      	bx	lr
 8001c74:	40010000 	.word	0x40010000
 8001c78:	58000800 	.word	0x58000800
 8001c7c:	48000400 	.word	0x48000400

08001c80 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001c80:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c82:	fa31 f203 	lsrs.w	r2, r1, r3
 8001c86:	d06f      	beq.n	8001d68 <HAL_GPIO_DeInit+0xe8>
{
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	e02d      	b.n	8001ce8 <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001c8c:	2702      	movs	r7, #2
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_DeInit+0x12>
 8001c90:	2700      	movs	r7, #0
 8001c92:	fa07 f404 	lsl.w	r4, r7, r4
 8001c96:	42b4      	cmp	r4, r6
 8001c98:	d046      	beq.n	8001d28 <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001c9a:	6805      	ldr	r5, [r0, #0]
 8001c9c:	005c      	lsls	r4, r3, #1
 8001c9e:	2603      	movs	r6, #3
 8001ca0:	fa06 f404 	lsl.w	r4, r6, r4
 8001ca4:	4325      	orrs	r5, r4
 8001ca6:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001ca8:	fa23 f506 	lsr.w	r5, r3, r6
 8001cac:	3508      	adds	r5, #8
 8001cae:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8001cb2:	f003 0707 	and.w	r7, r3, #7
 8001cb6:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001cba:	270f      	movs	r7, #15
 8001cbc:	fa07 f70c 	lsl.w	r7, r7, ip
 8001cc0:	ea26 0607 	bic.w	r6, r6, r7
 8001cc4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cc8:	6885      	ldr	r5, [r0, #8]
 8001cca:	ea25 0504 	bic.w	r5, r5, r4
 8001cce:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd0:	6845      	ldr	r5, [r0, #4]
 8001cd2:	ea25 0202 	bic.w	r2, r5, r2
 8001cd6:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cd8:	68c2      	ldr	r2, [r0, #12]
 8001cda:	ea22 0404 	bic.w	r4, r2, r4
 8001cde:	60c4      	str	r4, [r0, #12]
    }

    position++;
 8001ce0:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8001ce2:	fa31 f203 	lsrs.w	r2, r1, r3
 8001ce6:	d03e      	beq.n	8001d66 <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8001cec:	ea12 0e01 	ands.w	lr, r2, r1
 8001cf0:	d0f6      	beq.n	8001ce0 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001cf2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001cf6:	f10c 0502 	add.w	r5, ip, #2
 8001cfa:	4c1c      	ldr	r4, [pc, #112]	; (8001d6c <HAL_GPIO_DeInit+0xec>)
 8001cfc:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8001d00:	f003 0403 	and.w	r4, r3, #3
 8001d04:	00a4      	lsls	r4, r4, #2
 8001d06:	2507      	movs	r5, #7
 8001d08:	40a5      	lsls	r5, r4
 8001d0a:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001d0c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001d10:	d0be      	beq.n	8001c90 <HAL_GPIO_DeInit+0x10>
 8001d12:	4f17      	ldr	r7, [pc, #92]	; (8001d70 <HAL_GPIO_DeInit+0xf0>)
 8001d14:	42b8      	cmp	r0, r7
 8001d16:	d005      	beq.n	8001d24 <HAL_GPIO_DeInit+0xa4>
 8001d18:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d1c:	42b8      	cmp	r0, r7
 8001d1e:	d0b5      	beq.n	8001c8c <HAL_GPIO_DeInit+0xc>
 8001d20:	2707      	movs	r7, #7
 8001d22:	e7b6      	b.n	8001c92 <HAL_GPIO_DeInit+0x12>
 8001d24:	2701      	movs	r7, #1
 8001d26:	e7b4      	b.n	8001c92 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8001d28:	4c12      	ldr	r4, [pc, #72]	; (8001d74 <HAL_GPIO_DeInit+0xf4>)
 8001d2a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8001d2e:	ea26 060e 	bic.w	r6, r6, lr
 8001d32:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001d36:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8001d3a:	ea26 060e 	bic.w	r6, r6, lr
 8001d3e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8001d42:	6826      	ldr	r6, [r4, #0]
 8001d44:	ea26 060e 	bic.w	r6, r6, lr
 8001d48:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001d4a:	6866      	ldr	r6, [r4, #4]
 8001d4c:	ea26 060e 	bic.w	r6, r6, lr
 8001d50:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d52:	4e06      	ldr	r6, [pc, #24]	; (8001d6c <HAL_GPIO_DeInit+0xec>)
 8001d54:	f10c 0c02 	add.w	ip, ip, #2
 8001d58:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8001d5c:	ea24 0505 	bic.w	r5, r4, r5
 8001d60:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 8001d64:	e799      	b.n	8001c9a <HAL_GPIO_DeInit+0x1a>
  }
}
 8001d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	58000800 	.word	0x58000800

08001d78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d78:	b10a      	cbz	r2, 8001d7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d7a:	6181      	str	r1, [r0, #24]
 8001d7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d82:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d84:	ea01 0203 	and.w	r2, r1, r3
 8001d88:	ea21 0103 	bic.w	r1, r1, r3
 8001d8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001d90:	6181      	str	r1, [r0, #24]
}
 8001d92:	4770      	bx	lr

08001d94 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d94:	4a02      	ldr	r2, [pc, #8]	; (8001da0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]
}
 8001d9e:	4770      	bx	lr
 8001da0:	58000400 	.word	0x58000400

08001da4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001da4:	b510      	push	{r4, lr}
 8001da6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001da8:	b9a0      	cbnz	r0, 8001dd4 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001db2:	d10a      	bne.n	8001dca <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_PWR_EnterSLEEPMode+0x48>)
 8001db6:	6913      	ldr	r3, [r2, #16]
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001dbe:	2c01      	cmp	r4, #1
 8001dc0:	d010      	beq.n	8001de4 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001dc2:	bf40      	sev
    __WFE();
 8001dc4:	bf20      	wfe
    __WFE();
 8001dc6:	bf20      	wfe
  }
}
 8001dc8:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001dca:	f000 f821 	bl	8001e10 <HAL_PWREx_DisableLowPowerRunMode>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_PWR_EnterSLEEPMode+0x10>
 8001dd2:	e7f9      	b.n	8001dc8 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001ddc:	d1ea      	bne.n	8001db4 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8001dde:	f000 f80f 	bl	8001e00 <HAL_PWREx_EnableLowPowerRunMode>
 8001de2:	e7e7      	b.n	8001db4 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8001de4:	bf30      	wfi
 8001de6:	e7ef      	b.n	8001dc8 <HAL_PWR_EnterSLEEPMode+0x24>
 8001de8:	58000400 	.word	0x58000400
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <HAL_PWREx_GetVoltageRange+0xc>)
 8001df2:	6818      	ldr	r0, [r3, #0]
}
 8001df4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	58000400 	.word	0x58000400

08001e00 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001e00:	4a02      	ldr	r2, [pc, #8]	; (8001e0c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6013      	str	r3, [r2, #0]
}
 8001e0a:	4770      	bx	lr
 8001e0c:	58000400 	.word	0x58000400

08001e10 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e18:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2332      	movs	r3, #50	; 0x32
 8001e20:	fb03 f302 	mul.w	r3, r3, r2
 8001e24:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8001e2e:	6952      	ldr	r2, [r2, #20]
 8001e30:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001e34:	d002      	beq.n	8001e3c <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8001e36:	b10b      	cbz	r3, 8001e3c <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	e7f7      	b.n	8001e2c <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001e44:	d101      	bne.n	8001e4a <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8001e46:	2000      	movs	r0, #0
 8001e48:	4770      	bx	lr
    return HAL_TIMEOUT;
 8001e4a:	2003      	movs	r0, #3
}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	58000400 	.word	0x58000400
 8001e54:	20000004 	.word	0x20000004
 8001e58:	431bde83 	.word	0x431bde83

08001e5c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	f023 0307 	bic.w	r3, r3, #7
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8001e6c:	6913      	ldr	r3, [r2, #16]
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001e74:	2801      	cmp	r0, #1
 8001e76:	d008      	beq.n	8001e8a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001e78:	bf40      	sev
    __WFE();
 8001e7a:	bf20      	wfe
    __WFE();
 8001e7c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8001e80:	6913      	ldr	r3, [r2, #16]
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6113      	str	r3, [r2, #16]
}
 8001e88:	4770      	bx	lr
    __WFI();
 8001e8a:	bf30      	wfi
 8001e8c:	e7f7      	b.n	8001e7e <HAL_PWREx_EnterSTOP2Mode+0x22>
 8001e8e:	bf00      	nop
 8001e90:	58000400 	.word	0x58000400
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001e98:	b570      	push	{r4, r5, r6, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <RCC_SetFlashLatency+0xb0>)
 8001ea2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ea6:	9006      	str	r0, [sp, #24]
 8001ea8:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	6898      	ldr	r0, [r3, #8]
 8001eb0:	9004      	str	r0, [sp, #16]
 8001eb2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001eb6:	ad01      	add	r5, sp, #4
 8001eb8:	3310      	adds	r3, #16
 8001eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ebe:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001ec6:	d01b      	beq.n	8001f00 <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d822      	bhi.n	8001f14 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001ece:	aa08      	add	r2, sp, #32
 8001ed0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001ed4:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8001ed8:	42a2      	cmp	r2, r4
 8001eda:	d215      	bcs.n	8001f08 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001edc:	3301      	adds	r3, #1
 8001ede:	e7f4      	b.n	8001eca <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d80e      	bhi.n	8001f04 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001ee6:	aa08      	add	r2, sp, #32
 8001ee8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001eec:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8001ef0:	42a2      	cmp	r2, r4
 8001ef2:	d3f5      	bcc.n	8001ee0 <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 8001ef4:	aa08      	add	r2, sp, #32
 8001ef6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001efa:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8001efe:	e00a      	b.n	8001f16 <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	e7ee      	b.n	8001ee2 <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f04:	2500      	movs	r5, #0
 8001f06:	e006      	b.n	8001f16 <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f08:	aa08      	add	r2, sp, #32
 8001f0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001f0e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8001f12:	e000      	b.n	8001f16 <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f14:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f16:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <RCC_SetFlashLatency+0xb4>)
 8001f18:	6813      	ldr	r3, [r2, #0]
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	432b      	orrs	r3, r5
 8001f20:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f22:	f7fe fc6b 	bl	80007fc <HAL_GetTick>
 8001f26:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <RCC_SetFlashLatency+0xb4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	42ab      	cmp	r3, r5
 8001f32:	d006      	beq.n	8001f42 <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f34:	f7fe fc62 	bl	80007fc <HAL_GetTick>
 8001f38:	1b00      	subs	r0, r0, r4
 8001f3a:	2802      	cmp	r0, #2
 8001f3c:	d9f4      	bls.n	8001f28 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 8001f3e:	2003      	movs	r0, #3
 8001f40:	e000      	b.n	8001f44 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 8001f42:	2000      	movs	r0, #0
}
 8001f44:	b008      	add	sp, #32
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	08007830 	.word	0x08007830
 8001f4c:	58004000 	.word	0x58004000

08001f50 <RCC_SetFlashLatencyFromMSIRange>:
{
 8001f50:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001f52:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8001f58:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8001f6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f6e:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001f72:	f7ff ff3d 	bl	8001df0 <HAL_PWREx_GetVoltageRange>
 8001f76:	4601      	mov	r1, r0
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8001f7a:	fba0 3004 	umull	r3, r0, r0, r4
 8001f7e:	0c80      	lsrs	r0, r0, #18
 8001f80:	f7ff ff8a 	bl	8001e98 <RCC_SetFlashLatency>
}
 8001f84:	bd10      	pop	{r4, pc}
 8001f86:	bf00      	nop
 8001f88:	08007ae4 	.word	0x08007ae4
 8001f8c:	08007a84 	.word	0x08007a84
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fa0:	f012 020c 	ands.w	r2, r2, #12
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x28>
 8001fa6:	2a0c      	cmp	r2, #12
 8001fa8:	d006      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001faa:	2a04      	cmp	r2, #4
 8001fac:	d047      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fae:	2a08      	cmp	r2, #8
 8001fb0:	d03b      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8001fb2:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	e026      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d1f6      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f013 0308 	ands.w	r3, r3, #8
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x50>
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f013 0308 	ands.w	r3, r3, #8
 8001fd2:	d124      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd8:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001fdc:	492e      	ldr	r1, [pc, #184]	; (8002098 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fde:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001fe2:	e00e      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe8:	6809      	ldr	r1, [r1, #0]
 8001fea:	f011 0f08 	tst.w	r1, #8
 8001fee:	d112      	bne.n	8002016 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001ffc:	4926      	ldr	r1, [pc, #152]	; (8002098 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ffe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002002:	b1d2      	cbz	r2, 800203a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8002004:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d01a      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8002014:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201a:	6809      	ldr	r1, [r1, #0]
 800201c:	e7ee      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x68>
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002024:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002028:	e7d8      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 8002034:	d106      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8002036:	4819      	ldr	r0, [pc, #100]	; (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	e7e5      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800203a:	4608      	mov	r0, r1
 800203c:	e7e3      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800203e:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 8002040:	4817      	ldr	r0, [pc, #92]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002042:	e7e0      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8002044:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 8002046:	4816      	ldr	r0, [pc, #88]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002048:	e7dd      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002054:	2b02      	cmp	r3, #2
 8002056:	d009      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xd8>
 8002058:	2b03      	cmp	r3, #3
 800205a:	d108      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002066:	d115      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	e000      	b.n	800206e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 800206c:	490c      	ldr	r1, [pc, #48]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800206e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002072:	68d0      	ldr	r0, [r2, #12]
 8002074:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002078:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800207c:	68d3      	ldr	r3, [r2, #12]
 800207e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002082:	3301      	adds	r3, #1
 8002084:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002088:	68d3      	ldr	r3, [r2, #12]
 800208a:	0f5b      	lsrs	r3, r3, #29
 800208c:	3301      	adds	r3, #1
 800208e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002092:	e7bf      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8002094:	4902      	ldr	r1, [pc, #8]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002096:	e7ea      	b.n	800206e <HAL_RCC_GetSysClockFreq+0xda>
 8002098:	08007ae4 	.word	0x08007ae4
 800209c:	01e84800 	.word	0x01e84800
 80020a0:	00f42400 	.word	0x00f42400

080020a4 <HAL_RCC_GetHCLKFreq>:
{
 80020a4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80020a6:	f7ff ff75 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020b4:	4a02      	ldr	r2, [pc, #8]	; (80020c0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80020ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80020be:	bd08      	pop	{r3, pc}
 80020c0:	08007a84 	.word	0x08007a84

080020c4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80020c4:	2800      	cmp	r0, #0
 80020c6:	f000 8318 	beq.w	80026fa <HAL_RCC_OscConfig+0x636>
{
 80020ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020cc:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	689d      	ldr	r5, [r3, #8]
 80020d4:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020d8:	68de      	ldr	r6, [r3, #12]
 80020da:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020de:	6803      	ldr	r3, [r0, #0]
 80020e0:	f013 0f20 	tst.w	r3, #32
 80020e4:	f000 808f 	beq.w	8002206 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020e8:	b1ed      	cbz	r5, 8002126 <HAL_RCC_OscConfig+0x62>
 80020ea:	2d0c      	cmp	r5, #12
 80020ec:	d019      	beq.n	8002122 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ee:	6a23      	ldr	r3, [r4, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80bc 	beq.w	800226e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80020f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002102:	f7fe fb7b 	bl	80007fc <HAL_GetTick>
 8002106:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f013 0f02 	tst.w	r3, #2
 8002112:	d165      	bne.n	80021e0 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002114:	f7fe fb72 	bl	80007fc <HAL_GetTick>
 8002118:	1bc0      	subs	r0, r0, r7
 800211a:	2802      	cmp	r0, #2
 800211c:	d9f4      	bls.n	8002108 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800211e:	2003      	movs	r0, #3
 8002120:	e2f8      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002122:	2e01      	cmp	r6, #1
 8002124:	d1e3      	bne.n	80020ee <HAL_RCC_OscConfig+0x2a>
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f013 0f02 	tst.w	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002132:	6a23      	ldr	r3, [r4, #32]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 82e2 	beq.w	80026fe <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800213a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f013 0f08 	tst.w	r3, #8
 8002146:	d029      	beq.n	800219c <HAL_RCC_OscConfig+0xd8>
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002152:	4298      	cmp	r0, r3
 8002154:	d92a      	bls.n	80021ac <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002156:	f7ff fefb 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 800215a:	2800      	cmp	r0, #0
 800215c:	f040 82d1 	bne.w	8002702 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	f042 0208 	orr.w	r2, r2, #8
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002172:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002178:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002180:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002184:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002186:	f7ff ff8d 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 800218a:	4bbc      	ldr	r3, [pc, #752]	; (800247c <HAL_RCC_OscConfig+0x3b8>)
 800218c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800218e:	4bbc      	ldr	r3, [pc, #752]	; (8002480 <HAL_RCC_OscConfig+0x3bc>)
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	f7fe fb31 	bl	80007f8 <HAL_InitTick>
        if (status != HAL_OK)
 8002196:	2800      	cmp	r0, #0
 8002198:	d035      	beq.n	8002206 <HAL_RCC_OscConfig+0x142>
 800219a:	e2bb      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021aa:	e7d2      	b.n	8002152 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021d0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021d4:	f7ff febc 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d0d4      	beq.n	8002186 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 80021dc:	2001      	movs	r0, #1
 80021de:	e299      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f042 0208 	orr.w	r2, r2, #8
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002200:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002204:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	f013 0f01 	tst.w	r3, #1
 800220c:	d051      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800220e:	2d08      	cmp	r5, #8
 8002210:	d045      	beq.n	800229e <HAL_RCC_OscConfig+0x1da>
 8002212:	2d0c      	cmp	r5, #12
 8002214:	d041      	beq.n	800229a <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002220:	68a1      	ldr	r1, [r4, #8]
 8002222:	430b      	orrs	r3, r1
 8002224:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x232>
 800222e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002232:	d065      	beq.n	8002300 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800223e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002246:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 800224e:	f7fe fad5 	bl	80007fc <HAL_GetTick>
 8002252:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800225e:	d128      	bne.n	80022b2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe facc 	bl	80007fc <HAL_GetTick>
 8002264:	1bc0      	subs	r0, r0, r7
 8002266:	2864      	cmp	r0, #100	; 0x64
 8002268:	d9f4      	bls.n	8002254 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 800226a:	2003      	movs	r0, #3
 800226c:	e252      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800226e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800227a:	f7fe fabf 	bl	80007fc <HAL_GetTick>
 800227e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f013 0f02 	tst.w	r3, #2
 800228a:	d0bc      	beq.n	8002206 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228c:	f7fe fab6 	bl	80007fc <HAL_GetTick>
 8002290:	1bc0      	subs	r0, r0, r7
 8002292:	2802      	cmp	r0, #2
 8002294:	d9f4      	bls.n	8002280 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e23c      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800229a:	2e03      	cmp	r6, #3
 800229c:	d1bb      	bne.n	8002216 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	6863      	ldr	r3, [r4, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 822a 	beq.w	8002706 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	f013 0f02 	tst.w	r3, #2
 80022b8:	d052      	beq.n	8002360 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022ba:	2d04      	cmp	r5, #4
 80022bc:	d03d      	beq.n	800233a <HAL_RCC_OscConfig+0x276>
 80022be:	2d0c      	cmp	r5, #12
 80022c0:	d039      	beq.n	8002336 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c2:	6923      	ldr	r3, [r4, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8091 	beq.w	80023ec <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80022d6:	f7fe fa91 	bl	80007fc <HAL_GetTick>
 80022da:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022e6:	d177      	bne.n	80023d8 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7fe fa88 	bl	80007fc <HAL_GetTick>
 80022ec:	1b80      	subs	r0, r0, r6
 80022ee:	2802      	cmp	r0, #2
 80022f0:	d9f4      	bls.n	80022dc <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 80022f2:	2003      	movs	r0, #3
 80022f4:	e20e      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	e7a3      	b.n	8002248 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800230a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002312:	601a      	str	r2, [r3, #0]
}
 8002314:	e798      	b.n	8002248 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8002316:	f7fe fa71 	bl	80007fc <HAL_GetTick>
 800231a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002326:	d0c4      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fa68 	bl	80007fc <HAL_GetTick>
 800232c:	1bc0      	subs	r0, r0, r7
 800232e:	2864      	cmp	r0, #100	; 0x64
 8002330:	d9f4      	bls.n	800231c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8002332:	2003      	movs	r0, #3
 8002334:	e1ee      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002336:	2e02      	cmp	r6, #2
 8002338:	d1c3      	bne.n	80022c2 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002344:	d003      	beq.n	800234e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002346:	6923      	ldr	r3, [r4, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 81de 	beq.w	800270a <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002354:	6853      	ldr	r3, [r2, #4]
 8002356:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800235a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800235e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	f013 0f08 	tst.w	r3, #8
 8002366:	f000 808d 	beq.w	8002484 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236a:	69a3      	ldr	r3, [r4, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d06c      	beq.n	800244a <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002378:	69e1      	ldr	r1, [r4, #28]
 800237a:	f003 0210 	and.w	r2, r3, #16
 800237e:	4291      	cmp	r1, r2
 8002380:	d011      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	2a02      	cmp	r2, #2
 8002388:	f000 81c1 	beq.w	800270e <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800238c:	f013 0f01 	tst.w	r3, #1
 8002390:	d142      	bne.n	8002418 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002396:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800239a:	f023 0310 	bic.w	r3, r3, #16
 800239e:	69e1      	ldr	r1, [r4, #28]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80023a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80023b6:	f7fe fa21 	bl	80007fc <HAL_GetTick>
 80023ba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c4:	f013 0f02 	tst.w	r3, #2
 80023c8:	d15c      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe fa17 	bl	80007fc <HAL_GetTick>
 80023ce:	1b80      	subs	r0, r0, r6
 80023d0:	2811      	cmp	r0, #17
 80023d2:	d9f3      	bls.n	80023bc <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 80023d4:	2003      	movs	r0, #3
 80023d6:	e19d      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023de:	6853      	ldr	r3, [r2, #4]
 80023e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023e8:	6053      	str	r3, [r2, #4]
}
 80023ea:	e7b9      	b.n	8002360 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80023ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023f8:	f7fe fa00 	bl	80007fc <HAL_GetTick>
 80023fc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002408:	d0aa      	beq.n	8002360 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240a:	f7fe f9f7 	bl	80007fc <HAL_GetTick>
 800240e:	1b80      	subs	r0, r0, r6
 8002410:	2802      	cmp	r0, #2
 8002412:	d9f4      	bls.n	80023fe <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8002414:	2003      	movs	r0, #3
 8002416:	e17d      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002428:	f7fe f9e8 	bl	80007fc <HAL_GetTick>
 800242c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	f013 0f02 	tst.w	r3, #2
 800243a:	d0aa      	beq.n	8002392 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243c:	f7fe f9de 	bl	80007fc <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	2811      	cmp	r0, #17
 8002444:	d9f3      	bls.n	800242e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8002446:	2003      	movs	r0, #3
 8002448:	e164      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800245a:	f7fe f9cf 	bl	80007fc <HAL_GetTick>
 800245e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002468:	f013 0f02 	tst.w	r3, #2
 800246c:	d00a      	beq.n	8002484 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246e:	f7fe f9c5 	bl	80007fc <HAL_GetTick>
 8002472:	1b80      	subs	r0, r0, r6
 8002474:	2811      	cmp	r0, #17
 8002476:	d9f3      	bls.n	8002460 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 8002478:	2003      	movs	r0, #3
 800247a:	e14b      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
 800247c:	20000004 	.word	0x20000004
 8002480:	20000008 	.word	0x20000008
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	f013 0f04 	tst.w	r3, #4
 800248a:	f000 80b1 	beq.w	80025f0 <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800248e:	4ba9      	ldr	r3, [pc, #676]	; (8002734 <HAL_RCC_OscConfig+0x670>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002496:	d110      	bne.n	80024ba <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 8002498:	f7ff fc7c 	bl	8001d94 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800249c:	f7fe f9ae 	bl	80007fc <HAL_GetTick>
 80024a0:	4606      	mov	r6, r0
 80024a2:	4ba4      	ldr	r3, [pc, #656]	; (8002734 <HAL_RCC_OscConfig+0x670>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ac:	f7fe f9a6 	bl	80007fc <HAL_GetTick>
 80024b0:	1b80      	subs	r0, r0, r6
 80024b2:	2802      	cmp	r0, #2
 80024b4:	d9f5      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 80024b6:	2003      	movs	r0, #3
 80024b8:	e12c      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ba:	68e3      	ldr	r3, [r4, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d061      	beq.n	8002584 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80024c0:	2b85      	cmp	r3, #133	; 0x85
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80024d8:	f7fe f990 	bl	80007fc <HAL_GetTick>
 80024dc:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	f013 0f02 	tst.w	r3, #2
 80024fa:	d108      	bne.n	800250e <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe f97e 	bl	80007fc <HAL_GetTick>
 8002500:	1b80      	subs	r0, r0, r6
 8002502:	f241 3388 	movw	r3, #5000	; 0x1388
 8002506:	4298      	cmp	r0, r3
 8002508:	d9f1      	bls.n	80024ee <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 800250a:	2003      	movs	r0, #3
 800250c:	e102      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800250e:	68e3      	ldr	r3, [r4, #12]
 8002510:	2b81      	cmp	r3, #129	; 0x81
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002514:	2b85      	cmp	r3, #133	; 0x85
 8002516:	d11a      	bne.n	800254e <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8002518:	f7fe f970 	bl	80007fc <HAL_GetTick>
 800251c:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800251e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002522:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800253a:	d159      	bne.n	80025f0 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe f95e 	bl	80007fc <HAL_GetTick>
 8002540:	1b80      	subs	r0, r0, r6
 8002542:	f241 3388 	movw	r3, #5000	; 0x1388
 8002546:	4298      	cmp	r0, r3
 8002548:	d9f1      	bls.n	800252e <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 800254a:	2003      	movs	r0, #3
 800254c:	e0e2      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 800254e:	f7fe f955 	bl	80007fc <HAL_GetTick>
 8002552:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002558:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800255c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002570:	d03e      	beq.n	80025f0 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe f943 	bl	80007fc <HAL_GetTick>
 8002576:	1b80      	subs	r0, r0, r6
 8002578:	f241 3388 	movw	r3, #5000	; 0x1388
 800257c:	4298      	cmp	r0, r3
 800257e:	d9f1      	bls.n	8002564 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8002580:	2003      	movs	r0, #3
 8002582:	e0c7      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8002584:	f7fe f93a 	bl	80007fc <HAL_GetTick>
 8002588:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800258a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe f928 	bl	80007fc <HAL_GetTick>
 80025ac:	1b80      	subs	r0, r0, r6
 80025ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80025b2:	4298      	cmp	r0, r3
 80025b4:	d9f1      	bls.n	800259a <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 80025b6:	2003      	movs	r0, #3
 80025b8:	e0ac      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 80025ba:	f7fe f91f 	bl	80007fc <HAL_GetTick>
 80025be:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f013 0f02 	tst.w	r3, #2
 80025dc:	d008      	beq.n	80025f0 <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe f90d 	bl	80007fc <HAL_GetTick>
 80025e2:	1b80      	subs	r0, r0, r6
 80025e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80025e8:	4298      	cmp	r0, r3
 80025ea:	d9f1      	bls.n	80025d0 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 80025ec:	2003      	movs	r0, #3
 80025ee:	e091      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 808d 	beq.w	8002712 <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	2d0c      	cmp	r5, #12
 80025fa:	d062      	beq.n	80026c2 <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d01f      	beq.n	8002640 <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800260a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	f022 0203 	bic.w	r2, r2, #3
 8002612:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800261a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800261e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8002620:	f7fe f8ec 	bl	80007fc <HAL_GetTick>
 8002624:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002630:	d073      	beq.n	800271a <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe f8e3 	bl	80007fc <HAL_GetTick>
 8002636:	1b00      	subs	r0, r0, r4
 8002638:	280a      	cmp	r0, #10
 800263a:	d9f4      	bls.n	8002626 <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 800263c:	2003      	movs	r0, #3
 800263e:	e069      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800264c:	f7fe f8d6 	bl	80007fc <HAL_GetTick>
 8002650:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800265c:	d12a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002662:	68d3      	ldr	r3, [r2, #12]
 8002664:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_OscConfig+0x674>)
 8002666:	4019      	ands	r1, r3
 8002668:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800266a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800266c:	4303      	orrs	r3, r0
 800266e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002670:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002674:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002676:	4303      	orrs	r3, r0
 8002678:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800267a:	4303      	orrs	r3, r0
 800267c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800267e:	4303      	orrs	r3, r0
 8002680:	430b      	orrs	r3, r1
 8002682:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800268c:	68d3      	ldr	r3, [r2, #12]
 800268e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002692:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002694:	f7fe f8b2 	bl	80007fc <HAL_GetTick>
 8002698:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026a4:	d137      	bne.n	8002716 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe f8a9 	bl	80007fc <HAL_GetTick>
 80026aa:	1b00      	subs	r0, r0, r4
 80026ac:	280a      	cmp	r0, #10
 80026ae:	d9f4      	bls.n	800269a <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 80026b0:	2003      	movs	r0, #3
 80026b2:	e02f      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe f8a2 	bl	80007fc <HAL_GetTick>
 80026b8:	1b40      	subs	r0, r0, r5
 80026ba:	280a      	cmp	r0, #10
 80026bc:	d9c9      	bls.n	8002652 <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 80026be:	2003      	movs	r0, #3
 80026c0:	e028      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d02b      	beq.n	800271e <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80026cc:	f003 0103 	and.w	r1, r3, #3
 80026d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026d2:	4291      	cmp	r1, r2
 80026d4:	d125      	bne.n	8002722 <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80026d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026dc:	428a      	cmp	r2, r1
 80026de:	d122      	bne.n	8002726 <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80026e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026e6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80026ea:	d11e      	bne.n	800272a <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80026ec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80026f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d11b      	bne.n	800272e <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 80026f6:	2000      	movs	r0, #0
 80026f8:	e00c      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
}
 80026fc:	4770      	bx	lr
        return HAL_ERROR;
 80026fe:	2001      	movs	r0, #1
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8002702:	2001      	movs	r0, #1
 8002704:	e006      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8002706:	2001      	movs	r0, #1
 8002708:	e004      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e002      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 800270e:	2001      	movs	r0, #1
 8002710:	e000      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8002712:	2000      	movs	r0, #0
}
 8002714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002716:	2000      	movs	r0, #0
 8002718:	e7fc      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
 800271a:	2000      	movs	r0, #0
 800271c:	e7fa      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
 8002720:	e7f8      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	e7f6      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
 8002726:	2001      	movs	r0, #1
 8002728:	e7f4      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
 800272a:	2001      	movs	r0, #1
 800272c:	e7f2      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
 800272e:	2001      	movs	r0, #1
 8002730:	e7f0      	b.n	8002714 <HAL_RCC_OscConfig+0x650>
 8002732:	bf00      	nop
 8002734:	58000400 	.word	0x58000400
 8002738:	11c1808c 	.word	0x11c1808c

0800273c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800273c:	2800      	cmp	r0, #0
 800273e:	f000 8127 	beq.w	8002990 <HAL_RCC_ClockConfig+0x254>
{
 8002742:	b570      	push	{r4, r5, r6, lr}
 8002744:	460c      	mov	r4, r1
 8002746:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b93      	ldr	r3, [pc, #588]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	428b      	cmp	r3, r1
 8002752:	d32d      	bcc.n	80027b0 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	f013 0f02 	tst.w	r3, #2
 800275a:	d13f      	bne.n	80027dc <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	f013 0f20 	tst.w	r3, #32
 8002762:	d153      	bne.n	800280c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	f013 0f40 	tst.w	r3, #64	; 0x40
 800276a:	d16a      	bne.n	8002842 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	f013 0f04 	tst.w	r3, #4
 8002772:	f040 8083 	bne.w	800287c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	f013 0f08 	tst.w	r3, #8
 800277c:	f040 8097 	bne.w	80028ae <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	f013 0f01 	tst.w	r3, #1
 8002786:	f000 80de 	beq.w	8002946 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	686b      	ldr	r3, [r5, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	f000 80a8 	beq.w	80028e2 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	2b03      	cmp	r3, #3
 8002794:	f000 80ad 	beq.w	80028f2 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 80b2 	bne.w	8002902 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800279e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	f012 0f02 	tst.w	r2, #2
 80027a8:	f040 80b1 	bne.w	800290e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
 80027ae:	e0ee      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b0:	4a79      	ldr	r2, [pc, #484]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 80027b2:	6813      	ldr	r3, [r2, #0]
 80027b4:	f023 0307 	bic.w	r3, r3, #7
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80027bc:	f7fe f81e 	bl	80007fc <HAL_GetTick>
 80027c0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b75      	ldr	r3, [pc, #468]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	42a3      	cmp	r3, r4
 80027cc:	d0c2      	beq.n	8002754 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027ce:	f7fe f815 	bl	80007fc <HAL_GetTick>
 80027d2:	1b80      	subs	r0, r0, r6
 80027d4:	2802      	cmp	r0, #2
 80027d6:	d9f4      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80027d8:	2003      	movs	r0, #3
 80027da:	e0d8      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80027de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e2:	688a      	ldr	r2, [r1, #8]
 80027e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80027ec:	f7fe f806 	bl	80007fc <HAL_GetTick>
 80027f0:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027fc:	d1ae      	bne.n	800275c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027fe:	f7fd fffd 	bl	80007fc <HAL_GetTick>
 8002802:	1b80      	subs	r0, r0, r6
 8002804:	2802      	cmp	r0, #2
 8002806:	d9f4      	bls.n	80027f2 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8002808:	2003      	movs	r0, #3
 800280a:	e0c0      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800280c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800280e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002812:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8002816:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002820:	f7fd ffec 	bl	80007fc <HAL_GetTick>
 8002824:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800282e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002832:	d197      	bne.n	8002764 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002834:	f7fd ffe2 	bl	80007fc <HAL_GetTick>
 8002838:	1b80      	subs	r0, r0, r6
 800283a:	2802      	cmp	r0, #2
 800283c:	d9f3      	bls.n	8002826 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800283e:	2003      	movs	r0, #3
 8002840:	e0a5      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002842:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002848:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800284c:	f023 030f 	bic.w	r3, r3, #15
 8002850:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8002854:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002858:	f7fd ffd0 	bl	80007fc <HAL_GetTick>
 800285c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002866:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800286a:	f47f af7f 	bne.w	800276c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800286e:	f7fd ffc5 	bl	80007fc <HAL_GetTick>
 8002872:	1b80      	subs	r0, r0, r6
 8002874:	2802      	cmp	r0, #2
 8002876:	d9f2      	bls.n	800285e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8002878:	2003      	movs	r0, #3
 800287a:	e088      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002882:	688a      	ldr	r2, [r1, #8]
 8002884:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800288c:	f7fd ffb6 	bl	80007fc <HAL_GetTick>
 8002890:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800289c:	f47f af6b 	bne.w	8002776 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028a0:	f7fd ffac 	bl	80007fc <HAL_GetTick>
 80028a4:	1b80      	subs	r0, r0, r6
 80028a6:	2802      	cmp	r0, #2
 80028a8:	d9f3      	bls.n	8002892 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80028aa:	2003      	movs	r0, #3
 80028ac:	e06f      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028ae:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b4:	6893      	ldr	r3, [r2, #8]
 80028b6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80028ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028be:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80028c0:	f7fd ff9c 	bl	80007fc <HAL_GetTick>
 80028c4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80028d0:	f47f af56 	bne.w	8002780 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d4:	f7fd ff92 	bl	80007fc <HAL_GetTick>
 80028d8:	1b80      	subs	r0, r0, r6
 80028da:	2802      	cmp	r0, #2
 80028dc:	d9f3      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80028de:	2003      	movs	r0, #3
 80028e0:	e055      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80028ec:	d10f      	bne.n	800290e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
 80028f0:	e04d      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80028f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
 8002900:	e045      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800290c:	d042      	beq.n	8002994 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800290e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002912:	688a      	ldr	r2, [r1, #8]
 8002914:	f022 0203 	bic.w	r2, r2, #3
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800291c:	f7fd ff6e 	bl	80007fc <HAL_GetTick>
 8002920:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292c:	686a      	ldr	r2, [r5, #4]
 800292e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7fd ff62 	bl	80007fc <HAL_GetTick>
 8002938:	1b80      	subs	r0, r0, r6
 800293a:	f241 3388 	movw	r3, #5000	; 0x1388
 800293e:	4298      	cmp	r0, r3
 8002940:	d9ef      	bls.n	8002922 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8002942:	2003      	movs	r0, #3
 8002944:	e023      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	42a3      	cmp	r3, r4
 8002950:	d915      	bls.n	800297e <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	4323      	orrs	r3, r4
 800295c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800295e:	f7fd ff4d 	bl	80007fc <HAL_GetTick>
 8002962:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	42a3      	cmp	r3, r4
 800296e:	d006      	beq.n	800297e <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002970:	f7fd ff44 	bl	80007fc <HAL_GetTick>
 8002974:	1b40      	subs	r0, r0, r5
 8002976:	2802      	cmp	r0, #2
 8002978:	d9f4      	bls.n	8002964 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800297a:	2003      	movs	r0, #3
 800297c:	e007      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800297e:	f7ff fb91 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002984:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_ClockConfig+0x264>)
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	f7fd ff35 	bl	80007f8 <HAL_InitTick>
}
 800298e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002990:	2001      	movs	r0, #1
}
 8002992:	4770      	bx	lr
        return HAL_ERROR;
 8002994:	2001      	movs	r0, #1
 8002996:	e7fa      	b.n	800298e <HAL_RCC_ClockConfig+0x252>
 8002998:	58004000 	.word	0x58004000
 800299c:	20000004 	.word	0x20000004
 80029a0:	20000008 	.word	0x20000008

080029a4 <HAL_RCC_GetPCLK1Freq>:
{
 80029a4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029a6:	f7ff fb7d 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029b4:	4a02      	ldr	r2, [pc, #8]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80029ba:	40d8      	lsrs	r0, r3
 80029bc:	bd08      	pop	{r3, pc}
 80029be:	bf00      	nop
 80029c0:	08007ac4 	.word	0x08007ac4

080029c4 <HAL_RCC_GetPCLK2Freq>:
{
 80029c4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029c6:	f7ff fb6d 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80029d4:	4a02      	ldr	r2, [pc, #8]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80029da:	40d8      	lsrs	r0, r3
 80029dc:	bd08      	pop	{r3, pc}
 80029de:	bf00      	nop
 80029e0:	08007ac4 	.word	0x08007ac4

080029e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029e8:	6803      	ldr	r3, [r0, #0]
 80029ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80029ee:	f040 80d6 	bne.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80029f2:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	f013 0f01 	tst.w	r3, #1
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fc:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80029fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a06:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8002a0a:	b292      	uxth	r2, r2
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	f013 0f02 	tst.w	r3, #2
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1a:	68a2      	ldr	r2, [r4, #8]
 8002a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a20:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a24:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	f013 0f20 	tst.w	r3, #32
 8002a36:	d009      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a38:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a54:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a5e:	0c02      	lsrs	r2, r0, #16
 8002a60:	0412      	lsls	r2, r2, #16
 8002a62:	ea23 0302 	bic.w	r3, r3, r2
 8002a66:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a7c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a80:	0c02      	lsrs	r2, r0, #16
 8002a82:	0412      	lsls	r2, r2, #16
 8002a84:	ea23 0302 	bic.w	r3, r3, r2
 8002a88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002aa2:	0c02      	lsrs	r2, r0, #16
 8002aa4:	0412      	lsls	r2, r2, #16
 8002aa6:	ea23 0302 	bic.w	r3, r3, r2
 8002aaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ab8:	d00f      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aba:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002abc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002ac0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002ac4:	0919      	lsrs	r1, r3, #4
 8002ac6:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002aca:	ea22 0201 	bic.w	r2, r2, r1
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ae0:	d00f      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae2:	69a3      	ldr	r3, [r4, #24]
 8002ae4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002ae8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002aec:	0919      	lsrs	r1, r3, #4
 8002aee:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002af2:	ea22 0201 	bic.w	r2, r2, r1
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b08:	d00f      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0a:	69e3      	ldr	r3, [r4, #28]
 8002b0c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002b10:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002b14:	0919      	lsrs	r1, r3, #4
 8002b16:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8002b1a:	ea22 0201 	bic.w	r2, r2, r1
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	f013 0f10 	tst.w	r3, #16
 8002b30:	d00d      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b32:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b46:	68e3      	ldr	r3, [r4, #12]
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4c:	d07f      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002b54:	d00f      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b60:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b6c:	b91b      	cbnz	r3, 8002b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002b6e:	68cb      	ldr	r3, [r1, #12]
 8002b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b74:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002b7c:	d00d      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b98:	d05e      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8002b9e:	f7ff f8f9 	bl	8001d94 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8002ba2:	f7fd fe2b 	bl	80007fc <HAL_GetTick>
 8002ba6:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb2:	f7fd fe23 	bl	80007fc <HAL_GetTick>
 8002bb6:	1b40      	subs	r0, r0, r5
 8002bb8:	2802      	cmp	r0, #2
 8002bba:	d9f5      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8002bbc:	2503      	movs	r5, #3
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002bc0:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	f47f af16 	bne.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002bd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d024      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002be2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002be6:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002bea:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002bee:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002bf2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8002bf6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002bfa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002c02:	f012 0f02 	tst.w	r2, #2
 8002c06:	d10f      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8002c08:	2d00      	cmp	r5, #0
 8002c0a:	f47f aef3 	bne.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c22:	e6e7      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8002c24:	2200      	movs	r2, #0
 8002c26:	e7ec      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8002c28:	f7fd fde8 	bl	80007fc <HAL_GetTick>
 8002c2c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f013 0f02 	tst.w	r3, #2
 8002c3a:	d1e5      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fd fdde 	bl	80007fc <HAL_GetTick>
 8002c40:	1b80      	subs	r0, r0, r6
 8002c42:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c46:	4298      	cmp	r0, r3
 8002c48:	d9f1      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8002c4a:	2503      	movs	r5, #3
 8002c4c:	e7dc      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002c4e:	68cb      	ldr	r3, [r1, #12]
 8002c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c54:	60cb      	str	r3, [r1, #12]
 8002c56:	e77a      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c58:	68cb      	ldr	r3, [r1, #12]
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	60cb      	str	r3, [r1, #12]
 8002c60:	e79b      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c62:	bf00      	nop
 8002c64:	58000400 	.word	0x58000400

08002c68 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c68:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d036      	beq.n	8002cde <HAL_RTC_DeactivateAlarm+0x76>
 8002c70:	2301      	movs	r3, #1
 8002c72:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8002c7e:	22ca      	movs	r2, #202	; 0xca
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
 8002c82:	2253      	movs	r2, #83	; 0x53
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002c86:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002c8a:	d019      	beq.n	8002cc0 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8002c94:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8002c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8002c9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002ca0:	f022 0202 	bic.w	r2, r2, #2
 8002ca4:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002cc6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8002cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8002cd0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cdc:	e7e5      	b.n	8002caa <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8002cde:	2002      	movs	r0, #2
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40002800 	.word	0x40002800

08002ce8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8002cee:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8002cf0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002cf2:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8002cf4:	f015 0f01 	tst.w	r5, #1
 8002cf8:	d106      	bne.n	8002d08 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8002cfa:	f015 0f02 	tst.w	r5, #2
 8002cfe:	d109      	bne.n	8002d14 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8002d0e:	f7fd feb7 	bl	8000a80 <HAL_RTC_AlarmAEventCallback>
 8002d12:	e7f2      	b.n	8002cfa <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8002d16:	2202      	movs	r2, #2
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f000 f9e4 	bl	80030e8 <HAL_RTCEx_AlarmBEventCallback>
 8002d20:	e7ee      	b.n	8002d00 <HAL_RTC_AlarmIRQHandler+0x18>
 8002d22:	bf00      	nop
 8002d24:	40002800 	.word	0x40002800

08002d28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d28:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <HAL_RTC_WaitForSynchro+0x30>)
 8002d2c:	68d3      	ldr	r3, [r2, #12]
 8002d2e:	f023 0320 	bic.w	r3, r3, #32
 8002d32:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002d34:	f7fd fd62 	bl	80007fc <HAL_GetTick>
 8002d38:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RTC_WaitForSynchro+0x30>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f013 0f20 	tst.w	r3, #32
 8002d42:	d107      	bne.n	8002d54 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d44:	f7fd fd5a 	bl	80007fc <HAL_GetTick>
 8002d48:	1b00      	subs	r0, r0, r4
 8002d4a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d4e:	d9f4      	bls.n	8002d3a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8002d50:	2003      	movs	r0, #3
 8002d52:	e000      	b.n	8002d56 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002d54:	2000      	movs	r0, #0
}
 8002d56:	bd10      	pop	{r4, pc}
 8002d58:	40002800 	.word	0x40002800

08002d5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <RTC_EnterInitMode+0x48>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d66:	d002      	beq.n	8002d6e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002d68:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
 8002d6e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002d70:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <RTC_EnterInitMode+0x48>)
 8002d72:	68d3      	ldr	r3, [r2, #12]
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8002d7a:	f7fd fd3f 	bl	80007fc <HAL_GetTick>
 8002d7e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002d80:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <RTC_EnterInitMode+0x48>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d8a:	d1ee      	bne.n	8002d6a <RTC_EnterInitMode+0xe>
 8002d8c:	2c03      	cmp	r4, #3
 8002d8e:	d0ec      	beq.n	8002d6a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002d90:	f7fd fd34 	bl	80007fc <HAL_GetTick>
 8002d94:	1b43      	subs	r3, r0, r5
 8002d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9a:	d9f2      	bls.n	8002d82 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d9c:	2403      	movs	r4, #3
 8002d9e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8002da2:	e7ee      	b.n	8002d82 <RTC_EnterInitMode+0x26>
 8002da4:	40002800 	.word	0x40002800

08002da8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002da8:	b510      	push	{r4, lr}
 8002daa:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <RTC_ExitInitMode+0x48>)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f013 0f20 	tst.w	r3, #32
 8002dbc:	d106      	bne.n	8002dcc <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dbe:	f7ff ffb3 	bl	8002d28 <HAL_RTC_WaitForSynchro>
 8002dc2:	b198      	cbz	r0, 8002dec <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8002dca:	e00f      	b.n	8002dec <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <RTC_ExitInitMode+0x48>)
 8002dce:	6993      	ldr	r3, [r2, #24]
 8002dd0:	f023 0320 	bic.w	r3, r3, #32
 8002dd4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dd6:	f7ff ffa7 	bl	8002d28 <HAL_RTC_WaitForSynchro>
 8002dda:	b110      	cbz	r0, 8002de2 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002de2:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <RTC_ExitInitMode+0x48>)
 8002de4:	6993      	ldr	r3, [r2, #24]
 8002de6:	f043 0320 	orr.w	r3, r3, #32
 8002dea:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8002dec:	bd10      	pop	{r4, pc}
 8002dee:	bf00      	nop
 8002df0:	40002800 	.word	0x40002800

08002df4 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d04a      	beq.n	8002e8e <HAL_RTC_Init+0x9a>
{
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002dfc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002e00:	b19b      	cbz	r3, 8002e2a <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RTC_Init+0xa0>)
 8002e0a:	22ca      	movs	r2, #202	; 0xca
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e0e:	2253      	movs	r2, #83	; 0x53
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7ff ffa2 	bl	8002d5c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8002e18:	b160      	cbz	r0, 8002e34 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_RTC_Init+0xa0>)
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002e20:	b910      	cbnz	r0, 8002e28 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8002e28:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8002e2a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8002e2e:	f7fd fbd7 	bl	80005e0 <HAL_RTC_MspInit>
 8002e32:	e7e6      	b.n	8002e02 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RTC_Init+0xa0>)
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e40:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002e42:	6999      	ldr	r1, [r3, #24]
 8002e44:	6862      	ldr	r2, [r4, #4]
 8002e46:	6920      	ldr	r0, [r4, #16]
 8002e48:	4302      	orrs	r2, r0
 8002e4a:	69a0      	ldr	r0, [r4, #24]
 8002e4c:	4302      	orrs	r2, r0
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002e52:	68e2      	ldr	r2, [r4, #12]
 8002e54:	68a1      	ldr	r1, [r4, #8]
 8002e56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e5a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002e62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e66:	4301      	orrs	r1, r0
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff ff9b 	bl	8002da8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d1d1      	bne.n	8002e1a <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8002e76:	4907      	ldr	r1, [pc, #28]	; (8002e94 <HAL_RTC_Init+0xa0>)
 8002e78:	698b      	ldr	r3, [r1, #24]
 8002e7a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002e7e:	6a22      	ldr	r2, [r4, #32]
 8002e80:	69e5      	ldr	r5, [r4, #28]
 8002e82:	432a      	orrs	r2, r5
 8002e84:	6965      	ldr	r5, [r4, #20]
 8002e86:	432a      	orrs	r2, r5
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	618b      	str	r3, [r1, #24]
 8002e8c:	e7c5      	b.n	8002e1a <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e8e:	2001      	movs	r0, #1
}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40002800 	.word	0x40002800

08002e98 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002e98:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8002e9a:	2809      	cmp	r0, #9
 8002e9c:	d903      	bls.n	8002ea6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8002e9e:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8002ea0:	380a      	subs	r0, #10
 8002ea2:	b2c0      	uxtb	r0, r0
 8002ea4:	e7f9      	b.n	8002e9a <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	b2db      	uxtb	r3, r3
}
 8002eaa:	4318      	orrs	r0, r3
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8002eb0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f000 80b0 	beq.w	800301a <HAL_RTC_SetAlarm_IT+0x16a>
{
 8002eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8002ece:	4b54      	ldr	r3, [pc, #336]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002ed0:	68de      	ldr	r6, [r3, #12]
 8002ed2:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8002ed6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8002eda:	d043      	beq.n	8002f64 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8002edc:	bb12      	cbnz	r2, 8002f24 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ee4:	d101      	bne.n	8002eea <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8002eea:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002eee:	7820      	ldrb	r0, [r4, #0]
 8002ef0:	f7ff ffd2 	bl	8002e98 <RTC_ByteToBcd2>
 8002ef4:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ef6:	7860      	ldrb	r0, [r4, #1]
 8002ef8:	f7ff ffce 	bl	8002e98 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002efc:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f00:	78a0      	ldrb	r0, [r4, #2]
 8002f02:	f7ff ffc9 	bl	8002e98 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f06:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f08:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f0a:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f0e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8002f12:	f7ff ffc1 	bl	8002e98 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f16:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002f1a:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f1c:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f1e:	ea48 0000 	orr.w	r0, r8, r0
 8002f22:	e020      	b.n	8002f66 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8002f24:	6948      	ldr	r0, [r1, #20]
 8002f26:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8002f2a:	d009      	beq.n	8002f40 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8002f2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8002f30:	d006      	beq.n	8002f40 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f3a:	d101      	bne.n	8002f40 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f40:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f42:	7863      	ldrb	r3, [r4, #1]
 8002f44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f4a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f4c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f4e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f50:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f54:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002f5c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f5e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f60:	4318      	orrs	r0, r3
 8002f62:	e000      	b.n	8002f66 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8002f64:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002f68:	22ca      	movs	r2, #202	; 0xca
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f6c:	2253      	movs	r2, #83	; 0x53
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d02a      	beq.n	8002fce <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8002f80:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8002f82:	2202      	movs	r2, #2
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8002f86:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8002f8a:	d040      	beq.n	800300e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002f8e:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8002f90:	69a2      	ldr	r2, [r4, #24]
 8002f92:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8002f94:	6862      	ldr	r2, [r4, #4]
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002f98:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8002f9a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002f9c:	f042 0202 	orr.w	r2, r2, #2
 8002fa0:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8002fa8:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_RTC_SetAlarm_IT+0x174>)
 8002fac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002fba:	22ff      	movs	r2, #255	; 0xff
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8002fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002fd6:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8002fdc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8002fe0:	d00f      	beq.n	8003002 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002fe4:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8002fe6:	69a2      	ldr	r2, [r4, #24]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8002fea:	6862      	ldr	r2, [r4, #4]
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8002fee:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8002ff0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8002ffe:	619a      	str	r2, [r3, #24]
 8003000:	e7d3      	b.n	8002faa <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003002:	69a3      	ldr	r3, [r4, #24]
 8003004:	69e2      	ldr	r2, [r4, #28]
 8003006:	4313      	orrs	r3, r2
 8003008:	4a05      	ldr	r2, [pc, #20]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 800300a:	6453      	str	r3, [r2, #68]	; 0x44
 800300c:	e7ed      	b.n	8002fea <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800300e:	69a3      	ldr	r3, [r4, #24]
 8003010:	69e2      	ldr	r2, [r4, #28]
 8003012:	4313      	orrs	r3, r2
 8003014:	4a02      	ldr	r2, [pc, #8]	; (8003020 <HAL_RTC_SetAlarm_IT+0x170>)
 8003016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003018:	e7bc      	b.n	8002f94 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800301a:	2002      	movs	r0, #2
}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40002800 	.word	0x40002800
 8003024:	58000800 	.word	0x58000800

08003028 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003028:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d017      	beq.n	8003060 <HAL_RTCEx_EnableBypassShadow+0x38>
 8003030:	2101      	movs	r1, #1
 8003032:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800303e:	22ca      	movs	r2, #202	; 0xca
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
 8003042:	2253      	movs	r2, #83	; 0x53
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	f042 0220 	orr.w	r2, r2, #32
 800304c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003052:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003056:	2300      	movs	r3, #0
 8003058:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800305c:	4618      	mov	r0, r3
 800305e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003060:	2002      	movs	r0, #2
}
 8003062:	4770      	bx	lr
 8003064:	40002800 	.word	0x40002800

08003068 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003068:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d020      	beq.n	80030b2 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8003070:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8003072:	2101      	movs	r1, #1
 8003074:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003078:	2302      	movs	r3, #2
 800307a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8003080:	22ca      	movs	r2, #202	; 0xca
 8003082:	625a      	str	r2, [r3, #36]	; 0x24
 8003084:	2253      	movs	r2, #83	; 0x53
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800308e:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8003090:	4c0a      	ldr	r4, [pc, #40]	; (80030bc <HAL_RTCEx_SetSSRU_IT+0x54>)
 8003092:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003096:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800309a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800309e:	22ff      	movs	r2, #255	; 0xff
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80030a2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030a6:	2300      	movs	r3, #0
 80030a8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80030ac:	4618      	mov	r0, r3
}
 80030ae:	bc10      	pop	{r4}
 80030b0:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80030b2:	2002      	movs	r0, #2
}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40002800 	.word	0x40002800
 80030bc:	58000800 	.word	0x58000800

080030c0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030cc:	d103      	bne.n	80030d6 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80030d4:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80030d6:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80030d8:	2240      	movs	r2, #64	; 0x40
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80030dc:	f7fd fcd4 	bl	8000a88 <HAL_RTCEx_SSRUEventCallback>
 80030e0:	e7f5      	b.n	80030ce <HAL_RTCEx_SSRUIRQHandler+0xe>
 80030e2:	bf00      	nop
 80030e4:	40002800 	.word	0x40002800

080030e8 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80030e8:	4770      	bx	lr

080030ea <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80030ea:	0089      	lsls	r1, r1, #2
 80030ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80030f0:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80030f4:	600a      	str	r2, [r1, #0]
}
 80030f6:	4770      	bx	lr

080030f8 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80030f8:	0089      	lsls	r1, r1, #2
 80030fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80030fe:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003102:	6808      	ldr	r0, [r1, #0]
}
 8003104:	4770      	bx	lr
	...

08003108 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <SUBGHZSPI_Init+0x20>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003110:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003112:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8003116:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003118:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800311c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	4770      	bx	lr
 8003128:	58010000 	.word	0x58010000

0800312c <HAL_SUBGHZ_Init>:
{
 800312c:	b530      	push	{r4, r5, lr}
 800312e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8003130:	2800      	cmp	r0, #0
 8003132:	d04e      	beq.n	80031d2 <HAL_SUBGHZ_Init+0xa6>
 8003134:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003136:	7983      	ldrb	r3, [r0, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d03b      	beq.n	80031b4 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800313c:	2302      	movs	r3, #2
 800313e:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003144:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800314c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_SUBGHZ_Init+0xac>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003158:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800315c:	2264      	movs	r2, #100	; 0x64
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003164:	9b01      	ldr	r3, [sp, #4]
 8003166:	b34b      	cbz	r3, 80031bc <HAL_SUBGHZ_Init+0x90>
    count--;
 8003168:	9b01      	ldr	r3, [sp, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800317a:	d1f3      	bne.n	8003164 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 800317c:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_SUBGHZ_Init+0xb0>)
 8003180:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800318c:	4914      	ldr	r1, [pc, #80]	; (80031e0 <HAL_SUBGHZ_Init+0xb4>)
 800318e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003196:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a0:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80031a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a6:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80031a8:	b15d      	cbz	r5, 80031c2 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80031aa:	2301      	movs	r3, #1
 80031ac:	71a3      	strb	r3, [r4, #6]
}
 80031ae:	4628      	mov	r0, r5
 80031b0:	b003      	add	sp, #12
 80031b2:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80031b4:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80031b6:	f7fd fab3 	bl	8000720 <HAL_SUBGHZ_MspInit>
 80031ba:	e7bf      	b.n	800313c <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80031bc:	2501      	movs	r5, #1
 80031be:	60a5      	str	r5, [r4, #8]
      break;
 80031c0:	e7dd      	b.n	800317e <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	f7ff ffa0 	bl	8003108 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60a3      	str	r3, [r4, #8]
 80031d0:	e7eb      	b.n	80031aa <HAL_SUBGHZ_Init+0x7e>
    return status;
 80031d2:	2501      	movs	r5, #1
 80031d4:	e7eb      	b.n	80031ae <HAL_SUBGHZ_Init+0x82>
 80031d6:	bf00      	nop
 80031d8:	20000004 	.word	0x20000004
 80031dc:	58000400 	.word	0x58000400
 80031e0:	58000800 	.word	0x58000800

080031e4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80031e4:	b082      	sub	sp, #8
 80031e6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <SUBGHZSPI_Transmit+0x70>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80031f0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	fb00 f303 	mul.w	r3, r0, r3
 80031fa:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80031fc:	9b01      	ldr	r3, [sp, #4]
 80031fe:	b14b      	cbz	r3, 8003214 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003200:	9b01      	ldr	r3, [sp, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <SUBGHZSPI_Transmit+0x74>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f013 0f02 	tst.w	r3, #2
 800320e:	d0f5      	beq.n	80031fc <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2000      	movs	r0, #0
 8003212:	e001      	b.n	8003218 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003214:	2001      	movs	r0, #1
 8003216:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <SUBGHZSPI_Transmit+0x78>)
 800321a:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <SUBGHZSPI_Transmit+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003224:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003228:	2164      	movs	r1, #100	; 0x64
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003230:	9b01      	ldr	r3, [sp, #4]
 8003232:	b143      	cbz	r3, 8003246 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003234:	9b01      	ldr	r3, [sp, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <SUBGHZSPI_Transmit+0x74>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f013 0f01 	tst.w	r3, #1
 8003242:	d0f5      	beq.n	8003230 <SUBGHZSPI_Transmit+0x4c>
 8003244:	e001      	b.n	800324a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003246:	2001      	movs	r0, #1
 8003248:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <SUBGHZSPI_Transmit+0x74>)
 800324c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800324e:	b002      	add	sp, #8
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000004 	.word	0x20000004
 8003258:	58010000 	.word	0x58010000
 800325c:	5801000c 	.word	0x5801000c

08003260 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003260:	b410      	push	{r4}
 8003262:	b083      	sub	sp, #12
 8003264:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <SUBGHZSPI_Receive+0x78>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800326e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003272:	2064      	movs	r0, #100	; 0x64
 8003274:	fb00 f303 	mul.w	r3, r0, r3
 8003278:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800327a:	9b01      	ldr	r3, [sp, #4]
 800327c:	b14b      	cbz	r3, 8003292 <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800327e:	9b01      	ldr	r3, [sp, #4]
 8003280:	3b01      	subs	r3, #1
 8003282:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <SUBGHZSPI_Receive+0x7c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f013 0f02 	tst.w	r3, #2
 800328c:	d0f5      	beq.n	800327a <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2000      	movs	r0, #0
 8003290:	e001      	b.n	8003296 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003292:	2001      	movs	r0, #1
 8003294:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <SUBGHZSPI_Receive+0x80>)
 8003298:	24ff      	movs	r4, #255	; 0xff
 800329a:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <SUBGHZSPI_Receive+0x78>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80032a4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80032a8:	2464      	movs	r4, #100	; 0x64
 80032aa:	fb04 f303 	mul.w	r3, r4, r3
 80032ae:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80032b0:	9b01      	ldr	r3, [sp, #4]
 80032b2:	b143      	cbz	r3, 80032c6 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80032b4:	9b01      	ldr	r3, [sp, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <SUBGHZSPI_Receive+0x7c>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f013 0f01 	tst.w	r3, #1
 80032c2:	d0f5      	beq.n	80032b0 <SUBGHZSPI_Receive+0x50>
 80032c4:	e001      	b.n	80032ca <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80032c6:	2001      	movs	r0, #1
 80032c8:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <SUBGHZSPI_Receive+0x7c>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	700b      	strb	r3, [r1, #0]

  return status;
}
 80032d0:	b003      	add	sp, #12
 80032d2:	bc10      	pop	{r4}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000004 	.word	0x20000004
 80032dc:	58010000 	.word	0x58010000
 80032e0:	5801000c 	.word	0x5801000c

080032e4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80032e4:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <SUBGHZ_WaitOnBusy+0x50>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80032ee:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80032f2:	2264      	movs	r2, #100	; 0x64
 80032f4:	fb02 f303 	mul.w	r3, r2, r3
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	e006      	b.n	800330a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8003300:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8003302:	b002      	add	sp, #8
 8003304:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003306:	4213      	tst	r3, r2
 8003308:	d012      	beq.n	8003330 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800330a:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <SUBGHZ_WaitOnBusy+0x54>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f013 0304 	ands.w	r3, r3, #4
 8003312:	d000      	beq.n	8003316 <SUBGHZ_WaitOnBusy+0x32>
 8003314:	2301      	movs	r3, #1
    if (count == 0U)
 8003316:	9a01      	ldr	r2, [sp, #4]
 8003318:	2a00      	cmp	r2, #0
 800331a:	d0ef      	beq.n	80032fc <SUBGHZ_WaitOnBusy+0x18>
    count--;
 800331c:	9a01      	ldr	r2, [sp, #4]
 800331e:	3a01      	subs	r2, #1
 8003320:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <SUBGHZ_WaitOnBusy+0x54>)
 8003324:	6952      	ldr	r2, [r2, #20]
 8003326:	f012 0202 	ands.w	r2, r2, #2
 800332a:	d0ec      	beq.n	8003306 <SUBGHZ_WaitOnBusy+0x22>
 800332c:	2201      	movs	r2, #1
 800332e:	e7ea      	b.n	8003306 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8003330:	2000      	movs	r0, #0
 8003332:	e7e6      	b.n	8003302 <SUBGHZ_WaitOnBusy+0x1e>
 8003334:	20000004 	.word	0x20000004
 8003338:	58000400 	.word	0x58000400

0800333c <SUBGHZ_CheckDeviceReady>:
{
 800333c:	b500      	push	{lr}
 800333e:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003340:	7903      	ldrb	r3, [r0, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d004      	beq.n	8003350 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003346:	f7ff ffcd 	bl	80032e4 <SUBGHZ_WaitOnBusy>
}
 800334a:	b003      	add	sp, #12
 800334c:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <SUBGHZ_CheckDeviceReady+0x4c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003358:	f3c3 334f 	ubfx	r3, r3, #13, #16
 800335c:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <SUBGHZ_CheckDeviceReady+0x50>)
 8003360:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 800336c:	9b01      	ldr	r3, [sp, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8003372:	9b01      	ldr	r3, [sp, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f9      	bne.n	800336c <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003378:	4a04      	ldr	r2, [pc, #16]	; (800338c <SUBGHZ_CheckDeviceReady+0x50>)
 800337a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800337e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003386:	e7de      	b.n	8003346 <SUBGHZ_CheckDeviceReady+0xa>
 8003388:	20000004 	.word	0x20000004
 800338c:	58000400 	.word	0x58000400

08003390 <HAL_SUBGHZ_WriteRegisters>:
{
 8003390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003394:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003396:	7980      	ldrb	r0, [r0, #6]
 8003398:	fa5f f880 	uxtb.w	r8, r0
 800339c:	f1b8 0f01 	cmp.w	r8, #1
 80033a0:	d13e      	bne.n	8003420 <HAL_SUBGHZ_WriteRegisters+0x90>
 80033a2:	460c      	mov	r4, r1
 80033a4:	4617      	mov	r7, r2
 80033a6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80033a8:	796b      	ldrb	r3, [r5, #5]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d03b      	beq.n	8003426 <HAL_SUBGHZ_WriteRegisters+0x96>
 80033ae:	2301      	movs	r3, #1
 80033b0:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80033b6:	4628      	mov	r0, r5
 80033b8:	f7ff ffc0 	bl	800333c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80033bc:	4a1b      	ldr	r2, [pc, #108]	; (800342c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80033be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80033ca:	210d      	movs	r1, #13
 80033cc:	4628      	mov	r0, r5
 80033ce:	f7ff ff09 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80033d2:	0a21      	lsrs	r1, r4, #8
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7ff ff05 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80033da:	b2e1      	uxtb	r1, r4
 80033dc:	4628      	mov	r0, r5
 80033de:	f7ff ff01 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80033e2:	2400      	movs	r4, #0
 80033e4:	e005      	b.n	80033f2 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80033e6:	5d39      	ldrb	r1, [r7, r4]
 80033e8:	4628      	mov	r0, r5
 80033ea:	f7ff fefb 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80033ee:	3401      	adds	r4, #1
 80033f0:	b2a4      	uxth	r4, r4
 80033f2:	42b4      	cmp	r4, r6
 80033f4:	d3f7      	bcc.n	80033e6 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80033f6:	4a0d      	ldr	r2, [pc, #52]	; (800342c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80033f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003404:	4628      	mov	r0, r5
 8003406:	f7ff ff6d 	bl	80032e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800340a:	68ab      	ldr	r3, [r5, #8]
 800340c:	b90b      	cbnz	r3, 8003412 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800340e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003412:	2301      	movs	r3, #1
 8003414:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003416:	2300      	movs	r3, #0
 8003418:	716b      	strb	r3, [r5, #5]
}
 800341a:	4640      	mov	r0, r8
 800341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003420:	f04f 0802 	mov.w	r8, #2
 8003424:	e7f9      	b.n	800341a <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8003426:	f04f 0802 	mov.w	r8, #2
 800342a:	e7f6      	b.n	800341a <HAL_SUBGHZ_WriteRegisters+0x8a>
 800342c:	58000400 	.word	0x58000400

08003430 <HAL_SUBGHZ_ReadRegisters>:
{
 8003430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003434:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003436:	7980      	ldrb	r0, [r0, #6]
 8003438:	fa5f f880 	uxtb.w	r8, r0
 800343c:	f1b8 0f01 	cmp.w	r8, #1
 8003440:	d141      	bne.n	80034c6 <HAL_SUBGHZ_ReadRegisters+0x96>
 8003442:	460c      	mov	r4, r1
 8003444:	4615      	mov	r5, r2
 8003446:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003448:	7973      	ldrb	r3, [r6, #5]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d03e      	beq.n	80034cc <HAL_SUBGHZ_ReadRegisters+0x9c>
 800344e:	2301      	movs	r3, #1
 8003450:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003452:	4630      	mov	r0, r6
 8003454:	f7ff ff72 	bl	800333c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800345a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800345e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003466:	211d      	movs	r1, #29
 8003468:	4630      	mov	r0, r6
 800346a:	f7ff febb 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800346e:	0a21      	lsrs	r1, r4, #8
 8003470:	4630      	mov	r0, r6
 8003472:	f7ff feb7 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003476:	b2e1      	uxtb	r1, r4
 8003478:	4630      	mov	r0, r6
 800347a:	f7ff feb3 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800347e:	2100      	movs	r1, #0
 8003480:	4630      	mov	r0, r6
 8003482:	f7ff feaf 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003486:	2400      	movs	r4, #0
 8003488:	e006      	b.n	8003498 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800348a:	4629      	mov	r1, r5
 800348c:	4630      	mov	r0, r6
 800348e:	f7ff fee7 	bl	8003260 <SUBGHZSPI_Receive>
      pData++;
 8003492:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003494:	3401      	adds	r4, #1
 8003496:	b2a4      	uxth	r4, r4
 8003498:	42bc      	cmp	r4, r7
 800349a:	d3f6      	bcc.n	800348a <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800349e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80034aa:	4630      	mov	r0, r6
 80034ac:	f7ff ff1a 	bl	80032e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80034b0:	68b3      	ldr	r3, [r6, #8]
 80034b2:	b90b      	cbnz	r3, 80034b8 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80034b4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80034b8:	2301      	movs	r3, #1
 80034ba:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80034bc:	2300      	movs	r3, #0
 80034be:	7173      	strb	r3, [r6, #5]
}
 80034c0:	4640      	mov	r0, r8
 80034c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80034c6:	f04f 0802 	mov.w	r8, #2
 80034ca:	e7f9      	b.n	80034c0 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80034cc:	f04f 0802 	mov.w	r8, #2
 80034d0:	e7f6      	b.n	80034c0 <HAL_SUBGHZ_ReadRegisters+0x90>
 80034d2:	bf00      	nop
 80034d4:	58000400 	.word	0x58000400

080034d8 <HAL_SUBGHZ_ExecSetCmd>:
{
 80034d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034dc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80034de:	7980      	ldrb	r0, [r0, #6]
 80034e0:	fa5f f980 	uxtb.w	r9, r0
 80034e4:	f1b9 0f01 	cmp.w	r9, #1
 80034e8:	d143      	bne.n	8003572 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80034ea:	4688      	mov	r8, r1
 80034ec:	4617      	mov	r7, r2
 80034ee:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80034f0:	796b      	ldrb	r3, [r5, #5]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d040      	beq.n	8003578 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80034f6:	2301      	movs	r3, #1
 80034f8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80034fa:	4628      	mov	r0, r5
 80034fc:	f7ff ff1e 	bl	800333c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003500:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003504:	d005      	beq.n	8003512 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8003506:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800350a:	d002      	beq.n	8003512 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	712b      	strb	r3, [r5, #4]
 8003510:	e001      	b.n	8003516 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003512:	2301      	movs	r3, #1
 8003514:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003516:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003518:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800351c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003524:	4641      	mov	r1, r8
 8003526:	4628      	mov	r0, r5
 8003528:	f7ff fe5c 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800352c:	2400      	movs	r4, #0
 800352e:	e005      	b.n	800353c <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003530:	5d39      	ldrb	r1, [r7, r4]
 8003532:	4628      	mov	r0, r5
 8003534:	f7ff fe56 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003538:	3401      	adds	r4, #1
 800353a:	b2a4      	uxth	r4, r4
 800353c:	42b4      	cmp	r4, r6
 800353e:	d3f7      	bcc.n	8003530 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003542:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800354e:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003552:	d10a      	bne.n	800356a <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003554:	68ab      	ldr	r3, [r5, #8]
 8003556:	b90b      	cbnz	r3, 800355c <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8003558:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800355c:	2301      	movs	r3, #1
 800355e:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003560:	2300      	movs	r3, #0
 8003562:	716b      	strb	r3, [r5, #5]
}
 8003564:	4648      	mov	r0, r9
 8003566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800356a:	4628      	mov	r0, r5
 800356c:	f7ff feba 	bl	80032e4 <SUBGHZ_WaitOnBusy>
 8003570:	e7f0      	b.n	8003554 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8003572:	f04f 0902 	mov.w	r9, #2
 8003576:	e7f5      	b.n	8003564 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8003578:	f04f 0902 	mov.w	r9, #2
 800357c:	e7f2      	b.n	8003564 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800357e:	bf00      	nop
 8003580:	58000400 	.word	0x58000400

08003584 <HAL_SUBGHZ_ExecGetCmd>:
{
 8003584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003588:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800358a:	7980      	ldrb	r0, [r0, #6]
 800358c:	fa5f f880 	uxtb.w	r8, r0
 8003590:	f1b8 0f01 	cmp.w	r8, #1
 8003594:	d139      	bne.n	800360a <HAL_SUBGHZ_ExecGetCmd+0x86>
 8003596:	460c      	mov	r4, r1
 8003598:	4615      	mov	r5, r2
 800359a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800359c:	7973      	ldrb	r3, [r6, #5]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d036      	beq.n	8003610 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80035a2:	2301      	movs	r3, #1
 80035a4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80035a6:	4630      	mov	r0, r6
 80035a8:	f7ff fec8 	bl	800333c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80035ac:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80035ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80035ba:	4621      	mov	r1, r4
 80035bc:	4630      	mov	r0, r6
 80035be:	f7ff fe11 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80035c2:	2100      	movs	r1, #0
 80035c4:	4630      	mov	r0, r6
 80035c6:	f7ff fe0d 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80035ca:	2400      	movs	r4, #0
 80035cc:	e006      	b.n	80035dc <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80035ce:	4629      	mov	r1, r5
 80035d0:	4630      	mov	r0, r6
 80035d2:	f7ff fe45 	bl	8003260 <SUBGHZSPI_Receive>
      pData++;
 80035d6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80035d8:	3401      	adds	r4, #1
 80035da:	b2a4      	uxth	r4, r4
 80035dc:	42bc      	cmp	r4, r7
 80035de:	d3f6      	bcc.n	80035ce <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80035e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80035ee:	4630      	mov	r0, r6
 80035f0:	f7ff fe78 	bl	80032e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80035f4:	68b3      	ldr	r3, [r6, #8]
 80035f6:	b90b      	cbnz	r3, 80035fc <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80035f8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80035fc:	2301      	movs	r3, #1
 80035fe:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003600:	2300      	movs	r3, #0
 8003602:	7173      	strb	r3, [r6, #5]
}
 8003604:	4640      	mov	r0, r8
 8003606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800360a:	f04f 0802 	mov.w	r8, #2
 800360e:	e7f9      	b.n	8003604 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8003610:	f04f 0802 	mov.w	r8, #2
 8003614:	e7f6      	b.n	8003604 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8003616:	bf00      	nop
 8003618:	58000400 	.word	0x58000400

0800361c <HAL_SUBGHZ_IRQHandler>:
{
 800361c:	b530      	push	{r4, r5, lr}
 800361e:	b083      	sub	sp, #12
 8003620:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 8003622:	2300      	movs	r3, #0
 8003624:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8003628:	2302      	movs	r3, #2
 800362a:	aa01      	add	r2, sp, #4
 800362c:	2112      	movs	r1, #18
 800362e:	f7ff ffa9 	bl	8003584 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8003632:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8003636:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800363a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800363e:	f013 0f01 	tst.w	r3, #1
 8003642:	d126      	bne.n	8003692 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003644:	f014 0f02 	tst.w	r4, #2
 8003648:	d127      	bne.n	800369a <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800364a:	f014 0f04 	tst.w	r4, #4
 800364e:	d128      	bne.n	80036a2 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003650:	f014 0f08 	tst.w	r4, #8
 8003654:	d129      	bne.n	80036aa <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003656:	f014 0f10 	tst.w	r4, #16
 800365a:	d12a      	bne.n	80036b2 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800365c:	f014 0f20 	tst.w	r4, #32
 8003660:	d12b      	bne.n	80036ba <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003662:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003666:	d12c      	bne.n	80036c2 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003668:	f014 0f80 	tst.w	r4, #128	; 0x80
 800366c:	d006      	beq.n	800367c <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800366e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003672:	d02a      	beq.n	80036ca <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003674:	2101      	movs	r1, #1
 8003676:	4628      	mov	r0, r5
 8003678:	f003 fa06 	bl	8006a88 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800367c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003680:	d128      	bne.n	80036d4 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8003682:	2302      	movs	r3, #2
 8003684:	aa01      	add	r2, sp, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4628      	mov	r0, r5
 800368a:	f7ff ff25 	bl	80034d8 <HAL_SUBGHZ_ExecSetCmd>
}
 800368e:	b003      	add	sp, #12
 8003690:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003692:	4628      	mov	r0, r5
 8003694:	f003 f9e0 	bl	8006a58 <HAL_SUBGHZ_TxCpltCallback>
 8003698:	e7d4      	b.n	8003644 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800369a:	4628      	mov	r0, r5
 800369c:	f003 f9e4 	bl	8006a68 <HAL_SUBGHZ_RxCpltCallback>
 80036a0:	e7d3      	b.n	800364a <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80036a2:	4628      	mov	r0, r5
 80036a4:	f003 fa14 	bl	8006ad0 <HAL_SUBGHZ_PreambleDetectedCallback>
 80036a8:	e7d2      	b.n	8003650 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80036aa:	4628      	mov	r0, r5
 80036ac:	f003 fa18 	bl	8006ae0 <HAL_SUBGHZ_SyncWordValidCallback>
 80036b0:	e7d1      	b.n	8003656 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80036b2:	4628      	mov	r0, r5
 80036b4:	f003 fa1c 	bl	8006af0 <HAL_SUBGHZ_HeaderValidCallback>
 80036b8:	e7d0      	b.n	800365c <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80036ba:	4628      	mov	r0, r5
 80036bc:	f003 fa00 	bl	8006ac0 <HAL_SUBGHZ_HeaderErrorCallback>
 80036c0:	e7cf      	b.n	8003662 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80036c2:	4628      	mov	r0, r5
 80036c4:	f003 f9d8 	bl	8006a78 <HAL_SUBGHZ_CRCErrorCallback>
 80036c8:	e7ce      	b.n	8003668 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80036ca:	2100      	movs	r1, #0
 80036cc:	4628      	mov	r0, r5
 80036ce:	f003 f9db 	bl	8006a88 <HAL_SUBGHZ_CADStatusCallback>
 80036d2:	e7d3      	b.n	800367c <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80036d4:	4628      	mov	r0, r5
 80036d6:	f003 f9e9 	bl	8006aac <HAL_SUBGHZ_RxTxTimeoutCallback>
 80036da:	e7d2      	b.n	8003682 <HAL_SUBGHZ_IRQHandler+0x66>

080036dc <HAL_SUBGHZ_WriteBuffer>:
{
 80036dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80036e2:	7980      	ldrb	r0, [r0, #6]
 80036e4:	fa5f f880 	uxtb.w	r8, r0
 80036e8:	f1b8 0f01 	cmp.w	r8, #1
 80036ec:	d138      	bne.n	8003760 <HAL_SUBGHZ_WriteBuffer+0x84>
 80036ee:	460c      	mov	r4, r1
 80036f0:	4617      	mov	r7, r2
 80036f2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80036f4:	796b      	ldrb	r3, [r5, #5]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d035      	beq.n	8003766 <HAL_SUBGHZ_WriteBuffer+0x8a>
 80036fa:	2301      	movs	r3, #1
 80036fc:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80036fe:	4628      	mov	r0, r5
 8003700:	f7ff fe1c 	bl	800333c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_SUBGHZ_WriteBuffer+0x90>)
 8003706:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800370a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800370e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003712:	210e      	movs	r1, #14
 8003714:	4628      	mov	r0, r5
 8003716:	f7ff fd65 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800371a:	4621      	mov	r1, r4
 800371c:	4628      	mov	r0, r5
 800371e:	f7ff fd61 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003722:	2400      	movs	r4, #0
 8003724:	e005      	b.n	8003732 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003726:	5d39      	ldrb	r1, [r7, r4]
 8003728:	4628      	mov	r0, r5
 800372a:	f7ff fd5b 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800372e:	3401      	adds	r4, #1
 8003730:	b2a4      	uxth	r4, r4
 8003732:	42b4      	cmp	r4, r6
 8003734:	d3f7      	bcc.n	8003726 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003736:	4a0d      	ldr	r2, [pc, #52]	; (800376c <HAL_SUBGHZ_WriteBuffer+0x90>)
 8003738:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800373c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003744:	4628      	mov	r0, r5
 8003746:	f7ff fdcd 	bl	80032e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800374a:	68ab      	ldr	r3, [r5, #8]
 800374c:	b90b      	cbnz	r3, 8003752 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800374e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003752:	2301      	movs	r3, #1
 8003754:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003756:	2300      	movs	r3, #0
 8003758:	716b      	strb	r3, [r5, #5]
}
 800375a:	4640      	mov	r0, r8
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003760:	f04f 0802 	mov.w	r8, #2
 8003764:	e7f9      	b.n	800375a <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8003766:	f04f 0802 	mov.w	r8, #2
 800376a:	e7f6      	b.n	800375a <HAL_SUBGHZ_WriteBuffer+0x7e>
 800376c:	58000400 	.word	0x58000400

08003770 <HAL_SUBGHZ_ReadBuffer>:
{
 8003770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003774:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003776:	7980      	ldrb	r0, [r0, #6]
 8003778:	fa5f f880 	uxtb.w	r8, r0
 800377c:	f1b8 0f01 	cmp.w	r8, #1
 8003780:	d13d      	bne.n	80037fe <HAL_SUBGHZ_ReadBuffer+0x8e>
 8003782:	460c      	mov	r4, r1
 8003784:	4615      	mov	r5, r2
 8003786:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003788:	7973      	ldrb	r3, [r6, #5]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d03a      	beq.n	8003804 <HAL_SUBGHZ_ReadBuffer+0x94>
 800378e:	2301      	movs	r3, #1
 8003790:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003792:	4630      	mov	r0, r6
 8003794:	f7ff fdd2 	bl	800333c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800379a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800379e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80037a6:	211e      	movs	r1, #30
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff fd1b 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80037ae:	4621      	mov	r1, r4
 80037b0:	4630      	mov	r0, r6
 80037b2:	f7ff fd17 	bl	80031e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80037b6:	2100      	movs	r1, #0
 80037b8:	4630      	mov	r0, r6
 80037ba:	f7ff fd13 	bl	80031e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80037be:	2400      	movs	r4, #0
 80037c0:	e006      	b.n	80037d0 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80037c2:	4629      	mov	r1, r5
 80037c4:	4630      	mov	r0, r6
 80037c6:	f7ff fd4b 	bl	8003260 <SUBGHZSPI_Receive>
      pData++;
 80037ca:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80037cc:	3401      	adds	r4, #1
 80037ce:	b2a4      	uxth	r4, r4
 80037d0:	42bc      	cmp	r4, r7
 80037d2:	d3f6      	bcc.n	80037c2 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80037d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7ff fd7e 	bl	80032e4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80037e8:	68b3      	ldr	r3, [r6, #8]
 80037ea:	b90b      	cbnz	r3, 80037f0 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80037ec:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80037f0:	2301      	movs	r3, #1
 80037f2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80037f4:	2300      	movs	r3, #0
 80037f6:	7173      	strb	r3, [r6, #5]
}
 80037f8:	4640      	mov	r0, r8
 80037fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80037fe:	f04f 0802 	mov.w	r8, #2
 8003802:	e7f9      	b.n	80037f8 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8003804:	f04f 0802 	mov.w	r8, #2
 8003808:	e7f6      	b.n	80037f8 <HAL_SUBGHZ_ReadBuffer+0x88>
 800380a:	bf00      	nop
 800380c:	58000400 	.word	0x58000400

08003810 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003810:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	e852 3f00 	ldrex	r3, [r2]
 8003816:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	e842 3100 	strex	r1, r3, [r2]
 800381e:	2900      	cmp	r1, #0
 8003820:	d1f6      	bne.n	8003810 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003822:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	f102 0308 	add.w	r3, r2, #8
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	3208      	adds	r2, #8
 8003832:	e842 3100 	strex	r1, r3, [r2]
 8003836:	2900      	cmp	r1, #0
 8003838:	d1f3      	bne.n	8003822 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383a:	2320      	movs	r3, #32
 800383c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8003840:	4770      	bx	lr

08003842 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003842:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	e852 3f00 	ldrex	r3, [r2]
 8003848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	e842 3100 	strex	r1, r3, [r2]
 8003850:	2900      	cmp	r1, #0
 8003852:	d1f6      	bne.n	8003842 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003854:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	f102 0308 	add.w	r3, r2, #8
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003862:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	3208      	adds	r2, #8
 8003868:	e842 3100 	strex	r1, r3, [r2]
 800386c:	2900      	cmp	r1, #0
 800386e:	d1f1      	bne.n	8003854 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d006      	beq.n	8003884 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003876:	2320      	movs	r3, #32
 8003878:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	2300      	movs	r3, #0
 800387e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003880:	6703      	str	r3, [r0, #112]	; 0x70
}
 8003882:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	e852 3f00 	ldrex	r3, [r2]
 800388a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	e842 3100 	strex	r1, r3, [r2]
 8003892:	2900      	cmp	r1, #0
 8003894:	d1f6      	bne.n	8003884 <UART_EndRxTransfer+0x42>
 8003896:	e7ee      	b.n	8003876 <UART_EndRxTransfer+0x34>

08003898 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003898:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800389c:	2b20      	cmp	r3, #32
 800389e:	d14c      	bne.n	800393a <HAL_UART_Transmit_DMA+0xa2>
{
 80038a0:	b510      	push	{r4, lr}
 80038a2:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80038a4:	2900      	cmp	r1, #0
 80038a6:	d04a      	beq.n	800393e <HAL_UART_Transmit_DMA+0xa6>
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	d04a      	beq.n	8003942 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 80038ac:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d048      	beq.n	8003946 <HAL_UART_Transmit_DMA+0xae>
 80038b4:	2301      	movs	r3, #1
 80038b6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80038ba:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80038bc:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80038c0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ca:	2321      	movs	r3, #33	; 0x21
 80038cc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80038d0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80038d2:	b1f3      	cbz	r3, 8003912 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038d4:	491d      	ldr	r1, [pc, #116]	; (800394c <HAL_UART_Transmit_DMA+0xb4>)
 80038d6:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038d8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80038da:	491d      	ldr	r1, [pc, #116]	; (8003950 <HAL_UART_Transmit_DMA+0xb8>)
 80038dc:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038de:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80038e0:	491c      	ldr	r1, [pc, #112]	; (8003954 <HAL_UART_Transmit_DMA+0xbc>)
 80038e2:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80038e4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80038e6:	2100      	movs	r1, #0
 80038e8:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038ea:	6801      	ldr	r1, [r0, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80038f2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80038f4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80038f6:	f7fd ffc3 	bl	8001880 <HAL_DMA_Start_IT>
 80038fa:	b150      	cbz	r0, 8003912 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038fc:	2310      	movs	r3, #16
 80038fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8003902:	2300      	movs	r3, #0
 8003904:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8003908:	2320      	movs	r3, #32
 800390a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800390e:	2001      	movs	r0, #1
 8003910:	e012      	b.n	8003938 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8003918:	2300      	movs	r3, #0
 800391a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800391e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	f102 0308 	add.w	r3, r2, #8
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	3208      	adds	r2, #8
 800392e:	e842 3100 	strex	r1, r3, [r2]
 8003932:	2900      	cmp	r1, #0
 8003934:	d1f3      	bne.n	800391e <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8003936:	2000      	movs	r0, #0
}
 8003938:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800393a:	2002      	movs	r0, #2
}
 800393c:	4770      	bx	lr
      return HAL_ERROR;
 800393e:	2001      	movs	r0, #1
 8003940:	e7fa      	b.n	8003938 <HAL_UART_Transmit_DMA+0xa0>
 8003942:	2001      	movs	r0, #1
 8003944:	e7f8      	b.n	8003938 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8003946:	2002      	movs	r0, #2
 8003948:	e7f6      	b.n	8003938 <HAL_UART_Transmit_DMA+0xa0>
 800394a:	bf00      	nop
 800394c:	08003959 	.word	0x08003959
 8003950:	080039c7 	.word	0x080039c7
 8003954:	080039d3 	.word	0x080039d3

08003958 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003958:	b508      	push	{r3, lr}
 800395a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800395c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f013 0f20 	tst.w	r3, #32
 8003966:	d118      	bne.n	800399a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800396e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	f102 0308 	add.w	r3, r2, #8
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	3208      	adds	r2, #8
 800397e:	e842 3100 	strex	r1, r3, [r2]
 8003982:	2900      	cmp	r1, #0
 8003984:	d1f3      	bne.n	800396e <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003986:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	e852 3f00 	ldrex	r3, [r2]
 800398c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	e842 3100 	strex	r1, r3, [r2]
 8003994:	2900      	cmp	r1, #0
 8003996:	d1f6      	bne.n	8003986 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003998:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800399a:	f7fd f9b5 	bl	8000d08 <HAL_UART_TxCpltCallback>
}
 800399e:	e7fb      	b.n	8003998 <UART_DMATransmitCplt+0x40>

080039a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	e852 3f00 	ldrex	r3, [r2]
 80039a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	e842 3100 	strex	r1, r3, [r2]
 80039b0:	2900      	cmp	r1, #0
 80039b2:	d1f6      	bne.n	80039a2 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039b4:	2320      	movs	r3, #32
 80039b6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039be:	f7fd f9a3 	bl	8000d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c2:	bd08      	pop	{r3, pc}

080039c4 <HAL_UART_TxHalfCpltCallback>:
}
 80039c4:	4770      	bx	lr

080039c6 <UART_DMATxHalfCplt>:
{
 80039c6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80039c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80039ca:	f7ff fffb 	bl	80039c4 <HAL_UART_TxHalfCpltCallback>
}
 80039ce:	bd08      	pop	{r3, pc}

080039d0 <HAL_UART_ErrorCallback>:
}
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAError>:
{
 80039d2:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80039d6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80039da:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039e6:	d001      	beq.n	80039ec <UART_DMAError+0x1a>
 80039e8:	2a21      	cmp	r2, #33	; 0x21
 80039ea:	d010      	beq.n	8003a0e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039f4:	d001      	beq.n	80039fa <UART_DMAError+0x28>
 80039f6:	2d22      	cmp	r5, #34	; 0x22
 80039f8:	d010      	beq.n	8003a1c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039fa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80039fe:	f043 0310 	orr.w	r3, r3, #16
 8003a02:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff ffe2 	bl	80039d0 <HAL_UART_ErrorCallback>
}
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7ff fefb 	bl	8003810 <UART_EndTxTransfer>
 8003a1a:	e7e7      	b.n	80039ec <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003a22:	4620      	mov	r0, r4
 8003a24:	f7ff ff0d 	bl	8003842 <UART_EndRxTransfer>
 8003a28:	e7e7      	b.n	80039fa <UART_DMAError+0x28>

08003a2a <UART_DMAAbortOnError>:
{
 8003a2a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003a34:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8003a38:	f7ff ffca 	bl	80039d0 <HAL_UART_ErrorCallback>
}
 8003a3c:	bd08      	pop	{r3, pc}

08003a3e <HAL_UARTEx_RxEventCallback>:
}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UART_IRQHandler>:
{
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a44:	6801      	ldr	r1, [r0, #0]
 8003a46:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a48:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a4a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a4c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8003a50:	401a      	ands	r2, r3
 8003a52:	d108      	bne.n	8003a66 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a54:	f013 0f20 	tst.w	r3, #32
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a5a:	f010 0f20 	tst.w	r0, #32
 8003a5e:	d134      	bne.n	8003aca <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a60:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8003a64:	d131      	bne.n	8003aca <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8003a66:	b12a      	cbz	r2, 8003a74 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a68:	4abd      	ldr	r2, [pc, #756]	; (8003d60 <HAL_UART_IRQHandler+0x320>)
 8003a6a:	402a      	ands	r2, r5
 8003a6c:	d133      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a6e:	4ebd      	ldr	r6, [pc, #756]	; (8003d64 <HAL_UART_IRQHandler+0x324>)
 8003a70:	4230      	tst	r0, r6
 8003a72:	d130      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a74:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a76:	2a01      	cmp	r2, #1
 8003a78:	f000 80c3 	beq.w	8003c02 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003a80:	d003      	beq.n	8003a8a <HAL_UART_IRQHandler+0x4a>
 8003a82:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8003a86:	f040 8155 	bne.w	8003d34 <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a8e:	d007      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a90:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a94:	f040 8155 	bne.w	8003d42 <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a98:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8003a9c:	f040 8151 	bne.w	8003d42 <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003aa0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003aa4:	d003      	beq.n	8003aae <HAL_UART_IRQHandler+0x6e>
 8003aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aaa:	f040 8151 	bne.w	8003d50 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003aae:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003ab2:	d003      	beq.n	8003abc <HAL_UART_IRQHandler+0x7c>
 8003ab4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003ab8:	f040 814e 	bne.w	8003d58 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003abc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x88>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f2c0 8152 	blt.w	8003d6c <HAL_UART_IRQHandler+0x32c>
}
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8003aca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0fb      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	4798      	blx	r3
      return;
 8003ad4:	e7f8      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ad6:	f013 0f01 	tst.w	r3, #1
 8003ada:	d009      	beq.n	8003af0 <HAL_UART_IRQHandler+0xb0>
 8003adc:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003ae0:	d006      	beq.n	8003af0 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ae2:	2601      	movs	r6, #1
 8003ae4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003aea:	4331      	orrs	r1, r6
 8003aec:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af0:	f013 0f02 	tst.w	r3, #2
 8003af4:	d00b      	beq.n	8003b0e <HAL_UART_IRQHandler+0xce>
 8003af6:	f015 0f01 	tst.w	r5, #1
 8003afa:	d008      	beq.n	8003b0e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003afc:	6821      	ldr	r1, [r4, #0]
 8003afe:	2602      	movs	r6, #2
 8003b00:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b02:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003b06:	f041 0104 	orr.w	r1, r1, #4
 8003b0a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b0e:	f013 0f04 	tst.w	r3, #4
 8003b12:	d00b      	beq.n	8003b2c <HAL_UART_IRQHandler+0xec>
 8003b14:	f015 0f01 	tst.w	r5, #1
 8003b18:	d008      	beq.n	8003b2c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b1a:	6821      	ldr	r1, [r4, #0]
 8003b1c:	2604      	movs	r6, #4
 8003b1e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b20:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003b24:	f041 0102 	orr.w	r1, r1, #2
 8003b28:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b2c:	f013 0f08 	tst.w	r3, #8
 8003b30:	d00b      	beq.n	8003b4a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b32:	f010 0f20 	tst.w	r0, #32
 8003b36:	d100      	bne.n	8003b3a <HAL_UART_IRQHandler+0xfa>
 8003b38:	b13a      	cbz	r2, 8003b4a <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b40:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b44:	430a      	orrs	r2, r1
 8003b46:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b4a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003b4e:	d00c      	beq.n	8003b6a <HAL_UART_IRQHandler+0x12a>
 8003b50:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8003b54:	d009      	beq.n	8003b6a <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b5c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b5e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b62:	f042 0220 	orr.w	r2, r2, #32
 8003b66:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b6a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b6e:	2a00      	cmp	r2, #0
 8003b70:	d0aa      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b72:	f013 0f20 	tst.w	r3, #32
 8003b76:	d009      	beq.n	8003b8c <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b78:	f010 0f20 	tst.w	r0, #32
 8003b7c:	d102      	bne.n	8003b84 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b7e:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8003b82:	d003      	beq.n	8003b8c <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8003b84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003b86:	b10b      	cbz	r3, 8003b8c <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003b8c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b98:	d102      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x160>
 8003b9a:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003b9e:	d029      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff fe4e 	bl	8003842 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bae:	d01d      	beq.n	8003bec <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	f102 0308 	add.w	r3, r2, #8
 8003bb6:	e853 3f00 	ldrex	r3, [r3]
 8003bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	3208      	adds	r2, #8
 8003bc0:	e842 3100 	strex	r1, r3, [r2]
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d1f3      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8003bc8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003bca:	b15b      	cbz	r3, 8003be4 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bcc:	4a66      	ldr	r2, [pc, #408]	; (8003d68 <HAL_UART_IRQHandler+0x328>)
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bd0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003bd2:	f7fd fedb 	bl	800198c <HAL_DMA_Abort_IT>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	f43f af76 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bdc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003bde:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003be0:	4798      	blx	r3
 8003be2:	e771      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8003be4:	4620      	mov	r0, r4
 8003be6:	f7ff fef3 	bl	80039d0 <HAL_UART_ErrorCallback>
 8003bea:	e76d      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7ff feef 	bl	80039d0 <HAL_UART_ErrorCallback>
 8003bf2:	e769      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff feeb 	bl	80039d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8003c00:	e762      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003c02:	f013 0f10 	tst.w	r3, #16
 8003c06:	f43f af39 	beq.w	8003a7c <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003c0a:	f010 0f10 	tst.w	r0, #16
 8003c0e:	f43f af35 	beq.w	8003a7c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c12:	2310      	movs	r3, #16
 8003c14:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c1e:	d04f      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c20:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f43f af4d 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c2e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003c32:	4299      	cmp	r1, r3
 8003c34:	f67f af48 	bls.w	8003ac8 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8003c38:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f013 0f20 	tst.w	r3, #32
 8003c44:	d131      	bne.n	8003caa <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	e852 3f00 	ldrex	r3, [r2]
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	e842 3100 	strex	r1, r3, [r2]
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d1f6      	bne.n	8003c46 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	f102 0308 	add.w	r3, r2, #8
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	3208      	adds	r2, #8
 8003c68:	e842 3100 	strex	r1, r3, [r2]
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	d1f3      	bne.n	8003c58 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	f102 0308 	add.w	r3, r2, #8
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	3208      	adds	r2, #8
 8003c80:	e842 3100 	strex	r1, r3, [r2]
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d1f3      	bne.n	8003c70 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8003c88:	2320      	movs	r3, #32
 8003c8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c92:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	e852 3f00 	ldrex	r3, [r2]
 8003c98:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	e842 3100 	strex	r1, r3, [r2]
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d1f6      	bne.n	8003c92 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ca4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003ca6:	f7fd fe37 	bl	8001918 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003caa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003cae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	1ac9      	subs	r1, r1, r3
 8003cb6:	b289      	uxth	r1, r1
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff fec0 	bl	8003a3e <HAL_UARTEx_RxEventCallback>
      return;
 8003cbe:	e703      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003cc4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	1ac9      	subs	r1, r1, r3
 8003ccc:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8003cce:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f43f aef7 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	f43f aef4 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ce0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	e852 3f00 	ldrex	r3, [r2]
 8003ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	e842 3000 	strex	r0, r3, [r2]
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d1f6      	bne.n	8003ce0 <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cf2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	f102 0308 	add.w	r3, r2, #8
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	3208      	adds	r2, #8
 8003d06:	e842 3000 	strex	r0, r3, [r2]
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d1f1      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	2320      	movs	r3, #32
 8003d10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d14:	2300      	movs	r3, #0
 8003d16:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8003d18:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	e852 3f00 	ldrex	r3, [r2]
 8003d20:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	e842 3000 	strex	r0, r3, [r2]
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d1f6      	bne.n	8003d1a <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7ff fe86 	bl	8003a3e <HAL_UARTEx_RxEventCallback>
      return;
 8003d32:	e6c9      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d38:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 fe14 	bl	8004968 <HAL_UARTEx_WakeupCallback>
    return;
 8003d40:	e6c2      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8003d42:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f43f aebf 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	4798      	blx	r3
    return;
 8003d4e:	e6bb      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8003d50:	4620      	mov	r0, r4
 8003d52:	f7ff fe25 	bl	80039a0 <UART_EndTransmit_IT>
    return;
 8003d56:	e6b7      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 fe07 	bl	800496c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003d5e:	e6b3      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>
 8003d60:	10000001 	.word	0x10000001
 8003d64:	04000120 	.word	0x04000120
 8003d68:	08003a2b 	.word	0x08003a2b
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f000 fdfc 	bl	800496a <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003d72:	e6a9      	b.n	8003ac8 <HAL_UART_IRQHandler+0x88>

08003d74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d74:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8003d76:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d7a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003d7e:	2a22      	cmp	r2, #34	; 0x22
 8003d80:	d005      	beq.n	8003d8e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d82:	6802      	ldr	r2, [r0, #0]
 8003d84:	6993      	ldr	r3, [r2, #24]
 8003d86:	f043 0308 	orr.w	r3, r3, #8
 8003d8a:	6193      	str	r3, [r2, #24]
  }
}
 8003d8c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d8e:	6802      	ldr	r2, [r0, #0]
 8003d90:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003d96:	400b      	ands	r3, r1
 8003d98:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8003d9a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003da0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8003dae:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e9      	bne.n	8003d8c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003db8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	e852 3f00 	ldrex	r3, [r2]
 8003dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	e842 3100 	strex	r1, r3, [r2]
 8003dc6:	2900      	cmp	r1, #0
 8003dc8:	d1f6      	bne.n	8003db8 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	f102 0308 	add.w	r3, r2, #8
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	3208      	adds	r2, #8
 8003dda:	e842 3100 	strex	r1, r3, [r2]
 8003dde:	2900      	cmp	r1, #0
 8003de0:	d1f3      	bne.n	8003dca <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8003de2:	2320      	movs	r3, #32
 8003de4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d116      	bne.n	8003e20 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	2300      	movs	r3, #0
 8003df4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	e852 3f00 	ldrex	r3, [r2]
 8003dfc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	e842 3100 	strex	r1, r3, [r2]
 8003e04:	2900      	cmp	r1, #0
 8003e06:	d1f6      	bne.n	8003df6 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e08:	6803      	ldr	r3, [r0, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	f012 0f10 	tst.w	r2, #16
 8003e10:	d001      	beq.n	8003e16 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e12:	2210      	movs	r2, #16
 8003e14:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e16:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8003e1a:	f7ff fe10 	bl	8003a3e <HAL_UARTEx_RxEventCallback>
 8003e1e:	e7b5      	b.n	8003d8c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8003e20:	f7fc ff7a 	bl	8000d18 <HAL_UART_RxCpltCallback>
 8003e24:	e7b2      	b.n	8003d8c <UART_RxISR_8BIT+0x18>

08003e26 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e26:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e28:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e2c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003e30:	2b22      	cmp	r3, #34	; 0x22
 8003e32:	d005      	beq.n	8003e40 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e34:	6802      	ldr	r2, [r0, #0]
 8003e36:	6993      	ldr	r3, [r2, #24]
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	6193      	str	r3, [r2, #24]
  }
}
 8003e3e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e40:	6803      	ldr	r3, [r0, #0]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e44:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e46:	4013      	ands	r3, r2
 8003e48:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8003e4a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003e50:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8003e5e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ea      	bne.n	8003e3e <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e68:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	e852 3f00 	ldrex	r3, [r2]
 8003e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	e842 3100 	strex	r1, r3, [r2]
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d1f6      	bne.n	8003e68 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f102 0308 	add.w	r3, r2, #8
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	3208      	adds	r2, #8
 8003e8a:	e842 3100 	strex	r1, r3, [r2]
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d1f3      	bne.n	8003e7a <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8003e92:	2320      	movs	r3, #32
 8003e94:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d116      	bne.n	8003ed0 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	e852 3f00 	ldrex	r3, [r2]
 8003eac:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	e842 3100 	strex	r1, r3, [r2]
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	d1f6      	bne.n	8003ea6 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eb8:	6803      	ldr	r3, [r0, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	f012 0f10 	tst.w	r2, #16
 8003ec0:	d001      	beq.n	8003ec6 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8003eca:	f7ff fdb8 	bl	8003a3e <HAL_UARTEx_RxEventCallback>
 8003ece:	e7b6      	b.n	8003e3e <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8003ed0:	f7fc ff22 	bl	8000d18 <HAL_UART_RxCpltCallback>
 8003ed4:	e7b3      	b.n	8003e3e <UART_RxISR_16BIT+0x18>
	...

08003ed8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8003edc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ee0:	6803      	ldr	r3, [r0, #0]
 8003ee2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003ee4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003ee8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eec:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003ef0:	2a22      	cmp	r2, #34	; 0x22
 8003ef2:	d005      	beq.n	8003f00 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	f042 0208 	orr.w	r2, r2, #8
 8003efa:	619a      	str	r2, [r3, #24]
  }
}
 8003efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f00:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8003f02:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f06:	e008      	b.n	8003f1a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f08:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d14c      	bne.n	8003faa <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8003f10:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d04e      	beq.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f1a:	2f00      	cmp	r7, #0
 8003f1c:	f000 8087 	beq.w	800402e <UART_RxISR_8BIT_FIFOEN+0x156>
 8003f20:	f015 0f20 	tst.w	r5, #32
 8003f24:	f000 8083 	beq.w	800402e <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f2c:	b2f3      	uxtb	r3, r6
 8003f2e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003f30:	400b      	ands	r3, r1
 8003f32:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8003f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f36:	3301      	adds	r3, #1
 8003f38:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8003f3a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f4c:	f015 0f07 	tst.w	r5, #7
 8003f50:	d0de      	beq.n	8003f10 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f52:	f015 0f01 	tst.w	r5, #1
 8003f56:	d009      	beq.n	8003f6c <UART_RxISR_8BIT_FIFOEN+0x94>
 8003f58:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003f5c:	d006      	beq.n	8003f6c <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f5e:	2201      	movs	r2, #1
 8003f60:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f62:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f6c:	f015 0f02 	tst.w	r5, #2
 8003f70:	d00b      	beq.n	8003f8a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8003f72:	f018 0f01 	tst.w	r8, #1
 8003f76:	d008      	beq.n	8003f8a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f7e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f8a:	f015 0f04 	tst.w	r5, #4
 8003f8e:	d0bb      	beq.n	8003f08 <UART_RxISR_8BIT_FIFOEN+0x30>
 8003f90:	f018 0f01 	tst.w	r8, #1
 8003f94:	d0b8      	beq.n	8003f08 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003fa8:	e7ae      	b.n	8003f08 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8003faa:	4620      	mov	r0, r4
 8003fac:	f7ff fd10 	bl	80039d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003fb6:	e7ab      	b.n	8003f10 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	e852 3f00 	ldrex	r3, [r2]
 8003fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	e842 3100 	strex	r1, r3, [r2]
 8003fc6:	2900      	cmp	r1, #0
 8003fc8:	d1f6      	bne.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	f102 0308 	add.w	r3, r2, #8
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	3208      	adds	r2, #8
 8003fde:	e842 3100 	strex	r1, r3, [r2]
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	d1f1      	bne.n	8003fca <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	2320      	movs	r3, #32
 8003fe8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d003      	beq.n	8003ffe <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7fc fe8e 	bl	8000d18 <HAL_UART_RxCpltCallback>
 8003ffc:	e78d      	b.n	8003f1a <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	2300      	movs	r3, #0
 8004000:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004002:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	e852 3f00 	ldrex	r3, [r2]
 8004008:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	e842 3100 	strex	r1, r3, [r2]
 8004010:	2900      	cmp	r1, #0
 8004012:	d1f6      	bne.n	8004002 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	f012 0f10 	tst.w	r2, #16
 800401c:	d001      	beq.n	8004022 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800401e:	2210      	movs	r2, #16
 8004020:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004022:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff fd09 	bl	8003a3e <HAL_UARTEx_RxEventCallback>
 800402c:	e775      	b.n	8003f1a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800402e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004032:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004034:	2b00      	cmp	r3, #0
 8004036:	f43f af61 	beq.w	8003efc <UART_RxISR_8BIT_FIFOEN+0x24>
 800403a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800403e:	429a      	cmp	r2, r3
 8004040:	f67f af5c 	bls.w	8003efc <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004044:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	f102 0308 	add.w	r3, r2, #8
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	3208      	adds	r2, #8
 8004054:	e842 3100 	strex	r1, r3, [r2]
 8004058:	2900      	cmp	r1, #0
 800405a:	d1f3      	bne.n	8004044 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800405e:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004060:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	e852 3f00 	ldrex	r3, [r2]
 8004066:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	e842 3100 	strex	r1, r3, [r2]
 800406e:	2900      	cmp	r1, #0
 8004070:	d1f6      	bne.n	8004060 <UART_RxISR_8BIT_FIFOEN+0x188>
 8004072:	e743      	b.n	8003efc <UART_RxISR_8BIT_FIFOEN+0x24>
 8004074:	08003d75 	.word	0x08003d75

08004078 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800407c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004080:	6803      	ldr	r3, [r0, #0]
 8004082:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004084:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004088:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800408c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004090:	2a22      	cmp	r2, #34	; 0x22
 8004092:	d005      	beq.n	80040a0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	619a      	str	r2, [r3, #24]
  }
}
 800409c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040a0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80040a2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040a6:	e008      	b.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d14b      	bne.n	8004148 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80040b0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04d      	beq.n	8004156 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040ba:	2f00      	cmp	r7, #0
 80040bc:	f000 8086 	beq.w	80041cc <UART_RxISR_16BIT_FIFOEN+0x154>
 80040c0:	f015 0f20 	tst.w	r5, #32
 80040c4:	f000 8082 	beq.w	80041cc <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80040ce:	4033      	ands	r3, r6
 80040d0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80040d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040d4:	3302      	adds	r3, #2
 80040d6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80040d8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040ea:	f015 0f07 	tst.w	r5, #7
 80040ee:	d0df      	beq.n	80040b0 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040f0:	f015 0f01 	tst.w	r5, #1
 80040f4:	d009      	beq.n	800410a <UART_RxISR_16BIT_FIFOEN+0x92>
 80040f6:	f419 7f80 	tst.w	r9, #256	; 0x100
 80040fa:	d006      	beq.n	800410a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040fc:	2201      	movs	r2, #1
 80040fe:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004100:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800410a:	f015 0f02 	tst.w	r5, #2
 800410e:	d00b      	beq.n	8004128 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8004110:	f018 0f01 	tst.w	r8, #1
 8004114:	d008      	beq.n	8004128 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	2202      	movs	r2, #2
 800411a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800411c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004128:	f015 0f04 	tst.w	r5, #4
 800412c:	d0bc      	beq.n	80040a8 <UART_RxISR_16BIT_FIFOEN+0x30>
 800412e:	f018 0f01 	tst.w	r8, #1
 8004132:	d0b9      	beq.n	80040a8 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	2204      	movs	r2, #4
 8004138:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004146:	e7af      	b.n	80040a8 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff fc41 	bl	80039d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414e:	2300      	movs	r3, #0
 8004150:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004154:	e7ac      	b.n	80040b0 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004156:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	e852 3f00 	ldrex	r3, [r2]
 800415c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	e842 3100 	strex	r1, r3, [r2]
 8004164:	2900      	cmp	r1, #0
 8004166:	d1f6      	bne.n	8004156 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004168:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	f102 0308 	add.w	r3, r2, #8
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004176:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	3208      	adds	r2, #8
 800417c:	e842 3100 	strex	r1, r3, [r2]
 8004180:	2900      	cmp	r1, #0
 8004182:	d1f1      	bne.n	8004168 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8004184:	2320      	movs	r3, #32
 8004186:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d003      	beq.n	800419c <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8004194:	4620      	mov	r0, r4
 8004196:	f7fc fdbf 	bl	8000d18 <HAL_UART_RxCpltCallback>
 800419a:	e78e      	b.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	2300      	movs	r3, #0
 800419e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	e852 3f00 	ldrex	r3, [r2]
 80041a6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	e842 3100 	strex	r1, r3, [r2]
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d1f6      	bne.n	80041a0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	f012 0f10 	tst.w	r2, #16
 80041ba:	d001      	beq.n	80041c0 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041bc:	2210      	movs	r2, #16
 80041be:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041c0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7ff fc3a 	bl	8003a3e <HAL_UARTEx_RxEventCallback>
 80041ca:	e776      	b.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80041cc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80041d0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f43f af62 	beq.w	800409c <UART_RxISR_16BIT_FIFOEN+0x24>
 80041d8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80041dc:	429a      	cmp	r2, r3
 80041de:	f67f af5d 	bls.w	800409c <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80041e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	f102 0308 	add.w	r3, r2, #8
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	3208      	adds	r2, #8
 80041f2:	e842 3100 	strex	r1, r3, [r2]
 80041f6:	2900      	cmp	r1, #0
 80041f8:	d1f3      	bne.n	80041e2 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 80041fc:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80041fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	e852 3f00 	ldrex	r3, [r2]
 8004204:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	e842 3100 	strex	r1, r3, [r2]
 800420c:	2900      	cmp	r1, #0
 800420e:	d1f6      	bne.n	80041fe <UART_RxISR_16BIT_FIFOEN+0x186>
 8004210:	e744      	b.n	800409c <UART_RxISR_16BIT_FIFOEN+0x24>
 8004212:	bf00      	nop
 8004214:	08003e27 	.word	0x08003e27

08004218 <UART_SetConfig>:
{
 8004218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800421e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004220:	6883      	ldr	r3, [r0, #8]
 8004222:	6902      	ldr	r2, [r0, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	6942      	ldr	r2, [r0, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	69c2      	ldr	r2, [r0, #28]
 800422c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800422e:	6808      	ldr	r0, [r1, #0]
 8004230:	4aa1      	ldr	r2, [pc, #644]	; (80044b8 <UART_SetConfig+0x2a0>)
 8004232:	4002      	ands	r2, r0
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	6853      	ldr	r3, [r2, #4]
 800423c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004240:	68e1      	ldr	r1, [r4, #12]
 8004242:	430b      	orrs	r3, r1
 8004244:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004246:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	4b9c      	ldr	r3, [pc, #624]	; (80044bc <UART_SetConfig+0x2a4>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8004250:	6a23      	ldr	r3, [r4, #32]
 8004252:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004254:	6893      	ldr	r3, [r2, #8]
 8004256:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800425a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800425e:	430b      	orrs	r3, r1
 8004260:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004266:	f023 030f 	bic.w	r3, r3, #15
 800426a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800426c:	430b      	orrs	r3, r1
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004270:	6822      	ldr	r2, [r4, #0]
 8004272:	4b93      	ldr	r3, [pc, #588]	; (80044c0 <UART_SetConfig+0x2a8>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d01c      	beq.n	80042b2 <UART_SetConfig+0x9a>
 8004278:	4b92      	ldr	r3, [pc, #584]	; (80044c4 <UART_SetConfig+0x2ac>)
 800427a:	429a      	cmp	r2, r3
 800427c:	d031      	beq.n	80042e2 <UART_SetConfig+0xca>
 800427e:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <UART_SetConfig+0x2a4>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d04b      	beq.n	800431c <UART_SetConfig+0x104>
 8004284:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004286:	498d      	ldr	r1, [pc, #564]	; (80044bc <UART_SetConfig+0x2a4>)
 8004288:	428a      	cmp	r2, r1
 800428a:	d068      	beq.n	800435e <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428c:	69e0      	ldr	r0, [r4, #28]
 800428e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004292:	f000 80a7 	beq.w	80043e4 <UART_SetConfig+0x1cc>
    switch (clocksource)
 8004296:	2b08      	cmp	r3, #8
 8004298:	f200 8122 	bhi.w	80044e0 <UART_SetConfig+0x2c8>
 800429c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042a0:	00f800d5 	.word	0x00f800d5
 80042a4:	012000d3 	.word	0x012000d3
 80042a8:	012000fb 	.word	0x012000fb
 80042ac:	01200120 	.word	0x01200120
 80042b0:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80042c2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d809      	bhi.n	80042de <UART_SetConfig+0xc6>
 80042ca:	e8df f003 	tbb	[pc, r3]
 80042ce:	0402      	.short	0x0402
 80042d0:	063c      	.short	0x063c
 80042d2:	2301      	movs	r3, #1
 80042d4:	e7d7      	b.n	8004286 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d6:	2304      	movs	r3, #4
 80042d8:	e7d5      	b.n	8004286 <UART_SetConfig+0x6e>
 80042da:	2308      	movs	r3, #8
 80042dc:	e7d3      	b.n	8004286 <UART_SetConfig+0x6e>
 80042de:	2310      	movs	r3, #16
 80042e0:	e7d1      	b.n	8004286 <UART_SetConfig+0x6e>
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80042f2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d80e      	bhi.n	8004318 <UART_SetConfig+0x100>
 80042fa:	e8df f003 	tbb	[pc, r3]
 80042fe:	0d07      	.short	0x0d07
 8004300:	0d090d0d 	.word	0x0d090d0d
 8004304:	0d260d0d 	.word	0x0d260d0d
 8004308:	0d0d      	.short	0x0d0d
 800430a:	0b          	.byte	0x0b
 800430b:	00          	.byte	0x00
 800430c:	2300      	movs	r3, #0
 800430e:	e7ba      	b.n	8004286 <UART_SetConfig+0x6e>
 8004310:	2304      	movs	r3, #4
 8004312:	e7b8      	b.n	8004286 <UART_SetConfig+0x6e>
 8004314:	2308      	movs	r3, #8
 8004316:	e7b6      	b.n	8004286 <UART_SetConfig+0x6e>
 8004318:	2310      	movs	r3, #16
 800431a:	e7b4      	b.n	8004286 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	d00f      	beq.n	800434e <UART_SetConfig+0x136>
 800432e:	d805      	bhi.n	800433c <UART_SetConfig+0x124>
 8004330:	b17b      	cbz	r3, 8004352 <UART_SetConfig+0x13a>
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004336:	d10e      	bne.n	8004356 <UART_SetConfig+0x13e>
 8004338:	2304      	movs	r3, #4
 800433a:	e7a4      	b.n	8004286 <UART_SetConfig+0x6e>
 800433c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004340:	d10b      	bne.n	800435a <UART_SetConfig+0x142>
 8004342:	2308      	movs	r3, #8
 8004344:	e79f      	b.n	8004286 <UART_SetConfig+0x6e>
 8004346:	2302      	movs	r3, #2
 8004348:	e79d      	b.n	8004286 <UART_SetConfig+0x6e>
 800434a:	2302      	movs	r3, #2
 800434c:	e79b      	b.n	8004286 <UART_SetConfig+0x6e>
 800434e:	2302      	movs	r3, #2
 8004350:	e799      	b.n	8004286 <UART_SetConfig+0x6e>
 8004352:	2300      	movs	r3, #0
 8004354:	e797      	b.n	8004286 <UART_SetConfig+0x6e>
 8004356:	2310      	movs	r3, #16
 8004358:	e795      	b.n	8004286 <UART_SetConfig+0x6e>
 800435a:	2310      	movs	r3, #16
 800435c:	e793      	b.n	8004286 <UART_SetConfig+0x6e>
    switch (clocksource)
 800435e:	2b08      	cmp	r3, #8
 8004360:	f200 809f 	bhi.w	80044a2 <UART_SetConfig+0x28a>
 8004364:	e8df f003 	tbb	[pc, r3]
 8004368:	9d3c9d08 	.word	0x9d3c9d08
 800436c:	9d9d9d39 	.word	0x9d9d9d39
 8004370:	05          	.byte	0x05
 8004371:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8004372:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004376:	e004      	b.n	8004382 <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7fe fb14 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800437c:	2800      	cmp	r0, #0
 800437e:	f000 8092 	beq.w	80044a6 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004382:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004384:	4b50      	ldr	r3, [pc, #320]	; (80044c8 <UART_SetConfig+0x2b0>)
 8004386:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800438a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800438e:	6865      	ldr	r5, [r4, #4]
 8004390:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004394:	4299      	cmp	r1, r3
 8004396:	f200 8088 	bhi.w	80044aa <UART_SetConfig+0x292>
 800439a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800439e:	f200 8086 	bhi.w	80044ae <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043a2:	f04f 0800 	mov.w	r8, #0
 80043a6:	b292      	uxth	r2, r2
 80043a8:	2300      	movs	r3, #0
 80043aa:	4641      	mov	r1, r8
 80043ac:	f7fb feec 	bl	8000188 <__aeabi_uldivmod>
 80043b0:	020f      	lsls	r7, r1, #8
 80043b2:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80043b6:	0206      	lsls	r6, r0, #8
 80043b8:	0868      	lsrs	r0, r5, #1
 80043ba:	462a      	mov	r2, r5
 80043bc:	4643      	mov	r3, r8
 80043be:	1830      	adds	r0, r6, r0
 80043c0:	f147 0100 	adc.w	r1, r7, #0
 80043c4:	f7fb fee0 	bl	8000188 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043c8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80043cc:	4b3f      	ldr	r3, [pc, #252]	; (80044cc <UART_SetConfig+0x2b4>)
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d86f      	bhi.n	80044b2 <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	60d8      	str	r0, [r3, #12]
 80043d6:	4640      	mov	r0, r8
 80043d8:	e050      	b.n	800447c <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7fd fddb 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
        break;
 80043de:	e7cd      	b.n	800437c <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 80043e0:	483b      	ldr	r0, [pc, #236]	; (80044d0 <UART_SetConfig+0x2b8>)
 80043e2:	e7ce      	b.n	8004382 <UART_SetConfig+0x16a>
    switch (clocksource)
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d875      	bhi.n	80044d4 <UART_SetConfig+0x2bc>
 80043e8:	e8df f003 	tbb	[pc, r3]
 80043ec:	74052707 	.word	0x74052707
 80043f0:	7474742a 	.word	0x7474742a
 80043f4:	0b          	.byte	0x0b
 80043f5:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f6:	4836      	ldr	r0, [pc, #216]	; (80044d0 <UART_SetConfig+0x2b8>)
 80043f8:	e003      	b.n	8004402 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fa:	f7fe fad3 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80043fe:	2800      	cmp	r0, #0
 8004400:	d06a      	beq.n	80044d8 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004402:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004404:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <UART_SetConfig+0x2b0>)
 8004406:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800440a:	fbb0 f0f3 	udiv	r0, r0, r3
 800440e:	6862      	ldr	r2, [r4, #4]
 8004410:	0853      	lsrs	r3, r2, #1
 8004412:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004416:	fbb0 f0f2 	udiv	r0, r0, r2
 800441a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441c:	f1a0 0210 	sub.w	r2, r0, #16
 8004420:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004424:	429a      	cmp	r2, r3
 8004426:	d859      	bhi.n	80044dc <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004428:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800442c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004430:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	60d8      	str	r0, [r3, #12]
 8004436:	2000      	movs	r0, #0
 8004438:	e020      	b.n	800447c <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 800443a:	f7fe fac3 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
        break;
 800443e:	e7de      	b.n	80043fe <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8004440:	f7fd fda8 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
        break;
 8004444:	e7db      	b.n	80043fe <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004446:	4822      	ldr	r0, [pc, #136]	; (80044d0 <UART_SetConfig+0x2b8>)
 8004448:	e003      	b.n	8004452 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800444a:	f7fe faab 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800444e:	2800      	cmp	r0, #0
 8004450:	d048      	beq.n	80044e4 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004452:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004454:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <UART_SetConfig+0x2b0>)
 8004456:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800445a:	fbb0 f0f3 	udiv	r0, r0, r3
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004464:	fbb0 f0f3 	udiv	r0, r0, r3
 8004468:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800446a:	f1a0 0210 	sub.w	r2, r0, #16
 800446e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004472:	429a      	cmp	r2, r3
 8004474:	d838      	bhi.n	80044e8 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	60d8      	str	r0, [r3, #12]
 800447a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800447c:	2301      	movs	r3, #1
 800447e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004482:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800448a:	6763      	str	r3, [r4, #116]	; 0x74
}
 800448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7fe fa98 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004494:	e7db      	b.n	800444e <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8004496:	f7fd fd7d 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
        break;
 800449a:	e7d8      	b.n	800444e <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 800449c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044a0:	e7d7      	b.n	8004452 <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80044a2:	2001      	movs	r0, #1
 80044a4:	e7ea      	b.n	800447c <UART_SetConfig+0x264>
 80044a6:	2000      	movs	r0, #0
 80044a8:	e7e8      	b.n	800447c <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80044aa:	2001      	movs	r0, #1
 80044ac:	e7e6      	b.n	800447c <UART_SetConfig+0x264>
 80044ae:	2001      	movs	r0, #1
 80044b0:	e7e4      	b.n	800447c <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 80044b2:	2001      	movs	r0, #1
 80044b4:	e7e2      	b.n	800447c <UART_SetConfig+0x264>
 80044b6:	bf00      	nop
 80044b8:	cfff69f3 	.word	0xcfff69f3
 80044bc:	40008000 	.word	0x40008000
 80044c0:	40013800 	.word	0x40013800
 80044c4:	40004400 	.word	0x40004400
 80044c8:	08007b24 	.word	0x08007b24
 80044cc:	000ffcff 	.word	0x000ffcff
 80044d0:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d4:	2001      	movs	r0, #1
 80044d6:	e7d1      	b.n	800447c <UART_SetConfig+0x264>
 80044d8:	2000      	movs	r0, #0
 80044da:	e7cf      	b.n	800447c <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80044dc:	2001      	movs	r0, #1
 80044de:	e7cd      	b.n	800447c <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e0:	2001      	movs	r0, #1
 80044e2:	e7cb      	b.n	800447c <UART_SetConfig+0x264>
 80044e4:	2000      	movs	r0, #0
 80044e6:	e7c9      	b.n	800447c <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80044e8:	2001      	movs	r0, #1
 80044ea:	e7c7      	b.n	800447c <UART_SetConfig+0x264>

080044ec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80044ee:	f013 0f01 	tst.w	r3, #1
 80044f2:	d006      	beq.n	8004502 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f4:	6802      	ldr	r2, [r0, #0]
 80044f6:	6853      	ldr	r3, [r2, #4]
 80044f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044fc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80044fe:	430b      	orrs	r3, r1
 8004500:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004502:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004504:	f013 0f02 	tst.w	r3, #2
 8004508:	d006      	beq.n	8004518 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800450a:	6802      	ldr	r2, [r0, #0]
 800450c:	6853      	ldr	r3, [r2, #4]
 800450e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004512:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004514:	430b      	orrs	r3, r1
 8004516:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004518:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800451a:	f013 0f04 	tst.w	r3, #4
 800451e:	d006      	beq.n	800452e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004520:	6802      	ldr	r2, [r0, #0]
 8004522:	6853      	ldr	r3, [r2, #4]
 8004524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004528:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800452a:	430b      	orrs	r3, r1
 800452c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800452e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004530:	f013 0f08 	tst.w	r3, #8
 8004534:	d006      	beq.n	8004544 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004536:	6802      	ldr	r2, [r0, #0]
 8004538:	6853      	ldr	r3, [r2, #4]
 800453a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800453e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004540:	430b      	orrs	r3, r1
 8004542:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004544:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004546:	f013 0f10 	tst.w	r3, #16
 800454a:	d006      	beq.n	800455a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800454c:	6802      	ldr	r2, [r0, #0]
 800454e:	6893      	ldr	r3, [r2, #8]
 8004550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004554:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004556:	430b      	orrs	r3, r1
 8004558:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800455c:	f013 0f20 	tst.w	r3, #32
 8004560:	d006      	beq.n	8004570 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004562:	6802      	ldr	r2, [r0, #0]
 8004564:	6893      	ldr	r3, [r2, #8]
 8004566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800456c:	430b      	orrs	r3, r1
 800456e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004572:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004578:	6802      	ldr	r2, [r0, #0]
 800457a:	6853      	ldr	r3, [r2, #4]
 800457c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004580:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004582:	430b      	orrs	r3, r1
 8004584:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004586:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458c:	d00b      	beq.n	80045a6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004590:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004594:	d006      	beq.n	80045a4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	6853      	ldr	r3, [r2, #4]
 800459a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800459e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6053      	str	r3, [r2, #4]
}
 80045a4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a6:	6802      	ldr	r2, [r0, #0]
 80045a8:	6853      	ldr	r3, [r2, #4]
 80045aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6053      	str	r3, [r2, #4]
 80045b4:	e7eb      	b.n	800458e <UART_AdvFeatureConfig+0xa2>

080045b6 <UART_WaitOnFlagUntilTimeout>:
{
 80045b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ba:	4605      	mov	r5, r0
 80045bc:	460f      	mov	r7, r1
 80045be:	4616      	mov	r6, r2
 80045c0:	4699      	mov	r9, r3
 80045c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c6:	682c      	ldr	r4, [r5, #0]
 80045c8:	69e4      	ldr	r4, [r4, #28]
 80045ca:	ea37 0304 	bics.w	r3, r7, r4
 80045ce:	bf0c      	ite	eq
 80045d0:	2401      	moveq	r4, #1
 80045d2:	2400      	movne	r4, #0
 80045d4:	42b4      	cmp	r4, r6
 80045d6:	d157      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80045d8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80045dc:	d0f3      	beq.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fc f90d 	bl	80007fc <HAL_GetTick>
 80045e2:	eba0 0009 	sub.w	r0, r0, r9
 80045e6:	4540      	cmp	r0, r8
 80045e8:	d82f      	bhi.n	800464a <UART_WaitOnFlagUntilTimeout+0x94>
 80045ea:	f1b8 0f00 	cmp.w	r8, #0
 80045ee:	d02c      	beq.n	800464a <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	f012 0f04 	tst.w	r2, #4
 80045f8:	d0e5      	beq.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004600:	d0e1      	beq.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004606:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004608:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	e852 3f00 	ldrex	r3, [r2]
 800460e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	e842 3100 	strex	r1, r3, [r2]
 8004616:	2900      	cmp	r1, #0
 8004618:	d1f6      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	f102 0308 	add.w	r3, r2, #8
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	3208      	adds	r2, #8
 800462a:	e842 3100 	strex	r1, r3, [r2]
 800462e:	2900      	cmp	r1, #0
 8004630:	d1f3      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8004632:	2320      	movs	r3, #32
 8004634:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004638:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8004640:	2300      	movs	r3, #0
 8004642:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8004646:	2003      	movs	r0, #3
 8004648:	e01f      	b.n	800468a <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800464a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	e852 3f00 	ldrex	r3, [r2]
 8004650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	e842 3100 	strex	r1, r3, [r2]
 8004658:	2900      	cmp	r1, #0
 800465a:	d1f6      	bne.n	800464a <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	f102 0308 	add.w	r3, r2, #8
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	3208      	adds	r2, #8
 800466c:	e842 3100 	strex	r1, r3, [r2]
 8004670:	2900      	cmp	r1, #0
 8004672:	d1f3      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8004674:	2320      	movs	r3, #32
 8004676:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800467a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800467e:	2300      	movs	r3, #0
 8004680:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8004684:	2003      	movs	r0, #3
 8004686:	e000      	b.n	800468a <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8004688:	2000      	movs	r0, #0
}
 800468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800468e <UART_CheckIdleState>:
{
 800468e:	b530      	push	{r4, r5, lr}
 8004690:	b083      	sub	sp, #12
 8004692:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800469a:	f7fc f8af 	bl	80007fc <HAL_GetTick>
 800469e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f013 0f08 	tst.w	r3, #8
 80046a8:	d10f      	bne.n	80046ca <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f013 0f04 	tst.w	r3, #4
 80046b2:	d118      	bne.n	80046e6 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80046b4:	2320      	movs	r3, #32
 80046b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80046ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	2000      	movs	r0, #0
 80046c0:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80046c2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80046c6:	b003      	add	sp, #12
 80046c8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	4603      	mov	r3, r0
 80046d2:	2200      	movs	r2, #0
 80046d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff ff6c 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0e3      	beq.n	80046aa <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80046e2:	2003      	movs	r0, #3
 80046e4:	e7ef      	b.n	80046c6 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462b      	mov	r3, r5
 80046ee:	2200      	movs	r2, #0
 80046f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046f4:	4620      	mov	r0, r4
 80046f6:	f7ff ff5e 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d0da      	beq.n	80046b4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80046fe:	2003      	movs	r0, #3
 8004700:	e7e1      	b.n	80046c6 <UART_CheckIdleState+0x38>

08004702 <HAL_UART_Init>:
  if (huart == NULL)
 8004702:	b378      	cbz	r0, 8004764 <HAL_UART_Init+0x62>
{
 8004704:	b510      	push	{r4, lr}
 8004706:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004708:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800470c:	b30b      	cbz	r3, 8004752 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800470e:	2324      	movs	r3, #36	; 0x24
 8004710:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff fd7a 	bl	8004218 <UART_SetConfig>
 8004724:	2801      	cmp	r0, #1
 8004726:	d013      	beq.n	8004750 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800472a:	b9bb      	cbnz	r3, 800475c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	6853      	ldr	r3, [r2, #4]
 8004730:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004734:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	6893      	ldr	r3, [r2, #8]
 800473a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800473e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800474a:	4620      	mov	r0, r4
 800474c:	f7ff ff9f 	bl	800468e <UART_CheckIdleState>
}
 8004750:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004752:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8004756:	f7fc f9d3 	bl	8000b00 <HAL_UART_MspInit>
 800475a:	e7d8      	b.n	800470e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800475c:	4620      	mov	r0, r4
 800475e:	f7ff fec5 	bl	80044ec <UART_AdvFeatureConfig>
 8004762:	e7e3      	b.n	800472c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004764:	2001      	movs	r0, #1
}
 8004766:	4770      	bx	lr

08004768 <UART_Start_Receive_IT>:
{
 8004768:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800476a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800476c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004770:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8004778:	6883      	ldr	r3, [r0, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d006      	beq.n	800478e <UART_Start_Receive_IT+0x26>
 8004780:	b9a3      	cbnz	r3, 80047ac <UART_Start_Receive_IT+0x44>
 8004782:	6903      	ldr	r3, [r0, #16]
 8004784:	b973      	cbnz	r3, 80047a4 <UART_Start_Receive_IT+0x3c>
 8004786:	23ff      	movs	r3, #255	; 0xff
 8004788:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800478c:	e014      	b.n	80047b8 <UART_Start_Receive_IT+0x50>
 800478e:	6903      	ldr	r3, [r0, #16]
 8004790:	b923      	cbnz	r3, 800479c <UART_Start_Receive_IT+0x34>
 8004792:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004796:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800479a:	e00d      	b.n	80047b8 <UART_Start_Receive_IT+0x50>
 800479c:	23ff      	movs	r3, #255	; 0xff
 800479e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80047a2:	e009      	b.n	80047b8 <UART_Start_Receive_IT+0x50>
 80047a4:	237f      	movs	r3, #127	; 0x7f
 80047a6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80047aa:	e005      	b.n	80047b8 <UART_Start_Receive_IT+0x50>
 80047ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b0:	d02d      	beq.n	800480e <UART_Start_Receive_IT+0xa6>
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047be:	2322      	movs	r3, #34	; 0x22
 80047c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c4:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	f101 0308 	add.w	r3, r1, #8
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	3108      	adds	r1, #8
 80047d4:	e841 3400 	strex	r4, r3, [r1]
 80047d8:	2c00      	cmp	r4, #0
 80047da:	d1f3      	bne.n	80047c4 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80047dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80047de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e2:	d01e      	beq.n	8004822 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e4:	6883      	ldr	r3, [r0, #8]
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ea:	d043      	beq.n	8004874 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <UART_Start_Receive_IT+0x118>)
 80047ee:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80047f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	e852 3f00 	ldrex	r3, [r2]
 80047fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	e842 3100 	strex	r1, r3, [r2]
 8004804:	2900      	cmp	r1, #0
 8004806:	d1f6      	bne.n	80047f6 <UART_Start_Receive_IT+0x8e>
}
 8004808:	2000      	movs	r0, #0
 800480a:	bc10      	pop	{r4}
 800480c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800480e:	6903      	ldr	r3, [r0, #16]
 8004810:	b91b      	cbnz	r3, 800481a <UART_Start_Receive_IT+0xb2>
 8004812:	237f      	movs	r3, #127	; 0x7f
 8004814:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004818:	e7ce      	b.n	80047b8 <UART_Start_Receive_IT+0x50>
 800481a:	233f      	movs	r3, #63	; 0x3f
 800481c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004820:	e7ca      	b.n	80047b8 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004822:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8004826:	4293      	cmp	r3, r2
 8004828:	d8dc      	bhi.n	80047e4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	6883      	ldr	r3, [r0, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d01a      	beq.n	8004868 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <UART_Start_Receive_IT+0x11c>)
 8004834:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8004836:	2300      	movs	r3, #0
 8004838:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	e852 3f00 	ldrex	r3, [r2]
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	e842 3100 	strex	r1, r3, [r2]
 800484a:	2900      	cmp	r1, #0
 800484c:	d1f6      	bne.n	800483c <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800484e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	f102 0308 	add.w	r3, r2, #8
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	3208      	adds	r2, #8
 800485e:	e842 3100 	strex	r1, r3, [r2]
 8004862:	2900      	cmp	r1, #0
 8004864:	d1f3      	bne.n	800484e <UART_Start_Receive_IT+0xe6>
 8004866:	e7cf      	b.n	8004808 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004868:	6903      	ldr	r3, [r0, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e1      	bne.n	8004832 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <UART_Start_Receive_IT+0x120>)
 8004870:	6703      	str	r3, [r0, #112]	; 0x70
 8004872:	e7e0      	b.n	8004836 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004874:	6903      	ldr	r3, [r0, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1b8      	bne.n	80047ec <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <UART_Start_Receive_IT+0x124>)
 800487c:	6703      	str	r3, [r0, #112]	; 0x70
 800487e:	e7b7      	b.n	80047f0 <UART_Start_Receive_IT+0x88>
 8004880:	08003d75 	.word	0x08003d75
 8004884:	08003ed9 	.word	0x08003ed9
 8004888:	08004079 	.word	0x08004079
 800488c:	08003e27 	.word	0x08003e27

08004890 <HAL_UART_Receive_IT>:
{
 8004890:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004892:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004896:	2b20      	cmp	r3, #32
 8004898:	d11e      	bne.n	80048d8 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800489a:	b1f9      	cbz	r1, 80048dc <HAL_UART_Receive_IT+0x4c>
 800489c:	b302      	cbz	r2, 80048e0 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800489e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d01e      	beq.n	80048e4 <HAL_UART_Receive_IT+0x54>
 80048a6:	2301      	movs	r3, #1
 80048a8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ac:	2300      	movs	r3, #0
 80048ae:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048b0:	6803      	ldr	r3, [r0, #0]
 80048b2:	4c0d      	ldr	r4, [pc, #52]	; (80048e8 <HAL_UART_Receive_IT+0x58>)
 80048b4:	42a3      	cmp	r3, r4
 80048b6:	d00c      	beq.n	80048d2 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80048be:	d008      	beq.n	80048d2 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048c0:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	e854 3f00 	ldrex	r3, [r4]
 80048c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	e844 3500 	strex	r5, r3, [r4]
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	d1f6      	bne.n	80048c0 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 80048d2:	f7ff ff49 	bl	8004768 <UART_Start_Receive_IT>
 80048d6:	e000      	b.n	80048da <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80048d8:	2002      	movs	r0, #2
}
 80048da:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80048dc:	2001      	movs	r0, #1
 80048de:	e7fc      	b.n	80048da <HAL_UART_Receive_IT+0x4a>
 80048e0:	2001      	movs	r0, #1
 80048e2:	e7fa      	b.n	80048da <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80048e4:	2002      	movs	r0, #2
 80048e6:	e7f8      	b.n	80048da <HAL_UART_Receive_IT+0x4a>
 80048e8:	40008000 	.word	0x40008000

080048ec <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80048ec:	b082      	sub	sp, #8
 80048ee:	ab02      	add	r3, sp, #8
 80048f0:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80048f4:	6802      	ldr	r2, [r0, #0]
 80048f6:	6853      	ldr	r3, [r2, #4]
 80048f8:	f023 0310 	bic.w	r3, r3, #16
 80048fc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004900:	430b      	orrs	r3, r1
 8004902:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8004904:	6802      	ldr	r2, [r0, #0]
 8004906:	6853      	ldr	r3, [r2, #4]
 8004908:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800490c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004910:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004914:	6053      	str	r3, [r2, #4]
}
 8004916:	b002      	add	sp, #8
 8004918:	4770      	bx	lr
	...

0800491c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800491c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800491e:	b92b      	cbnz	r3, 800492c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8004920:	2301      	movs	r3, #1
 8004922:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004926:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800492a:	4770      	bx	lr
{
 800492c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800492e:	6803      	ldr	r3, [r0, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004936:	6899      	ldr	r1, [r3, #8]
 8004938:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800493a:	4d09      	ldr	r5, [pc, #36]	; (8004960 <UARTEx_SetNbDataToProcess+0x44>)
 800493c:	5c6b      	ldrb	r3, [r5, r1]
 800493e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004940:	4c08      	ldr	r4, [pc, #32]	; (8004964 <UARTEx_SetNbDataToProcess+0x48>)
 8004942:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004944:	fb93 f3f1 	sdiv	r3, r3, r1
 8004948:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800494c:	5cab      	ldrb	r3, [r5, r2]
 800494e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004950:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004952:	fb93 f3f2 	sdiv	r3, r3, r2
 8004956:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800495a:	bc30      	pop	{r4, r5}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	08007b44 	.word	0x08007b44
 8004964:	08007b3c 	.word	0x08007b3c

08004968 <HAL_UARTEx_WakeupCallback>:
}
 8004968:	4770      	bx	lr

0800496a <HAL_UARTEx_RxFifoFullCallback>:
}
 800496a:	4770      	bx	lr

0800496c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800496c:	4770      	bx	lr

0800496e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800496e:	b510      	push	{r4, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	ab04      	add	r3, sp, #16
 8004974:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8004978:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800497c:	2b01      	cmp	r3, #1
 800497e:	d035      	beq.n	80049ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8004980:	4604      	mov	r4, r0
 8004982:	2301      	movs	r3, #1
 8004984:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004988:	2324      	movs	r3, #36	; 0x24
 800498a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800498e:	6802      	ldr	r2, [r0, #0]
 8004990:	6813      	ldr	r3, [r2, #0]
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	688b      	ldr	r3, [r1, #8]
 800499c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049a0:	9a02      	ldr	r2, [sp, #8]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80049a6:	b1aa      	cbz	r2, 80049d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80049a8:	6822      	ldr	r2, [r4, #0]
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80049b2:	f7fb ff23 	bl	80007fc <HAL_GetTick>
 80049b6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80049bc:	9200      	str	r2, [sp, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7ff fdf6 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 80049ca:	b948      	cbnz	r0, 80049e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80049cc:	2320      	movs	r3, #32
 80049ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80049d2:	e006      	b.n	80049e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80049d4:	ab04      	add	r3, sp, #16
 80049d6:	e913 0006 	ldmdb	r3, {r1, r2}
 80049da:	f7ff ff87 	bl	80048ec <UARTEx_Wakeup_AddressConfig>
 80049de:	e7e3      	b.n	80049a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80049e0:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80049e2:	2300      	movs	r3, #0
 80049e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80049e8:	b004      	add	sp, #16
 80049ea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80049ec:	2002      	movs	r0, #2
 80049ee:	e7fb      	b.n	80049e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080049f0 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80049f0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d010      	beq.n	8004a1a <HAL_UARTEx_EnableStopMode+0x2a>
 80049f8:	2301      	movs	r3, #1
 80049fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80049fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	e852 3f00 	ldrex	r3, [r2]
 8004a04:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	e842 3100 	strex	r1, r3, [r2]
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	d1f6      	bne.n	80049fe <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8004a10:	2300      	movs	r3, #0
 8004a12:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8004a16:	4618      	mov	r0, r3
 8004a18:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004a1a:	2002      	movs	r0, #2
}
 8004a1c:	4770      	bx	lr

08004a1e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8004a1e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d01d      	beq.n	8004a62 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8004a26:	b510      	push	{r4, lr}
 8004a28:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004a30:	2324      	movs	r3, #36	; 0x24
 8004a32:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a36:	6802      	ldr	r2, [r0, #0]
 8004a38:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004a3a:	6811      	ldr	r1, [r2, #0]
 8004a3c:	f021 0101 	bic.w	r1, r1, #1
 8004a40:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8004a46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004a4a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4c:	6802      	ldr	r2, [r0, #0]
 8004a4e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8004a50:	f7ff ff64 	bl	800491c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004a54:	2320      	movs	r3, #32
 8004a56:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004a60:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8004a62:	2002      	movs	r0, #2
}
 8004a64:	4770      	bx	lr

08004a66 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004a66:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004a68:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d01d      	beq.n	8004aac <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004a70:	4604      	mov	r4, r0
 8004a72:	2301      	movs	r3, #1
 8004a74:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004a78:	2324      	movs	r3, #36	; 0x24
 8004a7a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a7e:	6803      	ldr	r3, [r0, #0]
 8004a80:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a8a:	6802      	ldr	r2, [r0, #0]
 8004a8c:	6893      	ldr	r3, [r2, #8]
 8004a8e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004a92:	4319      	orrs	r1, r3
 8004a94:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004a96:	f7ff ff41 	bl	800491c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004aac:	2002      	movs	r0, #2
 8004aae:	e7fc      	b.n	8004aaa <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004ab0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004ab0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004ab2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d01d      	beq.n	8004af6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004aba:	4604      	mov	r4, r0
 8004abc:	2301      	movs	r3, #1
 8004abe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8004ac2:	2324      	movs	r3, #36	; 0x24
 8004ac4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ac8:	6803      	ldr	r3, [r0, #0]
 8004aca:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ad4:	6802      	ldr	r2, [r0, #0]
 8004ad6:	6893      	ldr	r3, [r2, #8]
 8004ad8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8004adc:	4319      	orrs	r1, r3
 8004ade:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004ae0:	f7ff ff1c 	bl	800491c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004aee:	2000      	movs	r0, #0
 8004af0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004af4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004af6:	2002      	movs	r0, #2
 8004af8:	e7fc      	b.n	8004af4 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08004afa <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8004afa:	2001      	movs	r0, #1
 8004afc:	4770      	bx	lr
	...

08004b00 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8004b00:	280a      	cmp	r0, #10
 8004b02:	d807      	bhi.n	8004b14 <RadioGetLoRaBandwidthInHz+0x14>
 8004b04:	e8df f000 	tbb	[pc, r0]
 8004b08:	17110b20 	.word	0x17110b20
 8004b0c:	061e1c1a 	.word	0x061e1c1a
 8004b10:	0e08      	.short	0x0e08
 8004b12:	14          	.byte	0x14
 8004b13:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8004b14:	2000      	movs	r0, #0
 8004b16:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 8004b18:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8004b1c:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 8004b1e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8004b22:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 8004b24:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8004b28:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 8004b2a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8004b2e:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 8004b30:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8004b34:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 8004b36:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8004b3a:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8004b3c:	4804      	ldr	r0, [pc, #16]	; (8004b50 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8004b3e:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8004b40:	4804      	ldr	r0, [pc, #16]	; (8004b54 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8004b42:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8004b44:	4804      	ldr	r0, [pc, #16]	; (8004b58 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8004b46:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8004b48:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	0001e848 	.word	0x0001e848
 8004b54:	0003d090 	.word	0x0003d090
 8004b58:	0007a120 	.word	0x0007a120

08004b5c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8004b5c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8004b60:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004b62:	b953      	cbnz	r3, 8004b7a <RadioGetGfskTimeOnAirNumerator+0x1e>
 8004b64:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8004b66:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004b68:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8004b6a:	b141      	cbz	r1, 8004b7e <RadioGetGfskTimeOnAirNumerator+0x22>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	f89d 0000 	ldrb.w	r0, [sp]
 8004b72:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8004b74:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8004b78:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e7f3      	b.n	8004b66 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e7f5      	b.n	8004b6e <RadioGetGfskTimeOnAirNumerator+0x12>

08004b82 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8004b82:	b4f0      	push	{r4, r5, r6, r7}
 8004b84:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8004b88:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8004b8c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8004b8e:	1f4d      	subs	r5, r1, #5
 8004b90:	2d01      	cmp	r5, #1
 8004b92:	d92d      	bls.n	8004bf0 <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004b94:	b918      	cbnz	r0, 8004b9e <RadioGetLoRaTimeOnAirNumerator+0x1c>
 8004b96:	f1a1 050b 	sub.w	r5, r1, #11
 8004b9a:	2d01      	cmp	r5, #1
 8004b9c:	d930      	bls.n	8004c00 <RadioGetLoRaTimeOnAirNumerator+0x7e>
 8004b9e:	2801      	cmp	r0, #1
 8004ba0:	d02a      	beq.n	8004bf8 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 8004ba2:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004ba4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8004ba8:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 8004baa:	b36c      	cbz	r4, 8004c08 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8004bac:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004bae:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 8004bb0:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8004bb2:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8004bb6:	b34e      	cbz	r6, 8004c0c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8004bb8:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 8004bba:	442c      	add	r4, r5

    if( datarate <= 6 )
 8004bbc:	2906      	cmp	r1, #6
 8004bbe:	d903      	bls.n	8004bc8 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8004bc0:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 8004bc2:	b10f      	cbz	r7, 8004bc8 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004bc4:	1e88      	subs	r0, r1, #2
 8004bc6:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8004bc8:	2c00      	cmp	r4, #0
 8004bca:	db21      	blt.n	8004c10 <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004bcc:	4404      	add	r4, r0
 8004bce:	3c01      	subs	r4, #1
 8004bd0:	fb94 f4f0 	sdiv	r4, r4, r0
 8004bd4:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 8004bd8:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8004bdc:	2906      	cmp	r1, #6
 8004bde:	d801      	bhi.n	8004be4 <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 8004be0:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8004be4:	0080      	lsls	r0, r0, #2
 8004be6:	3001      	adds	r0, #1
 8004be8:	3902      	subs	r1, #2
}
 8004bea:	4088      	lsls	r0, r1
 8004bec:	bcf0      	pop	{r4, r5, r6, r7}
 8004bee:	4770      	bx	lr
        if( preambleLen < 12 )
 8004bf0:	2b0b      	cmp	r3, #11
 8004bf2:	d8cf      	bhi.n	8004b94 <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 8004bf4:	230c      	movs	r3, #12
 8004bf6:	e7cd      	b.n	8004b94 <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004bf8:	290c      	cmp	r1, #12
 8004bfa:	d003      	beq.n	8004c04 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8004bfc:	2700      	movs	r7, #0
 8004bfe:	e7d1      	b.n	8004ba4 <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 8004c00:	2701      	movs	r7, #1
 8004c02:	e7cf      	b.n	8004ba4 <RadioGetLoRaTimeOnAirNumerator+0x22>
 8004c04:	2701      	movs	r7, #1
 8004c06:	e7cd      	b.n	8004ba4 <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 8004c08:	2400      	movs	r4, #0
 8004c0a:	e7d0      	b.n	8004bae <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 8004c0c:	2414      	movs	r4, #20
 8004c0e:	e7d4      	b.n	8004bba <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 8004c10:	2400      	movs	r4, #0
 8004c12:	e7db      	b.n	8004bcc <RadioGetLoRaTimeOnAirNumerator+0x4a>

08004c14 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8004c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c16:	b085      	sub	sp, #20
 8004c18:	460e      	mov	r6, r1
 8004c1a:	4615      	mov	r5, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8004c22:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8004c26:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8004c2a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8004c2e:	b148      	cbz	r0, 8004c44 <RadioTimeOnAir+0x30>
 8004c30:	2801      	cmp	r0, #1
 8004c32:	d012      	beq.n	8004c5a <RadioTimeOnAir+0x46>
 8004c34:	2501      	movs	r5, #1
 8004c36:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8004c38:	1960      	adds	r0, r4, r5
 8004c3a:	3801      	subs	r0, #1
}
 8004c3c:	fbb0 f0f5 	udiv	r0, r0, r5
 8004c40:	b005      	add	sp, #20
 8004c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8004c44:	f8cd c004 	str.w	ip, [sp, #4]
 8004c48:	9700      	str	r7, [sp, #0]
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f7ff ff86 	bl	8004b5c <RadioGetGfskTimeOnAirNumerator>
 8004c50:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004c54:	fb04 f400 	mul.w	r4, r4, r0
        break;
 8004c58:	e7ee      	b.n	8004c38 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8004c5a:	f8cd c008 	str.w	ip, [sp, #8]
 8004c5e:	9701      	str	r7, [sp, #4]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	4613      	mov	r3, r2
 8004c64:	460a      	mov	r2, r1
 8004c66:	4629      	mov	r1, r5
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f7ff ff8a 	bl	8004b82 <RadioGetLoRaTimeOnAirNumerator>
 8004c6e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004c72:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8004c76:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <RadioTimeOnAir+0x70>)
 8004c78:	5d98      	ldrb	r0, [r3, r6]
 8004c7a:	f7ff ff41 	bl	8004b00 <RadioGetLoRaBandwidthInHz>
 8004c7e:	4605      	mov	r5, r0
        break;
 8004c80:	e7da      	b.n	8004c38 <RadioTimeOnAir+0x24>
 8004c82:	bf00      	nop
 8004c84:	08007bb8 	.word	0x08007bb8

08004c88 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8004c88:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004c8a:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <RadioOnTxTimeoutProcess+0x10>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	b113      	cbz	r3, 8004c96 <RadioOnTxTimeoutProcess+0xe>
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b103      	cbz	r3, 8004c96 <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 8004c94:	4798      	blx	r3
    }
}
 8004c96:	bd08      	pop	{r3, pc}
 8004c98:	20000384 	.word	0x20000384

08004c9c <RadioOnTxTimeoutIrq>:
{
 8004c9c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8004c9e:	f7ff fff3 	bl	8004c88 <RadioOnTxTimeoutProcess>
}
 8004ca2:	bd08      	pop	{r3, pc}

08004ca4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8004ca4:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004ca6:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <RadioOnRxTimeoutProcess+0x10>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	b113      	cbz	r3, 8004cb2 <RadioOnRxTimeoutProcess+0xe>
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	b103      	cbz	r3, 8004cb2 <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 8004cb0:	4798      	blx	r3
    }
}
 8004cb2:	bd08      	pop	{r3, pc}
 8004cb4:	20000384 	.word	0x20000384

08004cb8 <RadioOnRxTimeoutIrq>:
{
 8004cb8:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8004cba:	f7ff fff3 	bl	8004ca4 <RadioOnRxTimeoutProcess>
}
 8004cbe:	bd08      	pop	{r3, pc}

08004cc0 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4616      	mov	r6, r2
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	dd06      	ble.n	8004cd8 <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8004cca:	5ccc      	ldrb	r4, [r1, r3]
 8004ccc:	43e4      	mvns	r4, r4
 8004cce:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8004cd0:	2400      	movs	r4, #0
 8004cd2:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	e7f5      	b.n	8004cc4 <payload_integration+0x4>
    }

    for (i = 0; i < (size * 8); i++)
 8004cd8:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8004cda:	461f      	mov	r7, r3
 8004cdc:	e013      	b.n	8004d06 <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8004cde:	f103 0c07 	add.w	ip, r3, #7
 8004ce2:	e021      	b.n	8004d28 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8004ce4:	fa5f fc8c 	uxtb.w	ip, ip
 8004ce8:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8004cec:	fa4c f505 	asr.w	r5, ip, r5
 8004cf0:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8004cf4:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8004cf6:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 8004cfa:	fa07 fc04 	lsl.w	ip, r7, r4
 8004cfe:	5d44      	ldrb	r4, [r0, r5]
 8004d00:	ea44 040c 	orr.w	r4, r4, ip
 8004d04:	5544      	strb	r4, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 8004d06:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 8004d0a:	da23      	bge.n	8004d54 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8004d0c:	425d      	negs	r5, r3
 8004d0e:	f003 0407 	and.w	r4, r3, #7
 8004d12:	f005 0507 	and.w	r5, r5, #7
 8004d16:	bf58      	it	pl
 8004d18:	426c      	negpl	r4, r5
 8004d1a:	b2e5      	uxtb	r5, r4
 8004d1c:	f1c5 0507 	rsb	r5, r5, #7
 8004d20:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 8004d22:	469c      	mov	ip, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dbda      	blt.n	8004cde <payload_integration+0x1e>
 8004d28:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f1d3 0e00 	rsbs	lr, r3, #0
 8004d32:	f003 0407 	and.w	r4, r3, #7
 8004d36:	f00e 0e07 	and.w	lr, lr, #7
 8004d3a:	bf58      	it	pl
 8004d3c:	f1ce 0400 	rsbpl	r4, lr, #0
 8004d40:	b2e4      	uxtb	r4, r4
 8004d42:	f1c4 0407 	rsb	r4, r4, #7
 8004d46:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 8004d48:	469e      	mov	lr, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	daca      	bge.n	8004ce4 <payload_integration+0x24>
 8004d4e:	f103 0e07 	add.w	lr, r3, #7
 8004d52:	e7c7      	b.n	8004ce4 <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8004d54:	01bb      	lsls	r3, r7, #6
 8004d56:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8004d5a:	b25b      	sxtb	r3, r3
 8004d5c:	b91f      	cbnz	r7, 8004d66 <payload_integration+0xa6>
 8004d5e:	2120      	movs	r1, #32
 8004d60:	430b      	orrs	r3, r1
 8004d62:	5483      	strb	r3, [r0, r2]
}
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8004d66:	2100      	movs	r1, #0
 8004d68:	e7fa      	b.n	8004d60 <payload_integration+0xa0>
	...

08004d6c <RadioSetMaxPayloadLength>:
{
 8004d6c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8004d6e:	2801      	cmp	r0, #1
 8004d70:	d004      	beq.n	8004d7c <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <RadioSetMaxPayloadLength+0x30>)
 8004d74:	7d5b      	ldrb	r3, [r3, #21]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d008      	beq.n	8004d8c <RadioSetMaxPayloadLength+0x20>
}
 8004d7a:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8004d7c:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <RadioSetMaxPayloadLength+0x34>)
 8004d7e:	7019      	strb	r1, [r3, #0]
 8004d80:	4806      	ldr	r0, [pc, #24]	; (8004d9c <RadioSetMaxPayloadLength+0x30>)
 8004d82:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004d84:	300e      	adds	r0, #14
 8004d86:	f001 fd37 	bl	80067f8 <SUBGRF_SetPacketParams>
 8004d8a:	e7f6      	b.n	8004d7a <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <RadioSetMaxPayloadLength+0x34>)
 8004d8e:	7019      	strb	r1, [r3, #0]
 8004d90:	4802      	ldr	r0, [pc, #8]	; (8004d9c <RadioSetMaxPayloadLength+0x30>)
 8004d92:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004d94:	300e      	adds	r0, #14
 8004d96:	f001 fd2f 	bl	80067f8 <SUBGRF_SetPacketParams>
}
 8004d9a:	e7ee      	b.n	8004d7a <RadioSetMaxPayloadLength+0xe>
 8004d9c:	20000890 	.word	0x20000890
 8004da0:	2000000c 	.word	0x2000000c

08004da4 <RadioRead>:
{
 8004da4:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 8004da6:	f001 fbdf 	bl	8006568 <SUBGRF_ReadRegister>
}
 8004daa:	bd08      	pop	{r3, pc}

08004dac <RadioWrite>:
{
 8004dac:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 8004dae:	f001 faeb 	bl	8006388 <SUBGRF_WriteRegister>
}
 8004db2:	bd08      	pop	{r3, pc}

08004db4 <RadioTxCw>:
{
 8004db4:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8004db6:	f001 fe35 	bl	8006a24 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8004dba:	2101      	movs	r1, #1
 8004dbc:	f001 fe1e 	bl	80069fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8004dc0:	f001 f970 	bl	80060a4 <SUBGRF_SetTxContinuousWave>
}
 8004dc4:	bd08      	pop	{r3, pc}
	...

08004dc8 <RadioTxPrbs>:
{
 8004dc8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4b07      	ldr	r3, [pc, #28]	; (8004dec <RadioTxPrbs+0x24>)
 8004dce:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8004dd2:	f001 fe13 	bl	80069fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8004dd6:	212d      	movs	r1, #45	; 0x2d
 8004dd8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8004ddc:	f7ff ffe6 	bl	8004dac <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8004de0:	f001 f967 	bl	80060b2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8004de4:	4802      	ldr	r0, [pc, #8]	; (8004df0 <RadioTxPrbs+0x28>)
 8004de6:	f001 f8f9 	bl	8005fdc <SUBGRF_SetTx>
}
 8004dea:	bd08      	pop	{r3, pc}
 8004dec:	20000890 	.word	0x20000890
 8004df0:	000fffff 	.word	0x000fffff

08004df4 <RadioSetRxDutyCycle>:
{
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <RadioSetRxDutyCycle+0x1c>)
 8004dfe:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8004e02:	f001 fdfb 	bl	80069fc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8004e06:	4629      	mov	r1, r5
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f001 f91b 	bl	8006044 <SUBGRF_SetRxDutyCycle>
}
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000890 	.word	0x20000890

08004e14 <RadioRxBoosted>:
{
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 8004e18:	f001 feda 	bl	8006bd0 <RFW_Is_Init>
 8004e1c:	2801      	cmp	r0, #1
 8004e1e:	d014      	beq.n	8004e4a <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8004e20:	2300      	movs	r3, #0
 8004e22:	461a      	mov	r2, r3
 8004e24:	f240 2162 	movw	r1, #610	; 0x262
 8004e28:	4608      	mov	r0, r1
 8004e2a:	f001 f9ec 	bl	8006206 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8004e2e:	b97c      	cbnz	r4, 8004e50 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8004e30:	4c0f      	ldr	r4, [pc, #60]	; (8004e70 <RadioRxBoosted+0x5c>)
 8004e32:	2100      	movs	r1, #0
 8004e34:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8004e38:	f001 fde0 	bl	80069fc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8004e3c:	7863      	ldrb	r3, [r4, #1]
 8004e3e:	b183      	cbz	r3, 8004e62 <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8004e40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004e44:	f001 fab0 	bl	80063a8 <SUBGRF_SetRxBoosted>
}
 8004e48:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 8004e4a:	f001 fec9 	bl	8006be0 <RFW_ReceiveInit>
 8004e4e:	e7ee      	b.n	8004e2e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004e50:	4d08      	ldr	r5, [pc, #32]	; (8004e74 <RadioRxBoosted+0x60>)
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f002 fad5 	bl	8007404 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f002 fa8c 	bl	8007378 <UTIL_TIMER_Start>
 8004e60:	e7e6      	b.n	8004e30 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8004e62:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <RadioRxBoosted+0x5c>)
 8004e64:	6898      	ldr	r0, [r3, #8]
 8004e66:	0180      	lsls	r0, r0, #6
 8004e68:	f001 fa9e 	bl	80063a8 <SUBGRF_SetRxBoosted>
}
 8004e6c:	e7ec      	b.n	8004e48 <RadioRxBoosted+0x34>
 8004e6e:	bf00      	nop
 8004e70:	20000890 	.word	0x20000890
 8004e74:	20000900 	.word	0x20000900

08004e78 <RadioStandby>:
{
 8004e78:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f001 f894 	bl	8005fa8 <SUBGRF_SetStandby>
}
 8004e80:	bd08      	pop	{r3, pc}

08004e82 <RadioGetStatus>:
{
 8004e82:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8004e84:	f001 f88a 	bl	8005f9c <SUBGRF_GetOperatingMode>
 8004e88:	2805      	cmp	r0, #5
 8004e8a:	d007      	beq.n	8004e9c <RadioGetStatus+0x1a>
 8004e8c:	2807      	cmp	r0, #7
 8004e8e:	d007      	beq.n	8004ea0 <RadioGetStatus+0x1e>
 8004e90:	2804      	cmp	r0, #4
 8004e92:	d001      	beq.n	8004e98 <RadioGetStatus+0x16>
            return RF_IDLE;
 8004e94:	2000      	movs	r0, #0
}
 8004e96:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8004e98:	2002      	movs	r0, #2
 8004e9a:	e7fc      	b.n	8004e96 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	e7fa      	b.n	8004e96 <RadioGetStatus+0x14>
            return RF_CAD;
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	e7f8      	b.n	8004e96 <RadioGetStatus+0x14>

08004ea4 <RadioIrqProcess>:
{
 8004ea4:	b530      	push	{r4, r5, lr}
 8004ea6:	b083      	sub	sp, #12
    uint8_t size = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8004eae:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 8004eb0:	4b9c      	ldr	r3, [pc, #624]	; (8005124 <RadioIrqProcess+0x280>)
 8004eb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d829      	bhi.n	8004f0e <RadioIrqProcess+0x6a>
 8004eba:	b21a      	sxth	r2, r3
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	f000 80eb 	beq.w	8005098 <RadioIrqProcess+0x1f4>
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	2b1f      	cmp	r3, #31
 8004ec6:	f200 80e7 	bhi.w	8005098 <RadioIrqProcess+0x1f4>
 8004eca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ece:	005f      	.short	0x005f
 8004ed0:	00e50075 	.word	0x00e50075
 8004ed4:	00e500df 	.word	0x00e500df
 8004ed8:	00e500e5 	.word	0x00e500e5
 8004edc:	00e500e7 	.word	0x00e500e7
 8004ee0:	00e500e5 	.word	0x00e500e5
 8004ee4:	00e500e5 	.word	0x00e500e5
 8004ee8:	00e500e5 	.word	0x00e500e5
 8004eec:	00e500f4 	.word	0x00e500f4
 8004ef0:	00e500e5 	.word	0x00e500e5
 8004ef4:	00e500e5 	.word	0x00e500e5
 8004ef8:	00e500e5 	.word	0x00e500e5
 8004efc:	00e500e5 	.word	0x00e500e5
 8004f00:	00e500e5 	.word	0x00e500e5
 8004f04:	00e500e5 	.word	0x00e500e5
 8004f08:	00e500e5 	.word	0x00e500e5
 8004f0c:	00fb      	.short	0x00fb
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f12:	f000 80a3 	beq.w	800505c <RadioIrqProcess+0x1b8>
 8004f16:	d924      	bls.n	8004f62 <RadioIrqProcess+0xbe>
 8004f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1c:	f040 80bc 	bne.w	8005098 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8004f20:	4b81      	ldr	r3, [pc, #516]	; (8005128 <RadioIrqProcess+0x284>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	2100      	movs	r1, #0
 8004f26:	2002      	movs	r0, #2
 8004f28:	f001 ff32 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8004f2c:	f001 f836 	bl	8005f9c <SUBGRF_GetOperatingMode>
 8004f30:	2804      	cmp	r0, #4
 8004f32:	f000 809e 	beq.w	8005072 <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8004f36:	f001 f831 	bl	8005f9c <SUBGRF_GetOperatingMode>
 8004f3a:	2805      	cmp	r0, #5
 8004f3c:	f040 80ac 	bne.w	8005098 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 8004f40:	487a      	ldr	r0, [pc, #488]	; (800512c <RadioIrqProcess+0x288>)
 8004f42:	f002 f9b7 	bl	80072b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8004f46:	2000      	movs	r0, #0
 8004f48:	f001 f82e 	bl	8005fa8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004f4c:	4b78      	ldr	r3, [pc, #480]	; (8005130 <RadioIrqProcess+0x28c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80a1 	beq.w	8005098 <RadioIrqProcess+0x1f4>
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 809d 	beq.w	8005098 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 8004f5e:	4798      	blx	r3
 8004f60:	e09a      	b.n	8005098 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	f000 80c7 	beq.w	80050f6 <RadioIrqProcess+0x252>
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	f040 8095 	bne.w	8005098 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f001 f81a 	bl	8005fa8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004f74:	4b6e      	ldr	r3, [pc, #440]	; (8005130 <RadioIrqProcess+0x28c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 808d 	beq.w	8005098 <RadioIrqProcess+0x1f4>
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8089 	beq.w	8005098 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 8004f86:	2000      	movs	r0, #0
 8004f88:	4798      	blx	r3
 8004f8a:	e085      	b.n	8005098 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 8004f8c:	4869      	ldr	r0, [pc, #420]	; (8005134 <RadioIrqProcess+0x290>)
 8004f8e:	f002 f991 	bl	80072b4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8004f92:	2000      	movs	r0, #0
 8004f94:	f001 f808 	bl	8005fa8 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8004f98:	f001 fe1c 	bl	8006bd4 <RFW_Is_LongPacketModeEnabled>
 8004f9c:	2801      	cmp	r0, #1
 8004f9e:	d008      	beq.n	8004fb2 <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004fa0:	4b63      	ldr	r3, [pc, #396]	; (8005130 <RadioIrqProcess+0x28c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d077      	beq.n	8005098 <RadioIrqProcess+0x1f4>
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d074      	beq.n	8005098 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 8004fae:	4798      	blx	r3
 8004fb0:	e072      	b.n	8005098 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 8004fb2:	f001 fe18 	bl	8006be6 <RFW_DeInit_TxLongPacket>
 8004fb6:	e7f3      	b.n	8004fa0 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 8004fb8:	485c      	ldr	r0, [pc, #368]	; (800512c <RadioIrqProcess+0x288>)
 8004fba:	f002 f97b 	bl	80072b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8004fbe:	4b59      	ldr	r3, [pc, #356]	; (8005124 <RadioIrqProcess+0x280>)
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	b1f3      	cbz	r3, 8005002 <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8004fc4:	22ff      	movs	r2, #255	; 0xff
 8004fc6:	f10d 0107 	add.w	r1, sp, #7
 8004fca:	485b      	ldr	r0, [pc, #364]	; (8005138 <RadioIrqProcess+0x294>)
 8004fcc:	f001 fcfc 	bl	80069c8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8004fd0:	485a      	ldr	r0, [pc, #360]	; (800513c <RadioIrqProcess+0x298>)
 8004fd2:	f001 f99d 	bl	8006310 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004fd6:	4b56      	ldr	r3, [pc, #344]	; (8005130 <RadioIrqProcess+0x28c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d05c      	beq.n	8005098 <RadioIrqProcess+0x1f4>
 8004fde:	689c      	ldr	r4, [r3, #8]
 8004fe0:	2c00      	cmp	r4, #0
 8004fe2:	d059      	beq.n	8005098 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <RadioIrqProcess+0x280>)
 8004fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d11d      	bne.n	800502a <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8004fee:	4a4d      	ldr	r2, [pc, #308]	; (8005124 <RadioIrqProcess+0x280>)
 8004ff0:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8004ff4:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8004ff8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004ffc:	484e      	ldr	r0, [pc, #312]	; (8005138 <RadioIrqProcess+0x294>)
 8004ffe:	47a0      	blx	r4
                break;
 8005000:	e04a      	b.n	8005098 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8005002:	2000      	movs	r0, #0
 8005004:	f000 ffd0 	bl	8005fa8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8005008:	2100      	movs	r1, #0
 800500a:	f640 1002 	movw	r0, #2306	; 0x902
 800500e:	f001 f9bb 	bl	8006388 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8005012:	f640 1044 	movw	r0, #2372	; 0x944
 8005016:	f001 faa7 	bl	8006568 <SUBGRF_ReadRegister>
 800501a:	f040 0102 	orr.w	r1, r0, #2
 800501e:	b2c9      	uxtb	r1, r1
 8005020:	f640 1044 	movw	r0, #2372	; 0x944
 8005024:	f001 f9b0 	bl	8006388 <SUBGRF_WriteRegister>
 8005028:	e7cc      	b.n	8004fc4 <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800502a:	4c3e      	ldr	r4, [pc, #248]	; (8005124 <RadioIrqProcess+0x280>)
 800502c:	4669      	mov	r1, sp
 800502e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005030:	f001 fd80 	bl	8006b34 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8005034:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <RadioIrqProcess+0x28c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689d      	ldr	r5, [r3, #8]
 800503a:	9b00      	ldr	r3, [sp, #0]
 800503c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005040:	4a3f      	ldr	r2, [pc, #252]	; (8005140 <RadioIrqProcess+0x29c>)
 8005042:	fb82 1203 	smull	r1, r2, r2, r3
 8005046:	17db      	asrs	r3, r3, #31
 8005048:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800504c:	b25b      	sxtb	r3, r3
 800504e:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8005052:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005056:	4838      	ldr	r0, [pc, #224]	; (8005138 <RadioIrqProcess+0x294>)
 8005058:	47a8      	blx	r5
                break;
 800505a:	e01d      	b.n	8005098 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800505c:	2000      	movs	r0, #0
 800505e:	f000 ffa3 	bl	8005fa8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005062:	4b33      	ldr	r3, [pc, #204]	; (8005130 <RadioIrqProcess+0x28c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	b1bb      	cbz	r3, 8005098 <RadioIrqProcess+0x1f4>
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	b1ab      	cbz	r3, 8005098 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 800506c:	2001      	movs	r0, #1
 800506e:	4798      	blx	r3
 8005070:	e012      	b.n	8005098 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 8005072:	4830      	ldr	r0, [pc, #192]	; (8005134 <RadioIrqProcess+0x290>)
 8005074:	f002 f91e 	bl	80072b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005078:	2000      	movs	r0, #0
 800507a:	f000 ff95 	bl	8005fa8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800507e:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <RadioIrqProcess+0x28c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	b14b      	cbz	r3, 8005098 <RadioIrqProcess+0x1f4>
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b13b      	cbz	r3, 8005098 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 8005088:	4798      	blx	r3
 800508a:	e005      	b.n	8005098 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800508c:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <RadioIrqProcess+0x2a0>)
 800508e:	2201      	movs	r2, #1
 8005090:	2100      	movs	r1, #0
 8005092:	2002      	movs	r0, #2
 8005094:	f001 fe7c 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
}
 8005098:	b003      	add	sp, #12
 800509a:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800509c:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <RadioIrqProcess+0x2a4>)
 800509e:	2201      	movs	r2, #1
 80050a0:	2100      	movs	r1, #0
 80050a2:	2002      	movs	r0, #2
 80050a4:	f001 fe74 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 80050a8:	f001 fd92 	bl	8006bd0 <RFW_Is_Init>
 80050ac:	2801      	cmp	r0, #1
 80050ae:	d1f3      	bne.n	8005098 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 80050b0:	f001 fd9a 	bl	8006be8 <RFW_ReceivePayload>
 80050b4:	e7f0      	b.n	8005098 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80050b6:	4b25      	ldr	r3, [pc, #148]	; (800514c <RadioIrqProcess+0x2a8>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	2100      	movs	r1, #0
 80050bc:	2002      	movs	r0, #2
 80050be:	f001 fe67 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80050c2:	e7e9      	b.n	8005098 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 80050c4:	4819      	ldr	r0, [pc, #100]	; (800512c <RadioIrqProcess+0x288>)
 80050c6:	f002 f8f5 	bl	80072b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80050ca:	4b16      	ldr	r3, [pc, #88]	; (8005124 <RadioIrqProcess+0x280>)
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	b173      	cbz	r3, 80050ee <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <RadioIrqProcess+0x28c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0df      	beq.n	8005098 <RadioIrqProcess+0x1f4>
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0dc      	beq.n	8005098 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 80050de:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <RadioIrqProcess+0x2ac>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	2100      	movs	r1, #0
 80050e6:	2002      	movs	r0, #2
 80050e8:	f001 fe52 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
 80050ec:	e7d4      	b.n	8005098 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 80050ee:	2000      	movs	r0, #0
 80050f0:	f000 ff5a 	bl	8005fa8 <SUBGRF_SetStandby>
 80050f4:	e7ec      	b.n	80050d0 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <RadioIrqProcess+0x2b0>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	2100      	movs	r1, #0
 80050fc:	2002      	movs	r0, #2
 80050fe:	f001 fe47 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <RadioIrqProcess+0x280>)
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	b143      	cbz	r3, 800511a <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <RadioIrqProcess+0x28c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0c3      	beq.n	8005098 <RadioIrqProcess+0x1f4>
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0c0      	beq.n	8005098 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 8005116:	4798      	blx	r3
}
 8005118:	e7be      	b.n	8005098 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800511a:	2000      	movs	r0, #0
 800511c:	f000 ff44 	bl	8005fa8 <SUBGRF_SetStandby>
 8005120:	e7f2      	b.n	8005108 <RadioIrqProcess+0x264>
 8005122:	bf00      	nop
 8005124:	20000890 	.word	0x20000890
 8005128:	08007b4c 	.word	0x08007b4c
 800512c:	20000900 	.word	0x20000900
 8005130:	20000384 	.word	0x20000384
 8005134:	200008e8 	.word	0x200008e8
 8005138:	20000284 	.word	0x20000284
 800513c:	200008b4 	.word	0x200008b4
 8005140:	10624dd3 	.word	0x10624dd3
 8005144:	08007b60 	.word	0x08007b60
 8005148:	08007b6c 	.word	0x08007b6c
 800514c:	08007b78 	.word	0x08007b78
 8005150:	08007b84 	.word	0x08007b84
 8005154:	08007b90 	.word	0x08007b90

08005158 <RadioOnDioIrq>:
{
 8005158:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800515a:	4b03      	ldr	r3, [pc, #12]	; (8005168 <RadioOnDioIrq+0x10>)
 800515c:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8005160:	f7ff fea0 	bl	8004ea4 <RadioIrqProcess>
}
 8005164:	bd08      	pop	{r3, pc}
 8005166:	bf00      	nop
 8005168:	20000890 	.word	0x20000890

0800516c <RadioGetWakeupTime>:
{
 800516c:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800516e:	f001 fc70 	bl	8006a52 <SUBGRF_GetRadioWakeUpTime>
}
 8005172:	3003      	adds	r0, #3
 8005174:	bd08      	pop	{r3, pc}

08005176 <RadioReadRegisters>:
{
 8005176:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005178:	f001 fbb0 	bl	80068dc <SUBGRF_ReadRegisters>
}
 800517c:	bd08      	pop	{r3, pc}

0800517e <RadioWriteRegisters>:
{
 800517e:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005180:	f001 faf8 	bl	8006774 <SUBGRF_WriteRegisters>
}
 8005184:	bd08      	pop	{r3, pc}

08005186 <RadioRssi>:
{
 8005186:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8005188:	f001 f8b4 	bl	80062f4 <SUBGRF_GetRssiInst>
}
 800518c:	b200      	sxth	r0, r0
 800518e:	bd08      	pop	{r3, pc}

08005190 <RadioSetTxContinuousWave>:
{
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005194:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005198:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 800519c:	f001 f86a 	bl	8006274 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80051a0:	4628      	mov	r0, r5
 80051a2:	f001 fc3f 	bl	8006a24 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80051a6:	2101      	movs	r1, #1
 80051a8:	f001 fc28 	bl	80069fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80051ac:	f000 ff7a 	bl	80060a4 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80051b0:	4d04      	ldr	r5, [pc, #16]	; (80051c4 <RadioSetTxContinuousWave+0x34>)
 80051b2:	4621      	mov	r1, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	f002 f925 	bl	8007404 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80051ba:	4628      	mov	r0, r5
 80051bc:	f002 f8dc 	bl	8007378 <UTIL_TIMER_Start>
}
 80051c0:	bd38      	pop	{r3, r4, r5, pc}
 80051c2:	bf00      	nop
 80051c4:	200008e8 	.word	0x200008e8

080051c8 <RadioSetChannel>:
{
 80051c8:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80051ca:	f001 f853 	bl	8006274 <SUBGRF_SetRfFrequency>
}
 80051ce:	bd08      	pop	{r3, pc}

080051d0 <RadioStartCad>:
{
 80051d0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80051d2:	2100      	movs	r1, #0
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <RadioStartCad+0x24>)
 80051d6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80051da:	f001 fc0f 	bl	80069fc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80051de:	2300      	movs	r3, #0
 80051e0:	461a      	mov	r2, r3
 80051e2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80051e6:	4608      	mov	r0, r1
 80051e8:	f001 f80d 	bl	8006206 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80051ec:	f000 ff4e 	bl	800608c <SUBGRF_SetCad>
}
 80051f0:	bd08      	pop	{r3, pc}
 80051f2:	bf00      	nop
 80051f4:	20000890 	.word	0x20000890

080051f8 <RadioRx>:
{
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 80051fc:	f001 fce8 	bl	8006bd0 <RFW_Is_Init>
 8005200:	2801      	cmp	r0, #1
 8005202:	d014      	beq.n	800522e <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005204:	2300      	movs	r3, #0
 8005206:	461a      	mov	r2, r3
 8005208:	f240 2162 	movw	r1, #610	; 0x262
 800520c:	4608      	mov	r0, r1
 800520e:	f000 fffa 	bl	8006206 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005212:	b97c      	cbnz	r4, 8005234 <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005214:	4c0f      	ldr	r4, [pc, #60]	; (8005254 <RadioRx+0x5c>)
 8005216:	2100      	movs	r1, #0
 8005218:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800521c:	f001 fbee 	bl	80069fc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8005220:	7863      	ldrb	r3, [r4, #1]
 8005222:	b183      	cbz	r3, 8005246 <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005224:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005228:	f000 fef2 	bl	8006010 <SUBGRF_SetRx>
}
 800522c:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 800522e:	f001 fcd7 	bl	8006be0 <RFW_ReceiveInit>
 8005232:	e7ee      	b.n	8005212 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005234:	4d08      	ldr	r5, [pc, #32]	; (8005258 <RadioRx+0x60>)
 8005236:	4621      	mov	r1, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f002 f8e3 	bl	8007404 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800523e:	4628      	mov	r0, r5
 8005240:	f002 f89a 	bl	8007378 <UTIL_TIMER_Start>
 8005244:	e7e6      	b.n	8005214 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005246:	4b03      	ldr	r3, [pc, #12]	; (8005254 <RadioRx+0x5c>)
 8005248:	6898      	ldr	r0, [r3, #8]
 800524a:	0180      	lsls	r0, r0, #6
 800524c:	f000 fee0 	bl	8006010 <SUBGRF_SetRx>
}
 8005250:	e7ec      	b.n	800522c <RadioRx+0x34>
 8005252:	bf00      	nop
 8005254:	20000890 	.word	0x20000890
 8005258:	20000900 	.word	0x20000900

0800525c <RadioSleep>:
{
 800525c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800525e:	f04f 0004 	mov.w	r0, #4
 8005262:	f001 f9db 	bl	800661c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8005266:	2002      	movs	r0, #2
 8005268:	f7fb facc 	bl	8000804 <HAL_Delay>
}
 800526c:	bd08      	pop	{r3, pc}
	...

08005270 <RadioSend>:
{
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	4605      	mov	r5, r0
 8005276:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005278:	2300      	movs	r3, #0
 800527a:	461a      	mov	r2, r3
 800527c:	f240 2101 	movw	r1, #513	; 0x201
 8005280:	4608      	mov	r0, r1
 8005282:	f000 ffc0 	bl	8006206 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8005286:	4e5a      	ldr	r6, [pc, #360]	; (80053f0 <RadioSend+0x180>)
 8005288:	2101      	movs	r1, #1
 800528a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800528e:	f001 fbb5 	bl	80069fc <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8005292:	7833      	ldrb	r3, [r6, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d103      	bne.n	80052a0 <RadioSend+0x30>
 8005298:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800529c:	2b06      	cmp	r3, #6
 800529e:	d012      	beq.n	80052c6 <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80052a0:	f640 0089 	movw	r0, #2185	; 0x889
 80052a4:	f001 f960 	bl	8006568 <SUBGRF_ReadRegister>
 80052a8:	f040 0104 	orr.w	r1, r0, #4
 80052ac:	b2c9      	uxtb	r1, r1
 80052ae:	f640 0089 	movw	r0, #2185	; 0x889
 80052b2:	f001 f869 	bl	8006388 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 80052b6:	4b4e      	ldr	r3, [pc, #312]	; (80053f0 <RadioSend+0x180>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d818      	bhi.n	80052f0 <RadioSend+0x80>
 80052be:	e8df f003 	tbb	[pc, r3]
 80052c2:	0d22      	.short	0x0d22
 80052c4:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80052c6:	f640 0089 	movw	r0, #2185	; 0x889
 80052ca:	f001 f94d 	bl	8006568 <SUBGRF_ReadRegister>
 80052ce:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80052d2:	f640 0089 	movw	r0, #2185	; 0x889
 80052d6:	f001 f857 	bl	8006388 <SUBGRF_WriteRegister>
 80052da:	e7ec      	b.n	80052b6 <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80052dc:	4844      	ldr	r0, [pc, #272]	; (80053f0 <RadioSend+0x180>)
 80052de:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80052e0:	300e      	adds	r0, #14
 80052e2:	f001 fa89 	bl	80067f8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80052e6:	2200      	movs	r2, #0
 80052e8:	4621      	mov	r1, r4
 80052ea:	4628      	mov	r0, r5
 80052ec:	f001 fb53 	bl	8006996 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80052f0:	4c40      	ldr	r4, [pc, #256]	; (80053f4 <RadioSend+0x184>)
 80052f2:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <RadioSend+0x180>)
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	4620      	mov	r0, r4
 80052f8:	f002 f884 	bl	8007404 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80052fc:	4620      	mov	r0, r4
 80052fe:	f002 f83b 	bl	8007378 <UTIL_TIMER_Start>
}
 8005302:	b002      	add	sp, #8
 8005304:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8005306:	f001 fc63 	bl	8006bd0 <RFW_Is_Init>
 800530a:	2801      	cmp	r0, #1
 800530c:	d00a      	beq.n	8005324 <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800530e:	4838      	ldr	r0, [pc, #224]	; (80053f0 <RadioSend+0x180>)
 8005310:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005312:	300e      	adds	r0, #14
 8005314:	f001 fa70 	bl	80067f8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005318:	2200      	movs	r2, #0
 800531a:	4621      	mov	r1, r4
 800531c:	4628      	mov	r0, r5
 800531e:	f001 fb3a 	bl	8006996 <SUBGRF_SendPayload>
 8005322:	e7e5      	b.n	80052f0 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005324:	f10d 0207 	add.w	r2, sp, #7
 8005328:	4621      	mov	r1, r4
 800532a:	4628      	mov	r0, r5
 800532c:	f001 fc55 	bl	8006bda <RFW_TransmitInit>
 8005330:	b968      	cbnz	r0, 800534e <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005332:	482f      	ldr	r0, [pc, #188]	; (80053f0 <RadioSend+0x180>)
 8005334:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005338:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800533a:	300e      	adds	r0, #14
 800533c:	f001 fa5c 	bl	80067f8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005340:	2200      	movs	r2, #0
 8005342:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005346:	4628      	mov	r0, r5
 8005348:	f001 fb25 	bl	8006996 <SUBGRF_SendPayload>
 800534c:	e7d0      	b.n	80052f0 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800534e:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <RadioSend+0x188>)
 8005350:	2201      	movs	r2, #1
 8005352:	2100      	movs	r1, #0
 8005354:	2002      	movs	r0, #2
 8005356:	f001 fd1b 	bl	8006d90 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800535a:	e7d2      	b.n	8005302 <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800535c:	4824      	ldr	r0, [pc, #144]	; (80053f0 <RadioSend+0x180>)
 800535e:	2302      	movs	r3, #2
 8005360:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005362:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005364:	300e      	adds	r0, #14
 8005366:	f001 fa47 	bl	80067f8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800536a:	2200      	movs	r2, #0
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f001 fb11 	bl	8006996 <SUBGRF_SendPayload>
            break;
 8005374:	e7bc      	b.n	80052f0 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 8005376:	4622      	mov	r2, r4
 8005378:	4629      	mov	r1, r5
 800537a:	4820      	ldr	r0, [pc, #128]	; (80053fc <RadioSend+0x18c>)
 800537c:	f7ff fca0 	bl	8004cc0 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005380:	4e1b      	ldr	r6, [pc, #108]	; (80053f0 <RadioSend+0x180>)
 8005382:	2302      	movs	r3, #2
 8005384:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005386:	1c65      	adds	r5, r4, #1
 8005388:	b2ed      	uxtb	r5, r5
 800538a:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800538c:	f106 000e 	add.w	r0, r6, #14
 8005390:	f001 fa32 	bl	80067f8 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8005394:	2100      	movs	r1, #0
 8005396:	20f1      	movs	r0, #241	; 0xf1
 8005398:	f7ff fd08 	bl	8004dac <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800539c:	2100      	movs	r1, #0
 800539e:	20f0      	movs	r0, #240	; 0xf0
 80053a0:	f7ff fd04 	bl	8004dac <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80053a4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d019      	beq.n	80053de <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80053aa:	21e1      	movs	r1, #225	; 0xe1
 80053ac:	20f3      	movs	r0, #243	; 0xf3
 80053ae:	f7ff fcfd 	bl	8004dac <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80053b2:	2104      	movs	r1, #4
 80053b4:	20f2      	movs	r0, #242	; 0xf2
 80053b6:	f7ff fcf9 	bl	8004dac <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 80053ba:	00e1      	lsls	r1, r4, #3
 80053bc:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80053be:	0a09      	lsrs	r1, r1, #8
 80053c0:	20f4      	movs	r0, #244	; 0xf4
 80053c2:	f7ff fcf3 	bl	8004dac <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80053c6:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 80053ca:	20f5      	movs	r0, #245	; 0xf5
 80053cc:	f7ff fcee 	bl	8004dac <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80053d0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80053d4:	4629      	mov	r1, r5
 80053d6:	4809      	ldr	r0, [pc, #36]	; (80053fc <RadioSend+0x18c>)
 80053d8:	f001 fadd 	bl	8006996 <SUBGRF_SendPayload>
            break;
 80053dc:	e788      	b.n	80052f0 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80053de:	2170      	movs	r1, #112	; 0x70
 80053e0:	20f3      	movs	r0, #243	; 0xf3
 80053e2:	f7ff fce3 	bl	8004dac <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80053e6:	211d      	movs	r1, #29
 80053e8:	20f2      	movs	r0, #242	; 0xf2
 80053ea:	f7ff fcdf 	bl	8004dac <RadioWrite>
 80053ee:	e7e4      	b.n	80053ba <RadioSend+0x14a>
 80053f0:	20000890 	.word	0x20000890
 80053f4:	200008e8 	.word	0x200008e8
 80053f8:	08007ba0 	.word	0x08007ba0
 80053fc:	20000284 	.word	0x20000284

08005400 <RadioSetModem>:
{
 8005400:	b510      	push	{r4, lr}
 8005402:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <RadioSetModem+0x6c>)
 8005406:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 8005408:	f001 fbef 	bl	8006bea <RFW_SetRadioModem>
    switch( modem )
 800540c:	3c01      	subs	r4, #1
 800540e:	2c03      	cmp	r4, #3
 8005410:	d803      	bhi.n	800541a <RadioSetModem+0x1a>
 8005412:	e8df f004 	tbb	[pc, r4]
 8005416:	1509      	.short	0x1509
 8005418:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800541a:	2000      	movs	r0, #0
 800541c:	f001 f804 	bl	8006428 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <RadioSetModem+0x6c>)
 8005422:	2200      	movs	r2, #0
 8005424:	735a      	strb	r2, [r3, #13]
        break;
 8005426:	e011      	b.n	800544c <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005428:	2001      	movs	r0, #1
 800542a:	f000 fffd 	bl	8006428 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <RadioSetModem+0x6c>)
 8005430:	7b5a      	ldrb	r2, [r3, #13]
 8005432:	7b18      	ldrb	r0, [r3, #12]
 8005434:	4282      	cmp	r2, r0
 8005436:	d009      	beq.n	800544c <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005438:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800543a:	f000 fa83 	bl	8005944 <RadioSetPublicNetwork>
 800543e:	e005      	b.n	800544c <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005440:	2002      	movs	r0, #2
 8005442:	f000 fff1 	bl	8006428 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <RadioSetModem+0x6c>)
 8005448:	2200      	movs	r2, #0
 800544a:	735a      	strb	r2, [r3, #13]
}
 800544c:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800544e:	2002      	movs	r0, #2
 8005450:	f000 ffea 	bl	8006428 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <RadioSetModem+0x6c>)
 8005456:	2200      	movs	r2, #0
 8005458:	735a      	strb	r2, [r3, #13]
        break;
 800545a:	e7f7      	b.n	800544c <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800545c:	2000      	movs	r0, #0
 800545e:	f000 ffe3 	bl	8006428 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005462:	4b02      	ldr	r3, [pc, #8]	; (800546c <RadioSetModem+0x6c>)
 8005464:	2200      	movs	r2, #0
 8005466:	735a      	strb	r2, [r3, #13]
}
 8005468:	e7f0      	b.n	800544c <RadioSetModem+0x4c>
 800546a:	bf00      	nop
 800546c:	20000890 	.word	0x20000890

08005470 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8005470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	4605      	mov	r5, r0
 8005478:	460c      	mov	r4, r1
 800547a:	4617      	mov	r7, r2
 800547c:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800547e:	2300      	movs	r3, #0
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8005484:	f001 fba3 	bl	8006bce <RFW_DeInit>
    switch( modem )
 8005488:	2d01      	cmp	r5, #1
 800548a:	f000 8085 	beq.w	8005598 <RadioSetTxGenericConfig+0x128>
 800548e:	2d02      	cmp	r5, #2
 8005490:	f000 80ed 	beq.w	800566e <RadioSetTxGenericConfig+0x1fe>
 8005494:	b165      	cbz	r5, 80054b0 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005496:	4638      	mov	r0, r7
 8005498:	f001 fac4 	bl	8006a24 <SUBGRF_SetRfTxPower>
 800549c:	4c84      	ldr	r4, [pc, #528]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 800549e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80054a2:	f001 fb99 	bl	8006bd8 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80054a6:	6066      	str	r6, [r4, #4]
    return 0;
 80054a8:	2000      	movs	r0, #0
}
 80054aa:	b006      	add	sp, #24
 80054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80054b0:	68a3      	ldr	r3, [r4, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80f0 	beq.w	8005698 <RadioSetTxGenericConfig+0x228>
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80ef 	beq.w	800569e <RadioSetTxGenericConfig+0x22e>
        if( config->fsk.SyncWordLength > 8 )
 80054c0:	7d20      	ldrb	r0, [r4, #20]
 80054c2:	2808      	cmp	r0, #8
 80054c4:	f200 80ee 	bhi.w	80056a4 <RadioSetTxGenericConfig+0x234>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80054c8:	2100      	movs	r1, #0
 80054ca:	e006      	b.n	80054da <RadioSetTxGenericConfig+0x6a>
                syncword[i] = config->fsk.SyncWord[i];
 80054cc:	69a3      	ldr	r3, [r4, #24]
 80054ce:	5c5a      	ldrb	r2, [r3, r1]
 80054d0:	ab06      	add	r3, sp, #24
 80054d2:	440b      	add	r3, r1
 80054d4:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80054d8:	3101      	adds	r1, #1
 80054da:	4288      	cmp	r0, r1
 80054dc:	dcf6      	bgt.n	80054cc <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80054de:	4d74      	ldr	r5, [pc, #464]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 80054e0:	f04f 0800 	mov.w	r8, #0
 80054e4:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80054e8:	68a3      	ldr	r3, [r4, #8]
 80054ea:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80054ec:	7823      	ldrb	r3, [r4, #0]
 80054ee:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80054f2:	6860      	ldr	r0, [r4, #4]
 80054f4:	f001 fb04 	bl	8006b00 <SUBGRF_GetFskBandwidthRegValue>
 80054f8:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80054fc:	68e3      	ldr	r3, [r4, #12]
 80054fe:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005500:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800550a:	2304      	movs	r3, #4
 800550c:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800550e:	7d23      	ldrb	r3, [r4, #20]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005514:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005518:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800551c:	2b02      	cmp	r3, #2
 800551e:	d008      	beq.n	8005532 <RadioSetTxGenericConfig+0xc2>
 8005520:	7fa2      	ldrb	r2, [r4, #30]
 8005522:	2a02      	cmp	r2, #2
 8005524:	d005      	beq.n	8005532 <RadioSetTxGenericConfig+0xc2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005526:	7fe0      	ldrb	r0, [r4, #31]
 8005528:	4961      	ldr	r1, [pc, #388]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 800552a:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800552c:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800552e:	754a      	strb	r2, [r1, #21]
 8005530:	e018      	b.n	8005564 <RadioSetTxGenericConfig+0xf4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005532:	7fe2      	ldrb	r2, [r4, #31]
 8005534:	f102 030f 	add.w	r3, r2, #15
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d901      	bls.n	8005542 <RadioSetTxGenericConfig+0xd2>
 800553e:	2a01      	cmp	r2, #1
 8005540:	d127      	bne.n	8005592 <RadioSetTxGenericConfig+0x122>
            ConfigGeneric.rtx = CONFIG_TX;
 8005542:	2301      	movs	r3, #1
 8005544:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8005548:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800554a:	4a5a      	ldr	r2, [pc, #360]	; (80056b4 <RadioSetTxGenericConfig+0x244>)
 800554c:	4b5a      	ldr	r3, [pc, #360]	; (80056b8 <RadioSetTxGenericConfig+0x248>)
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	a801      	add	r0, sp, #4
 8005552:	f001 fb39 	bl	8006bc8 <RFW_Init>
 8005556:	b9e0      	cbnz	r0, 8005592 <RadioSetTxGenericConfig+0x122>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005558:	4b55      	ldr	r3, [pc, #340]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 800555a:	2200      	movs	r2, #0
 800555c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800555e:	2101      	movs	r1, #1
 8005560:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005562:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8005564:	f7ff fc88 	bl	8004e78 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8005568:	2000      	movs	r0, #0
 800556a:	f7ff ff49 	bl	8005400 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800556e:	4d53      	ldr	r5, [pc, #332]	; (80056bc <RadioSetTxGenericConfig+0x24c>)
 8005570:	4628      	mov	r0, r5
 8005572:	f000 ff71 	bl	8006458 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005576:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 800557a:	f001 f93d 	bl	80067f8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800557e:	a804      	add	r0, sp, #16
 8005580:	f001 f908 	bl	8006794 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8005584:	8ba0      	ldrh	r0, [r4, #28]
 8005586:	f001 f86b 	bl	8006660 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800558a:	8c20      	ldrh	r0, [r4, #32]
 800558c:	f001 f91f 	bl	80067ce <SUBGRF_SetCrcPolynomial>
        break;
 8005590:	e781      	b.n	8005496 <RadioSetTxGenericConfig+0x26>
                return -1;
 8005592:	f04f 30ff 	mov.w	r0, #4294967295
 8005596:	e788      	b.n	80054aa <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005598:	4b45      	ldr	r3, [pc, #276]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80055a0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80055a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80055a8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80055ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80055b0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80055b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80055b8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d036      	beq.n	800562e <RadioSetTxGenericConfig+0x1be>
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d039      	beq.n	8005638 <RadioSetTxGenericConfig+0x1c8>
 80055c4:	b373      	cbz	r3, 8005624 <RadioSetTxGenericConfig+0x1b4>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80055c6:	4d3a      	ldr	r5, [pc, #232]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 80055c8:	f04f 0801 	mov.w	r8, #1
 80055cc:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80055d0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80055d2:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80055d4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80055d8:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80055da:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80055de:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80055e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80055e6:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 80055ea:	f7ff fc45 	bl	8004e78 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80055ee:	4640      	mov	r0, r8
 80055f0:	f7ff ff06 	bl	8005400 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80055f4:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80055f8:	f000 ff2e 	bl	8006458 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80055fc:	f105 000e 	add.w	r0, r5, #14
 8005600:	f001 f8fa 	bl	80067f8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8005604:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8005608:	2b06      	cmp	r3, #6
 800560a:	d025      	beq.n	8005658 <RadioSetTxGenericConfig+0x1e8>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800560c:	f640 0089 	movw	r0, #2185	; 0x889
 8005610:	f000 ffaa 	bl	8006568 <SUBGRF_ReadRegister>
 8005614:	f040 0104 	orr.w	r1, r0, #4
 8005618:	b2c9      	uxtb	r1, r1
 800561a:	f640 0089 	movw	r0, #2185	; 0x889
 800561e:	f000 feb3 	bl	8006388 <SUBGRF_WriteRegister>
 8005622:	e738      	b.n	8005496 <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005624:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800562c:	e7cb      	b.n	80055c6 <RadioSetTxGenericConfig+0x156>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800562e:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005636:	e7c6      	b.n	80055c6 <RadioSetTxGenericConfig+0x156>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8005638:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800563c:	3b0b      	subs	r3, #11
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d904      	bls.n	800564e <RadioSetTxGenericConfig+0x1de>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800564c:	e7bb      	b.n	80055c6 <RadioSetTxGenericConfig+0x156>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800564e:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005656:	e7b6      	b.n	80055c6 <RadioSetTxGenericConfig+0x156>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005658:	f640 0089 	movw	r0, #2185	; 0x889
 800565c:	f000 ff84 	bl	8006568 <SUBGRF_ReadRegister>
 8005660:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005664:	f640 0089 	movw	r0, #2185	; 0x889
 8005668:	f000 fe8e 	bl	8006388 <SUBGRF_WriteRegister>
 800566c:	e713      	b.n	8005496 <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800566e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005670:	3b01      	subs	r3, #1
 8005672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005676:	d218      	bcs.n	80056aa <RadioSetTxGenericConfig+0x23a>
        RadioSetModem( MODEM_BPSK );
 8005678:	2002      	movs	r0, #2
 800567a:	f7ff fec1 	bl	8005400 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800567e:	480c      	ldr	r0, [pc, #48]	; (80056b0 <RadioSetTxGenericConfig+0x240>)
 8005680:	2302      	movs	r3, #2
 8005682:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8005686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005688:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800568a:	2316      	movs	r3, #22
 800568c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005690:	3038      	adds	r0, #56	; 0x38
 8005692:	f000 fee1 	bl	8006458 <SUBGRF_SetModulationParams>
        break;
 8005696:	e6fe      	b.n	8005496 <RadioSetTxGenericConfig+0x26>
            return -1;
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	e705      	b.n	80054aa <RadioSetTxGenericConfig+0x3a>
 800569e:	f04f 30ff 	mov.w	r0, #4294967295
 80056a2:	e702      	b.n	80054aa <RadioSetTxGenericConfig+0x3a>
            return -1;
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	e6ff      	b.n	80054aa <RadioSetTxGenericConfig+0x3a>
            return -1;
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295
 80056ae:	e6fc      	b.n	80054aa <RadioSetTxGenericConfig+0x3a>
 80056b0:	20000890 	.word	0x20000890
 80056b4:	200008e8 	.word	0x200008e8
 80056b8:	20000384 	.word	0x20000384
 80056bc:	200008c8 	.word	0x200008c8

080056c0 <RadioSetRxGenericConfig>:
{
 80056c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c2:	b087      	sub	sp, #28
 80056c4:	4607      	mov	r7, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	4615      	mov	r5, r2
 80056ca:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80056cc:	2300      	movs	r3, #0
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80056d2:	f001 fa7c 	bl	8006bce <RFW_DeInit>
    if( rxContinuous != 0 )
 80056d6:	b105      	cbz	r5, 80056da <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 80056d8:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80056da:	3d00      	subs	r5, #0
 80056dc:	bf18      	it	ne
 80056de:	2501      	movne	r5, #1
 80056e0:	4b94      	ldr	r3, [pc, #592]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 80056e2:	705d      	strb	r5, [r3, #1]
    switch( modem )
 80056e4:	b12f      	cbz	r7, 80056f2 <RadioSetRxGenericConfig+0x32>
 80056e6:	2f01      	cmp	r7, #1
 80056e8:	f000 8094 	beq.w	8005814 <RadioSetRxGenericConfig+0x154>
 80056ec:	2000      	movs	r0, #0
}
 80056ee:	b007      	add	sp, #28
 80056f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80056f2:	68e3      	ldr	r3, [r4, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8110 	beq.w	800591a <RadioSetRxGenericConfig+0x25a>
 80056fa:	6923      	ldr	r3, [r4, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 810f 	beq.w	8005920 <RadioSetRxGenericConfig+0x260>
        if( config->fsk.SyncWordLength > 8 )
 8005702:	7d63      	ldrb	r3, [r4, #21]
 8005704:	2b08      	cmp	r3, #8
 8005706:	f200 810e 	bhi.w	8005926 <RadioSetRxGenericConfig+0x266>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800570a:	2200      	movs	r2, #0
 800570c:	e006      	b.n	800571c <RadioSetRxGenericConfig+0x5c>
                syncword[i] = config->fsk.SyncWord[i];
 800570e:	69a1      	ldr	r1, [r4, #24]
 8005710:	5c88      	ldrb	r0, [r1, r2]
 8005712:	a906      	add	r1, sp, #24
 8005714:	4411      	add	r1, r2
 8005716:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800571a:	3201      	adds	r2, #1
 800571c:	4293      	cmp	r3, r2
 800571e:	dcf6      	bgt.n	800570e <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	3800      	subs	r0, #0
 8005724:	bf18      	it	ne
 8005726:	2001      	movne	r0, #1
 8005728:	f000 fcca 	bl	80060c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800572c:	4d81      	ldr	r5, [pc, #516]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 800572e:	2700      	movs	r7, #0
 8005730:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8005734:	68e3      	ldr	r3, [r4, #12]
 8005736:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8005738:	7923      	ldrb	r3, [r4, #4]
 800573a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800573e:	68a0      	ldr	r0, [r4, #8]
 8005740:	f001 f9de 	bl	8006b00 <SUBGRF_GetFskBandwidthRegValue>
 8005744:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005748:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800574a:	6923      	ldr	r3, [r4, #16]
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8005750:	7d23      	ldrb	r3, [r4, #20]
 8005752:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8005754:	7d63      	ldrb	r3, [r4, #21]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800575a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800575e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8005760:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005764:	b973      	cbnz	r3, 8005784 <RadioSetRxGenericConfig+0xc4>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8005766:	69e1      	ldr	r1, [r4, #28]
 8005768:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800576a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800576e:	2a02      	cmp	r2, #2
 8005770:	d012      	beq.n	8005798 <RadioSetRxGenericConfig+0xd8>
 8005772:	2b02      	cmp	r3, #2
 8005774:	d010      	beq.n	8005798 <RadioSetRxGenericConfig+0xd8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005776:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800577a:	496e      	ldr	r1, [pc, #440]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 800577c:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800577e:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8005780:	754b      	strb	r3, [r1, #21]
 8005782:	e023      	b.n	80057cc <RadioSetRxGenericConfig+0x10c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8005784:	2b02      	cmp	r3, #2
 8005786:	d003      	beq.n	8005790 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8005788:	4a6a      	ldr	r2, [pc, #424]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 800578a:	21ff      	movs	r1, #255	; 0xff
 800578c:	7591      	strb	r1, [r2, #22]
 800578e:	e7ec      	b.n	800576a <RadioSetRxGenericConfig+0xaa>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8005790:	4a68      	ldr	r2, [pc, #416]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 8005792:	21ff      	movs	r1, #255	; 0xff
 8005794:	7591      	strb	r1, [r2, #22]
 8005796:	e7e8      	b.n	800576a <RadioSetRxGenericConfig+0xaa>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005798:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800579c:	f102 030f 	add.w	r3, r2, #15
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d901      	bls.n	80057aa <RadioSetRxGenericConfig+0xea>
 80057a6:	2a01      	cmp	r2, #1
 80057a8:	d131      	bne.n	800580e <RadioSetRxGenericConfig+0x14e>
          ConfigGeneric.rtx = CONFIG_RX;
 80057aa:	2300      	movs	r3, #0
 80057ac:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 80057b0:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80057b2:	4a61      	ldr	r2, [pc, #388]	; (8005938 <RadioSetRxGenericConfig+0x278>)
 80057b4:	4b61      	ldr	r3, [pc, #388]	; (800593c <RadioSetRxGenericConfig+0x27c>)
 80057b6:	6819      	ldr	r1, [r3, #0]
 80057b8:	a801      	add	r0, sp, #4
 80057ba:	f001 fa05 	bl	8006bc8 <RFW_Init>
 80057be:	bb30      	cbnz	r0, 800580e <RadioSetRxGenericConfig+0x14e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80057c0:	4b5c      	ldr	r3, [pc, #368]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80057c6:	2101      	movs	r1, #1
 80057c8:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80057ca:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80057cc:	f7ff fb54 	bl	8004e78 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80057d0:	2000      	movs	r0, #0
 80057d2:	f7ff fe15 	bl	8005400 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80057d6:	4d5a      	ldr	r5, [pc, #360]	; (8005940 <RadioSetRxGenericConfig+0x280>)
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 fe3d 	bl	8006458 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057de:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 80057e2:	f001 f809 	bl	80067f8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80057e6:	a804      	add	r0, sp, #16
 80057e8:	f000 ffd4 	bl	8006794 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80057ec:	8c20      	ldrh	r0, [r4, #32]
 80057ee:	f000 ff37 	bl	8006660 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80057f2:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80057f4:	f000 ffeb 	bl	80067ce <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80057f8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80057fc:	fb03 f606 	mul.w	r6, r3, r6
 8005800:	68e3      	ldr	r3, [r4, #12]
 8005802:	fbb6 f6f3 	udiv	r6, r6, r3
 8005806:	f845 6c30 	str.w	r6, [r5, #-48]
    return status;
 800580a:	2000      	movs	r0, #0
        break;
 800580c:	e76f      	b.n	80056ee <RadioSetRxGenericConfig+0x2e>
            return -1;
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	e76c      	b.n	80056ee <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 8005814:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8088 	beq.w	800592c <RadioSetRxGenericConfig+0x26c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800581c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005820:	2b01      	cmp	r3, #1
 8005822:	d053      	beq.n	80058cc <RadioSetRxGenericConfig+0x20c>
            MaxPayloadLength = 0xFF;
 8005824:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8005826:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005828:	3800      	subs	r0, #0
 800582a:	bf18      	it	ne
 800582c:	2001      	movne	r0, #1
 800582e:	f000 fc47 	bl	80060c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005832:	b2f0      	uxtb	r0, r6
 8005834:	f000 fdd6 	bl	80063e4 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005838:	4b3e      	ldr	r3, [pc, #248]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8005840:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8005844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8005848:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8005850:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8005854:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8005858:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800585c:	2b01      	cmp	r3, #1
 800585e:	d03c      	beq.n	80058da <RadioSetRxGenericConfig+0x21a>
 8005860:	2b02      	cmp	r3, #2
 8005862:	d03f      	beq.n	80058e4 <RadioSetRxGenericConfig+0x224>
 8005864:	b3a3      	cbz	r3, 80058d0 <RadioSetRxGenericConfig+0x210>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005866:	4d33      	ldr	r5, [pc, #204]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 8005868:	2601      	movs	r6, #1
 800586a:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800586c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800586e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005870:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005874:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005876:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8005878:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800587c:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8005880:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005884:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8005888:	f7ff faf6 	bl	8004e78 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800588c:	4630      	mov	r0, r6
 800588e:	f7ff fdb7 	bl	8005400 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005892:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8005896:	f000 fddf 	bl	8006458 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800589a:	f105 000e 	add.w	r0, r5, #14
 800589e:	f000 ffab 	bl	80067f8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80058a2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80058a6:	42b3      	cmp	r3, r6
 80058a8:	d02c      	beq.n	8005904 <RadioSetRxGenericConfig+0x244>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80058aa:	f240 7036 	movw	r0, #1846	; 0x736
 80058ae:	f000 fe5b 	bl	8006568 <SUBGRF_ReadRegister>
 80058b2:	f040 0104 	orr.w	r1, r0, #4
 80058b6:	b2c9      	uxtb	r1, r1
 80058b8:	f240 7036 	movw	r0, #1846	; 0x736
 80058bc:	f000 fd64 	bl	8006388 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 80058c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c6:	609a      	str	r2, [r3, #8]
    return status;
 80058c8:	2000      	movs	r0, #0
        break;
 80058ca:	e710      	b.n	80056ee <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80058cc:	7f27      	ldrb	r7, [r4, #28]
 80058ce:	e7aa      	b.n	8005826 <RadioSetRxGenericConfig+0x166>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80058d8:	e7c5      	b.n	8005866 <RadioSetRxGenericConfig+0x1a6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80058da:	4b16      	ldr	r3, [pc, #88]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80058e2:	e7c0      	b.n	8005866 <RadioSetRxGenericConfig+0x1a6>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80058e4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80058e8:	3b0b      	subs	r3, #11
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d904      	bls.n	80058fa <RadioSetRxGenericConfig+0x23a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80058f0:	4b10      	ldr	r3, [pc, #64]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80058f8:	e7b5      	b.n	8005866 <RadioSetRxGenericConfig+0x1a6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <RadioSetRxGenericConfig+0x274>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005902:	e7b0      	b.n	8005866 <RadioSetRxGenericConfig+0x1a6>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8005904:	f240 7036 	movw	r0, #1846	; 0x736
 8005908:	f000 fe2e 	bl	8006568 <SUBGRF_ReadRegister>
 800590c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005910:	f240 7036 	movw	r0, #1846	; 0x736
 8005914:	f000 fd38 	bl	8006388 <SUBGRF_WriteRegister>
 8005918:	e7d2      	b.n	80058c0 <RadioSetRxGenericConfig+0x200>
            return -1;
 800591a:	f04f 30ff 	mov.w	r0, #4294967295
 800591e:	e6e6      	b.n	80056ee <RadioSetRxGenericConfig+0x2e>
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
 8005924:	e6e3      	b.n	80056ee <RadioSetRxGenericConfig+0x2e>
            return -1;
 8005926:	f04f 30ff 	mov.w	r0, #4294967295
 800592a:	e6e0      	b.n	80056ee <RadioSetRxGenericConfig+0x2e>
            return -1;
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	e6dd      	b.n	80056ee <RadioSetRxGenericConfig+0x2e>
 8005932:	bf00      	nop
 8005934:	20000890 	.word	0x20000890
 8005938:	20000900 	.word	0x20000900
 800593c:	20000384 	.word	0x20000384
 8005940:	200008c8 	.word	0x200008c8

08005944 <RadioSetPublicNetwork>:
{
 8005944:	b510      	push	{r4, lr}
 8005946:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8005948:	4b0e      	ldr	r3, [pc, #56]	; (8005984 <RadioSetPublicNetwork+0x40>)
 800594a:	7318      	strb	r0, [r3, #12]
 800594c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800594e:	2001      	movs	r0, #1
 8005950:	f7ff fd56 	bl	8005400 <RadioSetModem>
    if( enable == true )
 8005954:	b154      	cbz	r4, 800596c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8005956:	2134      	movs	r1, #52	; 0x34
 8005958:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800595c:	f000 fd14 	bl	8006388 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8005960:	2144      	movs	r1, #68	; 0x44
 8005962:	f240 7041 	movw	r0, #1857	; 0x741
 8005966:	f000 fd0f 	bl	8006388 <SUBGRF_WriteRegister>
}
 800596a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800596c:	2114      	movs	r1, #20
 800596e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005972:	f000 fd09 	bl	8006388 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005976:	2124      	movs	r1, #36	; 0x24
 8005978:	f240 7041 	movw	r0, #1857	; 0x741
 800597c:	f000 fd04 	bl	8006388 <SUBGRF_WriteRegister>
}
 8005980:	e7f3      	b.n	800596a <RadioSetPublicNetwork+0x26>
 8005982:	bf00      	nop
 8005984:	20000890 	.word	0x20000890

08005988 <RadioSetTxConfig>:
{
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	b083      	sub	sp, #12
 800598e:	4604      	mov	r4, r0
 8005990:	460d      	mov	r5, r1
 8005992:	4691      	mov	r9, r2
 8005994:	461f      	mov	r7, r3
 8005996:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800599a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800599e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80059a2:	f001 f914 	bl	8006bce <RFW_DeInit>
    switch( modem )
 80059a6:	2c01      	cmp	r4, #1
 80059a8:	d05a      	beq.n	8005a60 <RadioSetTxConfig+0xd8>
 80059aa:	2c03      	cmp	r4, #3
 80059ac:	f000 80ab 	beq.w	8005b06 <RadioSetTxConfig+0x17e>
 80059b0:	b164      	cbz	r4, 80059cc <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80059b2:	4628      	mov	r0, r5
 80059b4:	f001 f836 	bl	8006a24 <SUBGRF_SetRfTxPower>
 80059b8:	4c5b      	ldr	r4, [pc, #364]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 80059ba:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80059be:	f001 f90b 	bl	8006bd8 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80059c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059c4:	6063      	str	r3, [r4, #4]
}
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80059cc:	4c56      	ldr	r4, [pc, #344]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 80059ce:	f04f 0b00 	mov.w	fp, #0
 80059d2:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80059d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d8:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80059da:	230b      	movs	r3, #11
 80059dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80059e0:	4638      	mov	r0, r7
 80059e2:	f001 f88d 	bl	8006b00 <SUBGRF_GetFskBandwidthRegValue>
 80059e6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80059ea:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80059ee:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80059f2:	00f6      	lsls	r6, r6, #3
 80059f4:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80059f6:	2304      	movs	r3, #4
 80059f8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80059fa:	2318      	movs	r3, #24
 80059fc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80059fe:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005a02:	f088 0801 	eor.w	r8, r8, #1
 8005a06:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8005a0a:	f1ba 0f00 	cmp.w	sl, #0
 8005a0e:	d023      	beq.n	8005a58 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005a10:	22f2      	movs	r2, #242	; 0xf2
 8005a12:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005a14:	4c44      	ldr	r4, [pc, #272]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005a16:	2301      	movs	r3, #1
 8005a18:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8005a1a:	f7ff fa2d 	bl	8004e78 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005a1e:	4626      	mov	r6, r4
 8005a20:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8005a24:	3800      	subs	r0, #0
 8005a26:	bf18      	it	ne
 8005a28:	2001      	movne	r0, #1
 8005a2a:	f7ff fce9 	bl	8005400 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 fd12 	bl	8006458 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a34:	f104 000e 	add.w	r0, r4, #14
 8005a38:	f000 fede 	bl	80067f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005a3c:	4a3b      	ldr	r2, [pc, #236]	; (8005b2c <RadioSetTxConfig+0x1a4>)
 8005a3e:	466b      	mov	r3, sp
 8005a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fea3 	bl	8006794 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a52:	f000 fe05 	bl	8006660 <SUBGRF_SetWhiteningSeed>
            break;
 8005a56:	e7ac      	b.n	80059b2 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005a58:	4b33      	ldr	r3, [pc, #204]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	75da      	strb	r2, [r3, #23]
 8005a5e:	e7d9      	b.n	8005a14 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005a60:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005a62:	2301      	movs	r3, #1
 8005a64:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005a70:	492f      	ldr	r1, [pc, #188]	; (8005b30 <RadioSetTxConfig+0x1a8>)
 8005a72:	5dc9      	ldrb	r1, [r1, r7]
 8005a74:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005a78:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8005a7c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005a80:	b91f      	cbnz	r7, 8005a8a <RadioSetTxConfig+0x102>
 8005a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a84:	3a0b      	subs	r2, #11
 8005a86:	2a01      	cmp	r2, #1
 8005a88:	d92f      	bls.n	8005aea <RadioSetTxConfig+0x162>
 8005a8a:	2f01      	cmp	r7, #1
 8005a8c:	d02a      	beq.n	8005ae4 <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005a8e:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005a90:	2100      	movs	r1, #0
 8005a92:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005a96:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005a98:	2101      	movs	r1, #1
 8005a9a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005a9c:	3b05      	subs	r3, #5
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	d927      	bls.n	8005af4 <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005aa4:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005aa6:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005aa8:	4c1f      	ldr	r4, [pc, #124]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005aaa:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005aae:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <RadioSetTxConfig+0x1ac>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005ab4:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005ab8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005abc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8005ac0:	f7ff f9da 	bl	8004e78 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005ac4:	4626      	mov	r6, r4
 8005ac6:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8005aca:	3800      	subs	r0, #0
 8005acc:	bf18      	it	ne
 8005ace:	2001      	movne	r0, #1
 8005ad0:	f7ff fc96 	bl	8005400 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f000 fcbf 	bl	8006458 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ada:	f104 000e 	add.w	r0, r4, #14
 8005ade:	f000 fe8b 	bl	80067f8 <SUBGRF_SetPacketParams>
            break;
 8005ae2:	e766      	b.n	80059b2 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae6:	2a0c      	cmp	r2, #12
 8005ae8:	d1d1      	bne.n	8005a8e <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005aea:	4a0f      	ldr	r2, [pc, #60]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005aec:	2101      	movs	r1, #1
 8005aee:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8005af2:	e7d0      	b.n	8005a96 <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 8005af4:	2e0b      	cmp	r6, #11
 8005af6:	d803      	bhi.n	8005b00 <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005af8:	4613      	mov	r3, r2
 8005afa:	220c      	movs	r2, #12
 8005afc:	839a      	strh	r2, [r3, #28]
 8005afe:	e7d3      	b.n	8005aa8 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005b02:	839e      	strh	r6, [r3, #28]
 8005b04:	e7d0      	b.n	8005aa8 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005b06:	2003      	movs	r0, #3
 8005b08:	f7ff fc7a 	bl	8005400 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005b0c:	4806      	ldr	r0, [pc, #24]	; (8005b28 <RadioSetTxConfig+0x1a0>)
 8005b0e:	2302      	movs	r3, #2
 8005b10:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8005b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b16:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005b18:	2316      	movs	r3, #22
 8005b1a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005b1e:	3038      	adds	r0, #56	; 0x38
 8005b20:	f000 fc9a 	bl	8006458 <SUBGRF_SetModulationParams>
            break;
 8005b24:	e745      	b.n	80059b2 <RadioSetTxConfig+0x2a>
 8005b26:	bf00      	nop
 8005b28:	20000890 	.word	0x20000890
 8005b2c:	0800784c 	.word	0x0800784c
 8005b30:	08007bb8 	.word	0x08007bb8
 8005b34:	2000000c 	.word	0x2000000c

08005b38 <RadioSetRxConfig>:
{
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	4604      	mov	r4, r0
 8005b40:	460e      	mov	r6, r1
 8005b42:	4615      	mov	r5, r2
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8005b4a:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8005b4e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8005b52:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8005b56:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8005b5a:	4baf      	ldr	r3, [pc, #700]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005b5c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005b60:	f001 f835 	bl	8006bce <RFW_DeInit>
    if( rxContinuous == true )
 8005b64:	f1b8 0f00 	cmp.w	r8, #0
 8005b68:	d001      	beq.n	8005b6e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8005b6a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8005b6e:	b16f      	cbz	r7, 8005b8c <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8005b70:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8005b74:	4ba9      	ldr	r3, [pc, #676]	; (8005e1c <RadioSetRxConfig+0x2e4>)
 8005b76:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8005b78:	2c01      	cmp	r4, #1
 8005b7a:	f000 80d6 	beq.w	8005d2a <RadioSetRxConfig+0x1f2>
 8005b7e:	2c04      	cmp	r4, #4
 8005b80:	d008      	beq.n	8005b94 <RadioSetRxConfig+0x5c>
 8005b82:	2c00      	cmp	r4, #0
 8005b84:	d07c      	beq.n	8005c80 <RadioSetRxConfig+0x148>
}
 8005b86:	b007      	add	sp, #28
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8005b8c:	4ba3      	ldr	r3, [pc, #652]	; (8005e1c <RadioSetRxConfig+0x2e4>)
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	e7f1      	b.n	8005b78 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005b94:	2001      	movs	r0, #1
 8005b96:	f000 fa93 	bl	80060c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005b9a:	4c9f      	ldr	r4, [pc, #636]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005b9c:	2700      	movs	r7, #0
 8005b9e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005ba2:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005ba4:	2309      	movs	r3, #9
 8005ba6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8005baa:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005bae:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f000 ffa5 	bl	8006b00 <SUBGRF_GetFskBandwidthRegValue>
 8005bb6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005bba:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005bbc:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8005bc0:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005bc4:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005bca:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8005bcc:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005bce:	4b93      	ldr	r3, [pc, #588]	; (8005e1c <RadioSetRxConfig+0x2e4>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8005bd8:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8005bda:	2004      	movs	r0, #4
 8005bdc:	f7ff fc10 	bl	8005400 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005be0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005be4:	f000 fc38 	bl	8006458 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005be8:	f104 000e 	add.w	r0, r4, #14
 8005bec:	f000 fe04 	bl	80067f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005bf0:	ab02      	add	r3, sp, #8
 8005bf2:	4a8b      	ldr	r2, [pc, #556]	; (8005e20 <RadioSetRxConfig+0x2e8>)
 8005bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bf8:	e883 0003 	stmia.w	r3, {r0, r1}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fdc9 	bl	8006794 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c06:	f000 fd2b 	bl	8006660 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8005c0a:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005c0e:	f7ff f8c9 	bl	8004da4 <RadioRead>
            RadioWrite(0x8b8, modReg);
 8005c12:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8005c16:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005c1a:	f7ff f8c7 	bl	8004dac <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8005c1e:	2104      	movs	r1, #4
 8005c20:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005c24:	f7ff f8c2 	bl	8004dac <RadioWrite>
            modReg= RadioRead(0x89b);
 8005c28:	f640 009b 	movw	r0, #2203	; 0x89b
 8005c2c:	f7ff f8ba 	bl	8004da4 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005c30:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005c34:	f041 0108 	orr.w	r1, r1, #8
 8005c38:	f640 009b 	movw	r0, #2203	; 0x89b
 8005c3c:	f7ff f8b6 	bl	8004dac <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005c40:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005c44:	f7ff f8ae 	bl	8004da4 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005c48:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8005c4c:	f041 0118 	orr.w	r1, r1, #24
 8005c50:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005c54:	f7ff f8aa 	bl	8004dac <RadioWrite>
            modReg= RadioRead(0x6ac);
 8005c58:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005c5c:	f7ff f8a2 	bl	8004da4 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005c60:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8005c64:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8005c68:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005c6c:	f7ff f89e 	bl	8004dac <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005c70:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005c74:	fb03 fa0a 	mul.w	sl, r3, sl
 8005c78:	fbba f5f5 	udiv	r5, sl, r5
 8005c7c:	60a5      	str	r5, [r4, #8]
            break;
 8005c7e:	e782      	b.n	8005b86 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005c80:	2000      	movs	r0, #0
 8005c82:	f000 fa1d 	bl	80060c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005c86:	4c64      	ldr	r4, [pc, #400]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005c88:	f04f 0800 	mov.w	r8, #0
 8005c8c:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005c90:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005c92:	230b      	movs	r3, #11
 8005c94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 ff31 	bl	8006b00 <SUBGRF_GetFskBandwidthRegValue>
 8005c9e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005ca2:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005ca6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8005caa:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005cae:	2304      	movs	r3, #4
 8005cb0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8005cb2:	2318      	movs	r3, #24
 8005cb4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005cb6:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005cba:	f087 0701 	eor.w	r7, r7, #1
 8005cbe:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005cc0:	4b56      	ldr	r3, [pc, #344]	; (8005e1c <RadioSetRxConfig+0x2e4>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8005cc6:	f1bb 0f00 	cmp.w	fp, #0
 8005cca:	d02a      	beq.n	8005d22 <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005ccc:	22f2      	movs	r2, #242	; 0xf2
 8005cce:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005cd0:	4c51      	ldr	r4, [pc, #324]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8005cd6:	f7ff f8cf 	bl	8004e78 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005cda:	4626      	mov	r6, r4
 8005cdc:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8005ce0:	3800      	subs	r0, #0
 8005ce2:	bf18      	it	ne
 8005ce4:	2001      	movne	r0, #1
 8005ce6:	f7ff fb8b 	bl	8005400 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005cea:	4630      	mov	r0, r6
 8005cec:	f000 fbb4 	bl	8006458 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cf0:	f104 000e 	add.w	r0, r4, #14
 8005cf4:	f000 fd80 	bl	80067f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005cf8:	4a4a      	ldr	r2, [pc, #296]	; (8005e24 <RadioSetRxConfig+0x2ec>)
 8005cfa:	ab04      	add	r3, sp, #16
 8005cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d00:	e883 0003 	stmia.w	r3, {r0, r1}
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fd45 	bl	8006794 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005d0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d0e:	f000 fca7 	bl	8006660 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005d12:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005d16:	fb03 fa0a 	mul.w	sl, r3, sl
 8005d1a:	fbba f5f5 	udiv	r5, sl, r5
 8005d1e:	60a5      	str	r5, [r4, #8]
            break;
 8005d20:	e731      	b.n	8005b86 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005d22:	4b3d      	ldr	r3, [pc, #244]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	75da      	strb	r2, [r3, #23]
 8005d28:	e7d2      	b.n	8005cd0 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f000 f9c8 	bl	80060c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005d30:	4a39      	ldr	r2, [pc, #228]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005d32:	2301      	movs	r3, #1
 8005d34:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8005d38:	b2eb      	uxtb	r3, r5
 8005d3a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005d3e:	493a      	ldr	r1, [pc, #232]	; (8005e28 <RadioSetRxConfig+0x2f0>)
 8005d40:	5d89      	ldrb	r1, [r1, r6]
 8005d42:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8005d46:	9901      	ldr	r1, [sp, #4]
 8005d48:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005d4c:	b91e      	cbnz	r6, 8005d56 <RadioSetRxConfig+0x21e>
 8005d4e:	f1a5 020b 	sub.w	r2, r5, #11
 8005d52:	2a01      	cmp	r2, #1
 8005d54:	d945      	bls.n	8005de2 <RadioSetRxConfig+0x2aa>
 8005d56:	2e01      	cmp	r6, #1
 8005d58:	d041      	beq.n	8005dde <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005d5a:	4a2f      	ldr	r2, [pc, #188]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005d62:	4a2d      	ldr	r2, [pc, #180]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005d64:	2101      	movs	r1, #1
 8005d66:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005d68:	3b05      	subs	r3, #5
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	d93d      	bls.n	8005dec <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005d70:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005d72:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005d76:	4c28      	ldr	r4, [pc, #160]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005d78:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005d7a:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <RadioSetRxConfig+0x2e4>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005d80:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005d84:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8005d88:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8005d8c:	f7ff f874 	bl	8004e78 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005d90:	4625      	mov	r5, r4
 8005d92:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 8005d96:	3800      	subs	r0, #0
 8005d98:	bf18      	it	ne
 8005d9a:	2001      	movne	r0, #1
 8005d9c:	f7ff fb30 	bl	8005400 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 fb59 	bl	8006458 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005da6:	f104 000e 	add.w	r0, r4, #14
 8005daa:	f000 fd25 	bl	80067f8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005dae:	fa5f f08a 	uxtb.w	r0, sl
 8005db2:	f000 fb17 	bl	80063e4 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005db6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d021      	beq.n	8005e02 <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005dbe:	f240 7036 	movw	r0, #1846	; 0x736
 8005dc2:	f000 fbd1 	bl	8006568 <SUBGRF_ReadRegister>
 8005dc6:	f040 0104 	orr.w	r1, r0, #4
 8005dca:	b2c9      	uxtb	r1, r1
 8005dcc:	f240 7036 	movw	r0, #1846	; 0x736
 8005dd0:	f000 fada 	bl	8006388 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8005dd4:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dda:	609a      	str	r2, [r3, #8]
}
 8005ddc:	e6d3      	b.n	8005b86 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005dde:	2d0c      	cmp	r5, #12
 8005de0:	d1bb      	bne.n	8005d5a <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005de2:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005de4:	2101      	movs	r1, #1
 8005de6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8005dea:	e7ba      	b.n	8005d62 <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 8005dec:	f1b9 0f0b 	cmp.w	r9, #11
 8005df0:	d803      	bhi.n	8005dfa <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005df2:	4613      	mov	r3, r2
 8005df4:	220c      	movs	r2, #12
 8005df6:	839a      	strh	r2, [r3, #28]
 8005df8:	e7bd      	b.n	8005d76 <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <RadioSetRxConfig+0x2e0>)
 8005dfc:	f8a3 901c 	strh.w	r9, [r3, #28]
 8005e00:	e7b9      	b.n	8005d76 <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8005e02:	f240 7036 	movw	r0, #1846	; 0x736
 8005e06:	f000 fbaf 	bl	8006568 <SUBGRF_ReadRegister>
 8005e0a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005e0e:	f240 7036 	movw	r0, #1846	; 0x736
 8005e12:	f000 fab9 	bl	8006388 <SUBGRF_WriteRegister>
 8005e16:	e7dd      	b.n	8005dd4 <RadioSetRxConfig+0x29c>
 8005e18:	20000890 	.word	0x20000890
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	08007854 	.word	0x08007854
 8005e24:	0800784c 	.word	0x0800784c
 8005e28:	08007bb8 	.word	0x08007bb8

08005e2c <RadioRandom>:
{
 8005e2c:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f7ff fae6 	bl	8005400 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005e34:	2300      	movs	r3, #0
 8005e36:	461a      	mov	r2, r3
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f9e3 	bl	8006206 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8005e40:	f000 fd5c 	bl	80068fc <SUBGRF_GetRandom>
}
 8005e44:	bd08      	pop	{r3, pc}

08005e46 <RadioIsChannelFree>:
{
 8005e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e48:	b08b      	sub	sp, #44	; 0x2c
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	460f      	mov	r7, r1
 8005e4e:	4616      	mov	r6, r2
 8005e50:	461d      	mov	r5, r3
    RadioStandby( );
 8005e52:	f7ff f811 	bl	8004e78 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8005e56:	2000      	movs	r0, #0
 8005e58:	f7ff fad2 	bl	8005400 <RadioSetModem>
    RadioSetChannel( freq );
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7ff f9b3 	bl	80051c8 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005e62:	2301      	movs	r3, #1
 8005e64:	9309      	str	r3, [sp, #36]	; 0x24
 8005e66:	2400      	movs	r4, #0
 8005e68:	9408      	str	r4, [sp, #32]
 8005e6a:	9407      	str	r4, [sp, #28]
 8005e6c:	9406      	str	r4, [sp, #24]
 8005e6e:	9405      	str	r4, [sp, #20]
 8005e70:	9404      	str	r4, [sp, #16]
 8005e72:	9403      	str	r4, [sp, #12]
 8005e74:	9402      	str	r4, [sp, #8]
 8005e76:	2303      	movs	r3, #3
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	9700      	str	r7, [sp, #0]
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005e82:	4639      	mov	r1, r7
 8005e84:	4620      	mov	r0, r4
 8005e86:	f7ff fe57 	bl	8005b38 <RadioSetRxConfig>
    RadioRx( 0 );
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff f9b4 	bl	80051f8 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8005e90:	f7ff f96c 	bl	800516c <RadioGetWakeupTime>
 8005e94:	f7fa fcb6 	bl	8000804 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8005e98:	f001 f9cc 	bl	8007234 <UTIL_TIMER_GetCurrentTime>
 8005e9c:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f001 f9d2 	bl	8007248 <UTIL_TIMER_GetElapsedTime>
 8005ea4:	42a8      	cmp	r0, r5
 8005ea6:	d206      	bcs.n	8005eb6 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f7ff f96c 	bl	8005186 <RadioRssi>
        if( rssi > rssiThresh )
 8005eae:	42b0      	cmp	r0, r6
 8005eb0:	ddf5      	ble.n	8005e9e <RadioIsChannelFree+0x58>
            status = false;
 8005eb2:	2400      	movs	r4, #0
 8005eb4:	e000      	b.n	8005eb8 <RadioIsChannelFree+0x72>
    bool status = true;
 8005eb6:	2401      	movs	r4, #1
    RadioStandby( );
 8005eb8:	f7fe ffde 	bl	8004e78 <RadioStandby>
}
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	b00b      	add	sp, #44	; 0x2c
 8005ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005ec4 <RadioInit>:
{
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	b082      	sub	sp, #8
    RadioEvents = events;
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <RadioInit+0x7c>)
 8005eca:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <RadioInit+0x80>)
 8005ece:	2400      	movs	r4, #0
 8005ed0:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005ed2:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 8005ed4:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 8005ed6:	481c      	ldr	r0, [pc, #112]	; (8005f48 <RadioInit+0x84>)
 8005ed8:	f000 fb6a 	bl	80065b0 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 8005edc:	4620      	mov	r0, r4
 8005ede:	f7ff fd31 	bl	8005944 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 8005ee2:	f000 f8fa 	bl	80060da <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 f9f5 	bl	80062d8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8005eee:	2204      	movs	r2, #4
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	f000 fbcd 	bl	8006692 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005ef8:	4623      	mov	r3, r4
 8005efa:	4622      	mov	r2, r4
 8005efc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f00:	4608      	mov	r0, r1
 8005f02:	f000 f980 	bl	8006206 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8005f06:	f7ff f9a9 	bl	800525c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005f0a:	4e10      	ldr	r6, [pc, #64]	; (8005f4c <RadioInit+0x88>)
 8005f0c:	9400      	str	r4, [sp, #0]
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <RadioInit+0x8c>)
 8005f10:	4622      	mov	r2, r4
 8005f12:	f04f 31ff 	mov.w	r1, #4294967295
 8005f16:	4630      	mov	r0, r6
 8005f18:	f001 f96e 	bl	80071f8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8005f1c:	4d0d      	ldr	r5, [pc, #52]	; (8005f54 <RadioInit+0x90>)
 8005f1e:	9400      	str	r4, [sp, #0]
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <RadioInit+0x94>)
 8005f22:	4622      	mov	r2, r4
 8005f24:	f04f 31ff 	mov.w	r1, #4294967295
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f001 f965 	bl	80071f8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f001 f9c0 	bl	80072b4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8005f34:	4628      	mov	r0, r5
 8005f36:	f001 f9bd 	bl	80072b4 <UTIL_TIMER_Stop>
}
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000384 	.word	0x20000384
 8005f44:	20000890 	.word	0x20000890
 8005f48:	08005159 	.word	0x08005159
 8005f4c:	200008e8 	.word	0x200008e8
 8005f50:	08004c9d 	.word	0x08004c9d
 8005f54:	20000900 	.word	0x20000900
 8005f58:	08004cb9 	.word	0x08004cb9

08005f5c <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f60:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f64:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8005f66:	460a      	mov	r2, r1
 8005f68:	4601      	mov	r1, r0
 8005f6a:	4803      	ldr	r0, [pc, #12]	; (8005f78 <SUBGRF_WriteCommand+0x1c>)
 8005f6c:	f7fd fab4 	bl	80034d8 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f70:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8005f74:	bd10      	pop	{r4, pc}
 8005f76:	bf00      	nop
 8005f78:	20000790 	.word	0x20000790

08005f7c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f80:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f84:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8005f86:	460a      	mov	r2, r1
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4803      	ldr	r0, [pc, #12]	; (8005f98 <SUBGRF_ReadCommand+0x1c>)
 8005f8c:	f7fd fafa 	bl	8003584 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f90:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	bf00      	nop
 8005f98:	20000790 	.word	0x20000790

08005f9c <SUBGRF_GetOperatingMode>:
}
 8005f9c:	4b01      	ldr	r3, [pc, #4]	; (8005fa4 <SUBGRF_GetOperatingMode+0x8>)
 8005f9e:	7818      	ldrb	r0, [r3, #0]
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000038e 	.word	0x2000038e

08005fa8 <SUBGRF_SetStandby>:
{
 8005fa8:	b500      	push	{lr}
 8005faa:	b083      	sub	sp, #12
 8005fac:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f10d 0107 	add.w	r1, sp, #7
 8005fb6:	2080      	movs	r0, #128	; 0x80
 8005fb8:	f7ff ffd0 	bl	8005f5c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8005fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005fc0:	b92b      	cbnz	r3, 8005fce <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <SUBGRF_SetStandby+0x30>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
}
 8005fc8:	b003      	add	sp, #12
 8005fca:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8005fce:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <SUBGRF_SetStandby+0x30>)
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	701a      	strb	r2, [r3, #0]
}
 8005fd4:	e7f8      	b.n	8005fc8 <SUBGRF_SetStandby+0x20>
 8005fd6:	bf00      	nop
 8005fd8:	2000038e 	.word	0x2000038e

08005fdc <SUBGRF_SetTx>:
{
 8005fdc:	b500      	push	{lr}
 8005fde:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <SUBGRF_SetTx+0x30>)
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005fe6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005fea:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005fee:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005ff2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005ff6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	a901      	add	r1, sp, #4
 8005ffe:	2083      	movs	r0, #131	; 0x83
 8006000:	f7ff ffac 	bl	8005f5c <SUBGRF_WriteCommand>
}
 8006004:	b003      	add	sp, #12
 8006006:	f85d fb04 	ldr.w	pc, [sp], #4
 800600a:	bf00      	nop
 800600c:	2000038e 	.word	0x2000038e

08006010 <SUBGRF_SetRx>:
{
 8006010:	b500      	push	{lr}
 8006012:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <SUBGRF_SetRx+0x30>)
 8006016:	2205      	movs	r2, #5
 8006018:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800601a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800601e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006022:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006026:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800602a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800602e:	2203      	movs	r2, #3
 8006030:	a901      	add	r1, sp, #4
 8006032:	2082      	movs	r0, #130	; 0x82
 8006034:	f7ff ff92 	bl	8005f5c <SUBGRF_WriteCommand>
}
 8006038:	b003      	add	sp, #12
 800603a:	f85d fb04 	ldr.w	pc, [sp], #4
 800603e:	bf00      	nop
 8006040:	2000038e 	.word	0x2000038e

08006044 <SUBGRF_SetRxDutyCycle>:
{
 8006044:	b500      	push	{lr}
 8006046:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006048:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800604c:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006050:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006054:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8006058:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800605c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006060:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006064:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006068:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800606c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006070:	2206      	movs	r2, #6
 8006072:	4669      	mov	r1, sp
 8006074:	2094      	movs	r0, #148	; 0x94
 8006076:	f7ff ff71 	bl	8005f5c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800607a:	4b03      	ldr	r3, [pc, #12]	; (8006088 <SUBGRF_SetRxDutyCycle+0x44>)
 800607c:	2206      	movs	r2, #6
 800607e:	701a      	strb	r2, [r3, #0]
}
 8006080:	b003      	add	sp, #12
 8006082:	f85d fb04 	ldr.w	pc, [sp], #4
 8006086:	bf00      	nop
 8006088:	2000038e 	.word	0x2000038e

0800608c <SUBGRF_SetCad>:
{
 800608c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800608e:	2200      	movs	r2, #0
 8006090:	4611      	mov	r1, r2
 8006092:	20c5      	movs	r0, #197	; 0xc5
 8006094:	f7ff ff62 	bl	8005f5c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8006098:	4b01      	ldr	r3, [pc, #4]	; (80060a0 <SUBGRF_SetCad+0x14>)
 800609a:	2207      	movs	r2, #7
 800609c:	701a      	strb	r2, [r3, #0]
}
 800609e:	bd08      	pop	{r3, pc}
 80060a0:	2000038e 	.word	0x2000038e

080060a4 <SUBGRF_SetTxContinuousWave>:
{
 80060a4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80060a6:	2200      	movs	r2, #0
 80060a8:	4611      	mov	r1, r2
 80060aa:	20d1      	movs	r0, #209	; 0xd1
 80060ac:	f7ff ff56 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80060b0:	bd08      	pop	{r3, pc}

080060b2 <SUBGRF_SetTxInfinitePreamble>:
{
 80060b2:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80060b4:	2200      	movs	r2, #0
 80060b6:	4611      	mov	r1, r2
 80060b8:	20d2      	movs	r0, #210	; 0xd2
 80060ba:	f7ff ff4f 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80060be:	bd08      	pop	{r3, pc}

080060c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80060c0:	b500      	push	{lr}
 80060c2:	b083      	sub	sp, #12
 80060c4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80060c8:	2201      	movs	r2, #1
 80060ca:	f10d 0107 	add.w	r1, sp, #7
 80060ce:	209f      	movs	r0, #159	; 0x9f
 80060d0:	f7ff ff44 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80060d4:	b003      	add	sp, #12
 80060d6:	f85d fb04 	ldr.w	pc, [sp], #4

080060da <SUBGRF_SetRegulatorMode>:
{
 80060da:	b500      	push	{lr}
 80060dc:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80060de:	f7fb f90f 	bl	8001300 <RBI_IsDCDC>
 80060e2:	2801      	cmp	r0, #1
 80060e4:	d00b      	beq.n	80060fe <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80060ec:	2201      	movs	r2, #1
 80060ee:	f10d 0107 	add.w	r1, sp, #7
 80060f2:	2096      	movs	r0, #150	; 0x96
 80060f4:	f7ff ff32 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80060f8:	b003      	add	sp, #12
 80060fa:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80060fe:	2301      	movs	r3, #1
 8006100:	f88d 3007 	strb.w	r3, [sp, #7]
 8006104:	e7f2      	b.n	80060ec <SUBGRF_SetRegulatorMode+0x12>

08006106 <SUBGRF_Calibrate>:
{
 8006106:	b500      	push	{lr}
 8006108:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800610a:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800610e:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8006112:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006114:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006118:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800611c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006120:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006124:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006128:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800612c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006130:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006134:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006138:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800613c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800613e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006142:	2201      	movs	r2, #1
 8006144:	f10d 0107 	add.w	r1, sp, #7
 8006148:	2089      	movs	r0, #137	; 0x89
 800614a:	f7ff ff07 	bl	8005f5c <SUBGRF_WriteCommand>
}
 800614e:	b003      	add	sp, #12
 8006150:	f85d fb04 	ldr.w	pc, [sp], #4

08006154 <SUBGRF_CalibrateImage>:
{
 8006154:	b500      	push	{lr}
 8006156:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8006158:	4b1c      	ldr	r3, [pc, #112]	; (80061cc <SUBGRF_CalibrateImage+0x78>)
 800615a:	4298      	cmp	r0, r3
 800615c:	d90d      	bls.n	800617a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800615e:	23e1      	movs	r3, #225	; 0xe1
 8006160:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8006164:	23e9      	movs	r3, #233	; 0xe9
 8006166:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800616a:	2202      	movs	r2, #2
 800616c:	a901      	add	r1, sp, #4
 800616e:	2098      	movs	r0, #152	; 0x98
 8006170:	f7ff fef4 	bl	8005f5c <SUBGRF_WriteCommand>
}
 8006174:	b003      	add	sp, #12
 8006176:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <SUBGRF_CalibrateImage+0x7c>)
 800617c:	4298      	cmp	r0, r3
 800617e:	d906      	bls.n	800618e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8006180:	23d7      	movs	r3, #215	; 0xd7
 8006182:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8006186:	23db      	movs	r3, #219	; 0xdb
 8006188:	f88d 3005 	strb.w	r3, [sp, #5]
 800618c:	e7ed      	b.n	800616a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <SUBGRF_CalibrateImage+0x80>)
 8006190:	4298      	cmp	r0, r3
 8006192:	d906      	bls.n	80061a2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8006194:	23c1      	movs	r3, #193	; 0xc1
 8006196:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800619a:	23c5      	movs	r3, #197	; 0xc5
 800619c:	f88d 3005 	strb.w	r3, [sp, #5]
 80061a0:	e7e3      	b.n	800616a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80061a2:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <SUBGRF_CalibrateImage+0x84>)
 80061a4:	4298      	cmp	r0, r3
 80061a6:	d906      	bls.n	80061b6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80061a8:	2375      	movs	r3, #117	; 0x75
 80061aa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80061ae:	2381      	movs	r3, #129	; 0x81
 80061b0:	f88d 3005 	strb.w	r3, [sp, #5]
 80061b4:	e7d9      	b.n	800616a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <SUBGRF_CalibrateImage+0x88>)
 80061b8:	4298      	cmp	r0, r3
 80061ba:	d9d6      	bls.n	800616a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 80061bc:	236b      	movs	r3, #107	; 0x6b
 80061be:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80061c2:	236f      	movs	r3, #111	; 0x6f
 80061c4:	f88d 3005 	strb.w	r3, [sp, #5]
 80061c8:	e7cf      	b.n	800616a <SUBGRF_CalibrateImage+0x16>
 80061ca:	bf00      	nop
 80061cc:	35a4e900 	.word	0x35a4e900
 80061d0:	32a9f880 	.word	0x32a9f880
 80061d4:	2de54480 	.word	0x2de54480
 80061d8:	1b6b0b00 	.word	0x1b6b0b00
 80061dc:	1954fc40 	.word	0x1954fc40

080061e0 <SUBGRF_SetPaConfig>:
{
 80061e0:	b500      	push	{lr}
 80061e2:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80061e4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80061e8:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80061ec:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80061f0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80061f4:	2204      	movs	r2, #4
 80061f6:	eb0d 0102 	add.w	r1, sp, r2
 80061fa:	2095      	movs	r0, #149	; 0x95
 80061fc:	f7ff feae 	bl	8005f5c <SUBGRF_WriteCommand>
}
 8006200:	b003      	add	sp, #12
 8006202:	f85d fb04 	ldr.w	pc, [sp], #4

08006206 <SUBGRF_SetDioIrqParams>:
{
 8006206:	b510      	push	{r4, lr}
 8006208:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800620a:	0a04      	lsrs	r4, r0, #8
 800620c:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006210:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8006214:	0a08      	lsrs	r0, r1, #8
 8006216:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800621a:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800621e:	0a11      	lsrs	r1, r2, #8
 8006220:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006224:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006228:	0a1a      	lsrs	r2, r3, #8
 800622a:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800622e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8006232:	2208      	movs	r2, #8
 8006234:	4669      	mov	r1, sp
 8006236:	4610      	mov	r0, r2
 8006238:	f7ff fe90 	bl	8005f5c <SUBGRF_WriteCommand>
}
 800623c:	b002      	add	sp, #8
 800623e:	bd10      	pop	{r4, pc}

08006240 <SUBGRF_SetTcxoMode>:
{
 8006240:	b500      	push	{lr}
 8006242:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8006244:	f000 0007 	and.w	r0, r0, #7
 8006248:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800624c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006250:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006254:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006258:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800625c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006260:	2204      	movs	r2, #4
 8006262:	eb0d 0102 	add.w	r1, sp, r2
 8006266:	2097      	movs	r0, #151	; 0x97
 8006268:	f7ff fe78 	bl	8005f5c <SUBGRF_WriteCommand>
}
 800626c:	b003      	add	sp, #12
 800626e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006274 <SUBGRF_SetRfFrequency>:
{
 8006274:	b510      	push	{r4, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <SUBGRF_SetRfFrequency+0x50>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b1d3      	cbz	r3, 80062b6 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8006280:	4a11      	ldr	r2, [pc, #68]	; (80062c8 <SUBGRF_SetRfFrequency+0x54>)
 8006282:	2300      	movs	r3, #0
 8006284:	0660      	lsls	r0, r4, #25
 8006286:	09e1      	lsrs	r1, r4, #7
 8006288:	f7f9 ff7e 	bl	8000188 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800628c:	0e03      	lsrs	r3, r0, #24
 800628e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8006292:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006296:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800629a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800629e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80062a2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80062a6:	2204      	movs	r2, #4
 80062a8:	eb0d 0102 	add.w	r1, sp, r2
 80062ac:	2086      	movs	r0, #134	; 0x86
 80062ae:	f7ff fe55 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80062b2:	b002      	add	sp, #8
 80062b4:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80062b6:	f7ff ff4d 	bl	8006154 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80062ba:	4b02      	ldr	r3, [pc, #8]	; (80062c4 <SUBGRF_SetRfFrequency+0x50>)
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	e7de      	b.n	8006280 <SUBGRF_SetRfFrequency+0xc>
 80062c2:	bf00      	nop
 80062c4:	2000038c 	.word	0x2000038c
 80062c8:	01e84800 	.word	0x01e84800

080062cc <SUBGRF_GetPacketType>:
}
 80062cc:	4b01      	ldr	r3, [pc, #4]	; (80062d4 <SUBGRF_GetPacketType+0x8>)
 80062ce:	7818      	ldrb	r0, [r3, #0]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000038f 	.word	0x2000038f

080062d8 <SUBGRF_SetBufferBaseAddress>:
{
 80062d8:	b500      	push	{lr}
 80062da:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 80062dc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80062e0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80062e4:	2202      	movs	r2, #2
 80062e6:	a901      	add	r1, sp, #4
 80062e8:	208f      	movs	r0, #143	; 0x8f
 80062ea:	f7ff fe37 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80062ee:	b003      	add	sp, #12
 80062f0:	f85d fb04 	ldr.w	pc, [sp], #4

080062f4 <SUBGRF_GetRssiInst>:
{
 80062f4:	b500      	push	{lr}
 80062f6:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80062f8:	2201      	movs	r2, #1
 80062fa:	a901      	add	r1, sp, #4
 80062fc:	2015      	movs	r0, #21
 80062fe:	f7ff fe3d 	bl	8005f7c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8006302:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006306:	4240      	negs	r0, r0
}
 8006308:	1040      	asrs	r0, r0, #1
 800630a:	b003      	add	sp, #12
 800630c:	f85d fb04 	ldr.w	pc, [sp], #4

08006310 <SUBGRF_GetPacketStatus>:
{
 8006310:	b510      	push	{r4, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006316:	2203      	movs	r2, #3
 8006318:	a901      	add	r1, sp, #4
 800631a:	2014      	movs	r0, #20
 800631c:	f7ff fe2e 	bl	8005f7c <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8006320:	f7ff ffd4 	bl	80062cc <SUBGRF_GetPacketType>
 8006324:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8006326:	b148      	cbz	r0, 800633c <SUBGRF_GetPacketStatus+0x2c>
 8006328:	2801      	cmp	r0, #1
 800632a:	d018      	beq.n	800635e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800632c:	2214      	movs	r2, #20
 800632e:	2100      	movs	r1, #0
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fe41 	bl	8006fb8 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006336:	230f      	movs	r3, #15
 8006338:	7023      	strb	r3, [r4, #0]
}
 800633a:	e00e      	b.n	800635a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800633c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006340:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006342:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006346:	425b      	negs	r3, r3
 8006348:	105b      	asrs	r3, r3, #1
 800634a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800634c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006350:	425b      	negs	r3, r3
 8006352:	105b      	asrs	r3, r3, #1
 8006354:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	60a3      	str	r3, [r4, #8]
}
 800635a:	b002      	add	sp, #8
 800635c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800635e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006362:	425b      	negs	r3, r3
 8006364:	105b      	asrs	r3, r3, #1
 8006366:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006368:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800636c:	3302      	adds	r3, #2
 800636e:	109b      	asrs	r3, r3, #2
 8006370:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006372:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006376:	425b      	negs	r3, r3
 8006378:	105b      	asrs	r3, r3, #1
 800637a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <SUBGRF_GetPacketStatus+0x74>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6123      	str	r3, [r4, #16]
            break;
 8006382:	e7ea      	b.n	800635a <SUBGRF_GetPacketStatus+0x4a>
 8006384:	20000388 	.word	0x20000388

08006388 <SUBGRF_WriteRegister>:
{
 8006388:	b500      	push	{lr}
 800638a:	b083      	sub	sp, #12
 800638c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006390:	2301      	movs	r3, #1
 8006392:	f10d 0207 	add.w	r2, sp, #7
 8006396:	4601      	mov	r1, r0
 8006398:	4802      	ldr	r0, [pc, #8]	; (80063a4 <SUBGRF_WriteRegister+0x1c>)
 800639a:	f7fc fff9 	bl	8003390 <HAL_SUBGHZ_WriteRegisters>
}
 800639e:	b003      	add	sp, #12
 80063a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80063a4:	20000790 	.word	0x20000790

080063a8 <SUBGRF_SetRxBoosted>:
{
 80063a8:	b510      	push	{r4, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80063ae:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <SUBGRF_SetRxBoosted+0x38>)
 80063b0:	2205      	movs	r2, #5
 80063b2:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80063b4:	2197      	movs	r1, #151	; 0x97
 80063b6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80063ba:	f7ff ffe5 	bl	8006388 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80063be:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80063c2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80063c6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80063ca:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80063ce:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80063d2:	2203      	movs	r2, #3
 80063d4:	a901      	add	r1, sp, #4
 80063d6:	2082      	movs	r0, #130	; 0x82
 80063d8:	f7ff fdc0 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80063dc:	b002      	add	sp, #8
 80063de:	bd10      	pop	{r4, pc}
 80063e0:	2000038e 	.word	0x2000038e

080063e4 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80063e4:	b500      	push	{lr}
 80063e6:	b083      	sub	sp, #12
 80063e8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80063ec:	2201      	movs	r2, #1
 80063ee:	f10d 0107 	add.w	r1, sp, #7
 80063f2:	20a0      	movs	r0, #160	; 0xa0
 80063f4:	f7ff fdb2 	bl	8005f5c <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80063f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80063fc:	2b3f      	cmp	r3, #63	; 0x3f
 80063fe:	d90f      	bls.n	8006420 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8006400:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8006402:	2200      	movs	r2, #0
        while( mant > 31 )
 8006404:	2b1f      	cmp	r3, #31
 8006406:	d903      	bls.n	8006410 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 8006408:	089b      	lsrs	r3, r3, #2
            exp++;
 800640a:	1c51      	adds	r1, r2, #1
 800640c:	b2ca      	uxtb	r2, r1
 800640e:	e7f9      	b.n	8006404 <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 8006410:	00d9      	lsls	r1, r3, #3
 8006412:	b2c9      	uxtb	r1, r1
 8006414:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8006416:	b2c9      	uxtb	r1, r1
 8006418:	f240 7006 	movw	r0, #1798	; 0x706
 800641c:	f7ff ffb4 	bl	8006388 <SUBGRF_WriteRegister>
}
 8006420:	b003      	add	sp, #12
 8006422:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006428 <SUBGRF_SetPacketType>:
{
 8006428:	b500      	push	{lr}
 800642a:	b083      	sub	sp, #12
 800642c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <SUBGRF_SetPacketType+0x2c>)
 8006432:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8006434:	b140      	cbz	r0, 8006448 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006436:	2201      	movs	r2, #1
 8006438:	f10d 0107 	add.w	r1, sp, #7
 800643c:	208a      	movs	r0, #138	; 0x8a
 800643e:	f7ff fd8d 	bl	8005f5c <SUBGRF_WriteCommand>
}
 8006442:	b003      	add	sp, #12
 8006444:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8006448:	2100      	movs	r1, #0
 800644a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800644e:	f7ff ff9b 	bl	8006388 <SUBGRF_WriteRegister>
 8006452:	e7f0      	b.n	8006436 <SUBGRF_SetPacketType+0xe>
 8006454:	2000038f 	.word	0x2000038f

08006458 <SUBGRF_SetModulationParams>:
{
 8006458:	b510      	push	{r4, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800645e:	4b3e      	ldr	r3, [pc, #248]	; (8006558 <SUBGRF_SetModulationParams+0x100>)
 8006460:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006464:	ab02      	add	r3, sp, #8
 8006466:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800646a:	7820      	ldrb	r0, [r4, #0]
 800646c:	4b3b      	ldr	r3, [pc, #236]	; (800655c <SUBGRF_SetModulationParams+0x104>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4298      	cmp	r0, r3
 8006472:	d106      	bne.n	8006482 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8006474:	7823      	ldrb	r3, [r4, #0]
 8006476:	2b03      	cmp	r3, #3
 8006478:	d82c      	bhi.n	80064d4 <SUBGRF_SetModulationParams+0x7c>
 800647a:	e8df f003 	tbb	[pc, r3]
 800647e:	4205      	.short	0x4205
 8006480:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006482:	f7ff ffd1 	bl	8006428 <SUBGRF_SetPacketType>
 8006486:	e7f5      	b.n	8006474 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8006488:	6862      	ldr	r2, [r4, #4]
 800648a:	4b35      	ldr	r3, [pc, #212]	; (8006560 <SUBGRF_SetModulationParams+0x108>)
 800648c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006490:	0c1a      	lsrs	r2, r3, #16
 8006492:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006496:	0a1a      	lsrs	r2, r3, #8
 8006498:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800649c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80064a0:	7b23      	ldrb	r3, [r4, #12]
 80064a2:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80064a6:	7b63      	ldrb	r3, [r4, #13]
 80064a8:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80064ac:	68a1      	ldr	r1, [r4, #8]
 80064ae:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <SUBGRF_SetModulationParams+0x10c>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	0648      	lsls	r0, r1, #25
 80064b4:	09c9      	lsrs	r1, r1, #7
 80064b6:	f7f9 fe67 	bl	8000188 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80064ba:	0c03      	lsrs	r3, r0, #16
 80064bc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80064c0:	0a03      	lsrs	r3, r0, #8
 80064c2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80064c6:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80064ca:	2208      	movs	r2, #8
 80064cc:	4669      	mov	r1, sp
 80064ce:	208b      	movs	r0, #139	; 0x8b
 80064d0:	f7ff fd44 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80064d4:	b002      	add	sp, #8
 80064d6:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80064d8:	6922      	ldr	r2, [r4, #16]
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <SUBGRF_SetModulationParams+0x108>)
 80064dc:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80064e0:	0c1a      	lsrs	r2, r3, #16
 80064e2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80064e6:	0a1a      	lsrs	r2, r3, #8
 80064e8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80064ec:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80064f0:	7d23      	ldrb	r3, [r4, #20]
 80064f2:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80064f6:	2204      	movs	r2, #4
 80064f8:	4669      	mov	r1, sp
 80064fa:	208b      	movs	r0, #139	; 0x8b
 80064fc:	f7ff fd2e 	bl	8005f5c <SUBGRF_WriteCommand>
        break;
 8006500:	e7e8      	b.n	80064d4 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006502:	7e23      	ldrb	r3, [r4, #24]
 8006504:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006508:	7e63      	ldrb	r3, [r4, #25]
 800650a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800650e:	7ea3      	ldrb	r3, [r4, #26]
 8006510:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006514:	7ee3      	ldrb	r3, [r4, #27]
 8006516:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800651a:	2204      	movs	r2, #4
 800651c:	4669      	mov	r1, sp
 800651e:	208b      	movs	r0, #139	; 0x8b
 8006520:	f7ff fd1c 	bl	8005f5c <SUBGRF_WriteCommand>
        break;
 8006524:	e7d6      	b.n	80064d4 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8006526:	6862      	ldr	r2, [r4, #4]
 8006528:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <SUBGRF_SetModulationParams+0x108>)
 800652a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800652e:	0c1a      	lsrs	r2, r3, #16
 8006530:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006534:	0a1a      	lsrs	r2, r3, #8
 8006536:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800653a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800653e:	7b23      	ldrb	r3, [r4, #12]
 8006540:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006544:	7b63      	ldrb	r3, [r4, #13]
 8006546:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800654a:	2205      	movs	r2, #5
 800654c:	4669      	mov	r1, sp
 800654e:	208b      	movs	r0, #139	; 0x8b
 8006550:	f7ff fd04 	bl	8005f5c <SUBGRF_WriteCommand>
}
 8006554:	e7be      	b.n	80064d4 <SUBGRF_SetModulationParams+0x7c>
 8006556:	bf00      	nop
 8006558:	0800785c 	.word	0x0800785c
 800655c:	2000038f 	.word	0x2000038f
 8006560:	3d090000 	.word	0x3d090000
 8006564:	01e84800 	.word	0x01e84800

08006568 <SUBGRF_ReadRegister>:
{
 8006568:	b500      	push	{lr}
 800656a:	b083      	sub	sp, #12
 800656c:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800656e:	2301      	movs	r3, #1
 8006570:	f10d 0207 	add.w	r2, sp, #7
 8006574:	4803      	ldr	r0, [pc, #12]	; (8006584 <SUBGRF_ReadRegister+0x1c>)
 8006576:	f7fc ff5b 	bl	8003430 <HAL_SUBGHZ_ReadRegisters>
}
 800657a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800657e:	b003      	add	sp, #12
 8006580:	f85d fb04 	ldr.w	pc, [sp], #4
 8006584:	20000790 	.word	0x20000790

08006588 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8006588:	b510      	push	{r4, lr}
 800658a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800658c:	f7fa feb8 	bl	8001300 <RBI_IsDCDC>
 8006590:	2801      	cmp	r0, #1
 8006592:	d000      	beq.n	8006596 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8006594:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8006596:	f640 1023 	movw	r0, #2339	; 0x923
 800659a:	f7ff ffe5 	bl	8006568 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800659e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80065a2:	4321      	orrs	r1, r4
 80065a4:	f640 1023 	movw	r0, #2339	; 0x923
 80065a8:	f7ff feee 	bl	8006388 <SUBGRF_WriteRegister>
}
 80065ac:	e7f2      	b.n	8006594 <Radio_SMPS_Set+0xc>
	...

080065b0 <SUBGRF_Init>:
{
 80065b0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80065b2:	b108      	cbz	r0, 80065b8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80065b4:	4a16      	ldr	r2, [pc, #88]	; (8006610 <SUBGRF_Init+0x60>)
 80065b6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80065b8:	f7fa f8a4 	bl	8000704 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80065bc:	2002      	movs	r0, #2
 80065be:	f7ff ffe3 	bl	8006588 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80065c2:	2000      	movs	r0, #0
 80065c4:	4b13      	ldr	r3, [pc, #76]	; (8006614 <SUBGRF_Init+0x64>)
 80065c6:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80065c8:	f7ff fcee 	bl	8005fa8 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80065cc:	f7fa fe94 	bl	80012f8 <RBI_IsTCXO>
 80065d0:	2801      	cmp	r0, #1
 80065d2:	d00f      	beq.n	80065f4 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80065d4:	2120      	movs	r1, #32
 80065d6:	f640 1011 	movw	r0, #2321	; 0x911
 80065da:	f7ff fed5 	bl	8006388 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80065de:	2120      	movs	r1, #32
 80065e0:	f640 1012 	movw	r0, #2322	; 0x912
 80065e4:	f7ff fed0 	bl	8006388 <SUBGRF_WriteRegister>
    RBI_Init();
 80065e8:	f7fa fe7a 	bl	80012e0 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <SUBGRF_Init+0x68>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
}
 80065f2:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80065f4:	2140      	movs	r1, #64	; 0x40
 80065f6:	f7ff fe23 	bl	8006240 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80065fa:	2100      	movs	r1, #0
 80065fc:	f640 1011 	movw	r0, #2321	; 0x911
 8006600:	f7ff fec2 	bl	8006388 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8006604:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8006608:	f7ff fd7d 	bl	8006106 <SUBGRF_Calibrate>
 800660c:	e7ec      	b.n	80065e8 <SUBGRF_Init+0x38>
 800660e:	bf00      	nop
 8006610:	20000390 	.word	0x20000390
 8006614:	2000038c 	.word	0x2000038c
 8006618:	2000038e 	.word	0x2000038e

0800661c <SUBGRF_SetSleep>:
{
 800661c:	b510      	push	{r4, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8006622:	2000      	movs	r0, #0
 8006624:	f7fa fe60 	bl	80012e8 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006628:	2002      	movs	r0, #2
 800662a:	f7ff ffad 	bl	8006588 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800662e:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006632:	f3c4 0340 	ubfx	r3, r4, #1, #1
 8006636:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006638:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800663c:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006640:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006642:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006646:	2201      	movs	r2, #1
 8006648:	f10d 0107 	add.w	r1, sp, #7
 800664c:	2084      	movs	r0, #132	; 0x84
 800664e:	f7ff fc85 	bl	8005f5c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006652:	4b02      	ldr	r3, [pc, #8]	; (800665c <SUBGRF_SetSleep+0x40>)
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
}
 8006658:	b002      	add	sp, #8
 800665a:	bd10      	pop	{r4, pc}
 800665c:	2000038e 	.word	0x2000038e

08006660 <SUBGRF_SetWhiteningSeed>:
{
 8006660:	b510      	push	{r4, lr}
 8006662:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8006664:	f7ff fe32 	bl	80062cc <SUBGRF_GetPacketType>
 8006668:	b100      	cbz	r0, 800666c <SUBGRF_SetWhiteningSeed+0xc>
}
 800666a:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800666c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006670:	f7ff ff7a 	bl	8006568 <SUBGRF_ReadRegister>
 8006674:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006678:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800667c:	4301      	orrs	r1, r0
 800667e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006682:	f7ff fe81 	bl	8006388 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006686:	b2e1      	uxtb	r1, r4
 8006688:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800668c:	f7ff fe7c 	bl	8006388 <SUBGRF_WriteRegister>
}
 8006690:	e7eb      	b.n	800666a <SUBGRF_SetWhiteningSeed+0xa>

08006692 <SUBGRF_SetTxParams>:
{
 8006692:	b530      	push	{r4, r5, lr}
 8006694:	b083      	sub	sp, #12
 8006696:	460c      	mov	r4, r1
 8006698:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 800669a:	2801      	cmp	r0, #1
 800669c:	d127      	bne.n	80066ee <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 800669e:	290f      	cmp	r1, #15
 80066a0:	d00d      	beq.n	80066be <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80066a2:	2301      	movs	r3, #1
 80066a4:	461a      	mov	r2, r3
 80066a6:	2100      	movs	r1, #0
 80066a8:	2004      	movs	r0, #4
 80066aa:	f7ff fd99 	bl	80061e0 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 80066ae:	2c0d      	cmp	r4, #13
 80066b0:	dc0c      	bgt.n	80066cc <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 80066b2:	f114 0f11 	cmn.w	r4, #17
 80066b6:	da0a      	bge.n	80066ce <SUBGRF_SetTxParams+0x3c>
            power = -17;
 80066b8:	f06f 0410 	mvn.w	r4, #16
 80066bc:	e007      	b.n	80066ce <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80066be:	2301      	movs	r3, #1
 80066c0:	461a      	mov	r2, r3
 80066c2:	2100      	movs	r1, #0
 80066c4:	2006      	movs	r0, #6
 80066c6:	f7ff fd8b 	bl	80061e0 <SUBGRF_SetPaConfig>
 80066ca:	e7f0      	b.n	80066ae <SUBGRF_SetTxParams+0x1c>
            power = 14;
 80066cc:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80066ce:	2118      	movs	r1, #24
 80066d0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80066d4:	f7ff fe58 	bl	8006388 <SUBGRF_WriteRegister>
    buf[0] = power;
 80066d8:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 80066dc:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80066e0:	2202      	movs	r2, #2
 80066e2:	a901      	add	r1, sp, #4
 80066e4:	208e      	movs	r0, #142	; 0x8e
 80066e6:	f7ff fc39 	bl	8005f5c <SUBGRF_WriteCommand>
}
 80066ea:	b003      	add	sp, #12
 80066ec:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80066ee:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80066f2:	f7ff ff39 	bl	8006568 <SUBGRF_ReadRegister>
 80066f6:	f040 011e 	orr.w	r1, r0, #30
 80066fa:	b2c9      	uxtb	r1, r1
 80066fc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8006700:	f7ff fe42 	bl	8006388 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8006704:	2301      	movs	r3, #1
 8006706:	2200      	movs	r2, #0
 8006708:	2107      	movs	r1, #7
 800670a:	2004      	movs	r0, #4
 800670c:	f7ff fd68 	bl	80061e0 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8006710:	2c16      	cmp	r4, #22
 8006712:	dc05      	bgt.n	8006720 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 8006714:	f114 0f09 	cmn.w	r4, #9
 8006718:	da03      	bge.n	8006722 <SUBGRF_SetTxParams+0x90>
            power = -9;
 800671a:	f06f 0408 	mvn.w	r4, #8
 800671e:	e000      	b.n	8006722 <SUBGRF_SetTxParams+0x90>
            power = 22;
 8006720:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8006722:	2138      	movs	r1, #56	; 0x38
 8006724:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8006728:	f7ff fe2e 	bl	8006388 <SUBGRF_WriteRegister>
 800672c:	e7d4      	b.n	80066d8 <SUBGRF_SetTxParams+0x46>
	...

08006730 <SUBGRF_GetRxBufferStatus>:
{
 8006730:	b530      	push	{r4, r5, lr}
 8006732:	b083      	sub	sp, #12
 8006734:	4605      	mov	r5, r0
 8006736:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8006738:	2202      	movs	r2, #2
 800673a:	a901      	add	r1, sp, #4
 800673c:	2013      	movs	r0, #19
 800673e:	f7ff fc1d 	bl	8005f7c <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8006742:	f7ff fdc3 	bl	80062cc <SUBGRF_GetPacketType>
 8006746:	2801      	cmp	r0, #1
 8006748:	d007      	beq.n	800675a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800674a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800674e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8006750:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006754:	7023      	strb	r3, [r4, #0]
}
 8006756:	b003      	add	sp, #12
 8006758:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <SUBGRF_GetRxBufferStatus+0x40>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d1f2      	bne.n	800674a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8006764:	f240 7002 	movw	r0, #1794	; 0x702
 8006768:	f7ff fefe 	bl	8006568 <SUBGRF_ReadRegister>
 800676c:	7028      	strb	r0, [r5, #0]
 800676e:	e7ef      	b.n	8006750 <SUBGRF_GetRxBufferStatus+0x20>
 8006770:	2000038d 	.word	0x2000038d

08006774 <SUBGRF_WriteRegisters>:
{
 8006774:	b510      	push	{r4, lr}
 8006776:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006778:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800677c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800677e:	460a      	mov	r2, r1
 8006780:	4601      	mov	r1, r0
 8006782:	4803      	ldr	r0, [pc, #12]	; (8006790 <SUBGRF_WriteRegisters+0x1c>)
 8006784:	f7fc fe04 	bl	8003390 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006788:	f384 8810 	msr	PRIMASK, r4
}
 800678c:	bd10      	pop	{r4, pc}
 800678e:	bf00      	nop
 8006790:	20000790 	.word	0x20000790

08006794 <SUBGRF_SetSyncWord>:
{
 8006794:	b508      	push	{r3, lr}
 8006796:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006798:	2208      	movs	r2, #8
 800679a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800679e:	f7ff ffe9 	bl	8006774 <SUBGRF_WriteRegisters>
}
 80067a2:	2000      	movs	r0, #0
 80067a4:	bd08      	pop	{r3, pc}

080067a6 <SUBGRF_SetCrcSeed>:
{
 80067a6:	b500      	push	{lr}
 80067a8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80067aa:	0a03      	lsrs	r3, r0, #8
 80067ac:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80067b0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80067b4:	f7ff fd8a 	bl	80062cc <SUBGRF_GetPacketType>
 80067b8:	b110      	cbz	r0, 80067c0 <SUBGRF_SetCrcSeed+0x1a>
}
 80067ba:	b003      	add	sp, #12
 80067bc:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80067c0:	2202      	movs	r2, #2
 80067c2:	a901      	add	r1, sp, #4
 80067c4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80067c8:	f7ff ffd4 	bl	8006774 <SUBGRF_WriteRegisters>
}
 80067cc:	e7f5      	b.n	80067ba <SUBGRF_SetCrcSeed+0x14>

080067ce <SUBGRF_SetCrcPolynomial>:
{
 80067ce:	b500      	push	{lr}
 80067d0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80067d2:	0a03      	lsrs	r3, r0, #8
 80067d4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80067d8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80067dc:	f7ff fd76 	bl	80062cc <SUBGRF_GetPacketType>
 80067e0:	b110      	cbz	r0, 80067e8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80067e2:	b003      	add	sp, #12
 80067e4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80067e8:	2202      	movs	r2, #2
 80067ea:	a901      	add	r1, sp, #4
 80067ec:	f240 60be 	movw	r0, #1726	; 0x6be
 80067f0:	f7ff ffc0 	bl	8006774 <SUBGRF_WriteRegisters>
}
 80067f4:	e7f5      	b.n	80067e2 <SUBGRF_SetCrcPolynomial+0x14>
	...

080067f8 <SUBGRF_SetPacketParams>:
{
 80067f8:	b510      	push	{r4, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80067fe:	ab01      	add	r3, sp, #4
 8006800:	4a33      	ldr	r2, [pc, #204]	; (80068d0 <SUBGRF_SetPacketParams+0xd8>)
 8006802:	ca07      	ldmia	r2, {r0, r1, r2}
 8006804:	c303      	stmia	r3!, {r0, r1}
 8006806:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8006808:	7820      	ldrb	r0, [r4, #0]
 800680a:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <SUBGRF_SetPacketParams+0xdc>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4298      	cmp	r0, r3
 8006810:	d106      	bne.n	8006820 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8006812:	7823      	ldrb	r3, [r4, #0]
 8006814:	2b03      	cmp	r3, #3
 8006816:	d82a      	bhi.n	800686e <SUBGRF_SetPacketParams+0x76>
 8006818:	e8df f003 	tbb	[pc, r3]
 800681c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8006820:	f7ff fe02 	bl	8006428 <SUBGRF_SetPacketType>
 8006824:	e7f5      	b.n	8006812 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006826:	7a63      	ldrb	r3, [r4, #9]
 8006828:	2bf1      	cmp	r3, #241	; 0xf1
 800682a:	d022      	beq.n	8006872 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800682c:	2bf2      	cmp	r3, #242	; 0xf2
 800682e:	d02a      	beq.n	8006886 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006830:	8862      	ldrh	r2, [r4, #2]
 8006832:	0a11      	lsrs	r1, r2, #8
 8006834:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006838:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800683c:	7922      	ldrb	r2, [r4, #4]
 800683e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8006842:	7962      	ldrb	r2, [r4, #5]
 8006844:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006848:	79a2      	ldrb	r2, [r4, #6]
 800684a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800684e:	79e2      	ldrb	r2, [r4, #7]
 8006850:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006854:	7a22      	ldrb	r2, [r4, #8]
 8006856:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800685a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800685e:	7aa3      	ldrb	r3, [r4, #10]
 8006860:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8006864:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006866:	a901      	add	r1, sp, #4
 8006868:	208c      	movs	r0, #140	; 0x8c
 800686a:	f7ff fb77 	bl	8005f5c <SUBGRF_WriteCommand>
}
 800686e:	b004      	add	sp, #16
 8006870:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8006872:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006876:	f7ff ff96 	bl	80067a6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800687a:	f248 0005 	movw	r0, #32773	; 0x8005
 800687e:	f7ff ffa6 	bl	80067ce <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8006882:	2302      	movs	r3, #2
 8006884:	e7d4      	b.n	8006830 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8006886:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800688a:	f7ff ff8c 	bl	80067a6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800688e:	f241 0021 	movw	r0, #4129	; 0x1021
 8006892:	f7ff ff9c 	bl	80067ce <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006896:	2306      	movs	r3, #6
 8006898:	e7ca      	b.n	8006830 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800689a:	7b23      	ldrb	r3, [r4, #12]
 800689c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80068a0:	2201      	movs	r2, #1
        break;
 80068a2:	e7e0      	b.n	8006866 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80068a4:	89e3      	ldrh	r3, [r4, #14]
 80068a6:	0a1a      	lsrs	r2, r3, #8
 80068a8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80068ac:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80068b0:	7c23      	ldrb	r3, [r4, #16]
 80068b2:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <SUBGRF_SetPacketParams+0xe0>)
 80068b4:	7013      	strb	r3, [r2, #0]
 80068b6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80068ba:	7c63      	ldrb	r3, [r4, #17]
 80068bc:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80068c0:	7ca3      	ldrb	r3, [r4, #18]
 80068c2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80068c6:	7ce3      	ldrb	r3, [r4, #19]
 80068c8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80068cc:	2206      	movs	r2, #6
        break;
 80068ce:	e7ca      	b.n	8006866 <SUBGRF_SetPacketParams+0x6e>
 80068d0:	08007864 	.word	0x08007864
 80068d4:	2000038f 	.word	0x2000038f
 80068d8:	2000038d 	.word	0x2000038d

080068dc <SUBGRF_ReadRegisters>:
{
 80068dc:	b510      	push	{r4, lr}
 80068de:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80068e4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80068e6:	460a      	mov	r2, r1
 80068e8:	4601      	mov	r1, r0
 80068ea:	4803      	ldr	r0, [pc, #12]	; (80068f8 <SUBGRF_ReadRegisters+0x1c>)
 80068ec:	f7fc fda0 	bl	8003430 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f0:	f384 8810 	msr	PRIMASK, r4
}
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	20000790 	.word	0x20000790

080068fc <SUBGRF_GetRandom>:
{
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	b082      	sub	sp, #8
    uint32_t number = 0;
 8006900:	2600      	movs	r6, #0
 8006902:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006904:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006908:	f7ff fe2e 	bl	8006568 <SUBGRF_ReadRegister>
 800690c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800690e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8006912:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006916:	f7ff fd37 	bl	8006388 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800691a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800691e:	f7ff fe23 	bl	8006568 <SUBGRF_ReadRegister>
 8006922:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006924:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006928:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800692c:	f7ff fd2c 	bl	8006388 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006930:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006934:	f7ff fb6c 	bl	8006010 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006938:	2204      	movs	r2, #4
 800693a:	eb0d 0102 	add.w	r1, sp, r2
 800693e:	f640 0019 	movw	r0, #2073	; 0x819
 8006942:	f7ff ffcb 	bl	80068dc <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8006946:	4630      	mov	r0, r6
 8006948:	f7ff fb2e 	bl	8005fa8 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800694c:	4629      	mov	r1, r5
 800694e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006952:	f7ff fd19 	bl	8006388 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006956:	4621      	mov	r1, r4
 8006958:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800695c:	f7ff fd14 	bl	8006388 <SUBGRF_WriteRegister>
}
 8006960:	9801      	ldr	r0, [sp, #4]
 8006962:	b002      	add	sp, #8
 8006964:	bd70      	pop	{r4, r5, r6, pc}
	...

08006968 <SUBGRF_WriteBuffer>:
{
 8006968:	b510      	push	{r4, lr}
 800696a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006970:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006972:	460a      	mov	r2, r1
 8006974:	4601      	mov	r1, r0
 8006976:	4803      	ldr	r0, [pc, #12]	; (8006984 <SUBGRF_WriteBuffer+0x1c>)
 8006978:	f7fc feb0 	bl	80036dc <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697c:	f384 8810 	msr	PRIMASK, r4
}
 8006980:	bd10      	pop	{r4, pc}
 8006982:	bf00      	nop
 8006984:	20000790 	.word	0x20000790

08006988 <SUBGRF_SetPayload>:
{
 8006988:	b508      	push	{r3, lr}
 800698a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800698c:	4601      	mov	r1, r0
 800698e:	2000      	movs	r0, #0
 8006990:	f7ff ffea 	bl	8006968 <SUBGRF_WriteBuffer>
}
 8006994:	bd08      	pop	{r3, pc}

08006996 <SUBGRF_SendPayload>:
{
 8006996:	b510      	push	{r4, lr}
 8006998:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800699a:	f7ff fff5 	bl	8006988 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800699e:	4620      	mov	r0, r4
 80069a0:	f7ff fb1c 	bl	8005fdc <SUBGRF_SetTx>
}
 80069a4:	bd10      	pop	{r4, pc}
	...

080069a8 <SUBGRF_ReadBuffer>:
{
 80069a8:	b510      	push	{r4, lr}
 80069aa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80069b0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80069b2:	460a      	mov	r2, r1
 80069b4:	4601      	mov	r1, r0
 80069b6:	4803      	ldr	r0, [pc, #12]	; (80069c4 <SUBGRF_ReadBuffer+0x1c>)
 80069b8:	f7fc feda 	bl	8003770 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069bc:	f384 8810 	msr	PRIMASK, r4
}
 80069c0:	bd10      	pop	{r4, pc}
 80069c2:	bf00      	nop
 80069c4:	20000790 	.word	0x20000790

080069c8 <SUBGRF_GetPayload>:
{
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	4606      	mov	r6, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80069d8:	f10d 0107 	add.w	r1, sp, #7
 80069dc:	4620      	mov	r0, r4
 80069de:	f7ff fea7 	bl	8006730 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80069e2:	7822      	ldrb	r2, [r4, #0]
 80069e4:	42aa      	cmp	r2, r5
 80069e6:	d902      	bls.n	80069ee <SUBGRF_GetPayload+0x26>
        return 1;
 80069e8:	2001      	movs	r0, #1
}
 80069ea:	b002      	add	sp, #8
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80069ee:	4631      	mov	r1, r6
 80069f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80069f4:	f7ff ffd8 	bl	80069a8 <SUBGRF_ReadBuffer>
    return 0;
 80069f8:	2000      	movs	r0, #0
 80069fa:	e7f6      	b.n	80069ea <SUBGRF_GetPayload+0x22>

080069fc <SUBGRF_SetSwitch>:
{
 80069fc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80069fe:	2901      	cmp	r1, #1
 8006a00:	d003      	beq.n	8006a0a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8006a02:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8006a04:	f7fa fc70 	bl	80012e8 <RBI_ConfigRFSwitch>
}
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8006a0e:	2c01      	cmp	r4, #1
 8006a10:	d003      	beq.n	8006a1a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8006a12:	2c02      	cmp	r4, #2
 8006a14:	d1f6      	bne.n	8006a04 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8006a16:	2003      	movs	r0, #3
 8006a18:	e7f4      	b.n	8006a04 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8006a1a:	2004      	movs	r0, #4
 8006a1c:	f7ff fdb4 	bl	8006588 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8006a20:	2002      	movs	r0, #2
 8006a22:	e7f6      	b.n	8006a12 <SUBGRF_SetSwitch+0x16>

08006a24 <SUBGRF_SetRfTxPower>:
{
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8006a28:	f7fa fc62 	bl	80012f0 <RBI_GetTxConfig>
    switch (TxConfig)
 8006a2c:	b148      	cbz	r0, 8006a42 <SUBGRF_SetRfTxPower+0x1e>
 8006a2e:	2802      	cmp	r0, #2
 8006a30:	d10d      	bne.n	8006a4e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8006a32:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8006a34:	2202      	movs	r2, #2
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7ff fe2a 	bl	8006692 <SUBGRF_SetTxParams>
}
 8006a3e:	4628      	mov	r0, r5
 8006a40:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8006a42:	2c0f      	cmp	r4, #15
 8006a44:	dc01      	bgt.n	8006a4a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8006a46:	2501      	movs	r5, #1
 8006a48:	e7f4      	b.n	8006a34 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8006a4a:	2502      	movs	r5, #2
 8006a4c:	e7f2      	b.n	8006a34 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8006a4e:	2501      	movs	r5, #1
 8006a50:	e7f0      	b.n	8006a34 <SUBGRF_SetRfTxPower+0x10>

08006a52 <SUBGRF_GetRadioWakeUpTime>:
}
 8006a52:	2001      	movs	r0, #1
 8006a54:	4770      	bx	lr
	...

08006a58 <HAL_SUBGHZ_TxCpltCallback>:
{
 8006a58:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8006a5a:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2001      	movs	r0, #1
 8006a60:	4798      	blx	r3
}
 8006a62:	bd08      	pop	{r3, pc}
 8006a64:	20000390 	.word	0x20000390

08006a68 <HAL_SUBGHZ_RxCpltCallback>:
{
 8006a68:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8006a6a:	4b02      	ldr	r3, [pc, #8]	; (8006a74 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2002      	movs	r0, #2
 8006a70:	4798      	blx	r3
}
 8006a72:	bd08      	pop	{r3, pc}
 8006a74:	20000390 	.word	0x20000390

08006a78 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8006a78:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8006a7a:	4b02      	ldr	r3, [pc, #8]	; (8006a84 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2040      	movs	r0, #64	; 0x40
 8006a80:	4798      	blx	r3
}
 8006a82:	bd08      	pop	{r3, pc}
 8006a84:	20000390 	.word	0x20000390

08006a88 <HAL_SUBGHZ_CADStatusCallback>:
{
 8006a88:	b508      	push	{r3, lr}
    switch (cadstatus)
 8006a8a:	b111      	cbz	r1, 8006a92 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8006a8c:	2901      	cmp	r1, #1
 8006a8e:	d005      	beq.n	8006a9c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8006a90:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2080      	movs	r0, #128	; 0x80
 8006a98:	4798      	blx	r3
            break;
 8006a9a:	e7f9      	b.n	8006a90 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006aa4:	4798      	blx	r3
}
 8006aa6:	e7f3      	b.n	8006a90 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8006aa8:	20000390 	.word	0x20000390

08006aac <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8006aac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006aae:	4b03      	ldr	r3, [pc, #12]	; (8006abc <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006ab6:	4798      	blx	r3
}
 8006ab8:	bd08      	pop	{r3, pc}
 8006aba:	bf00      	nop
 8006abc:	20000390 	.word	0x20000390

08006ac0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8006ac0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006ac2:	4b02      	ldr	r3, [pc, #8]	; (8006acc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2020      	movs	r0, #32
 8006ac8:	4798      	blx	r3
}
 8006aca:	bd08      	pop	{r3, pc}
 8006acc:	20000390 	.word	0x20000390

08006ad0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8006ad0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8006ad2:	4b02      	ldr	r3, [pc, #8]	; (8006adc <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2004      	movs	r0, #4
 8006ad8:	4798      	blx	r3
}
 8006ada:	bd08      	pop	{r3, pc}
 8006adc:	20000390 	.word	0x20000390

08006ae0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8006ae0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8006ae2:	4b02      	ldr	r3, [pc, #8]	; (8006aec <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2008      	movs	r0, #8
 8006ae8:	4798      	blx	r3
}
 8006aea:	bd08      	pop	{r3, pc}
 8006aec:	20000390 	.word	0x20000390

08006af0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8006af0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8006af2:	4b02      	ldr	r3, [pc, #8]	; (8006afc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2010      	movs	r0, #16
 8006af8:	4798      	blx	r3
}
 8006afa:	bd08      	pop	{r3, pc}
 8006afc:	20000390 	.word	0x20000390

08006b00 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8006b00:	b1a0      	cbz	r0, 8006b2c <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 8006b02:	b410      	push	{r4}
 8006b04:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b15      	cmp	r3, #21
 8006b0a:	d80e      	bhi.n	8006b2a <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8006b10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006b14:	42a2      	cmp	r2, r4
 8006b16:	d802      	bhi.n	8006b1e <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8006b18:	3301      	adds	r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	e7f4      	b.n	8006b08 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8006b20:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006b24:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 8006b26:	bc10      	pop	{r4}
 8006b28:	4770      	bx	lr
    while( 1 );
 8006b2a:	e7fe      	b.n	8006b2a <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 8006b2c:	201f      	movs	r0, #31
}
 8006b2e:	4770      	bx	lr
 8006b30:	08007c40 	.word	0x08007c40

08006b34 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <SUBGRF_GetCFO+0x80>)
 8006b3e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8006b40:	f640 0007 	movw	r0, #2055	; 0x807
 8006b44:	f7ff fd10 	bl	8006568 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8006b48:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8006b4c:	aa02      	add	r2, sp, #8
 8006b4e:	4413      	add	r3, r2
 8006b50:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8006b54:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	fa02 f003 	lsl.w	r0, r2, r3
 8006b5e:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <SUBGRF_GetCFO+0x84>)
 8006b60:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 8006b64:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8006b68:	2807      	cmp	r0, #7
 8006b6a:	d921      	bls.n	8006bb0 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8006b6c:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8006b6e:	fb00 f004 	mul.w	r0, r0, r4
 8006b72:	2803      	cmp	r0, #3
 8006b74:	d800      	bhi.n	8006b78 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8006b76:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8006b78:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8006b7c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8006b80:	f7ff fcf2 	bl	8006568 <SUBGRF_ReadRegister>
 8006b84:	0200      	lsls	r0, r0, #8
 8006b86:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8006b8a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8006b8e:	f7ff fceb 	bl	8006568 <SUBGRF_ReadRegister>
 8006b92:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8006b94:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8006b98:	d003      	beq.n	8006ba2 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8006b9a:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8006b9e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8006ba2:	0963      	lsrs	r3, r4, #5
 8006ba4:	fb03 f300 	mul.w	r3, r3, r0
 8006ba8:	11db      	asrs	r3, r3, #7
 8006baa:	602b      	str	r3, [r5, #0]
}
 8006bac:	b002      	add	sp, #8
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8006bb0:	2402      	movs	r4, #2
 8006bb2:	e7dc      	b.n	8006b6e <SUBGRF_GetCFO+0x3a>
 8006bb4:	0c0a0804 	.word	0x0c0a0804
 8006bb8:	01e84800 	.word	0x01e84800

08006bbc <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc0:	4770      	bx	lr

08006bc2 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	4770      	bx	lr

08006bc8 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	4770      	bx	lr

08006bce <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8006bce:	4770      	bx	lr

08006bd0 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	4770      	bx	lr

08006bd4 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4770      	bx	lr

08006bd8 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8006bd8:	4770      	bx	lr

08006bda <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295
 8006bde:	4770      	bx	lr

08006be0 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	4770      	bx	lr

08006be6 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8006be6:	4770      	bx	lr

08006be8 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8006be8:	4770      	bx	lr

08006bea <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8006bea:	4770      	bx	lr

08006bec <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8006bec:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bee:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006bf2:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <TRACE_AllocateBufer+0x78>)
 8006bf6:	8a5c      	ldrh	r4, [r3, #18]
 8006bf8:	8a1a      	ldrh	r2, [r3, #16]
 8006bfa:	4294      	cmp	r4, r2
 8006bfc:	d010      	beq.n	8006c20 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006bfe:	4294      	cmp	r4, r2
 8006c00:	d91d      	bls.n	8006c3e <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8006c02:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 8006c06:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8006c08:	4283      	cmp	r3, r0
 8006c0a:	d81a      	bhi.n	8006c42 <TRACE_AllocateBufer+0x56>
 8006c0c:	4282      	cmp	r2, r0
 8006c0e:	d918      	bls.n	8006c42 <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8006c10:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <TRACE_AllocateBufer+0x78>)
 8006c12:	2601      	movs	r6, #1
 8006c14:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8006c16:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8006c18:	2400      	movs	r4, #0
 8006c1a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	e010      	b.n	8006c42 <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8006c20:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 8006c24:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8006c26:	4298      	cmp	r0, r3
 8006c28:	d30b      	bcc.n	8006c42 <TRACE_AllocateBufer+0x56>
 8006c2a:	4282      	cmp	r2, r0
 8006c2c:	d909      	bls.n	8006c42 <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <TRACE_AllocateBufer+0x78>)
 8006c30:	2601      	movs	r6, #1
 8006c32:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8006c34:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8006c36:	2400      	movs	r4, #0
 8006c38:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	e001      	b.n	8006c42 <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8006c3e:	1b13      	subs	r3, r2, r4
 8006c40:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8006c42:	4283      	cmp	r3, r0
 8006c44:	d90b      	bls.n	8006c5e <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8006c46:	4a07      	ldr	r2, [pc, #28]	; (8006c64 <TRACE_AllocateBufer+0x78>)
 8006c48:	8a53      	ldrh	r3, [r2, #18]
 8006c4a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8006c4c:	4403      	add	r3, r0
 8006c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c52:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8006c54:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c56:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8006c5a:	bc70      	pop	{r4, r5, r6}
 8006c5c:	4770      	bx	lr
  int16_t ret = -1;
 8006c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c62:	e7f8      	b.n	8006c56 <TRACE_AllocateBufer+0x6a>
 8006c64:	20000594 	.word	0x20000594

08006c68 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006c6c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8006c6e:	4a03      	ldr	r2, [pc, #12]	; (8006c7c <TRACE_Lock+0x14>)
 8006c70:	8ad3      	ldrh	r3, [r2, #22]
 8006c72:	3301      	adds	r3, #1
 8006c74:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8006c7a:	4770      	bx	lr
 8006c7c:	20000594 	.word	0x20000594

08006c80 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c80:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006c84:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8006c86:	4a03      	ldr	r2, [pc, #12]	; (8006c94 <TRACE_UnLock+0x14>)
 8006c88:	8ad3      	ldrh	r3, [r2, #22]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8006c92:	4770      	bx	lr
 8006c94:	20000594 	.word	0x20000594

08006c98 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8006c98:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <TRACE_IsLocked+0xc>)
 8006c9a:	8ad8      	ldrh	r0, [r3, #22]
}
 8006c9c:	3800      	subs	r0, #0
 8006c9e:	bf18      	it	ne
 8006ca0:	2001      	movne	r0, #1
 8006ca2:	4770      	bx	lr
 8006ca4:	20000594 	.word	0x20000594

08006ca8 <UTIL_ADV_TRACE_Init>:
{
 8006ca8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8006caa:	2218      	movs	r2, #24
 8006cac:	2100      	movs	r1, #0
 8006cae:	4807      	ldr	r0, [pc, #28]	; (8006ccc <UTIL_ADV_TRACE_Init+0x24>)
 8006cb0:	f000 f982 	bl	8006fb8 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8006cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4805      	ldr	r0, [pc, #20]	; (8006cd0 <UTIL_ADV_TRACE_Init+0x28>)
 8006cbc:	f000 f97c 	bl	8006fb8 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <UTIL_ADV_TRACE_Init+0x2c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4804      	ldr	r0, [pc, #16]	; (8006cd8 <UTIL_ADV_TRACE_Init+0x30>)
 8006cc6:	4798      	blx	r3
}
 8006cc8:	bd08      	pop	{r3, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000594 	.word	0x20000594
 8006cd0:	20000394 	.word	0x20000394
 8006cd4:	080078d4 	.word	0x080078d4
 8006cd8:	08006e59 	.word	0x08006e59

08006cdc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8006cdc:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8006cde:	6058      	str	r0, [r3, #4]
}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000594 	.word	0x20000594

08006ce8 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8006ce8:	4b01      	ldr	r3, [pc, #4]	; (8006cf0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8006cea:	7218      	strb	r0, [r3, #8]
}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000594 	.word	0x20000594

08006cf4 <TRACE_Send>:
{
 8006cf4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006cfa:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8006cfc:	f7ff ffcc 	bl	8006c98 <TRACE_IsLocked>
 8006d00:	b118      	cbz	r0, 8006d0a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d02:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8006d06:	2000      	movs	r0, #0
}
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8006d0a:	f7ff ffad 	bl	8006c68 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8006d0e:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <TRACE_Send+0x90>)
 8006d10:	8a1a      	ldrh	r2, [r3, #16]
 8006d12:	8a5b      	ldrh	r3, [r3, #18]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d02e      	beq.n	8006d76 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8006d18:	491a      	ldr	r1, [pc, #104]	; (8006d84 <TRACE_Send+0x90>)
 8006d1a:	7889      	ldrb	r1, [r1, #2]
 8006d1c:	2901      	cmp	r1, #1
 8006d1e:	d017      	beq.n	8006d50 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8006d20:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <TRACE_Send+0x90>)
 8006d22:	7892      	ldrb	r2, [r2, #2]
 8006d24:	b932      	cbnz	r2, 8006d34 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006d26:	4a17      	ldr	r2, [pc, #92]	; (8006d84 <TRACE_Send+0x90>)
 8006d28:	8a12      	ldrh	r2, [r2, #16]
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d91e      	bls.n	8006d6c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <TRACE_Send+0x90>)
 8006d32:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8006d34:	4e13      	ldr	r6, [pc, #76]	; (8006d84 <TRACE_Send+0x90>)
 8006d36:	8a33      	ldrh	r3, [r6, #16]
 8006d38:	4d13      	ldr	r5, [pc, #76]	; (8006d88 <TRACE_Send+0x94>)
 8006d3a:	441d      	add	r5, r3
 8006d3c:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8006d40:	f7f9 fd4e 	bl	80007e0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8006d44:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <TRACE_Send+0x98>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	8ab1      	ldrh	r1, [r6, #20]
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	4798      	blx	r3
 8006d4e:	e7db      	b.n	8006d08 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8006d50:	480c      	ldr	r0, [pc, #48]	; (8006d84 <TRACE_Send+0x90>)
 8006d52:	8801      	ldrh	r1, [r0, #0]
 8006d54:	1a8a      	subs	r2, r1, r2
 8006d56:	b292      	uxth	r2, r2
 8006d58:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8006d5e:	2100      	movs	r1, #0
 8006d60:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8006d62:	2a00      	cmp	r2, #0
 8006d64:	d1dc      	bne.n	8006d20 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8006d66:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8006d68:	8201      	strh	r1, [r0, #16]
 8006d6a:	e7d9      	b.n	8006d20 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8006d6c:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 8006d70:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <TRACE_Send+0x90>)
 8006d72:	8293      	strh	r3, [r2, #20]
 8006d74:	e7de      	b.n	8006d34 <TRACE_Send+0x40>
      TRACE_UnLock();
 8006d76:	f7ff ff83 	bl	8006c80 <TRACE_UnLock>
 8006d7a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8006d7e:	2000      	movs	r0, #0
}
 8006d80:	e7c2      	b.n	8006d08 <TRACE_Send+0x14>
 8006d82:	bf00      	nop
 8006d84:	20000594 	.word	0x20000594
 8006d88:	20000394 	.word	0x20000394
 8006d8c:	080078d4 	.word	0x080078d4

08006d90 <UTIL_ADV_TRACE_COND_FSend>:
{
 8006d90:	b408      	push	{r3}
 8006d92:	b530      	push	{r4, r5, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8006d9e:	4b2b      	ldr	r3, [pc, #172]	; (8006e4c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8006da0:	7a1b      	ldrb	r3, [r3, #8]
 8006da2:	4283      	cmp	r3, r0
 8006da4:	d34c      	bcc.n	8006e40 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8006da6:	4b29      	ldr	r3, [pc, #164]	; (8006e4c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	ea31 0303 	bics.w	r3, r1, r3
 8006dae:	d14a      	bne.n	8006e46 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8006db0:	4b26      	ldr	r3, [pc, #152]	; (8006e4c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	b123      	cbz	r3, 8006dc0 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8006db6:	b11a      	cbz	r2, 8006dc0 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8006db8:	f10d 0102 	add.w	r1, sp, #2
 8006dbc:	a801      	add	r0, sp, #4
 8006dbe:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8006dc0:	ab0a      	add	r3, sp, #40	; 0x28
 8006dc2:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dca:	4821      	ldr	r0, [pc, #132]	; (8006e50 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8006dcc:	f000 fc12 	bl	80075f4 <tiny_vsnprintf_like>
 8006dd0:	b285      	uxth	r5, r0
  TRACE_Lock();
 8006dd2:	f7ff ff49 	bl	8006c68 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8006dd6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8006dda:	4428      	add	r0, r5
 8006ddc:	4669      	mov	r1, sp
 8006dde:	b280      	uxth	r0, r0
 8006de0:	f7ff ff04 	bl	8006bec <TRACE_AllocateBufer>
 8006de4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006de8:	d025      	beq.n	8006e36 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	e00c      	b.n	8006e08 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8006dee:	f8bd 2000 	ldrh.w	r2, [sp]
 8006df2:	a906      	add	r1, sp, #24
 8006df4:	4419      	add	r1, r3
 8006df6:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8006dfa:	4916      	ldr	r1, [pc, #88]	; (8006e54 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8006dfc:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8006dfe:	3201      	adds	r2, #1
 8006e00:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8006e04:	3301      	adds	r3, #1
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d8ee      	bhi.n	8006dee <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006e10:	f8bd 0000 	ldrh.w	r0, [sp]
 8006e14:	9b05      	ldr	r3, [sp, #20]
 8006e16:	4622      	mov	r2, r4
 8006e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e1c:	4c0d      	ldr	r4, [pc, #52]	; (8006e54 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8006e1e:	4420      	add	r0, r4
 8006e20:	f000 fbe8 	bl	80075f4 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8006e24:	f7ff ff2c 	bl	8006c80 <TRACE_UnLock>
    return TRACE_Send();
 8006e28:	f7ff ff64 	bl	8006cf4 <TRACE_Send>
}
 8006e2c:	b006      	add	sp, #24
 8006e2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e32:	b001      	add	sp, #4
 8006e34:	4770      	bx	lr
  TRACE_UnLock();
 8006e36:	f7ff ff23 	bl	8006c80 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8006e3a:	f06f 0002 	mvn.w	r0, #2
 8006e3e:	e7f5      	b.n	8006e2c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8006e40:	f06f 0004 	mvn.w	r0, #4
 8006e44:	e7f2      	b.n	8006e2c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8006e46:	f06f 0005 	mvn.w	r0, #5
 8006e4a:	e7ef      	b.n	8006e2c <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8006e4c:	20000594 	.word	0x20000594
 8006e50:	200005ac 	.word	0x200005ac
 8006e54:	20000394 	.word	0x20000394

08006e58 <TRACE_TxCpltCallback>:
{
 8006e58:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e5a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e5e:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8006e60:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006e62:	789b      	ldrb	r3, [r3, #2]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d016      	beq.n	8006e96 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8006e68:	4a23      	ldr	r2, [pc, #140]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006e6a:	8a13      	ldrh	r3, [r2, #16]
 8006e6c:	8a90      	ldrh	r0, [r2, #20]
 8006e6e:	4403      	add	r3, r0
 8006e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e74:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8006e76:	4b20      	ldr	r3, [pc, #128]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006e78:	8a1a      	ldrh	r2, [r3, #16]
 8006e7a:	8a5b      	ldrh	r3, [r3, #18]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d003      	beq.n	8006e88 <TRACE_TxCpltCallback+0x30>
 8006e80:	481d      	ldr	r0, [pc, #116]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006e82:	8ac0      	ldrh	r0, [r0, #22]
 8006e84:	2801      	cmp	r0, #1
 8006e86:	d00b      	beq.n	8006ea0 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e88:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8006e8c:	f7f9 fcae 	bl	80007ec <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8006e90:	f7ff fef6 	bl	8006c80 <TRACE_UnLock>
}
 8006e94:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8006e96:	4b18      	ldr	r3, [pc, #96]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8006e9c:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8006e9e:	e7ea      	b.n	8006e76 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8006ea0:	4815      	ldr	r0, [pc, #84]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006ea2:	7880      	ldrb	r0, [r0, #2]
 8006ea4:	2801      	cmp	r0, #1
 8006ea6:	d014      	beq.n	8006ed2 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8006ea8:	4a13      	ldr	r2, [pc, #76]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006eaa:	7892      	ldrb	r2, [r2, #2]
 8006eac:	b932      	cbnz	r2, 8006ebc <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006eae:	4a12      	ldr	r2, [pc, #72]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006eb0:	8a12      	ldrh	r2, [r2, #16]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d91b      	bls.n	8006eee <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	4a0f      	ldr	r2, [pc, #60]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006eba:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006ebe:	8a1a      	ldrh	r2, [r3, #16]
 8006ec0:	480e      	ldr	r0, [pc, #56]	; (8006efc <TRACE_TxCpltCallback+0xa4>)
 8006ec2:	4410      	add	r0, r2
 8006ec4:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8006ec8:	4a0d      	ldr	r2, [pc, #52]	; (8006f00 <TRACE_TxCpltCallback+0xa8>)
 8006eca:	68d2      	ldr	r2, [r2, #12]
 8006ecc:	8a99      	ldrh	r1, [r3, #20]
 8006ece:	4790      	blx	r2
 8006ed0:	e7e0      	b.n	8006e94 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8006ed2:	4c09      	ldr	r4, [pc, #36]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006ed4:	8820      	ldrh	r0, [r4, #0]
 8006ed6:	1a82      	subs	r2, r0, r2
 8006ed8:	b292      	uxth	r2, r2
 8006eda:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8006edc:	2002      	movs	r0, #2
 8006ede:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	d1df      	bne.n	8006ea8 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8006ee8:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8006eea:	8220      	strh	r0, [r4, #16]
 8006eec:	e7dc      	b.n	8006ea8 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8006eee:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 8006ef2:	4a01      	ldr	r2, [pc, #4]	; (8006ef8 <TRACE_TxCpltCallback+0xa0>)
 8006ef4:	8293      	strh	r3, [r2, #20]
 8006ef6:	e7e1      	b.n	8006ebc <TRACE_TxCpltCallback+0x64>
 8006ef8:	20000594 	.word	0x20000594
 8006efc:	20000394 	.word	0x20000394
 8006f00:	080078d4 	.word	0x080078d4

08006f04 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006f04:	2300      	movs	r3, #0
 8006f06:	4a02      	ldr	r2, [pc, #8]	; (8006f10 <UTIL_LPM_Init+0xc>)
 8006f08:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006f0a:	4a02      	ldr	r2, [pc, #8]	; (8006f14 <UTIL_LPM_Init+0x10>)
 8006f0c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006f0e:	4770      	bx	lr
 8006f10:	200006b0 	.word	0x200006b0
 8006f14:	200006ac 	.word	0x200006ac

08006f18 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f18:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f1c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8006f1e:	b141      	cbz	r1, 8006f32 <UTIL_LPM_SetStopMode+0x1a>
 8006f20:	2901      	cmp	r1, #1
 8006f22:	d103      	bne.n	8006f2c <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8006f24:	4906      	ldr	r1, [pc, #24]	; (8006f40 <UTIL_LPM_SetStopMode+0x28>)
 8006f26:	680a      	ldr	r2, [r1, #0]
 8006f28:	4310      	orrs	r0, r2
 8006f2a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006f30:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8006f32:	4903      	ldr	r1, [pc, #12]	; (8006f40 <UTIL_LPM_SetStopMode+0x28>)
 8006f34:	680a      	ldr	r2, [r1, #0]
 8006f36:	ea22 0000 	bic.w	r0, r2, r0
 8006f3a:	6008      	str	r0, [r1, #0]
      break;
 8006f3c:	e7f6      	b.n	8006f2c <UTIL_LPM_SetStopMode+0x14>
 8006f3e:	bf00      	nop
 8006f40:	200006b0 	.word	0x200006b0

08006f44 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f48:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8006f4a:	b141      	cbz	r1, 8006f5e <UTIL_LPM_SetOffMode+0x1a>
 8006f4c:	2901      	cmp	r1, #1
 8006f4e:	d103      	bne.n	8006f58 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006f50:	4906      	ldr	r1, [pc, #24]	; (8006f6c <UTIL_LPM_SetOffMode+0x28>)
 8006f52:	680a      	ldr	r2, [r1, #0]
 8006f54:	4310      	orrs	r0, r2
 8006f56:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f58:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006f5c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8006f5e:	4903      	ldr	r1, [pc, #12]	; (8006f6c <UTIL_LPM_SetOffMode+0x28>)
 8006f60:	680a      	ldr	r2, [r1, #0]
 8006f62:	ea22 0000 	bic.w	r0, r2, r0
 8006f66:	6008      	str	r0, [r1, #0]
      break;
 8006f68:	e7f6      	b.n	8006f58 <UTIL_LPM_SetOffMode+0x14>
 8006f6a:	bf00      	nop
 8006f6c:	200006ac 	.word	0x200006ac

08006f70 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8006f70:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f72:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f76:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <UTIL_LPM_EnterLowPower+0x3c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	b13b      	cbz	r3, 8006f8e <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8006f7e:	4d0c      	ldr	r5, [pc, #48]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x40>)
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8006f84:	686b      	ldr	r3, [r5, #4]
 8006f86:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f88:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <UTIL_LPM_EnterLowPower+0x44>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	b12b      	cbz	r3, 8006fa0 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8006f94:	4d06      	ldr	r5, [pc, #24]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x40>)
 8006f96:	68ab      	ldr	r3, [r5, #8]
 8006f98:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8006f9a:	68eb      	ldr	r3, [r5, #12]
 8006f9c:	4798      	blx	r3
 8006f9e:	e7f3      	b.n	8006f88 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8006fa0:	4d03      	ldr	r5, [pc, #12]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x40>)
 8006fa2:	692b      	ldr	r3, [r5, #16]
 8006fa4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8006fa6:	696b      	ldr	r3, [r5, #20]
 8006fa8:	4798      	blx	r3
 8006faa:	e7ed      	b.n	8006f88 <UTIL_LPM_EnterLowPower+0x18>
 8006fac:	200006b0 	.word	0x200006b0
 8006fb0:	08007870 	.word	0x08007870
 8006fb4:	200006ac 	.word	0x200006ac

08006fb8 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8006fb8:	1e53      	subs	r3, r2, #1
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	b11a      	cbz	r2, 8006fc6 <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 8006fbe:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	e7f8      	b.n	8006fb8 <UTIL_MEM_set_8>
  }
}
 8006fc6:	4770      	bx	lr

08006fc8 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006fc8:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006fce:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8006fd0:	4a06      	ldr	r2, [pc, #24]	; (8006fec <UTIL_SEQ_SetTask+0x24>)
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	4303      	orrs	r3, r0
 8006fd6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006fd8:	4a05      	ldr	r2, [pc, #20]	; (8006ff0 <UTIL_SEQ_SetTask+0x28>)
 8006fda:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8006fde:	4318      	orrs	r0, r3
 8006fe0:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe4:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8006fe8:	bc10      	pop	{r4}
 8006fea:	4770      	bx	lr
 8006fec:	20000750 	.word	0x20000750
 8006ff0:	20000740 	.word	0x20000740

08006ff4 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8006ff4:	4770      	bx	lr

08006ff6 <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8006ff6:	4770      	bx	lr

08006ff8 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8006ff8:	0c03      	lsrs	r3, r0, #16
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	b9b3      	cbnz	r3, 800702c <SEQ_BitPosition+0x34>
 8006ffe:	0400      	lsls	r0, r0, #16
 8007000:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8007002:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007006:	d102      	bne.n	800700e <SEQ_BitPosition+0x16>
 8007008:	3308      	adds	r3, #8
 800700a:	b2db      	uxtb	r3, r3
 800700c:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800700e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007012:	d102      	bne.n	800701a <SEQ_BitPosition+0x22>
 8007014:	3304      	adds	r3, #4
 8007016:	b2db      	uxtb	r3, r3
 8007018:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800701a:	0f00      	lsrs	r0, r0, #28
 800701c:	4a04      	ldr	r2, [pc, #16]	; (8007030 <SEQ_BitPosition+0x38>)
 800701e:	5c10      	ldrb	r0, [r2, r0]
 8007020:	4418      	add	r0, r3
 8007022:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8007024:	f1c0 001f 	rsb	r0, r0, #31
}
 8007028:	b2c0      	uxtb	r0, r0
 800702a:	4770      	bx	lr
  uint8_t n = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	e7e8      	b.n	8007002 <SEQ_BitPosition+0xa>
 8007030:	08007cf0 	.word	0x08007cf0

08007034 <UTIL_SEQ_Run>:
{
 8007034:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8007036:	4b3b      	ldr	r3, [pc, #236]	; (8007124 <UTIL_SEQ_Run+0xf0>)
 8007038:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800703a:	4020      	ands	r0, r4
 800703c:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800703e:	e012      	b.n	8007066 <UTIL_SEQ_Run+0x32>
      counter++;
 8007040:	3301      	adds	r3, #1
 8007042:	e01f      	b.n	8007084 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8007044:	3b01      	subs	r3, #1
 8007046:	4938      	ldr	r1, [pc, #224]	; (8007128 <UTIL_SEQ_Run+0xf4>)
 8007048:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800704c:	4002      	ands	r2, r0
 800704e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1f6      	bne.n	8007044 <UTIL_SEQ_Run+0x10>
 8007056:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 800705a:	4b34      	ldr	r3, [pc, #208]	; (800712c <UTIL_SEQ_Run+0xf8>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b34      	ldr	r3, [pc, #208]	; (8007130 <UTIL_SEQ_Run+0xfc>)
 8007060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007064:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007066:	4b33      	ldr	r3, [pc, #204]	; (8007134 <UTIL_SEQ_Run+0x100>)
 8007068:	6819      	ldr	r1, [r3, #0]
 800706a:	4b33      	ldr	r3, [pc, #204]	; (8007138 <UTIL_SEQ_Run+0x104>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	400b      	ands	r3, r1
 8007070:	4a2c      	ldr	r2, [pc, #176]	; (8007124 <UTIL_SEQ_Run+0xf0>)
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	4213      	tst	r3, r2
 8007076:	d033      	beq.n	80070e0 <UTIL_SEQ_Run+0xac>
 8007078:	4b30      	ldr	r3, [pc, #192]	; (800713c <UTIL_SEQ_Run+0x108>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4830      	ldr	r0, [pc, #192]	; (8007140 <UTIL_SEQ_Run+0x10c>)
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	4003      	ands	r3, r0
 8007082:	d12d      	bne.n	80070e0 <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007084:	4828      	ldr	r0, [pc, #160]	; (8007128 <UTIL_SEQ_Run+0xf4>)
 8007086:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 800708a:	4008      	ands	r0, r1
 800708c:	4010      	ands	r0, r2
 800708e:	d0d7      	beq.n	8007040 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007090:	4a25      	ldr	r2, [pc, #148]	; (8007128 <UTIL_SEQ_Run+0xf4>)
 8007092:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007096:	6852      	ldr	r2, [r2, #4]
 8007098:	4210      	tst	r0, r2
 800709a:	d105      	bne.n	80070a8 <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800709c:	4a22      	ldr	r2, [pc, #136]	; (8007128 <UTIL_SEQ_Run+0xf4>)
 800709e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80070a2:	f04f 31ff 	mov.w	r1, #4294967295
 80070a6:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80070a8:	4d1f      	ldr	r5, [pc, #124]	; (8007128 <UTIL_SEQ_Run+0xf4>)
 80070aa:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80070ae:	686e      	ldr	r6, [r5, #4]
 80070b0:	4030      	ands	r0, r6
 80070b2:	f7ff ffa1 	bl	8006ff8 <SEQ_BitPosition>
 80070b6:	4a1d      	ldr	r2, [pc, #116]	; (800712c <UTIL_SEQ_Run+0xf8>)
 80070b8:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80070ba:	2301      	movs	r3, #1
 80070bc:	fa03 f000 	lsl.w	r0, r3, r0
 80070c0:	ea26 0000 	bic.w	r0, r6, r0
 80070c4:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070ca:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	4093      	lsls	r3, r2
 80070d0:	43d8      	mvns	r0, r3
 80070d2:	4919      	ldr	r1, [pc, #100]	; (8007138 <UTIL_SEQ_Run+0x104>)
 80070d4:	680a      	ldr	r2, [r1, #0]
 80070d6:	ea22 0303 	bic.w	r3, r2, r3
 80070da:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80070dc:	2302      	movs	r3, #2
 80070de:	e7b8      	b.n	8007052 <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <UTIL_SEQ_Run+0xf8>)
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80070e8:	f7ff ff84 	bl	8006ff4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ec:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070f0:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80070f2:	4b11      	ldr	r3, [pc, #68]	; (8007138 <UTIL_SEQ_Run+0x104>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <UTIL_SEQ_Run+0x100>)
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	4013      	ands	r3, r2
 80070fc:	4a09      	ldr	r2, [pc, #36]	; (8007124 <UTIL_SEQ_Run+0xf0>)
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	4213      	tst	r3, r2
 8007102:	d105      	bne.n	8007110 <UTIL_SEQ_Run+0xdc>
 8007104:	4b0d      	ldr	r3, [pc, #52]	; (800713c <UTIL_SEQ_Run+0x108>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <UTIL_SEQ_Run+0x10c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	421a      	tst	r2, r3
 800710e:	d006      	beq.n	800711e <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007110:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8007114:	f7ff ff6f 	bl	8006ff6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8007118:	4b02      	ldr	r3, [pc, #8]	; (8007124 <UTIL_SEQ_Run+0xf0>)
 800711a:	601c      	str	r4, [r3, #0]
}
 800711c:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 800711e:	f7f9 fb5b 	bl	80007d8 <UTIL_SEQ_Idle>
 8007122:	e7f5      	b.n	8007110 <UTIL_SEQ_Run+0xdc>
 8007124:	20000010 	.word	0x20000010
 8007128:	20000740 	.word	0x20000740
 800712c:	200006b4 	.word	0x200006b4
 8007130:	200006c0 	.word	0x200006c0
 8007134:	20000014 	.word	0x20000014
 8007138:	20000750 	.word	0x20000750
 800713c:	200006b8 	.word	0x200006b8
 8007140:	200006bc 	.word	0x200006bc

08007144 <UTIL_SEQ_RegTask>:
{
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007148:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800714c:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800714e:	f7ff ff53 	bl	8006ff8 <SEQ_BitPosition>
 8007152:	4b03      	ldr	r3, [pc, #12]	; (8007160 <UTIL_SEQ_RegTask+0x1c>)
 8007154:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007158:	f385 8810 	msr	PRIMASK, r5
}
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	bf00      	nop
 8007160:	200006c0 	.word	0x200006c0

08007164 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8007164:	b082      	sub	sp, #8
 8007166:	b082      	sub	sp, #8
 8007168:	f10d 0c08 	add.w	ip, sp, #8
 800716c:	e90c 0006 	stmdb	ip, {r1, r2}
 8007170:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 8007172:	9a00      	ldr	r2, [sp, #0]
 8007174:	4413      	add	r3, r2
 8007176:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8007178:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800717c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8007180:	440a      	add	r2, r1
 8007182:	b291      	uxth	r1, r2
 8007184:	b212      	sxth	r2, r2
 8007186:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8007188:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800718c:	db04      	blt.n	8007198 <SysTimeAdd+0x34>
  {
    c.Seconds++;
 800718e:	3301      	adds	r3, #1
 8007190:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8007192:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8007196:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8007198:	b002      	add	sp, #8
 800719a:	b002      	add	sp, #8
 800719c:	4770      	bx	lr
	...

080071a0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 80071a0:	b530      	push	{r4, r5, lr}
 80071a2:	b087      	sub	sp, #28
 80071a4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80071a6:	2300      	movs	r3, #0
 80071a8:	9304      	str	r3, [sp, #16]
 80071aa:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80071ae:	4d0b      	ldr	r5, [pc, #44]	; (80071dc <SysTimeGet+0x3c>)
 80071b0:	692b      	ldr	r3, [r5, #16]
 80071b2:	a805      	add	r0, sp, #20
 80071b4:	4798      	blx	r3
 80071b6:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80071b8:	68eb      	ldr	r3, [r5, #12]
 80071ba:	4798      	blx	r3
 80071bc:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80071c0:	686b      	ldr	r3, [r5, #4]
 80071c2:	4798      	blx	r3
 80071c4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80071c6:	9b05      	ldr	r3, [sp, #20]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	9a03      	ldr	r2, [sp, #12]
 80071ce:	4601      	mov	r1, r0
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7ff ffc7 	bl	8007164 <SysTimeAdd>

  return sysTime;
}
 80071d6:	4620      	mov	r0, r4
 80071d8:	b007      	add	sp, #28
 80071da:	bd30      	pop	{r4, r5, pc}
 80071dc:	08007894 	.word	0x08007894

080071e0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80071e0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80071e2:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <UTIL_TIMER_Init+0x10>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80071e8:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <UTIL_TIMER_Init+0x14>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4798      	blx	r3
}
 80071ee:	bd08      	pop	{r3, pc}
 80071f0:	20000754 	.word	0x20000754
 80071f4:	080078a8 	.word	0x080078a8

080071f8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80071f8:	b1a8      	cbz	r0, 8007226 <UTIL_TIMER_Create+0x2e>
{
 80071fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fc:	4617      	mov	r7, r2
 80071fe:	461e      	mov	r6, r3
 8007200:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8007202:	b193      	cbz	r3, 800722a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8007204:	2500      	movs	r5, #0
 8007206:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <UTIL_TIMER_Create+0x38>)
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	4608      	mov	r0, r1
 800720e:	4798      	blx	r3
 8007210:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8007212:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8007214:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8007216:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8007218:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800721e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8007220:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8007222:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8007224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8007226:	2001      	movs	r0, #1
}
 8007228:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800722a:	2001      	movs	r0, #1
 800722c:	e7fa      	b.n	8007224 <UTIL_TIMER_Create+0x2c>
 800722e:	bf00      	nop
 8007230:	080078a8 	.word	0x080078a8

08007234 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8007234:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8007236:	4c03      	ldr	r4, [pc, #12]	; (8007244 <UTIL_TIMER_GetCurrentTime+0x10>)
 8007238:	69e3      	ldr	r3, [r4, #28]
 800723a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800723c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800723e:	4798      	blx	r3
}
 8007240:	bd10      	pop	{r4, pc}
 8007242:	bf00      	nop
 8007244:	080078a8 	.word	0x080078a8

08007248 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800724c:	4d05      	ldr	r5, [pc, #20]	; (8007264 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800724e:	69eb      	ldr	r3, [r5, #28]
 8007250:	4798      	blx	r3
 8007252:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8007254:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007256:	4630      	mov	r0, r6
 8007258:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800725a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800725c:	1a20      	subs	r0, r4, r0
 800725e:	4798      	blx	r3
}
 8007260:	bd70      	pop	{r4, r5, r6, pc}
 8007262:	bf00      	nop
 8007264:	080078a8 	.word	0x080078a8

08007268 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <TimerExists+0x18>)
 800726a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800726c:	b11b      	cbz	r3, 8007276 <TimerExists+0xe>
  {
    if( cur == TimerObject )
 800726e:	4283      	cmp	r3, r0
 8007270:	d003      	beq.n	800727a <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	e7fa      	b.n	800726c <TimerExists+0x4>
  }
  return false;
 8007276:	2000      	movs	r0, #0
 8007278:	4770      	bx	lr
      return true;
 800727a:	2001      	movs	r0, #1
}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20000754 	.word	0x20000754

08007284 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8007288:	4e09      	ldr	r6, [pc, #36]	; (80072b0 <TimerSetTimeout+0x2c>)
 800728a:	6a33      	ldr	r3, [r6, #32]
 800728c:	4798      	blx	r3
 800728e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8007290:	2301      	movs	r3, #1
 8007292:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8007294:	6827      	ldr	r7, [r4, #0]
 8007296:	69b6      	ldr	r6, [r6, #24]
 8007298:	47b0      	blx	r6
 800729a:	4428      	add	r0, r5
 800729c:	4287      	cmp	r7, r0
 800729e:	d202      	bcs.n	80072a6 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80072a0:	47b0      	blx	r6
 80072a2:	4405      	add	r5, r0
 80072a4:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80072a6:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <TimerSetTimeout+0x2c>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	6820      	ldr	r0, [r4, #0]
 80072ac:	4798      	blx	r3
}
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b0:	080078a8 	.word	0x080078a8

080072b4 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80072b4:	b368      	cbz	r0, 8007312 <UTIL_TIMER_Stop+0x5e>
{
 80072b6:	b510      	push	{r4, lr}
 80072b8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80072be:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80072c0:	4b15      	ldr	r3, [pc, #84]	; (8007318 <UTIL_TIMER_Stop+0x64>)
 80072c2:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80072c4:	2301      	movs	r3, #1
 80072c6:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80072c8:	b1e1      	cbz	r1, 8007304 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80072ce:	4288      	cmp	r0, r1
 80072d0:	d006      	beq.n	80072e0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80072d2:	460b      	mov	r3, r1
        while( cur != NULL )
 80072d4:	b1b3      	cbz	r3, 8007304 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d011      	beq.n	80072fe <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80072da:	4619      	mov	r1, r3
            cur = cur->Next;
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	e7f9      	b.n	80072d4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80072e0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80072e2:	6948      	ldr	r0, [r1, #20]
 80072e4:	b120      	cbz	r0, 80072f0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80072e6:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <UTIL_TIMER_Stop+0x64>)
 80072e8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80072ea:	f7ff ffcb 	bl	8007284 <TimerSetTimeout>
 80072ee:	e009      	b.n	8007304 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <UTIL_TIMER_Stop+0x68>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4798      	blx	r3
            TimerListHead = NULL;
 80072f6:	4b08      	ldr	r3, [pc, #32]	; (8007318 <UTIL_TIMER_Stop+0x64>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	e002      	b.n	8007304 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	b123      	cbz	r3, 800730c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8007302:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007304:	f384 8810 	msr	PRIMASK, r4
}
 8007308:	2000      	movs	r0, #0
}
 800730a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800730c:	2300      	movs	r3, #0
 800730e:	614b      	str	r3, [r1, #20]
 8007310:	e7f8      	b.n	8007304 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8007312:	2001      	movs	r0, #1
}
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000754 	.word	0x20000754
 800731c:	080078a8 	.word	0x080078a8

08007320 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007320:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <TimerInsertTimer+0x38>)
 8007322:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8007324:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8007326:	6951      	ldr	r1, [r2, #20]
 8007328:	b189      	cbz	r1, 800734e <TimerInsertTimer+0x2e>
{
 800732a:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800732c:	6804      	ldr	r4, [r0, #0]
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	428c      	cmp	r4, r1
 8007332:	d908      	bls.n	8007346 <TimerInsertTimer+0x26>
    {
        cur = next;
 8007334:	461a      	mov	r2, r3
        next = next->Next;
 8007336:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8007338:	6951      	ldr	r1, [r2, #20]
 800733a:	2900      	cmp	r1, #0
 800733c:	d1f6      	bne.n	800732c <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800733e:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8007340:	2300      	movs	r3, #0
 8007342:	6143      	str	r3, [r0, #20]
 8007344:	e001      	b.n	800734a <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8007346:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8007348:	6143      	str	r3, [r0, #20]
}
 800734a:	bc10      	pop	{r4}
 800734c:	4770      	bx	lr
  cur->Next = TimerObject;
 800734e:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	6143      	str	r3, [r0, #20]
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	20000754 	.word	0x20000754

0800735c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800735c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <TimerInsertNewHeadTimer+0x18>)
 8007360:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8007362:	b10b      	cbz	r3, 8007368 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8007364:	2200      	movs	r2, #0
 8007366:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8007368:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800736a:	4b02      	ldr	r3, [pc, #8]	; (8007374 <TimerInsertNewHeadTimer+0x18>)
 800736c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800736e:	f7ff ff89 	bl	8007284 <TimerSetTimeout>
}
 8007372:	bd08      	pop	{r3, pc}
 8007374:	20000754 	.word	0x20000754

08007378 <UTIL_TIMER_Start>:
{
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800737a:	2800      	cmp	r0, #0
 800737c:	d036      	beq.n	80073ec <UTIL_TIMER_Start+0x74>
 800737e:	4604      	mov	r4, r0
 8007380:	f7ff ff72 	bl	8007268 <TimerExists>
 8007384:	2800      	cmp	r0, #0
 8007386:	d134      	bne.n	80073f2 <UTIL_TIMER_Start+0x7a>
 8007388:	7a65      	ldrb	r5, [r4, #9]
 800738a:	2d00      	cmp	r5, #0
 800738c:	d133      	bne.n	80073f6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800738e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007392:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8007394:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <UTIL_TIMER_Start+0x84>)
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	4798      	blx	r3
    if( ticks < minValue )
 800739c:	4287      	cmp	r7, r0
 800739e:	d300      	bcc.n	80073a2 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80073a0:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80073a2:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80073a8:	2201      	movs	r2, #1
 80073aa:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80073ac:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <UTIL_TIMER_Start+0x88>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	b183      	cbz	r3, 80073d6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80073b4:	4b11      	ldr	r3, [pc, #68]	; (80073fc <UTIL_TIMER_Start+0x84>)
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	4418      	add	r0, r3
 80073be:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <UTIL_TIMER_Start+0x88>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4298      	cmp	r0, r3
 80073c8:	d20c      	bcs.n	80073e4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7ff ffc6 	bl	800735c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	f386 8810 	msr	PRIMASK, r6
}
 80073d4:	e00b      	b.n	80073ee <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80073d6:	4b09      	ldr	r3, [pc, #36]	; (80073fc <UTIL_TIMER_Start+0x84>)
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80073dc:	4620      	mov	r0, r4
 80073de:	f7ff ffbd 	bl	800735c <TimerInsertNewHeadTimer>
 80073e2:	e7f5      	b.n	80073d0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80073e4:	4620      	mov	r0, r4
 80073e6:	f7ff ff9b 	bl	8007320 <TimerInsertTimer>
 80073ea:	e7f1      	b.n	80073d0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80073ec:	2501      	movs	r5, #1
}
 80073ee:	4628      	mov	r0, r5
 80073f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80073f2:	2501      	movs	r5, #1
 80073f4:	e7fb      	b.n	80073ee <UTIL_TIMER_Start+0x76>
 80073f6:	2501      	movs	r5, #1
 80073f8:	e7f9      	b.n	80073ee <UTIL_TIMER_Start+0x76>
 80073fa:	bf00      	nop
 80073fc:	080078a8 	.word	0x080078a8
 8007400:	20000754 	.word	0x20000754

08007404 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8007404:	b198      	cbz	r0, 800742e <UTIL_TIMER_SetPeriod+0x2a>
{
 8007406:	b510      	push	{r4, lr}
 8007408:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <UTIL_TIMER_SetPeriod+0x30>)
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	4608      	mov	r0, r1
 8007410:	4798      	blx	r3
 8007412:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8007414:	4620      	mov	r0, r4
 8007416:	f7ff ff27 	bl	8007268 <TimerExists>
 800741a:	b908      	cbnz	r0, 8007420 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800741c:	2000      	movs	r0, #0
}
 800741e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff ff47 	bl	80072b4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8007426:	4620      	mov	r0, r4
 8007428:	f7ff ffa6 	bl	8007378 <UTIL_TIMER_Start>
 800742c:	e7f7      	b.n	800741e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800742e:	2001      	movs	r0, #1
}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	080078a8 	.word	0x080078a8

08007438 <UTIL_TIMER_IRQ_Handler>:
{
 8007438:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800743e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8007440:	4c1e      	ldr	r4, [pc, #120]	; (80074bc <UTIL_TIMER_IRQ_Handler+0x84>)
 8007442:	6963      	ldr	r3, [r4, #20]
 8007444:	4798      	blx	r3
 8007446:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 800744c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 800744e:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	b923      	cbnz	r3, 800745e <UTIL_TIMER_IRQ_Handler+0x26>
 8007454:	e018      	b.n	8007488 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800745a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800745c:	b1a3      	cbz	r3, 8007488 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	42a2      	cmp	r2, r4
 8007462:	d9f8      	bls.n	8007456 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8007464:	1a31      	subs	r1, r6, r0
 8007466:	440a      	add	r2, r1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e7f6      	b.n	800745a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 800746c:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <UTIL_TIMER_IRQ_Handler+0x88>)
 800746e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8007470:	6962      	ldr	r2, [r4, #20]
 8007472:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8007478:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800747a:	68e3      	ldr	r3, [r4, #12]
 800747c:	6920      	ldr	r0, [r4, #16]
 800747e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8007480:	8963      	ldrh	r3, [r4, #10]
 8007482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007486:	d012      	beq.n	80074ae <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8007488:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <UTIL_TIMER_IRQ_Handler+0x88>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	b13b      	cbz	r3, 800749e <UTIL_TIMER_IRQ_Handler+0x66>
 800748e:	681c      	ldr	r4, [r3, #0]
 8007490:	2c00      	cmp	r4, #0
 8007492:	d0eb      	beq.n	800746c <UTIL_TIMER_IRQ_Handler+0x34>
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <UTIL_TIMER_IRQ_Handler+0x84>)
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	4798      	blx	r3
 800749a:	4284      	cmp	r4, r0
 800749c:	d3e6      	bcc.n	800746c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800749e:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <UTIL_TIMER_IRQ_Handler+0x88>)
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	b108      	cbz	r0, 80074a8 <UTIL_TIMER_IRQ_Handler+0x70>
 80074a4:	7a03      	ldrb	r3, [r0, #8]
 80074a6:	b133      	cbz	r3, 80074b6 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a8:	f385 8810 	msr	PRIMASK, r5
}
 80074ac:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7ff ff62 	bl	8007378 <UTIL_TIMER_Start>
 80074b4:	e7e8      	b.n	8007488 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80074b6:	f7ff fee5 	bl	8007284 <TimerSetTimeout>
 80074ba:	e7f5      	b.n	80074a8 <UTIL_TIMER_IRQ_Handler+0x70>
 80074bc:	080078a8 	.word	0x080078a8
 80074c0:	20000754 	.word	0x20000754

080074c4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80074c4:	4601      	mov	r1, r0
  int i = 0;
 80074c6:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80074c8:	680a      	ldr	r2, [r1, #0]
 80074ca:	7813      	ldrb	r3, [r2, #0]
 80074cc:	3b30      	subs	r3, #48	; 0x30
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	d808      	bhi.n	80074e6 <ee_skip_atoi+0x22>
 80074d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80074d8:	1c53      	adds	r3, r2, #1
 80074da:	600b      	str	r3, [r1, #0]
 80074dc:	7813      	ldrb	r3, [r2, #0]
 80074de:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80074e2:	3830      	subs	r0, #48	; 0x30
 80074e4:	e7f0      	b.n	80074c8 <ee_skip_atoi+0x4>
  return i;
}
 80074e6:	4770      	bx	lr

080074e8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80074e8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80074ec:	b093      	sub	sp, #76	; 0x4c
 80074ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80074f0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80074f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074f6:	d111      	bne.n	800751c <ee_number+0x34>
  char *dig = lower_digits;
 80074f8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80075ec <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80074fc:	469c      	mov	ip, r3
 80074fe:	3b02      	subs	r3, #2
 8007500:	2b22      	cmp	r3, #34	; 0x22
 8007502:	d871      	bhi.n	80075e8 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8007504:	f015 0401 	ands.w	r4, r5, #1
 8007508:	d00b      	beq.n	8007522 <ee_number+0x3a>
 800750a:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 800750c:	f015 0f02 	tst.w	r5, #2
 8007510:	d010      	beq.n	8007534 <ee_number+0x4c>
  {
    if (num < 0)
 8007512:	2a00      	cmp	r2, #0
 8007514:	db07      	blt.n	8007526 <ee_number+0x3e>
  sign = 0;
 8007516:	f04f 0e00 	mov.w	lr, #0
 800751a:	e00d      	b.n	8007538 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 800751c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075f0 <ee_number+0x108>
 8007520:	e7ec      	b.n	80074fc <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8007522:	2720      	movs	r7, #32
 8007524:	e7f2      	b.n	800750c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8007526:	4252      	negs	r2, r2
      size--;
 8007528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800752a:	3b01      	subs	r3, #1
 800752c:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 800752e:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 8007532:	e001      	b.n	8007538 <ee_number+0x50>
  sign = 0;
 8007534:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8007538:	b9da      	cbnz	r2, 8007572 <ee_number+0x8a>
    tmp[i++] = '0';
 800753a:	2330      	movs	r3, #48	; 0x30
 800753c:	f88d 3004 	strb.w	r3, [sp, #4]
 8007540:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8007542:	42b5      	cmp	r5, r6
 8007544:	dd00      	ble.n	8007548 <ee_number+0x60>
 8007546:	462e      	mov	r6, r5
  size -= precision;
 8007548:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800754a:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800754c:	b30c      	cbz	r4, 8007592 <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 800754e:	f1be 0f00 	cmp.w	lr, #0
 8007552:	d003      	beq.n	800755c <ee_number+0x74>
 8007554:	f800 eb01 	strb.w	lr, [r0], #1
 8007558:	3901      	subs	r1, #1
 800755a:	d007      	beq.n	800756c <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800755c:	2b00      	cmp	r3, #0
 800755e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007562:	dd20      	ble.n	80075a6 <ee_number+0xbe>
 8007564:	f800 7b01 	strb.w	r7, [r0], #1
 8007568:	3901      	subs	r1, #1
 800756a:	d1f7      	bne.n	800755c <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 800756c:	b013      	add	sp, #76	; 0x4c
 800756e:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 8007572:	2500      	movs	r5, #0
    while (num != 0)
 8007574:	2a00      	cmp	r2, #0
 8007576:	d0e4      	beq.n	8007542 <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8007578:	fbb2 f3fc 	udiv	r3, r2, ip
 800757c:	fb0c 2213 	mls	r2, ip, r3, r2
 8007580:	f818 a002 	ldrb.w	sl, [r8, r2]
 8007584:	aa12      	add	r2, sp, #72	; 0x48
 8007586:	442a      	add	r2, r5
 8007588:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 800758c:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800758e:	3501      	adds	r5, #1
 8007590:	e7f0      	b.n	8007574 <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007592:	2b00      	cmp	r3, #0
 8007594:	f103 33ff 	add.w	r3, r3, #4294967295
 8007598:	ddd9      	ble.n	800754e <ee_number+0x66>
 800759a:	2220      	movs	r2, #32
 800759c:	f800 2b01 	strb.w	r2, [r0], #1
 80075a0:	3901      	subs	r1, #1
 80075a2:	d1f6      	bne.n	8007592 <ee_number+0xaa>
 80075a4:	e7e2      	b.n	800756c <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 80075a6:	42ae      	cmp	r6, r5
 80075a8:	f106 36ff 	add.w	r6, r6, #4294967295
 80075ac:	dd05      	ble.n	80075ba <ee_number+0xd2>
 80075ae:	2230      	movs	r2, #48	; 0x30
 80075b0:	f800 2b01 	strb.w	r2, [r0], #1
 80075b4:	3901      	subs	r1, #1
 80075b6:	d1f6      	bne.n	80075a6 <ee_number+0xbe>
 80075b8:	e7d8      	b.n	800756c <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	f105 35ff 	add.w	r5, r5, #4294967295
 80075c0:	dd08      	ble.n	80075d4 <ee_number+0xec>
 80075c2:	aa12      	add	r2, sp, #72	; 0x48
 80075c4:	442a      	add	r2, r5
 80075c6:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80075ca:	f800 2b01 	strb.w	r2, [r0], #1
 80075ce:	3901      	subs	r1, #1
 80075d0:	d1f3      	bne.n	80075ba <ee_number+0xd2>
 80075d2:	e7cb      	b.n	800756c <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80075da:	ddc7      	ble.n	800756c <ee_number+0x84>
 80075dc:	2220      	movs	r2, #32
 80075de:	f800 2b01 	strb.w	r2, [r0], #1
 80075e2:	3901      	subs	r1, #1
 80075e4:	d1f6      	bne.n	80075d4 <ee_number+0xec>
 80075e6:	e7c1      	b.n	800756c <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 80075e8:	2000      	movs	r0, #0
 80075ea:	e7bf      	b.n	800756c <ee_number+0x84>
 80075ec:	08007d28 	.word	0x08007d28
 80075f0:	08007d00 	.word	0x08007d00

080075f4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80075f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075f8:	b087      	sub	sp, #28
 80075fa:	9205      	str	r2, [sp, #20]
 80075fc:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80075fe:	1e0f      	subs	r7, r1, #0
 8007600:	f340 80b9 	ble.w	8007776 <tiny_vsnprintf_like+0x182>
 8007604:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007606:	4604      	mov	r4, r0
 8007608:	e004      	b.n	8007614 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 800760a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800760e:	9b05      	ldr	r3, [sp, #20]
 8007610:	3301      	adds	r3, #1
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	9905      	ldr	r1, [sp, #20]
 8007616:	780a      	ldrb	r2, [r1, #0]
 8007618:	b922      	cbnz	r2, 8007624 <tiny_vsnprintf_like+0x30>
 800761a:	1ba3      	subs	r3, r4, r6
 800761c:	1e78      	subs	r0, r7, #1
 800761e:	4283      	cmp	r3, r0
 8007620:	f2c0 80a3 	blt.w	800776a <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 8007624:	1ba3      	subs	r3, r4, r6
 8007626:	f107 38ff 	add.w	r8, r7, #4294967295
 800762a:	4543      	cmp	r3, r8
 800762c:	f280 809d 	bge.w	800776a <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 8007630:	2a25      	cmp	r2, #37	; 0x25
 8007632:	d1ea      	bne.n	800760a <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8007634:	1c4b      	adds	r3, r1, #1
 8007636:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8007638:	784b      	ldrb	r3, [r1, #1]
 800763a:	2b30      	cmp	r3, #48	; 0x30
 800763c:	d020      	beq.n	8007680 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 800763e:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8007642:	3b30      	subs	r3, #48	; 0x30
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b09      	cmp	r3, #9
 8007648:	d91d      	bls.n	8007686 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 800764a:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 800764e:	9b05      	ldr	r3, [sp, #20]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8007656:	2b20      	cmp	r3, #32
 8007658:	d868      	bhi.n	800772c <tiny_vsnprintf_like+0x138>
 800765a:	e8df f003 	tbb	[pc, r3]
 800765e:	674b      	.short	0x674b
 8007660:	67676767 	.word	0x67676767
 8007664:	67676767 	.word	0x67676767
 8007668:	67631b67 	.word	0x67631b67
 800766c:	63676767 	.word	0x63676767
 8007670:	67676767 	.word	0x67676767
 8007674:	67676767 	.word	0x67676767
 8007678:	19672967 	.word	0x19672967
 800767c:	6767      	.short	0x6767
 800767e:	7d          	.byte	0x7d
 800767f:	00          	.byte	0x00
      flags |= ZEROPAD;
 8007680:	f04f 0901 	mov.w	r9, #1
 8007684:	e7dd      	b.n	8007642 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8007686:	a805      	add	r0, sp, #20
 8007688:	f7ff ff1c 	bl	80074c4 <ee_skip_atoi>
 800768c:	4605      	mov	r5, r0
 800768e:	e7de      	b.n	800764e <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8007690:	230a      	movs	r3, #10
 8007692:	e032      	b.n	80076fa <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8007694:	3d01      	subs	r5, #1
 8007696:	2d00      	cmp	r5, #0
 8007698:	dd03      	ble.n	80076a2 <tiny_vsnprintf_like+0xae>
 800769a:	2320      	movs	r3, #32
 800769c:	f804 3b01 	strb.w	r3, [r4], #1
 80076a0:	e7f8      	b.n	8007694 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80076a2:	9b04      	ldr	r3, [sp, #16]
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	9204      	str	r2, [sp, #16]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80076ae:	e7ae      	b.n	800760e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	9204      	str	r2, [sp, #16]
 80076b6:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80076ba:	f1b8 0f00 	cmp.w	r8, #0
 80076be:	d00a      	beq.n	80076d6 <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80076c0:	4640      	mov	r0, r8
 80076c2:	f7f8 fd59 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80076c6:	1e6b      	subs	r3, r5, #1
 80076c8:	4285      	cmp	r5, r0
 80076ca:	dd07      	ble.n	80076dc <tiny_vsnprintf_like+0xe8>
 80076cc:	2220      	movs	r2, #32
 80076ce:	f804 2b01 	strb.w	r2, [r4], #1
 80076d2:	461d      	mov	r5, r3
 80076d4:	e7f7      	b.n	80076c6 <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 80076d6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800777c <tiny_vsnprintf_like+0x188>
 80076da:	e7f1      	b.n	80076c0 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80076dc:	2200      	movs	r2, #0
 80076de:	e006      	b.n	80076ee <tiny_vsnprintf_like+0xfa>
 80076e0:	4643      	mov	r3, r8
 80076e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80076e6:	f804 1b01 	strb.w	r1, [r4], #1
 80076ea:	3201      	adds	r2, #1
 80076ec:	4698      	mov	r8, r3
 80076ee:	4282      	cmp	r2, r0
 80076f0:	dbf6      	blt.n	80076e0 <tiny_vsnprintf_like+0xec>
 80076f2:	e78c      	b.n	800760e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 80076f4:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80076f8:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80076fa:	f019 0f02 	tst.w	r9, #2
 80076fe:	d02f      	beq.n	8007760 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 8007700:	9a04      	ldr	r2, [sp, #16]
 8007702:	1d11      	adds	r1, r2, #4
 8007704:	9104      	str	r1, [sp, #16]
 8007706:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007708:	1ba1      	subs	r1, r4, r6
 800770a:	f8cd 9008 	str.w	r9, [sp, #8]
 800770e:	f04f 30ff 	mov.w	r0, #4294967295
 8007712:	9001      	str	r0, [sp, #4]
 8007714:	9500      	str	r5, [sp, #0]
 8007716:	eba8 0101 	sub.w	r1, r8, r1
 800771a:	4620      	mov	r0, r4
 800771c:	f7ff fee4 	bl	80074e8 <ee_number>
 8007720:	4604      	mov	r4, r0
 8007722:	e774      	b.n	800760e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8007724:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8007728:	230a      	movs	r3, #10
 800772a:	e7e6      	b.n	80076fa <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 800772c:	2a25      	cmp	r2, #37	; 0x25
 800772e:	d002      	beq.n	8007736 <tiny_vsnprintf_like+0x142>
 8007730:	2325      	movs	r3, #37	; 0x25
 8007732:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8007736:	1ba3      	subs	r3, r4, r6
 8007738:	4598      	cmp	r8, r3
 800773a:	dd0f      	ble.n	800775c <tiny_vsnprintf_like+0x168>
        if (*fmt)
 800773c:	9b05      	ldr	r3, [sp, #20]
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	b13a      	cbz	r2, 8007752 <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 8007742:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8007746:	1ba3      	subs	r3, r4, r6
 8007748:	4598      	cmp	r8, r3
 800774a:	f73f af60 	bgt.w	800760e <tiny_vsnprintf_like+0x1a>
    base = 10;
 800774e:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8007750:	e7d3      	b.n	80076fa <tiny_vsnprintf_like+0x106>
          --fmt;
 8007752:	3b01      	subs	r3, #1
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	e7f6      	b.n	8007746 <tiny_vsnprintf_like+0x152>
        base = 16;
 8007758:	2310      	movs	r3, #16
 800775a:	e7ce      	b.n	80076fa <tiny_vsnprintf_like+0x106>
    base = 10;
 800775c:	230a      	movs	r3, #10
 800775e:	e7cc      	b.n	80076fa <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 8007760:	9a04      	ldr	r2, [sp, #16]
 8007762:	1d11      	adds	r1, r2, #4
 8007764:	9104      	str	r1, [sp, #16]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	e7ce      	b.n	8007708 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 800776a:	2300      	movs	r3, #0
 800776c:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800776e:	1ba0      	subs	r0, r4, r6
}
 8007770:	b007      	add	sp, #28
 8007772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8007776:	2000      	movs	r0, #0
 8007778:	e7fa      	b.n	8007770 <tiny_vsnprintf_like+0x17c>
 800777a:	bf00      	nop
 800777c:	08007d50 	.word	0x08007d50

08007780 <__libc_init_array>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	4d0d      	ldr	r5, [pc, #52]	; (80077b8 <__libc_init_array+0x38>)
 8007784:	4c0d      	ldr	r4, [pc, #52]	; (80077bc <__libc_init_array+0x3c>)
 8007786:	1b64      	subs	r4, r4, r5
 8007788:	10a4      	asrs	r4, r4, #2
 800778a:	2600      	movs	r6, #0
 800778c:	42a6      	cmp	r6, r4
 800778e:	d109      	bne.n	80077a4 <__libc_init_array+0x24>
 8007790:	4d0b      	ldr	r5, [pc, #44]	; (80077c0 <__libc_init_array+0x40>)
 8007792:	4c0c      	ldr	r4, [pc, #48]	; (80077c4 <__libc_init_array+0x44>)
 8007794:	f000 f840 	bl	8007818 <_init>
 8007798:	1b64      	subs	r4, r4, r5
 800779a:	10a4      	asrs	r4, r4, #2
 800779c:	2600      	movs	r6, #0
 800779e:	42a6      	cmp	r6, r4
 80077a0:	d105      	bne.n	80077ae <__libc_init_array+0x2e>
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a8:	4798      	blx	r3
 80077aa:	3601      	adds	r6, #1
 80077ac:	e7ee      	b.n	800778c <__libc_init_array+0xc>
 80077ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b2:	4798      	blx	r3
 80077b4:	3601      	adds	r6, #1
 80077b6:	e7f2      	b.n	800779e <__libc_init_array+0x1e>
 80077b8:	08007d60 	.word	0x08007d60
 80077bc:	08007d60 	.word	0x08007d60
 80077c0:	08007d60 	.word	0x08007d60
 80077c4:	08007d64 	.word	0x08007d64

080077c8 <memcpy>:
 80077c8:	440a      	add	r2, r1
 80077ca:	4291      	cmp	r1, r2
 80077cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077d0:	d100      	bne.n	80077d4 <memcpy+0xc>
 80077d2:	4770      	bx	lr
 80077d4:	b510      	push	{r4, lr}
 80077d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077de:	4291      	cmp	r1, r2
 80077e0:	d1f9      	bne.n	80077d6 <memcpy+0xe>
 80077e2:	bd10      	pop	{r4, pc}

080077e4 <memset>:
 80077e4:	4402      	add	r2, r0
 80077e6:	4603      	mov	r3, r0
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d100      	bne.n	80077ee <memset+0xa>
 80077ec:	4770      	bx	lr
 80077ee:	f803 1b01 	strb.w	r1, [r3], #1
 80077f2:	e7f9      	b.n	80077e8 <memset+0x4>

080077f4 <strncmp>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	b16a      	cbz	r2, 8007814 <strncmp+0x20>
 80077f8:	3901      	subs	r1, #1
 80077fa:	1884      	adds	r4, r0, r2
 80077fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007800:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007804:	4293      	cmp	r3, r2
 8007806:	d103      	bne.n	8007810 <strncmp+0x1c>
 8007808:	42a0      	cmp	r0, r4
 800780a:	d001      	beq.n	8007810 <strncmp+0x1c>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f5      	bne.n	80077fc <strncmp+0x8>
 8007810:	1a98      	subs	r0, r3, r2
 8007812:	bd10      	pop	{r4, pc}
 8007814:	4610      	mov	r0, r2
 8007816:	e7fc      	b.n	8007812 <strncmp+0x1e>

08007818 <_init>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr

08007824 <_fini>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr
