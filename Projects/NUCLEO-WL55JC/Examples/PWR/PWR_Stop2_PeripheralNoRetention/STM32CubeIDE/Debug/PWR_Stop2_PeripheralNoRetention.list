
PWR_Stop2_PeripheralNoRetention.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002550  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002730  08002730  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002730  08002730  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000018  08002758  00020018  2**2
                  ALLOC
 10 RAM1_region   00000000  20000058  20000058  00020018  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020018  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000058  20000058  00020058  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000a908  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000a328  00000000  00000000  0002a94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001d40  00000000  00000000  00034c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d28  00000000  00000000  000369b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7755  00000000  00000000  000376e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000c50  00000000  00000000  000dee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001ad1d  00000000  00000000  000dfa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  000fa7a5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003480  00000000  00000000  000fa7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	08002670 	.word	0x08002670

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	08002670 	.word	0x08002670

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800017c:	f000 fa12 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f002 fa37 	bl	8002618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f000 f827 	bl	80001fc <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80001bc:	08002740 	.word	0x08002740
  ldr r2, =_sbss
 80001c0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80001c4:	20000058 	.word	0x20000058

080001c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC_IRQHandler>

080001ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4313      	orrs	r3, r2
 80001e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4013      	ands	r3, r2
 80001ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ee:	68fb      	ldr	r3, [r7, #12]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
	...

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f9d6 	bl	80005b0 <HAL_Init>
  */
    
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f840 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f8a6 	bl	8000358 <MX_GPIO_Init>
  MX_RNG_Init();
 800020c:	f000 f88e 	bl	800032c <MX_RNG_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* Generate random number */
    if (HAL_RNG_GenerateRandomNumber(&hrng, &Random32bit) != HAL_OK)
 8000210:	491a      	ldr	r1, [pc, #104]	; (800027c <main+0x80>)
 8000212:	481b      	ldr	r0, [pc, #108]	; (8000280 <main+0x84>)
 8000214:	f002 f8f8 	bl	8002408 <HAL_RNG_GenerateRandomNumber>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <main+0x26>
    {
      /* Random number generation error */
      Error_Handler();
 800021e:	f000 f8ed 	bl	80003fc <Error_Handler>
    }
    
    if (HAL_RNG_GenerateRandomNumber(&hrng, &Random32bit) != HAL_OK)
 8000222:	4916      	ldr	r1, [pc, #88]	; (800027c <main+0x80>)
 8000224:	4816      	ldr	r0, [pc, #88]	; (8000280 <main+0x84>)
 8000226:	f002 f8ef 	bl	8002408 <HAL_RNG_GenerateRandomNumber>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <main+0x38>
    {
      /* Random number generation error */
      Error_Handler();
 8000230:	f000 f8e4 	bl	80003fc <Error_Handler>
    }
    
    /* Wait for press on user button */
    ubUserButtonEvent = 0;
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <main+0x88>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
    while (ubUserButtonEvent == 0)
 800023a:	e005      	b.n	8000248 <main+0x4c>
    {
      BSP_LED_Toggle(LED2);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 f997 	bl	8000570 <BSP_LED_Toggle>
      HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f000 fa2a 	bl	800069c <HAL_Delay>
    while (ubUserButtonEvent == 0)
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <main+0x88>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f4      	beq.n	800023c <main+0x40>
    }

    /* Turn off LED before entering in low power mode */
    BSP_LED_Off(LED2);
 8000252:	2001      	movs	r0, #1
 8000254:	f000 f972 	bl	800053c <BSP_LED_Off>
    
    /* Debounce delay of user button */
    HAL_Delay(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f000 fa1e 	bl	800069c <HAL_Delay>
    
    /* Request to enter in Stop2 mode */
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000260:	2001      	movs	r0, #1
 8000262:	f000 fd0d 	bl	8000c80 <HAL_PWREx_EnterSTOP2Mode>
    
    /* Turn on LED during 1 sec */
    BSP_LED_On(LED2);
 8000266:	2001      	movs	r0, #1
 8000268:	f000 f94e 	bl	8000508 <BSP_LED_On>
    HAL_Delay(1000);
 800026c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000270:	f000 fa14 	bl	800069c <HAL_Delay>
    
    /* Re-initialize peripherals not featuring retention in system Stop2 mode */
    MX_RNG_Init();
 8000274:	f000 f85a 	bl	800032c <MX_RNG_Init>
    if (HAL_RNG_GenerateRandomNumber(&hrng, &Random32bit) != HAL_OK)
 8000278:	e7ca      	b.n	8000210 <main+0x14>
 800027a:	bf00      	nop
 800027c:	20000038 	.word	0x20000038
 8000280:	2000003c 	.word	0x2000003c
 8000284:	20000034 	.word	0x20000034

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09a      	sub	sp, #104	; 0x68
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0320 	add.w	r3, r7, #32
 8000292:	2248      	movs	r2, #72	; 0x48
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 f9e2 	bl	8002660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ae:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <SystemClock_Config+0xa0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002b6:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <SystemClock_Config+0xa0>)
 80002b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002bc:	6013      	str	r3, [r2, #0]
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <SystemClock_Config+0xa0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ca:	2320      	movs	r3, #32
 80002cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002d2:	2300      	movs	r3, #0
 80002d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80002d6:	23b0      	movs	r3, #176	; 0xb0
 80002d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002da:	2300      	movs	r3, #0
 80002dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 ff98 	bl	8001218 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ee:	f000 f885 	bl	80003fc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002f2:	234f      	movs	r3, #79	; 0x4f
 80002f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fb1c 	bl	800194c <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800031a:	f000 f86f 	bl	80003fc <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3768      	adds	r7, #104	; 0x68
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	58000400 	.word	0x58000400

0800032c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <MX_RNG_Init+0x24>)
 8000332:	4a08      	ldr	r2, [pc, #32]	; (8000354 <MX_RNG_Init+0x28>)
 8000334:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_RNG_Init+0x24>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_RNG_Init+0x24>)
 800033e:	f001 ffbf 	bl	80022c0 <HAL_RNG_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000348:	f000 f858 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	2000003c 	.word	0x2000003c
 8000354:	58001000 	.word	0x58001000

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	2002      	movs	r0, #2
 800036e:	f7ff ff2c 	bl	80001ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	2001      	movs	r0, #1
 8000374:	f7ff ff29 	bl	80001ca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800037e:	4815      	ldr	r0, [pc, #84]	; (80003d4 <MX_GPIO_Init+0x7c>)
 8000380:	f000 fc1c 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	480e      	ldr	r0, [pc, #56]	; (80003d4 <MX_GPIO_Init+0x7c>)
 800039c:	f000 faae 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003a0:	2301      	movs	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f000 faa1 	bl	80008fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	2006      	movs	r0, #6
 80003c0:	f000 fa67 	bl	8000892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003c4:	2006      	movs	r0, #6
 80003c6:	f000 fa7e 	bl	80008c6 <HAL_NVIC_EnableIRQ>

}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	48000400 	.word	0x48000400

080003d8 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == BUTTON_SW1_PIN)
 80003e2:	88fb      	ldrh	r3, [r7, #6]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d102      	bne.n	80003ee <HAL_GPIO_EXTI_Callback+0x16>
 {
   /* Set variable to report push button event to main program */
   ubUserButtonEvent = 1;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <HAL_GPIO_EXTI_Callback+0x20>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
 }
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	20000034 	.word	0x20000034

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET);
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <Error_Handler+0x14>)
 8000408:	f000 fbd8 	bl	8000bbc <HAL_GPIO_WritePin>
 800040c:	e7f8      	b.n	8000400 <Error_Handler+0x4>
 800040e:	bf00      	nop
 8000410:	48000400 	.word	0x48000400

08000414 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800041c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4313      	orrs	r3, r2
 800042a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800042c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4013      	ands	r3, r2
 8000436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000438:	68fb      	ldr	r3, [r7, #12]
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b090      	sub	sp, #64	; 0x40
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	2238      	movs	r2, #56	; 0x38
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f002 f8fd 	bl	8002660 <memset>
  if(hrng->Instance==RNG)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <HAL_RNG_MspInit+0x50>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d113      	bne.n	8000498 <HAL_RNG_MspInit+0x48>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000474:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8000476:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800047a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	4618      	mov	r0, r3
 8000482:	f001 fe03 	bl	800208c <HAL_RCCEx_PeriphCLKConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800048c:	f7ff ffb6 	bl	80003fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000490:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000494:	f7ff ffbe 	bl	8000414 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000498:	bf00      	nop
 800049a:	3740      	adds	r7, #64	; 0x40
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	58001000 	.word	0x58001000

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <HardFault_Handler+0x4>

080004b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <MemManage_Handler+0x4>

080004bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <BusFault_Handler+0x4>

080004c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <UsageFault_Handler+0x4>

080004c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f0:	f000 f8b8 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 fb8d 	bl	8000c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <BSP_LED_On+0x2c>)
 8000516:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <BSP_LED_On+0x30>)
 800051e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	f000 fb49 	bl	8000bbc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000000 	.word	0x20000000
 8000538:	080026a4 	.word	0x080026a4

0800053c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <BSP_LED_Off+0x2c>)
 800054a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <BSP_LED_Off+0x30>)
 8000552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	f000 fb2f 	bl	8000bbc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000000 	.word	0x20000000
 800056c:	080026a4 	.word	0x080026a4

08000570 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <BSP_LED_Toggle+0x2c>)
 800057e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4906      	ldr	r1, [pc, #24]	; (80005a0 <BSP_LED_Toggle+0x30>)
 8000586:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f000 fb2c 	bl	8000bea <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000
 80005a0:	080026a4 	.word	0x080026a4

080005a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 f95e 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80005c0:	f001 fba6 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <HAL_Init+0x3c>)
 80005c8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ca:	200f      	movs	r0, #15
 80005cc:	f000 f810 	bl	80005f0 <HAL_InitTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e001      	b.n	80005e0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005dc:	f7ff ff32 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000000c 	.word	0x2000000c

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d024      	beq.n	800064e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000604:	f001 fb84 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8000608:	4602      	mov	r2, r0
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <HAL_InitTick+0x6c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	fbb3 f3f1 	udiv	r3, r3, r1
 8000618:	fbb2 f3f3 	udiv	r3, r2, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f960 	bl	80008e2 <HAL_SYSTICK_Config>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10f      	bne.n	8000648 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	d809      	bhi.n	8000642 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062e:	2200      	movs	r2, #0
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	f04f 30ff 	mov.w	r0, #4294967295
 8000636:	f000 f92c 	bl	8000892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063a:	4a09      	ldr	r2, [pc, #36]	; (8000660 <HAL_InitTick+0x70>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	e007      	b.n	8000652 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e004      	b.n	8000652 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e001      	b.n	8000652 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000014 	.word	0x20000014
 8000660:	20000010 	.word	0x20000010

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000014 	.word	0x20000014
 8000684:	20000050 	.word	0x20000050

08000688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000050 	.word	0x20000050

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff fff0 	bl	8000688 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_Delay+0x44>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffe0 	bl	8000688 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000014 	.word	0x20000014

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <__NVIC_EnableIRQ+0x34>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f7ff ff90 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff2d 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff44 	bl	800072c <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff92 	bl	80007d4 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff61 	bl	8000780 <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff37 	bl	8000748 <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffa4 	bl	8000838 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e140      	b.n	8000b8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8132 	beq.w	8000b88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b01      	cmp	r3, #1
 800092e:	d005      	beq.n	800093c <HAL_GPIO_Init+0x40>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d130      	bne.n	800099e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000972:	2201      	movs	r2, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	091b      	lsrs	r3, r3, #4
 8000988:	f003 0201 	and.w	r2, r3, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d017      	beq.n	80009da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d123      	bne.n	8000a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	08da      	lsrs	r2, r3, #3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3208      	adds	r2, #8
 80009ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	220f      	movs	r2, #15
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	691a      	ldr	r2, [r3, #16]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	08da      	lsrs	r2, r3, #3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3208      	adds	r2, #8
 8000a28:	6939      	ldr	r1, [r7, #16]
 8000a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0203 	and.w	r2, r3, #3
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 808c 	beq.w	8000b88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a70:	4a4e      	ldr	r2, [pc, #312]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	2207      	movs	r2, #7
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a9a:	d00d      	beq.n	8000ab8 <HAL_GPIO_Init+0x1bc>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <HAL_GPIO_Init+0x2b4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d007      	beq.n	8000ab4 <HAL_GPIO_Init+0x1b8>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d101      	bne.n	8000ab0 <HAL_GPIO_Init+0x1b4>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e004      	b.n	8000aba <HAL_GPIO_Init+0x1be>
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	e002      	b.n	8000aba <HAL_GPIO_Init+0x1be>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e000      	b.n	8000aba <HAL_GPIO_Init+0x1be>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	f002 0203 	and.w	r2, r2, #3
 8000ac0:	0092      	lsls	r2, r2, #2
 8000ac2:	4093      	lsls	r3, r2
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aca:	4938      	ldr	r1, [pc, #224]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000ad8:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ade:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000afe:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b0c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000b2c:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b82:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f47f aeb7 	bne.w	800090c <HAL_GPIO_Init+0x10>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	48000800 	.word	0x48000800
 8000bb8:	58000800 	.word	0x58000800

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfc:	887a      	ldrh	r2, [r7, #2]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	041a      	lsls	r2, r3, #16
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fbcc 	bl	80003d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58000800 	.word	0x58000800

08000c4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	58000400 	.word	0x58000400

08000c68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_PWREx_GetVoltageRange+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	58000400 	.word	0x58000400

08000c80 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f023 0307 	bic.w	r3, r3, #7
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000cac:	bf30      	wfi
 8000cae:	e002      	b.n	8000cb6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000cb0:	bf40      	sev
    __WFE();
 8000cb2:	bf20      	wfe
    __WFE();
 8000cb4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000cbc:	f023 0304 	bic.w	r3, r3, #4
 8000cc0:	6113      	str	r3, [r2, #16]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	58000400 	.word	0x58000400
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ce4:	d101      	bne.n	8000cea <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	58000400 	.word	0x58000400

08000cf8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000d42:	d101      	bne.n	8000d48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d9c:	d101      	bne.n	8000da2 <LL_RCC_HSE_IsReady+0x18>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <LL_RCC_HSE_IsReady+0x1a>
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df6:	d101      	bne.n	8000dfc <LL_RCC_HSI_IsReady+0x18>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <LL_RCC_HSI_IsReady+0x1a>
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	061b      	lsls	r3, r3, #24
 8000e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e20:	4313      	orrs	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d101      	bne.n	8000e46 <LL_RCC_LSE_IsReady+0x18>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <LL_RCC_LSE_IsReady+0x1a>
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d101      	bne.n	8000ea8 <LL_RCC_LSI_IsReady+0x18>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <LL_RCC_LSI_IsReady+0x1a>
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6013      	str	r3, [r2, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6013      	str	r3, [r2, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d101      	bne.n	8000f00 <LL_RCC_MSI_IsReady+0x16>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <LL_RCC_MSI_IsReady+0x18>
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d101      	bne.n	8000f20 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f72:	4313      	orrs	r3, r2
 8000f74:	604b      	str	r3, [r1, #4]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f023 0203 	bic.w	r2, r3, #3
 8000f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	608b      	str	r3, [r1, #8]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	608b      	str	r3, [r1, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001018:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800101c:	f023 020f 	bic.w	r2, r3, #15
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001028:	4313      	orrs	r3, r2
 800102a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	608b      	str	r3, [r1, #8]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4313      	orrs	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800109e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80010d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010fe:	d101      	bne.n	8001104 <LL_RCC_PLL_IsReady+0x18>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <LL_RCC_PLL_IsReady+0x1a>
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0303 	and.w	r3, r3, #3
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117a:	d101      	bne.n	8001180 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001192:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800119e:	d101      	bne.n	80011a4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c2:	d101      	bne.n	80011c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011e4:	d101      	bne.n	80011ea <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001206:	d101      	bne.n	800120c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
	...

08001218 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e38a      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122a:	f7ff febc 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 800122e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001230:	f7ff ff8f 	bl	8001152 <LL_RCC_PLL_GetMainSource>
 8001234:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80c9 	beq.w	80013d6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x3e>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d17b      	bne.n	8001348 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d178      	bne.n	8001348 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001256:	f7ff fe48 	bl	8000eea <LL_RCC_MSI_IsReady>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_OscConfig+0x54>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e369      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x72>
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001288:	e006      	b.n	8001298 <HAL_RCC_OscConfig+0x80>
 800128a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001298:	4293      	cmp	r3, r2
 800129a:	d222      	bcs.n	80012e2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fd49 	bl	8001d38 <RCC_SetFlashLatencyFromMSIRange>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e347      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe3c 	bl	8000f58 <LL_RCC_MSI_SetCalibTrimming>
 80012e0:	e021      	b.n	8001326 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe23 	bl	8000f58 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fd0e 	bl	8001d38 <RCC_SetFlashLatencyFromMSIRange>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e30c      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001326:	f000 fcf3 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 800132a:	4603      	mov	r3, r0
 800132c:	4ab4      	ldr	r2, [pc, #720]	; (8001600 <HAL_RCC_OscConfig+0x3e8>)
 800132e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001330:	4bb4      	ldr	r3, [pc, #720]	; (8001604 <HAL_RCC_OscConfig+0x3ec>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f95b 	bl	80005f0 <HAL_InitTick>
 800133a:	4603      	mov	r3, r0
 800133c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800133e:	7cfb      	ldrb	r3, [r7, #19]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d047      	beq.n	80013d4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001344:	7cfb      	ldrb	r3, [r7, #19]
 8001346:	e2fb      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d02c      	beq.n	80013aa <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001350:	f7ff fdaf 	bl	8000eb2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001354:	f7ff f998 	bl	8000688 <HAL_GetTick>
 8001358:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800135c:	f7ff f994 	bl	8000688 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e2e8      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800136e:	f7ff fdbc 	bl	8000eea <LL_RCC_MSI_IsReady>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f1      	beq.n	800135c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fdd8 	bl	8000f58 <LL_RCC_MSI_SetCalibTrimming>
 80013a8:	e015      	b.n	80013d6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013aa:	f7ff fd90 	bl	8000ece <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ae:	f7ff f96b 	bl	8000688 <HAL_GetTick>
 80013b2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b6:	f7ff f967 	bl	8000688 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e2bb      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80013c8:	f7ff fd8f 	bl	8000eea <LL_RCC_MSI_IsReady>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f1      	bne.n	80013b6 <HAL_RCC_OscConfig+0x19e>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d05f      	beq.n	80014a2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1dc>
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d10d      	bne.n	800140a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d10a      	bne.n	800140a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	f7ff fcc9 	bl	8000d8a <LL_RCC_HSE_IsReady>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d050      	beq.n	80014a0 <HAL_RCC_OscConfig+0x288>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d14c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e29a      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800140a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x218>
 800142a:	f7ff fc92 	bl	8000d52 <LL_RCC_HSE_Enable>
 800142e:	e00d      	b.n	800144c <HAL_RCC_OscConfig+0x234>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001438:	d104      	bne.n	8001444 <HAL_RCC_OscConfig+0x22c>
 800143a:	f7ff fc5d 	bl	8000cf8 <LL_RCC_HSE_EnableTcxo>
 800143e:	f7ff fc88 	bl	8000d52 <LL_RCC_HSE_Enable>
 8001442:	e003      	b.n	800144c <HAL_RCC_OscConfig+0x234>
 8001444:	f7ff fc93 	bl	8000d6e <LL_RCC_HSE_Disable>
 8001448:	f7ff fc64 	bl	8000d14 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d012      	beq.n	800147a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff f918 	bl	8000688 <HAL_GetTick>
 8001458:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff f914 	bl	8000688 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e268      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800146e:	f7ff fc8c 	bl	8000d8a <LL_RCC_HSE_IsReady>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f1      	beq.n	800145c <HAL_RCC_OscConfig+0x244>
 8001478:	e013      	b.n	80014a2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff f905 	bl	8000688 <HAL_GetTick>
 800147e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001482:	f7ff f901 	bl	8000688 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e255      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001494:	f7ff fc79 	bl	8000d8a <LL_RCC_HSE_IsReady>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f1      	bne.n	8001482 <HAL_RCC_OscConfig+0x26a>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d04b      	beq.n	8001546 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2a8>
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d113      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d110      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c0:	f7ff fc90 	bl	8000de4 <LL_RCC_HSI_IsReady>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2be>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e234      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc93 	bl	8000e06 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e0:	e031      	b.n	8001546 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d019      	beq.n	800151e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ea:	f7ff fc5f 	bl	8000dac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff f8cb 	bl	8000688 <HAL_GetTick>
 80014f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff f8c7 	bl	8000688 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e21b      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001508:	f7ff fc6c 	bl	8000de4 <LL_RCC_HSI_IsReady>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f1      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fc75 	bl	8000e06 <LL_RCC_HSI_SetCalibTrimming>
 800151c:	e013      	b.n	8001546 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	f7ff fc53 	bl	8000dc8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff f8b1 	bl	8000688 <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff f8ad 	bl	8000688 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e201      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800153c:	f7ff fc52 	bl	8000de4 <LL_RCC_HSI_IsReady>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d06e      	beq.n	8001630 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d056      	beq.n	8001608 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001562:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	429a      	cmp	r2, r3
 8001570:	d031      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1da      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8001594:	f7ff fc6c 	bl	8000e70 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001598:	f7ff f876 	bl	8000688 <HAL_GetTick>
 800159c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff f872 	bl	8000688 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1c6      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80015b2:	f7ff fc6d 	bl	8000e90 <LL_RCC_LSI_IsReady>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f1      	bne.n	80015a0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c4:	f023 0210 	bic.w	r2, r3, #16
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d0:	4313      	orrs	r3, r2
 80015d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d6:	f7ff fc3b 	bl	8000e50 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015da:	f7ff f855 	bl	8000688 <HAL_GetTick>
 80015de:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff f851 	bl	8000688 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b11      	cmp	r3, #17
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1a5      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80015f4:	f7ff fc4c 	bl	8000e90 <LL_RCC_LSI_IsReady>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f1      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3ca>
 80015fe:	e017      	b.n	8001630 <HAL_RCC_OscConfig+0x418>
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000010 	.word	0x20000010
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001608:	f7ff fc32 	bl	8000e70 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff f83c 	bl	8000688 <HAL_GetTick>
 8001610:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f838 	bl	8000688 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b11      	cmp	r3, #17
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e18c      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001626:	f7ff fc33 	bl	8000e90 <LL_RCC_LSI_IsReady>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f1      	bne.n	8001614 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80d8 	beq.w	80017ee <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800163e:	f7ff fb49 	bl	8000cd4 <LL_PWR_IsEnabledBkUpAccess>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d113      	bne.n	8001670 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001648:	f7ff fb00 	bl	8000c4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164c:	f7ff f81c 	bl	8000688 <HAL_GetTick>
 8001650:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff f818 	bl	8000688 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e16c      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001666:	f7ff fb35 	bl	8000cd4 <LL_PWR_IsEnabledBkUpAccess>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f1      	beq.n	8001654 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d07b      	beq.n	8001770 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b85      	cmp	r3, #133	; 0x85
 800167e:	d003      	beq.n	8001688 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d109      	bne.n	800169c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7fe fff4 	bl	8000688 <HAL_GetTick>
 80016a0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7fe ffe6 	bl	8000688 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e138      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80016ce:	f7ff fbae 	bl	8000e2e <LL_RCC_LSE_IsReady>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b81      	cmp	r3, #129	; 0x81
 80016de:	d003      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b85      	cmp	r3, #133	; 0x85
 80016e6:	d121      	bne.n	800172c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7fe ffce 	bl	8000688 <HAL_GetTick>
 80016ec:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7fe ffc0 	bl	8000688 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e112      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0ec      	beq.n	8001704 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800172a:	e060      	b.n	80017ee <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7fe ffac 	bl	8000688 <HAL_GetTick>
 8001730:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7fe ff9e 	bl	8000688 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0f0      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ec      	bne.n	8001748 <HAL_RCC_OscConfig+0x530>
 800176e:	e03e      	b.n	80017ee <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7fe ff8a 	bl	8000688 <HAL_GetTick>
 8001774:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7fe ff7c 	bl	8000688 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0ce      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ec      	bne.n	800178c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7fe ff69 	bl	8000688 <HAL_GetTick>
 80017b6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe ff5b 	bl	8000688 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0ad      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80017e4:	f7ff fb23 	bl	8000e2e <LL_RCC_LSE_IsReady>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ef      	bne.n	80017ce <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80a3 	beq.w	800193e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d076      	beq.n	80018ec <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	2b02      	cmp	r3, #2
 8001804:	d14b      	bne.n	800189e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	f7ff fc63 	bl	80010d0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7fe ff3d 	bl	8000688 <HAL_GetTick>
 800180e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001812:	f7fe ff39 	bl	8000688 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b0a      	cmp	r3, #10
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e08d      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001824:	f7ff fc62 	bl	80010ec <LL_RCC_PLL_IsReady>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f1      	bne.n	8001812 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x730>)
 8001836:	4013      	ands	r3, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001840:	4311      	orrs	r1, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001846:	0212      	lsls	r2, r2, #8
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001854:	4311      	orrs	r1, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800185a:	430a      	orrs	r2, r1
 800185c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001860:	4313      	orrs	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001864:	f7ff fc26 	bl	80010b4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7fe ff06 	bl	8000688 <HAL_GetTick>
 800187c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7fe ff02 	bl	8000688 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b0a      	cmp	r3, #10
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e056      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001892:	f7ff fc2b 	bl	80010ec <LL_RCC_PLL_IsReady>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f1      	beq.n	8001880 <HAL_RCC_OscConfig+0x668>
 800189c:	e04f      	b.n	800193e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	f7ff fc17 	bl	80010d0 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ac:	f023 0303 	bic.w	r3, r3, #3
 80018b0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018bc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7fe fedf 	bl	8000688 <HAL_GetTick>
 80018ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7fe fedb 	bl	8000688 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b0a      	cmp	r3, #10
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e02f      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80018e0:	f7ff fc04 	bl	80010ec <LL_RCC_PLL_IsReady>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f1      	bne.n	80018ce <HAL_RCC_OscConfig+0x6b6>
 80018ea:	e028      	b.n	800193e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e023      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	429a      	cmp	r2, r3
 800190c:	d115      	bne.n	800193a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	429a      	cmp	r2, r3
 800191a:	d10e      	bne.n	800193a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	429a      	cmp	r2, r3
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	429a      	cmp	r2, r3
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	11c1808c 	.word	0x11c1808c

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e12c      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b98      	ldr	r3, [pc, #608]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d91b      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b95      	ldr	r3, [pc, #596]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0207 	bic.w	r2, r3, #7
 8001976:	4993      	ldr	r1, [pc, #588]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800197e:	f7fe fe83 	bl	8000688 <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001984:	e008      	b.n	8001998 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001986:	f7fe fe7f 	bl	8000688 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e110      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001998:	4b8a      	ldr	r3, [pc, #552]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb00 	bl	8000fbc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019bc:	f7fe fe64 	bl	8000688 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019c4:	f7fe fe60 	bl	8000688 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0f1      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019d6:	f7ff fbc7 	bl	8001168 <LL_RCC_IsActiveFlag_HPRE>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f1      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d016      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff faf6 	bl	8000fe2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019f6:	f7fe fe47 	bl	8000688 <HAL_GetTick>
 80019fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019fe:	f7fe fe43 	bl	8000688 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e0d4      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a10:	f7ff fbbb 	bl	800118a <LL_RCC_IsActiveFlag_C2HPRE>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f1      	beq.n	80019fe <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff faee 	bl	800100c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a30:	f7fe fe2a 	bl	8000688 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a38:	f7fe fe26 	bl	8000688 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0b7      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a4a:	f7ff fbb0 	bl	80011ae <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f1      	beq.n	8001a38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d016      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fae7 	bl	8001038 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a6a:	f7fe fe0d 	bl	8000688 <HAL_GetTick>
 8001a6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a72:	f7fe fe09 	bl	8000688 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e09a      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a84:	f7ff fba5 	bl	80011d2 <LL_RCC_IsActiveFlag_PPRE1>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f1      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d017      	beq.n	8001aca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fadc 	bl	800105e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001aa6:	f7fe fdef 	bl	8000688 <HAL_GetTick>
 8001aaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aae:	f7fe fdeb 	bl	8000688 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e07c      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ac0:	f7ff fb98 	bl	80011f4 <LL_RCC_IsActiveFlag_PPRE2>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f1      	beq.n	8001aae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d043      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ade:	f7ff f954 	bl	8000d8a <LL_RCC_HSE_IsReady>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d11e      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e066      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001af4:	f7ff fafa 	bl	80010ec <LL_RCC_PLL_IsReady>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d113      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e05b      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b0a:	f7ff f9ee 	bl	8000eea <LL_RCC_MSI_IsReady>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d108      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e050      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b18:	f7ff f964 	bl	8000de4 <LL_RCC_HSI_IsReady>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e049      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fa28 	bl	8000f80 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b30:	f7fe fdaa 	bl	8000688 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7fe fda6 	bl	8000688 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e035      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	f7ff fa2a 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001b52:	4602      	mov	r2, r0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d1ec      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d21b      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 0207 	bic.w	r2, r3, #7
 8001b74:	4913      	ldr	r1, [pc, #76]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7c:	f7fe fd84 	bl	8000688 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b84:	f7fe fd80 	bl	8000688 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e011      	b.n	8001bba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x278>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1ef      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ba4:	f000 f8b4 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_RCC_ClockConfig+0x27c>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_RCC_ClockConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fd1c 	bl	80005f0 <HAL_InitTick>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	58004000 	.word	0x58004000
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	20000010 	.word	0x20000010

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	f7ff f9e2 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001be2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be4:	f7ff fab5 	bl	8001152 <LL_RCC_PLL_GetMainSource>
 8001be8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x2c>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d139      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d136      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001bfc:	f7ff f985 	bl	8000f0a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x62>
 8001c06:	f7ff f980 	bl	8000f0a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x4e>
 8001c10:	f7ff f98b 	bl	8000f2a <LL_RCC_MSI_GetRange>
 8001c14:	4603      	mov	r3, r0
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	e005      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x5a>
 8001c1e:	f7ff f98f 	bl	8000f40 <LL_RCC_MSI_GetRangeAfterStandby>
 8001c22:	4603      	mov	r3, r0
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	4a36      	ldr	r2, [pc, #216]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x8c>
 8001c32:	f7ff f96a 	bl	8000f0a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_GetSysClockFreq+0x7a>
 8001c3c:	f7ff f975 	bl	8000f2a <LL_RCC_MSI_GetRange>
 8001c40:	4603      	mov	r3, r0
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	e005      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x86>
 8001c4a:	f7ff f979 	bl	8000f40 <LL_RCC_MSI_GetRangeAfterStandby>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d115      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c68:	e012      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00c      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d109      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c7c:	f7ff f858 	bl	8000d30 <LL_RCC_HSE_IsEnabledDiv2>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e001      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c8e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c90:	f7ff f989 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d12f      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c9a:	f7ff fa5a 	bl	8001152 <LL_RCC_PLL_GetMainSource>
 8001c9e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0xde>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d003      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xe4>
 8001cac:	e00d      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cb0:	60fb      	str	r3, [r7, #12]
        break;
 8001cb2:	e00d      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001cb4:	f7ff f83c 	bl	8000d30 <LL_RCC_HSE_IsEnabledDiv2>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cc6:	60fb      	str	r3, [r7, #12]
        break;
 8001cc8:	e002      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	60fb      	str	r3, [r7, #12]
        break;
 8001cce:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001cd0:	f7ff fa1d 	bl	800110e <LL_RCC_PLL_GetN>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	fb03 f402 	mul.w	r4, r3, r2
 8001cdc:	f7ff fa2e 	bl	800113c <LL_RCC_PLL_GetDivider>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	fbb4 f4f3 	udiv	r4, r4, r3
 8001cea:	f7ff fa1c 	bl	8001126 <LL_RCC_PLL_GetR>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	0f5b      	lsrs	r3, r3, #29
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	fbb4 f3f3 	udiv	r3, r4, r3
 8001cf8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001cfa:	697b      	ldr	r3, [r7, #20]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}
 8001d04:	080026ec 	.word	0x080026ec
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	01e84800 	.word	0x01e84800

08001d10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b598      	push	{r3, r4, r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d14:	f7ff ff5c 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001d18:	4604      	mov	r4, r0
 8001d1a:	f7ff f9b3 	bl	8001084 <LL_RCC_GetAHBPrescaler>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x24>)
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd98      	pop	{r3, r4, r7, pc}
 8001d34:	080026ac 	.word	0x080026ac

08001d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001d50:	f7ff f9a3 	bl	800109a <LL_RCC_GetAHB3Prescaler>
 8001d54:	4603      	mov	r3, r0
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0c9c      	lsrs	r4, r3, #18
 8001d74:	f7fe ff78 	bl	8000c68 <HAL_PWREx_GetVoltageRange>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f000 f80b 	bl	8001d98 <RCC_SetFlashLatency>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	080026ec 	.word	0x080026ec
 8001d90:	080026ac 	.word	0x080026ac
 8001d94:	431bde83 	.word	0x431bde83

08001d98 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	; 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <RCC_SetFlashLatency+0xfc>)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dac:	6018      	str	r0, [r3, #0]
 8001dae:	3304      	adds	r3, #4
 8001db0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001db2:	4a39      	ldr	r2, [pc, #228]	; (8001e98 <RCC_SetFlashLatency+0x100>)
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dbc:	6018      	str	r0, [r3, #0]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001dc2:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <RCC_SetFlashLatency+0x104>)
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd8:	d11d      	bne.n	8001e16 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dde:	e016      	b.n	8001e0e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001de8:	4413      	add	r3, r2
 8001dea:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d808      	bhi.n	8001e08 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dfe:	4413      	add	r3, r2
 8001e00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e06:	e023      	b.n	8001e50 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d9e5      	bls.n	8001de0 <RCC_SetFlashLatency+0x48>
 8001e14:	e01c      	b.n	8001e50 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1a:	e016      	b.n	8001e4a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e24:	4413      	add	r3, r2
 8001e26:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d808      	bhi.n	8001e44 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e42:	e005      	b.n	8001e50 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	3301      	adds	r3, #1
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d9e5      	bls.n	8001e1c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <RCC_SetFlashLatency+0x108>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 0207 	bic.w	r2, r3, #7
 8001e58:	4911      	ldr	r1, [pc, #68]	; (8001ea0 <RCC_SetFlashLatency+0x108>)
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e60:	f7fe fc12 	bl	8000688 <HAL_GetTick>
 8001e64:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e66:	e008      	b.n	8001e7a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e68:	f7fe fc0e 	bl	8000688 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e007      	b.n	8001e8a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <RCC_SetFlashLatency+0x108>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1ef      	bne.n	8001e68 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3738      	adds	r7, #56	; 0x38
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	08002688 	.word	0x08002688
 8001e98:	08002690 	.word	0x08002690
 8001e9c:	08002698 	.word	0x08002698
 8001ea0:	58004000 	.word	0x58004000

08001ea4 <LL_RCC_LSE_IsReady>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d101      	bne.n	8001ebc <LL_RCC_LSE_IsReady+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_RCC_LSE_IsReady+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_SetUSARTClockSource>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	43db      	mvns	r3, r3
 8001edc:	401a      	ands	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <LL_RCC_SetI2SClockSource>:
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <LL_RCC_SetLPUARTClockSource>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <LL_RCC_SetI2CClockSource>:
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_SetLPTIMClockSource>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <LL_RCC_SetRNGClockSource>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <LL_RCC_SetADCClockSource>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <LL_RCC_SetRTCClockSource>:
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800201c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <LL_RCC_GetRTCClockSource>:
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <LL_RCC_ForceBackupDomainReset>:
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <LL_RCC_ReleaseBackupDomainReset>:
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002098:	2300      	movs	r3, #0
 800209a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800209c:	2300      	movs	r3, #0
 800209e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d058      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80020ac:	f7fe fdce 	bl	8000c4c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b0:	f7fe faea 	bl	8000688 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80020b6:	e009      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7fe fae6 	bl	8000688 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d902      	bls.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	74fb      	strb	r3, [r7, #19]
        break;
 80020ca:	e006      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80020cc:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d13c      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80020e0:	f7ff ffa7 	bl	8002032 <LL_RCC_GetRTCClockSource>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d00f      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020fc:	f7ff ffa5 	bl	800204a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002100:	f7ff ffb3 	bl	800206a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d014      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fab6 	bl	8000688 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800211e:	e00b      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7fe fab2 	bl	8000688 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d902      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	74fb      	strb	r3, [r7, #19]
            break;
 8002136:	e004      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002138:	f7ff feb4 	bl	8001ea4 <LL_RCC_LSE_IsReady>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d1ee      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5b 	bl	8002008 <LL_RCC_SetRTCClockSource>
 8002152:	e004      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
 8002158:	e001      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fea9 	bl	8001ec6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe9e 	bl	8001ec6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fec0 	bl	8001f20 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fee6 	bl	8001f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fedb 	bl	8001f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fed0 	bl	8001f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fea9 	bl	8001f4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fe9e 	bl	8001f4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fe93 	bl	8001f4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d011      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fe5e 	bl	8001ef6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d107      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fea5 	bl	8001fb4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800227c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002280:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fea3 	bl	8001fde <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a0:	d107      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80022b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	58000400 	.word	0x58000400

080022c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e094      	b.n	80023fc <HAL_RNG_Init+0x13c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7a5b      	ldrb	r3, [r3, #9]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe f8b4 	bl	8000450 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0204 	bic.w	r2, r2, #4
 80022fc:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002308:	f023 0320 	bic.w	r3, r3, #32
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6852      	ldr	r2, [r2, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800231a:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a38      	ldr	r2, [pc, #224]	; (8002404 <HAL_RNG_Init+0x144>)
 8002322:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f64a 2274 	movw	r2, #43636	; 0xaa74
 800232c:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800233c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800233e:	f7fe f9a3 	bl	8000688 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8002344:	e016      	b.n	8002374 <HAL_RNG_Init+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002346:	f7fe f99f 	bl	8000688 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d90f      	bls.n	8002374 <HAL_RNG_Init+0xb4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d107      	bne.n	8002374 <HAL_RNG_Init+0xb4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2202      	movs	r2, #2
 800236e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e043      	b.n	80023fc <HAL_RNG_Init+0x13c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d0e0      	beq.n	8002346 <HAL_RNG_Init+0x86>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0204 	orr.w	r2, r2, #4
 8002392:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	d104      	bne.n	80023ac <HAL_RNG_Init+0xec>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2204      	movs	r2, #4
 80023a6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e027      	b.n	80023fc <HAL_RNG_Init+0x13c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80023ac:	f7fe f96c 	bl	8000688 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80023b2:	e015      	b.n	80023e0 <HAL_RNG_Init+0x120>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80023b4:	f7fe f968 	bl	8000688 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d90e      	bls.n	80023e0 <HAL_RNG_Init+0x120>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <HAL_RNG_Init+0x120>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2204      	movs	r2, #4
 80023d4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e00d      	b.n	80023fc <HAL_RNG_Init+0x13c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d0e2      	beq.n	80023b4 <HAL_RNG_Init+0xf4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	17590abc 	.word	0x17590abc

08002408 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7a1b      	ldrb	r3, [r3, #8]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_RNG_GenerateRandomNumber+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e06b      	b.n	80024fa <HAL_RNG_GenerateRandomNumber+0xf2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7a5b      	ldrb	r3, [r3, #9]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d15a      	bne.n	80024e8 <HAL_RNG_GenerateRandomNumber+0xe0>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d10c      	bne.n	8002460 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2208      	movs	r2, #8
 800244a:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f861 	bl	8002514 <RNG_RecoverSeedError>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	e04c      	b.n	80024fa <HAL_RNG_GenerateRandomNumber+0xf2>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe f912 	bl	8000688 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002466:	e018      	b.n	800249a <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002468:	f7fe f90e 	bl	8000688 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d911      	bls.n	800249a <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d00a      	beq.n	800249a <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e02f      	b.n	80024fa <HAL_RNG_GenerateRandomNumber+0xf2>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d1df      	bne.n	8002468 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d10b      	bne.n	80024d8 <HAL_RNG_GenerateRandomNumber+0xd0>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2208      	movs	r2, #8
 80024c4:	60da      	str	r2, [r3, #12]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e003      	b.n	80024e0 <HAL_RNG_GenerateRandomNumber+0xd8>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	725a      	strb	r2, [r3, #9]
 80024e6:	e004      	b.n	80024f2 <HAL_RNG_GenerateRandomNumber+0xea>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2204      	movs	r2, #4
 80024ec:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	721a      	strb	r2, [r3, #8]

  return status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b04      	cmp	r3, #4
 800252c:	d008      	beq.n	8002540 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	e05f      	b.n	8002600 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800254e:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800255e:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 8002560:	2302      	movs	r3, #2
 8002562:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3b01      	subs	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d110      	bne.n	8002592 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffba 	bl	8002502 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e03d      	b.n	800260e <RNG_RecoverSeedError+0xfa>
      }
    }
    while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a0:	d0e0      	beq.n	8002564 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d107      	bne.n	80025c0 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025be:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 80025c0:	2302      	movs	r3, #2
 80025c2:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d110      	bne.n	80025f2 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f043 0202 	orr.w	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff8a 	bl	8002502 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00d      	b.n	800260e <RNG_RecoverSeedError+0xfa>
      }
    }
    while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d0e1      	beq.n	80025c4 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f023 0208 	bic.w	r2, r3, #8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <__libc_init_array>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	4d0d      	ldr	r5, [pc, #52]	; (8002650 <__libc_init_array+0x38>)
 800261c:	4c0d      	ldr	r4, [pc, #52]	; (8002654 <__libc_init_array+0x3c>)
 800261e:	1b64      	subs	r4, r4, r5
 8002620:	10a4      	asrs	r4, r4, #2
 8002622:	2600      	movs	r6, #0
 8002624:	42a6      	cmp	r6, r4
 8002626:	d109      	bne.n	800263c <__libc_init_array+0x24>
 8002628:	4d0b      	ldr	r5, [pc, #44]	; (8002658 <__libc_init_array+0x40>)
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <__libc_init_array+0x44>)
 800262c:	f000 f820 	bl	8002670 <_init>
 8002630:	1b64      	subs	r4, r4, r5
 8002632:	10a4      	asrs	r4, r4, #2
 8002634:	2600      	movs	r6, #0
 8002636:	42a6      	cmp	r6, r4
 8002638:	d105      	bne.n	8002646 <__libc_init_array+0x2e>
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002640:	4798      	blx	r3
 8002642:	3601      	adds	r6, #1
 8002644:	e7ee      	b.n	8002624 <__libc_init_array+0xc>
 8002646:	f855 3b04 	ldr.w	r3, [r5], #4
 800264a:	4798      	blx	r3
 800264c:	3601      	adds	r6, #1
 800264e:	e7f2      	b.n	8002636 <__libc_init_array+0x1e>
 8002650:	08002730 	.word	0x08002730
 8002654:	08002730 	.word	0x08002730
 8002658:	08002730 	.word	0x08002730
 800265c:	08002734 	.word	0x08002734

08002660 <memset>:
 8002660:	4402      	add	r2, r0
 8002662:	4603      	mov	r3, r0
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <memset+0xa>
 8002668:	4770      	bx	lr
 800266a:	f803 1b01 	strb.w	r1, [r3], #1
 800266e:	e7f9      	b.n	8002664 <memset+0x4>

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
